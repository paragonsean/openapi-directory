/*
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateCertificateAuthorityAuditReportRequest;
import org.openapitools.client.model.CreateCertificateAuthorityAuditReportResponse;
import org.openapitools.client.model.CreateCertificateAuthorityRequest;
import org.openapitools.client.model.CreateCertificateAuthorityResponse;
import org.openapitools.client.model.CreatePermissionRequest;
import org.openapitools.client.model.DeleteCertificateAuthorityRequest;
import org.openapitools.client.model.DeletePermissionRequest;
import org.openapitools.client.model.DeletePolicyRequest;
import org.openapitools.client.model.DescribeCertificateAuthorityAuditReportRequest;
import org.openapitools.client.model.DescribeCertificateAuthorityAuditReportResponse;
import org.openapitools.client.model.DescribeCertificateAuthorityRequest;
import org.openapitools.client.model.DescribeCertificateAuthorityResponse;
import org.openapitools.client.model.GetCertificateAuthorityCertificateRequest;
import org.openapitools.client.model.GetCertificateAuthorityCertificateResponse;
import org.openapitools.client.model.GetCertificateAuthorityCsrRequest;
import org.openapitools.client.model.GetCertificateAuthorityCsrResponse;
import org.openapitools.client.model.GetCertificateRequest;
import org.openapitools.client.model.GetCertificateResponse;
import org.openapitools.client.model.GetPolicyRequest;
import org.openapitools.client.model.GetPolicyResponse;
import org.openapitools.client.model.ImportCertificateAuthorityCertificateRequest;
import org.openapitools.client.model.IssueCertificateRequest;
import org.openapitools.client.model.IssueCertificateResponse;
import org.openapitools.client.model.ListCertificateAuthoritiesRequest;
import org.openapitools.client.model.ListCertificateAuthoritiesResponse;
import org.openapitools.client.model.ListPermissionsRequest;
import org.openapitools.client.model.ListPermissionsResponse;
import org.openapitools.client.model.ListTagsRequest;
import org.openapitools.client.model.ListTagsResponse;
import org.openapitools.client.model.PutPolicyRequest;
import org.openapitools.client.model.RestoreCertificateAuthorityRequest;
import org.openapitools.client.model.RevokeCertificateRequest;
import org.openapitools.client.model.TagCertificateAuthorityRequest;
import org.openapitools.client.model.UntagCertificateAuthorityRequest;
import org.openapitools.client.model.UpdateCertificateAuthorityRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCertificateAuthority
     * @param xAmzTarget  (required)
     * @param createCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCertificateAuthorityCall(String xAmzTarget, CreateCertificateAuthorityRequest createCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCertificateAuthorityRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.CreateCertificateAuthority";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCertificateAuthorityValidateBeforeCall(String xAmzTarget, CreateCertificateAuthorityRequest createCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createCertificateAuthority(Async)");
        }

        // verify the required parameter 'createCertificateAuthorityRequest' is set
        if (createCertificateAuthorityRequest == null) {
            throw new ApiException("Missing the required parameter 'createCertificateAuthorityRequest' when calling createCertificateAuthority(Async)");
        }

        return createCertificateAuthorityCall(xAmzTarget, createCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a root or subordinate private certificate authority (CA). You must specify the CA configuration, an optional configuration for Online Certificate Status Protocol (OCSP) and/or a certificate revocation list (CRL), the CA type, and an optional idempotency token to avoid accidental creation of multiple CAs. The CA configuration specifies the name of the algorithm and key size to be used to create the CA private key, the type of signing algorithm that the CA uses, and X.500 subject information. The OCSP configuration can optionally specify a custom URL for the OCSP responder. The CRL configuration specifies the CRL expiration period in days (the validity period of the CRL), the Amazon S3 bucket that will contain the CRL, and a CNAME alias for the S3 bucket that is included in certificates issued by the CA. If successful, this action returns the Amazon Resource Name (ARN) of the CA.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#s3-policies\&quot;&gt;Access policies for CRLs in Amazon S3&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#crl-encryption\&quot;&gt;Encrypting Your CRLs&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateCertificateAuthorityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateCertificateAuthorityResponse createCertificateAuthority(String xAmzTarget, CreateCertificateAuthorityRequest createCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateCertificateAuthorityResponse> localVarResp = createCertificateAuthorityWithHttpInfo(xAmzTarget, createCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a root or subordinate private certificate authority (CA). You must specify the CA configuration, an optional configuration for Online Certificate Status Protocol (OCSP) and/or a certificate revocation list (CRL), the CA type, and an optional idempotency token to avoid accidental creation of multiple CAs. The CA configuration specifies the name of the algorithm and key size to be used to create the CA private key, the type of signing algorithm that the CA uses, and X.500 subject information. The OCSP configuration can optionally specify a custom URL for the OCSP responder. The CRL configuration specifies the CRL expiration period in days (the validity period of the CRL), the Amazon S3 bucket that will contain the CRL, and a CNAME alias for the S3 bucket that is included in certificates issued by the CA. If successful, this action returns the Amazon Resource Name (ARN) of the CA.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#s3-policies\&quot;&gt;Access policies for CRLs in Amazon S3&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#crl-encryption\&quot;&gt;Encrypting Your CRLs&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateCertificateAuthorityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCertificateAuthorityResponse> createCertificateAuthorityWithHttpInfo(String xAmzTarget, CreateCertificateAuthorityRequest createCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createCertificateAuthorityValidateBeforeCall(xAmzTarget, createCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateCertificateAuthorityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a root or subordinate private certificate authority (CA). You must specify the CA configuration, an optional configuration for Online Certificate Status Protocol (OCSP) and/or a certificate revocation list (CRL), the CA type, and an optional idempotency token to avoid accidental creation of multiple CAs. The CA configuration specifies the name of the algorithm and key size to be used to create the CA private key, the type of signing algorithm that the CA uses, and X.500 subject information. The OCSP configuration can optionally specify a custom URL for the OCSP responder. The CRL configuration specifies the CRL expiration period in days (the validity period of the CRL), the Amazon S3 bucket that will contain the CRL, and a CNAME alias for the S3 bucket that is included in certificates issued by the CA. If successful, this action returns the Amazon Resource Name (ARN) of the CA.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#s3-policies\&quot;&gt;Access policies for CRLs in Amazon S3&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#crl-encryption\&quot;&gt;Encrypting Your CRLs&lt;/a&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param createCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidPolicyException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCertificateAuthorityAsync(String xAmzTarget, CreateCertificateAuthorityRequest createCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateCertificateAuthorityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCertificateAuthorityValidateBeforeCall(xAmzTarget, createCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateCertificateAuthorityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCertificateAuthorityAuditReport
     * @param xAmzTarget  (required)
     * @param createCertificateAuthorityAuditReportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCertificateAuthorityAuditReportCall(String xAmzTarget, CreateCertificateAuthorityAuditReportRequest createCertificateAuthorityAuditReportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCertificateAuthorityAuditReportRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.CreateCertificateAuthorityAuditReport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCertificateAuthorityAuditReportValidateBeforeCall(String xAmzTarget, CreateCertificateAuthorityAuditReportRequest createCertificateAuthorityAuditReportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createCertificateAuthorityAuditReport(Async)");
        }

        // verify the required parameter 'createCertificateAuthorityAuditReportRequest' is set
        if (createCertificateAuthorityAuditReportRequest == null) {
            throw new ApiException("Missing the required parameter 'createCertificateAuthorityAuditReportRequest' when calling createCertificateAuthorityAuditReport(Async)");
        }

        return createCertificateAuthorityAuditReportCall(xAmzTarget, createCertificateAuthorityAuditReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an audit report that lists every time that your CA private key is used. The report is saved in the Amazon S3 bucket that you specify on input. The &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_IssueCertificate.html\&quot;&gt;IssueCertificate&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_RevokeCertificate.html\&quot;&gt;RevokeCertificate&lt;/a&gt; actions use the private key. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#s3-policies\&quot;&gt;Access policies for CRLs in Amazon S3&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/PcaAuditReport.html#audit-report-encryption\&quot;&gt;Encrypting Your Audit Reports&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can generate a maximum of one report every 30 minutes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createCertificateAuthorityAuditReportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateCertificateAuthorityAuditReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public CreateCertificateAuthorityAuditReportResponse createCertificateAuthorityAuditReport(String xAmzTarget, CreateCertificateAuthorityAuditReportRequest createCertificateAuthorityAuditReportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateCertificateAuthorityAuditReportResponse> localVarResp = createCertificateAuthorityAuditReportWithHttpInfo(xAmzTarget, createCertificateAuthorityAuditReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an audit report that lists every time that your CA private key is used. The report is saved in the Amazon S3 bucket that you specify on input. The &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_IssueCertificate.html\&quot;&gt;IssueCertificate&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_RevokeCertificate.html\&quot;&gt;RevokeCertificate&lt;/a&gt; actions use the private key. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#s3-policies\&quot;&gt;Access policies for CRLs in Amazon S3&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/PcaAuditReport.html#audit-report-encryption\&quot;&gt;Encrypting Your Audit Reports&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can generate a maximum of one report every 30 minutes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createCertificateAuthorityAuditReportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateCertificateAuthorityAuditReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCertificateAuthorityAuditReportResponse> createCertificateAuthorityAuditReportWithHttpInfo(String xAmzTarget, CreateCertificateAuthorityAuditReportRequest createCertificateAuthorityAuditReportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createCertificateAuthorityAuditReportValidateBeforeCall(xAmzTarget, createCertificateAuthorityAuditReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateCertificateAuthorityAuditReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an audit report that lists every time that your CA private key is used. The report is saved in the Amazon S3 bucket that you specify on input. The &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_IssueCertificate.html\&quot;&gt;IssueCertificate&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_RevokeCertificate.html\&quot;&gt;RevokeCertificate&lt;/a&gt; actions use the private key. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#s3-policies\&quot;&gt;Access policies for CRLs in Amazon S3&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Amazon Web Services Private CA assets that are stored in Amazon S3 can be protected with encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/PcaAuditReport.html#audit-report-encryption\&quot;&gt;Encrypting Your Audit Reports&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can generate a maximum of one report every 30 minutes.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createCertificateAuthorityAuditReportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCertificateAuthorityAuditReportAsync(String xAmzTarget, CreateCertificateAuthorityAuditReportRequest createCertificateAuthorityAuditReportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateCertificateAuthorityAuditReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCertificateAuthorityAuditReportValidateBeforeCall(xAmzTarget, createCertificateAuthorityAuditReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateCertificateAuthorityAuditReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPermission
     * @param xAmzTarget  (required)
     * @param createPermissionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PermissionAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPermissionCall(String xAmzTarget, CreatePermissionRequest createPermissionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPermissionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.CreatePermission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPermissionValidateBeforeCall(String xAmzTarget, CreatePermissionRequest createPermissionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createPermission(Async)");
        }

        // verify the required parameter 'createPermissionRequest' is set
        if (createPermissionRequest == null) {
            throw new ApiException("Missing the required parameter 'createPermissionRequest' when calling createPermission(Async)");
        }

        return createPermissionCall(xAmzTarget, createPermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Grants one or more permissions on a private CA to the Certificate Manager (ACM) service principal (&lt;code&gt;acm.amazonaws.com&lt;/code&gt;). These permissions allow ACM to issue and renew ACM certificates that reside in the same Amazon Web Services account as the CA.&lt;/p&gt; &lt;p&gt;You can list current permissions with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListPermissions.html\&quot;&gt;ListPermissions&lt;/a&gt; action and revoke them with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePermission.html\&quot;&gt;DeletePermission&lt;/a&gt; action.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Permissions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the private CA and the certificates it issues reside in the same account, you can use &lt;code&gt;CreatePermission&lt;/code&gt; to grant permissions for ACM to carry out automatic certificate renewals.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For automatic certificate renewal to succeed, the ACM service principal needs permissions to create, retrieve, and list certificates.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the private CA and the ACM certificates reside in different accounts, then permissions cannot be used to enable automatic renewals. Instead, the ACM certificate owner must set up a resource-based policy to enable cross-account issuance and renewals. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param createPermissionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PermissionAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public void createPermission(String xAmzTarget, CreatePermissionRequest createPermissionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        createPermissionWithHttpInfo(xAmzTarget, createPermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Grants one or more permissions on a private CA to the Certificate Manager (ACM) service principal (&lt;code&gt;acm.amazonaws.com&lt;/code&gt;). These permissions allow ACM to issue and renew ACM certificates that reside in the same Amazon Web Services account as the CA.&lt;/p&gt; &lt;p&gt;You can list current permissions with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListPermissions.html\&quot;&gt;ListPermissions&lt;/a&gt; action and revoke them with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePermission.html\&quot;&gt;DeletePermission&lt;/a&gt; action.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Permissions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the private CA and the certificates it issues reside in the same account, you can use &lt;code&gt;CreatePermission&lt;/code&gt; to grant permissions for ACM to carry out automatic certificate renewals.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For automatic certificate renewal to succeed, the ACM service principal needs permissions to create, retrieve, and list certificates.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the private CA and the ACM certificates reside in different accounts, then permissions cannot be used to enable automatic renewals. Instead, the ACM certificate owner must set up a resource-based policy to enable cross-account issuance and renewals. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param createPermissionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PermissionAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createPermissionWithHttpInfo(String xAmzTarget, CreatePermissionRequest createPermissionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createPermissionValidateBeforeCall(xAmzTarget, createPermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Grants one or more permissions on a private CA to the Certificate Manager (ACM) service principal (&lt;code&gt;acm.amazonaws.com&lt;/code&gt;). These permissions allow ACM to issue and renew ACM certificates that reside in the same Amazon Web Services account as the CA.&lt;/p&gt; &lt;p&gt;You can list current permissions with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListPermissions.html\&quot;&gt;ListPermissions&lt;/a&gt; action and revoke them with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePermission.html\&quot;&gt;DeletePermission&lt;/a&gt; action.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Permissions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the private CA and the certificates it issues reside in the same account, you can use &lt;code&gt;CreatePermission&lt;/code&gt; to grant permissions for ACM to carry out automatic certificate renewals.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For automatic certificate renewal to succeed, the ACM service principal needs permissions to create, retrieve, and list certificates.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the private CA and the ACM certificates reside in different accounts, then permissions cannot be used to enable automatic renewals. Instead, the ACM certificate owner must set up a resource-based policy to enable cross-account issuance and renewals. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param createPermissionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> PermissionAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPermissionAsync(String xAmzTarget, CreatePermissionRequest createPermissionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPermissionValidateBeforeCall(xAmzTarget, createPermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCertificateAuthority
     * @param xAmzTarget  (required)
     * @param deleteCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCertificateAuthorityCall(String xAmzTarget, DeleteCertificateAuthorityRequest deleteCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteCertificateAuthorityRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.DeleteCertificateAuthority";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCertificateAuthorityValidateBeforeCall(String xAmzTarget, DeleteCertificateAuthorityRequest deleteCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteCertificateAuthority(Async)");
        }

        // verify the required parameter 'deleteCertificateAuthorityRequest' is set
        if (deleteCertificateAuthorityRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteCertificateAuthorityRequest' when calling deleteCertificateAuthority(Async)");
        }

        return deleteCertificateAuthorityCall(xAmzTarget, deleteCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a private certificate authority (CA). You must provide the Amazon Resource Name (ARN) of the private CA that you want to delete. You can find the ARN by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html\&quot;&gt;ListCertificateAuthorities&lt;/a&gt; action. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Deleting a CA will invalidate other CAs and certificates below it in your CA hierarchy.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Before you can delete a CA that you have created and activated, you must disable it. To do this, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html\&quot;&gt;UpdateCertificateAuthority&lt;/a&gt; action and set the &lt;b&gt;CertificateAuthorityStatus&lt;/b&gt; parameter to &lt;code&gt;DISABLED&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, you can delete a CA if you are waiting for it to be created (that is, the status of the CA is &lt;code&gt;CREATING&lt;/code&gt;). You can also delete it if the CA has been created but you haven&#39;t yet imported the signed certificate into Amazon Web Services Private CA (that is, the status of the CA is &lt;code&gt;PENDING_CERTIFICATE&lt;/code&gt;). &lt;/p&gt; &lt;p&gt;When you successfully call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeleteCertificateAuthority.html\&quot;&gt;DeleteCertificateAuthority&lt;/a&gt;, the CA&#39;s status changes to &lt;code&gt;DELETED&lt;/code&gt;. However, the CA won&#39;t be permanently deleted until the restoration period has passed. By default, if you do not set the &lt;code&gt;PermanentDeletionTimeInDays&lt;/code&gt; parameter, the CA remains restorable for 30 days. You can set the parameter from 7 to 30 days. The &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DescribeCertificateAuthority.html\&quot;&gt;DescribeCertificateAuthority&lt;/a&gt; action returns the time remaining in the restoration window of a private CA in the &lt;code&gt;DELETED&lt;/code&gt; state. To restore an eligible CA, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_RestoreCertificateAuthority.html\&quot;&gt;RestoreCertificateAuthority&lt;/a&gt; action.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCertificateAuthority(String xAmzTarget, DeleteCertificateAuthorityRequest deleteCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteCertificateAuthorityWithHttpInfo(xAmzTarget, deleteCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a private certificate authority (CA). You must provide the Amazon Resource Name (ARN) of the private CA that you want to delete. You can find the ARN by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html\&quot;&gt;ListCertificateAuthorities&lt;/a&gt; action. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Deleting a CA will invalidate other CAs and certificates below it in your CA hierarchy.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Before you can delete a CA that you have created and activated, you must disable it. To do this, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html\&quot;&gt;UpdateCertificateAuthority&lt;/a&gt; action and set the &lt;b&gt;CertificateAuthorityStatus&lt;/b&gt; parameter to &lt;code&gt;DISABLED&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, you can delete a CA if you are waiting for it to be created (that is, the status of the CA is &lt;code&gt;CREATING&lt;/code&gt;). You can also delete it if the CA has been created but you haven&#39;t yet imported the signed certificate into Amazon Web Services Private CA (that is, the status of the CA is &lt;code&gt;PENDING_CERTIFICATE&lt;/code&gt;). &lt;/p&gt; &lt;p&gt;When you successfully call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeleteCertificateAuthority.html\&quot;&gt;DeleteCertificateAuthority&lt;/a&gt;, the CA&#39;s status changes to &lt;code&gt;DELETED&lt;/code&gt;. However, the CA won&#39;t be permanently deleted until the restoration period has passed. By default, if you do not set the &lt;code&gt;PermanentDeletionTimeInDays&lt;/code&gt; parameter, the CA remains restorable for 30 days. You can set the parameter from 7 to 30 days. The &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DescribeCertificateAuthority.html\&quot;&gt;DescribeCertificateAuthority&lt;/a&gt; action returns the time remaining in the restoration window of a private CA in the &lt;code&gt;DELETED&lt;/code&gt; state. To restore an eligible CA, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_RestoreCertificateAuthority.html\&quot;&gt;RestoreCertificateAuthority&lt;/a&gt; action.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCertificateAuthorityWithHttpInfo(String xAmzTarget, DeleteCertificateAuthorityRequest deleteCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteCertificateAuthorityValidateBeforeCall(xAmzTarget, deleteCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a private certificate authority (CA). You must provide the Amazon Resource Name (ARN) of the private CA that you want to delete. You can find the ARN by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html\&quot;&gt;ListCertificateAuthorities&lt;/a&gt; action. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Deleting a CA will invalidate other CAs and certificates below it in your CA hierarchy.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Before you can delete a CA that you have created and activated, you must disable it. To do this, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html\&quot;&gt;UpdateCertificateAuthority&lt;/a&gt; action and set the &lt;b&gt;CertificateAuthorityStatus&lt;/b&gt; parameter to &lt;code&gt;DISABLED&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Additionally, you can delete a CA if you are waiting for it to be created (that is, the status of the CA is &lt;code&gt;CREATING&lt;/code&gt;). You can also delete it if the CA has been created but you haven&#39;t yet imported the signed certificate into Amazon Web Services Private CA (that is, the status of the CA is &lt;code&gt;PENDING_CERTIFICATE&lt;/code&gt;). &lt;/p&gt; &lt;p&gt;When you successfully call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeleteCertificateAuthority.html\&quot;&gt;DeleteCertificateAuthority&lt;/a&gt;, the CA&#39;s status changes to &lt;code&gt;DELETED&lt;/code&gt;. However, the CA won&#39;t be permanently deleted until the restoration period has passed. By default, if you do not set the &lt;code&gt;PermanentDeletionTimeInDays&lt;/code&gt; parameter, the CA remains restorable for 30 days. You can set the parameter from 7 to 30 days. The &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DescribeCertificateAuthority.html\&quot;&gt;DescribeCertificateAuthority&lt;/a&gt; action returns the time remaining in the restoration window of a private CA in the &lt;code&gt;DELETED&lt;/code&gt; state. To restore an eligible CA, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_RestoreCertificateAuthority.html\&quot;&gt;RestoreCertificateAuthority&lt;/a&gt; action.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCertificateAuthorityAsync(String xAmzTarget, DeleteCertificateAuthorityRequest deleteCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCertificateAuthorityValidateBeforeCall(xAmzTarget, deleteCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePermission
     * @param xAmzTarget  (required)
     * @param deletePermissionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePermissionCall(String xAmzTarget, DeletePermissionRequest deletePermissionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePermissionRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.DeletePermission";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePermissionValidateBeforeCall(String xAmzTarget, DeletePermissionRequest deletePermissionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deletePermission(Async)");
        }

        // verify the required parameter 'deletePermissionRequest' is set
        if (deletePermissionRequest == null) {
            throw new ApiException("Missing the required parameter 'deletePermissionRequest' when calling deletePermission(Async)");
        }

        return deletePermissionCall(xAmzTarget, deletePermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Revokes permissions on a private CA granted to the Certificate Manager (ACM) service principal (acm.amazonaws.com). &lt;/p&gt; &lt;p&gt;These permissions allow ACM to issue and renew ACM certificates that reside in the same Amazon Web Services account as the CA. If you revoke these permissions, ACM will no longer renew the affected certificates automatically.&lt;/p&gt; &lt;p&gt;Permissions can be granted with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreatePermission.html\&quot;&gt;CreatePermission&lt;/a&gt; action and listed with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListPermissions.html\&quot;&gt;ListPermissions&lt;/a&gt; action. &lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Permissions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the private CA and the certificates it issues reside in the same account, you can use &lt;code&gt;CreatePermission&lt;/code&gt; to grant permissions for ACM to carry out automatic certificate renewals.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For automatic certificate renewal to succeed, the ACM service principal needs permissions to create, retrieve, and list certificates.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the private CA and the ACM certificates reside in different accounts, then permissions cannot be used to enable automatic renewals. Instead, the ACM certificate owner must set up a resource-based policy to enable cross-account issuance and renewals. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param deletePermissionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public void deletePermission(String xAmzTarget, DeletePermissionRequest deletePermissionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deletePermissionWithHttpInfo(xAmzTarget, deletePermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Revokes permissions on a private CA granted to the Certificate Manager (ACM) service principal (acm.amazonaws.com). &lt;/p&gt; &lt;p&gt;These permissions allow ACM to issue and renew ACM certificates that reside in the same Amazon Web Services account as the CA. If you revoke these permissions, ACM will no longer renew the affected certificates automatically.&lt;/p&gt; &lt;p&gt;Permissions can be granted with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreatePermission.html\&quot;&gt;CreatePermission&lt;/a&gt; action and listed with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListPermissions.html\&quot;&gt;ListPermissions&lt;/a&gt; action. &lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Permissions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the private CA and the certificates it issues reside in the same account, you can use &lt;code&gt;CreatePermission&lt;/code&gt; to grant permissions for ACM to carry out automatic certificate renewals.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For automatic certificate renewal to succeed, the ACM service principal needs permissions to create, retrieve, and list certificates.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the private CA and the ACM certificates reside in different accounts, then permissions cannot be used to enable automatic renewals. Instead, the ACM certificate owner must set up a resource-based policy to enable cross-account issuance and renewals. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param deletePermissionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePermissionWithHttpInfo(String xAmzTarget, DeletePermissionRequest deletePermissionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deletePermissionValidateBeforeCall(xAmzTarget, deletePermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Revokes permissions on a private CA granted to the Certificate Manager (ACM) service principal (acm.amazonaws.com). &lt;/p&gt; &lt;p&gt;These permissions allow ACM to issue and renew ACM certificates that reside in the same Amazon Web Services account as the CA. If you revoke these permissions, ACM will no longer renew the affected certificates automatically.&lt;/p&gt; &lt;p&gt;Permissions can be granted with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreatePermission.html\&quot;&gt;CreatePermission&lt;/a&gt; action and listed with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListPermissions.html\&quot;&gt;ListPermissions&lt;/a&gt; action. &lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Permissions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the private CA and the certificates it issues reside in the same account, you can use &lt;code&gt;CreatePermission&lt;/code&gt; to grant permissions for ACM to carry out automatic certificate renewals.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For automatic certificate renewal to succeed, the ACM service principal needs permissions to create, retrieve, and list certificates.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the private CA and the ACM certificates reside in different accounts, then permissions cannot be used to enable automatic renewals. Instead, the ACM certificate owner must set up a resource-based policy to enable cross-account issuance and renewals. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param deletePermissionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePermissionAsync(String xAmzTarget, DeletePermissionRequest deletePermissionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePermissionValidateBeforeCall(xAmzTarget, deletePermissionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePolicy
     * @param xAmzTarget  (required)
     * @param deletePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LockoutPreventedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePolicyCall(String xAmzTarget, DeletePolicyRequest deletePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.DeletePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyValidateBeforeCall(String xAmzTarget, DeletePolicyRequest deletePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deletePolicy(Async)");
        }

        // verify the required parameter 'deletePolicyRequest' is set
        if (deletePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'deletePolicyRequest' when calling deletePolicy(Async)");
        }

        return deletePolicyCall(xAmzTarget, deletePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the resource-based policy attached to a private CA. Deletion will remove any access that the policy has granted. If there is no policy attached to the private CA, this action will return successful.&lt;/p&gt; &lt;p&gt;If you delete a policy that was applied through Amazon Web Services Resource Access Manager (RAM), the CA will be removed from all shares in which it was included. &lt;/p&gt; &lt;p&gt;The Certificate Manager Service Linked Role that the policy supports is not affected when you delete the policy. &lt;/p&gt; &lt;p&gt;The current policy can be shown with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetPolicy.html\&quot;&gt;GetPolicy&lt;/a&gt; and updated with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_PutPolicy.html\&quot;&gt;PutPolicy&lt;/a&gt;.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Policies&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A policy permits a user of Certificate Manager (ACM) to issue ACM certificates signed by a CA in another account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For ACM to manage automatic renewal of these certificates, the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to confirmation against the Amazon Web Services Private CA policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-slr.html\&quot;&gt;Using a Service Linked Role with ACM&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-ram.html\&quot;&gt;Attach a Policy for Cross-Account Access&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param deletePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LockoutPreventedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public void deletePolicy(String xAmzTarget, DeletePolicyRequest deletePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deletePolicyWithHttpInfo(xAmzTarget, deletePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the resource-based policy attached to a private CA. Deletion will remove any access that the policy has granted. If there is no policy attached to the private CA, this action will return successful.&lt;/p&gt; &lt;p&gt;If you delete a policy that was applied through Amazon Web Services Resource Access Manager (RAM), the CA will be removed from all shares in which it was included. &lt;/p&gt; &lt;p&gt;The Certificate Manager Service Linked Role that the policy supports is not affected when you delete the policy. &lt;/p&gt; &lt;p&gt;The current policy can be shown with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetPolicy.html\&quot;&gt;GetPolicy&lt;/a&gt; and updated with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_PutPolicy.html\&quot;&gt;PutPolicy&lt;/a&gt;.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Policies&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A policy permits a user of Certificate Manager (ACM) to issue ACM certificates signed by a CA in another account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For ACM to manage automatic renewal of these certificates, the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to confirmation against the Amazon Web Services Private CA policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-slr.html\&quot;&gt;Using a Service Linked Role with ACM&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-ram.html\&quot;&gt;Attach a Policy for Cross-Account Access&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param deletePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LockoutPreventedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePolicyWithHttpInfo(String xAmzTarget, DeletePolicyRequest deletePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(xAmzTarget, deletePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the resource-based policy attached to a private CA. Deletion will remove any access that the policy has granted. If there is no policy attached to the private CA, this action will return successful.&lt;/p&gt; &lt;p&gt;If you delete a policy that was applied through Amazon Web Services Resource Access Manager (RAM), the CA will be removed from all shares in which it was included. &lt;/p&gt; &lt;p&gt;The Certificate Manager Service Linked Role that the policy supports is not affected when you delete the policy. &lt;/p&gt; &lt;p&gt;The current policy can be shown with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetPolicy.html\&quot;&gt;GetPolicy&lt;/a&gt; and updated with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_PutPolicy.html\&quot;&gt;PutPolicy&lt;/a&gt;.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Policies&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A policy permits a user of Certificate Manager (ACM) to issue ACM certificates signed by a CA in another account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For ACM to manage automatic renewal of these certificates, the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to confirmation against the Amazon Web Services Private CA policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-slr.html\&quot;&gt;Using a Service Linked Role with ACM&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-ram.html\&quot;&gt;Attach a Policy for Cross-Account Access&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param deletePolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LockoutPreventedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePolicyAsync(String xAmzTarget, DeletePolicyRequest deletePolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(xAmzTarget, deletePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeCertificateAuthority
     * @param xAmzTarget  (required)
     * @param describeCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeCertificateAuthorityCall(String xAmzTarget, DescribeCertificateAuthorityRequest describeCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeCertificateAuthorityRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.DescribeCertificateAuthority";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeCertificateAuthorityValidateBeforeCall(String xAmzTarget, DescribeCertificateAuthorityRequest describeCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeCertificateAuthority(Async)");
        }

        // verify the required parameter 'describeCertificateAuthorityRequest' is set
        if (describeCertificateAuthorityRequest == null) {
            throw new ApiException("Missing the required parameter 'describeCertificateAuthorityRequest' when calling describeCertificateAuthority(Async)");
        }

        return describeCertificateAuthorityCall(xAmzTarget, describeCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists information about your private certificate authority (CA) or one that has been shared with you. You specify the private CA on input by its ARN (Amazon Resource Name). The output contains the status of your CA. This can be any of the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATING&lt;/code&gt; - Amazon Web Services Private CA is creating your private certificate authority.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PENDING_CERTIFICATE&lt;/code&gt; - The certificate is pending. You must use your Amazon Web Services Private CA-hosted or on-premises root or subordinate CA to sign your private CA CSR and then import it into Amazon Web Services Private CA. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ACTIVE&lt;/code&gt; - Your private CA is active.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLED&lt;/code&gt; - Your private CA has been disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EXPIRED&lt;/code&gt; - Your private CA certificate has expired.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FAILED&lt;/code&gt; - Your private CA has failed. Your CA can fail because of problems such a network outage or back-end Amazon Web Services failure or other errors. A failed CA can never return to the pending state. You must create a new CA. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETED&lt;/code&gt; - Your private CA is within the restoration period, after which it is permanently deleted. The length of time remaining in the CA&#39;s restoration period is also included in this action&#39;s output.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeCertificateAuthorityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeCertificateAuthorityResponse describeCertificateAuthority(String xAmzTarget, DescribeCertificateAuthorityRequest describeCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeCertificateAuthorityResponse> localVarResp = describeCertificateAuthorityWithHttpInfo(xAmzTarget, describeCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists information about your private certificate authority (CA) or one that has been shared with you. You specify the private CA on input by its ARN (Amazon Resource Name). The output contains the status of your CA. This can be any of the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATING&lt;/code&gt; - Amazon Web Services Private CA is creating your private certificate authority.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PENDING_CERTIFICATE&lt;/code&gt; - The certificate is pending. You must use your Amazon Web Services Private CA-hosted or on-premises root or subordinate CA to sign your private CA CSR and then import it into Amazon Web Services Private CA. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ACTIVE&lt;/code&gt; - Your private CA is active.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLED&lt;/code&gt; - Your private CA has been disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EXPIRED&lt;/code&gt; - Your private CA certificate has expired.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FAILED&lt;/code&gt; - Your private CA has failed. Your CA can fail because of problems such a network outage or back-end Amazon Web Services failure or other errors. A failed CA can never return to the pending state. You must create a new CA. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETED&lt;/code&gt; - Your private CA is within the restoration period, after which it is permanently deleted. The length of time remaining in the CA&#39;s restoration period is also included in this action&#39;s output.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeCertificateAuthorityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeCertificateAuthorityResponse> describeCertificateAuthorityWithHttpInfo(String xAmzTarget, DescribeCertificateAuthorityRequest describeCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeCertificateAuthorityValidateBeforeCall(xAmzTarget, describeCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeCertificateAuthorityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists information about your private certificate authority (CA) or one that has been shared with you. You specify the private CA on input by its ARN (Amazon Resource Name). The output contains the status of your CA. This can be any of the following: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATING&lt;/code&gt; - Amazon Web Services Private CA is creating your private certificate authority.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PENDING_CERTIFICATE&lt;/code&gt; - The certificate is pending. You must use your Amazon Web Services Private CA-hosted or on-premises root or subordinate CA to sign your private CA CSR and then import it into Amazon Web Services Private CA. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ACTIVE&lt;/code&gt; - Your private CA is active.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DISABLED&lt;/code&gt; - Your private CA has been disabled.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;EXPIRED&lt;/code&gt; - Your private CA certificate has expired.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FAILED&lt;/code&gt; - Your private CA has failed. Your CA can fail because of problems such a network outage or back-end Amazon Web Services failure or other errors. A failed CA can never return to the pending state. You must create a new CA. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETED&lt;/code&gt; - Your private CA is within the restoration period, after which it is permanently deleted. The length of time remaining in the CA&#39;s restoration period is also included in this action&#39;s output.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param describeCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeCertificateAuthorityAsync(String xAmzTarget, DescribeCertificateAuthorityRequest describeCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeCertificateAuthorityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeCertificateAuthorityValidateBeforeCall(xAmzTarget, describeCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeCertificateAuthorityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeCertificateAuthorityAuditReport
     * @param xAmzTarget  (required)
     * @param describeCertificateAuthorityAuditReportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeCertificateAuthorityAuditReportCall(String xAmzTarget, DescribeCertificateAuthorityAuditReportRequest describeCertificateAuthorityAuditReportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeCertificateAuthorityAuditReportRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.DescribeCertificateAuthorityAuditReport";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeCertificateAuthorityAuditReportValidateBeforeCall(String xAmzTarget, DescribeCertificateAuthorityAuditReportRequest describeCertificateAuthorityAuditReportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeCertificateAuthorityAuditReport(Async)");
        }

        // verify the required parameter 'describeCertificateAuthorityAuditReportRequest' is set
        if (describeCertificateAuthorityAuditReportRequest == null) {
            throw new ApiException("Missing the required parameter 'describeCertificateAuthorityAuditReportRequest' when calling describeCertificateAuthorityAuditReport(Async)");
        }

        return describeCertificateAuthorityAuditReportCall(xAmzTarget, describeCertificateAuthorityAuditReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Lists information about a specific audit report created by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html\&quot;&gt;CreateCertificateAuthorityAuditReport&lt;/a&gt; action. Audit information is created every time the certificate authority (CA) private key is used. The private key is used when you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_IssueCertificate.html\&quot;&gt;IssueCertificate&lt;/a&gt; action or the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_RevokeCertificate.html\&quot;&gt;RevokeCertificate&lt;/a&gt; action. 
     * @param xAmzTarget  (required)
     * @param describeCertificateAuthorityAuditReportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeCertificateAuthorityAuditReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgsException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeCertificateAuthorityAuditReportResponse describeCertificateAuthorityAuditReport(String xAmzTarget, DescribeCertificateAuthorityAuditReportRequest describeCertificateAuthorityAuditReportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeCertificateAuthorityAuditReportResponse> localVarResp = describeCertificateAuthorityAuditReportWithHttpInfo(xAmzTarget, describeCertificateAuthorityAuditReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists information about a specific audit report created by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html\&quot;&gt;CreateCertificateAuthorityAuditReport&lt;/a&gt; action. Audit information is created every time the certificate authority (CA) private key is used. The private key is used when you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_IssueCertificate.html\&quot;&gt;IssueCertificate&lt;/a&gt; action or the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_RevokeCertificate.html\&quot;&gt;RevokeCertificate&lt;/a&gt; action. 
     * @param xAmzTarget  (required)
     * @param describeCertificateAuthorityAuditReportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeCertificateAuthorityAuditReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeCertificateAuthorityAuditReportResponse> describeCertificateAuthorityAuditReportWithHttpInfo(String xAmzTarget, DescribeCertificateAuthorityAuditReportRequest describeCertificateAuthorityAuditReportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeCertificateAuthorityAuditReportValidateBeforeCall(xAmzTarget, describeCertificateAuthorityAuditReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeCertificateAuthorityAuditReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists information about a specific audit report created by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html\&quot;&gt;CreateCertificateAuthorityAuditReport&lt;/a&gt; action. Audit information is created every time the certificate authority (CA) private key is used. The private key is used when you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_IssueCertificate.html\&quot;&gt;IssueCertificate&lt;/a&gt; action or the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_RevokeCertificate.html\&quot;&gt;RevokeCertificate&lt;/a&gt; action. 
     * @param xAmzTarget  (required)
     * @param describeCertificateAuthorityAuditReportRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeCertificateAuthorityAuditReportAsync(String xAmzTarget, DescribeCertificateAuthorityAuditReportRequest describeCertificateAuthorityAuditReportRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeCertificateAuthorityAuditReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeCertificateAuthorityAuditReportValidateBeforeCall(xAmzTarget, describeCertificateAuthorityAuditReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeCertificateAuthorityAuditReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCertificate
     * @param xAmzTarget  (required)
     * @param getCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCertificateCall(String xAmzTarget, GetCertificateRequest getCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCertificateRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.GetCertificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCertificateValidateBeforeCall(String xAmzTarget, GetCertificateRequest getCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getCertificate(Async)");
        }

        // verify the required parameter 'getCertificateRequest' is set
        if (getCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'getCertificateRequest' when calling getCertificate(Async)");
        }

        return getCertificateCall(xAmzTarget, getCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves a certificate from your private CA or one that has been shared with you. The ARN of the certificate is returned when you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_IssueCertificate.html\&quot;&gt;IssueCertificate&lt;/a&gt; action. You must specify both the ARN of your private CA and the ARN of the issued certificate when calling the &lt;b&gt;GetCertificate&lt;/b&gt; action. You can retrieve the certificate if it is in the &lt;b&gt;ISSUED&lt;/b&gt; state. You can call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html\&quot;&gt;CreateCertificateAuthorityAuditReport&lt;/a&gt; action to create a report that contains information about all of the certificates issued and revoked by your private CA. 
     * @param xAmzTarget  (required)
     * @param getCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public GetCertificateResponse getCertificate(String xAmzTarget, GetCertificateRequest getCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCertificateResponse> localVarResp = getCertificateWithHttpInfo(xAmzTarget, getCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a certificate from your private CA or one that has been shared with you. The ARN of the certificate is returned when you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_IssueCertificate.html\&quot;&gt;IssueCertificate&lt;/a&gt; action. You must specify both the ARN of your private CA and the ARN of the issued certificate when calling the &lt;b&gt;GetCertificate&lt;/b&gt; action. You can retrieve the certificate if it is in the &lt;b&gt;ISSUED&lt;/b&gt; state. You can call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html\&quot;&gt;CreateCertificateAuthorityAuditReport&lt;/a&gt; action to create a report that contains information about all of the certificates issued and revoked by your private CA. 
     * @param xAmzTarget  (required)
     * @param getCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCertificateResponse> getCertificateWithHttpInfo(String xAmzTarget, GetCertificateRequest getCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCertificateValidateBeforeCall(xAmzTarget, getCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCertificateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a certificate from your private CA or one that has been shared with you. The ARN of the certificate is returned when you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_IssueCertificate.html\&quot;&gt;IssueCertificate&lt;/a&gt; action. You must specify both the ARN of your private CA and the ARN of the issued certificate when calling the &lt;b&gt;GetCertificate&lt;/b&gt; action. You can retrieve the certificate if it is in the &lt;b&gt;ISSUED&lt;/b&gt; state. You can call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html\&quot;&gt;CreateCertificateAuthorityAuditReport&lt;/a&gt; action to create a report that contains information about all of the certificates issued and revoked by your private CA. 
     * @param xAmzTarget  (required)
     * @param getCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCertificateAsync(String xAmzTarget, GetCertificateRequest getCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCertificateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCertificateValidateBeforeCall(xAmzTarget, getCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCertificateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCertificateAuthorityCertificate
     * @param xAmzTarget  (required)
     * @param getCertificateAuthorityCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCertificateAuthorityCertificateCall(String xAmzTarget, GetCertificateAuthorityCertificateRequest getCertificateAuthorityCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCertificateAuthorityCertificateRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.GetCertificateAuthorityCertificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCertificateAuthorityCertificateValidateBeforeCall(String xAmzTarget, GetCertificateAuthorityCertificateRequest getCertificateAuthorityCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getCertificateAuthorityCertificate(Async)");
        }

        // verify the required parameter 'getCertificateAuthorityCertificateRequest' is set
        if (getCertificateAuthorityCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'getCertificateAuthorityCertificateRequest' when calling getCertificateAuthorityCertificate(Async)");
        }

        return getCertificateAuthorityCertificateCall(xAmzTarget, getCertificateAuthorityCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves the certificate and certificate chain for your private certificate authority (CA) or one that has been shared with you. Both the certificate and the chain are base64 PEM-encoded. The chain does not include the CA certificate. Each certificate in the chain signs the one before it. 
     * @param xAmzTarget  (required)
     * @param getCertificateAuthorityCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCertificateAuthorityCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public GetCertificateAuthorityCertificateResponse getCertificateAuthorityCertificate(String xAmzTarget, GetCertificateAuthorityCertificateRequest getCertificateAuthorityCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCertificateAuthorityCertificateResponse> localVarResp = getCertificateAuthorityCertificateWithHttpInfo(xAmzTarget, getCertificateAuthorityCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the certificate and certificate chain for your private certificate authority (CA) or one that has been shared with you. Both the certificate and the chain are base64 PEM-encoded. The chain does not include the CA certificate. Each certificate in the chain signs the one before it. 
     * @param xAmzTarget  (required)
     * @param getCertificateAuthorityCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCertificateAuthorityCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCertificateAuthorityCertificateResponse> getCertificateAuthorityCertificateWithHttpInfo(String xAmzTarget, GetCertificateAuthorityCertificateRequest getCertificateAuthorityCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCertificateAuthorityCertificateValidateBeforeCall(xAmzTarget, getCertificateAuthorityCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCertificateAuthorityCertificateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the certificate and certificate chain for your private certificate authority (CA) or one that has been shared with you. Both the certificate and the chain are base64 PEM-encoded. The chain does not include the CA certificate. Each certificate in the chain signs the one before it. 
     * @param xAmzTarget  (required)
     * @param getCertificateAuthorityCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCertificateAuthorityCertificateAsync(String xAmzTarget, GetCertificateAuthorityCertificateRequest getCertificateAuthorityCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCertificateAuthorityCertificateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCertificateAuthorityCertificateValidateBeforeCall(xAmzTarget, getCertificateAuthorityCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCertificateAuthorityCertificateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCertificateAuthorityCsr
     * @param xAmzTarget  (required)
     * @param getCertificateAuthorityCsrRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCertificateAuthorityCsrCall(String xAmzTarget, GetCertificateAuthorityCsrRequest getCertificateAuthorityCsrRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCertificateAuthorityCsrRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.GetCertificateAuthorityCsr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCertificateAuthorityCsrValidateBeforeCall(String xAmzTarget, GetCertificateAuthorityCsrRequest getCertificateAuthorityCsrRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getCertificateAuthorityCsr(Async)");
        }

        // verify the required parameter 'getCertificateAuthorityCsrRequest' is set
        if (getCertificateAuthorityCsrRequest == null) {
            throw new ApiException("Missing the required parameter 'getCertificateAuthorityCsrRequest' when calling getCertificateAuthorityCsr(Async)");
        }

        return getCertificateAuthorityCsrCall(xAmzTarget, getCertificateAuthorityCsrRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves the certificate signing request (CSR) for your private certificate authority (CA). The CSR is created when you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html\&quot;&gt;CreateCertificateAuthority&lt;/a&gt; action. Sign the CSR with your Amazon Web Services Private CA-hosted or on-premises root or subordinate CA. Then import the signed certificate back into Amazon Web Services Private CA by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html\&quot;&gt;ImportCertificateAuthorityCertificate&lt;/a&gt; action. The CSR is returned as a base64 PEM-encoded string. 
     * @param xAmzTarget  (required)
     * @param getCertificateAuthorityCsrRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCertificateAuthorityCsrResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public GetCertificateAuthorityCsrResponse getCertificateAuthorityCsr(String xAmzTarget, GetCertificateAuthorityCsrRequest getCertificateAuthorityCsrRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCertificateAuthorityCsrResponse> localVarResp = getCertificateAuthorityCsrWithHttpInfo(xAmzTarget, getCertificateAuthorityCsrRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the certificate signing request (CSR) for your private certificate authority (CA). The CSR is created when you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html\&quot;&gt;CreateCertificateAuthority&lt;/a&gt; action. Sign the CSR with your Amazon Web Services Private CA-hosted or on-premises root or subordinate CA. Then import the signed certificate back into Amazon Web Services Private CA by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html\&quot;&gt;ImportCertificateAuthorityCertificate&lt;/a&gt; action. The CSR is returned as a base64 PEM-encoded string. 
     * @param xAmzTarget  (required)
     * @param getCertificateAuthorityCsrRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCertificateAuthorityCsrResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCertificateAuthorityCsrResponse> getCertificateAuthorityCsrWithHttpInfo(String xAmzTarget, GetCertificateAuthorityCsrRequest getCertificateAuthorityCsrRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCertificateAuthorityCsrValidateBeforeCall(xAmzTarget, getCertificateAuthorityCsrRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCertificateAuthorityCsrResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the certificate signing request (CSR) for your private certificate authority (CA). The CSR is created when you call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html\&quot;&gt;CreateCertificateAuthority&lt;/a&gt; action. Sign the CSR with your Amazon Web Services Private CA-hosted or on-premises root or subordinate CA. Then import the signed certificate back into Amazon Web Services Private CA by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html\&quot;&gt;ImportCertificateAuthorityCertificate&lt;/a&gt; action. The CSR is returned as a base64 PEM-encoded string. 
     * @param xAmzTarget  (required)
     * @param getCertificateAuthorityCsrRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCertificateAuthorityCsrAsync(String xAmzTarget, GetCertificateAuthorityCsrRequest getCertificateAuthorityCsrRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCertificateAuthorityCsrResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCertificateAuthorityCsrValidateBeforeCall(xAmzTarget, getCertificateAuthorityCsrRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCertificateAuthorityCsrResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPolicy
     * @param xAmzTarget  (required)
     * @param getPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPolicyCall(String xAmzTarget, GetPolicyRequest getPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.GetPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyValidateBeforeCall(String xAmzTarget, GetPolicyRequest getPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getPolicy(Async)");
        }

        // verify the required parameter 'getPolicyRequest' is set
        if (getPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'getPolicyRequest' when calling getPolicy(Async)");
        }

        return getPolicyCall(xAmzTarget, getPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the resource-based policy attached to a private CA. If either the private CA resource or the policy cannot be found, this action returns a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;The policy can be attached or updated with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_PutPolicy.html\&quot;&gt;PutPolicy&lt;/a&gt; and removed with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePolicy.html\&quot;&gt;DeletePolicy&lt;/a&gt;.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Policies&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A policy permits a user of Certificate Manager (ACM) to issue ACM certificates signed by a CA in another account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For ACM to manage automatic renewal of these certificates, the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to confirmation against the Amazon Web Services Private CA policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-slr.html\&quot;&gt;Using a Service Linked Role with ACM&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-ram.html\&quot;&gt;Attach a Policy for Cross-Account Access&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param getPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetPolicyResponse getPolicy(String xAmzTarget, GetPolicyRequest getPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPolicyResponse> localVarResp = getPolicyWithHttpInfo(xAmzTarget, getPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the resource-based policy attached to a private CA. If either the private CA resource or the policy cannot be found, this action returns a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;The policy can be attached or updated with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_PutPolicy.html\&quot;&gt;PutPolicy&lt;/a&gt; and removed with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePolicy.html\&quot;&gt;DeletePolicy&lt;/a&gt;.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Policies&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A policy permits a user of Certificate Manager (ACM) to issue ACM certificates signed by a CA in another account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For ACM to manage automatic renewal of these certificates, the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to confirmation against the Amazon Web Services Private CA policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-slr.html\&quot;&gt;Using a Service Linked Role with ACM&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-ram.html\&quot;&gt;Attach a Policy for Cross-Account Access&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param getPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPolicyResponse> getPolicyWithHttpInfo(String xAmzTarget, GetPolicyRequest getPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(xAmzTarget, getPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the resource-based policy attached to a private CA. If either the private CA resource or the policy cannot be found, this action returns a &lt;code&gt;ResourceNotFoundException&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;The policy can be attached or updated with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_PutPolicy.html\&quot;&gt;PutPolicy&lt;/a&gt; and removed with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePolicy.html\&quot;&gt;DeletePolicy&lt;/a&gt;.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Policies&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A policy permits a user of Certificate Manager (ACM) to issue ACM certificates signed by a CA in another account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For ACM to manage automatic renewal of these certificates, the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to confirmation against the Amazon Web Services Private CA policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-slr.html\&quot;&gt;Using a Service Linked Role with ACM&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-ram.html\&quot;&gt;Attach a Policy for Cross-Account Access&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param getPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPolicyAsync(String xAmzTarget, GetPolicyRequest getPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyValidateBeforeCall(xAmzTarget, getPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importCertificateAuthorityCertificate
     * @param xAmzTarget  (required)
     * @param importCertificateAuthorityCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MalformedCertificateException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CertificateMismatchException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCertificateAuthorityCertificateCall(String xAmzTarget, ImportCertificateAuthorityCertificateRequest importCertificateAuthorityCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importCertificateAuthorityCertificateRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.ImportCertificateAuthorityCertificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importCertificateAuthorityCertificateValidateBeforeCall(String xAmzTarget, ImportCertificateAuthorityCertificateRequest importCertificateAuthorityCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling importCertificateAuthorityCertificate(Async)");
        }

        // verify the required parameter 'importCertificateAuthorityCertificateRequest' is set
        if (importCertificateAuthorityCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'importCertificateAuthorityCertificateRequest' when calling importCertificateAuthorityCertificate(Async)");
        }

        return importCertificateAuthorityCertificateCall(xAmzTarget, importCertificateAuthorityCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Imports a signed private CA certificate into Amazon Web Services Private CA. This action is used when you are using a chain of trust whose root is located outside Amazon Web Services Private CA. Before you can call this action, the following preparations must in place:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;In Amazon Web Services Private CA, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html\&quot;&gt;CreateCertificateAuthority&lt;/a&gt; action to create the private CA that you plan to back with the imported certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetCertificateAuthorityCsr.html\&quot;&gt;GetCertificateAuthorityCsr&lt;/a&gt; action to generate a certificate signing request (CSR).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Sign the CSR using a root or intermediate CA hosted by either an on-premises PKI hierarchy or by a commercial CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a certificate chain and copy the signed certificate and the certificate chain to your working directory.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Amazon Web Services Private CA supports three scenarios for installing a CA certificate:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Installing a certificate for a root CA hosted by Amazon Web Services Private CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Installing a subordinate CA certificate whose parent authority is hosted by Amazon Web Services Private CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Installing a subordinate CA certificate whose parent authority is externally hosted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following additional requirements apply when you import a CA certificate.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Only a self-signed certificate can be imported as a root CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A self-signed certificate cannot be imported as a subordinate CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Your certificate chain must not include the private CA certificate that you are importing.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Your root CA must be the last certificate in your chain. The subordinate certificate, if any, that your root CA signed must be next to last. The subordinate certificate signed by the preceding subordinate CA must come next, and so on until your chain is built. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The chain must be PEM-encoded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The maximum allowed size of a certificate is 32 KB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The maximum allowed size of a certificate chain is 2 MB.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;i&gt;Enforcement of Critical Constraints&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Amazon Web Services Private CA allows the following extensions to be marked critical in the imported CA certificate or chain.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Basic constraints (&lt;i&gt;must&lt;/i&gt; be marked critical)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Subject alternative names&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Key usage&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Extended key usage&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Authority key identifier&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Subject key identifier&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Issuer alternative name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Subject directory attributes&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Subject information access&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Certificate policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy mappings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Inhibit anyPolicy&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Amazon Web Services Private CA rejects the following extensions when they are marked critical in an imported CA certificate or chain.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Name constraints&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy constraints&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CRL distribution points&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Authority information access&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Freshest CRL&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Any other extension&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param importCertificateAuthorityCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MalformedCertificateException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CertificateMismatchException </td><td>  -  </td></tr>
     </table>
     */
    public void importCertificateAuthorityCertificate(String xAmzTarget, ImportCertificateAuthorityCertificateRequest importCertificateAuthorityCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        importCertificateAuthorityCertificateWithHttpInfo(xAmzTarget, importCertificateAuthorityCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Imports a signed private CA certificate into Amazon Web Services Private CA. This action is used when you are using a chain of trust whose root is located outside Amazon Web Services Private CA. Before you can call this action, the following preparations must in place:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;In Amazon Web Services Private CA, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html\&quot;&gt;CreateCertificateAuthority&lt;/a&gt; action to create the private CA that you plan to back with the imported certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetCertificateAuthorityCsr.html\&quot;&gt;GetCertificateAuthorityCsr&lt;/a&gt; action to generate a certificate signing request (CSR).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Sign the CSR using a root or intermediate CA hosted by either an on-premises PKI hierarchy or by a commercial CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a certificate chain and copy the signed certificate and the certificate chain to your working directory.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Amazon Web Services Private CA supports three scenarios for installing a CA certificate:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Installing a certificate for a root CA hosted by Amazon Web Services Private CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Installing a subordinate CA certificate whose parent authority is hosted by Amazon Web Services Private CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Installing a subordinate CA certificate whose parent authority is externally hosted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following additional requirements apply when you import a CA certificate.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Only a self-signed certificate can be imported as a root CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A self-signed certificate cannot be imported as a subordinate CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Your certificate chain must not include the private CA certificate that you are importing.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Your root CA must be the last certificate in your chain. The subordinate certificate, if any, that your root CA signed must be next to last. The subordinate certificate signed by the preceding subordinate CA must come next, and so on until your chain is built. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The chain must be PEM-encoded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The maximum allowed size of a certificate is 32 KB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The maximum allowed size of a certificate chain is 2 MB.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;i&gt;Enforcement of Critical Constraints&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Amazon Web Services Private CA allows the following extensions to be marked critical in the imported CA certificate or chain.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Basic constraints (&lt;i&gt;must&lt;/i&gt; be marked critical)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Subject alternative names&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Key usage&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Extended key usage&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Authority key identifier&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Subject key identifier&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Issuer alternative name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Subject directory attributes&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Subject information access&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Certificate policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy mappings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Inhibit anyPolicy&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Amazon Web Services Private CA rejects the following extensions when they are marked critical in an imported CA certificate or chain.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Name constraints&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy constraints&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CRL distribution points&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Authority information access&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Freshest CRL&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Any other extension&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param importCertificateAuthorityCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MalformedCertificateException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CertificateMismatchException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importCertificateAuthorityCertificateWithHttpInfo(String xAmzTarget, ImportCertificateAuthorityCertificateRequest importCertificateAuthorityCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = importCertificateAuthorityCertificateValidateBeforeCall(xAmzTarget, importCertificateAuthorityCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Imports a signed private CA certificate into Amazon Web Services Private CA. This action is used when you are using a chain of trust whose root is located outside Amazon Web Services Private CA. Before you can call this action, the following preparations must in place:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;In Amazon Web Services Private CA, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html\&quot;&gt;CreateCertificateAuthority&lt;/a&gt; action to create the private CA that you plan to back with the imported certificate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetCertificateAuthorityCsr.html\&quot;&gt;GetCertificateAuthorityCsr&lt;/a&gt; action to generate a certificate signing request (CSR).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Sign the CSR using a root or intermediate CA hosted by either an on-premises PKI hierarchy or by a commercial CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a certificate chain and copy the signed certificate and the certificate chain to your working directory.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Amazon Web Services Private CA supports three scenarios for installing a CA certificate:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Installing a certificate for a root CA hosted by Amazon Web Services Private CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Installing a subordinate CA certificate whose parent authority is hosted by Amazon Web Services Private CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Installing a subordinate CA certificate whose parent authority is externally hosted.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The following additional requirements apply when you import a CA certificate.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Only a self-signed certificate can be imported as a root CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A self-signed certificate cannot be imported as a subordinate CA.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Your certificate chain must not include the private CA certificate that you are importing.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Your root CA must be the last certificate in your chain. The subordinate certificate, if any, that your root CA signed must be next to last. The subordinate certificate signed by the preceding subordinate CA must come next, and so on until your chain is built. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The chain must be PEM-encoded.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The maximum allowed size of a certificate is 32 KB.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The maximum allowed size of a certificate chain is 2 MB.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;i&gt;Enforcement of Critical Constraints&lt;/i&gt; &lt;/p&gt; &lt;p&gt;Amazon Web Services Private CA allows the following extensions to be marked critical in the imported CA certificate or chain.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Basic constraints (&lt;i&gt;must&lt;/i&gt; be marked critical)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Subject alternative names&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Key usage&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Extended key usage&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Authority key identifier&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Subject key identifier&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Issuer alternative name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Subject directory attributes&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Subject information access&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Certificate policies&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy mappings&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Inhibit anyPolicy&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Amazon Web Services Private CA rejects the following extensions when they are marked critical in an imported CA certificate or chain.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Name constraints&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Policy constraints&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CRL distribution points&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Authority information access&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Freshest CRL&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Any other extension&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param importCertificateAuthorityCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> MalformedCertificateException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> CertificateMismatchException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCertificateAuthorityCertificateAsync(String xAmzTarget, ImportCertificateAuthorityCertificateRequest importCertificateAuthorityCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importCertificateAuthorityCertificateValidateBeforeCall(xAmzTarget, importCertificateAuthorityCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueCertificate
     * @param xAmzTarget  (required)
     * @param issueCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MalformedCSRException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueCertificateCall(String xAmzTarget, IssueCertificateRequest issueCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueCertificateRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.IssueCertificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueCertificateValidateBeforeCall(String xAmzTarget, IssueCertificateRequest issueCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling issueCertificate(Async)");
        }

        // verify the required parameter 'issueCertificateRequest' is set
        if (issueCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'issueCertificateRequest' when calling issueCertificate(Async)");
        }

        return issueCertificateCall(xAmzTarget, issueCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Uses your private certificate authority (CA), or one that has been shared with you, to issue a client certificate. This action returns the Amazon Resource Name (ARN) of the certificate. You can retrieve the certificate by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetCertificate.html\&quot;&gt;GetCertificate&lt;/a&gt; action and specifying the ARN. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot use the ACM &lt;b&gt;ListCertificateAuthorities&lt;/b&gt; action to retrieve the ARNs of the certificates that you issue by using Amazon Web Services Private CA.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param issueCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return IssueCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MalformedCSRException </td><td>  -  </td></tr>
     </table>
     */
    public IssueCertificateResponse issueCertificate(String xAmzTarget, IssueCertificateRequest issueCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<IssueCertificateResponse> localVarResp = issueCertificateWithHttpInfo(xAmzTarget, issueCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Uses your private certificate authority (CA), or one that has been shared with you, to issue a client certificate. This action returns the Amazon Resource Name (ARN) of the certificate. You can retrieve the certificate by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetCertificate.html\&quot;&gt;GetCertificate&lt;/a&gt; action and specifying the ARN. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot use the ACM &lt;b&gt;ListCertificateAuthorities&lt;/b&gt; action to retrieve the ARNs of the certificates that you issue by using Amazon Web Services Private CA.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param issueCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;IssueCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MalformedCSRException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IssueCertificateResponse> issueCertificateWithHttpInfo(String xAmzTarget, IssueCertificateRequest issueCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = issueCertificateValidateBeforeCall(xAmzTarget, issueCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<IssueCertificateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Uses your private certificate authority (CA), or one that has been shared with you, to issue a client certificate. This action returns the Amazon Resource Name (ARN) of the certificate. You can retrieve the certificate by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetCertificate.html\&quot;&gt;GetCertificate&lt;/a&gt; action and specifying the ARN. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot use the ACM &lt;b&gt;ListCertificateAuthorities&lt;/b&gt; action to retrieve the ARNs of the certificates that you issue by using Amazon Web Services Private CA.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param issueCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> MalformedCSRException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issueCertificateAsync(String xAmzTarget, IssueCertificateRequest issueCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<IssueCertificateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = issueCertificateValidateBeforeCall(xAmzTarget, issueCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<IssueCertificateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCertificateAuthorities
     * @param xAmzTarget  (required)
     * @param listCertificateAuthoritiesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCertificateAuthoritiesCall(String xAmzTarget, ListCertificateAuthoritiesRequest listCertificateAuthoritiesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listCertificateAuthoritiesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.ListCertificateAuthorities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCertificateAuthoritiesValidateBeforeCall(String xAmzTarget, ListCertificateAuthoritiesRequest listCertificateAuthoritiesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listCertificateAuthorities(Async)");
        }

        // verify the required parameter 'listCertificateAuthoritiesRequest' is set
        if (listCertificateAuthoritiesRequest == null) {
            throw new ApiException("Missing the required parameter 'listCertificateAuthoritiesRequest' when calling listCertificateAuthorities(Async)");
        }

        return listCertificateAuthoritiesCall(xAmzTarget, listCertificateAuthoritiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists the private certificate authorities that you created by using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html\&quot;&gt;CreateCertificateAuthority&lt;/a&gt; action.
     * @param xAmzTarget  (required)
     * @param listCertificateAuthoritiesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListCertificateAuthoritiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListCertificateAuthoritiesResponse listCertificateAuthorities(String xAmzTarget, ListCertificateAuthoritiesRequest listCertificateAuthoritiesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListCertificateAuthoritiesResponse> localVarResp = listCertificateAuthoritiesWithHttpInfo(xAmzTarget, listCertificateAuthoritiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the private certificate authorities that you created by using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html\&quot;&gt;CreateCertificateAuthority&lt;/a&gt; action.
     * @param xAmzTarget  (required)
     * @param listCertificateAuthoritiesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListCertificateAuthoritiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCertificateAuthoritiesResponse> listCertificateAuthoritiesWithHttpInfo(String xAmzTarget, ListCertificateAuthoritiesRequest listCertificateAuthoritiesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listCertificateAuthoritiesValidateBeforeCall(xAmzTarget, listCertificateAuthoritiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListCertificateAuthoritiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the private certificate authorities that you created by using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html\&quot;&gt;CreateCertificateAuthority&lt;/a&gt; action.
     * @param xAmzTarget  (required)
     * @param listCertificateAuthoritiesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCertificateAuthoritiesAsync(String xAmzTarget, ListCertificateAuthoritiesRequest listCertificateAuthoritiesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListCertificateAuthoritiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCertificateAuthoritiesValidateBeforeCall(xAmzTarget, listCertificateAuthoritiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListCertificateAuthoritiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPermissions
     * @param xAmzTarget  (required)
     * @param listPermissionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPermissionsCall(String xAmzTarget, ListPermissionsRequest listPermissionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPermissionsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.ListPermissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPermissionsValidateBeforeCall(String xAmzTarget, ListPermissionsRequest listPermissionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listPermissions(Async)");
        }

        // verify the required parameter 'listPermissionsRequest' is set
        if (listPermissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'listPermissionsRequest' when calling listPermissions(Async)");
        }

        return listPermissionsCall(xAmzTarget, listPermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;List all permissions on a private CA, if any, granted to the Certificate Manager (ACM) service principal (acm.amazonaws.com). &lt;/p&gt; &lt;p&gt;These permissions allow ACM to issue and renew ACM certificates that reside in the same Amazon Web Services account as the CA. &lt;/p&gt; &lt;p&gt;Permissions can be granted with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreatePermission.html\&quot;&gt;CreatePermission&lt;/a&gt; action and revoked with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePermission.html\&quot;&gt;DeletePermission&lt;/a&gt; action.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Permissions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the private CA and the certificates it issues reside in the same account, you can use &lt;code&gt;CreatePermission&lt;/code&gt; to grant permissions for ACM to carry out automatic certificate renewals.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For automatic certificate renewal to succeed, the ACM service principal needs permissions to create, retrieve, and list certificates.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the private CA and the ACM certificates reside in different accounts, then permissions cannot be used to enable automatic renewals. Instead, the ACM certificate owner must set up a resource-based policy to enable cross-account issuance and renewals. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listPermissionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListPermissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public ListPermissionsResponse listPermissions(String xAmzTarget, ListPermissionsRequest listPermissionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListPermissionsResponse> localVarResp = listPermissionsWithHttpInfo(xAmzTarget, listPermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;List all permissions on a private CA, if any, granted to the Certificate Manager (ACM) service principal (acm.amazonaws.com). &lt;/p&gt; &lt;p&gt;These permissions allow ACM to issue and renew ACM certificates that reside in the same Amazon Web Services account as the CA. &lt;/p&gt; &lt;p&gt;Permissions can be granted with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreatePermission.html\&quot;&gt;CreatePermission&lt;/a&gt; action and revoked with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePermission.html\&quot;&gt;DeletePermission&lt;/a&gt; action.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Permissions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the private CA and the certificates it issues reside in the same account, you can use &lt;code&gt;CreatePermission&lt;/code&gt; to grant permissions for ACM to carry out automatic certificate renewals.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For automatic certificate renewal to succeed, the ACM service principal needs permissions to create, retrieve, and list certificates.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the private CA and the ACM certificates reside in different accounts, then permissions cannot be used to enable automatic renewals. Instead, the ACM certificate owner must set up a resource-based policy to enable cross-account issuance and renewals. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listPermissionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListPermissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPermissionsResponse> listPermissionsWithHttpInfo(String xAmzTarget, ListPermissionsRequest listPermissionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listPermissionsValidateBeforeCall(xAmzTarget, listPermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPermissionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;List all permissions on a private CA, if any, granted to the Certificate Manager (ACM) service principal (acm.amazonaws.com). &lt;/p&gt; &lt;p&gt;These permissions allow ACM to issue and renew ACM certificates that reside in the same Amazon Web Services account as the CA. &lt;/p&gt; &lt;p&gt;Permissions can be granted with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreatePermission.html\&quot;&gt;CreatePermission&lt;/a&gt; action and revoked with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePermission.html\&quot;&gt;DeletePermission&lt;/a&gt; action.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Permissions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the private CA and the certificates it issues reside in the same account, you can use &lt;code&gt;CreatePermission&lt;/code&gt; to grant permissions for ACM to carry out automatic certificate renewals.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For automatic certificate renewal to succeed, the ACM service principal needs permissions to create, retrieve, and list certificates.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the private CA and the ACM certificates reside in different accounts, then permissions cannot be used to enable automatic renewals. Instead, the ACM certificate owner must set up a resource-based policy to enable cross-account issuance and renewals. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listPermissionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPermissionsAsync(String xAmzTarget, ListPermissionsRequest listPermissionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListPermissionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPermissionsValidateBeforeCall(xAmzTarget, listPermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPermissionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTags
     * @param xAmzTarget  (required)
     * @param listTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsCall(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.ListTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsValidateBeforeCall(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTags(Async)");
        }

        // verify the required parameter 'listTagsRequest' is set
        if (listTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsRequest' when calling listTags(Async)");
        }

        return listTagsCall(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists the tags, if any, that are associated with your private CA or one that has been shared with you. Tags are labels that you can use to identify and organize your CAs. Each tag consists of a key and an optional value. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_TagCertificateAuthority.html\&quot;&gt;TagCertificateAuthority&lt;/a&gt; action to add one or more tags to your CA. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_UntagCertificateAuthority.html\&quot;&gt;UntagCertificateAuthority&lt;/a&gt; action to remove tags. 
     * @param xAmzTarget  (required)
     * @param listTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsResponse listTags(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListTagsResponse> localVarResp = listTagsWithHttpInfo(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the tags, if any, that are associated with your private CA or one that has been shared with you. Tags are labels that you can use to identify and organize your CAs. Each tag consists of a key and an optional value. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_TagCertificateAuthority.html\&quot;&gt;TagCertificateAuthority&lt;/a&gt; action to add one or more tags to your CA. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_UntagCertificateAuthority.html\&quot;&gt;UntagCertificateAuthority&lt;/a&gt; action to remove tags. 
     * @param xAmzTarget  (required)
     * @param listTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsResponse> listTagsWithHttpInfo(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTagsValidateBeforeCall(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the tags, if any, that are associated with your private CA or one that has been shared with you. Tags are labels that you can use to identify and organize your CAs. Each tag consists of a key and an optional value. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_TagCertificateAuthority.html\&quot;&gt;TagCertificateAuthority&lt;/a&gt; action to add one or more tags to your CA. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_UntagCertificateAuthority.html\&quot;&gt;UntagCertificateAuthority&lt;/a&gt; action to remove tags. 
     * @param xAmzTarget  (required)
     * @param listTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsAsync(String xAmzTarget, ListTagsRequest listTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsValidateBeforeCall(xAmzTarget, listTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPolicy
     * @param xAmzTarget  (required)
     * @param putPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LockoutPreventedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPolicyCall(String xAmzTarget, PutPolicyRequest putPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putPolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.PutPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPolicyValidateBeforeCall(String xAmzTarget, PutPolicyRequest putPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putPolicy(Async)");
        }

        // verify the required parameter 'putPolicyRequest' is set
        if (putPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'putPolicyRequest' when calling putPolicy(Async)");
        }

        return putPolicyCall(xAmzTarget, putPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Attaches a resource-based policy to a private CA. &lt;/p&gt; &lt;p&gt;A policy can also be applied by sharing a private CA through Amazon Web Services Resource Access Manager (RAM). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-ram.html\&quot;&gt;Attach a Policy for Cross-Account Access&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The policy can be displayed with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetPolicy.html\&quot;&gt;GetPolicy&lt;/a&gt; and removed with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePolicy.html\&quot;&gt;DeletePolicy&lt;/a&gt;.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Policies&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A policy permits a user of Certificate Manager (ACM) to issue ACM certificates signed by a CA in another account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For ACM to manage automatic renewal of these certificates, the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to confirmation against the Amazon Web Services Private CA policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-slr.html\&quot;&gt;Using a Service Linked Role with ACM&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-ram.html\&quot;&gt;Attach a Policy for Cross-Account Access&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param putPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LockoutPreventedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public void putPolicy(String xAmzTarget, PutPolicyRequest putPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        putPolicyWithHttpInfo(xAmzTarget, putPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Attaches a resource-based policy to a private CA. &lt;/p&gt; &lt;p&gt;A policy can also be applied by sharing a private CA through Amazon Web Services Resource Access Manager (RAM). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-ram.html\&quot;&gt;Attach a Policy for Cross-Account Access&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The policy can be displayed with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetPolicy.html\&quot;&gt;GetPolicy&lt;/a&gt; and removed with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePolicy.html\&quot;&gt;DeletePolicy&lt;/a&gt;.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Policies&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A policy permits a user of Certificate Manager (ACM) to issue ACM certificates signed by a CA in another account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For ACM to manage automatic renewal of these certificates, the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to confirmation against the Amazon Web Services Private CA policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-slr.html\&quot;&gt;Using a Service Linked Role with ACM&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-ram.html\&quot;&gt;Attach a Policy for Cross-Account Access&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param putPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LockoutPreventedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putPolicyWithHttpInfo(String xAmzTarget, PutPolicyRequest putPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putPolicyValidateBeforeCall(xAmzTarget, putPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Attaches a resource-based policy to a private CA. &lt;/p&gt; &lt;p&gt;A policy can also be applied by sharing a private CA through Amazon Web Services Resource Access Manager (RAM). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-ram.html\&quot;&gt;Attach a Policy for Cross-Account Access&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The policy can be displayed with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetPolicy.html\&quot;&gt;GetPolicy&lt;/a&gt; and removed with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePolicy.html\&quot;&gt;DeletePolicy&lt;/a&gt;.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;About Policies&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A policy grants access on a private CA to an Amazon Web Services customer account, to Amazon Web Services Organizations, or to an Amazon Web Services Organizations unit. Policies are under the control of a CA administrator. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-rbp.html\&quot;&gt;Using a Resource Based Policy with Amazon Web Services Private CA&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A policy permits a user of Certificate Manager (ACM) to issue ACM certificates signed by a CA in another account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For ACM to manage automatic renewal of these certificates, the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to confirmation against the Amazon Web Services Private CA policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/acm/latest/userguide/acm-slr.html\&quot;&gt;Using a Service Linked Role with ACM&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates made in Amazon Web Services Resource Manager (RAM) are reflected in policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/pca-ram.html\&quot;&gt;Attach a Policy for Cross-Account Access&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param putPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LockoutPreventedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> RequestFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPolicyAsync(String xAmzTarget, PutPolicyRequest putPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPolicyValidateBeforeCall(xAmzTarget, putPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreCertificateAuthority
     * @param xAmzTarget  (required)
     * @param restoreCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreCertificateAuthorityCall(String xAmzTarget, RestoreCertificateAuthorityRequest restoreCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = restoreCertificateAuthorityRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.RestoreCertificateAuthority";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreCertificateAuthorityValidateBeforeCall(String xAmzTarget, RestoreCertificateAuthorityRequest restoreCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling restoreCertificateAuthority(Async)");
        }

        // verify the required parameter 'restoreCertificateAuthorityRequest' is set
        if (restoreCertificateAuthorityRequest == null) {
            throw new ApiException("Missing the required parameter 'restoreCertificateAuthorityRequest' when calling restoreCertificateAuthority(Async)");
        }

        return restoreCertificateAuthorityCall(xAmzTarget, restoreCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Restores a certificate authority (CA) that is in the &lt;code&gt;DELETED&lt;/code&gt; state. You can restore a CA during the period that you defined in the &lt;b&gt;PermanentDeletionTimeInDays&lt;/b&gt; parameter of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeleteCertificateAuthority.html\&quot;&gt;DeleteCertificateAuthority&lt;/a&gt; action. Currently, you can specify 7 to 30 days. If you did not specify a &lt;b&gt;PermanentDeletionTimeInDays&lt;/b&gt; value, by default you can restore the CA at any time in a 30 day period. You can check the time remaining in the restoration period of a private CA in the &lt;code&gt;DELETED&lt;/code&gt; state by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DescribeCertificateAuthority.html\&quot;&gt;DescribeCertificateAuthority&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html\&quot;&gt;ListCertificateAuthorities&lt;/a&gt; actions. The status of a restored CA is set to its pre-deletion status when the &lt;b&gt;RestoreCertificateAuthority&lt;/b&gt; action returns. To change its status to &lt;code&gt;ACTIVE&lt;/code&gt;, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html\&quot;&gt;UpdateCertificateAuthority&lt;/a&gt; action. If the private CA was in the &lt;code&gt;PENDING_CERTIFICATE&lt;/code&gt; state at deletion, you must use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html\&quot;&gt;ImportCertificateAuthorityCertificate&lt;/a&gt; action to import a certificate authority into the private CA before it can be activated. You cannot restore a CA after the restoration period has ended.
     * @param xAmzTarget  (required)
     * @param restoreCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public void restoreCertificateAuthority(String xAmzTarget, RestoreCertificateAuthorityRequest restoreCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        restoreCertificateAuthorityWithHttpInfo(xAmzTarget, restoreCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Restores a certificate authority (CA) that is in the &lt;code&gt;DELETED&lt;/code&gt; state. You can restore a CA during the period that you defined in the &lt;b&gt;PermanentDeletionTimeInDays&lt;/b&gt; parameter of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeleteCertificateAuthority.html\&quot;&gt;DeleteCertificateAuthority&lt;/a&gt; action. Currently, you can specify 7 to 30 days. If you did not specify a &lt;b&gt;PermanentDeletionTimeInDays&lt;/b&gt; value, by default you can restore the CA at any time in a 30 day period. You can check the time remaining in the restoration period of a private CA in the &lt;code&gt;DELETED&lt;/code&gt; state by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DescribeCertificateAuthority.html\&quot;&gt;DescribeCertificateAuthority&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html\&quot;&gt;ListCertificateAuthorities&lt;/a&gt; actions. The status of a restored CA is set to its pre-deletion status when the &lt;b&gt;RestoreCertificateAuthority&lt;/b&gt; action returns. To change its status to &lt;code&gt;ACTIVE&lt;/code&gt;, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html\&quot;&gt;UpdateCertificateAuthority&lt;/a&gt; action. If the private CA was in the &lt;code&gt;PENDING_CERTIFICATE&lt;/code&gt; state at deletion, you must use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html\&quot;&gt;ImportCertificateAuthorityCertificate&lt;/a&gt; action to import a certificate authority into the private CA before it can be activated. You cannot restore a CA after the restoration period has ended.
     * @param xAmzTarget  (required)
     * @param restoreCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> restoreCertificateAuthorityWithHttpInfo(String xAmzTarget, RestoreCertificateAuthorityRequest restoreCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = restoreCertificateAuthorityValidateBeforeCall(xAmzTarget, restoreCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Restores a certificate authority (CA) that is in the &lt;code&gt;DELETED&lt;/code&gt; state. You can restore a CA during the period that you defined in the &lt;b&gt;PermanentDeletionTimeInDays&lt;/b&gt; parameter of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeleteCertificateAuthority.html\&quot;&gt;DeleteCertificateAuthority&lt;/a&gt; action. Currently, you can specify 7 to 30 days. If you did not specify a &lt;b&gt;PermanentDeletionTimeInDays&lt;/b&gt; value, by default you can restore the CA at any time in a 30 day period. You can check the time remaining in the restoration period of a private CA in the &lt;code&gt;DELETED&lt;/code&gt; state by calling the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DescribeCertificateAuthority.html\&quot;&gt;DescribeCertificateAuthority&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListCertificateAuthorities.html\&quot;&gt;ListCertificateAuthorities&lt;/a&gt; actions. The status of a restored CA is set to its pre-deletion status when the &lt;b&gt;RestoreCertificateAuthority&lt;/b&gt; action returns. To change its status to &lt;code&gt;ACTIVE&lt;/code&gt;, call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html\&quot;&gt;UpdateCertificateAuthority&lt;/a&gt; action. If the private CA was in the &lt;code&gt;PENDING_CERTIFICATE&lt;/code&gt; state at deletion, you must use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html\&quot;&gt;ImportCertificateAuthorityCertificate&lt;/a&gt; action to import a certificate authority into the private CA before it can be activated. You cannot restore a CA after the restoration period has ended.
     * @param xAmzTarget  (required)
     * @param restoreCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreCertificateAuthorityAsync(String xAmzTarget, RestoreCertificateAuthorityRequest restoreCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreCertificateAuthorityValidateBeforeCall(xAmzTarget, restoreCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeCertificate
     * @param xAmzTarget  (required)
     * @param revokeCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RequestAlreadyProcessedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeCertificateCall(String xAmzTarget, RevokeCertificateRequest revokeCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = revokeCertificateRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.RevokeCertificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeCertificateValidateBeforeCall(String xAmzTarget, RevokeCertificateRequest revokeCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling revokeCertificate(Async)");
        }

        // verify the required parameter 'revokeCertificateRequest' is set
        if (revokeCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'revokeCertificateRequest' when calling revokeCertificate(Async)");
        }

        return revokeCertificateCall(xAmzTarget, revokeCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Revokes a certificate that was issued inside Amazon Web Services Private CA. If you enable a certificate revocation list (CRL) when you create or update your private CA, information about the revoked certificates will be included in the CRL. Amazon Web Services Private CA writes the CRL to an S3 bucket that you specify. A CRL is typically updated approximately 30 minutes after a certificate is revoked. If for any reason the CRL update fails, Amazon Web Services Private CA attempts makes further attempts every 15 minutes. With Amazon CloudWatch, you can create alarms for the metrics &lt;code&gt;CRLGenerated&lt;/code&gt; and &lt;code&gt;MisconfiguredCRLBucket&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/PcaCloudWatch.html\&quot;&gt;Supported CloudWatch Metrics&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#s3-policies\&quot;&gt;Access policies for CRLs in Amazon S3&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Amazon Web Services Private CA also writes revocation information to the audit report. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html\&quot;&gt;CreateCertificateAuthorityAuditReport&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot revoke a root CA self-signed certificate.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param revokeCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RequestAlreadyProcessedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public void revokeCertificate(String xAmzTarget, RevokeCertificateRequest revokeCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        revokeCertificateWithHttpInfo(xAmzTarget, revokeCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Revokes a certificate that was issued inside Amazon Web Services Private CA. If you enable a certificate revocation list (CRL) when you create or update your private CA, information about the revoked certificates will be included in the CRL. Amazon Web Services Private CA writes the CRL to an S3 bucket that you specify. A CRL is typically updated approximately 30 minutes after a certificate is revoked. If for any reason the CRL update fails, Amazon Web Services Private CA attempts makes further attempts every 15 minutes. With Amazon CloudWatch, you can create alarms for the metrics &lt;code&gt;CRLGenerated&lt;/code&gt; and &lt;code&gt;MisconfiguredCRLBucket&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/PcaCloudWatch.html\&quot;&gt;Supported CloudWatch Metrics&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#s3-policies\&quot;&gt;Access policies for CRLs in Amazon S3&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Amazon Web Services Private CA also writes revocation information to the audit report. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html\&quot;&gt;CreateCertificateAuthorityAuditReport&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot revoke a root CA self-signed certificate.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param revokeCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RequestAlreadyProcessedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokeCertificateWithHttpInfo(String xAmzTarget, RevokeCertificateRequest revokeCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = revokeCertificateValidateBeforeCall(xAmzTarget, revokeCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Revokes a certificate that was issued inside Amazon Web Services Private CA. If you enable a certificate revocation list (CRL) when you create or update your private CA, information about the revoked certificates will be included in the CRL. Amazon Web Services Private CA writes the CRL to an S3 bucket that you specify. A CRL is typically updated approximately 30 minutes after a certificate is revoked. If for any reason the CRL update fails, Amazon Web Services Private CA attempts makes further attempts every 15 minutes. With Amazon CloudWatch, you can create alarms for the metrics &lt;code&gt;CRLGenerated&lt;/code&gt; and &lt;code&gt;MisconfiguredCRLBucket&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/PcaCloudWatch.html\&quot;&gt;Supported CloudWatch Metrics&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#s3-policies\&quot;&gt;Access policies for CRLs in Amazon S3&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Amazon Web Services Private CA also writes revocation information to the audit report. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthorityAuditReport.html\&quot;&gt;CreateCertificateAuthorityAuditReport&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot revoke a root CA self-signed certificate.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param revokeCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RequestAlreadyProcessedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> RequestInProgressException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RequestFailedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeCertificateAsync(String xAmzTarget, RevokeCertificateRequest revokeCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeCertificateValidateBeforeCall(xAmzTarget, revokeCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagCertificateAuthority
     * @param xAmzTarget  (required)
     * @param tagCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagCertificateAuthorityCall(String xAmzTarget, TagCertificateAuthorityRequest tagCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagCertificateAuthorityRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.TagCertificateAuthority";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagCertificateAuthorityValidateBeforeCall(String xAmzTarget, TagCertificateAuthorityRequest tagCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling tagCertificateAuthority(Async)");
        }

        // verify the required parameter 'tagCertificateAuthorityRequest' is set
        if (tagCertificateAuthorityRequest == null) {
            throw new ApiException("Missing the required parameter 'tagCertificateAuthorityRequest' when calling tagCertificateAuthority(Async)");
        }

        return tagCertificateAuthorityCall(xAmzTarget, tagCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds one or more tags to your private CA. Tags are labels that you can use to identify and organize your Amazon Web Services resources. Each tag consists of a key and an optional value. You specify the private CA on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one private CA if you want to identify a specific characteristic of that CA, or you can apply the same tag to multiple private CAs if you want to filter for a common relationship among those CAs. To remove one or more tags, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_UntagCertificateAuthority.html\&quot;&gt;UntagCertificateAuthority&lt;/a&gt; action. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListTags.html\&quot;&gt;ListTags&lt;/a&gt; action to see what tags are associated with your CA. &lt;/p&gt; &lt;note&gt; &lt;p&gt;To attach tags to a private CA during the creation procedure, a CA administrator must first associate an inline IAM policy with the &lt;code&gt;CreateCertificateAuthority&lt;/code&gt; action and explicitly allow tagging. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/auth-InlinePolicies.html#policy-tag-ca\&quot;&gt;Attaching tags to a CA at the time of creation&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param tagCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public void tagCertificateAuthority(String xAmzTarget, TagCertificateAuthorityRequest tagCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        tagCertificateAuthorityWithHttpInfo(xAmzTarget, tagCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Adds one or more tags to your private CA. Tags are labels that you can use to identify and organize your Amazon Web Services resources. Each tag consists of a key and an optional value. You specify the private CA on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one private CA if you want to identify a specific characteristic of that CA, or you can apply the same tag to multiple private CAs if you want to filter for a common relationship among those CAs. To remove one or more tags, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_UntagCertificateAuthority.html\&quot;&gt;UntagCertificateAuthority&lt;/a&gt; action. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListTags.html\&quot;&gt;ListTags&lt;/a&gt; action to see what tags are associated with your CA. &lt;/p&gt; &lt;note&gt; &lt;p&gt;To attach tags to a private CA during the creation procedure, a CA administrator must first associate an inline IAM policy with the &lt;code&gt;CreateCertificateAuthority&lt;/code&gt; action and explicitly allow tagging. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/auth-InlinePolicies.html#policy-tag-ca\&quot;&gt;Attaching tags to a CA at the time of creation&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param tagCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tagCertificateAuthorityWithHttpInfo(String xAmzTarget, TagCertificateAuthorityRequest tagCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagCertificateAuthorityValidateBeforeCall(xAmzTarget, tagCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds one or more tags to your private CA. Tags are labels that you can use to identify and organize your Amazon Web Services resources. Each tag consists of a key and an optional value. You specify the private CA on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one private CA if you want to identify a specific characteristic of that CA, or you can apply the same tag to multiple private CAs if you want to filter for a common relationship among those CAs. To remove one or more tags, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_UntagCertificateAuthority.html\&quot;&gt;UntagCertificateAuthority&lt;/a&gt; action. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListTags.html\&quot;&gt;ListTags&lt;/a&gt; action to see what tags are associated with your CA. &lt;/p&gt; &lt;note&gt; &lt;p&gt;To attach tags to a private CA during the creation procedure, a CA administrator must first associate an inline IAM policy with the &lt;code&gt;CreateCertificateAuthority&lt;/code&gt; action and explicitly allow tagging. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/auth-InlinePolicies.html#policy-tag-ca\&quot;&gt;Attaching tags to a CA at the time of creation&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param tagCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyTagsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagCertificateAuthorityAsync(String xAmzTarget, TagCertificateAuthorityRequest tagCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagCertificateAuthorityValidateBeforeCall(xAmzTarget, tagCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagCertificateAuthority
     * @param xAmzTarget  (required)
     * @param untagCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagCertificateAuthorityCall(String xAmzTarget, UntagCertificateAuthorityRequest untagCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagCertificateAuthorityRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.UntagCertificateAuthority";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagCertificateAuthorityValidateBeforeCall(String xAmzTarget, UntagCertificateAuthorityRequest untagCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling untagCertificateAuthority(Async)");
        }

        // verify the required parameter 'untagCertificateAuthorityRequest' is set
        if (untagCertificateAuthorityRequest == null) {
            throw new ApiException("Missing the required parameter 'untagCertificateAuthorityRequest' when calling untagCertificateAuthority(Async)");
        }

        return untagCertificateAuthorityCall(xAmzTarget, untagCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Remove one or more tags from your private CA. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this action, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a private CA, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_TagCertificateAuthority.html\&quot;&gt;TagCertificateAuthority&lt;/a&gt;. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListTags.html\&quot;&gt;ListTags&lt;/a&gt; action to see what tags are associated with your CA. 
     * @param xAmzTarget  (required)
     * @param untagCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
     </table>
     */
    public void untagCertificateAuthority(String xAmzTarget, UntagCertificateAuthorityRequest untagCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        untagCertificateAuthorityWithHttpInfo(xAmzTarget, untagCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Remove one or more tags from your private CA. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this action, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a private CA, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_TagCertificateAuthority.html\&quot;&gt;TagCertificateAuthority&lt;/a&gt;. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListTags.html\&quot;&gt;ListTags&lt;/a&gt; action to see what tags are associated with your CA. 
     * @param xAmzTarget  (required)
     * @param untagCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> untagCertificateAuthorityWithHttpInfo(String xAmzTarget, UntagCertificateAuthorityRequest untagCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagCertificateAuthorityValidateBeforeCall(xAmzTarget, untagCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove one or more tags from your private CA. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this action, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a private CA, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_TagCertificateAuthority.html\&quot;&gt;TagCertificateAuthority&lt;/a&gt;. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListTags.html\&quot;&gt;ListTags&lt;/a&gt; action to see what tags are associated with your CA. 
     * @param xAmzTarget  (required)
     * @param untagCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidTagException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagCertificateAuthorityAsync(String xAmzTarget, UntagCertificateAuthorityRequest untagCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagCertificateAuthorityValidateBeforeCall(xAmzTarget, untagCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCertificateAuthority
     * @param xAmzTarget  (required)
     * @param updateCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCertificateAuthorityCall(String xAmzTarget, UpdateCertificateAuthorityRequest updateCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCertificateAuthorityRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=ACMPrivateCA.UpdateCertificateAuthority";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCertificateAuthorityValidateBeforeCall(String xAmzTarget, UpdateCertificateAuthorityRequest updateCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateCertificateAuthority(Async)");
        }

        // verify the required parameter 'updateCertificateAuthorityRequest' is set
        if (updateCertificateAuthorityRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCertificateAuthorityRequest' when calling updateCertificateAuthority(Async)");
        }

        return updateCertificateAuthorityCall(xAmzTarget, updateCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the status or configuration of a private certificate authority (CA). Your private CA must be in the &lt;code&gt;ACTIVE&lt;/code&gt; or &lt;code&gt;DISABLED&lt;/code&gt; state before you can update it. You can disable a private CA that is in the &lt;code&gt;ACTIVE&lt;/code&gt; state or make a CA that is in the &lt;code&gt;DISABLED&lt;/code&gt; state active again.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#s3-policies\&quot;&gt;Access policies for CRLs in Amazon S3&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public void updateCertificateAuthority(String xAmzTarget, UpdateCertificateAuthorityRequest updateCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        updateCertificateAuthorityWithHttpInfo(xAmzTarget, updateCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Updates the status or configuration of a private certificate authority (CA). Your private CA must be in the &lt;code&gt;ACTIVE&lt;/code&gt; or &lt;code&gt;DISABLED&lt;/code&gt; state before you can update it. You can disable a private CA that is in the &lt;code&gt;ACTIVE&lt;/code&gt; state or make a CA that is in the &lt;code&gt;DISABLED&lt;/code&gt; state active again.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#s3-policies\&quot;&gt;Access policies for CRLs in Amazon S3&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCertificateAuthorityWithHttpInfo(String xAmzTarget, UpdateCertificateAuthorityRequest updateCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateCertificateAuthorityValidateBeforeCall(xAmzTarget, updateCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the status or configuration of a private certificate authority (CA). Your private CA must be in the &lt;code&gt;ACTIVE&lt;/code&gt; or &lt;code&gt;DISABLED&lt;/code&gt; state before you can update it. You can disable a private CA that is in the &lt;code&gt;ACTIVE&lt;/code&gt; state or make a CA that is in the &lt;code&gt;DISABLED&lt;/code&gt; state active again.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Both Amazon Web Services Private CA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/userguide/crl-planning.html#s3-policies\&quot;&gt;Access policies for CRLs in Amazon S3&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateCertificateAuthorityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidArgsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidStateException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCertificateAuthorityAsync(String xAmzTarget, UpdateCertificateAuthorityRequest updateCertificateAuthorityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCertificateAuthorityValidateBeforeCall(xAmzTarget, updateCertificateAuthorityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
