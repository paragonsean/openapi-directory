/*
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ASN1Subject;
import org.openapitools.client.model.GeneralNameEdiPartyName;
import org.openapitools.client.model.GeneralNameOtherName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccessDescriptionAccessLocation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:35.096765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccessDescriptionAccessLocation {
  public static final String SERIALIZED_NAME_OTHER_NAME = "OtherName";
  @SerializedName(SERIALIZED_NAME_OTHER_NAME)
  private GeneralNameOtherName otherName;

  public static final String SERIALIZED_NAME_RFC822_NAME = "Rfc822Name";
  @SerializedName(SERIALIZED_NAME_RFC822_NAME)
  private String rfc822Name;

  public static final String SERIALIZED_NAME_DNS_NAME = "DnsName";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_DIRECTORY_NAME = "DirectoryName";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_NAME)
  private ASN1Subject directoryName;

  public static final String SERIALIZED_NAME_EDI_PARTY_NAME = "EdiPartyName";
  @SerializedName(SERIALIZED_NAME_EDI_PARTY_NAME)
  private GeneralNameEdiPartyName ediPartyName;

  public static final String SERIALIZED_NAME_UNIFORM_RESOURCE_IDENTIFIER = "UniformResourceIdentifier";
  @SerializedName(SERIALIZED_NAME_UNIFORM_RESOURCE_IDENTIFIER)
  private String uniformResourceIdentifier;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "IpAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_REGISTERED_ID = "RegisteredId";
  @SerializedName(SERIALIZED_NAME_REGISTERED_ID)
  private String registeredId;

  public AccessDescriptionAccessLocation() {
  }

  public AccessDescriptionAccessLocation otherName(GeneralNameOtherName otherName) {
    this.otherName = otherName;
    return this;
  }

  /**
   * Get otherName
   * @return otherName
   */
  @javax.annotation.Nullable
  public GeneralNameOtherName getOtherName() {
    return otherName;
  }

  public void setOtherName(GeneralNameOtherName otherName) {
    this.otherName = otherName;
  }


  public AccessDescriptionAccessLocation rfc822Name(String rfc822Name) {
    this.rfc822Name = rfc822Name;
    return this;
  }

  /**
   * Get rfc822Name
   * @return rfc822Name
   */
  @javax.annotation.Nullable
  public String getRfc822Name() {
    return rfc822Name;
  }

  public void setRfc822Name(String rfc822Name) {
    this.rfc822Name = rfc822Name;
  }


  public AccessDescriptionAccessLocation dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * Get dnsName
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public AccessDescriptionAccessLocation directoryName(ASN1Subject directoryName) {
    this.directoryName = directoryName;
    return this;
  }

  /**
   * Get directoryName
   * @return directoryName
   */
  @javax.annotation.Nullable
  public ASN1Subject getDirectoryName() {
    return directoryName;
  }

  public void setDirectoryName(ASN1Subject directoryName) {
    this.directoryName = directoryName;
  }


  public AccessDescriptionAccessLocation ediPartyName(GeneralNameEdiPartyName ediPartyName) {
    this.ediPartyName = ediPartyName;
    return this;
  }

  /**
   * Get ediPartyName
   * @return ediPartyName
   */
  @javax.annotation.Nullable
  public GeneralNameEdiPartyName getEdiPartyName() {
    return ediPartyName;
  }

  public void setEdiPartyName(GeneralNameEdiPartyName ediPartyName) {
    this.ediPartyName = ediPartyName;
  }


  public AccessDescriptionAccessLocation uniformResourceIdentifier(String uniformResourceIdentifier) {
    this.uniformResourceIdentifier = uniformResourceIdentifier;
    return this;
  }

  /**
   * Get uniformResourceIdentifier
   * @return uniformResourceIdentifier
   */
  @javax.annotation.Nullable
  public String getUniformResourceIdentifier() {
    return uniformResourceIdentifier;
  }

  public void setUniformResourceIdentifier(String uniformResourceIdentifier) {
    this.uniformResourceIdentifier = uniformResourceIdentifier;
  }


  public AccessDescriptionAccessLocation ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public AccessDescriptionAccessLocation registeredId(String registeredId) {
    this.registeredId = registeredId;
    return this;
  }

  /**
   * Get registeredId
   * @return registeredId
   */
  @javax.annotation.Nullable
  public String getRegisteredId() {
    return registeredId;
  }

  public void setRegisteredId(String registeredId) {
    this.registeredId = registeredId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessDescriptionAccessLocation accessDescriptionAccessLocation = (AccessDescriptionAccessLocation) o;
    return Objects.equals(this.otherName, accessDescriptionAccessLocation.otherName) &&
        Objects.equals(this.rfc822Name, accessDescriptionAccessLocation.rfc822Name) &&
        Objects.equals(this.dnsName, accessDescriptionAccessLocation.dnsName) &&
        Objects.equals(this.directoryName, accessDescriptionAccessLocation.directoryName) &&
        Objects.equals(this.ediPartyName, accessDescriptionAccessLocation.ediPartyName) &&
        Objects.equals(this.uniformResourceIdentifier, accessDescriptionAccessLocation.uniformResourceIdentifier) &&
        Objects.equals(this.ipAddress, accessDescriptionAccessLocation.ipAddress) &&
        Objects.equals(this.registeredId, accessDescriptionAccessLocation.registeredId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(otherName, rfc822Name, dnsName, directoryName, ediPartyName, uniformResourceIdentifier, ipAddress, registeredId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessDescriptionAccessLocation {\n");
    sb.append("    otherName: ").append(toIndentedString(otherName)).append("\n");
    sb.append("    rfc822Name: ").append(toIndentedString(rfc822Name)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    directoryName: ").append(toIndentedString(directoryName)).append("\n");
    sb.append("    ediPartyName: ").append(toIndentedString(ediPartyName)).append("\n");
    sb.append("    uniformResourceIdentifier: ").append(toIndentedString(uniformResourceIdentifier)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    registeredId: ").append(toIndentedString(registeredId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OtherName");
    openapiFields.add("Rfc822Name");
    openapiFields.add("DnsName");
    openapiFields.add("DirectoryName");
    openapiFields.add("EdiPartyName");
    openapiFields.add("UniformResourceIdentifier");
    openapiFields.add("IpAddress");
    openapiFields.add("RegisteredId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessDescriptionAccessLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessDescriptionAccessLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessDescriptionAccessLocation is not found in the empty JSON string", AccessDescriptionAccessLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessDescriptionAccessLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessDescriptionAccessLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `OtherName`
      if (jsonObj.get("OtherName") != null && !jsonObj.get("OtherName").isJsonNull()) {
        GeneralNameOtherName.validateJsonElement(jsonObj.get("OtherName"));
      }
      // validate the optional field `Rfc822Name`
      if (jsonObj.get("Rfc822Name") != null && !jsonObj.get("Rfc822Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Rfc822Name"));
      }
      // validate the optional field `DnsName`
      if (jsonObj.get("DnsName") != null && !jsonObj.get("DnsName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DnsName"));
      }
      // validate the optional field `DirectoryName`
      if (jsonObj.get("DirectoryName") != null && !jsonObj.get("DirectoryName").isJsonNull()) {
        ASN1Subject.validateJsonElement(jsonObj.get("DirectoryName"));
      }
      // validate the optional field `EdiPartyName`
      if (jsonObj.get("EdiPartyName") != null && !jsonObj.get("EdiPartyName").isJsonNull()) {
        GeneralNameEdiPartyName.validateJsonElement(jsonObj.get("EdiPartyName"));
      }
      // validate the optional field `UniformResourceIdentifier`
      if (jsonObj.get("UniformResourceIdentifier") != null && !jsonObj.get("UniformResourceIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UniformResourceIdentifier"));
      }
      // validate the optional field `IpAddress`
      if (jsonObj.get("IpAddress") != null && !jsonObj.get("IpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IpAddress"));
      }
      // validate the optional field `RegisteredId`
      if (jsonObj.get("RegisteredId") != null && !jsonObj.get("RegisteredId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RegisteredId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessDescriptionAccessLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessDescriptionAccessLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessDescriptionAccessLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessDescriptionAccessLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessDescriptionAccessLocation>() {
           @Override
           public void write(JsonWriter out, AccessDescriptionAccessLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessDescriptionAccessLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessDescriptionAccessLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessDescriptionAccessLocation
   * @throws IOException if the JSON string is invalid with respect to AccessDescriptionAccessLocation
   */
  public static AccessDescriptionAccessLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessDescriptionAccessLocation.class);
  }

  /**
   * Convert an instance of AccessDescriptionAccessLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

