/*
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the certificate subject. The &lt;code&gt;Subject&lt;/code&gt; field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The &lt;code&gt;Subject &lt;/code&gt;must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:35.096765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ASN1Subject {
  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_ORGANIZATION = "Organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_ORGANIZATIONAL_UNIT = "OrganizationalUnit";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONAL_UNIT)
  private String organizationalUnit;

  public static final String SERIALIZED_NAME_DISTINGUISHED_NAME_QUALIFIER = "DistinguishedNameQualifier";
  @SerializedName(SERIALIZED_NAME_DISTINGUISHED_NAME_QUALIFIER)
  private String distinguishedNameQualifier;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_COMMON_NAME = "CommonName";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_LOCALITY = "Locality";
  @SerializedName(SERIALIZED_NAME_LOCALITY)
  private String locality;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_SURNAME = "Surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "GivenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_INITIALS = "Initials";
  @SerializedName(SERIALIZED_NAME_INITIALS)
  private String initials;

  public static final String SERIALIZED_NAME_PSEUDONYM = "Pseudonym";
  @SerializedName(SERIALIZED_NAME_PSEUDONYM)
  private String pseudonym;

  public static final String SERIALIZED_NAME_GENERATION_QUALIFIER = "GenerationQualifier";
  @SerializedName(SERIALIZED_NAME_GENERATION_QUALIFIER)
  private String generationQualifier;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "CustomAttributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private List customAttributes;

  public ASN1Subject() {
  }

  public ASN1Subject country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ASN1Subject organization(String organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(String organization) {
    this.organization = organization;
  }


  public ASN1Subject organizationalUnit(String organizationalUnit) {
    this.organizationalUnit = organizationalUnit;
    return this;
  }

  /**
   * Get organizationalUnit
   * @return organizationalUnit
   */
  @javax.annotation.Nullable
  public String getOrganizationalUnit() {
    return organizationalUnit;
  }

  public void setOrganizationalUnit(String organizationalUnit) {
    this.organizationalUnit = organizationalUnit;
  }


  public ASN1Subject distinguishedNameQualifier(String distinguishedNameQualifier) {
    this.distinguishedNameQualifier = distinguishedNameQualifier;
    return this;
  }

  /**
   * Get distinguishedNameQualifier
   * @return distinguishedNameQualifier
   */
  @javax.annotation.Nullable
  public String getDistinguishedNameQualifier() {
    return distinguishedNameQualifier;
  }

  public void setDistinguishedNameQualifier(String distinguishedNameQualifier) {
    this.distinguishedNameQualifier = distinguishedNameQualifier;
  }


  public ASN1Subject state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public ASN1Subject commonName(String commonName) {
    this.commonName = commonName;
    return this;
  }

  /**
   * Get commonName
   * @return commonName
   */
  @javax.annotation.Nullable
  public String getCommonName() {
    return commonName;
  }

  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public ASN1Subject serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Get serialNumber
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public ASN1Subject locality(String locality) {
    this.locality = locality;
    return this;
  }

  /**
   * Get locality
   * @return locality
   */
  @javax.annotation.Nullable
  public String getLocality() {
    return locality;
  }

  public void setLocality(String locality) {
    this.locality = locality;
  }


  public ASN1Subject title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ASN1Subject surname(String surname) {
    this.surname = surname;
    return this;
  }

  /**
   * Get surname
   * @return surname
   */
  @javax.annotation.Nullable
  public String getSurname() {
    return surname;
  }

  public void setSurname(String surname) {
    this.surname = surname;
  }


  public ASN1Subject givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * Get givenName
   * @return givenName
   */
  @javax.annotation.Nullable
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public ASN1Subject initials(String initials) {
    this.initials = initials;
    return this;
  }

  /**
   * Get initials
   * @return initials
   */
  @javax.annotation.Nullable
  public String getInitials() {
    return initials;
  }

  public void setInitials(String initials) {
    this.initials = initials;
  }


  public ASN1Subject pseudonym(String pseudonym) {
    this.pseudonym = pseudonym;
    return this;
  }

  /**
   * Get pseudonym
   * @return pseudonym
   */
  @javax.annotation.Nullable
  public String getPseudonym() {
    return pseudonym;
  }

  public void setPseudonym(String pseudonym) {
    this.pseudonym = pseudonym;
  }


  public ASN1Subject generationQualifier(String generationQualifier) {
    this.generationQualifier = generationQualifier;
    return this;
  }

  /**
   * Get generationQualifier
   * @return generationQualifier
   */
  @javax.annotation.Nullable
  public String getGenerationQualifier() {
    return generationQualifier;
  }

  public void setGenerationQualifier(String generationQualifier) {
    this.generationQualifier = generationQualifier;
  }


  public ASN1Subject customAttributes(List customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  /**
   * Get customAttributes
   * @return customAttributes
   */
  @javax.annotation.Nullable
  public List getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(List customAttributes) {
    this.customAttributes = customAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ASN1Subject asN1Subject = (ASN1Subject) o;
    return Objects.equals(this.country, asN1Subject.country) &&
        Objects.equals(this.organization, asN1Subject.organization) &&
        Objects.equals(this.organizationalUnit, asN1Subject.organizationalUnit) &&
        Objects.equals(this.distinguishedNameQualifier, asN1Subject.distinguishedNameQualifier) &&
        Objects.equals(this.state, asN1Subject.state) &&
        Objects.equals(this.commonName, asN1Subject.commonName) &&
        Objects.equals(this.serialNumber, asN1Subject.serialNumber) &&
        Objects.equals(this.locality, asN1Subject.locality) &&
        Objects.equals(this.title, asN1Subject.title) &&
        Objects.equals(this.surname, asN1Subject.surname) &&
        Objects.equals(this.givenName, asN1Subject.givenName) &&
        Objects.equals(this.initials, asN1Subject.initials) &&
        Objects.equals(this.pseudonym, asN1Subject.pseudonym) &&
        Objects.equals(this.generationQualifier, asN1Subject.generationQualifier) &&
        Objects.equals(this.customAttributes, asN1Subject.customAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, organization, organizationalUnit, distinguishedNameQualifier, state, commonName, serialNumber, locality, title, surname, givenName, initials, pseudonym, generationQualifier, customAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ASN1Subject {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    organizationalUnit: ").append(toIndentedString(organizationalUnit)).append("\n");
    sb.append("    distinguishedNameQualifier: ").append(toIndentedString(distinguishedNameQualifier)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    initials: ").append(toIndentedString(initials)).append("\n");
    sb.append("    pseudonym: ").append(toIndentedString(pseudonym)).append("\n");
    sb.append("    generationQualifier: ").append(toIndentedString(generationQualifier)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Country");
    openapiFields.add("Organization");
    openapiFields.add("OrganizationalUnit");
    openapiFields.add("DistinguishedNameQualifier");
    openapiFields.add("State");
    openapiFields.add("CommonName");
    openapiFields.add("SerialNumber");
    openapiFields.add("Locality");
    openapiFields.add("Title");
    openapiFields.add("Surname");
    openapiFields.add("GivenName");
    openapiFields.add("Initials");
    openapiFields.add("Pseudonym");
    openapiFields.add("GenerationQualifier");
    openapiFields.add("CustomAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ASN1Subject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ASN1Subject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ASN1Subject is not found in the empty JSON string", ASN1Subject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ASN1Subject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ASN1Subject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Country`
      if (jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Country"));
      }
      // validate the optional field `Organization`
      if (jsonObj.get("Organization") != null && !jsonObj.get("Organization").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Organization"));
      }
      // validate the optional field `OrganizationalUnit`
      if (jsonObj.get("OrganizationalUnit") != null && !jsonObj.get("OrganizationalUnit").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OrganizationalUnit"));
      }
      // validate the optional field `DistinguishedNameQualifier`
      if (jsonObj.get("DistinguishedNameQualifier") != null && !jsonObj.get("DistinguishedNameQualifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DistinguishedNameQualifier"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `CommonName`
      if (jsonObj.get("CommonName") != null && !jsonObj.get("CommonName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CommonName"));
      }
      // validate the optional field `SerialNumber`
      if (jsonObj.get("SerialNumber") != null && !jsonObj.get("SerialNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SerialNumber"));
      }
      // validate the optional field `Locality`
      if (jsonObj.get("Locality") != null && !jsonObj.get("Locality").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Locality"));
      }
      // validate the optional field `Title`
      if (jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Title"));
      }
      // validate the optional field `Surname`
      if (jsonObj.get("Surname") != null && !jsonObj.get("Surname").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Surname"));
      }
      // validate the optional field `GivenName`
      if (jsonObj.get("GivenName") != null && !jsonObj.get("GivenName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GivenName"));
      }
      // validate the optional field `Initials`
      if (jsonObj.get("Initials") != null && !jsonObj.get("Initials").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Initials"));
      }
      // validate the optional field `Pseudonym`
      if (jsonObj.get("Pseudonym") != null && !jsonObj.get("Pseudonym").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Pseudonym"));
      }
      // validate the optional field `GenerationQualifier`
      if (jsonObj.get("GenerationQualifier") != null && !jsonObj.get("GenerationQualifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GenerationQualifier"));
      }
      // validate the optional field `CustomAttributes`
      if (jsonObj.get("CustomAttributes") != null && !jsonObj.get("CustomAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CustomAttributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ASN1Subject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ASN1Subject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ASN1Subject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ASN1Subject.class));

       return (TypeAdapter<T>) new TypeAdapter<ASN1Subject>() {
           @Override
           public void write(JsonWriter out, ASN1Subject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ASN1Subject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ASN1Subject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ASN1Subject
   * @throws IOException if the JSON string is invalid with respect to ASN1Subject
   */
  public static ASN1Subject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ASN1Subject.class);
  }

  /**
   * Convert an instance of ASN1Subject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

