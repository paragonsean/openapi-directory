/*
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CertificateAuthorityCertificateAuthorityConfiguration;
import org.openapitools.client.model.CertificateAuthorityRevocationConfiguration;
import org.openapitools.client.model.CertificateAuthorityStatus;
import org.openapitools.client.model.CertificateAuthorityType;
import org.openapitools.client.model.CertificateAuthorityUsageMode;
import org.openapitools.client.model.FailureReason;
import org.openapitools.client.model.KeyStorageSecurityStandard;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeCertificateAuthorityResponseCertificateAuthority
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:35.096765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeCertificateAuthorityResponseCertificateAuthority {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_OWNER_ACCOUNT = "OwnerAccount";
  @SerializedName(SERIALIZED_NAME_OWNER_ACCOUNT)
  private String ownerAccount;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_STATE_CHANGE_AT = "LastStateChangeAt";
  @SerializedName(SERIALIZED_NAME_LAST_STATE_CHANGE_AT)
  private OffsetDateTime lastStateChangeAt;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private CertificateAuthorityType type;

  public static final String SERIALIZED_NAME_SERIAL = "Serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private String serial;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CertificateAuthorityStatus status;

  public static final String SERIALIZED_NAME_NOT_BEFORE = "NotBefore";
  @SerializedName(SERIALIZED_NAME_NOT_BEFORE)
  private OffsetDateTime notBefore;

  public static final String SERIALIZED_NAME_NOT_AFTER = "NotAfter";
  @SerializedName(SERIALIZED_NAME_NOT_AFTER)
  private OffsetDateTime notAfter;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "FailureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private FailureReason failureReason;

  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITY_CONFIGURATION = "CertificateAuthorityConfiguration";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITY_CONFIGURATION)
  private CertificateAuthorityCertificateAuthorityConfiguration certificateAuthorityConfiguration;

  public static final String SERIALIZED_NAME_REVOCATION_CONFIGURATION = "RevocationConfiguration";
  @SerializedName(SERIALIZED_NAME_REVOCATION_CONFIGURATION)
  private CertificateAuthorityRevocationConfiguration revocationConfiguration;

  public static final String SERIALIZED_NAME_RESTORABLE_UNTIL = "RestorableUntil";
  @SerializedName(SERIALIZED_NAME_RESTORABLE_UNTIL)
  private OffsetDateTime restorableUntil;

  public static final String SERIALIZED_NAME_KEY_STORAGE_SECURITY_STANDARD = "KeyStorageSecurityStandard";
  @SerializedName(SERIALIZED_NAME_KEY_STORAGE_SECURITY_STANDARD)
  private KeyStorageSecurityStandard keyStorageSecurityStandard;

  public static final String SERIALIZED_NAME_USAGE_MODE = "UsageMode";
  @SerializedName(SERIALIZED_NAME_USAGE_MODE)
  private CertificateAuthorityUsageMode usageMode;

  public DescribeCertificateAuthorityResponseCertificateAuthority() {
  }

  public DescribeCertificateAuthorityResponseCertificateAuthority arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority ownerAccount(String ownerAccount) {
    this.ownerAccount = ownerAccount;
    return this;
  }

  /**
   * Get ownerAccount
   * @return ownerAccount
   */
  @javax.annotation.Nullable
  public String getOwnerAccount() {
    return ownerAccount;
  }

  public void setOwnerAccount(String ownerAccount) {
    this.ownerAccount = ownerAccount;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority lastStateChangeAt(OffsetDateTime lastStateChangeAt) {
    this.lastStateChangeAt = lastStateChangeAt;
    return this;
  }

  /**
   * Get lastStateChangeAt
   * @return lastStateChangeAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastStateChangeAt() {
    return lastStateChangeAt;
  }

  public void setLastStateChangeAt(OffsetDateTime lastStateChangeAt) {
    this.lastStateChangeAt = lastStateChangeAt;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority type(CertificateAuthorityType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public CertificateAuthorityType getType() {
    return type;
  }

  public void setType(CertificateAuthorityType type) {
    this.type = type;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority serial(String serial) {
    this.serial = serial;
    return this;
  }

  /**
   * Get serial
   * @return serial
   */
  @javax.annotation.Nullable
  public String getSerial() {
    return serial;
  }

  public void setSerial(String serial) {
    this.serial = serial;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority status(CertificateAuthorityStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CertificateAuthorityStatus getStatus() {
    return status;
  }

  public void setStatus(CertificateAuthorityStatus status) {
    this.status = status;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority notBefore(OffsetDateTime notBefore) {
    this.notBefore = notBefore;
    return this;
  }

  /**
   * Get notBefore
   * @return notBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNotBefore() {
    return notBefore;
  }

  public void setNotBefore(OffsetDateTime notBefore) {
    this.notBefore = notBefore;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority notAfter(OffsetDateTime notAfter) {
    this.notAfter = notAfter;
    return this;
  }

  /**
   * Get notAfter
   * @return notAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNotAfter() {
    return notAfter;
  }

  public void setNotAfter(OffsetDateTime notAfter) {
    this.notAfter = notAfter;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority failureReason(FailureReason failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  /**
   * Get failureReason
   * @return failureReason
   */
  @javax.annotation.Nullable
  public FailureReason getFailureReason() {
    return failureReason;
  }

  public void setFailureReason(FailureReason failureReason) {
    this.failureReason = failureReason;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority certificateAuthorityConfiguration(CertificateAuthorityCertificateAuthorityConfiguration certificateAuthorityConfiguration) {
    this.certificateAuthorityConfiguration = certificateAuthorityConfiguration;
    return this;
  }

  /**
   * Get certificateAuthorityConfiguration
   * @return certificateAuthorityConfiguration
   */
  @javax.annotation.Nullable
  public CertificateAuthorityCertificateAuthorityConfiguration getCertificateAuthorityConfiguration() {
    return certificateAuthorityConfiguration;
  }

  public void setCertificateAuthorityConfiguration(CertificateAuthorityCertificateAuthorityConfiguration certificateAuthorityConfiguration) {
    this.certificateAuthorityConfiguration = certificateAuthorityConfiguration;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority revocationConfiguration(CertificateAuthorityRevocationConfiguration revocationConfiguration) {
    this.revocationConfiguration = revocationConfiguration;
    return this;
  }

  /**
   * Get revocationConfiguration
   * @return revocationConfiguration
   */
  @javax.annotation.Nullable
  public CertificateAuthorityRevocationConfiguration getRevocationConfiguration() {
    return revocationConfiguration;
  }

  public void setRevocationConfiguration(CertificateAuthorityRevocationConfiguration revocationConfiguration) {
    this.revocationConfiguration = revocationConfiguration;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority restorableUntil(OffsetDateTime restorableUntil) {
    this.restorableUntil = restorableUntil;
    return this;
  }

  /**
   * Get restorableUntil
   * @return restorableUntil
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRestorableUntil() {
    return restorableUntil;
  }

  public void setRestorableUntil(OffsetDateTime restorableUntil) {
    this.restorableUntil = restorableUntil;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority keyStorageSecurityStandard(KeyStorageSecurityStandard keyStorageSecurityStandard) {
    this.keyStorageSecurityStandard = keyStorageSecurityStandard;
    return this;
  }

  /**
   * Get keyStorageSecurityStandard
   * @return keyStorageSecurityStandard
   */
  @javax.annotation.Nullable
  public KeyStorageSecurityStandard getKeyStorageSecurityStandard() {
    return keyStorageSecurityStandard;
  }

  public void setKeyStorageSecurityStandard(KeyStorageSecurityStandard keyStorageSecurityStandard) {
    this.keyStorageSecurityStandard = keyStorageSecurityStandard;
  }


  public DescribeCertificateAuthorityResponseCertificateAuthority usageMode(CertificateAuthorityUsageMode usageMode) {
    this.usageMode = usageMode;
    return this;
  }

  /**
   * Get usageMode
   * @return usageMode
   */
  @javax.annotation.Nullable
  public CertificateAuthorityUsageMode getUsageMode() {
    return usageMode;
  }

  public void setUsageMode(CertificateAuthorityUsageMode usageMode) {
    this.usageMode = usageMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeCertificateAuthorityResponseCertificateAuthority describeCertificateAuthorityResponseCertificateAuthority = (DescribeCertificateAuthorityResponseCertificateAuthority) o;
    return Objects.equals(this.arn, describeCertificateAuthorityResponseCertificateAuthority.arn) &&
        Objects.equals(this.ownerAccount, describeCertificateAuthorityResponseCertificateAuthority.ownerAccount) &&
        Objects.equals(this.createdAt, describeCertificateAuthorityResponseCertificateAuthority.createdAt) &&
        Objects.equals(this.lastStateChangeAt, describeCertificateAuthorityResponseCertificateAuthority.lastStateChangeAt) &&
        Objects.equals(this.type, describeCertificateAuthorityResponseCertificateAuthority.type) &&
        Objects.equals(this.serial, describeCertificateAuthorityResponseCertificateAuthority.serial) &&
        Objects.equals(this.status, describeCertificateAuthorityResponseCertificateAuthority.status) &&
        Objects.equals(this.notBefore, describeCertificateAuthorityResponseCertificateAuthority.notBefore) &&
        Objects.equals(this.notAfter, describeCertificateAuthorityResponseCertificateAuthority.notAfter) &&
        Objects.equals(this.failureReason, describeCertificateAuthorityResponseCertificateAuthority.failureReason) &&
        Objects.equals(this.certificateAuthorityConfiguration, describeCertificateAuthorityResponseCertificateAuthority.certificateAuthorityConfiguration) &&
        Objects.equals(this.revocationConfiguration, describeCertificateAuthorityResponseCertificateAuthority.revocationConfiguration) &&
        Objects.equals(this.restorableUntil, describeCertificateAuthorityResponseCertificateAuthority.restorableUntil) &&
        Objects.equals(this.keyStorageSecurityStandard, describeCertificateAuthorityResponseCertificateAuthority.keyStorageSecurityStandard) &&
        Objects.equals(this.usageMode, describeCertificateAuthorityResponseCertificateAuthority.usageMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, ownerAccount, createdAt, lastStateChangeAt, type, serial, status, notBefore, notAfter, failureReason, certificateAuthorityConfiguration, revocationConfiguration, restorableUntil, keyStorageSecurityStandard, usageMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeCertificateAuthorityResponseCertificateAuthority {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    ownerAccount: ").append(toIndentedString(ownerAccount)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastStateChangeAt: ").append(toIndentedString(lastStateChangeAt)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    notBefore: ").append(toIndentedString(notBefore)).append("\n");
    sb.append("    notAfter: ").append(toIndentedString(notAfter)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    certificateAuthorityConfiguration: ").append(toIndentedString(certificateAuthorityConfiguration)).append("\n");
    sb.append("    revocationConfiguration: ").append(toIndentedString(revocationConfiguration)).append("\n");
    sb.append("    restorableUntil: ").append(toIndentedString(restorableUntil)).append("\n");
    sb.append("    keyStorageSecurityStandard: ").append(toIndentedString(keyStorageSecurityStandard)).append("\n");
    sb.append("    usageMode: ").append(toIndentedString(usageMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("OwnerAccount");
    openapiFields.add("CreatedAt");
    openapiFields.add("LastStateChangeAt");
    openapiFields.add("Type");
    openapiFields.add("Serial");
    openapiFields.add("Status");
    openapiFields.add("NotBefore");
    openapiFields.add("NotAfter");
    openapiFields.add("FailureReason");
    openapiFields.add("CertificateAuthorityConfiguration");
    openapiFields.add("RevocationConfiguration");
    openapiFields.add("RestorableUntil");
    openapiFields.add("KeyStorageSecurityStandard");
    openapiFields.add("UsageMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeCertificateAuthorityResponseCertificateAuthority
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeCertificateAuthorityResponseCertificateAuthority.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeCertificateAuthorityResponseCertificateAuthority is not found in the empty JSON string", DescribeCertificateAuthorityResponseCertificateAuthority.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeCertificateAuthorityResponseCertificateAuthority.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeCertificateAuthorityResponseCertificateAuthority` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `OwnerAccount`
      if (jsonObj.get("OwnerAccount") != null && !jsonObj.get("OwnerAccount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OwnerAccount"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `LastStateChangeAt`
      if (jsonObj.get("LastStateChangeAt") != null && !jsonObj.get("LastStateChangeAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastStateChangeAt"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        CertificateAuthorityType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `Serial`
      if (jsonObj.get("Serial") != null && !jsonObj.get("Serial").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Serial"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        CertificateAuthorityStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `NotBefore`
      if (jsonObj.get("NotBefore") != null && !jsonObj.get("NotBefore").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("NotBefore"));
      }
      // validate the optional field `NotAfter`
      if (jsonObj.get("NotAfter") != null && !jsonObj.get("NotAfter").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("NotAfter"));
      }
      // validate the optional field `FailureReason`
      if (jsonObj.get("FailureReason") != null && !jsonObj.get("FailureReason").isJsonNull()) {
        FailureReason.validateJsonElement(jsonObj.get("FailureReason"));
      }
      // validate the optional field `CertificateAuthorityConfiguration`
      if (jsonObj.get("CertificateAuthorityConfiguration") != null && !jsonObj.get("CertificateAuthorityConfiguration").isJsonNull()) {
        CertificateAuthorityCertificateAuthorityConfiguration.validateJsonElement(jsonObj.get("CertificateAuthorityConfiguration"));
      }
      // validate the optional field `RevocationConfiguration`
      if (jsonObj.get("RevocationConfiguration") != null && !jsonObj.get("RevocationConfiguration").isJsonNull()) {
        CertificateAuthorityRevocationConfiguration.validateJsonElement(jsonObj.get("RevocationConfiguration"));
      }
      // validate the optional field `RestorableUntil`
      if (jsonObj.get("RestorableUntil") != null && !jsonObj.get("RestorableUntil").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("RestorableUntil"));
      }
      // validate the optional field `KeyStorageSecurityStandard`
      if (jsonObj.get("KeyStorageSecurityStandard") != null && !jsonObj.get("KeyStorageSecurityStandard").isJsonNull()) {
        KeyStorageSecurityStandard.validateJsonElement(jsonObj.get("KeyStorageSecurityStandard"));
      }
      // validate the optional field `UsageMode`
      if (jsonObj.get("UsageMode") != null && !jsonObj.get("UsageMode").isJsonNull()) {
        CertificateAuthorityUsageMode.validateJsonElement(jsonObj.get("UsageMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeCertificateAuthorityResponseCertificateAuthority.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeCertificateAuthorityResponseCertificateAuthority' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeCertificateAuthorityResponseCertificateAuthority> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeCertificateAuthorityResponseCertificateAuthority.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeCertificateAuthorityResponseCertificateAuthority>() {
           @Override
           public void write(JsonWriter out, DescribeCertificateAuthorityResponseCertificateAuthority value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeCertificateAuthorityResponseCertificateAuthority read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeCertificateAuthorityResponseCertificateAuthority given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeCertificateAuthorityResponseCertificateAuthority
   * @throws IOException if the JSON string is invalid with respect to DescribeCertificateAuthorityResponseCertificateAuthority
   */
  public static DescribeCertificateAuthorityResponseCertificateAuthority fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeCertificateAuthorityResponseCertificateAuthority.class);
  }

  /**
   * Convert an instance of DescribeCertificateAuthorityResponseCertificateAuthority to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

