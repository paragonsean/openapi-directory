/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssueCertificateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssueCertificateRequest::OAIIssueCertificateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssueCertificateRequest::OAIIssueCertificateRequest() {
    this->initializeModel();
}

OAIIssueCertificateRequest::~OAIIssueCertificateRequest() {}

void OAIIssueCertificateRequest::initializeModel() {

    m_api_passthrough_isSet = false;
    m_api_passthrough_isValid = false;

    m_certificate_authority_arn_isSet = false;
    m_certificate_authority_arn_isValid = false;

    m_csr_isSet = false;
    m_csr_isValid = false;

    m_signing_algorithm_isSet = false;
    m_signing_algorithm_isValid = false;

    m_template_arn_isSet = false;
    m_template_arn_isValid = false;

    m_validity_isSet = false;
    m_validity_isValid = false;

    m_validity_not_before_isSet = false;
    m_validity_not_before_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAIIssueCertificateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssueCertificateRequest::fromJsonObject(QJsonObject json) {

    m_api_passthrough_isValid = ::OpenAPI::fromJsonValue(m_api_passthrough, json[QString("ApiPassthrough")]);
    m_api_passthrough_isSet = !json[QString("ApiPassthrough")].isNull() && m_api_passthrough_isValid;

    m_certificate_authority_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_authority_arn, json[QString("CertificateAuthorityArn")]);
    m_certificate_authority_arn_isSet = !json[QString("CertificateAuthorityArn")].isNull() && m_certificate_authority_arn_isValid;

    m_csr_isValid = ::OpenAPI::fromJsonValue(m_csr, json[QString("Csr")]);
    m_csr_isSet = !json[QString("Csr")].isNull() && m_csr_isValid;

    m_signing_algorithm_isValid = ::OpenAPI::fromJsonValue(m_signing_algorithm, json[QString("SigningAlgorithm")]);
    m_signing_algorithm_isSet = !json[QString("SigningAlgorithm")].isNull() && m_signing_algorithm_isValid;

    m_template_arn_isValid = ::OpenAPI::fromJsonValue(m_template_arn, json[QString("TemplateArn")]);
    m_template_arn_isSet = !json[QString("TemplateArn")].isNull() && m_template_arn_isValid;

    m_validity_isValid = ::OpenAPI::fromJsonValue(m_validity, json[QString("Validity")]);
    m_validity_isSet = !json[QString("Validity")].isNull() && m_validity_isValid;

    m_validity_not_before_isValid = ::OpenAPI::fromJsonValue(m_validity_not_before, json[QString("ValidityNotBefore")]);
    m_validity_not_before_isSet = !json[QString("ValidityNotBefore")].isNull() && m_validity_not_before_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAIIssueCertificateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssueCertificateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_api_passthrough.isSet()) {
        obj.insert(QString("ApiPassthrough"), ::OpenAPI::toJsonValue(m_api_passthrough));
    }
    if (m_certificate_authority_arn_isSet) {
        obj.insert(QString("CertificateAuthorityArn"), ::OpenAPI::toJsonValue(m_certificate_authority_arn));
    }
    if (m_csr_isSet) {
        obj.insert(QString("Csr"), ::OpenAPI::toJsonValue(m_csr));
    }
    if (m_signing_algorithm.isSet()) {
        obj.insert(QString("SigningAlgorithm"), ::OpenAPI::toJsonValue(m_signing_algorithm));
    }
    if (m_template_arn_isSet) {
        obj.insert(QString("TemplateArn"), ::OpenAPI::toJsonValue(m_template_arn));
    }
    if (m_validity.isSet()) {
        obj.insert(QString("Validity"), ::OpenAPI::toJsonValue(m_validity));
    }
    if (m_validity_not_before.isSet()) {
        obj.insert(QString("ValidityNotBefore"), ::OpenAPI::toJsonValue(m_validity_not_before));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

OAIIssueCertificateRequest_ApiPassthrough OAIIssueCertificateRequest::getApiPassthrough() const {
    return m_api_passthrough;
}
void OAIIssueCertificateRequest::setApiPassthrough(const OAIIssueCertificateRequest_ApiPassthrough &api_passthrough) {
    m_api_passthrough = api_passthrough;
    m_api_passthrough_isSet = true;
}

bool OAIIssueCertificateRequest::is_api_passthrough_Set() const{
    return m_api_passthrough_isSet;
}

bool OAIIssueCertificateRequest::is_api_passthrough_Valid() const{
    return m_api_passthrough_isValid;
}

QString OAIIssueCertificateRequest::getCertificateAuthorityArn() const {
    return m_certificate_authority_arn;
}
void OAIIssueCertificateRequest::setCertificateAuthorityArn(const QString &certificate_authority_arn) {
    m_certificate_authority_arn = certificate_authority_arn;
    m_certificate_authority_arn_isSet = true;
}

bool OAIIssueCertificateRequest::is_certificate_authority_arn_Set() const{
    return m_certificate_authority_arn_isSet;
}

bool OAIIssueCertificateRequest::is_certificate_authority_arn_Valid() const{
    return m_certificate_authority_arn_isValid;
}

QString OAIIssueCertificateRequest::getCsr() const {
    return m_csr;
}
void OAIIssueCertificateRequest::setCsr(const QString &csr) {
    m_csr = csr;
    m_csr_isSet = true;
}

bool OAIIssueCertificateRequest::is_csr_Set() const{
    return m_csr_isSet;
}

bool OAIIssueCertificateRequest::is_csr_Valid() const{
    return m_csr_isValid;
}

OAISigningAlgorithm OAIIssueCertificateRequest::getSigningAlgorithm() const {
    return m_signing_algorithm;
}
void OAIIssueCertificateRequest::setSigningAlgorithm(const OAISigningAlgorithm &signing_algorithm) {
    m_signing_algorithm = signing_algorithm;
    m_signing_algorithm_isSet = true;
}

bool OAIIssueCertificateRequest::is_signing_algorithm_Set() const{
    return m_signing_algorithm_isSet;
}

bool OAIIssueCertificateRequest::is_signing_algorithm_Valid() const{
    return m_signing_algorithm_isValid;
}

QString OAIIssueCertificateRequest::getTemplateArn() const {
    return m_template_arn;
}
void OAIIssueCertificateRequest::setTemplateArn(const QString &template_arn) {
    m_template_arn = template_arn;
    m_template_arn_isSet = true;
}

bool OAIIssueCertificateRequest::is_template_arn_Set() const{
    return m_template_arn_isSet;
}

bool OAIIssueCertificateRequest::is_template_arn_Valid() const{
    return m_template_arn_isValid;
}

OAIIssueCertificateRequest_Validity OAIIssueCertificateRequest::getValidity() const {
    return m_validity;
}
void OAIIssueCertificateRequest::setValidity(const OAIIssueCertificateRequest_Validity &validity) {
    m_validity = validity;
    m_validity_isSet = true;
}

bool OAIIssueCertificateRequest::is_validity_Set() const{
    return m_validity_isSet;
}

bool OAIIssueCertificateRequest::is_validity_Valid() const{
    return m_validity_isValid;
}

OAIIssueCertificateRequest_ValidityNotBefore OAIIssueCertificateRequest::getValidityNotBefore() const {
    return m_validity_not_before;
}
void OAIIssueCertificateRequest::setValidityNotBefore(const OAIIssueCertificateRequest_ValidityNotBefore &validity_not_before) {
    m_validity_not_before = validity_not_before;
    m_validity_not_before_isSet = true;
}

bool OAIIssueCertificateRequest::is_validity_not_before_Set() const{
    return m_validity_not_before_isSet;
}

bool OAIIssueCertificateRequest::is_validity_not_before_Valid() const{
    return m_validity_not_before_isValid;
}

QString OAIIssueCertificateRequest::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAIIssueCertificateRequest::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAIIssueCertificateRequest::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAIIssueCertificateRequest::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAIIssueCertificateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_passthrough.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_authority_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_csr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_not_before.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssueCertificateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_authority_arn_isValid && m_csr_isValid && m_signing_algorithm_isValid && m_validity_isValid && true;
}

} // namespace OpenAPI
