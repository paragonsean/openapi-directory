/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsrExtensions_KeyUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsrExtensions_KeyUsage::OAICsrExtensions_KeyUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsrExtensions_KeyUsage::OAICsrExtensions_KeyUsage() {
    this->initializeModel();
}

OAICsrExtensions_KeyUsage::~OAICsrExtensions_KeyUsage() {}

void OAICsrExtensions_KeyUsage::initializeModel() {

    m_digital_signature_isSet = false;
    m_digital_signature_isValid = false;

    m_non_repudiation_isSet = false;
    m_non_repudiation_isValid = false;

    m_key_encipherment_isSet = false;
    m_key_encipherment_isValid = false;

    m_data_encipherment_isSet = false;
    m_data_encipherment_isValid = false;

    m_key_agreement_isSet = false;
    m_key_agreement_isValid = false;

    m_key_cert_sign_isSet = false;
    m_key_cert_sign_isValid = false;

    m_crl_sign_isSet = false;
    m_crl_sign_isValid = false;

    m_encipher_only_isSet = false;
    m_encipher_only_isValid = false;

    m_decipher_only_isSet = false;
    m_decipher_only_isValid = false;
}

void OAICsrExtensions_KeyUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsrExtensions_KeyUsage::fromJsonObject(QJsonObject json) {

    m_digital_signature_isValid = ::OpenAPI::fromJsonValue(m_digital_signature, json[QString("DigitalSignature")]);
    m_digital_signature_isSet = !json[QString("DigitalSignature")].isNull() && m_digital_signature_isValid;

    m_non_repudiation_isValid = ::OpenAPI::fromJsonValue(m_non_repudiation, json[QString("NonRepudiation")]);
    m_non_repudiation_isSet = !json[QString("NonRepudiation")].isNull() && m_non_repudiation_isValid;

    m_key_encipherment_isValid = ::OpenAPI::fromJsonValue(m_key_encipherment, json[QString("KeyEncipherment")]);
    m_key_encipherment_isSet = !json[QString("KeyEncipherment")].isNull() && m_key_encipherment_isValid;

    m_data_encipherment_isValid = ::OpenAPI::fromJsonValue(m_data_encipherment, json[QString("DataEncipherment")]);
    m_data_encipherment_isSet = !json[QString("DataEncipherment")].isNull() && m_data_encipherment_isValid;

    m_key_agreement_isValid = ::OpenAPI::fromJsonValue(m_key_agreement, json[QString("KeyAgreement")]);
    m_key_agreement_isSet = !json[QString("KeyAgreement")].isNull() && m_key_agreement_isValid;

    m_key_cert_sign_isValid = ::OpenAPI::fromJsonValue(m_key_cert_sign, json[QString("KeyCertSign")]);
    m_key_cert_sign_isSet = !json[QString("KeyCertSign")].isNull() && m_key_cert_sign_isValid;

    m_crl_sign_isValid = ::OpenAPI::fromJsonValue(m_crl_sign, json[QString("CRLSign")]);
    m_crl_sign_isSet = !json[QString("CRLSign")].isNull() && m_crl_sign_isValid;

    m_encipher_only_isValid = ::OpenAPI::fromJsonValue(m_encipher_only, json[QString("EncipherOnly")]);
    m_encipher_only_isSet = !json[QString("EncipherOnly")].isNull() && m_encipher_only_isValid;

    m_decipher_only_isValid = ::OpenAPI::fromJsonValue(m_decipher_only, json[QString("DecipherOnly")]);
    m_decipher_only_isSet = !json[QString("DecipherOnly")].isNull() && m_decipher_only_isValid;
}

QString OAICsrExtensions_KeyUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsrExtensions_KeyUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_digital_signature_isSet) {
        obj.insert(QString("DigitalSignature"), ::OpenAPI::toJsonValue(m_digital_signature));
    }
    if (m_non_repudiation_isSet) {
        obj.insert(QString("NonRepudiation"), ::OpenAPI::toJsonValue(m_non_repudiation));
    }
    if (m_key_encipherment_isSet) {
        obj.insert(QString("KeyEncipherment"), ::OpenAPI::toJsonValue(m_key_encipherment));
    }
    if (m_data_encipherment_isSet) {
        obj.insert(QString("DataEncipherment"), ::OpenAPI::toJsonValue(m_data_encipherment));
    }
    if (m_key_agreement_isSet) {
        obj.insert(QString("KeyAgreement"), ::OpenAPI::toJsonValue(m_key_agreement));
    }
    if (m_key_cert_sign_isSet) {
        obj.insert(QString("KeyCertSign"), ::OpenAPI::toJsonValue(m_key_cert_sign));
    }
    if (m_crl_sign_isSet) {
        obj.insert(QString("CRLSign"), ::OpenAPI::toJsonValue(m_crl_sign));
    }
    if (m_encipher_only_isSet) {
        obj.insert(QString("EncipherOnly"), ::OpenAPI::toJsonValue(m_encipher_only));
    }
    if (m_decipher_only_isSet) {
        obj.insert(QString("DecipherOnly"), ::OpenAPI::toJsonValue(m_decipher_only));
    }
    return obj;
}

bool OAICsrExtensions_KeyUsage::getDigitalSignature() const {
    return m_digital_signature;
}
void OAICsrExtensions_KeyUsage::setDigitalSignature(const bool &digital_signature) {
    m_digital_signature = digital_signature;
    m_digital_signature_isSet = true;
}

bool OAICsrExtensions_KeyUsage::is_digital_signature_Set() const{
    return m_digital_signature_isSet;
}

bool OAICsrExtensions_KeyUsage::is_digital_signature_Valid() const{
    return m_digital_signature_isValid;
}

bool OAICsrExtensions_KeyUsage::getNonRepudiation() const {
    return m_non_repudiation;
}
void OAICsrExtensions_KeyUsage::setNonRepudiation(const bool &non_repudiation) {
    m_non_repudiation = non_repudiation;
    m_non_repudiation_isSet = true;
}

bool OAICsrExtensions_KeyUsage::is_non_repudiation_Set() const{
    return m_non_repudiation_isSet;
}

bool OAICsrExtensions_KeyUsage::is_non_repudiation_Valid() const{
    return m_non_repudiation_isValid;
}

bool OAICsrExtensions_KeyUsage::getKeyEncipherment() const {
    return m_key_encipherment;
}
void OAICsrExtensions_KeyUsage::setKeyEncipherment(const bool &key_encipherment) {
    m_key_encipherment = key_encipherment;
    m_key_encipherment_isSet = true;
}

bool OAICsrExtensions_KeyUsage::is_key_encipherment_Set() const{
    return m_key_encipherment_isSet;
}

bool OAICsrExtensions_KeyUsage::is_key_encipherment_Valid() const{
    return m_key_encipherment_isValid;
}

bool OAICsrExtensions_KeyUsage::getDataEncipherment() const {
    return m_data_encipherment;
}
void OAICsrExtensions_KeyUsage::setDataEncipherment(const bool &data_encipherment) {
    m_data_encipherment = data_encipherment;
    m_data_encipherment_isSet = true;
}

bool OAICsrExtensions_KeyUsage::is_data_encipherment_Set() const{
    return m_data_encipherment_isSet;
}

bool OAICsrExtensions_KeyUsage::is_data_encipherment_Valid() const{
    return m_data_encipherment_isValid;
}

bool OAICsrExtensions_KeyUsage::getKeyAgreement() const {
    return m_key_agreement;
}
void OAICsrExtensions_KeyUsage::setKeyAgreement(const bool &key_agreement) {
    m_key_agreement = key_agreement;
    m_key_agreement_isSet = true;
}

bool OAICsrExtensions_KeyUsage::is_key_agreement_Set() const{
    return m_key_agreement_isSet;
}

bool OAICsrExtensions_KeyUsage::is_key_agreement_Valid() const{
    return m_key_agreement_isValid;
}

bool OAICsrExtensions_KeyUsage::getKeyCertSign() const {
    return m_key_cert_sign;
}
void OAICsrExtensions_KeyUsage::setKeyCertSign(const bool &key_cert_sign) {
    m_key_cert_sign = key_cert_sign;
    m_key_cert_sign_isSet = true;
}

bool OAICsrExtensions_KeyUsage::is_key_cert_sign_Set() const{
    return m_key_cert_sign_isSet;
}

bool OAICsrExtensions_KeyUsage::is_key_cert_sign_Valid() const{
    return m_key_cert_sign_isValid;
}

bool OAICsrExtensions_KeyUsage::getCrlSign() const {
    return m_crl_sign;
}
void OAICsrExtensions_KeyUsage::setCrlSign(const bool &crl_sign) {
    m_crl_sign = crl_sign;
    m_crl_sign_isSet = true;
}

bool OAICsrExtensions_KeyUsage::is_crl_sign_Set() const{
    return m_crl_sign_isSet;
}

bool OAICsrExtensions_KeyUsage::is_crl_sign_Valid() const{
    return m_crl_sign_isValid;
}

bool OAICsrExtensions_KeyUsage::getEncipherOnly() const {
    return m_encipher_only;
}
void OAICsrExtensions_KeyUsage::setEncipherOnly(const bool &encipher_only) {
    m_encipher_only = encipher_only;
    m_encipher_only_isSet = true;
}

bool OAICsrExtensions_KeyUsage::is_encipher_only_Set() const{
    return m_encipher_only_isSet;
}

bool OAICsrExtensions_KeyUsage::is_encipher_only_Valid() const{
    return m_encipher_only_isValid;
}

bool OAICsrExtensions_KeyUsage::getDecipherOnly() const {
    return m_decipher_only;
}
void OAICsrExtensions_KeyUsage::setDecipherOnly(const bool &decipher_only) {
    m_decipher_only = decipher_only;
    m_decipher_only_isSet = true;
}

bool OAICsrExtensions_KeyUsage::is_decipher_only_Set() const{
    return m_decipher_only_isSet;
}

bool OAICsrExtensions_KeyUsage::is_decipher_only_Valid() const{
    return m_decipher_only_isValid;
}

bool OAICsrExtensions_KeyUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_digital_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_repudiation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_encipherment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_encipherment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_agreement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_cert_sign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crl_sign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encipher_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decipher_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsrExtensions_KeyUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
