/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtensions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtensions::OAIExtensions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtensions::OAIExtensions() {
    this->initializeModel();
}

OAIExtensions::~OAIExtensions() {}

void OAIExtensions::initializeModel() {

    m_certificate_policies_isSet = false;
    m_certificate_policies_isValid = false;

    m_extended_key_usage_isSet = false;
    m_extended_key_usage_isValid = false;

    m_key_usage_isSet = false;
    m_key_usage_isValid = false;

    m_subject_alternative_names_isSet = false;
    m_subject_alternative_names_isValid = false;

    m_custom_extensions_isSet = false;
    m_custom_extensions_isValid = false;
}

void OAIExtensions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtensions::fromJsonObject(QJsonObject json) {

    m_certificate_policies_isValid = ::OpenAPI::fromJsonValue(m_certificate_policies, json[QString("CertificatePolicies")]);
    m_certificate_policies_isSet = !json[QString("CertificatePolicies")].isNull() && m_certificate_policies_isValid;

    m_extended_key_usage_isValid = ::OpenAPI::fromJsonValue(m_extended_key_usage, json[QString("ExtendedKeyUsage")]);
    m_extended_key_usage_isSet = !json[QString("ExtendedKeyUsage")].isNull() && m_extended_key_usage_isValid;

    m_key_usage_isValid = ::OpenAPI::fromJsonValue(m_key_usage, json[QString("KeyUsage")]);
    m_key_usage_isSet = !json[QString("KeyUsage")].isNull() && m_key_usage_isValid;

    m_subject_alternative_names_isValid = ::OpenAPI::fromJsonValue(m_subject_alternative_names, json[QString("SubjectAlternativeNames")]);
    m_subject_alternative_names_isSet = !json[QString("SubjectAlternativeNames")].isNull() && m_subject_alternative_names_isValid;

    m_custom_extensions_isValid = ::OpenAPI::fromJsonValue(m_custom_extensions, json[QString("CustomExtensions")]);
    m_custom_extensions_isSet = !json[QString("CustomExtensions")].isNull() && m_custom_extensions_isValid;
}

QString OAIExtensions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtensions::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_policies.isSet()) {
        obj.insert(QString("CertificatePolicies"), ::OpenAPI::toJsonValue(m_certificate_policies));
    }
    if (m_extended_key_usage.isSet()) {
        obj.insert(QString("ExtendedKeyUsage"), ::OpenAPI::toJsonValue(m_extended_key_usage));
    }
    if (m_key_usage.isSet()) {
        obj.insert(QString("KeyUsage"), ::OpenAPI::toJsonValue(m_key_usage));
    }
    if (m_subject_alternative_names.isSet()) {
        obj.insert(QString("SubjectAlternativeNames"), ::OpenAPI::toJsonValue(m_subject_alternative_names));
    }
    if (m_custom_extensions.isSet()) {
        obj.insert(QString("CustomExtensions"), ::OpenAPI::toJsonValue(m_custom_extensions));
    }
    return obj;
}

QList OAIExtensions::getCertificatePolicies() const {
    return m_certificate_policies;
}
void OAIExtensions::setCertificatePolicies(const QList &certificate_policies) {
    m_certificate_policies = certificate_policies;
    m_certificate_policies_isSet = true;
}

bool OAIExtensions::is_certificate_policies_Set() const{
    return m_certificate_policies_isSet;
}

bool OAIExtensions::is_certificate_policies_Valid() const{
    return m_certificate_policies_isValid;
}

QList OAIExtensions::getExtendedKeyUsage() const {
    return m_extended_key_usage;
}
void OAIExtensions::setExtendedKeyUsage(const QList &extended_key_usage) {
    m_extended_key_usage = extended_key_usage;
    m_extended_key_usage_isSet = true;
}

bool OAIExtensions::is_extended_key_usage_Set() const{
    return m_extended_key_usage_isSet;
}

bool OAIExtensions::is_extended_key_usage_Valid() const{
    return m_extended_key_usage_isValid;
}

OAIKeyUsage OAIExtensions::getKeyUsage() const {
    return m_key_usage;
}
void OAIExtensions::setKeyUsage(const OAIKeyUsage &key_usage) {
    m_key_usage = key_usage;
    m_key_usage_isSet = true;
}

bool OAIExtensions::is_key_usage_Set() const{
    return m_key_usage_isSet;
}

bool OAIExtensions::is_key_usage_Valid() const{
    return m_key_usage_isValid;
}

QList OAIExtensions::getSubjectAlternativeNames() const {
    return m_subject_alternative_names;
}
void OAIExtensions::setSubjectAlternativeNames(const QList &subject_alternative_names) {
    m_subject_alternative_names = subject_alternative_names;
    m_subject_alternative_names_isSet = true;
}

bool OAIExtensions::is_subject_alternative_names_Set() const{
    return m_subject_alternative_names_isSet;
}

bool OAIExtensions::is_subject_alternative_names_Valid() const{
    return m_subject_alternative_names_isValid;
}

QList OAIExtensions::getCustomExtensions() const {
    return m_custom_extensions;
}
void OAIExtensions::setCustomExtensions(const QList &custom_extensions) {
    m_custom_extensions = custom_extensions;
    m_custom_extensions_isSet = true;
}

bool OAIExtensions::is_custom_extensions_Set() const{
    return m_custom_extensions_isSet;
}

bool OAIExtensions::is_custom_extensions_Valid() const{
    return m_custom_extensions_isValid;
}

bool OAIExtensions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_key_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_alternative_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_extensions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtensions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
