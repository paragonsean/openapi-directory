/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission::OAIPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission::OAIPermission() {
    this->initializeModel();
}

OAIPermission::~OAIPermission() {}

void OAIPermission::initializeModel() {

    m_certificate_authority_arn_isSet = false;
    m_certificate_authority_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_source_account_isSet = false;
    m_source_account_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission::fromJsonObject(QJsonObject json) {

    m_certificate_authority_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_authority_arn, json[QString("CertificateAuthorityArn")]);
    m_certificate_authority_arn_isSet = !json[QString("CertificateAuthorityArn")].isNull() && m_certificate_authority_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("Principal")]);
    m_principal_isSet = !json[QString("Principal")].isNull() && m_principal_isValid;

    m_source_account_isValid = ::OpenAPI::fromJsonValue(m_source_account, json[QString("SourceAccount")]);
    m_source_account_isSet = !json[QString("SourceAccount")].isNull() && m_source_account_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("Actions")]);
    m_actions_isSet = !json[QString("Actions")].isNull() && m_actions_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;
}

QString OAIPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_authority_arn_isSet) {
        obj.insert(QString("CertificateAuthorityArn"), ::OpenAPI::toJsonValue(m_certificate_authority_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_principal_isSet) {
        obj.insert(QString("Principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_source_account_isSet) {
        obj.insert(QString("SourceAccount"), ::OpenAPI::toJsonValue(m_source_account));
    }
    if (m_actions.isSet()) {
        obj.insert(QString("Actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIPermission::getCertificateAuthorityArn() const {
    return m_certificate_authority_arn;
}
void OAIPermission::setCertificateAuthorityArn(const QString &certificate_authority_arn) {
    m_certificate_authority_arn = certificate_authority_arn;
    m_certificate_authority_arn_isSet = true;
}

bool OAIPermission::is_certificate_authority_arn_Set() const{
    return m_certificate_authority_arn_isSet;
}

bool OAIPermission::is_certificate_authority_arn_Valid() const{
    return m_certificate_authority_arn_isValid;
}

QDateTime OAIPermission::getCreatedAt() const {
    return m_created_at;
}
void OAIPermission::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPermission::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPermission::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPermission::getPrincipal() const {
    return m_principal;
}
void OAIPermission::setPrincipal(const QString &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIPermission::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIPermission::is_principal_Valid() const{
    return m_principal_isValid;
}

QString OAIPermission::getSourceAccount() const {
    return m_source_account;
}
void OAIPermission::setSourceAccount(const QString &source_account) {
    m_source_account = source_account;
    m_source_account_isSet = true;
}

bool OAIPermission::is_source_account_Set() const{
    return m_source_account_isSet;
}

bool OAIPermission::is_source_account_Valid() const{
    return m_source_account_isValid;
}

QList OAIPermission::getActions() const {
    return m_actions;
}
void OAIPermission::setActions(const QList &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIPermission::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIPermission::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAIPermission::getPolicy() const {
    return m_policy;
}
void OAIPermission::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPermission::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPermission::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_authority_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
