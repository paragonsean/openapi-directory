/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIssueCertificateRequest.h
 *
 * 
 */

#ifndef OAIIssueCertificateRequest_H
#define OAIIssueCertificateRequest_H

#include <QJsonObject>

#include "OAIIssueCertificateRequest_ApiPassthrough.h"
#include "OAIIssueCertificateRequest_Validity.h"
#include "OAIIssueCertificateRequest_ValidityNotBefore.h"
#include "OAISigningAlgorithm.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIssueCertificateRequest_ApiPassthrough;
class OAIIssueCertificateRequest_Validity;
class OAIIssueCertificateRequest_ValidityNotBefore;

class OAIIssueCertificateRequest : public OAIObject {
public:
    OAIIssueCertificateRequest();
    OAIIssueCertificateRequest(QString json);
    ~OAIIssueCertificateRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIIssueCertificateRequest_ApiPassthrough getApiPassthrough() const;
    void setApiPassthrough(const OAIIssueCertificateRequest_ApiPassthrough &api_passthrough);
    bool is_api_passthrough_Set() const;
    bool is_api_passthrough_Valid() const;

    QString getCertificateAuthorityArn() const;
    void setCertificateAuthorityArn(const QString &certificate_authority_arn);
    bool is_certificate_authority_arn_Set() const;
    bool is_certificate_authority_arn_Valid() const;

    QString getCsr() const;
    void setCsr(const QString &csr);
    bool is_csr_Set() const;
    bool is_csr_Valid() const;

    OAISigningAlgorithm getSigningAlgorithm() const;
    void setSigningAlgorithm(const OAISigningAlgorithm &signing_algorithm);
    bool is_signing_algorithm_Set() const;
    bool is_signing_algorithm_Valid() const;

    QString getTemplateArn() const;
    void setTemplateArn(const QString &template_arn);
    bool is_template_arn_Set() const;
    bool is_template_arn_Valid() const;

    OAIIssueCertificateRequest_Validity getValidity() const;
    void setValidity(const OAIIssueCertificateRequest_Validity &validity);
    bool is_validity_Set() const;
    bool is_validity_Valid() const;

    OAIIssueCertificateRequest_ValidityNotBefore getValidityNotBefore() const;
    void setValidityNotBefore(const OAIIssueCertificateRequest_ValidityNotBefore &validity_not_before);
    bool is_validity_not_before_Set() const;
    bool is_validity_not_before_Valid() const;

    QString getIdempotencyToken() const;
    void setIdempotencyToken(const QString &idempotency_token);
    bool is_idempotency_token_Set() const;
    bool is_idempotency_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIIssueCertificateRequest_ApiPassthrough m_api_passthrough;
    bool m_api_passthrough_isSet;
    bool m_api_passthrough_isValid;

    QString m_certificate_authority_arn;
    bool m_certificate_authority_arn_isSet;
    bool m_certificate_authority_arn_isValid;

    QString m_csr;
    bool m_csr_isSet;
    bool m_csr_isValid;

    OAISigningAlgorithm m_signing_algorithm;
    bool m_signing_algorithm_isSet;
    bool m_signing_algorithm_isValid;

    QString m_template_arn;
    bool m_template_arn_isSet;
    bool m_template_arn_isValid;

    OAIIssueCertificateRequest_Validity m_validity;
    bool m_validity_isSet;
    bool m_validity_isValid;

    OAIIssueCertificateRequest_ValidityNotBefore m_validity_not_before;
    bool m_validity_not_before_isSet;
    bool m_validity_not_before_isValid;

    QString m_idempotency_token;
    bool m_idempotency_token_isSet;
    bool m_idempotency_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIssueCertificateRequest)

#endif // OAIIssueCertificateRequest_H
