/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessDescription_AccessLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessDescription_AccessLocation::OAIAccessDescription_AccessLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessDescription_AccessLocation::OAIAccessDescription_AccessLocation() {
    this->initializeModel();
}

OAIAccessDescription_AccessLocation::~OAIAccessDescription_AccessLocation() {}

void OAIAccessDescription_AccessLocation::initializeModel() {

    m_other_name_isSet = false;
    m_other_name_isValid = false;

    m_rfc822_name_isSet = false;
    m_rfc822_name_isValid = false;

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_directory_name_isSet = false;
    m_directory_name_isValid = false;

    m_edi_party_name_isSet = false;
    m_edi_party_name_isValid = false;

    m_uniform_resource_identifier_isSet = false;
    m_uniform_resource_identifier_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_registered_id_isSet = false;
    m_registered_id_isValid = false;
}

void OAIAccessDescription_AccessLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessDescription_AccessLocation::fromJsonObject(QJsonObject json) {

    m_other_name_isValid = ::OpenAPI::fromJsonValue(m_other_name, json[QString("OtherName")]);
    m_other_name_isSet = !json[QString("OtherName")].isNull() && m_other_name_isValid;

    m_rfc822_name_isValid = ::OpenAPI::fromJsonValue(m_rfc822_name, json[QString("Rfc822Name")]);
    m_rfc822_name_isSet = !json[QString("Rfc822Name")].isNull() && m_rfc822_name_isValid;

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("DnsName")]);
    m_dns_name_isSet = !json[QString("DnsName")].isNull() && m_dns_name_isValid;

    m_directory_name_isValid = ::OpenAPI::fromJsonValue(m_directory_name, json[QString("DirectoryName")]);
    m_directory_name_isSet = !json[QString("DirectoryName")].isNull() && m_directory_name_isValid;

    m_edi_party_name_isValid = ::OpenAPI::fromJsonValue(m_edi_party_name, json[QString("EdiPartyName")]);
    m_edi_party_name_isSet = !json[QString("EdiPartyName")].isNull() && m_edi_party_name_isValid;

    m_uniform_resource_identifier_isValid = ::OpenAPI::fromJsonValue(m_uniform_resource_identifier, json[QString("UniformResourceIdentifier")]);
    m_uniform_resource_identifier_isSet = !json[QString("UniformResourceIdentifier")].isNull() && m_uniform_resource_identifier_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IpAddress")]);
    m_ip_address_isSet = !json[QString("IpAddress")].isNull() && m_ip_address_isValid;

    m_registered_id_isValid = ::OpenAPI::fromJsonValue(m_registered_id, json[QString("RegisteredId")]);
    m_registered_id_isSet = !json[QString("RegisteredId")].isNull() && m_registered_id_isValid;
}

QString OAIAccessDescription_AccessLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessDescription_AccessLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_other_name.isSet()) {
        obj.insert(QString("OtherName"), ::OpenAPI::toJsonValue(m_other_name));
    }
    if (m_rfc822_name_isSet) {
        obj.insert(QString("Rfc822Name"), ::OpenAPI::toJsonValue(m_rfc822_name));
    }
    if (m_dns_name_isSet) {
        obj.insert(QString("DnsName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_directory_name.isSet()) {
        obj.insert(QString("DirectoryName"), ::OpenAPI::toJsonValue(m_directory_name));
    }
    if (m_edi_party_name.isSet()) {
        obj.insert(QString("EdiPartyName"), ::OpenAPI::toJsonValue(m_edi_party_name));
    }
    if (m_uniform_resource_identifier_isSet) {
        obj.insert(QString("UniformResourceIdentifier"), ::OpenAPI::toJsonValue(m_uniform_resource_identifier));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("IpAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_registered_id_isSet) {
        obj.insert(QString("RegisteredId"), ::OpenAPI::toJsonValue(m_registered_id));
    }
    return obj;
}

OAIGeneralName_OtherName OAIAccessDescription_AccessLocation::getOtherName() const {
    return m_other_name;
}
void OAIAccessDescription_AccessLocation::setOtherName(const OAIGeneralName_OtherName &other_name) {
    m_other_name = other_name;
    m_other_name_isSet = true;
}

bool OAIAccessDescription_AccessLocation::is_other_name_Set() const{
    return m_other_name_isSet;
}

bool OAIAccessDescription_AccessLocation::is_other_name_Valid() const{
    return m_other_name_isValid;
}

QString OAIAccessDescription_AccessLocation::getRfc822Name() const {
    return m_rfc822_name;
}
void OAIAccessDescription_AccessLocation::setRfc822Name(const QString &rfc822_name) {
    m_rfc822_name = rfc822_name;
    m_rfc822_name_isSet = true;
}

bool OAIAccessDescription_AccessLocation::is_rfc822_name_Set() const{
    return m_rfc822_name_isSet;
}

bool OAIAccessDescription_AccessLocation::is_rfc822_name_Valid() const{
    return m_rfc822_name_isValid;
}

QString OAIAccessDescription_AccessLocation::getDnsName() const {
    return m_dns_name;
}
void OAIAccessDescription_AccessLocation::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAIAccessDescription_AccessLocation::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAIAccessDescription_AccessLocation::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

OAIASN1Subject OAIAccessDescription_AccessLocation::getDirectoryName() const {
    return m_directory_name;
}
void OAIAccessDescription_AccessLocation::setDirectoryName(const OAIASN1Subject &directory_name) {
    m_directory_name = directory_name;
    m_directory_name_isSet = true;
}

bool OAIAccessDescription_AccessLocation::is_directory_name_Set() const{
    return m_directory_name_isSet;
}

bool OAIAccessDescription_AccessLocation::is_directory_name_Valid() const{
    return m_directory_name_isValid;
}

OAIGeneralName_EdiPartyName OAIAccessDescription_AccessLocation::getEdiPartyName() const {
    return m_edi_party_name;
}
void OAIAccessDescription_AccessLocation::setEdiPartyName(const OAIGeneralName_EdiPartyName &edi_party_name) {
    m_edi_party_name = edi_party_name;
    m_edi_party_name_isSet = true;
}

bool OAIAccessDescription_AccessLocation::is_edi_party_name_Set() const{
    return m_edi_party_name_isSet;
}

bool OAIAccessDescription_AccessLocation::is_edi_party_name_Valid() const{
    return m_edi_party_name_isValid;
}

QString OAIAccessDescription_AccessLocation::getUniformResourceIdentifier() const {
    return m_uniform_resource_identifier;
}
void OAIAccessDescription_AccessLocation::setUniformResourceIdentifier(const QString &uniform_resource_identifier) {
    m_uniform_resource_identifier = uniform_resource_identifier;
    m_uniform_resource_identifier_isSet = true;
}

bool OAIAccessDescription_AccessLocation::is_uniform_resource_identifier_Set() const{
    return m_uniform_resource_identifier_isSet;
}

bool OAIAccessDescription_AccessLocation::is_uniform_resource_identifier_Valid() const{
    return m_uniform_resource_identifier_isValid;
}

QString OAIAccessDescription_AccessLocation::getIpAddress() const {
    return m_ip_address;
}
void OAIAccessDescription_AccessLocation::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIAccessDescription_AccessLocation::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIAccessDescription_AccessLocation::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIAccessDescription_AccessLocation::getRegisteredId() const {
    return m_registered_id;
}
void OAIAccessDescription_AccessLocation::setRegisteredId(const QString &registered_id) {
    m_registered_id = registered_id;
    m_registered_id_isSet = true;
}

bool OAIAccessDescription_AccessLocation::is_registered_id_Set() const{
    return m_registered_id_isSet;
}

bool OAIAccessDescription_AccessLocation::is_registered_id_Valid() const{
    return m_registered_id_isValid;
}

bool OAIAccessDescription_AccessLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_other_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfc822_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_edi_party_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uniform_resource_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessDescription_AccessLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
