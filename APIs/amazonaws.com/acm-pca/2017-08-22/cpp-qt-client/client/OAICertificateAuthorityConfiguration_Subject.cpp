/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateAuthorityConfiguration_Subject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateAuthorityConfiguration_Subject::OAICertificateAuthorityConfiguration_Subject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateAuthorityConfiguration_Subject::OAICertificateAuthorityConfiguration_Subject() {
    this->initializeModel();
}

OAICertificateAuthorityConfiguration_Subject::~OAICertificateAuthorityConfiguration_Subject() {}

void OAICertificateAuthorityConfiguration_Subject::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_organizational_unit_isSet = false;
    m_organizational_unit_isValid = false;

    m_distinguished_name_qualifier_isSet = false;
    m_distinguished_name_qualifier_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_locality_isSet = false;
    m_locality_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_surname_isSet = false;
    m_surname_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_initials_isSet = false;
    m_initials_isValid = false;

    m_pseudonym_isSet = false;
    m_pseudonym_isValid = false;

    m_generation_qualifier_isSet = false;
    m_generation_qualifier_isValid = false;

    m_custom_attributes_isSet = false;
    m_custom_attributes_isValid = false;
}

void OAICertificateAuthorityConfiguration_Subject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateAuthorityConfiguration_Subject::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("Organization")]);
    m_organization_isSet = !json[QString("Organization")].isNull() && m_organization_isValid;

    m_organizational_unit_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit, json[QString("OrganizationalUnit")]);
    m_organizational_unit_isSet = !json[QString("OrganizationalUnit")].isNull() && m_organizational_unit_isValid;

    m_distinguished_name_qualifier_isValid = ::OpenAPI::fromJsonValue(m_distinguished_name_qualifier, json[QString("DistinguishedNameQualifier")]);
    m_distinguished_name_qualifier_isSet = !json[QString("DistinguishedNameQualifier")].isNull() && m_distinguished_name_qualifier_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("CommonName")]);
    m_common_name_isSet = !json[QString("CommonName")].isNull() && m_common_name_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("SerialNumber")]);
    m_serial_number_isSet = !json[QString("SerialNumber")].isNull() && m_serial_number_isValid;

    m_locality_isValid = ::OpenAPI::fromJsonValue(m_locality, json[QString("Locality")]);
    m_locality_isSet = !json[QString("Locality")].isNull() && m_locality_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_surname_isValid = ::OpenAPI::fromJsonValue(m_surname, json[QString("Surname")]);
    m_surname_isSet = !json[QString("Surname")].isNull() && m_surname_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("GivenName")]);
    m_given_name_isSet = !json[QString("GivenName")].isNull() && m_given_name_isValid;

    m_initials_isValid = ::OpenAPI::fromJsonValue(m_initials, json[QString("Initials")]);
    m_initials_isSet = !json[QString("Initials")].isNull() && m_initials_isValid;

    m_pseudonym_isValid = ::OpenAPI::fromJsonValue(m_pseudonym, json[QString("Pseudonym")]);
    m_pseudonym_isSet = !json[QString("Pseudonym")].isNull() && m_pseudonym_isValid;

    m_generation_qualifier_isValid = ::OpenAPI::fromJsonValue(m_generation_qualifier, json[QString("GenerationQualifier")]);
    m_generation_qualifier_isSet = !json[QString("GenerationQualifier")].isNull() && m_generation_qualifier_isValid;

    m_custom_attributes_isValid = ::OpenAPI::fromJsonValue(m_custom_attributes, json[QString("CustomAttributes")]);
    m_custom_attributes_isSet = !json[QString("CustomAttributes")].isNull() && m_custom_attributes_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateAuthorityConfiguration_Subject::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_organization_isSet) {
        obj.insert(QString("Organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_organizational_unit_isSet) {
        obj.insert(QString("OrganizationalUnit"), ::OpenAPI::toJsonValue(m_organizational_unit));
    }
    if (m_distinguished_name_qualifier_isSet) {
        obj.insert(QString("DistinguishedNameQualifier"), ::OpenAPI::toJsonValue(m_distinguished_name_qualifier));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_common_name_isSet) {
        obj.insert(QString("CommonName"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("SerialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_locality_isSet) {
        obj.insert(QString("Locality"), ::OpenAPI::toJsonValue(m_locality));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_surname_isSet) {
        obj.insert(QString("Surname"), ::OpenAPI::toJsonValue(m_surname));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("GivenName"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_initials_isSet) {
        obj.insert(QString("Initials"), ::OpenAPI::toJsonValue(m_initials));
    }
    if (m_pseudonym_isSet) {
        obj.insert(QString("Pseudonym"), ::OpenAPI::toJsonValue(m_pseudonym));
    }
    if (m_generation_qualifier_isSet) {
        obj.insert(QString("GenerationQualifier"), ::OpenAPI::toJsonValue(m_generation_qualifier));
    }
    if (m_custom_attributes.isSet()) {
        obj.insert(QString("CustomAttributes"), ::OpenAPI::toJsonValue(m_custom_attributes));
    }
    return obj;
}

QString OAICertificateAuthorityConfiguration_Subject::getCountry() const {
    return m_country;
}
void OAICertificateAuthorityConfiguration_Subject::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_country_Set() const{
    return m_country_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getOrganization() const {
    return m_organization;
}
void OAICertificateAuthorityConfiguration_Subject::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getOrganizationalUnit() const {
    return m_organizational_unit;
}
void OAICertificateAuthorityConfiguration_Subject::setOrganizationalUnit(const QString &organizational_unit) {
    m_organizational_unit = organizational_unit;
    m_organizational_unit_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_organizational_unit_Set() const{
    return m_organizational_unit_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_organizational_unit_Valid() const{
    return m_organizational_unit_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getDistinguishedNameQualifier() const {
    return m_distinguished_name_qualifier;
}
void OAICertificateAuthorityConfiguration_Subject::setDistinguishedNameQualifier(const QString &distinguished_name_qualifier) {
    m_distinguished_name_qualifier = distinguished_name_qualifier;
    m_distinguished_name_qualifier_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_distinguished_name_qualifier_Set() const{
    return m_distinguished_name_qualifier_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_distinguished_name_qualifier_Valid() const{
    return m_distinguished_name_qualifier_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getState() const {
    return m_state;
}
void OAICertificateAuthorityConfiguration_Subject::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_state_Set() const{
    return m_state_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getCommonName() const {
    return m_common_name;
}
void OAICertificateAuthorityConfiguration_Subject::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_common_name_Valid() const{
    return m_common_name_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getSerialNumber() const {
    return m_serial_number;
}
void OAICertificateAuthorityConfiguration_Subject::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getLocality() const {
    return m_locality;
}
void OAICertificateAuthorityConfiguration_Subject::setLocality(const QString &locality) {
    m_locality = locality;
    m_locality_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_locality_Set() const{
    return m_locality_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_locality_Valid() const{
    return m_locality_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getTitle() const {
    return m_title;
}
void OAICertificateAuthorityConfiguration_Subject::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_title_Set() const{
    return m_title_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_title_Valid() const{
    return m_title_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getSurname() const {
    return m_surname;
}
void OAICertificateAuthorityConfiguration_Subject::setSurname(const QString &surname) {
    m_surname = surname;
    m_surname_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_surname_Set() const{
    return m_surname_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_surname_Valid() const{
    return m_surname_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getGivenName() const {
    return m_given_name;
}
void OAICertificateAuthorityConfiguration_Subject::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getInitials() const {
    return m_initials;
}
void OAICertificateAuthorityConfiguration_Subject::setInitials(const QString &initials) {
    m_initials = initials;
    m_initials_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_initials_Set() const{
    return m_initials_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_initials_Valid() const{
    return m_initials_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getPseudonym() const {
    return m_pseudonym;
}
void OAICertificateAuthorityConfiguration_Subject::setPseudonym(const QString &pseudonym) {
    m_pseudonym = pseudonym;
    m_pseudonym_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_pseudonym_Set() const{
    return m_pseudonym_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_pseudonym_Valid() const{
    return m_pseudonym_isValid;
}

QString OAICertificateAuthorityConfiguration_Subject::getGenerationQualifier() const {
    return m_generation_qualifier;
}
void OAICertificateAuthorityConfiguration_Subject::setGenerationQualifier(const QString &generation_qualifier) {
    m_generation_qualifier = generation_qualifier;
    m_generation_qualifier_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_generation_qualifier_Set() const{
    return m_generation_qualifier_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_generation_qualifier_Valid() const{
    return m_generation_qualifier_isValid;
}

QList OAICertificateAuthorityConfiguration_Subject::getCustomAttributes() const {
    return m_custom_attributes;
}
void OAICertificateAuthorityConfiguration_Subject::setCustomAttributes(const QList &custom_attributes) {
    m_custom_attributes = custom_attributes;
    m_custom_attributes_isSet = true;
}

bool OAICertificateAuthorityConfiguration_Subject::is_custom_attributes_Set() const{
    return m_custom_attributes_isSet;
}

bool OAICertificateAuthorityConfiguration_Subject::is_custom_attributes_Valid() const{
    return m_custom_attributes_isValid;
}

bool OAICertificateAuthorityConfiguration_Subject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distinguished_name_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pseudonym_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateAuthorityConfiguration_Subject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
