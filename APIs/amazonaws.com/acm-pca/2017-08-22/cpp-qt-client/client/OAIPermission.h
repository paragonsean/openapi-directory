/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPermission.h
 *
 * Permissions designate which private CA actions can be performed by an Amazon Web Services service or entity. In order for ACM to automatically renew private certificates, you must give the ACM service principal all available permissions (&lt;code&gt;IssueCertificate&lt;/code&gt;, &lt;code&gt;GetCertificate&lt;/code&gt;, and &lt;code&gt;ListPermissions&lt;/code&gt;). Permissions can be assigned with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreatePermission.html\&quot;&gt;CreatePermission&lt;/a&gt; action, removed with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_DeletePermission.html\&quot;&gt;DeletePermission&lt;/a&gt; action, and listed with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ListPermissions.html\&quot;&gt;ListPermissions&lt;/a&gt; action.
 */

#ifndef OAIPermission_H
#define OAIPermission_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPermission : public OAIObject {
public:
    OAIPermission();
    OAIPermission(QString json);
    ~OAIPermission() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCertificateAuthorityArn() const;
    void setCertificateAuthorityArn(const QString &certificate_authority_arn);
    bool is_certificate_authority_arn_Set() const;
    bool is_certificate_authority_arn_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getPrincipal() const;
    void setPrincipal(const QString &principal);
    bool is_principal_Set() const;
    bool is_principal_Valid() const;

    QString getSourceAccount() const;
    void setSourceAccount(const QString &source_account);
    bool is_source_account_Set() const;
    bool is_source_account_Valid() const;

    QList getActions() const;
    void setActions(const QList &actions);
    bool is_actions_Set() const;
    bool is_actions_Valid() const;

    QString getPolicy() const;
    void setPolicy(const QString &policy);
    bool is_policy_Set() const;
    bool is_policy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_certificate_authority_arn;
    bool m_certificate_authority_arn_isSet;
    bool m_certificate_authority_arn_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_principal;
    bool m_principal_isSet;
    bool m_principal_isValid;

    QString m_source_account;
    bool m_source_account_isSet;
    bool m_source_account_isValid;

    QList m_actions;
    bool m_actions_isSet;
    bool m_actions_isValid;

    QString m_policy;
    bool m_policy_isSet;
    bool m_policy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPermission)

#endif // OAIPermission_H
