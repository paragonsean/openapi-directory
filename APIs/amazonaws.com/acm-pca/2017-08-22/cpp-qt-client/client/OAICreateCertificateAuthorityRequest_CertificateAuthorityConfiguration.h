/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration.h
 *
 * 
 */

#ifndef OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration_H
#define OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration_H

#include <QJsonObject>

#include "OAICertificateAuthorityConfiguration_CsrExtensions.h"
#include "OAICertificateAuthorityConfiguration_Subject.h"
#include "OAIKeyAlgorithm.h"
#include "OAISigningAlgorithm.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICertificateAuthorityConfiguration_Subject;
class OAICertificateAuthorityConfiguration_CsrExtensions;

class OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration : public OAIObject {
public:
    OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration();
    OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration(QString json);
    ~OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIKeyAlgorithm getKeyAlgorithm() const;
    void setKeyAlgorithm(const OAIKeyAlgorithm &key_algorithm);
    bool is_key_algorithm_Set() const;
    bool is_key_algorithm_Valid() const;

    OAISigningAlgorithm getSigningAlgorithm() const;
    void setSigningAlgorithm(const OAISigningAlgorithm &signing_algorithm);
    bool is_signing_algorithm_Set() const;
    bool is_signing_algorithm_Valid() const;

    OAICertificateAuthorityConfiguration_Subject getSubject() const;
    void setSubject(const OAICertificateAuthorityConfiguration_Subject &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    OAICertificateAuthorityConfiguration_CsrExtensions getCsrExtensions() const;
    void setCsrExtensions(const OAICertificateAuthorityConfiguration_CsrExtensions &csr_extensions);
    bool is_csr_extensions_Set() const;
    bool is_csr_extensions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIKeyAlgorithm m_key_algorithm;
    bool m_key_algorithm_isSet;
    bool m_key_algorithm_isValid;

    OAISigningAlgorithm m_signing_algorithm;
    bool m_signing_algorithm_isSet;
    bool m_signing_algorithm_isValid;

    OAICertificateAuthorityConfiguration_Subject m_subject;
    bool m_subject_isSet;
    bool m_subject_isValid;

    OAICertificateAuthorityConfiguration_CsrExtensions m_csr_extensions;
    bool m_csr_extensions_isSet;
    bool m_csr_extensions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration)

#endif // OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration_H
