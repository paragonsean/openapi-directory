/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateAuthority.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateAuthority::OAICertificateAuthority(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateAuthority::OAICertificateAuthority() {
    this->initializeModel();
}

OAICertificateAuthority::~OAICertificateAuthority() {}

void OAICertificateAuthority::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_owner_account_isSet = false;
    m_owner_account_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_state_change_at_isSet = false;
    m_last_state_change_at_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_not_before_isSet = false;
    m_not_before_isValid = false;

    m_not_after_isSet = false;
    m_not_after_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_certificate_authority_configuration_isSet = false;
    m_certificate_authority_configuration_isValid = false;

    m_revocation_configuration_isSet = false;
    m_revocation_configuration_isValid = false;

    m_restorable_until_isSet = false;
    m_restorable_until_isValid = false;

    m_key_storage_security_standard_isSet = false;
    m_key_storage_security_standard_isValid = false;

    m_usage_mode_isSet = false;
    m_usage_mode_isValid = false;
}

void OAICertificateAuthority::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateAuthority::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_owner_account_isValid = ::OpenAPI::fromJsonValue(m_owner_account, json[QString("OwnerAccount")]);
    m_owner_account_isSet = !json[QString("OwnerAccount")].isNull() && m_owner_account_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_last_state_change_at_isValid = ::OpenAPI::fromJsonValue(m_last_state_change_at, json[QString("LastStateChangeAt")]);
    m_last_state_change_at_isSet = !json[QString("LastStateChangeAt")].isNull() && m_last_state_change_at_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("Serial")]);
    m_serial_isSet = !json[QString("Serial")].isNull() && m_serial_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_not_before_isValid = ::OpenAPI::fromJsonValue(m_not_before, json[QString("NotBefore")]);
    m_not_before_isSet = !json[QString("NotBefore")].isNull() && m_not_before_isValid;

    m_not_after_isValid = ::OpenAPI::fromJsonValue(m_not_after, json[QString("NotAfter")]);
    m_not_after_isSet = !json[QString("NotAfter")].isNull() && m_not_after_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("FailureReason")]);
    m_failure_reason_isSet = !json[QString("FailureReason")].isNull() && m_failure_reason_isValid;

    m_certificate_authority_configuration_isValid = ::OpenAPI::fromJsonValue(m_certificate_authority_configuration, json[QString("CertificateAuthorityConfiguration")]);
    m_certificate_authority_configuration_isSet = !json[QString("CertificateAuthorityConfiguration")].isNull() && m_certificate_authority_configuration_isValid;

    m_revocation_configuration_isValid = ::OpenAPI::fromJsonValue(m_revocation_configuration, json[QString("RevocationConfiguration")]);
    m_revocation_configuration_isSet = !json[QString("RevocationConfiguration")].isNull() && m_revocation_configuration_isValid;

    m_restorable_until_isValid = ::OpenAPI::fromJsonValue(m_restorable_until, json[QString("RestorableUntil")]);
    m_restorable_until_isSet = !json[QString("RestorableUntil")].isNull() && m_restorable_until_isValid;

    m_key_storage_security_standard_isValid = ::OpenAPI::fromJsonValue(m_key_storage_security_standard, json[QString("KeyStorageSecurityStandard")]);
    m_key_storage_security_standard_isSet = !json[QString("KeyStorageSecurityStandard")].isNull() && m_key_storage_security_standard_isValid;

    m_usage_mode_isValid = ::OpenAPI::fromJsonValue(m_usage_mode, json[QString("UsageMode")]);
    m_usage_mode_isSet = !json[QString("UsageMode")].isNull() && m_usage_mode_isValid;
}

QString OAICertificateAuthority::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateAuthority::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_owner_account_isSet) {
        obj.insert(QString("OwnerAccount"), ::OpenAPI::toJsonValue(m_owner_account));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_state_change_at_isSet) {
        obj.insert(QString("LastStateChangeAt"), ::OpenAPI::toJsonValue(m_last_state_change_at));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_serial_isSet) {
        obj.insert(QString("Serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_not_before_isSet) {
        obj.insert(QString("NotBefore"), ::OpenAPI::toJsonValue(m_not_before));
    }
    if (m_not_after_isSet) {
        obj.insert(QString("NotAfter"), ::OpenAPI::toJsonValue(m_not_after));
    }
    if (m_failure_reason.isSet()) {
        obj.insert(QString("FailureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_certificate_authority_configuration.isSet()) {
        obj.insert(QString("CertificateAuthorityConfiguration"), ::OpenAPI::toJsonValue(m_certificate_authority_configuration));
    }
    if (m_revocation_configuration.isSet()) {
        obj.insert(QString("RevocationConfiguration"), ::OpenAPI::toJsonValue(m_revocation_configuration));
    }
    if (m_restorable_until_isSet) {
        obj.insert(QString("RestorableUntil"), ::OpenAPI::toJsonValue(m_restorable_until));
    }
    if (m_key_storage_security_standard.isSet()) {
        obj.insert(QString("KeyStorageSecurityStandard"), ::OpenAPI::toJsonValue(m_key_storage_security_standard));
    }
    if (m_usage_mode.isSet()) {
        obj.insert(QString("UsageMode"), ::OpenAPI::toJsonValue(m_usage_mode));
    }
    return obj;
}

QString OAICertificateAuthority::getArn() const {
    return m_arn;
}
void OAICertificateAuthority::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICertificateAuthority::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICertificateAuthority::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICertificateAuthority::getOwnerAccount() const {
    return m_owner_account;
}
void OAICertificateAuthority::setOwnerAccount(const QString &owner_account) {
    m_owner_account = owner_account;
    m_owner_account_isSet = true;
}

bool OAICertificateAuthority::is_owner_account_Set() const{
    return m_owner_account_isSet;
}

bool OAICertificateAuthority::is_owner_account_Valid() const{
    return m_owner_account_isValid;
}

QDateTime OAICertificateAuthority::getCreatedAt() const {
    return m_created_at;
}
void OAICertificateAuthority::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICertificateAuthority::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICertificateAuthority::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAICertificateAuthority::getLastStateChangeAt() const {
    return m_last_state_change_at;
}
void OAICertificateAuthority::setLastStateChangeAt(const QDateTime &last_state_change_at) {
    m_last_state_change_at = last_state_change_at;
    m_last_state_change_at_isSet = true;
}

bool OAICertificateAuthority::is_last_state_change_at_Set() const{
    return m_last_state_change_at_isSet;
}

bool OAICertificateAuthority::is_last_state_change_at_Valid() const{
    return m_last_state_change_at_isValid;
}

OAICertificateAuthorityType OAICertificateAuthority::getType() const {
    return m_type;
}
void OAICertificateAuthority::setType(const OAICertificateAuthorityType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICertificateAuthority::is_type_Set() const{
    return m_type_isSet;
}

bool OAICertificateAuthority::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICertificateAuthority::getSerial() const {
    return m_serial;
}
void OAICertificateAuthority::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAICertificateAuthority::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAICertificateAuthority::is_serial_Valid() const{
    return m_serial_isValid;
}

OAICertificateAuthorityStatus OAICertificateAuthority::getStatus() const {
    return m_status;
}
void OAICertificateAuthority::setStatus(const OAICertificateAuthorityStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICertificateAuthority::is_status_Set() const{
    return m_status_isSet;
}

bool OAICertificateAuthority::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAICertificateAuthority::getNotBefore() const {
    return m_not_before;
}
void OAICertificateAuthority::setNotBefore(const QDateTime &not_before) {
    m_not_before = not_before;
    m_not_before_isSet = true;
}

bool OAICertificateAuthority::is_not_before_Set() const{
    return m_not_before_isSet;
}

bool OAICertificateAuthority::is_not_before_Valid() const{
    return m_not_before_isValid;
}

QDateTime OAICertificateAuthority::getNotAfter() const {
    return m_not_after;
}
void OAICertificateAuthority::setNotAfter(const QDateTime &not_after) {
    m_not_after = not_after;
    m_not_after_isSet = true;
}

bool OAICertificateAuthority::is_not_after_Set() const{
    return m_not_after_isSet;
}

bool OAICertificateAuthority::is_not_after_Valid() const{
    return m_not_after_isValid;
}

OAIFailureReason OAICertificateAuthority::getFailureReason() const {
    return m_failure_reason;
}
void OAICertificateAuthority::setFailureReason(const OAIFailureReason &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAICertificateAuthority::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAICertificateAuthority::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAICertificateAuthority_CertificateAuthorityConfiguration OAICertificateAuthority::getCertificateAuthorityConfiguration() const {
    return m_certificate_authority_configuration;
}
void OAICertificateAuthority::setCertificateAuthorityConfiguration(const OAICertificateAuthority_CertificateAuthorityConfiguration &certificate_authority_configuration) {
    m_certificate_authority_configuration = certificate_authority_configuration;
    m_certificate_authority_configuration_isSet = true;
}

bool OAICertificateAuthority::is_certificate_authority_configuration_Set() const{
    return m_certificate_authority_configuration_isSet;
}

bool OAICertificateAuthority::is_certificate_authority_configuration_Valid() const{
    return m_certificate_authority_configuration_isValid;
}

OAICertificateAuthority_RevocationConfiguration OAICertificateAuthority::getRevocationConfiguration() const {
    return m_revocation_configuration;
}
void OAICertificateAuthority::setRevocationConfiguration(const OAICertificateAuthority_RevocationConfiguration &revocation_configuration) {
    m_revocation_configuration = revocation_configuration;
    m_revocation_configuration_isSet = true;
}

bool OAICertificateAuthority::is_revocation_configuration_Set() const{
    return m_revocation_configuration_isSet;
}

bool OAICertificateAuthority::is_revocation_configuration_Valid() const{
    return m_revocation_configuration_isValid;
}

QDateTime OAICertificateAuthority::getRestorableUntil() const {
    return m_restorable_until;
}
void OAICertificateAuthority::setRestorableUntil(const QDateTime &restorable_until) {
    m_restorable_until = restorable_until;
    m_restorable_until_isSet = true;
}

bool OAICertificateAuthority::is_restorable_until_Set() const{
    return m_restorable_until_isSet;
}

bool OAICertificateAuthority::is_restorable_until_Valid() const{
    return m_restorable_until_isValid;
}

OAIKeyStorageSecurityStandard OAICertificateAuthority::getKeyStorageSecurityStandard() const {
    return m_key_storage_security_standard;
}
void OAICertificateAuthority::setKeyStorageSecurityStandard(const OAIKeyStorageSecurityStandard &key_storage_security_standard) {
    m_key_storage_security_standard = key_storage_security_standard;
    m_key_storage_security_standard_isSet = true;
}

bool OAICertificateAuthority::is_key_storage_security_standard_Set() const{
    return m_key_storage_security_standard_isSet;
}

bool OAICertificateAuthority::is_key_storage_security_standard_Valid() const{
    return m_key_storage_security_standard_isValid;
}

OAICertificateAuthorityUsageMode OAICertificateAuthority::getUsageMode() const {
    return m_usage_mode;
}
void OAICertificateAuthority::setUsageMode(const OAICertificateAuthorityUsageMode &usage_mode) {
    m_usage_mode = usage_mode;
    m_usage_mode_isSet = true;
}

bool OAICertificateAuthority::is_usage_mode_Set() const{
    return m_usage_mode_isSet;
}

bool OAICertificateAuthority::is_usage_mode_Valid() const{
    return m_usage_mode_isValid;
}

bool OAICertificateAuthority::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_state_change_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_authority_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revocation_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restorable_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_storage_security_standard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateAuthority::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
