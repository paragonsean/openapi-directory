/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration() {
    this->initializeModel();
}

OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::~OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration() {}

void OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::initializeModel() {

    m_key_algorithm_isSet = false;
    m_key_algorithm_isValid = false;

    m_signing_algorithm_isSet = false;
    m_signing_algorithm_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_csr_extensions_isSet = false;
    m_csr_extensions_isValid = false;
}

void OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::fromJsonObject(QJsonObject json) {

    m_key_algorithm_isValid = ::OpenAPI::fromJsonValue(m_key_algorithm, json[QString("KeyAlgorithm")]);
    m_key_algorithm_isSet = !json[QString("KeyAlgorithm")].isNull() && m_key_algorithm_isValid;

    m_signing_algorithm_isValid = ::OpenAPI::fromJsonValue(m_signing_algorithm, json[QString("SigningAlgorithm")]);
    m_signing_algorithm_isSet = !json[QString("SigningAlgorithm")].isNull() && m_signing_algorithm_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_csr_extensions_isValid = ::OpenAPI::fromJsonValue(m_csr_extensions, json[QString("CsrExtensions")]);
    m_csr_extensions_isSet = !json[QString("CsrExtensions")].isNull() && m_csr_extensions_isValid;
}

QString OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_key_algorithm.isSet()) {
        obj.insert(QString("KeyAlgorithm"), ::OpenAPI::toJsonValue(m_key_algorithm));
    }
    if (m_signing_algorithm.isSet()) {
        obj.insert(QString("SigningAlgorithm"), ::OpenAPI::toJsonValue(m_signing_algorithm));
    }
    if (m_subject.isSet()) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_csr_extensions.isSet()) {
        obj.insert(QString("CsrExtensions"), ::OpenAPI::toJsonValue(m_csr_extensions));
    }
    return obj;
}

OAIKeyAlgorithm OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::getKeyAlgorithm() const {
    return m_key_algorithm;
}
void OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::setKeyAlgorithm(const OAIKeyAlgorithm &key_algorithm) {
    m_key_algorithm = key_algorithm;
    m_key_algorithm_isSet = true;
}

bool OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::is_key_algorithm_Set() const{
    return m_key_algorithm_isSet;
}

bool OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::is_key_algorithm_Valid() const{
    return m_key_algorithm_isValid;
}

OAISigningAlgorithm OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::getSigningAlgorithm() const {
    return m_signing_algorithm;
}
void OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::setSigningAlgorithm(const OAISigningAlgorithm &signing_algorithm) {
    m_signing_algorithm = signing_algorithm;
    m_signing_algorithm_isSet = true;
}

bool OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::is_signing_algorithm_Set() const{
    return m_signing_algorithm_isSet;
}

bool OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::is_signing_algorithm_Valid() const{
    return m_signing_algorithm_isValid;
}

OAICertificateAuthorityConfiguration_Subject OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::getSubject() const {
    return m_subject;
}
void OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::setSubject(const OAICertificateAuthorityConfiguration_Subject &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::is_subject_Valid() const{
    return m_subject_isValid;
}

OAICertificateAuthorityConfiguration_CsrExtensions OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::getCsrExtensions() const {
    return m_csr_extensions;
}
void OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::setCsrExtensions(const OAICertificateAuthorityConfiguration_CsrExtensions &csr_extensions) {
    m_csr_extensions = csr_extensions;
    m_csr_extensions_isSet = true;
}

bool OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::is_csr_extensions_Set() const{
    return m_csr_extensions_isSet;
}

bool OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::is_csr_extensions_Valid() const{
    return m_csr_extensions_isValid;
}

bool OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_csr_extensions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCertificateAuthorityRequest_CertificateAuthorityConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_algorithm_isValid && m_signing_algorithm_isValid && m_subject_isValid && true;
}

} // namespace OpenAPI
