/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGeneralName.h
 *
 * Describes an ASN.1 X.400 &lt;code&gt;GeneralName&lt;/code&gt; as defined in &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc5280\&quot;&gt;RFC 5280&lt;/a&gt;. Only one of the following naming options should be provided. Providing more than one option results in an &lt;code&gt;InvalidArgsException&lt;/code&gt; error.
 */

#ifndef OAIGeneralName_H
#define OAIGeneralName_H

#include <QJsonObject>

#include "OAIASN1Subject.h"
#include "OAIGeneralName_EdiPartyName.h"
#include "OAIGeneralName_OtherName.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGeneralName_OtherName;
class OAIASN1Subject;
class OAIGeneralName_EdiPartyName;

class OAIGeneralName : public OAIObject {
public:
    OAIGeneralName();
    OAIGeneralName(QString json);
    ~OAIGeneralName() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIGeneralName_OtherName getOtherName() const;
    void setOtherName(const OAIGeneralName_OtherName &other_name);
    bool is_other_name_Set() const;
    bool is_other_name_Valid() const;

    QString getRfc822Name() const;
    void setRfc822Name(const QString &rfc822_name);
    bool is_rfc822_name_Set() const;
    bool is_rfc822_name_Valid() const;

    QString getDnsName() const;
    void setDnsName(const QString &dns_name);
    bool is_dns_name_Set() const;
    bool is_dns_name_Valid() const;

    OAIASN1Subject getDirectoryName() const;
    void setDirectoryName(const OAIASN1Subject &directory_name);
    bool is_directory_name_Set() const;
    bool is_directory_name_Valid() const;

    OAIGeneralName_EdiPartyName getEdiPartyName() const;
    void setEdiPartyName(const OAIGeneralName_EdiPartyName &edi_party_name);
    bool is_edi_party_name_Set() const;
    bool is_edi_party_name_Valid() const;

    QString getUniformResourceIdentifier() const;
    void setUniformResourceIdentifier(const QString &uniform_resource_identifier);
    bool is_uniform_resource_identifier_Set() const;
    bool is_uniform_resource_identifier_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QString getRegisteredId() const;
    void setRegisteredId(const QString &registered_id);
    bool is_registered_id_Set() const;
    bool is_registered_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIGeneralName_OtherName m_other_name;
    bool m_other_name_isSet;
    bool m_other_name_isValid;

    QString m_rfc822_name;
    bool m_rfc822_name_isSet;
    bool m_rfc822_name_isValid;

    QString m_dns_name;
    bool m_dns_name_isSet;
    bool m_dns_name_isValid;

    OAIASN1Subject m_directory_name;
    bool m_directory_name_isSet;
    bool m_directory_name_isValid;

    OAIGeneralName_EdiPartyName m_edi_party_name;
    bool m_edi_party_name_isSet;
    bool m_edi_party_name_isValid;

    QString m_uniform_resource_identifier;
    bool m_uniform_resource_identifier_isSet;
    bool m_uniform_resource_identifier_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QString m_registered_id;
    bool m_registered_id_isSet;
    bool m_registered_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGeneralName)

#endif // OAIGeneralName_H
