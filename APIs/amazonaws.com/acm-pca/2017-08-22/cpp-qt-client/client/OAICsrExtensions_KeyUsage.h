/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICsrExtensions_KeyUsage.h
 *
 * 
 */

#ifndef OAICsrExtensions_KeyUsage_H
#define OAICsrExtensions_KeyUsage_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICsrExtensions_KeyUsage : public OAIObject {
public:
    OAICsrExtensions_KeyUsage();
    OAICsrExtensions_KeyUsage(QString json);
    ~OAICsrExtensions_KeyUsage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getDigitalSignature() const;
    void setDigitalSignature(const bool &digital_signature);
    bool is_digital_signature_Set() const;
    bool is_digital_signature_Valid() const;

    bool getNonRepudiation() const;
    void setNonRepudiation(const bool &non_repudiation);
    bool is_non_repudiation_Set() const;
    bool is_non_repudiation_Valid() const;

    bool getKeyEncipherment() const;
    void setKeyEncipherment(const bool &key_encipherment);
    bool is_key_encipherment_Set() const;
    bool is_key_encipherment_Valid() const;

    bool getDataEncipherment() const;
    void setDataEncipherment(const bool &data_encipherment);
    bool is_data_encipherment_Set() const;
    bool is_data_encipherment_Valid() const;

    bool getKeyAgreement() const;
    void setKeyAgreement(const bool &key_agreement);
    bool is_key_agreement_Set() const;
    bool is_key_agreement_Valid() const;

    bool getKeyCertSign() const;
    void setKeyCertSign(const bool &key_cert_sign);
    bool is_key_cert_sign_Set() const;
    bool is_key_cert_sign_Valid() const;

    bool getCrlSign() const;
    void setCrlSign(const bool &crl_sign);
    bool is_crl_sign_Set() const;
    bool is_crl_sign_Valid() const;

    bool getEncipherOnly() const;
    void setEncipherOnly(const bool &encipher_only);
    bool is_encipher_only_Set() const;
    bool is_encipher_only_Valid() const;

    bool getDecipherOnly() const;
    void setDecipherOnly(const bool &decipher_only);
    bool is_decipher_only_Set() const;
    bool is_decipher_only_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_digital_signature;
    bool m_digital_signature_isSet;
    bool m_digital_signature_isValid;

    bool m_non_repudiation;
    bool m_non_repudiation_isSet;
    bool m_non_repudiation_isValid;

    bool m_key_encipherment;
    bool m_key_encipherment_isSet;
    bool m_key_encipherment_isValid;

    bool m_data_encipherment;
    bool m_data_encipherment_isSet;
    bool m_data_encipherment_isValid;

    bool m_key_agreement;
    bool m_key_agreement_isSet;
    bool m_key_agreement_isValid;

    bool m_key_cert_sign;
    bool m_key_cert_sign_isSet;
    bool m_key_cert_sign_isValid;

    bool m_crl_sign;
    bool m_crl_sign_isSet;
    bool m_crl_sign_isValid;

    bool m_encipher_only;
    bool m_encipher_only_isSet;
    bool m_encipher_only_isValid;

    bool m_decipher_only;
    bool m_decipher_only_isSet;
    bool m_decipher_only_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICsrExtensions_KeyUsage)

#endif // OAICsrExtensions_KeyUsage_H
