/**
 * AWS Certificate Manager Private Certificate Authority
 * <p>This is the <i>Amazon Web Services Private Certificate Authority API Reference</i>. It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing a private certificate authority (CA) for your organization.</p> <p>The documentation for each action shows the API request parameters and the JSON response. Alternatively, you can use one of the Amazon Web Services SDKs to access an API that is tailored to the programming language or platform that you prefer. For more information, see <a href=\"https://aws.amazon.com/tools/#SDKs\">Amazon Web Services SDKs</a>.</p> <p>Each Amazon Web Services Private CA API operation has a quota that determines the number of times the operation can be called per second. Amazon Web Services Private CA throttles API requests at different rates depending on the operation. Throttling means that Amazon Web Services Private CA rejects an otherwise valid request because the request exceeds the operation's quota for the number of requests per second. When a request is throttled, Amazon Web Services Private CA returns a <a href=\"https://docs.aws.amazon.com/privateca/latest/APIReference/CommonErrors.html\">ThrottlingException</a> error. Amazon Web Services Private CA does not guarantee a minimum request rate for APIs. </p> <p>To see an up-to-date list of your Amazon Web Services Private CA quotas, or to request a quota increase, log into your Amazon Web Services account and visit the <a href=\"https://console.aws.amazon.com/servicequotas/\">Service Quotas</a> console.</p>
 *
 * The version of the OpenAPI document: 2017-08-22
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICertificateAuthority.h
 *
 * Contains information about your private certificate authority (CA). Your private CA can issue and revoke X.509 digital certificates. Digital certificates verify that the entity named in the certificate &lt;b&gt;Subject&lt;/b&gt; field owns or controls the public key contained in the &lt;b&gt;Subject Public Key Info&lt;/b&gt; field. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html\&quot;&gt;CreateCertificateAuthority&lt;/a&gt; action to create your private CA. You must then call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_GetCertificateAuthorityCertificate.html\&quot;&gt;GetCertificateAuthorityCertificate&lt;/a&gt; action to retrieve a private CA certificate signing request (CSR). Sign the CSR with your Amazon Web Services Private CA-hosted or on-premises root or subordinate CA certificate. Call the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/privateca/latest/APIReference/API_ImportCertificateAuthorityCertificate.html\&quot;&gt;ImportCertificateAuthorityCertificate&lt;/a&gt; action to import the signed certificate into Certificate Manager (ACM). 
 */

#ifndef OAICertificateAuthority_H
#define OAICertificateAuthority_H

#include <QJsonObject>

#include "OAICertificateAuthorityStatus.h"
#include "OAICertificateAuthorityType.h"
#include "OAICertificateAuthorityUsageMode.h"
#include "OAICertificateAuthority_CertificateAuthorityConfiguration.h"
#include "OAICertificateAuthority_RevocationConfiguration.h"
#include "OAIFailureReason.h"
#include "OAIKeyStorageSecurityStandard.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICertificateAuthority_CertificateAuthorityConfiguration;
class OAICertificateAuthority_RevocationConfiguration;

class OAICertificateAuthority : public OAIObject {
public:
    OAICertificateAuthority();
    OAICertificateAuthority(QString json);
    ~OAICertificateAuthority() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getOwnerAccount() const;
    void setOwnerAccount(const QString &owner_account);
    bool is_owner_account_Set() const;
    bool is_owner_account_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getLastStateChangeAt() const;
    void setLastStateChangeAt(const QDateTime &last_state_change_at);
    bool is_last_state_change_at_Set() const;
    bool is_last_state_change_at_Valid() const;

    OAICertificateAuthorityType getType() const;
    void setType(const OAICertificateAuthorityType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getSerial() const;
    void setSerial(const QString &serial);
    bool is_serial_Set() const;
    bool is_serial_Valid() const;

    OAICertificateAuthorityStatus getStatus() const;
    void setStatus(const OAICertificateAuthorityStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getNotBefore() const;
    void setNotBefore(const QDateTime &not_before);
    bool is_not_before_Set() const;
    bool is_not_before_Valid() const;

    QDateTime getNotAfter() const;
    void setNotAfter(const QDateTime &not_after);
    bool is_not_after_Set() const;
    bool is_not_after_Valid() const;

    OAIFailureReason getFailureReason() const;
    void setFailureReason(const OAIFailureReason &failure_reason);
    bool is_failure_reason_Set() const;
    bool is_failure_reason_Valid() const;

    OAICertificateAuthority_CertificateAuthorityConfiguration getCertificateAuthorityConfiguration() const;
    void setCertificateAuthorityConfiguration(const OAICertificateAuthority_CertificateAuthorityConfiguration &certificate_authority_configuration);
    bool is_certificate_authority_configuration_Set() const;
    bool is_certificate_authority_configuration_Valid() const;

    OAICertificateAuthority_RevocationConfiguration getRevocationConfiguration() const;
    void setRevocationConfiguration(const OAICertificateAuthority_RevocationConfiguration &revocation_configuration);
    bool is_revocation_configuration_Set() const;
    bool is_revocation_configuration_Valid() const;

    QDateTime getRestorableUntil() const;
    void setRestorableUntil(const QDateTime &restorable_until);
    bool is_restorable_until_Set() const;
    bool is_restorable_until_Valid() const;

    OAIKeyStorageSecurityStandard getKeyStorageSecurityStandard() const;
    void setKeyStorageSecurityStandard(const OAIKeyStorageSecurityStandard &key_storage_security_standard);
    bool is_key_storage_security_standard_Set() const;
    bool is_key_storage_security_standard_Valid() const;

    OAICertificateAuthorityUsageMode getUsageMode() const;
    void setUsageMode(const OAICertificateAuthorityUsageMode &usage_mode);
    bool is_usage_mode_Set() const;
    bool is_usage_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_owner_account;
    bool m_owner_account_isSet;
    bool m_owner_account_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_last_state_change_at;
    bool m_last_state_change_at_isSet;
    bool m_last_state_change_at_isValid;

    OAICertificateAuthorityType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_serial;
    bool m_serial_isSet;
    bool m_serial_isValid;

    OAICertificateAuthorityStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_not_before;
    bool m_not_before_isSet;
    bool m_not_before_isValid;

    QDateTime m_not_after;
    bool m_not_after_isSet;
    bool m_not_after_isValid;

    OAIFailureReason m_failure_reason;
    bool m_failure_reason_isSet;
    bool m_failure_reason_isValid;

    OAICertificateAuthority_CertificateAuthorityConfiguration m_certificate_authority_configuration;
    bool m_certificate_authority_configuration_isSet;
    bool m_certificate_authority_configuration_isValid;

    OAICertificateAuthority_RevocationConfiguration m_revocation_configuration;
    bool m_revocation_configuration_isSet;
    bool m_revocation_configuration_isValid;

    QDateTime m_restorable_until;
    bool m_restorable_until_isSet;
    bool m_restorable_until_isValid;

    OAIKeyStorageSecurityStandard m_key_storage_security_standard;
    bool m_key_storage_security_standard_isSet;
    bool m_key_storage_security_standard_isValid;

    OAICertificateAuthorityUsageMode m_usage_mode;
    bool m_usage_mode_isSet;
    bool m_usage_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICertificateAuthority)

#endif // OAICertificateAuthority_H
