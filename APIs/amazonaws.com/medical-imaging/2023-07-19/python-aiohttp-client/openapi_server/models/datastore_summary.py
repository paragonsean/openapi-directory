# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datastore_status import DatastoreStatus
from openapi_server import util


class DatastoreSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datastore_id: str=None, datastore_name: str=None, datastore_status: DatastoreStatus=None, datastore_arn: str=None, created_at: datetime=None, updated_at: datetime=None):
        """DatastoreSummary - a model defined in OpenAPI

        :param datastore_id: The datastore_id of this DatastoreSummary.
        :param datastore_name: The datastore_name of this DatastoreSummary.
        :param datastore_status: The datastore_status of this DatastoreSummary.
        :param datastore_arn: The datastore_arn of this DatastoreSummary.
        :param created_at: The created_at of this DatastoreSummary.
        :param updated_at: The updated_at of this DatastoreSummary.
        """
        self.openapi_types = {
            'datastore_id': str,
            'datastore_name': str,
            'datastore_status': DatastoreStatus,
            'datastore_arn': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'datastore_id': 'datastoreId',
            'datastore_name': 'datastoreName',
            'datastore_status': 'datastoreStatus',
            'datastore_arn': 'datastoreArn',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._datastore_id = datastore_id
        self._datastore_name = datastore_name
        self._datastore_status = datastore_status
        self._datastore_arn = datastore_arn
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatastoreSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatastoreSummary of this DatastoreSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datastore_id(self):
        """Gets the datastore_id of this DatastoreSummary.


        :return: The datastore_id of this DatastoreSummary.
        :rtype: str
        """
        return self._datastore_id

    @datastore_id.setter
    def datastore_id(self, datastore_id):
        """Sets the datastore_id of this DatastoreSummary.


        :param datastore_id: The datastore_id of this DatastoreSummary.
        :type datastore_id: str
        """
        if datastore_id is None:
            raise ValueError("Invalid value for `datastore_id`, must not be `None`")

        self._datastore_id = datastore_id

    @property
    def datastore_name(self):
        """Gets the datastore_name of this DatastoreSummary.


        :return: The datastore_name of this DatastoreSummary.
        :rtype: str
        """
        return self._datastore_name

    @datastore_name.setter
    def datastore_name(self, datastore_name):
        """Sets the datastore_name of this DatastoreSummary.


        :param datastore_name: The datastore_name of this DatastoreSummary.
        :type datastore_name: str
        """
        if datastore_name is None:
            raise ValueError("Invalid value for `datastore_name`, must not be `None`")

        self._datastore_name = datastore_name

    @property
    def datastore_status(self):
        """Gets the datastore_status of this DatastoreSummary.


        :return: The datastore_status of this DatastoreSummary.
        :rtype: DatastoreStatus
        """
        return self._datastore_status

    @datastore_status.setter
    def datastore_status(self, datastore_status):
        """Sets the datastore_status of this DatastoreSummary.


        :param datastore_status: The datastore_status of this DatastoreSummary.
        :type datastore_status: DatastoreStatus
        """
        if datastore_status is None:
            raise ValueError("Invalid value for `datastore_status`, must not be `None`")

        self._datastore_status = datastore_status

    @property
    def datastore_arn(self):
        """Gets the datastore_arn of this DatastoreSummary.


        :return: The datastore_arn of this DatastoreSummary.
        :rtype: str
        """
        return self._datastore_arn

    @datastore_arn.setter
    def datastore_arn(self, datastore_arn):
        """Sets the datastore_arn of this DatastoreSummary.


        :param datastore_arn: The datastore_arn of this DatastoreSummary.
        :type datastore_arn: str
        """

        self._datastore_arn = datastore_arn

    @property
    def created_at(self):
        """Gets the created_at of this DatastoreSummary.


        :return: The created_at of this DatastoreSummary.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DatastoreSummary.


        :param created_at: The created_at of this DatastoreSummary.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DatastoreSummary.


        :return: The updated_at of this DatastoreSummary.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DatastoreSummary.


        :param updated_at: The updated_at of this DatastoreSummary.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
