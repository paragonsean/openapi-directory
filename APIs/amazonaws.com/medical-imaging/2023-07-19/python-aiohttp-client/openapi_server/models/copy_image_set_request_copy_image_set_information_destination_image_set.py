# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CopyImageSetRequestCopyImageSetInformationDestinationImageSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_set_id: str=None, latest_version_id: str=None):
        """CopyImageSetRequestCopyImageSetInformationDestinationImageSet - a model defined in OpenAPI

        :param image_set_id: The image_set_id of this CopyImageSetRequestCopyImageSetInformationDestinationImageSet.
        :param latest_version_id: The latest_version_id of this CopyImageSetRequestCopyImageSetInformationDestinationImageSet.
        """
        self.openapi_types = {
            'image_set_id': str,
            'latest_version_id': str
        }

        self.attribute_map = {
            'image_set_id': 'imageSetId',
            'latest_version_id': 'latestVersionId'
        }

        self._image_set_id = image_set_id
        self._latest_version_id = latest_version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyImageSetRequestCopyImageSetInformationDestinationImageSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyImageSet_request_copyImageSetInformation_destinationImageSet of this CopyImageSetRequestCopyImageSetInformationDestinationImageSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_set_id(self):
        """Gets the image_set_id of this CopyImageSetRequestCopyImageSetInformationDestinationImageSet.


        :return: The image_set_id of this CopyImageSetRequestCopyImageSetInformationDestinationImageSet.
        :rtype: str
        """
        return self._image_set_id

    @image_set_id.setter
    def image_set_id(self, image_set_id):
        """Sets the image_set_id of this CopyImageSetRequestCopyImageSetInformationDestinationImageSet.


        :param image_set_id: The image_set_id of this CopyImageSetRequestCopyImageSetInformationDestinationImageSet.
        :type image_set_id: str
        """
        if image_set_id is None:
            raise ValueError("Invalid value for `image_set_id`, must not be `None`")

        self._image_set_id = image_set_id

    @property
    def latest_version_id(self):
        """Gets the latest_version_id of this CopyImageSetRequestCopyImageSetInformationDestinationImageSet.


        :return: The latest_version_id of this CopyImageSetRequestCopyImageSetInformationDestinationImageSet.
        :rtype: str
        """
        return self._latest_version_id

    @latest_version_id.setter
    def latest_version_id(self, latest_version_id):
        """Sets the latest_version_id of this CopyImageSetRequestCopyImageSetInformationDestinationImageSet.


        :param latest_version_id: The latest_version_id of this CopyImageSetRequestCopyImageSetInformationDestinationImageSet.
        :type latest_version_id: str
        """
        if latest_version_id is None:
            raise ValueError("Invalid value for `latest_version_id`, must not be `None`")

        self._latest_version_id = latest_version_id
