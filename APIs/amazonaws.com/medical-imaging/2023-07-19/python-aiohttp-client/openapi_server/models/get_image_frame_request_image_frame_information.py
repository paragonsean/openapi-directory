# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetImageFrameRequestImageFrameInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_frame_id: str=None):
        """GetImageFrameRequestImageFrameInformation - a model defined in OpenAPI

        :param image_frame_id: The image_frame_id of this GetImageFrameRequestImageFrameInformation.
        """
        self.openapi_types = {
            'image_frame_id': str
        }

        self.attribute_map = {
            'image_frame_id': 'imageFrameId'
        }

        self._image_frame_id = image_frame_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetImageFrameRequestImageFrameInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetImageFrameRequest_imageFrameInformation of this GetImageFrameRequestImageFrameInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_frame_id(self):
        """Gets the image_frame_id of this GetImageFrameRequestImageFrameInformation.


        :return: The image_frame_id of this GetImageFrameRequestImageFrameInformation.
        :rtype: str
        """
        return self._image_frame_id

    @image_frame_id.setter
    def image_frame_id(self, image_frame_id):
        """Sets the image_frame_id of this GetImageFrameRequestImageFrameInformation.


        :param image_frame_id: The image_frame_id of this GetImageFrameRequestImageFrameInformation.
        :type image_frame_id: str
        """
        if image_frame_id is None:
            raise ValueError("Invalid value for `image_frame_id`, must not be `None`")

        self._image_frame_id = image_frame_id
