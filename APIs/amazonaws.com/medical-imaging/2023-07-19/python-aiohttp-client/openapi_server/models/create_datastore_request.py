# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateDatastoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datastore_name: str=None, client_token: str=None, tags: Dict[str, str]=None, kms_key_arn: str=None):
        """CreateDatastoreRequest - a model defined in OpenAPI

        :param datastore_name: The datastore_name of this CreateDatastoreRequest.
        :param client_token: The client_token of this CreateDatastoreRequest.
        :param tags: The tags of this CreateDatastoreRequest.
        :param kms_key_arn: The kms_key_arn of this CreateDatastoreRequest.
        """
        self.openapi_types = {
            'datastore_name': str,
            'client_token': str,
            'tags': Dict[str, str],
            'kms_key_arn': str
        }

        self.attribute_map = {
            'datastore_name': 'datastoreName',
            'client_token': 'clientToken',
            'tags': 'tags',
            'kms_key_arn': 'kmsKeyArn'
        }

        self._datastore_name = datastore_name
        self._client_token = client_token
        self._tags = tags
        self._kms_key_arn = kms_key_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDatastoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDatastore_request of this CreateDatastoreRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datastore_name(self):
        """Gets the datastore_name of this CreateDatastoreRequest.

        The data store name.

        :return: The datastore_name of this CreateDatastoreRequest.
        :rtype: str
        """
        return self._datastore_name

    @datastore_name.setter
    def datastore_name(self, datastore_name):
        """Sets the datastore_name of this CreateDatastoreRequest.

        The data store name.

        :param datastore_name: The datastore_name of this CreateDatastoreRequest.
        :type datastore_name: str
        """
        if datastore_name is not None and len(datastore_name) > 256:
            raise ValueError("Invalid value for `datastore_name`, length must be less than or equal to `256`")
        if datastore_name is not None and len(datastore_name) < 1:
            raise ValueError("Invalid value for `datastore_name`, length must be greater than or equal to `1`")
        if datastore_name is not None and not re.search(r'[A-Za-z0-9._\/#-]+', datastore_name):
            raise ValueError("Invalid value for `datastore_name`, must be a follow pattern or equal to `/[A-Za-z0-9._\/#-]+/`")

        self._datastore_name = datastore_name

    @property
    def client_token(self):
        """Gets the client_token of this CreateDatastoreRequest.

        A unique identifier for API idempotency.

        :return: The client_token of this CreateDatastoreRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateDatastoreRequest.

        A unique identifier for API idempotency.

        :param client_token: The client_token of this CreateDatastoreRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[A-Za-z0-9._-]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[A-Za-z0-9._-]+/`")

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateDatastoreRequest.

        The tags provided when creating a data store.

        :return: The tags of this CreateDatastoreRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDatastoreRequest.

        The tags provided when creating a data store.

        :param tags: The tags of this CreateDatastoreRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this CreateDatastoreRequest.

        ARN referencing a KMS key or KMS key alias.

        :return: The kms_key_arn of this CreateDatastoreRequest.
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this CreateDatastoreRequest.

        ARN referencing a KMS key or KMS key alias.

        :param kms_key_arn: The kms_key_arn of this CreateDatastoreRequest.
        :type kms_key_arn: str
        """
        if kms_key_arn is not None and len(kms_key_arn) > 512:
            raise ValueError("Invalid value for `kms_key_arn`, length must be less than or equal to `512`")
        if kms_key_arn is not None and len(kms_key_arn) < 1:
            raise ValueError("Invalid value for `kms_key_arn`, length must be greater than or equal to `1`")
        if kms_key_arn is not None and not re.search(r'arn:aws[a-zA-Z-]{0,16}:kms:[a-z]{2}(-[a-z]{1,16}){1,3}-\d{1}:\d{12}:((key\/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})|(alias\/[a-zA-Z0-9:\/_-]{1,256}))', kms_key_arn):
            raise ValueError("Invalid value for `kms_key_arn`, must be a follow pattern or equal to `/arn:aws[a-zA-Z-]{0,16}:kms:[a-z]{2}(-[a-z]{1,16}){1,3}-\d{1}:\d{12}:((key\/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})|(alias\/[a-zA-Z0-9:\/_-]{1,256}))/`")

        self._kms_key_arn = kms_key_arn
