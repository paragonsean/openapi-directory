# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_status import JobStatus
from openapi_server import util


class DICOMImportJobProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, job_name: str=None, job_status: JobStatus=None, datastore_id: str=None, data_access_role_arn: str=None, ended_at: datetime=None, submitted_at: datetime=None, input_s3_uri: str=None, output_s3_uri: str=None, message: str=None):
        """DICOMImportJobProperties - a model defined in OpenAPI

        :param job_id: The job_id of this DICOMImportJobProperties.
        :param job_name: The job_name of this DICOMImportJobProperties.
        :param job_status: The job_status of this DICOMImportJobProperties.
        :param datastore_id: The datastore_id of this DICOMImportJobProperties.
        :param data_access_role_arn: The data_access_role_arn of this DICOMImportJobProperties.
        :param ended_at: The ended_at of this DICOMImportJobProperties.
        :param submitted_at: The submitted_at of this DICOMImportJobProperties.
        :param input_s3_uri: The input_s3_uri of this DICOMImportJobProperties.
        :param output_s3_uri: The output_s3_uri of this DICOMImportJobProperties.
        :param message: The message of this DICOMImportJobProperties.
        """
        self.openapi_types = {
            'job_id': str,
            'job_name': str,
            'job_status': JobStatus,
            'datastore_id': str,
            'data_access_role_arn': str,
            'ended_at': datetime,
            'submitted_at': datetime,
            'input_s3_uri': str,
            'output_s3_uri': str,
            'message': str
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'job_name': 'jobName',
            'job_status': 'jobStatus',
            'datastore_id': 'datastoreId',
            'data_access_role_arn': 'dataAccessRoleArn',
            'ended_at': 'endedAt',
            'submitted_at': 'submittedAt',
            'input_s3_uri': 'inputS3Uri',
            'output_s3_uri': 'outputS3Uri',
            'message': 'message'
        }

        self._job_id = job_id
        self._job_name = job_name
        self._job_status = job_status
        self._datastore_id = datastore_id
        self._data_access_role_arn = data_access_role_arn
        self._ended_at = ended_at
        self._submitted_at = submitted_at
        self._input_s3_uri = input_s3_uri
        self._output_s3_uri = output_s3_uri
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DICOMImportJobProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DICOMImportJobProperties of this DICOMImportJobProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this DICOMImportJobProperties.


        :return: The job_id of this DICOMImportJobProperties.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this DICOMImportJobProperties.


        :param job_id: The job_id of this DICOMImportJobProperties.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def job_name(self):
        """Gets the job_name of this DICOMImportJobProperties.


        :return: The job_name of this DICOMImportJobProperties.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this DICOMImportJobProperties.


        :param job_name: The job_name of this DICOMImportJobProperties.
        :type job_name: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")

        self._job_name = job_name

    @property
    def job_status(self):
        """Gets the job_status of this DICOMImportJobProperties.


        :return: The job_status of this DICOMImportJobProperties.
        :rtype: JobStatus
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this DICOMImportJobProperties.


        :param job_status: The job_status of this DICOMImportJobProperties.
        :type job_status: JobStatus
        """
        if job_status is None:
            raise ValueError("Invalid value for `job_status`, must not be `None`")

        self._job_status = job_status

    @property
    def datastore_id(self):
        """Gets the datastore_id of this DICOMImportJobProperties.


        :return: The datastore_id of this DICOMImportJobProperties.
        :rtype: str
        """
        return self._datastore_id

    @datastore_id.setter
    def datastore_id(self, datastore_id):
        """Sets the datastore_id of this DICOMImportJobProperties.


        :param datastore_id: The datastore_id of this DICOMImportJobProperties.
        :type datastore_id: str
        """
        if datastore_id is None:
            raise ValueError("Invalid value for `datastore_id`, must not be `None`")

        self._datastore_id = datastore_id

    @property
    def data_access_role_arn(self):
        """Gets the data_access_role_arn of this DICOMImportJobProperties.


        :return: The data_access_role_arn of this DICOMImportJobProperties.
        :rtype: str
        """
        return self._data_access_role_arn

    @data_access_role_arn.setter
    def data_access_role_arn(self, data_access_role_arn):
        """Sets the data_access_role_arn of this DICOMImportJobProperties.


        :param data_access_role_arn: The data_access_role_arn of this DICOMImportJobProperties.
        :type data_access_role_arn: str
        """
        if data_access_role_arn is None:
            raise ValueError("Invalid value for `data_access_role_arn`, must not be `None`")

        self._data_access_role_arn = data_access_role_arn

    @property
    def ended_at(self):
        """Gets the ended_at of this DICOMImportJobProperties.


        :return: The ended_at of this DICOMImportJobProperties.
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this DICOMImportJobProperties.


        :param ended_at: The ended_at of this DICOMImportJobProperties.
        :type ended_at: datetime
        """

        self._ended_at = ended_at

    @property
    def submitted_at(self):
        """Gets the submitted_at of this DICOMImportJobProperties.


        :return: The submitted_at of this DICOMImportJobProperties.
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this DICOMImportJobProperties.


        :param submitted_at: The submitted_at of this DICOMImportJobProperties.
        :type submitted_at: datetime
        """

        self._submitted_at = submitted_at

    @property
    def input_s3_uri(self):
        """Gets the input_s3_uri of this DICOMImportJobProperties.


        :return: The input_s3_uri of this DICOMImportJobProperties.
        :rtype: str
        """
        return self._input_s3_uri

    @input_s3_uri.setter
    def input_s3_uri(self, input_s3_uri):
        """Sets the input_s3_uri of this DICOMImportJobProperties.


        :param input_s3_uri: The input_s3_uri of this DICOMImportJobProperties.
        :type input_s3_uri: str
        """
        if input_s3_uri is None:
            raise ValueError("Invalid value for `input_s3_uri`, must not be `None`")

        self._input_s3_uri = input_s3_uri

    @property
    def output_s3_uri(self):
        """Gets the output_s3_uri of this DICOMImportJobProperties.


        :return: The output_s3_uri of this DICOMImportJobProperties.
        :rtype: str
        """
        return self._output_s3_uri

    @output_s3_uri.setter
    def output_s3_uri(self, output_s3_uri):
        """Sets the output_s3_uri of this DICOMImportJobProperties.


        :param output_s3_uri: The output_s3_uri of this DICOMImportJobProperties.
        :type output_s3_uri: str
        """
        if output_s3_uri is None:
            raise ValueError("Invalid value for `output_s3_uri`, must not be `None`")

        self._output_s3_uri = output_s3_uri

    @property
    def message(self):
        """Gets the message of this DICOMImportJobProperties.


        :return: The message of this DICOMImportJobProperties.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DICOMImportJobProperties.


        :param message: The message of this DICOMImportJobProperties.
        :type message: str
        """

        self._message = message
