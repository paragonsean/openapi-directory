# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_set_state import ImageSetState
from openapi_server.models.image_set_workflow_status import ImageSetWorkflowStatus
from openapi_server import util


class DeleteImageSetResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datastore_id: str=None, image_set_id: str=None, image_set_state: ImageSetState=None, image_set_workflow_status: ImageSetWorkflowStatus=None):
        """DeleteImageSetResponse - a model defined in OpenAPI

        :param datastore_id: The datastore_id of this DeleteImageSetResponse.
        :param image_set_id: The image_set_id of this DeleteImageSetResponse.
        :param image_set_state: The image_set_state of this DeleteImageSetResponse.
        :param image_set_workflow_status: The image_set_workflow_status of this DeleteImageSetResponse.
        """
        self.openapi_types = {
            'datastore_id': str,
            'image_set_id': str,
            'image_set_state': ImageSetState,
            'image_set_workflow_status': ImageSetWorkflowStatus
        }

        self.attribute_map = {
            'datastore_id': 'datastoreId',
            'image_set_id': 'imageSetId',
            'image_set_state': 'imageSetState',
            'image_set_workflow_status': 'imageSetWorkflowStatus'
        }

        self._datastore_id = datastore_id
        self._image_set_id = image_set_id
        self._image_set_state = image_set_state
        self._image_set_workflow_status = image_set_workflow_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteImageSetResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteImageSetResponse of this DeleteImageSetResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datastore_id(self):
        """Gets the datastore_id of this DeleteImageSetResponse.


        :return: The datastore_id of this DeleteImageSetResponse.
        :rtype: str
        """
        return self._datastore_id

    @datastore_id.setter
    def datastore_id(self, datastore_id):
        """Sets the datastore_id of this DeleteImageSetResponse.


        :param datastore_id: The datastore_id of this DeleteImageSetResponse.
        :type datastore_id: str
        """
        if datastore_id is None:
            raise ValueError("Invalid value for `datastore_id`, must not be `None`")

        self._datastore_id = datastore_id

    @property
    def image_set_id(self):
        """Gets the image_set_id of this DeleteImageSetResponse.


        :return: The image_set_id of this DeleteImageSetResponse.
        :rtype: str
        """
        return self._image_set_id

    @image_set_id.setter
    def image_set_id(self, image_set_id):
        """Sets the image_set_id of this DeleteImageSetResponse.


        :param image_set_id: The image_set_id of this DeleteImageSetResponse.
        :type image_set_id: str
        """
        if image_set_id is None:
            raise ValueError("Invalid value for `image_set_id`, must not be `None`")

        self._image_set_id = image_set_id

    @property
    def image_set_state(self):
        """Gets the image_set_state of this DeleteImageSetResponse.


        :return: The image_set_state of this DeleteImageSetResponse.
        :rtype: ImageSetState
        """
        return self._image_set_state

    @image_set_state.setter
    def image_set_state(self, image_set_state):
        """Sets the image_set_state of this DeleteImageSetResponse.


        :param image_set_state: The image_set_state of this DeleteImageSetResponse.
        :type image_set_state: ImageSetState
        """
        if image_set_state is None:
            raise ValueError("Invalid value for `image_set_state`, must not be `None`")

        self._image_set_state = image_set_state

    @property
    def image_set_workflow_status(self):
        """Gets the image_set_workflow_status of this DeleteImageSetResponse.


        :return: The image_set_workflow_status of this DeleteImageSetResponse.
        :rtype: ImageSetWorkflowStatus
        """
        return self._image_set_workflow_status

    @image_set_workflow_status.setter
    def image_set_workflow_status(self, image_set_workflow_status):
        """Sets the image_set_workflow_status of this DeleteImageSetResponse.


        :param image_set_workflow_status: The image_set_workflow_status of this DeleteImageSetResponse.
        :type image_set_workflow_status: ImageSetWorkflowStatus
        """
        if image_set_workflow_status is None:
            raise ValueError("Invalid value for `image_set_workflow_status`, must not be `None`")

        self._image_set_workflow_status = image_set_workflow_status
