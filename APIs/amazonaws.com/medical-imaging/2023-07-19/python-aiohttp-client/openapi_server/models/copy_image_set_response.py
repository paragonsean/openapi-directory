# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_image_set_response_destination_image_set_properties import CopyImageSetResponseDestinationImageSetProperties
from openapi_server.models.copy_image_set_response_source_image_set_properties import CopyImageSetResponseSourceImageSetProperties
from openapi_server import util


class CopyImageSetResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datastore_id: str=None, source_image_set_properties: CopyImageSetResponseSourceImageSetProperties=None, destination_image_set_properties: CopyImageSetResponseDestinationImageSetProperties=None):
        """CopyImageSetResponse - a model defined in OpenAPI

        :param datastore_id: The datastore_id of this CopyImageSetResponse.
        :param source_image_set_properties: The source_image_set_properties of this CopyImageSetResponse.
        :param destination_image_set_properties: The destination_image_set_properties of this CopyImageSetResponse.
        """
        self.openapi_types = {
            'datastore_id': str,
            'source_image_set_properties': CopyImageSetResponseSourceImageSetProperties,
            'destination_image_set_properties': CopyImageSetResponseDestinationImageSetProperties
        }

        self.attribute_map = {
            'datastore_id': 'datastoreId',
            'source_image_set_properties': 'sourceImageSetProperties',
            'destination_image_set_properties': 'destinationImageSetProperties'
        }

        self._datastore_id = datastore_id
        self._source_image_set_properties = source_image_set_properties
        self._destination_image_set_properties = destination_image_set_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyImageSetResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyImageSetResponse of this CopyImageSetResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datastore_id(self):
        """Gets the datastore_id of this CopyImageSetResponse.


        :return: The datastore_id of this CopyImageSetResponse.
        :rtype: str
        """
        return self._datastore_id

    @datastore_id.setter
    def datastore_id(self, datastore_id):
        """Sets the datastore_id of this CopyImageSetResponse.


        :param datastore_id: The datastore_id of this CopyImageSetResponse.
        :type datastore_id: str
        """
        if datastore_id is None:
            raise ValueError("Invalid value for `datastore_id`, must not be `None`")

        self._datastore_id = datastore_id

    @property
    def source_image_set_properties(self):
        """Gets the source_image_set_properties of this CopyImageSetResponse.


        :return: The source_image_set_properties of this CopyImageSetResponse.
        :rtype: CopyImageSetResponseSourceImageSetProperties
        """
        return self._source_image_set_properties

    @source_image_set_properties.setter
    def source_image_set_properties(self, source_image_set_properties):
        """Sets the source_image_set_properties of this CopyImageSetResponse.


        :param source_image_set_properties: The source_image_set_properties of this CopyImageSetResponse.
        :type source_image_set_properties: CopyImageSetResponseSourceImageSetProperties
        """
        if source_image_set_properties is None:
            raise ValueError("Invalid value for `source_image_set_properties`, must not be `None`")

        self._source_image_set_properties = source_image_set_properties

    @property
    def destination_image_set_properties(self):
        """Gets the destination_image_set_properties of this CopyImageSetResponse.


        :return: The destination_image_set_properties of this CopyImageSetResponse.
        :rtype: CopyImageSetResponseDestinationImageSetProperties
        """
        return self._destination_image_set_properties

    @destination_image_set_properties.setter
    def destination_image_set_properties(self, destination_image_set_properties):
        """Sets the destination_image_set_properties of this CopyImageSetResponse.


        :param destination_image_set_properties: The destination_image_set_properties of this CopyImageSetResponse.
        :type destination_image_set_properties: CopyImageSetResponseDestinationImageSetProperties
        """
        if destination_image_set_properties is None:
            raise ValueError("Invalid value for `destination_image_set_properties`, must not be `None`")

        self._destination_image_set_properties = destination_image_set_properties
