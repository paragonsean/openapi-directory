# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartDICOMImportJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_name: str=None, data_access_role_arn: str=None, client_token: str=None, input_s3_uri: str=None, output_s3_uri: str=None):
        """StartDICOMImportJobRequest - a model defined in OpenAPI

        :param job_name: The job_name of this StartDICOMImportJobRequest.
        :param data_access_role_arn: The data_access_role_arn of this StartDICOMImportJobRequest.
        :param client_token: The client_token of this StartDICOMImportJobRequest.
        :param input_s3_uri: The input_s3_uri of this StartDICOMImportJobRequest.
        :param output_s3_uri: The output_s3_uri of this StartDICOMImportJobRequest.
        """
        self.openapi_types = {
            'job_name': str,
            'data_access_role_arn': str,
            'client_token': str,
            'input_s3_uri': str,
            'output_s3_uri': str
        }

        self.attribute_map = {
            'job_name': 'jobName',
            'data_access_role_arn': 'dataAccessRoleArn',
            'client_token': 'clientToken',
            'input_s3_uri': 'inputS3Uri',
            'output_s3_uri': 'outputS3Uri'
        }

        self._job_name = job_name
        self._data_access_role_arn = data_access_role_arn
        self._client_token = client_token
        self._input_s3_uri = input_s3_uri
        self._output_s3_uri = output_s3_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartDICOMImportJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartDICOMImportJob_request of this StartDICOMImportJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_name(self):
        """Gets the job_name of this StartDICOMImportJobRequest.

        The import job name.

        :return: The job_name of this StartDICOMImportJobRequest.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this StartDICOMImportJobRequest.

        The import job name.

        :param job_name: The job_name of this StartDICOMImportJobRequest.
        :type job_name: str
        """
        if job_name is not None and len(job_name) > 64:
            raise ValueError("Invalid value for `job_name`, length must be less than or equal to `64`")
        if job_name is not None and len(job_name) < 1:
            raise ValueError("Invalid value for `job_name`, length must be greater than or equal to `1`")
        if job_name is not None and not re.search(r'[A-Za-z0-9._\/#-]+', job_name):
            raise ValueError("Invalid value for `job_name`, must be a follow pattern or equal to `/[A-Za-z0-9._\/#-]+/`")

        self._job_name = job_name

    @property
    def data_access_role_arn(self):
        """Gets the data_access_role_arn of this StartDICOMImportJobRequest.

        The Amazon Resource Name (ARN) of the IAM role that grants permission to access medical imaging resources.

        :return: The data_access_role_arn of this StartDICOMImportJobRequest.
        :rtype: str
        """
        return self._data_access_role_arn

    @data_access_role_arn.setter
    def data_access_role_arn(self, data_access_role_arn):
        """Sets the data_access_role_arn of this StartDICOMImportJobRequest.

        The Amazon Resource Name (ARN) of the IAM role that grants permission to access medical imaging resources.

        :param data_access_role_arn: The data_access_role_arn of this StartDICOMImportJobRequest.
        :type data_access_role_arn: str
        """
        if data_access_role_arn is None:
            raise ValueError("Invalid value for `data_access_role_arn`, must not be `None`")
        if data_access_role_arn is not None and len(data_access_role_arn) > 2048:
            raise ValueError("Invalid value for `data_access_role_arn`, length must be less than or equal to `2048`")
        if data_access_role_arn is not None and len(data_access_role_arn) < 20:
            raise ValueError("Invalid value for `data_access_role_arn`, length must be greater than or equal to `20`")
        if data_access_role_arn is not None and not re.search(r'arn:aws(-[^:]+)?:iam::[0-9]{12}:role\/.+', data_access_role_arn):
            raise ValueError("Invalid value for `data_access_role_arn`, must be a follow pattern or equal to `/arn:aws(-[^:]+)?:iam::[0-9]{12}:role\/.+/`")

        self._data_access_role_arn = data_access_role_arn

    @property
    def client_token(self):
        """Gets the client_token of this StartDICOMImportJobRequest.

        A unique identifier for API idempotency.

        :return: The client_token of this StartDICOMImportJobRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartDICOMImportJobRequest.

        A unique identifier for API idempotency.

        :param client_token: The client_token of this StartDICOMImportJobRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[A-Za-z0-9._-]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[A-Za-z0-9._-]+/`")

        self._client_token = client_token

    @property
    def input_s3_uri(self):
        """Gets the input_s3_uri of this StartDICOMImportJobRequest.

        The input prefix path for the S3 bucket that contains the DICOM files to be imported.

        :return: The input_s3_uri of this StartDICOMImportJobRequest.
        :rtype: str
        """
        return self._input_s3_uri

    @input_s3_uri.setter
    def input_s3_uri(self, input_s3_uri):
        """Sets the input_s3_uri of this StartDICOMImportJobRequest.

        The input prefix path for the S3 bucket that contains the DICOM files to be imported.

        :param input_s3_uri: The input_s3_uri of this StartDICOMImportJobRequest.
        :type input_s3_uri: str
        """
        if input_s3_uri is None:
            raise ValueError("Invalid value for `input_s3_uri`, must not be `None`")
        if input_s3_uri is not None and len(input_s3_uri) > 1024:
            raise ValueError("Invalid value for `input_s3_uri`, length must be less than or equal to `1024`")
        if input_s3_uri is not None and len(input_s3_uri) < 1:
            raise ValueError("Invalid value for `input_s3_uri`, length must be greater than or equal to `1`")
        if input_s3_uri is not None and not re.search(r's3:\/\/[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](\/.*)?', input_s3_uri):
            raise ValueError("Invalid value for `input_s3_uri`, must be a follow pattern or equal to `/s3:\/\/[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](\/.*)?/`")

        self._input_s3_uri = input_s3_uri

    @property
    def output_s3_uri(self):
        """Gets the output_s3_uri of this StartDICOMImportJobRequest.

        The output prefix of the S3 bucket to upload the results of the DICOM import job.

        :return: The output_s3_uri of this StartDICOMImportJobRequest.
        :rtype: str
        """
        return self._output_s3_uri

    @output_s3_uri.setter
    def output_s3_uri(self, output_s3_uri):
        """Sets the output_s3_uri of this StartDICOMImportJobRequest.

        The output prefix of the S3 bucket to upload the results of the DICOM import job.

        :param output_s3_uri: The output_s3_uri of this StartDICOMImportJobRequest.
        :type output_s3_uri: str
        """
        if output_s3_uri is None:
            raise ValueError("Invalid value for `output_s3_uri`, must not be `None`")
        if output_s3_uri is not None and len(output_s3_uri) > 1024:
            raise ValueError("Invalid value for `output_s3_uri`, length must be less than or equal to `1024`")
        if output_s3_uri is not None and len(output_s3_uri) < 1:
            raise ValueError("Invalid value for `output_s3_uri`, length must be greater than or equal to `1`")
        if output_s3_uri is not None and not re.search(r's3:\/\/[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](\/.*)?', output_s3_uri):
            raise ValueError("Invalid value for `output_s3_uri`, must be a follow pattern or equal to `/s3:\/\/[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](\/.*)?/`")

        self._output_s3_uri = output_s3_uri
