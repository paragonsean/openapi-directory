# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetImageFrameResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_frame_blob: str=None):
        """GetImageFrameResponse - a model defined in OpenAPI

        :param image_frame_blob: The image_frame_blob of this GetImageFrameResponse.
        """
        self.openapi_types = {
            'image_frame_blob': str
        }

        self.attribute_map = {
            'image_frame_blob': 'imageFrameBlob'
        }

        self._image_frame_blob = image_frame_blob

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetImageFrameResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetImageFrameResponse of this GetImageFrameResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_frame_blob(self):
        """Gets the image_frame_blob of this GetImageFrameResponse.


        :return: The image_frame_blob of this GetImageFrameResponse.
        :rtype: str
        """
        return self._image_frame_blob

    @image_frame_blob.setter
    def image_frame_blob(self, image_frame_blob):
        """Sets the image_frame_blob of this GetImageFrameResponse.


        :param image_frame_blob: The image_frame_blob of this GetImageFrameResponse.
        :type image_frame_blob: str
        """
        if image_frame_blob is None:
            raise ValueError("Invalid value for `image_frame_blob`, must not be `None`")

        self._image_frame_blob = image_frame_blob
