# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WeeklySettingHandOffTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hour_of_day: int=None, minute_of_hour: int=None):
        """WeeklySettingHandOffTime - a model defined in OpenAPI

        :param hour_of_day: The hour_of_day of this WeeklySettingHandOffTime.
        :param minute_of_hour: The minute_of_hour of this WeeklySettingHandOffTime.
        """
        self.openapi_types = {
            'hour_of_day': int,
            'minute_of_hour': int
        }

        self.attribute_map = {
            'hour_of_day': 'HourOfDay',
            'minute_of_hour': 'MinuteOfHour'
        }

        self._hour_of_day = hour_of_day
        self._minute_of_hour = minute_of_hour

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WeeklySettingHandOffTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WeeklySetting_HandOffTime of this WeeklySettingHandOffTime.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hour_of_day(self):
        """Gets the hour_of_day of this WeeklySettingHandOffTime.


        :return: The hour_of_day of this WeeklySettingHandOffTime.
        :rtype: int
        """
        return self._hour_of_day

    @hour_of_day.setter
    def hour_of_day(self, hour_of_day):
        """Sets the hour_of_day of this WeeklySettingHandOffTime.


        :param hour_of_day: The hour_of_day of this WeeklySettingHandOffTime.
        :type hour_of_day: int
        """
        if hour_of_day is None:
            raise ValueError("Invalid value for `hour_of_day`, must not be `None`")

        self._hour_of_day = hour_of_day

    @property
    def minute_of_hour(self):
        """Gets the minute_of_hour of this WeeklySettingHandOffTime.


        :return: The minute_of_hour of this WeeklySettingHandOffTime.
        :rtype: int
        """
        return self._minute_of_hour

    @minute_of_hour.setter
    def minute_of_hour(self, minute_of_hour):
        """Sets the minute_of_hour of this WeeklySettingHandOffTime.


        :param minute_of_hour: The minute_of_hour of this WeeklySettingHandOffTime.
        :type minute_of_hour: int
        """
        if minute_of_hour is None:
            raise ValueError("Invalid value for `minute_of_hour`, must not be `None`")

        self._minute_of_hour = minute_of_hour
