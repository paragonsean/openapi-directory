# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_type import ContactType
from openapi_server.models.create_contact_request_plan import CreateContactRequestPlan
from openapi_server import util


class CreateContactRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, display_name: str=None, type: ContactType=None, plan: CreateContactRequestPlan=None, tags: List=None, idempotency_token: str=None):
        """CreateContactRequest - a model defined in OpenAPI

        :param alias: The alias of this CreateContactRequest.
        :param display_name: The display_name of this CreateContactRequest.
        :param type: The type of this CreateContactRequest.
        :param plan: The plan of this CreateContactRequest.
        :param tags: The tags of this CreateContactRequest.
        :param idempotency_token: The idempotency_token of this CreateContactRequest.
        """
        self.openapi_types = {
            'alias': str,
            'display_name': str,
            'type': ContactType,
            'plan': CreateContactRequestPlan,
            'tags': List,
            'idempotency_token': str
        }

        self.attribute_map = {
            'alias': 'Alias',
            'display_name': 'DisplayName',
            'type': 'Type',
            'plan': 'Plan',
            'tags': 'Tags',
            'idempotency_token': 'IdempotencyToken'
        }

        self._alias = alias
        self._display_name = display_name
        self._type = type
        self._plan = plan
        self._tags = tags
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateContactRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateContactRequest of this CreateContactRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this CreateContactRequest.


        :return: The alias of this CreateContactRequest.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this CreateContactRequest.


        :param alias: The alias of this CreateContactRequest.
        :type alias: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")

        self._alias = alias

    @property
    def display_name(self):
        """Gets the display_name of this CreateContactRequest.


        :return: The display_name of this CreateContactRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateContactRequest.


        :param display_name: The display_name of this CreateContactRequest.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def type(self):
        """Gets the type of this CreateContactRequest.


        :return: The type of this CreateContactRequest.
        :rtype: ContactType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateContactRequest.


        :param type: The type of this CreateContactRequest.
        :type type: ContactType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def plan(self):
        """Gets the plan of this CreateContactRequest.


        :return: The plan of this CreateContactRequest.
        :rtype: CreateContactRequestPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this CreateContactRequest.


        :param plan: The plan of this CreateContactRequest.
        :type plan: CreateContactRequestPlan
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def tags(self):
        """Gets the tags of this CreateContactRequest.


        :return: The tags of this CreateContactRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateContactRequest.


        :param tags: The tags of this CreateContactRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateContactRequest.


        :return: The idempotency_token of this CreateContactRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateContactRequest.


        :param idempotency_token: The idempotency_token of this CreateContactRequest.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token
