# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_contact_request_plan import UpdateContactRequestPlan
from openapi_server import util


class UpdateContactRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: str=None, display_name: str=None, plan: UpdateContactRequestPlan=None):
        """UpdateContactRequest - a model defined in OpenAPI

        :param contact_id: The contact_id of this UpdateContactRequest.
        :param display_name: The display_name of this UpdateContactRequest.
        :param plan: The plan of this UpdateContactRequest.
        """
        self.openapi_types = {
            'contact_id': str,
            'display_name': str,
            'plan': UpdateContactRequestPlan
        }

        self.attribute_map = {
            'contact_id': 'ContactId',
            'display_name': 'DisplayName',
            'plan': 'Plan'
        }

        self._contact_id = contact_id
        self._display_name = display_name
        self._plan = plan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateContactRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateContactRequest of this UpdateContactRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this UpdateContactRequest.


        :return: The contact_id of this UpdateContactRequest.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this UpdateContactRequest.


        :param contact_id: The contact_id of this UpdateContactRequest.
        :type contact_id: str
        """
        if contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")

        self._contact_id = contact_id

    @property
    def display_name(self):
        """Gets the display_name of this UpdateContactRequest.


        :return: The display_name of this UpdateContactRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UpdateContactRequest.


        :param display_name: The display_name of this UpdateContactRequest.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def plan(self):
        """Gets the plan of this UpdateContactRequest.


        :return: The plan of this UpdateContactRequest.
        :rtype: UpdateContactRequestPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this UpdateContactRequest.


        :param plan: The plan of this UpdateContactRequest.
        :type plan: UpdateContactRequestPlan
        """

        self._plan = plan
