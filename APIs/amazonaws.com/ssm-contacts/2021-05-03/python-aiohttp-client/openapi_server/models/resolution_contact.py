# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_type import ContactType
from openapi_server import util


class ResolutionContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_arn: str=None, type: ContactType=None, stage_index: int=None):
        """ResolutionContact - a model defined in OpenAPI

        :param contact_arn: The contact_arn of this ResolutionContact.
        :param type: The type of this ResolutionContact.
        :param stage_index: The stage_index of this ResolutionContact.
        """
        self.openapi_types = {
            'contact_arn': str,
            'type': ContactType,
            'stage_index': int
        }

        self.attribute_map = {
            'contact_arn': 'ContactArn',
            'type': 'Type',
            'stage_index': 'StageIndex'
        }

        self._contact_arn = contact_arn
        self._type = type
        self._stage_index = stage_index

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResolutionContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResolutionContact of this ResolutionContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_arn(self):
        """Gets the contact_arn of this ResolutionContact.


        :return: The contact_arn of this ResolutionContact.
        :rtype: str
        """
        return self._contact_arn

    @contact_arn.setter
    def contact_arn(self, contact_arn):
        """Sets the contact_arn of this ResolutionContact.


        :param contact_arn: The contact_arn of this ResolutionContact.
        :type contact_arn: str
        """
        if contact_arn is None:
            raise ValueError("Invalid value for `contact_arn`, must not be `None`")

        self._contact_arn = contact_arn

    @property
    def type(self):
        """Gets the type of this ResolutionContact.


        :return: The type of this ResolutionContact.
        :rtype: ContactType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResolutionContact.


        :param type: The type of this ResolutionContact.
        :type type: ContactType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def stage_index(self):
        """Gets the stage_index of this ResolutionContact.


        :return: The stage_index of this ResolutionContact.
        :rtype: int
        """
        return self._stage_index

    @stage_index.setter
    def stage_index(self, stage_index):
        """Sets the stage_index of this ResolutionContact.


        :param stage_index: The stage_index of this ResolutionContact.
        :type stage_index: int
        """

        self._stage_index = stage_index
