# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monthly_setting_hand_off_time import MonthlySettingHandOffTime
from openapi_server import util


class MonthlySetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day_of_month: int=None, hand_off_time: MonthlySettingHandOffTime=None):
        """MonthlySetting - a model defined in OpenAPI

        :param day_of_month: The day_of_month of this MonthlySetting.
        :param hand_off_time: The hand_off_time of this MonthlySetting.
        """
        self.openapi_types = {
            'day_of_month': int,
            'hand_off_time': MonthlySettingHandOffTime
        }

        self.attribute_map = {
            'day_of_month': 'DayOfMonth',
            'hand_off_time': 'HandOffTime'
        }

        self._day_of_month = day_of_month
        self._hand_off_time = hand_off_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonthlySetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonthlySetting of this MonthlySetting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day_of_month(self):
        """Gets the day_of_month of this MonthlySetting.


        :return: The day_of_month of this MonthlySetting.
        :rtype: int
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this MonthlySetting.


        :param day_of_month: The day_of_month of this MonthlySetting.
        :type day_of_month: int
        """
        if day_of_month is None:
            raise ValueError("Invalid value for `day_of_month`, must not be `None`")

        self._day_of_month = day_of_month

    @property
    def hand_off_time(self):
        """Gets the hand_off_time of this MonthlySetting.


        :return: The hand_off_time of this MonthlySetting.
        :rtype: MonthlySettingHandOffTime
        """
        return self._hand_off_time

    @hand_off_time.setter
    def hand_off_time(self, hand_off_time):
        """Sets the hand_off_time of this MonthlySetting.


        :param hand_off_time: The hand_off_time of this MonthlySetting.
        :type hand_off_time: MonthlySettingHandOffTime
        """
        if hand_off_time is None:
            raise ValueError("Invalid value for `hand_off_time`, must not be `None`")

        self._hand_off_time = hand_off_time
