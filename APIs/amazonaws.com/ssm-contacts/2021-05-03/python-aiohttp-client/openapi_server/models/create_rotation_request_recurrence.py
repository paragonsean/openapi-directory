# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateRotationRequestRecurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, monthly_settings: List=None, weekly_settings: List=None, daily_settings: List=None, number_of_on_calls: int=None, shift_coverages: Dict=None, recurrence_multiplier: int=None):
        """CreateRotationRequestRecurrence - a model defined in OpenAPI

        :param monthly_settings: The monthly_settings of this CreateRotationRequestRecurrence.
        :param weekly_settings: The weekly_settings of this CreateRotationRequestRecurrence.
        :param daily_settings: The daily_settings of this CreateRotationRequestRecurrence.
        :param number_of_on_calls: The number_of_on_calls of this CreateRotationRequestRecurrence.
        :param shift_coverages: The shift_coverages of this CreateRotationRequestRecurrence.
        :param recurrence_multiplier: The recurrence_multiplier of this CreateRotationRequestRecurrence.
        """
        self.openapi_types = {
            'monthly_settings': List,
            'weekly_settings': List,
            'daily_settings': List,
            'number_of_on_calls': int,
            'shift_coverages': Dict,
            'recurrence_multiplier': int
        }

        self.attribute_map = {
            'monthly_settings': 'MonthlySettings',
            'weekly_settings': 'WeeklySettings',
            'daily_settings': 'DailySettings',
            'number_of_on_calls': 'NumberOfOnCalls',
            'shift_coverages': 'ShiftCoverages',
            'recurrence_multiplier': 'RecurrenceMultiplier'
        }

        self._monthly_settings = monthly_settings
        self._weekly_settings = weekly_settings
        self._daily_settings = daily_settings
        self._number_of_on_calls = number_of_on_calls
        self._shift_coverages = shift_coverages
        self._recurrence_multiplier = recurrence_multiplier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRotationRequestRecurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRotationRequest_Recurrence of this CreateRotationRequestRecurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def monthly_settings(self):
        """Gets the monthly_settings of this CreateRotationRequestRecurrence.


        :return: The monthly_settings of this CreateRotationRequestRecurrence.
        :rtype: List
        """
        return self._monthly_settings

    @monthly_settings.setter
    def monthly_settings(self, monthly_settings):
        """Sets the monthly_settings of this CreateRotationRequestRecurrence.


        :param monthly_settings: The monthly_settings of this CreateRotationRequestRecurrence.
        :type monthly_settings: List
        """

        self._monthly_settings = monthly_settings

    @property
    def weekly_settings(self):
        """Gets the weekly_settings of this CreateRotationRequestRecurrence.


        :return: The weekly_settings of this CreateRotationRequestRecurrence.
        :rtype: List
        """
        return self._weekly_settings

    @weekly_settings.setter
    def weekly_settings(self, weekly_settings):
        """Sets the weekly_settings of this CreateRotationRequestRecurrence.


        :param weekly_settings: The weekly_settings of this CreateRotationRequestRecurrence.
        :type weekly_settings: List
        """

        self._weekly_settings = weekly_settings

    @property
    def daily_settings(self):
        """Gets the daily_settings of this CreateRotationRequestRecurrence.


        :return: The daily_settings of this CreateRotationRequestRecurrence.
        :rtype: List
        """
        return self._daily_settings

    @daily_settings.setter
    def daily_settings(self, daily_settings):
        """Sets the daily_settings of this CreateRotationRequestRecurrence.


        :param daily_settings: The daily_settings of this CreateRotationRequestRecurrence.
        :type daily_settings: List
        """

        self._daily_settings = daily_settings

    @property
    def number_of_on_calls(self):
        """Gets the number_of_on_calls of this CreateRotationRequestRecurrence.


        :return: The number_of_on_calls of this CreateRotationRequestRecurrence.
        :rtype: int
        """
        return self._number_of_on_calls

    @number_of_on_calls.setter
    def number_of_on_calls(self, number_of_on_calls):
        """Sets the number_of_on_calls of this CreateRotationRequestRecurrence.


        :param number_of_on_calls: The number_of_on_calls of this CreateRotationRequestRecurrence.
        :type number_of_on_calls: int
        """
        if number_of_on_calls is None:
            raise ValueError("Invalid value for `number_of_on_calls`, must not be `None`")

        self._number_of_on_calls = number_of_on_calls

    @property
    def shift_coverages(self):
        """Gets the shift_coverages of this CreateRotationRequestRecurrence.


        :return: The shift_coverages of this CreateRotationRequestRecurrence.
        :rtype: Dict
        """
        return self._shift_coverages

    @shift_coverages.setter
    def shift_coverages(self, shift_coverages):
        """Sets the shift_coverages of this CreateRotationRequestRecurrence.


        :param shift_coverages: The shift_coverages of this CreateRotationRequestRecurrence.
        :type shift_coverages: Dict
        """

        self._shift_coverages = shift_coverages

    @property
    def recurrence_multiplier(self):
        """Gets the recurrence_multiplier of this CreateRotationRequestRecurrence.


        :return: The recurrence_multiplier of this CreateRotationRequestRecurrence.
        :rtype: int
        """
        return self._recurrence_multiplier

    @recurrence_multiplier.setter
    def recurrence_multiplier(self, recurrence_multiplier):
        """Sets the recurrence_multiplier of this CreateRotationRequestRecurrence.


        :param recurrence_multiplier: The recurrence_multiplier of this CreateRotationRequestRecurrence.
        :type recurrence_multiplier: int
        """
        if recurrence_multiplier is None:
            raise ValueError("Invalid value for `recurrence_multiplier`, must not be `None`")

        self._recurrence_multiplier = recurrence_multiplier
