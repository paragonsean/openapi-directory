# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_type import ContactType
from openapi_server.models.get_contact_result_plan import GetContactResultPlan
from openapi_server import util


class GetContactResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_arn: str=None, alias: str=None, display_name: str=None, type: ContactType=None, plan: GetContactResultPlan=None):
        """GetContactResult - a model defined in OpenAPI

        :param contact_arn: The contact_arn of this GetContactResult.
        :param alias: The alias of this GetContactResult.
        :param display_name: The display_name of this GetContactResult.
        :param type: The type of this GetContactResult.
        :param plan: The plan of this GetContactResult.
        """
        self.openapi_types = {
            'contact_arn': str,
            'alias': str,
            'display_name': str,
            'type': ContactType,
            'plan': GetContactResultPlan
        }

        self.attribute_map = {
            'contact_arn': 'ContactArn',
            'alias': 'Alias',
            'display_name': 'DisplayName',
            'type': 'Type',
            'plan': 'Plan'
        }

        self._contact_arn = contact_arn
        self._alias = alias
        self._display_name = display_name
        self._type = type
        self._plan = plan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetContactResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetContactResult of this GetContactResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_arn(self):
        """Gets the contact_arn of this GetContactResult.


        :return: The contact_arn of this GetContactResult.
        :rtype: str
        """
        return self._contact_arn

    @contact_arn.setter
    def contact_arn(self, contact_arn):
        """Sets the contact_arn of this GetContactResult.


        :param contact_arn: The contact_arn of this GetContactResult.
        :type contact_arn: str
        """
        if contact_arn is None:
            raise ValueError("Invalid value for `contact_arn`, must not be `None`")

        self._contact_arn = contact_arn

    @property
    def alias(self):
        """Gets the alias of this GetContactResult.


        :return: The alias of this GetContactResult.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this GetContactResult.


        :param alias: The alias of this GetContactResult.
        :type alias: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")

        self._alias = alias

    @property
    def display_name(self):
        """Gets the display_name of this GetContactResult.


        :return: The display_name of this GetContactResult.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GetContactResult.


        :param display_name: The display_name of this GetContactResult.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def type(self):
        """Gets the type of this GetContactResult.


        :return: The type of this GetContactResult.
        :rtype: ContactType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetContactResult.


        :param type: The type of this GetContactResult.
        :type type: ContactType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def plan(self):
        """Gets the plan of this GetContactResult.


        :return: The plan of this GetContactResult.
        :rtype: GetContactResultPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this GetContactResult.


        :param plan: The plan of this GetContactResult.
        :type plan: GetContactResultPlan
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan
