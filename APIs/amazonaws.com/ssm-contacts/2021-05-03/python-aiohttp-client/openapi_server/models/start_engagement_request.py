# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartEngagementRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: str=None, sender: str=None, subject: str=None, content: str=None, public_subject: str=None, public_content: str=None, incident_id: str=None, idempotency_token: str=None):
        """StartEngagementRequest - a model defined in OpenAPI

        :param contact_id: The contact_id of this StartEngagementRequest.
        :param sender: The sender of this StartEngagementRequest.
        :param subject: The subject of this StartEngagementRequest.
        :param content: The content of this StartEngagementRequest.
        :param public_subject: The public_subject of this StartEngagementRequest.
        :param public_content: The public_content of this StartEngagementRequest.
        :param incident_id: The incident_id of this StartEngagementRequest.
        :param idempotency_token: The idempotency_token of this StartEngagementRequest.
        """
        self.openapi_types = {
            'contact_id': str,
            'sender': str,
            'subject': str,
            'content': str,
            'public_subject': str,
            'public_content': str,
            'incident_id': str,
            'idempotency_token': str
        }

        self.attribute_map = {
            'contact_id': 'ContactId',
            'sender': 'Sender',
            'subject': 'Subject',
            'content': 'Content',
            'public_subject': 'PublicSubject',
            'public_content': 'PublicContent',
            'incident_id': 'IncidentId',
            'idempotency_token': 'IdempotencyToken'
        }

        self._contact_id = contact_id
        self._sender = sender
        self._subject = subject
        self._content = content
        self._public_subject = public_subject
        self._public_content = public_content
        self._incident_id = incident_id
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartEngagementRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartEngagementRequest of this StartEngagementRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this StartEngagementRequest.


        :return: The contact_id of this StartEngagementRequest.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this StartEngagementRequest.


        :param contact_id: The contact_id of this StartEngagementRequest.
        :type contact_id: str
        """
        if contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")

        self._contact_id = contact_id

    @property
    def sender(self):
        """Gets the sender of this StartEngagementRequest.


        :return: The sender of this StartEngagementRequest.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this StartEngagementRequest.


        :param sender: The sender of this StartEngagementRequest.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")

        self._sender = sender

    @property
    def subject(self):
        """Gets the subject of this StartEngagementRequest.


        :return: The subject of this StartEngagementRequest.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this StartEngagementRequest.


        :param subject: The subject of this StartEngagementRequest.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def content(self):
        """Gets the content of this StartEngagementRequest.


        :return: The content of this StartEngagementRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this StartEngagementRequest.


        :param content: The content of this StartEngagementRequest.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def public_subject(self):
        """Gets the public_subject of this StartEngagementRequest.


        :return: The public_subject of this StartEngagementRequest.
        :rtype: str
        """
        return self._public_subject

    @public_subject.setter
    def public_subject(self, public_subject):
        """Sets the public_subject of this StartEngagementRequest.


        :param public_subject: The public_subject of this StartEngagementRequest.
        :type public_subject: str
        """

        self._public_subject = public_subject

    @property
    def public_content(self):
        """Gets the public_content of this StartEngagementRequest.


        :return: The public_content of this StartEngagementRequest.
        :rtype: str
        """
        return self._public_content

    @public_content.setter
    def public_content(self, public_content):
        """Sets the public_content of this StartEngagementRequest.


        :param public_content: The public_content of this StartEngagementRequest.
        :type public_content: str
        """

        self._public_content = public_content

    @property
    def incident_id(self):
        """Gets the incident_id of this StartEngagementRequest.


        :return: The incident_id of this StartEngagementRequest.
        :rtype: str
        """
        return self._incident_id

    @incident_id.setter
    def incident_id(self, incident_id):
        """Sets the incident_id of this StartEngagementRequest.


        :param incident_id: The incident_id of this StartEngagementRequest.
        :type incident_id: str
        """

        self._incident_id = incident_id

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this StartEngagementRequest.


        :return: The idempotency_token of this StartEngagementRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this StartEngagementRequest.


        :param idempotency_token: The idempotency_token of this StartEngagementRequest.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token
