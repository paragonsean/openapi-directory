# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateRotationOverrideRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rotation_id: str=None, new_contact_ids: List=None, start_time: datetime=None, end_time: datetime=None, idempotency_token: str=None):
        """CreateRotationOverrideRequest - a model defined in OpenAPI

        :param rotation_id: The rotation_id of this CreateRotationOverrideRequest.
        :param new_contact_ids: The new_contact_ids of this CreateRotationOverrideRequest.
        :param start_time: The start_time of this CreateRotationOverrideRequest.
        :param end_time: The end_time of this CreateRotationOverrideRequest.
        :param idempotency_token: The idempotency_token of this CreateRotationOverrideRequest.
        """
        self.openapi_types = {
            'rotation_id': str,
            'new_contact_ids': List,
            'start_time': datetime,
            'end_time': datetime,
            'idempotency_token': str
        }

        self.attribute_map = {
            'rotation_id': 'RotationId',
            'new_contact_ids': 'NewContactIds',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'idempotency_token': 'IdempotencyToken'
        }

        self._rotation_id = rotation_id
        self._new_contact_ids = new_contact_ids
        self._start_time = start_time
        self._end_time = end_time
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRotationOverrideRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRotationOverrideRequest of this CreateRotationOverrideRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rotation_id(self):
        """Gets the rotation_id of this CreateRotationOverrideRequest.


        :return: The rotation_id of this CreateRotationOverrideRequest.
        :rtype: str
        """
        return self._rotation_id

    @rotation_id.setter
    def rotation_id(self, rotation_id):
        """Sets the rotation_id of this CreateRotationOverrideRequest.


        :param rotation_id: The rotation_id of this CreateRotationOverrideRequest.
        :type rotation_id: str
        """
        if rotation_id is None:
            raise ValueError("Invalid value for `rotation_id`, must not be `None`")

        self._rotation_id = rotation_id

    @property
    def new_contact_ids(self):
        """Gets the new_contact_ids of this CreateRotationOverrideRequest.


        :return: The new_contact_ids of this CreateRotationOverrideRequest.
        :rtype: List
        """
        return self._new_contact_ids

    @new_contact_ids.setter
    def new_contact_ids(self, new_contact_ids):
        """Sets the new_contact_ids of this CreateRotationOverrideRequest.


        :param new_contact_ids: The new_contact_ids of this CreateRotationOverrideRequest.
        :type new_contact_ids: List
        """
        if new_contact_ids is None:
            raise ValueError("Invalid value for `new_contact_ids`, must not be `None`")

        self._new_contact_ids = new_contact_ids

    @property
    def start_time(self):
        """Gets the start_time of this CreateRotationOverrideRequest.


        :return: The start_time of this CreateRotationOverrideRequest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CreateRotationOverrideRequest.


        :param start_time: The start_time of this CreateRotationOverrideRequest.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this CreateRotationOverrideRequest.


        :return: The end_time of this CreateRotationOverrideRequest.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CreateRotationOverrideRequest.


        :param end_time: The end_time of this CreateRotationOverrideRequest.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateRotationOverrideRequest.


        :return: The idempotency_token of this CreateRotationOverrideRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateRotationOverrideRequest.


        :param idempotency_token: The idempotency_token of this CreateRotationOverrideRequest.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token
