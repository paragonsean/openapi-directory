# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_type import ChannelType
from openapi_server.models.create_contact_channel_request_delivery_address import CreateContactChannelRequestDeliveryAddress
from openapi_server import util


class CreateContactChannelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: str=None, name: str=None, type: ChannelType=None, delivery_address: CreateContactChannelRequestDeliveryAddress=None, defer_activation: bool=None, idempotency_token: str=None):
        """CreateContactChannelRequest - a model defined in OpenAPI

        :param contact_id: The contact_id of this CreateContactChannelRequest.
        :param name: The name of this CreateContactChannelRequest.
        :param type: The type of this CreateContactChannelRequest.
        :param delivery_address: The delivery_address of this CreateContactChannelRequest.
        :param defer_activation: The defer_activation of this CreateContactChannelRequest.
        :param idempotency_token: The idempotency_token of this CreateContactChannelRequest.
        """
        self.openapi_types = {
            'contact_id': str,
            'name': str,
            'type': ChannelType,
            'delivery_address': CreateContactChannelRequestDeliveryAddress,
            'defer_activation': bool,
            'idempotency_token': str
        }

        self.attribute_map = {
            'contact_id': 'ContactId',
            'name': 'Name',
            'type': 'Type',
            'delivery_address': 'DeliveryAddress',
            'defer_activation': 'DeferActivation',
            'idempotency_token': 'IdempotencyToken'
        }

        self._contact_id = contact_id
        self._name = name
        self._type = type
        self._delivery_address = delivery_address
        self._defer_activation = defer_activation
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateContactChannelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateContactChannelRequest of this CreateContactChannelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this CreateContactChannelRequest.


        :return: The contact_id of this CreateContactChannelRequest.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this CreateContactChannelRequest.


        :param contact_id: The contact_id of this CreateContactChannelRequest.
        :type contact_id: str
        """
        if contact_id is None:
            raise ValueError("Invalid value for `contact_id`, must not be `None`")

        self._contact_id = contact_id

    @property
    def name(self):
        """Gets the name of this CreateContactChannelRequest.


        :return: The name of this CreateContactChannelRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateContactChannelRequest.


        :param name: The name of this CreateContactChannelRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this CreateContactChannelRequest.


        :return: The type of this CreateContactChannelRequest.
        :rtype: ChannelType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateContactChannelRequest.


        :param type: The type of this CreateContactChannelRequest.
        :type type: ChannelType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def delivery_address(self):
        """Gets the delivery_address of this CreateContactChannelRequest.


        :return: The delivery_address of this CreateContactChannelRequest.
        :rtype: CreateContactChannelRequestDeliveryAddress
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this CreateContactChannelRequest.


        :param delivery_address: The delivery_address of this CreateContactChannelRequest.
        :type delivery_address: CreateContactChannelRequestDeliveryAddress
        """
        if delivery_address is None:
            raise ValueError("Invalid value for `delivery_address`, must not be `None`")

        self._delivery_address = delivery_address

    @property
    def defer_activation(self):
        """Gets the defer_activation of this CreateContactChannelRequest.


        :return: The defer_activation of this CreateContactChannelRequest.
        :rtype: bool
        """
        return self._defer_activation

    @defer_activation.setter
    def defer_activation(self, defer_activation):
        """Sets the defer_activation of this CreateContactChannelRequest.


        :param defer_activation: The defer_activation of this CreateContactChannelRequest.
        :type defer_activation: bool
        """

        self._defer_activation = defer_activation

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateContactChannelRequest.


        :return: The idempotency_token of this CreateContactChannelRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateContactChannelRequest.


        :param idempotency_token: The idempotency_token of this CreateContactChannelRequest.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token
