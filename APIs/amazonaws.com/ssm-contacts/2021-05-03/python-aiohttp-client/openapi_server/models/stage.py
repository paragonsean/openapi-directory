# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Stage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration_in_minutes: int=None, targets: List=None):
        """Stage - a model defined in OpenAPI

        :param duration_in_minutes: The duration_in_minutes of this Stage.
        :param targets: The targets of this Stage.
        """
        self.openapi_types = {
            'duration_in_minutes': int,
            'targets': List
        }

        self.attribute_map = {
            'duration_in_minutes': 'DurationInMinutes',
            'targets': 'Targets'
        }

        self._duration_in_minutes = duration_in_minutes
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stage of this Stage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration_in_minutes(self):
        """Gets the duration_in_minutes of this Stage.


        :return: The duration_in_minutes of this Stage.
        :rtype: int
        """
        return self._duration_in_minutes

    @duration_in_minutes.setter
    def duration_in_minutes(self, duration_in_minutes):
        """Sets the duration_in_minutes of this Stage.


        :param duration_in_minutes: The duration_in_minutes of this Stage.
        :type duration_in_minutes: int
        """
        if duration_in_minutes is None:
            raise ValueError("Invalid value for `duration_in_minutes`, must not be `None`")

        self._duration_in_minutes = duration_in_minutes

    @property
    def targets(self):
        """Gets the targets of this Stage.


        :return: The targets of this Stage.
        :rtype: List
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this Stage.


        :param targets: The targets of this Stage.
        :type targets: List
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets
