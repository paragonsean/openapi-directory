# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_preview_rotation_shifts_request_recurrence import ListPreviewRotationShiftsRequestRecurrence
from openapi_server import util


class ListPreviewRotationShiftsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rotation_start_time: datetime=None, start_time: datetime=None, end_time: datetime=None, members: List=None, time_zone_id: str=None, recurrence: ListPreviewRotationShiftsRequestRecurrence=None, overrides: List=None, next_token: str=None, max_results: int=None):
        """ListPreviewRotationShiftsRequest - a model defined in OpenAPI

        :param rotation_start_time: The rotation_start_time of this ListPreviewRotationShiftsRequest.
        :param start_time: The start_time of this ListPreviewRotationShiftsRequest.
        :param end_time: The end_time of this ListPreviewRotationShiftsRequest.
        :param members: The members of this ListPreviewRotationShiftsRequest.
        :param time_zone_id: The time_zone_id of this ListPreviewRotationShiftsRequest.
        :param recurrence: The recurrence of this ListPreviewRotationShiftsRequest.
        :param overrides: The overrides of this ListPreviewRotationShiftsRequest.
        :param next_token: The next_token of this ListPreviewRotationShiftsRequest.
        :param max_results: The max_results of this ListPreviewRotationShiftsRequest.
        """
        self.openapi_types = {
            'rotation_start_time': datetime,
            'start_time': datetime,
            'end_time': datetime,
            'members': List,
            'time_zone_id': str,
            'recurrence': ListPreviewRotationShiftsRequestRecurrence,
            'overrides': List,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'rotation_start_time': 'RotationStartTime',
            'start_time': 'StartTime',
            'end_time': 'EndTime',
            'members': 'Members',
            'time_zone_id': 'TimeZoneId',
            'recurrence': 'Recurrence',
            'overrides': 'Overrides',
            'next_token': 'NextToken',
            'max_results': 'MaxResults'
        }

        self._rotation_start_time = rotation_start_time
        self._start_time = start_time
        self._end_time = end_time
        self._members = members
        self._time_zone_id = time_zone_id
        self._recurrence = recurrence
        self._overrides = overrides
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPreviewRotationShiftsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPreviewRotationShiftsRequest of this ListPreviewRotationShiftsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rotation_start_time(self):
        """Gets the rotation_start_time of this ListPreviewRotationShiftsRequest.


        :return: The rotation_start_time of this ListPreviewRotationShiftsRequest.
        :rtype: datetime
        """
        return self._rotation_start_time

    @rotation_start_time.setter
    def rotation_start_time(self, rotation_start_time):
        """Sets the rotation_start_time of this ListPreviewRotationShiftsRequest.


        :param rotation_start_time: The rotation_start_time of this ListPreviewRotationShiftsRequest.
        :type rotation_start_time: datetime
        """

        self._rotation_start_time = rotation_start_time

    @property
    def start_time(self):
        """Gets the start_time of this ListPreviewRotationShiftsRequest.


        :return: The start_time of this ListPreviewRotationShiftsRequest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ListPreviewRotationShiftsRequest.


        :param start_time: The start_time of this ListPreviewRotationShiftsRequest.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ListPreviewRotationShiftsRequest.


        :return: The end_time of this ListPreviewRotationShiftsRequest.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ListPreviewRotationShiftsRequest.


        :param end_time: The end_time of this ListPreviewRotationShiftsRequest.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def members(self):
        """Gets the members of this ListPreviewRotationShiftsRequest.


        :return: The members of this ListPreviewRotationShiftsRequest.
        :rtype: List
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this ListPreviewRotationShiftsRequest.


        :param members: The members of this ListPreviewRotationShiftsRequest.
        :type members: List
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")

        self._members = members

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this ListPreviewRotationShiftsRequest.


        :return: The time_zone_id of this ListPreviewRotationShiftsRequest.
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this ListPreviewRotationShiftsRequest.


        :param time_zone_id: The time_zone_id of this ListPreviewRotationShiftsRequest.
        :type time_zone_id: str
        """
        if time_zone_id is None:
            raise ValueError("Invalid value for `time_zone_id`, must not be `None`")

        self._time_zone_id = time_zone_id

    @property
    def recurrence(self):
        """Gets the recurrence of this ListPreviewRotationShiftsRequest.


        :return: The recurrence of this ListPreviewRotationShiftsRequest.
        :rtype: ListPreviewRotationShiftsRequestRecurrence
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this ListPreviewRotationShiftsRequest.


        :param recurrence: The recurrence of this ListPreviewRotationShiftsRequest.
        :type recurrence: ListPreviewRotationShiftsRequestRecurrence
        """
        if recurrence is None:
            raise ValueError("Invalid value for `recurrence`, must not be `None`")

        self._recurrence = recurrence

    @property
    def overrides(self):
        """Gets the overrides of this ListPreviewRotationShiftsRequest.


        :return: The overrides of this ListPreviewRotationShiftsRequest.
        :rtype: List
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this ListPreviewRotationShiftsRequest.


        :param overrides: The overrides of this ListPreviewRotationShiftsRequest.
        :type overrides: List
        """

        self._overrides = overrides

    @property
    def next_token(self):
        """Gets the next_token of this ListPreviewRotationShiftsRequest.


        :return: The next_token of this ListPreviewRotationShiftsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListPreviewRotationShiftsRequest.


        :param next_token: The next_token of this ListPreviewRotationShiftsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListPreviewRotationShiftsRequest.


        :return: The max_results of this ListPreviewRotationShiftsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListPreviewRotationShiftsRequest.


        :param max_results: The max_results of this ListPreviewRotationShiftsRequest.
        :type max_results: int
        """

        self._max_results = max_results
