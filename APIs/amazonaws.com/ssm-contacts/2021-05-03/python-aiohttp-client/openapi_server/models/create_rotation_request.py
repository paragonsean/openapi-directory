# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_rotation_request_recurrence import CreateRotationRequestRecurrence
from openapi_server import util


class CreateRotationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, contact_ids: List=None, start_time: datetime=None, time_zone_id: str=None, recurrence: CreateRotationRequestRecurrence=None, tags: List=None, idempotency_token: str=None):
        """CreateRotationRequest - a model defined in OpenAPI

        :param name: The name of this CreateRotationRequest.
        :param contact_ids: The contact_ids of this CreateRotationRequest.
        :param start_time: The start_time of this CreateRotationRequest.
        :param time_zone_id: The time_zone_id of this CreateRotationRequest.
        :param recurrence: The recurrence of this CreateRotationRequest.
        :param tags: The tags of this CreateRotationRequest.
        :param idempotency_token: The idempotency_token of this CreateRotationRequest.
        """
        self.openapi_types = {
            'name': str,
            'contact_ids': List,
            'start_time': datetime,
            'time_zone_id': str,
            'recurrence': CreateRotationRequestRecurrence,
            'tags': List,
            'idempotency_token': str
        }

        self.attribute_map = {
            'name': 'Name',
            'contact_ids': 'ContactIds',
            'start_time': 'StartTime',
            'time_zone_id': 'TimeZoneId',
            'recurrence': 'Recurrence',
            'tags': 'Tags',
            'idempotency_token': 'IdempotencyToken'
        }

        self._name = name
        self._contact_ids = contact_ids
        self._start_time = start_time
        self._time_zone_id = time_zone_id
        self._recurrence = recurrence
        self._tags = tags
        self._idempotency_token = idempotency_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRotationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRotationRequest of this CreateRotationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateRotationRequest.


        :return: The name of this CreateRotationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRotationRequest.


        :param name: The name of this CreateRotationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def contact_ids(self):
        """Gets the contact_ids of this CreateRotationRequest.


        :return: The contact_ids of this CreateRotationRequest.
        :rtype: List
        """
        return self._contact_ids

    @contact_ids.setter
    def contact_ids(self, contact_ids):
        """Sets the contact_ids of this CreateRotationRequest.


        :param contact_ids: The contact_ids of this CreateRotationRequest.
        :type contact_ids: List
        """
        if contact_ids is None:
            raise ValueError("Invalid value for `contact_ids`, must not be `None`")

        self._contact_ids = contact_ids

    @property
    def start_time(self):
        """Gets the start_time of this CreateRotationRequest.


        :return: The start_time of this CreateRotationRequest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CreateRotationRequest.


        :param start_time: The start_time of this CreateRotationRequest.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this CreateRotationRequest.


        :return: The time_zone_id of this CreateRotationRequest.
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this CreateRotationRequest.


        :param time_zone_id: The time_zone_id of this CreateRotationRequest.
        :type time_zone_id: str
        """
        if time_zone_id is None:
            raise ValueError("Invalid value for `time_zone_id`, must not be `None`")

        self._time_zone_id = time_zone_id

    @property
    def recurrence(self):
        """Gets the recurrence of this CreateRotationRequest.


        :return: The recurrence of this CreateRotationRequest.
        :rtype: CreateRotationRequestRecurrence
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this CreateRotationRequest.


        :param recurrence: The recurrence of this CreateRotationRequest.
        :type recurrence: CreateRotationRequestRecurrence
        """
        if recurrence is None:
            raise ValueError("Invalid value for `recurrence`, must not be `None`")

        self._recurrence = recurrence

    @property
    def tags(self):
        """Gets the tags of this CreateRotationRequest.


        :return: The tags of this CreateRotationRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRotationRequest.


        :param tags: The tags of this CreateRotationRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def idempotency_token(self):
        """Gets the idempotency_token of this CreateRotationRequest.


        :return: The idempotency_token of this CreateRotationRequest.
        :rtype: str
        """
        return self._idempotency_token

    @idempotency_token.setter
    def idempotency_token(self, idempotency_token):
        """Sets the idempotency_token of this CreateRotationRequest.


        :param idempotency_token: The idempotency_token of this CreateRotationRequest.
        :type idempotency_token: str
        """

        self._idempotency_token = idempotency_token
