# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetContactTargetInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: str=None, is_essential: bool=None):
        """TargetContactTargetInfo - a model defined in OpenAPI

        :param contact_id: The contact_id of this TargetContactTargetInfo.
        :param is_essential: The is_essential of this TargetContactTargetInfo.
        """
        self.openapi_types = {
            'contact_id': str,
            'is_essential': bool
        }

        self.attribute_map = {
            'contact_id': 'ContactId',
            'is_essential': 'IsEssential'
        }

        self._contact_id = contact_id
        self._is_essential = is_essential

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetContactTargetInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Target_ContactTargetInfo of this TargetContactTargetInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this TargetContactTargetInfo.


        :return: The contact_id of this TargetContactTargetInfo.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this TargetContactTargetInfo.


        :param contact_id: The contact_id of this TargetContactTargetInfo.
        :type contact_id: str
        """

        self._contact_id = contact_id

    @property
    def is_essential(self):
        """Gets the is_essential of this TargetContactTargetInfo.


        :return: The is_essential of this TargetContactTargetInfo.
        :rtype: bool
        """
        return self._is_essential

    @is_essential.setter
    def is_essential(self, is_essential):
        """Sets the is_essential of this TargetContactTargetInfo.


        :param is_essential: The is_essential of this TargetContactTargetInfo.
        :type is_essential: bool
        """
        if is_essential is None:
            raise ValueError("Invalid value for `is_essential`, must not be `None`")

        self._is_essential = is_essential
