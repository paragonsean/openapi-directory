# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeactivateContactChannelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_channel_id: str=None):
        """DeactivateContactChannelRequest - a model defined in OpenAPI

        :param contact_channel_id: The contact_channel_id of this DeactivateContactChannelRequest.
        """
        self.openapi_types = {
            'contact_channel_id': str
        }

        self.attribute_map = {
            'contact_channel_id': 'ContactChannelId'
        }

        self._contact_channel_id = contact_channel_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeactivateContactChannelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeactivateContactChannelRequest of this DeactivateContactChannelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_channel_id(self):
        """Gets the contact_channel_id of this DeactivateContactChannelRequest.


        :return: The contact_channel_id of this DeactivateContactChannelRequest.
        :rtype: str
        """
        return self._contact_channel_id

    @contact_channel_id.setter
    def contact_channel_id(self, contact_channel_id):
        """Sets the contact_channel_id of this DeactivateContactChannelRequest.


        :param contact_channel_id: The contact_channel_id of this DeactivateContactChannelRequest.
        :type contact_channel_id: str
        """
        if contact_channel_id is None:
            raise ValueError("Invalid value for `contact_channel_id`, must not be `None`")

        self._contact_channel_id = contact_channel_id
