# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accept_code_validation import AcceptCodeValidation
from openapi_server.models.accept_type import AcceptType
from openapi_server import util


class AcceptPageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page_id: str=None, contact_channel_id: str=None, accept_type: AcceptType=None, note: str=None, accept_code: str=None, accept_code_validation: AcceptCodeValidation=None):
        """AcceptPageRequest - a model defined in OpenAPI

        :param page_id: The page_id of this AcceptPageRequest.
        :param contact_channel_id: The contact_channel_id of this AcceptPageRequest.
        :param accept_type: The accept_type of this AcceptPageRequest.
        :param note: The note of this AcceptPageRequest.
        :param accept_code: The accept_code of this AcceptPageRequest.
        :param accept_code_validation: The accept_code_validation of this AcceptPageRequest.
        """
        self.openapi_types = {
            'page_id': str,
            'contact_channel_id': str,
            'accept_type': AcceptType,
            'note': str,
            'accept_code': str,
            'accept_code_validation': AcceptCodeValidation
        }

        self.attribute_map = {
            'page_id': 'PageId',
            'contact_channel_id': 'ContactChannelId',
            'accept_type': 'AcceptType',
            'note': 'Note',
            'accept_code': 'AcceptCode',
            'accept_code_validation': 'AcceptCodeValidation'
        }

        self._page_id = page_id
        self._contact_channel_id = contact_channel_id
        self._accept_type = accept_type
        self._note = note
        self._accept_code = accept_code
        self._accept_code_validation = accept_code_validation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcceptPageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcceptPageRequest of this AcceptPageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page_id(self):
        """Gets the page_id of this AcceptPageRequest.


        :return: The page_id of this AcceptPageRequest.
        :rtype: str
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """Sets the page_id of this AcceptPageRequest.


        :param page_id: The page_id of this AcceptPageRequest.
        :type page_id: str
        """
        if page_id is None:
            raise ValueError("Invalid value for `page_id`, must not be `None`")

        self._page_id = page_id

    @property
    def contact_channel_id(self):
        """Gets the contact_channel_id of this AcceptPageRequest.


        :return: The contact_channel_id of this AcceptPageRequest.
        :rtype: str
        """
        return self._contact_channel_id

    @contact_channel_id.setter
    def contact_channel_id(self, contact_channel_id):
        """Sets the contact_channel_id of this AcceptPageRequest.


        :param contact_channel_id: The contact_channel_id of this AcceptPageRequest.
        :type contact_channel_id: str
        """

        self._contact_channel_id = contact_channel_id

    @property
    def accept_type(self):
        """Gets the accept_type of this AcceptPageRequest.


        :return: The accept_type of this AcceptPageRequest.
        :rtype: AcceptType
        """
        return self._accept_type

    @accept_type.setter
    def accept_type(self, accept_type):
        """Sets the accept_type of this AcceptPageRequest.


        :param accept_type: The accept_type of this AcceptPageRequest.
        :type accept_type: AcceptType
        """
        if accept_type is None:
            raise ValueError("Invalid value for `accept_type`, must not be `None`")

        self._accept_type = accept_type

    @property
    def note(self):
        """Gets the note of this AcceptPageRequest.


        :return: The note of this AcceptPageRequest.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this AcceptPageRequest.


        :param note: The note of this AcceptPageRequest.
        :type note: str
        """

        self._note = note

    @property
    def accept_code(self):
        """Gets the accept_code of this AcceptPageRequest.


        :return: The accept_code of this AcceptPageRequest.
        :rtype: str
        """
        return self._accept_code

    @accept_code.setter
    def accept_code(self, accept_code):
        """Sets the accept_code of this AcceptPageRequest.


        :param accept_code: The accept_code of this AcceptPageRequest.
        :type accept_code: str
        """
        if accept_code is None:
            raise ValueError("Invalid value for `accept_code`, must not be `None`")

        self._accept_code = accept_code

    @property
    def accept_code_validation(self):
        """Gets the accept_code_validation of this AcceptPageRequest.


        :return: The accept_code_validation of this AcceptPageRequest.
        :rtype: AcceptCodeValidation
        """
        return self._accept_code_validation

    @accept_code_validation.setter
    def accept_code_validation(self, accept_code_validation):
        """Sets the accept_code_validation of this AcceptPageRequest.


        :param accept_code_validation: The accept_code_validation of this AcceptPageRequest.
        :type accept_code_validation: AcceptCodeValidation
        """

        self._accept_code_validation = accept_code_validation
