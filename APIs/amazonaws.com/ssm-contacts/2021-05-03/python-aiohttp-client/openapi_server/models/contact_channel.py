# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activation_status import ActivationStatus
from openapi_server.models.channel_type import ChannelType
from openapi_server.models.get_contact_channel_result_delivery_address import GetContactChannelResultDeliveryAddress
from openapi_server import util


class ContactChannel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_channel_arn: str=None, contact_arn: str=None, name: str=None, type: ChannelType=None, delivery_address: GetContactChannelResultDeliveryAddress=None, activation_status: ActivationStatus=None):
        """ContactChannel - a model defined in OpenAPI

        :param contact_channel_arn: The contact_channel_arn of this ContactChannel.
        :param contact_arn: The contact_arn of this ContactChannel.
        :param name: The name of this ContactChannel.
        :param type: The type of this ContactChannel.
        :param delivery_address: The delivery_address of this ContactChannel.
        :param activation_status: The activation_status of this ContactChannel.
        """
        self.openapi_types = {
            'contact_channel_arn': str,
            'contact_arn': str,
            'name': str,
            'type': ChannelType,
            'delivery_address': GetContactChannelResultDeliveryAddress,
            'activation_status': ActivationStatus
        }

        self.attribute_map = {
            'contact_channel_arn': 'ContactChannelArn',
            'contact_arn': 'ContactArn',
            'name': 'Name',
            'type': 'Type',
            'delivery_address': 'DeliveryAddress',
            'activation_status': 'ActivationStatus'
        }

        self._contact_channel_arn = contact_channel_arn
        self._contact_arn = contact_arn
        self._name = name
        self._type = type
        self._delivery_address = delivery_address
        self._activation_status = activation_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactChannel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactChannel of this ContactChannel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_channel_arn(self):
        """Gets the contact_channel_arn of this ContactChannel.


        :return: The contact_channel_arn of this ContactChannel.
        :rtype: str
        """
        return self._contact_channel_arn

    @contact_channel_arn.setter
    def contact_channel_arn(self, contact_channel_arn):
        """Sets the contact_channel_arn of this ContactChannel.


        :param contact_channel_arn: The contact_channel_arn of this ContactChannel.
        :type contact_channel_arn: str
        """
        if contact_channel_arn is None:
            raise ValueError("Invalid value for `contact_channel_arn`, must not be `None`")

        self._contact_channel_arn = contact_channel_arn

    @property
    def contact_arn(self):
        """Gets the contact_arn of this ContactChannel.


        :return: The contact_arn of this ContactChannel.
        :rtype: str
        """
        return self._contact_arn

    @contact_arn.setter
    def contact_arn(self, contact_arn):
        """Sets the contact_arn of this ContactChannel.


        :param contact_arn: The contact_arn of this ContactChannel.
        :type contact_arn: str
        """
        if contact_arn is None:
            raise ValueError("Invalid value for `contact_arn`, must not be `None`")

        self._contact_arn = contact_arn

    @property
    def name(self):
        """Gets the name of this ContactChannel.


        :return: The name of this ContactChannel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactChannel.


        :param name: The name of this ContactChannel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this ContactChannel.


        :return: The type of this ContactChannel.
        :rtype: ChannelType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContactChannel.


        :param type: The type of this ContactChannel.
        :type type: ChannelType
        """

        self._type = type

    @property
    def delivery_address(self):
        """Gets the delivery_address of this ContactChannel.


        :return: The delivery_address of this ContactChannel.
        :rtype: GetContactChannelResultDeliveryAddress
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this ContactChannel.


        :param delivery_address: The delivery_address of this ContactChannel.
        :type delivery_address: GetContactChannelResultDeliveryAddress
        """
        if delivery_address is None:
            raise ValueError("Invalid value for `delivery_address`, must not be `None`")

        self._delivery_address = delivery_address

    @property
    def activation_status(self):
        """Gets the activation_status of this ContactChannel.


        :return: The activation_status of this ContactChannel.
        :rtype: ActivationStatus
        """
        return self._activation_status

    @activation_status.setter
    def activation_status(self, activation_status):
        """Sets the activation_status of this ContactChannel.


        :param activation_status: The activation_status of this ContactChannel.
        :type activation_status: ActivationStatus
        """
        if activation_status is None:
            raise ValueError("Invalid value for `activation_status`, must not be `None`")

        self._activation_status = activation_status
