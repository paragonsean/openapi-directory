/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsSystemsManagerIncidentManagerContacts);
  }
}(this, function(expect, AwsSystemsManagerIncidentManagerContacts) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsSystemsManagerIncidentManagerContacts.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('acceptPage', function() {
      it('should call acceptPage successfully', function(done) {
        //uncomment below and update the code to test acceptPage
        //instance.acceptPage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('activateContactChannel', function() {
      it('should call activateContactChannel successfully', function(done) {
        //uncomment below and update the code to test activateContactChannel
        //instance.activateContactChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createContact', function() {
      it('should call createContact successfully', function(done) {
        //uncomment below and update the code to test createContact
        //instance.createContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createContactChannel', function() {
      it('should call createContactChannel successfully', function(done) {
        //uncomment below and update the code to test createContactChannel
        //instance.createContactChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRotation', function() {
      it('should call createRotation successfully', function(done) {
        //uncomment below and update the code to test createRotation
        //instance.createRotation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRotationOverride', function() {
      it('should call createRotationOverride successfully', function(done) {
        //uncomment below and update the code to test createRotationOverride
        //instance.createRotationOverride(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deactivateContactChannel', function() {
      it('should call deactivateContactChannel successfully', function(done) {
        //uncomment below and update the code to test deactivateContactChannel
        //instance.deactivateContactChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContact', function() {
      it('should call deleteContact successfully', function(done) {
        //uncomment below and update the code to test deleteContact
        //instance.deleteContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteContactChannel', function() {
      it('should call deleteContactChannel successfully', function(done) {
        //uncomment below and update the code to test deleteContactChannel
        //instance.deleteContactChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRotation', function() {
      it('should call deleteRotation successfully', function(done) {
        //uncomment below and update the code to test deleteRotation
        //instance.deleteRotation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRotationOverride', function() {
      it('should call deleteRotationOverride successfully', function(done) {
        //uncomment below and update the code to test deleteRotationOverride
        //instance.deleteRotationOverride(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeEngagement', function() {
      it('should call describeEngagement successfully', function(done) {
        //uncomment below and update the code to test describeEngagement
        //instance.describeEngagement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePage', function() {
      it('should call describePage successfully', function(done) {
        //uncomment below and update the code to test describePage
        //instance.describePage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContact', function() {
      it('should call getContact successfully', function(done) {
        //uncomment below and update the code to test getContact
        //instance.getContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContactChannel', function() {
      it('should call getContactChannel successfully', function(done) {
        //uncomment below and update the code to test getContactChannel
        //instance.getContactChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getContactPolicy', function() {
      it('should call getContactPolicy successfully', function(done) {
        //uncomment below and update the code to test getContactPolicy
        //instance.getContactPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRotation', function() {
      it('should call getRotation successfully', function(done) {
        //uncomment below and update the code to test getRotation
        //instance.getRotation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRotationOverride', function() {
      it('should call getRotationOverride successfully', function(done) {
        //uncomment below and update the code to test getRotationOverride
        //instance.getRotationOverride(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listContactChannels', function() {
      it('should call listContactChannels successfully', function(done) {
        //uncomment below and update the code to test listContactChannels
        //instance.listContactChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listContacts', function() {
      it('should call listContacts successfully', function(done) {
        //uncomment below and update the code to test listContacts
        //instance.listContacts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEngagements', function() {
      it('should call listEngagements successfully', function(done) {
        //uncomment below and update the code to test listEngagements
        //instance.listEngagements(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPageReceipts', function() {
      it('should call listPageReceipts successfully', function(done) {
        //uncomment below and update the code to test listPageReceipts
        //instance.listPageReceipts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPageResolutions', function() {
      it('should call listPageResolutions successfully', function(done) {
        //uncomment below and update the code to test listPageResolutions
        //instance.listPageResolutions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPagesByContact', function() {
      it('should call listPagesByContact successfully', function(done) {
        //uncomment below and update the code to test listPagesByContact
        //instance.listPagesByContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPagesByEngagement', function() {
      it('should call listPagesByEngagement successfully', function(done) {
        //uncomment below and update the code to test listPagesByEngagement
        //instance.listPagesByEngagement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPreviewRotationShifts', function() {
      it('should call listPreviewRotationShifts successfully', function(done) {
        //uncomment below and update the code to test listPreviewRotationShifts
        //instance.listPreviewRotationShifts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRotationOverrides', function() {
      it('should call listRotationOverrides successfully', function(done) {
        //uncomment below and update the code to test listRotationOverrides
        //instance.listRotationOverrides(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRotationShifts', function() {
      it('should call listRotationShifts successfully', function(done) {
        //uncomment below and update the code to test listRotationShifts
        //instance.listRotationShifts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRotations', function() {
      it('should call listRotations successfully', function(done) {
        //uncomment below and update the code to test listRotations
        //instance.listRotations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putContactPolicy', function() {
      it('should call putContactPolicy successfully', function(done) {
        //uncomment below and update the code to test putContactPolicy
        //instance.putContactPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendActivationCode', function() {
      it('should call sendActivationCode successfully', function(done) {
        //uncomment below and update the code to test sendActivationCode
        //instance.sendActivationCode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startEngagement', function() {
      it('should call startEngagement successfully', function(done) {
        //uncomment below and update the code to test startEngagement
        //instance.startEngagement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopEngagement', function() {
      it('should call stopEngagement successfully', function(done) {
        //uncomment below and update the code to test stopEngagement
        //instance.stopEngagement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContact', function() {
      it('should call updateContact successfully', function(done) {
        //uncomment below and update the code to test updateContact
        //instance.updateContact(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateContactChannel', function() {
      it('should call updateContactChannel successfully', function(done) {
        //uncomment below and update the code to test updateContactChannel
        //instance.updateContactChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRotation', function() {
      it('should call updateRotation successfully', function(done) {
        //uncomment below and update the code to test updateRotation
        //instance.updateRotation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
