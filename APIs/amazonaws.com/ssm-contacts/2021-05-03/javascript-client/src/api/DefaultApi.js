/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptPageRequest from '../model/AcceptPageRequest';
import ActivateContactChannelRequest from '../model/ActivateContactChannelRequest';
import CreateContactChannelRequest from '../model/CreateContactChannelRequest';
import CreateContactChannelResult from '../model/CreateContactChannelResult';
import CreateContactRequest from '../model/CreateContactRequest';
import CreateContactResult from '../model/CreateContactResult';
import CreateRotationOverrideRequest from '../model/CreateRotationOverrideRequest';
import CreateRotationOverrideResult from '../model/CreateRotationOverrideResult';
import CreateRotationRequest from '../model/CreateRotationRequest';
import CreateRotationResult from '../model/CreateRotationResult';
import DeactivateContactChannelRequest from '../model/DeactivateContactChannelRequest';
import DeleteContactChannelRequest from '../model/DeleteContactChannelRequest';
import DeleteContactRequest from '../model/DeleteContactRequest';
import DeleteRotationOverrideRequest from '../model/DeleteRotationOverrideRequest';
import DeleteRotationRequest from '../model/DeleteRotationRequest';
import DescribeEngagementRequest from '../model/DescribeEngagementRequest';
import DescribeEngagementResult from '../model/DescribeEngagementResult';
import DescribePageRequest from '../model/DescribePageRequest';
import DescribePageResult from '../model/DescribePageResult';
import GetContactChannelRequest from '../model/GetContactChannelRequest';
import GetContactChannelResult from '../model/GetContactChannelResult';
import GetContactPolicyRequest from '../model/GetContactPolicyRequest';
import GetContactPolicyResult from '../model/GetContactPolicyResult';
import GetContactRequest from '../model/GetContactRequest';
import GetContactResult from '../model/GetContactResult';
import GetRotationOverrideRequest from '../model/GetRotationOverrideRequest';
import GetRotationOverrideResult from '../model/GetRotationOverrideResult';
import GetRotationRequest from '../model/GetRotationRequest';
import GetRotationResult from '../model/GetRotationResult';
import ListContactChannelsRequest from '../model/ListContactChannelsRequest';
import ListContactChannelsResult from '../model/ListContactChannelsResult';
import ListContactsRequest from '../model/ListContactsRequest';
import ListContactsResult from '../model/ListContactsResult';
import ListEngagementsRequest from '../model/ListEngagementsRequest';
import ListEngagementsResult from '../model/ListEngagementsResult';
import ListPageReceiptsRequest from '../model/ListPageReceiptsRequest';
import ListPageReceiptsResult from '../model/ListPageReceiptsResult';
import ListPageResolutionsRequest from '../model/ListPageResolutionsRequest';
import ListPageResolutionsResult from '../model/ListPageResolutionsResult';
import ListPagesByContactRequest from '../model/ListPagesByContactRequest';
import ListPagesByContactResult from '../model/ListPagesByContactResult';
import ListPagesByEngagementRequest from '../model/ListPagesByEngagementRequest';
import ListPagesByEngagementResult from '../model/ListPagesByEngagementResult';
import ListPreviewRotationShiftsRequest from '../model/ListPreviewRotationShiftsRequest';
import ListPreviewRotationShiftsResult from '../model/ListPreviewRotationShiftsResult';
import ListRotationOverridesRequest from '../model/ListRotationOverridesRequest';
import ListRotationOverridesResult from '../model/ListRotationOverridesResult';
import ListRotationShiftsRequest from '../model/ListRotationShiftsRequest';
import ListRotationShiftsResult from '../model/ListRotationShiftsResult';
import ListRotationsRequest from '../model/ListRotationsRequest';
import ListRotationsResult from '../model/ListRotationsResult';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResult from '../model/ListTagsForResourceResult';
import PutContactPolicyRequest from '../model/PutContactPolicyRequest';
import SendActivationCodeRequest from '../model/SendActivationCodeRequest';
import StartEngagementRequest from '../model/StartEngagementRequest';
import StartEngagementResult from '../model/StartEngagementResult';
import StopEngagementRequest from '../model/StopEngagementRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateContactChannelRequest from '../model/UpdateContactChannelRequest';
import UpdateContactRequest from '../model/UpdateContactRequest';
import UpdateRotationRequest from '../model/UpdateRotationRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-05-03
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptPage operation.
     * @callback module:api/DefaultApi~acceptPageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to acknowledge an engagement to a contact channel during an incident.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AcceptPageRequest} acceptPageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~acceptPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    acceptPage(xAmzTarget, acceptPageRequest, opts, callback) {
      opts = opts || {};
      let postBody = acceptPageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling acceptPage");
      }
      // verify the required parameter 'acceptPageRequest' is set
      if (acceptPageRequest === undefined || acceptPageRequest === null) {
        throw new Error("Missing the required parameter 'acceptPageRequest' when calling acceptPage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.AcceptPage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activateContactChannel operation.
     * @callback module:api/DefaultApi~activateContactChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates a contact's contact channel. Incident Manager can't engage a contact until the contact channel has been activated.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ActivateContactChannelRequest} activateContactChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~activateContactChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    activateContactChannel(xAmzTarget, activateContactChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = activateContactChannelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling activateContactChannel");
      }
      // verify the required parameter 'activateContactChannelRequest' is set
      if (activateContactChannelRequest === undefined || activateContactChannelRequest === null) {
        throw new Error("Missing the required parameter 'activateContactChannelRequest' when calling activateContactChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ActivateContactChannel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContact operation.
     * @callback module:api/DefaultApi~createContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateContactResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contacts are either the contacts that Incident Manager engages during an incident or the escalation plans that Incident Manager uses to engage contacts in phases during an incident.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateContactRequest} createContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateContactResult}
     */
    createContact(xAmzTarget, createContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = createContactRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createContact");
      }
      // verify the required parameter 'createContactRequest' is set
      if (createContactRequest === undefined || createContactRequest === null) {
        throw new Error("Missing the required parameter 'createContactRequest' when calling createContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateContactResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.CreateContact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createContactChannel operation.
     * @callback module:api/DefaultApi~createContactChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateContactChannelResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A contact channel is the method that Incident Manager uses to engage your contact.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateContactChannelRequest} createContactChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createContactChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateContactChannelResult}
     */
    createContactChannel(xAmzTarget, createContactChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createContactChannelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createContactChannel");
      }
      // verify the required parameter 'createContactChannelRequest' is set
      if (createContactChannelRequest === undefined || createContactChannelRequest === null) {
        throw new Error("Missing the required parameter 'createContactChannelRequest' when calling createContactChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateContactChannelResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.CreateContactChannel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRotation operation.
     * @callback module:api/DefaultApi~createRotationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRotationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a rotation in an on-call schedule.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateRotationRequest} createRotationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRotationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRotationResult}
     */
    createRotation(xAmzTarget, createRotationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRotationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createRotation");
      }
      // verify the required parameter 'createRotationRequest' is set
      if (createRotationRequest === undefined || createRotationRequest === null) {
        throw new Error("Missing the required parameter 'createRotationRequest' when calling createRotation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRotationResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.CreateRotation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRotationOverride operation.
     * @callback module:api/DefaultApi~createRotationOverrideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRotationOverrideResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an override for a rotation in an on-call schedule.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateRotationOverrideRequest} createRotationOverrideRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRotationOverrideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRotationOverrideResult}
     */
    createRotationOverride(xAmzTarget, createRotationOverrideRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRotationOverrideRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createRotationOverride");
      }
      // verify the required parameter 'createRotationOverrideRequest' is set
      if (createRotationOverrideRequest === undefined || createRotationOverrideRequest === null) {
        throw new Error("Missing the required parameter 'createRotationOverrideRequest' when calling createRotationOverride");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRotationOverrideResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.CreateRotationOverride', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateContactChannel operation.
     * @callback module:api/DefaultApi~deactivateContactChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * To no longer receive Incident Manager engagements to a contact channel, you can deactivate the channel.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeactivateContactChannelRequest} deactivateContactChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deactivateContactChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deactivateContactChannel(xAmzTarget, deactivateContactChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = deactivateContactChannelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deactivateContactChannel");
      }
      // verify the required parameter 'deactivateContactChannelRequest' is set
      if (deactivateContactChannelRequest === undefined || deactivateContactChannelRequest === null) {
        throw new Error("Missing the required parameter 'deactivateContactChannelRequest' when calling deactivateContactChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.DeactivateContactChannel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContact operation.
     * @callback module:api/DefaultApi~deleteContactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * To remove a contact from Incident Manager, you can delete the contact. Deleting a contact removes them from all escalation plans and related response plans. Deleting an escalation plan removes it from all related response plans. You will have to recreate the contact and its contact channels before you can use it again.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteContactRequest} deleteContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteContact(xAmzTarget, deleteContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteContactRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteContact");
      }
      // verify the required parameter 'deleteContactRequest' is set
      if (deleteContactRequest === undefined || deleteContactRequest === null) {
        throw new Error("Missing the required parameter 'deleteContactRequest' when calling deleteContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.DeleteContact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteContactChannel operation.
     * @callback module:api/DefaultApi~deleteContactChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * To no longer receive engagements on a contact channel, you can delete the channel from a contact. Deleting the contact channel removes it from the contact's engagement plan. If you delete the only contact channel for a contact, you won't be able to engage that contact during an incident.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteContactChannelRequest} deleteContactChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteContactChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteContactChannel(xAmzTarget, deleteContactChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteContactChannelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteContactChannel");
      }
      // verify the required parameter 'deleteContactChannelRequest' is set
      if (deleteContactChannelRequest === undefined || deleteContactChannelRequest === null) {
        throw new Error("Missing the required parameter 'deleteContactChannelRequest' when calling deleteContactChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.DeleteContactChannel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRotation operation.
     * @callback module:api/DefaultApi~deleteRotationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a rotation from the system. If a rotation belongs to more than one on-call schedule, this operation deletes it from all of them.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteRotationRequest} deleteRotationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRotationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRotation(xAmzTarget, deleteRotationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteRotationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteRotation");
      }
      // verify the required parameter 'deleteRotationRequest' is set
      if (deleteRotationRequest === undefined || deleteRotationRequest === null) {
        throw new Error("Missing the required parameter 'deleteRotationRequest' when calling deleteRotation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.DeleteRotation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRotationOverride operation.
     * @callback module:api/DefaultApi~deleteRotationOverrideCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing override for an on-call rotation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteRotationOverrideRequest} deleteRotationOverrideRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRotationOverrideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRotationOverride(xAmzTarget, deleteRotationOverrideRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteRotationOverrideRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteRotationOverride");
      }
      // verify the required parameter 'deleteRotationOverrideRequest' is set
      if (deleteRotationOverrideRequest === undefined || deleteRotationOverrideRequest === null) {
        throw new Error("Missing the required parameter 'deleteRotationOverrideRequest' when calling deleteRotationOverride");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.DeleteRotationOverride', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeEngagement operation.
     * @callback module:api/DefaultApi~describeEngagementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEngagementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Incident Manager uses engagements to engage contacts and escalation plans during an incident. Use this command to describe the engagement that occurred during an incident.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeEngagementRequest} describeEngagementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEngagementResult}
     */
    describeEngagement(xAmzTarget, describeEngagementRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeEngagementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeEngagement");
      }
      // verify the required parameter 'describeEngagementRequest' is set
      if (describeEngagementRequest === undefined || describeEngagementRequest === null) {
        throw new Error("Missing the required parameter 'describeEngagementRequest' when calling describeEngagement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeEngagementResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.DescribeEngagement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePage operation.
     * @callback module:api/DefaultApi~describePageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists details of the engagement to a contact channel.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePageRequest} describePageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePageResult}
     */
    describePage(xAmzTarget, describePageRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePage");
      }
      // verify the required parameter 'describePageRequest' is set
      if (describePageRequest === undefined || describePageRequest === null) {
        throw new Error("Missing the required parameter 'describePageRequest' when calling describePage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePageResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.DescribePage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContact operation.
     * @callback module:api/DefaultApi~getContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContactResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the specified contact or escalation plan.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetContactRequest} getContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContactResult}
     */
    getContact(xAmzTarget, getContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = getContactRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getContact");
      }
      // verify the required parameter 'getContactRequest' is set
      if (getContactRequest === undefined || getContactRequest === null) {
        throw new Error("Missing the required parameter 'getContactRequest' when calling getContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetContactResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.GetContact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactChannel operation.
     * @callback module:api/DefaultApi~getContactChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContactChannelResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List details about a specific contact channel.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetContactChannelRequest} getContactChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getContactChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContactChannelResult}
     */
    getContactChannel(xAmzTarget, getContactChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = getContactChannelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getContactChannel");
      }
      // verify the required parameter 'getContactChannelRequest' is set
      if (getContactChannelRequest === undefined || getContactChannelRequest === null) {
        throw new Error("Missing the required parameter 'getContactChannelRequest' when calling getContactChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetContactChannelResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.GetContactChannel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactPolicy operation.
     * @callback module:api/DefaultApi~getContactPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContactPolicyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the resource policies attached to the specified contact or escalation plan.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetContactPolicyRequest} getContactPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getContactPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContactPolicyResult}
     */
    getContactPolicy(xAmzTarget, getContactPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getContactPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getContactPolicy");
      }
      // verify the required parameter 'getContactPolicyRequest' is set
      if (getContactPolicyRequest === undefined || getContactPolicyRequest === null) {
        throw new Error("Missing the required parameter 'getContactPolicyRequest' when calling getContactPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetContactPolicyResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.GetContactPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRotation operation.
     * @callback module:api/DefaultApi~getRotationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRotationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about an on-call rotation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetRotationRequest} getRotationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRotationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRotationResult}
     */
    getRotation(xAmzTarget, getRotationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getRotationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getRotation");
      }
      // verify the required parameter 'getRotationRequest' is set
      if (getRotationRequest === undefined || getRotationRequest === null) {
        throw new Error("Missing the required parameter 'getRotationRequest' when calling getRotation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRotationResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.GetRotation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRotationOverride operation.
     * @callback module:api/DefaultApi~getRotationOverrideCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRotationOverrideResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about an override to an on-call rotation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetRotationOverrideRequest} getRotationOverrideRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRotationOverrideCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRotationOverrideResult}
     */
    getRotationOverride(xAmzTarget, getRotationOverrideRequest, opts, callback) {
      opts = opts || {};
      let postBody = getRotationOverrideRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getRotationOverride");
      }
      // verify the required parameter 'getRotationOverrideRequest' is set
      if (getRotationOverrideRequest === undefined || getRotationOverrideRequest === null) {
        throw new Error("Missing the required parameter 'getRotationOverrideRequest' when calling getRotationOverride");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRotationOverrideResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.GetRotationOverride', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listContactChannels operation.
     * @callback module:api/DefaultApi~listContactChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContactChannelsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all contact channels for the specified contact.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListContactChannelsRequest} listContactChannelsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listContactChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContactChannelsResult}
     */
    listContactChannels(xAmzTarget, listContactChannelsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listContactChannelsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listContactChannels");
      }
      // verify the required parameter 'listContactChannelsRequest' is set
      if (listContactChannelsRequest === undefined || listContactChannelsRequest === null) {
        throw new Error("Missing the required parameter 'listContactChannelsRequest' when calling listContactChannels");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListContactChannelsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ListContactChannels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listContacts operation.
     * @callback module:api/DefaultApi~listContactsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListContactsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all contacts and escalation plans in Incident Manager.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListContactsRequest} listContactsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListContactsResult}
     */
    listContacts(xAmzTarget, listContactsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listContactsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listContacts");
      }
      // verify the required parameter 'listContactsRequest' is set
      if (listContactsRequest === undefined || listContactsRequest === null) {
        throw new Error("Missing the required parameter 'listContactsRequest' when calling listContacts");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListContactsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ListContacts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEngagements operation.
     * @callback module:api/DefaultApi~listEngagementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEngagementsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all engagements that have happened in an incident.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListEngagementsRequest} listEngagementsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listEngagementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEngagementsResult}
     */
    listEngagements(xAmzTarget, listEngagementsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listEngagementsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listEngagements");
      }
      // verify the required parameter 'listEngagementsRequest' is set
      if (listEngagementsRequest === undefined || listEngagementsRequest === null) {
        throw new Error("Missing the required parameter 'listEngagementsRequest' when calling listEngagements");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListEngagementsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ListEngagements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPageReceipts operation.
     * @callback module:api/DefaultApi~listPageReceiptsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPageReceiptsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the engagements to contact channels that have been acknowledged.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPageReceiptsRequest} listPageReceiptsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPageReceiptsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPageReceiptsResult}
     */
    listPageReceipts(xAmzTarget, listPageReceiptsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPageReceiptsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPageReceipts");
      }
      // verify the required parameter 'listPageReceiptsRequest' is set
      if (listPageReceiptsRequest === undefined || listPageReceiptsRequest === null) {
        throw new Error("Missing the required parameter 'listPageReceiptsRequest' when calling listPageReceipts");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPageReceiptsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ListPageReceipts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPageResolutions operation.
     * @callback module:api/DefaultApi~listPageResolutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPageResolutionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the resolution path of an engagement. For example, the escalation plan engaged in an incident might target an on-call schedule that includes several contacts in a rotation, but just one contact on-call when the incident starts. The resolution path indicates the hierarchy of <i>escalation plan &gt; on-call schedule &gt; contact</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPageResolutionsRequest} listPageResolutionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPageResolutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPageResolutionsResult}
     */
    listPageResolutions(xAmzTarget, listPageResolutionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPageResolutionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPageResolutions");
      }
      // verify the required parameter 'listPageResolutionsRequest' is set
      if (listPageResolutionsRequest === undefined || listPageResolutionsRequest === null) {
        throw new Error("Missing the required parameter 'listPageResolutionsRequest' when calling listPageResolutions");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPageResolutionsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ListPageResolutions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPagesByContact operation.
     * @callback module:api/DefaultApi~listPagesByContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPagesByContactResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the engagements to a contact's contact channels.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPagesByContactRequest} listPagesByContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPagesByContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPagesByContactResult}
     */
    listPagesByContact(xAmzTarget, listPagesByContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPagesByContactRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPagesByContact");
      }
      // verify the required parameter 'listPagesByContactRequest' is set
      if (listPagesByContactRequest === undefined || listPagesByContactRequest === null) {
        throw new Error("Missing the required parameter 'listPagesByContactRequest' when calling listPagesByContact");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPagesByContactResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ListPagesByContact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPagesByEngagement operation.
     * @callback module:api/DefaultApi~listPagesByEngagementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPagesByEngagementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the engagements to contact channels that occurred by engaging a contact.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPagesByEngagementRequest} listPagesByEngagementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPagesByEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPagesByEngagementResult}
     */
    listPagesByEngagement(xAmzTarget, listPagesByEngagementRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPagesByEngagementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPagesByEngagement");
      }
      // verify the required parameter 'listPagesByEngagementRequest' is set
      if (listPagesByEngagementRequest === undefined || listPagesByEngagementRequest === null) {
        throw new Error("Missing the required parameter 'listPagesByEngagementRequest' when calling listPagesByEngagement");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPagesByEngagementResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ListPagesByEngagement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPreviewRotationShifts operation.
     * @callback module:api/DefaultApi~listPreviewRotationShiftsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPreviewRotationShiftsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of shifts based on rotation configuration parameters.</p> <note> <p>The Incident Manager primarily uses this operation to populate the <b>Preview</b> calendar. It is not typically run by end users.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPreviewRotationShiftsRequest} listPreviewRotationShiftsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPreviewRotationShiftsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPreviewRotationShiftsResult}
     */
    listPreviewRotationShifts(xAmzTarget, listPreviewRotationShiftsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPreviewRotationShiftsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPreviewRotationShifts");
      }
      // verify the required parameter 'listPreviewRotationShiftsRequest' is set
      if (listPreviewRotationShiftsRequest === undefined || listPreviewRotationShiftsRequest === null) {
        throw new Error("Missing the required parameter 'listPreviewRotationShiftsRequest' when calling listPreviewRotationShifts");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPreviewRotationShiftsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ListPreviewRotationShifts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRotationOverrides operation.
     * @callback module:api/DefaultApi~listRotationOverridesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRotationOverridesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of overrides currently specified for an on-call rotation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListRotationOverridesRequest} listRotationOverridesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listRotationOverridesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRotationOverridesResult}
     */
    listRotationOverrides(xAmzTarget, listRotationOverridesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRotationOverridesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listRotationOverrides");
      }
      // verify the required parameter 'listRotationOverridesRequest' is set
      if (listRotationOverridesRequest === undefined || listRotationOverridesRequest === null) {
        throw new Error("Missing the required parameter 'listRotationOverridesRequest' when calling listRotationOverrides");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRotationOverridesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ListRotationOverrides', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRotationShifts operation.
     * @callback module:api/DefaultApi~listRotationShiftsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRotationShiftsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of shifts generated by an existing rotation in the system.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListRotationShiftsRequest} listRotationShiftsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listRotationShiftsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRotationShiftsResult}
     */
    listRotationShifts(xAmzTarget, listRotationShiftsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRotationShiftsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listRotationShifts");
      }
      // verify the required parameter 'listRotationShiftsRequest' is set
      if (listRotationShiftsRequest === undefined || listRotationShiftsRequest === null) {
        throw new Error("Missing the required parameter 'listRotationShiftsRequest' when calling listRotationShifts");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRotationShiftsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ListRotationShifts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRotations operation.
     * @callback module:api/DefaultApi~listRotationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRotationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of on-call rotations.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListRotationsRequest} listRotationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listRotationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRotationsResult}
     */
    listRotations(xAmzTarget, listRotationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRotationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listRotations");
      }
      // verify the required parameter 'listRotationsRequest' is set
      if (listRotationsRequest === undefined || listRotationsRequest === null) {
        throw new Error("Missing the required parameter 'listRotationsRequest' when calling listRotations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRotationsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ListRotations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags of an escalation plan or contact.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResult}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putContactPolicy operation.
     * @callback module:api/DefaultApi~putContactPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a resource policy to the specified contact or escalation plan. The resource policy is used to share the contact or escalation plan using Resource Access Manager (RAM). For more information about cross-account sharing, see <a href=\"https://docs.aws.amazon.com/incident-manager/latest/userguide/xa.html\">Setting up cross-account functionality</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutContactPolicyRequest} putContactPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putContactPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putContactPolicy(xAmzTarget, putContactPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putContactPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putContactPolicy");
      }
      // verify the required parameter 'putContactPolicyRequest' is set
      if (putContactPolicyRequest === undefined || putContactPolicyRequest === null) {
        throw new Error("Missing the required parameter 'putContactPolicyRequest' when calling putContactPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.PutContactPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendActivationCode operation.
     * @callback module:api/DefaultApi~sendActivationCodeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends an activation code to a contact channel. The contact can use this code to activate the contact channel in the console or with the <code>ActivateChannel</code> operation. Incident Manager can't engage a contact channel until it has been activated.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SendActivationCodeRequest} sendActivationCodeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendActivationCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sendActivationCode(xAmzTarget, sendActivationCodeRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendActivationCodeRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling sendActivationCode");
      }
      // verify the required parameter 'sendActivationCodeRequest' is set
      if (sendActivationCodeRequest === undefined || sendActivationCodeRequest === null) {
        throw new Error("Missing the required parameter 'sendActivationCodeRequest' when calling sendActivationCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.SendActivationCode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startEngagement operation.
     * @callback module:api/DefaultApi~startEngagementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartEngagementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an engagement to a contact or escalation plan. The engagement engages each contact specified in the incident.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartEngagementRequest} startEngagementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartEngagementResult}
     */
    startEngagement(xAmzTarget, startEngagementRequest, opts, callback) {
      opts = opts || {};
      let postBody = startEngagementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startEngagement");
      }
      // verify the required parameter 'startEngagementRequest' is set
      if (startEngagementRequest === undefined || startEngagementRequest === null) {
        throw new Error("Missing the required parameter 'startEngagementRequest' when calling startEngagement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartEngagementResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.StartEngagement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopEngagement operation.
     * @callback module:api/DefaultApi~stopEngagementCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an engagement before it finishes the final stage of the escalation plan or engagement plan. Further contacts aren't engaged.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopEngagementRequest} stopEngagementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopEngagement(xAmzTarget, stopEngagementRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopEngagementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopEngagement");
      }
      // verify the required parameter 'stopEngagementRequest' is set
      if (stopEngagementRequest === undefined || stopEngagementRequest === null) {
        throw new Error("Missing the required parameter 'stopEngagementRequest' when calling stopEngagement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.StopEngagement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tags a contact or escalation plan. You can tag only contacts and escalation plans in the first region of your replication set.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes tags from the specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContact operation.
     * @callback module:api/DefaultApi~updateContactCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the contact or escalation plan specified.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateContactRequest} updateContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateContact(xAmzTarget, updateContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateContact");
      }
      // verify the required parameter 'updateContactRequest' is set
      if (updateContactRequest === undefined || updateContactRequest === null) {
        throw new Error("Missing the required parameter 'updateContactRequest' when calling updateContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.UpdateContact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateContactChannel operation.
     * @callback module:api/DefaultApi~updateContactChannelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a contact's contact channel.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateContactChannelRequest} updateContactChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateContactChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateContactChannel(xAmzTarget, updateContactChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateContactChannelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateContactChannel");
      }
      // verify the required parameter 'updateContactChannelRequest' is set
      if (updateContactChannelRequest === undefined || updateContactChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateContactChannelRequest' when calling updateContactChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.UpdateContactChannel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRotation operation.
     * @callback module:api/DefaultApi~updateRotationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the information specified for an on-call rotation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateRotationRequest} updateRotationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRotationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateRotation(xAmzTarget, updateRotationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRotationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateRotation");
      }
      // verify the required parameter 'updateRotationRequest' is set
      if (updateRotationRequest === undefined || updateRotationRequest === null) {
        throw new Error("Missing the required parameter 'updateRotationRequest' when calling updateRotation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SSMContacts.UpdateRotation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
