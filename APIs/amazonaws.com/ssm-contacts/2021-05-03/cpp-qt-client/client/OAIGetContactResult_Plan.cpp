/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetContactResult_Plan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetContactResult_Plan::OAIGetContactResult_Plan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetContactResult_Plan::OAIGetContactResult_Plan() {
    this->initializeModel();
}

OAIGetContactResult_Plan::~OAIGetContactResult_Plan() {}

void OAIGetContactResult_Plan::initializeModel() {

    m_stages_isSet = false;
    m_stages_isValid = false;

    m_rotation_ids_isSet = false;
    m_rotation_ids_isValid = false;
}

void OAIGetContactResult_Plan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetContactResult_Plan::fromJsonObject(QJsonObject json) {

    m_stages_isValid = ::OpenAPI::fromJsonValue(m_stages, json[QString("Stages")]);
    m_stages_isSet = !json[QString("Stages")].isNull() && m_stages_isValid;

    m_rotation_ids_isValid = ::OpenAPI::fromJsonValue(m_rotation_ids, json[QString("RotationIds")]);
    m_rotation_ids_isSet = !json[QString("RotationIds")].isNull() && m_rotation_ids_isValid;
}

QString OAIGetContactResult_Plan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetContactResult_Plan::asJsonObject() const {
    QJsonObject obj;
    if (m_stages.isSet()) {
        obj.insert(QString("Stages"), ::OpenAPI::toJsonValue(m_stages));
    }
    if (m_rotation_ids.isSet()) {
        obj.insert(QString("RotationIds"), ::OpenAPI::toJsonValue(m_rotation_ids));
    }
    return obj;
}

QList OAIGetContactResult_Plan::getStages() const {
    return m_stages;
}
void OAIGetContactResult_Plan::setStages(const QList &stages) {
    m_stages = stages;
    m_stages_isSet = true;
}

bool OAIGetContactResult_Plan::is_stages_Set() const{
    return m_stages_isSet;
}

bool OAIGetContactResult_Plan::is_stages_Valid() const{
    return m_stages_isValid;
}

QList OAIGetContactResult_Plan::getRotationIds() const {
    return m_rotation_ids;
}
void OAIGetContactResult_Plan::setRotationIds(const QList &rotation_ids) {
    m_rotation_ids = rotation_ids;
    m_rotation_ids_isSet = true;
}

bool OAIGetContactResult_Plan::is_rotation_ids_Set() const{
    return m_rotation_ids_isSet;
}

bool OAIGetContactResult_Plan::is_rotation_ids_Valid() const{
    return m_rotation_ids_isValid;
}

bool OAIGetContactResult_Plan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetContactResult_Plan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
