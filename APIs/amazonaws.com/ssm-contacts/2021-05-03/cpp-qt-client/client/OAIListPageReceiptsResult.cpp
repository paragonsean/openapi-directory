/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPageReceiptsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPageReceiptsResult::OAIListPageReceiptsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPageReceiptsResult::OAIListPageReceiptsResult() {
    this->initializeModel();
}

OAIListPageReceiptsResult::~OAIListPageReceiptsResult() {}

void OAIListPageReceiptsResult::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_receipts_isSet = false;
    m_receipts_isValid = false;
}

void OAIListPageReceiptsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPageReceiptsResult::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_receipts_isValid = ::OpenAPI::fromJsonValue(m_receipts, json[QString("Receipts")]);
    m_receipts_isSet = !json[QString("Receipts")].isNull() && m_receipts_isValid;
}

QString OAIListPageReceiptsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPageReceiptsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_receipts.isSet()) {
        obj.insert(QString("Receipts"), ::OpenAPI::toJsonValue(m_receipts));
    }
    return obj;
}

QString OAIListPageReceiptsResult::getNextToken() const {
    return m_next_token;
}
void OAIListPageReceiptsResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPageReceiptsResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPageReceiptsResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListPageReceiptsResult::getReceipts() const {
    return m_receipts;
}
void OAIListPageReceiptsResult::setReceipts(const QList &receipts) {
    m_receipts = receipts;
    m_receipts_isSet = true;
}

bool OAIListPageReceiptsResult::is_receipts_Set() const{
    return m_receipts_isSet;
}

bool OAIListPageReceiptsResult::is_receipts_Valid() const{
    return m_receipts_isValid;
}

bool OAIListPageReceiptsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPageReceiptsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
