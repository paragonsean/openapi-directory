/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRotationShift_ShiftDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRotationShift_ShiftDetails::OAIRotationShift_ShiftDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRotationShift_ShiftDetails::OAIRotationShift_ShiftDetails() {
    this->initializeModel();
}

OAIRotationShift_ShiftDetails::~OAIRotationShift_ShiftDetails() {}

void OAIRotationShift_ShiftDetails::initializeModel() {

    m_overridden_contact_ids_isSet = false;
    m_overridden_contact_ids_isValid = false;
}

void OAIRotationShift_ShiftDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRotationShift_ShiftDetails::fromJsonObject(QJsonObject json) {

    m_overridden_contact_ids_isValid = ::OpenAPI::fromJsonValue(m_overridden_contact_ids, json[QString("OverriddenContactIds")]);
    m_overridden_contact_ids_isSet = !json[QString("OverriddenContactIds")].isNull() && m_overridden_contact_ids_isValid;
}

QString OAIRotationShift_ShiftDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRotationShift_ShiftDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_overridden_contact_ids.isSet()) {
        obj.insert(QString("OverriddenContactIds"), ::OpenAPI::toJsonValue(m_overridden_contact_ids));
    }
    return obj;
}

QList OAIRotationShift_ShiftDetails::getOverriddenContactIds() const {
    return m_overridden_contact_ids;
}
void OAIRotationShift_ShiftDetails::setOverriddenContactIds(const QList &overridden_contact_ids) {
    m_overridden_contact_ids = overridden_contact_ids;
    m_overridden_contact_ids_isSet = true;
}

bool OAIRotationShift_ShiftDetails::is_overridden_contact_ids_Set() const{
    return m_overridden_contact_ids_isSet;
}

bool OAIRotationShift_ShiftDetails::is_overridden_contact_ids_Valid() const{
    return m_overridden_contact_ids_isValid;
}

bool OAIRotationShift_ShiftDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_overridden_contact_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRotationShift_ShiftDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_overridden_contact_ids_isValid && true;
}

} // namespace OpenAPI
