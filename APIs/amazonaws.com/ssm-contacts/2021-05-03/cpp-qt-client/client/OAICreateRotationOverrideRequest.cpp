/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRotationOverrideRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRotationOverrideRequest::OAICreateRotationOverrideRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRotationOverrideRequest::OAICreateRotationOverrideRequest() {
    this->initializeModel();
}

OAICreateRotationOverrideRequest::~OAICreateRotationOverrideRequest() {}

void OAICreateRotationOverrideRequest::initializeModel() {

    m_rotation_id_isSet = false;
    m_rotation_id_isValid = false;

    m_new_contact_ids_isSet = false;
    m_new_contact_ids_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAICreateRotationOverrideRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRotationOverrideRequest::fromJsonObject(QJsonObject json) {

    m_rotation_id_isValid = ::OpenAPI::fromJsonValue(m_rotation_id, json[QString("RotationId")]);
    m_rotation_id_isSet = !json[QString("RotationId")].isNull() && m_rotation_id_isValid;

    m_new_contact_ids_isValid = ::OpenAPI::fromJsonValue(m_new_contact_ids, json[QString("NewContactIds")]);
    m_new_contact_ids_isSet = !json[QString("NewContactIds")].isNull() && m_new_contact_ids_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAICreateRotationOverrideRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRotationOverrideRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_rotation_id_isSet) {
        obj.insert(QString("RotationId"), ::OpenAPI::toJsonValue(m_rotation_id));
    }
    if (m_new_contact_ids.isSet()) {
        obj.insert(QString("NewContactIds"), ::OpenAPI::toJsonValue(m_new_contact_ids));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAICreateRotationOverrideRequest::getRotationId() const {
    return m_rotation_id;
}
void OAICreateRotationOverrideRequest::setRotationId(const QString &rotation_id) {
    m_rotation_id = rotation_id;
    m_rotation_id_isSet = true;
}

bool OAICreateRotationOverrideRequest::is_rotation_id_Set() const{
    return m_rotation_id_isSet;
}

bool OAICreateRotationOverrideRequest::is_rotation_id_Valid() const{
    return m_rotation_id_isValid;
}

QList OAICreateRotationOverrideRequest::getNewContactIds() const {
    return m_new_contact_ids;
}
void OAICreateRotationOverrideRequest::setNewContactIds(const QList &new_contact_ids) {
    m_new_contact_ids = new_contact_ids;
    m_new_contact_ids_isSet = true;
}

bool OAICreateRotationOverrideRequest::is_new_contact_ids_Set() const{
    return m_new_contact_ids_isSet;
}

bool OAICreateRotationOverrideRequest::is_new_contact_ids_Valid() const{
    return m_new_contact_ids_isValid;
}

QDateTime OAICreateRotationOverrideRequest::getStartTime() const {
    return m_start_time;
}
void OAICreateRotationOverrideRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICreateRotationOverrideRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICreateRotationOverrideRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAICreateRotationOverrideRequest::getEndTime() const {
    return m_end_time;
}
void OAICreateRotationOverrideRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICreateRotationOverrideRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICreateRotationOverrideRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAICreateRotationOverrideRequest::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAICreateRotationOverrideRequest::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAICreateRotationOverrideRequest::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAICreateRotationOverrideRequest::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAICreateRotationOverrideRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rotation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_contact_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRotationOverrideRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rotation_id_isValid && m_new_contact_ids_isValid && m_start_time_isValid && m_end_time_isValid && true;
}

} // namespace OpenAPI
