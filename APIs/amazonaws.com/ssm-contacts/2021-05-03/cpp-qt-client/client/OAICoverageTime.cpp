/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoverageTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoverageTime::OAICoverageTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoverageTime::OAICoverageTime() {
    this->initializeModel();
}

OAICoverageTime::~OAICoverageTime() {}

void OAICoverageTime::initializeModel() {

    m_start_isSet = false;
    m_start_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;
}

void OAICoverageTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoverageTime::fromJsonObject(QJsonObject json) {

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("Start")]);
    m_start_isSet = !json[QString("Start")].isNull() && m_start_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("End")]);
    m_end_isSet = !json[QString("End")].isNull() && m_end_isValid;
}

QString OAICoverageTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoverageTime::asJsonObject() const {
    QJsonObject obj;
    if (m_start.isSet()) {
        obj.insert(QString("Start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_end.isSet()) {
        obj.insert(QString("End"), ::OpenAPI::toJsonValue(m_end));
    }
    return obj;
}

OAICoverageTime_Start OAICoverageTime::getStart() const {
    return m_start;
}
void OAICoverageTime::setStart(const OAICoverageTime_Start &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAICoverageTime::is_start_Set() const{
    return m_start_isSet;
}

bool OAICoverageTime::is_start_Valid() const{
    return m_start_isValid;
}

OAICoverageTime_End OAICoverageTime::getEnd() const {
    return m_end;
}
void OAICoverageTime::setEnd(const OAICoverageTime_End &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAICoverageTime::is_end_Set() const{
    return m_end_isSet;
}

bool OAICoverageTime::is_end_Valid() const{
    return m_end_isValid;
}

bool OAICoverageTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoverageTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
