/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceipt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceipt::OAIReceipt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceipt::OAIReceipt() {
    this->initializeModel();
}

OAIReceipt::~OAIReceipt() {}

void OAIReceipt::initializeModel() {

    m_contact_channel_arn_isSet = false;
    m_contact_channel_arn_isValid = false;

    m_receipt_type_isSet = false;
    m_receipt_type_isValid = false;

    m_receipt_info_isSet = false;
    m_receipt_info_isValid = false;

    m_receipt_time_isSet = false;
    m_receipt_time_isValid = false;
}

void OAIReceipt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceipt::fromJsonObject(QJsonObject json) {

    m_contact_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_contact_channel_arn, json[QString("ContactChannelArn")]);
    m_contact_channel_arn_isSet = !json[QString("ContactChannelArn")].isNull() && m_contact_channel_arn_isValid;

    m_receipt_type_isValid = ::OpenAPI::fromJsonValue(m_receipt_type, json[QString("ReceiptType")]);
    m_receipt_type_isSet = !json[QString("ReceiptType")].isNull() && m_receipt_type_isValid;

    m_receipt_info_isValid = ::OpenAPI::fromJsonValue(m_receipt_info, json[QString("ReceiptInfo")]);
    m_receipt_info_isSet = !json[QString("ReceiptInfo")].isNull() && m_receipt_info_isValid;

    m_receipt_time_isValid = ::OpenAPI::fromJsonValue(m_receipt_time, json[QString("ReceiptTime")]);
    m_receipt_time_isSet = !json[QString("ReceiptTime")].isNull() && m_receipt_time_isValid;
}

QString OAIReceipt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceipt::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_channel_arn_isSet) {
        obj.insert(QString("ContactChannelArn"), ::OpenAPI::toJsonValue(m_contact_channel_arn));
    }
    if (m_receipt_type.isSet()) {
        obj.insert(QString("ReceiptType"), ::OpenAPI::toJsonValue(m_receipt_type));
    }
    if (m_receipt_info_isSet) {
        obj.insert(QString("ReceiptInfo"), ::OpenAPI::toJsonValue(m_receipt_info));
    }
    if (m_receipt_time_isSet) {
        obj.insert(QString("ReceiptTime"), ::OpenAPI::toJsonValue(m_receipt_time));
    }
    return obj;
}

QString OAIReceipt::getContactChannelArn() const {
    return m_contact_channel_arn;
}
void OAIReceipt::setContactChannelArn(const QString &contact_channel_arn) {
    m_contact_channel_arn = contact_channel_arn;
    m_contact_channel_arn_isSet = true;
}

bool OAIReceipt::is_contact_channel_arn_Set() const{
    return m_contact_channel_arn_isSet;
}

bool OAIReceipt::is_contact_channel_arn_Valid() const{
    return m_contact_channel_arn_isValid;
}

OAIReceiptType OAIReceipt::getReceiptType() const {
    return m_receipt_type;
}
void OAIReceipt::setReceiptType(const OAIReceiptType &receipt_type) {
    m_receipt_type = receipt_type;
    m_receipt_type_isSet = true;
}

bool OAIReceipt::is_receipt_type_Set() const{
    return m_receipt_type_isSet;
}

bool OAIReceipt::is_receipt_type_Valid() const{
    return m_receipt_type_isValid;
}

QString OAIReceipt::getReceiptInfo() const {
    return m_receipt_info;
}
void OAIReceipt::setReceiptInfo(const QString &receipt_info) {
    m_receipt_info = receipt_info;
    m_receipt_info_isSet = true;
}

bool OAIReceipt::is_receipt_info_Set() const{
    return m_receipt_info_isSet;
}

bool OAIReceipt::is_receipt_info_Valid() const{
    return m_receipt_info_isValid;
}

QDateTime OAIReceipt::getReceiptTime() const {
    return m_receipt_time;
}
void OAIReceipt::setReceiptTime(const QDateTime &receipt_time) {
    m_receipt_time = receipt_time;
    m_receipt_time_isSet = true;
}

bool OAIReceipt::is_receipt_time_Set() const{
    return m_receipt_time_isSet;
}

bool OAIReceipt::is_receipt_time_Valid() const{
    return m_receipt_time_isValid;
}

bool OAIReceipt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceipt::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_receipt_type_isValid && m_receipt_time_isValid && true;
}

} // namespace OpenAPI
