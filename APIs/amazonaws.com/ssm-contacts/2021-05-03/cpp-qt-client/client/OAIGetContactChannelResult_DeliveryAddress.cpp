/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetContactChannelResult_DeliveryAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetContactChannelResult_DeliveryAddress::OAIGetContactChannelResult_DeliveryAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetContactChannelResult_DeliveryAddress::OAIGetContactChannelResult_DeliveryAddress() {
    this->initializeModel();
}

OAIGetContactChannelResult_DeliveryAddress::~OAIGetContactChannelResult_DeliveryAddress() {}

void OAIGetContactChannelResult_DeliveryAddress::initializeModel() {

    m_simple_address_isSet = false;
    m_simple_address_isValid = false;
}

void OAIGetContactChannelResult_DeliveryAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetContactChannelResult_DeliveryAddress::fromJsonObject(QJsonObject json) {

    m_simple_address_isValid = ::OpenAPI::fromJsonValue(m_simple_address, json[QString("SimpleAddress")]);
    m_simple_address_isSet = !json[QString("SimpleAddress")].isNull() && m_simple_address_isValid;
}

QString OAIGetContactChannelResult_DeliveryAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetContactChannelResult_DeliveryAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_simple_address_isSet) {
        obj.insert(QString("SimpleAddress"), ::OpenAPI::toJsonValue(m_simple_address));
    }
    return obj;
}

QString OAIGetContactChannelResult_DeliveryAddress::getSimpleAddress() const {
    return m_simple_address;
}
void OAIGetContactChannelResult_DeliveryAddress::setSimpleAddress(const QString &simple_address) {
    m_simple_address = simple_address;
    m_simple_address_isSet = true;
}

bool OAIGetContactChannelResult_DeliveryAddress::is_simple_address_Set() const{
    return m_simple_address_isSet;
}

bool OAIGetContactChannelResult_DeliveryAddress::is_simple_address_Valid() const{
    return m_simple_address_isValid;
}

bool OAIGetContactChannelResult_DeliveryAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_simple_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetContactChannelResult_DeliveryAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
