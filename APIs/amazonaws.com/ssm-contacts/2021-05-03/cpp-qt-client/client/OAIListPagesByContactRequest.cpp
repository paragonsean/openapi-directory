/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPagesByContactRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPagesByContactRequest::OAIListPagesByContactRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPagesByContactRequest::OAIListPagesByContactRequest() {
    this->initializeModel();
}

OAIListPagesByContactRequest::~OAIListPagesByContactRequest() {}

void OAIListPagesByContactRequest::initializeModel() {

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListPagesByContactRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPagesByContactRequest::fromJsonObject(QJsonObject json) {

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListPagesByContactRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPagesByContactRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListPagesByContactRequest::getContactId() const {
    return m_contact_id;
}
void OAIListPagesByContactRequest::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAIListPagesByContactRequest::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAIListPagesByContactRequest::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAIListPagesByContactRequest::getNextToken() const {
    return m_next_token;
}
void OAIListPagesByContactRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPagesByContactRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPagesByContactRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListPagesByContactRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListPagesByContactRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListPagesByContactRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListPagesByContactRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListPagesByContactRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPagesByContactRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_id_isValid && true;
}

} // namespace OpenAPI
