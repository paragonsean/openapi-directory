/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPageResolutionsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPageResolutionsResult::OAIListPageResolutionsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPageResolutionsResult::OAIListPageResolutionsResult() {
    this->initializeModel();
}

OAIListPageResolutionsResult::~OAIListPageResolutionsResult() {}

void OAIListPageResolutionsResult::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_page_resolutions_isSet = false;
    m_page_resolutions_isValid = false;
}

void OAIListPageResolutionsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPageResolutionsResult::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_page_resolutions_isValid = ::OpenAPI::fromJsonValue(m_page_resolutions, json[QString("PageResolutions")]);
    m_page_resolutions_isSet = !json[QString("PageResolutions")].isNull() && m_page_resolutions_isValid;
}

QString OAIListPageResolutionsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPageResolutionsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_page_resolutions.isSet()) {
        obj.insert(QString("PageResolutions"), ::OpenAPI::toJsonValue(m_page_resolutions));
    }
    return obj;
}

QString OAIListPageResolutionsResult::getNextToken() const {
    return m_next_token;
}
void OAIListPageResolutionsResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPageResolutionsResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPageResolutionsResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListPageResolutionsResult::getPageResolutions() const {
    return m_page_resolutions;
}
void OAIListPageResolutionsResult::setPageResolutions(const QList &page_resolutions) {
    m_page_resolutions = page_resolutions;
    m_page_resolutions_isSet = true;
}

bool OAIListPageResolutionsResult::is_page_resolutions_Set() const{
    return m_page_resolutions_isSet;
}

bool OAIListPageResolutionsResult::is_page_resolutions_Valid() const{
    return m_page_resolutions_isValid;
}

bool OAIListPageResolutionsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_resolutions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPageResolutionsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_page_resolutions_isValid && true;
}

} // namespace OpenAPI
