/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateContactChannelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateContactChannelRequest::OAICreateContactChannelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateContactChannelRequest::OAICreateContactChannelRequest() {
    this->initializeModel();
}

OAICreateContactChannelRequest::~OAICreateContactChannelRequest() {}

void OAICreateContactChannelRequest::initializeModel() {

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_delivery_address_isSet = false;
    m_delivery_address_isValid = false;

    m_defer_activation_isSet = false;
    m_defer_activation_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAICreateContactChannelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateContactChannelRequest::fromJsonObject(QJsonObject json) {

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_delivery_address_isValid = ::OpenAPI::fromJsonValue(m_delivery_address, json[QString("DeliveryAddress")]);
    m_delivery_address_isSet = !json[QString("DeliveryAddress")].isNull() && m_delivery_address_isValid;

    m_defer_activation_isValid = ::OpenAPI::fromJsonValue(m_defer_activation, json[QString("DeferActivation")]);
    m_defer_activation_isSet = !json[QString("DeferActivation")].isNull() && m_defer_activation_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAICreateContactChannelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateContactChannelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_delivery_address.isSet()) {
        obj.insert(QString("DeliveryAddress"), ::OpenAPI::toJsonValue(m_delivery_address));
    }
    if (m_defer_activation_isSet) {
        obj.insert(QString("DeferActivation"), ::OpenAPI::toJsonValue(m_defer_activation));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAICreateContactChannelRequest::getContactId() const {
    return m_contact_id;
}
void OAICreateContactChannelRequest::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAICreateContactChannelRequest::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAICreateContactChannelRequest::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAICreateContactChannelRequest::getName() const {
    return m_name;
}
void OAICreateContactChannelRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateContactChannelRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateContactChannelRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIChannelType OAICreateContactChannelRequest::getType() const {
    return m_type;
}
void OAICreateContactChannelRequest::setType(const OAIChannelType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateContactChannelRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateContactChannelRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAICreateContactChannelRequest_DeliveryAddress OAICreateContactChannelRequest::getDeliveryAddress() const {
    return m_delivery_address;
}
void OAICreateContactChannelRequest::setDeliveryAddress(const OAICreateContactChannelRequest_DeliveryAddress &delivery_address) {
    m_delivery_address = delivery_address;
    m_delivery_address_isSet = true;
}

bool OAICreateContactChannelRequest::is_delivery_address_Set() const{
    return m_delivery_address_isSet;
}

bool OAICreateContactChannelRequest::is_delivery_address_Valid() const{
    return m_delivery_address_isValid;
}

bool OAICreateContactChannelRequest::getDeferActivation() const {
    return m_defer_activation;
}
void OAICreateContactChannelRequest::setDeferActivation(const bool &defer_activation) {
    m_defer_activation = defer_activation;
    m_defer_activation_isSet = true;
}

bool OAICreateContactChannelRequest::is_defer_activation_Set() const{
    return m_defer_activation_isSet;
}

bool OAICreateContactChannelRequest::is_defer_activation_Valid() const{
    return m_defer_activation_isValid;
}

QString OAICreateContactChannelRequest::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAICreateContactChannelRequest::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAICreateContactChannelRequest::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAICreateContactChannelRequest::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAICreateContactChannelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_defer_activation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateContactChannelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_id_isValid && m_name_isValid && m_type_isValid && m_delivery_address_isValid && true;
}

} // namespace OpenAPI
