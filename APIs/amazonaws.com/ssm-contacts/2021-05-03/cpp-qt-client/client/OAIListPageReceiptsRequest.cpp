/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPageReceiptsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPageReceiptsRequest::OAIListPageReceiptsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPageReceiptsRequest::OAIListPageReceiptsRequest() {
    this->initializeModel();
}

OAIListPageReceiptsRequest::~OAIListPageReceiptsRequest() {}

void OAIListPageReceiptsRequest::initializeModel() {

    m_page_id_isSet = false;
    m_page_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListPageReceiptsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPageReceiptsRequest::fromJsonObject(QJsonObject json) {

    m_page_id_isValid = ::OpenAPI::fromJsonValue(m_page_id, json[QString("PageId")]);
    m_page_id_isSet = !json[QString("PageId")].isNull() && m_page_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListPageReceiptsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPageReceiptsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_page_id_isSet) {
        obj.insert(QString("PageId"), ::OpenAPI::toJsonValue(m_page_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListPageReceiptsRequest::getPageId() const {
    return m_page_id;
}
void OAIListPageReceiptsRequest::setPageId(const QString &page_id) {
    m_page_id = page_id;
    m_page_id_isSet = true;
}

bool OAIListPageReceiptsRequest::is_page_id_Set() const{
    return m_page_id_isSet;
}

bool OAIListPageReceiptsRequest::is_page_id_Valid() const{
    return m_page_id_isValid;
}

QString OAIListPageReceiptsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListPageReceiptsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPageReceiptsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPageReceiptsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListPageReceiptsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListPageReceiptsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListPageReceiptsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListPageReceiptsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListPageReceiptsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_page_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPageReceiptsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_page_id_isValid && true;
}

} // namespace OpenAPI
