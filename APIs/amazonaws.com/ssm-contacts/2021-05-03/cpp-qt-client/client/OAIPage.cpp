/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPage::OAIPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPage::OAIPage() {
    this->initializeModel();
}

OAIPage::~OAIPage() {}

void OAIPage::initializeModel() {

    m_page_arn_isSet = false;
    m_page_arn_isValid = false;

    m_engagement_arn_isSet = false;
    m_engagement_arn_isValid = false;

    m_contact_arn_isSet = false;
    m_contact_arn_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_incident_id_isSet = false;
    m_incident_id_isValid = false;

    m_sent_time_isSet = false;
    m_sent_time_isValid = false;

    m_delivery_time_isSet = false;
    m_delivery_time_isValid = false;

    m_read_time_isSet = false;
    m_read_time_isValid = false;
}

void OAIPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPage::fromJsonObject(QJsonObject json) {

    m_page_arn_isValid = ::OpenAPI::fromJsonValue(m_page_arn, json[QString("PageArn")]);
    m_page_arn_isSet = !json[QString("PageArn")].isNull() && m_page_arn_isValid;

    m_engagement_arn_isValid = ::OpenAPI::fromJsonValue(m_engagement_arn, json[QString("EngagementArn")]);
    m_engagement_arn_isSet = !json[QString("EngagementArn")].isNull() && m_engagement_arn_isValid;

    m_contact_arn_isValid = ::OpenAPI::fromJsonValue(m_contact_arn, json[QString("ContactArn")]);
    m_contact_arn_isSet = !json[QString("ContactArn")].isNull() && m_contact_arn_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("Sender")]);
    m_sender_isSet = !json[QString("Sender")].isNull() && m_sender_isValid;

    m_incident_id_isValid = ::OpenAPI::fromJsonValue(m_incident_id, json[QString("IncidentId")]);
    m_incident_id_isSet = !json[QString("IncidentId")].isNull() && m_incident_id_isValid;

    m_sent_time_isValid = ::OpenAPI::fromJsonValue(m_sent_time, json[QString("SentTime")]);
    m_sent_time_isSet = !json[QString("SentTime")].isNull() && m_sent_time_isValid;

    m_delivery_time_isValid = ::OpenAPI::fromJsonValue(m_delivery_time, json[QString("DeliveryTime")]);
    m_delivery_time_isSet = !json[QString("DeliveryTime")].isNull() && m_delivery_time_isValid;

    m_read_time_isValid = ::OpenAPI::fromJsonValue(m_read_time, json[QString("ReadTime")]);
    m_read_time_isSet = !json[QString("ReadTime")].isNull() && m_read_time_isValid;
}

QString OAIPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPage::asJsonObject() const {
    QJsonObject obj;
    if (m_page_arn_isSet) {
        obj.insert(QString("PageArn"), ::OpenAPI::toJsonValue(m_page_arn));
    }
    if (m_engagement_arn_isSet) {
        obj.insert(QString("EngagementArn"), ::OpenAPI::toJsonValue(m_engagement_arn));
    }
    if (m_contact_arn_isSet) {
        obj.insert(QString("ContactArn"), ::OpenAPI::toJsonValue(m_contact_arn));
    }
    if (m_sender_isSet) {
        obj.insert(QString("Sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_incident_id_isSet) {
        obj.insert(QString("IncidentId"), ::OpenAPI::toJsonValue(m_incident_id));
    }
    if (m_sent_time_isSet) {
        obj.insert(QString("SentTime"), ::OpenAPI::toJsonValue(m_sent_time));
    }
    if (m_delivery_time_isSet) {
        obj.insert(QString("DeliveryTime"), ::OpenAPI::toJsonValue(m_delivery_time));
    }
    if (m_read_time_isSet) {
        obj.insert(QString("ReadTime"), ::OpenAPI::toJsonValue(m_read_time));
    }
    return obj;
}

QString OAIPage::getPageArn() const {
    return m_page_arn;
}
void OAIPage::setPageArn(const QString &page_arn) {
    m_page_arn = page_arn;
    m_page_arn_isSet = true;
}

bool OAIPage::is_page_arn_Set() const{
    return m_page_arn_isSet;
}

bool OAIPage::is_page_arn_Valid() const{
    return m_page_arn_isValid;
}

QString OAIPage::getEngagementArn() const {
    return m_engagement_arn;
}
void OAIPage::setEngagementArn(const QString &engagement_arn) {
    m_engagement_arn = engagement_arn;
    m_engagement_arn_isSet = true;
}

bool OAIPage::is_engagement_arn_Set() const{
    return m_engagement_arn_isSet;
}

bool OAIPage::is_engagement_arn_Valid() const{
    return m_engagement_arn_isValid;
}

QString OAIPage::getContactArn() const {
    return m_contact_arn;
}
void OAIPage::setContactArn(const QString &contact_arn) {
    m_contact_arn = contact_arn;
    m_contact_arn_isSet = true;
}

bool OAIPage::is_contact_arn_Set() const{
    return m_contact_arn_isSet;
}

bool OAIPage::is_contact_arn_Valid() const{
    return m_contact_arn_isValid;
}

QString OAIPage::getSender() const {
    return m_sender;
}
void OAIPage::setSender(const QString &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIPage::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIPage::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAIPage::getIncidentId() const {
    return m_incident_id;
}
void OAIPage::setIncidentId(const QString &incident_id) {
    m_incident_id = incident_id;
    m_incident_id_isSet = true;
}

bool OAIPage::is_incident_id_Set() const{
    return m_incident_id_isSet;
}

bool OAIPage::is_incident_id_Valid() const{
    return m_incident_id_isValid;
}

QDateTime OAIPage::getSentTime() const {
    return m_sent_time;
}
void OAIPage::setSentTime(const QDateTime &sent_time) {
    m_sent_time = sent_time;
    m_sent_time_isSet = true;
}

bool OAIPage::is_sent_time_Set() const{
    return m_sent_time_isSet;
}

bool OAIPage::is_sent_time_Valid() const{
    return m_sent_time_isValid;
}

QDateTime OAIPage::getDeliveryTime() const {
    return m_delivery_time;
}
void OAIPage::setDeliveryTime(const QDateTime &delivery_time) {
    m_delivery_time = delivery_time;
    m_delivery_time_isSet = true;
}

bool OAIPage::is_delivery_time_Set() const{
    return m_delivery_time_isSet;
}

bool OAIPage::is_delivery_time_Valid() const{
    return m_delivery_time_isValid;
}

QDateTime OAIPage::getReadTime() const {
    return m_read_time;
}
void OAIPage::setReadTime(const QDateTime &read_time) {
    m_read_time = read_time;
    m_read_time_isSet = true;
}

bool OAIPage::is_read_time_Set() const{
    return m_read_time_isSet;
}

bool OAIPage::is_read_time_Valid() const{
    return m_read_time_isValid;
}

bool OAIPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_page_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engagement_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incident_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_page_arn_isValid && m_engagement_arn_isValid && m_contact_arn_isValid && m_sender_isValid && true;
}

} // namespace OpenAPI
