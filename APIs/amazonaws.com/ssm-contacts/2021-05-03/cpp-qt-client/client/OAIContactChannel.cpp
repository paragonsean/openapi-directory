/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContactChannel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContactChannel::OAIContactChannel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContactChannel::OAIContactChannel() {
    this->initializeModel();
}

OAIContactChannel::~OAIContactChannel() {}

void OAIContactChannel::initializeModel() {

    m_contact_channel_arn_isSet = false;
    m_contact_channel_arn_isValid = false;

    m_contact_arn_isSet = false;
    m_contact_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_delivery_address_isSet = false;
    m_delivery_address_isValid = false;

    m_activation_status_isSet = false;
    m_activation_status_isValid = false;
}

void OAIContactChannel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContactChannel::fromJsonObject(QJsonObject json) {

    m_contact_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_contact_channel_arn, json[QString("ContactChannelArn")]);
    m_contact_channel_arn_isSet = !json[QString("ContactChannelArn")].isNull() && m_contact_channel_arn_isValid;

    m_contact_arn_isValid = ::OpenAPI::fromJsonValue(m_contact_arn, json[QString("ContactArn")]);
    m_contact_arn_isSet = !json[QString("ContactArn")].isNull() && m_contact_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_delivery_address_isValid = ::OpenAPI::fromJsonValue(m_delivery_address, json[QString("DeliveryAddress")]);
    m_delivery_address_isSet = !json[QString("DeliveryAddress")].isNull() && m_delivery_address_isValid;

    m_activation_status_isValid = ::OpenAPI::fromJsonValue(m_activation_status, json[QString("ActivationStatus")]);
    m_activation_status_isSet = !json[QString("ActivationStatus")].isNull() && m_activation_status_isValid;
}

QString OAIContactChannel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContactChannel::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_channel_arn_isSet) {
        obj.insert(QString("ContactChannelArn"), ::OpenAPI::toJsonValue(m_contact_channel_arn));
    }
    if (m_contact_arn_isSet) {
        obj.insert(QString("ContactArn"), ::OpenAPI::toJsonValue(m_contact_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_delivery_address.isSet()) {
        obj.insert(QString("DeliveryAddress"), ::OpenAPI::toJsonValue(m_delivery_address));
    }
    if (m_activation_status.isSet()) {
        obj.insert(QString("ActivationStatus"), ::OpenAPI::toJsonValue(m_activation_status));
    }
    return obj;
}

QString OAIContactChannel::getContactChannelArn() const {
    return m_contact_channel_arn;
}
void OAIContactChannel::setContactChannelArn(const QString &contact_channel_arn) {
    m_contact_channel_arn = contact_channel_arn;
    m_contact_channel_arn_isSet = true;
}

bool OAIContactChannel::is_contact_channel_arn_Set() const{
    return m_contact_channel_arn_isSet;
}

bool OAIContactChannel::is_contact_channel_arn_Valid() const{
    return m_contact_channel_arn_isValid;
}

QString OAIContactChannel::getContactArn() const {
    return m_contact_arn;
}
void OAIContactChannel::setContactArn(const QString &contact_arn) {
    m_contact_arn = contact_arn;
    m_contact_arn_isSet = true;
}

bool OAIContactChannel::is_contact_arn_Set() const{
    return m_contact_arn_isSet;
}

bool OAIContactChannel::is_contact_arn_Valid() const{
    return m_contact_arn_isValid;
}

QString OAIContactChannel::getName() const {
    return m_name;
}
void OAIContactChannel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIContactChannel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIContactChannel::is_name_Valid() const{
    return m_name_isValid;
}

OAIChannelType OAIContactChannel::getType() const {
    return m_type;
}
void OAIContactChannel::setType(const OAIChannelType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContactChannel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContactChannel::is_type_Valid() const{
    return m_type_isValid;
}

OAIGetContactChannelResult_DeliveryAddress OAIContactChannel::getDeliveryAddress() const {
    return m_delivery_address;
}
void OAIContactChannel::setDeliveryAddress(const OAIGetContactChannelResult_DeliveryAddress &delivery_address) {
    m_delivery_address = delivery_address;
    m_delivery_address_isSet = true;
}

bool OAIContactChannel::is_delivery_address_Set() const{
    return m_delivery_address_isSet;
}

bool OAIContactChannel::is_delivery_address_Valid() const{
    return m_delivery_address_isValid;
}

OAIActivationStatus OAIContactChannel::getActivationStatus() const {
    return m_activation_status;
}
void OAIContactChannel::setActivationStatus(const OAIActivationStatus &activation_status) {
    m_activation_status = activation_status;
    m_activation_status_isSet = true;
}

bool OAIContactChannel::is_activation_status_Set() const{
    return m_activation_status_isSet;
}

bool OAIContactChannel::is_activation_status_Valid() const{
    return m_activation_status_isValid;
}

bool OAIContactChannel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContactChannel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_channel_arn_isValid && m_contact_arn_isValid && m_name_isValid && m_delivery_address_isValid && m_activation_status_isValid && true;
}

} // namespace OpenAPI
