/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListPreviewRotationShiftsRequest.h
 *
 * 
 */

#ifndef OAIListPreviewRotationShiftsRequest_H
#define OAIListPreviewRotationShiftsRequest_H

#include <QJsonObject>

#include "OAIListPreviewRotationShiftsRequest_Recurrence.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIListPreviewRotationShiftsRequest_Recurrence;

class OAIListPreviewRotationShiftsRequest : public OAIObject {
public:
    OAIListPreviewRotationShiftsRequest();
    OAIListPreviewRotationShiftsRequest(QString json);
    ~OAIListPreviewRotationShiftsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getRotationStartTime() const;
    void setRotationStartTime(const QDateTime &rotation_start_time);
    bool is_rotation_start_time_Set() const;
    bool is_rotation_start_time_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QList getMembers() const;
    void setMembers(const QList &members);
    bool is_members_Set() const;
    bool is_members_Valid() const;

    QString getTimeZoneId() const;
    void setTimeZoneId(const QString &time_zone_id);
    bool is_time_zone_id_Set() const;
    bool is_time_zone_id_Valid() const;

    OAIListPreviewRotationShiftsRequest_Recurrence getRecurrence() const;
    void setRecurrence(const OAIListPreviewRotationShiftsRequest_Recurrence &recurrence);
    bool is_recurrence_Set() const;
    bool is_recurrence_Valid() const;

    QList getOverrides() const;
    void setOverrides(const QList &overrides);
    bool is_overrides_Set() const;
    bool is_overrides_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_rotation_start_time;
    bool m_rotation_start_time_isSet;
    bool m_rotation_start_time_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QList m_members;
    bool m_members_isSet;
    bool m_members_isValid;

    QString m_time_zone_id;
    bool m_time_zone_id_isSet;
    bool m_time_zone_id_isValid;

    OAIListPreviewRotationShiftsRequest_Recurrence m_recurrence;
    bool m_recurrence_isSet;
    bool m_recurrence_isValid;

    QList m_overrides;
    bool m_overrides_isSet;
    bool m_overrides_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListPreviewRotationShiftsRequest)

#endif // OAIListPreviewRotationShiftsRequest_H
