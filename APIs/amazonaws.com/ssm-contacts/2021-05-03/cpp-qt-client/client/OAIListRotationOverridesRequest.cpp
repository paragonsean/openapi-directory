/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRotationOverridesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRotationOverridesRequest::OAIListRotationOverridesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRotationOverridesRequest::OAIListRotationOverridesRequest() {
    this->initializeModel();
}

OAIListRotationOverridesRequest::~OAIListRotationOverridesRequest() {}

void OAIListRotationOverridesRequest::initializeModel() {

    m_rotation_id_isSet = false;
    m_rotation_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListRotationOverridesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRotationOverridesRequest::fromJsonObject(QJsonObject json) {

    m_rotation_id_isValid = ::OpenAPI::fromJsonValue(m_rotation_id, json[QString("RotationId")]);
    m_rotation_id_isSet = !json[QString("RotationId")].isNull() && m_rotation_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListRotationOverridesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRotationOverridesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_rotation_id_isSet) {
        obj.insert(QString("RotationId"), ::OpenAPI::toJsonValue(m_rotation_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListRotationOverridesRequest::getRotationId() const {
    return m_rotation_id;
}
void OAIListRotationOverridesRequest::setRotationId(const QString &rotation_id) {
    m_rotation_id = rotation_id;
    m_rotation_id_isSet = true;
}

bool OAIListRotationOverridesRequest::is_rotation_id_Set() const{
    return m_rotation_id_isSet;
}

bool OAIListRotationOverridesRequest::is_rotation_id_Valid() const{
    return m_rotation_id_isValid;
}

QDateTime OAIListRotationOverridesRequest::getStartTime() const {
    return m_start_time;
}
void OAIListRotationOverridesRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIListRotationOverridesRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIListRotationOverridesRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIListRotationOverridesRequest::getEndTime() const {
    return m_end_time;
}
void OAIListRotationOverridesRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIListRotationOverridesRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIListRotationOverridesRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIListRotationOverridesRequest::getNextToken() const {
    return m_next_token;
}
void OAIListRotationOverridesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListRotationOverridesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListRotationOverridesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListRotationOverridesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListRotationOverridesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListRotationOverridesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListRotationOverridesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListRotationOverridesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rotation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRotationOverridesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rotation_id_isValid && m_start_time_isValid && m_end_time_isValid && true;
}

} // namespace OpenAPI
