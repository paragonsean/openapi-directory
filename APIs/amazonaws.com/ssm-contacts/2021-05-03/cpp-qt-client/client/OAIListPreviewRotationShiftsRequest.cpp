/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPreviewRotationShiftsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPreviewRotationShiftsRequest::OAIListPreviewRotationShiftsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPreviewRotationShiftsRequest::OAIListPreviewRotationShiftsRequest() {
    this->initializeModel();
}

OAIListPreviewRotationShiftsRequest::~OAIListPreviewRotationShiftsRequest() {}

void OAIListPreviewRotationShiftsRequest::initializeModel() {

    m_rotation_start_time_isSet = false;
    m_rotation_start_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_time_zone_id_isSet = false;
    m_time_zone_id_isValid = false;

    m_recurrence_isSet = false;
    m_recurrence_isValid = false;

    m_overrides_isSet = false;
    m_overrides_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListPreviewRotationShiftsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPreviewRotationShiftsRequest::fromJsonObject(QJsonObject json) {

    m_rotation_start_time_isValid = ::OpenAPI::fromJsonValue(m_rotation_start_time, json[QString("RotationStartTime")]);
    m_rotation_start_time_isSet = !json[QString("RotationStartTime")].isNull() && m_rotation_start_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("Members")]);
    m_members_isSet = !json[QString("Members")].isNull() && m_members_isValid;

    m_time_zone_id_isValid = ::OpenAPI::fromJsonValue(m_time_zone_id, json[QString("TimeZoneId")]);
    m_time_zone_id_isSet = !json[QString("TimeZoneId")].isNull() && m_time_zone_id_isValid;

    m_recurrence_isValid = ::OpenAPI::fromJsonValue(m_recurrence, json[QString("Recurrence")]);
    m_recurrence_isSet = !json[QString("Recurrence")].isNull() && m_recurrence_isValid;

    m_overrides_isValid = ::OpenAPI::fromJsonValue(m_overrides, json[QString("Overrides")]);
    m_overrides_isSet = !json[QString("Overrides")].isNull() && m_overrides_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListPreviewRotationShiftsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPreviewRotationShiftsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_rotation_start_time_isSet) {
        obj.insert(QString("RotationStartTime"), ::OpenAPI::toJsonValue(m_rotation_start_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_members.isSet()) {
        obj.insert(QString("Members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_time_zone_id_isSet) {
        obj.insert(QString("TimeZoneId"), ::OpenAPI::toJsonValue(m_time_zone_id));
    }
    if (m_recurrence.isSet()) {
        obj.insert(QString("Recurrence"), ::OpenAPI::toJsonValue(m_recurrence));
    }
    if (m_overrides.isSet()) {
        obj.insert(QString("Overrides"), ::OpenAPI::toJsonValue(m_overrides));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QDateTime OAIListPreviewRotationShiftsRequest::getRotationStartTime() const {
    return m_rotation_start_time;
}
void OAIListPreviewRotationShiftsRequest::setRotationStartTime(const QDateTime &rotation_start_time) {
    m_rotation_start_time = rotation_start_time;
    m_rotation_start_time_isSet = true;
}

bool OAIListPreviewRotationShiftsRequest::is_rotation_start_time_Set() const{
    return m_rotation_start_time_isSet;
}

bool OAIListPreviewRotationShiftsRequest::is_rotation_start_time_Valid() const{
    return m_rotation_start_time_isValid;
}

QDateTime OAIListPreviewRotationShiftsRequest::getStartTime() const {
    return m_start_time;
}
void OAIListPreviewRotationShiftsRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIListPreviewRotationShiftsRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIListPreviewRotationShiftsRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIListPreviewRotationShiftsRequest::getEndTime() const {
    return m_end_time;
}
void OAIListPreviewRotationShiftsRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIListPreviewRotationShiftsRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIListPreviewRotationShiftsRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList OAIListPreviewRotationShiftsRequest::getMembers() const {
    return m_members;
}
void OAIListPreviewRotationShiftsRequest::setMembers(const QList &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIListPreviewRotationShiftsRequest::is_members_Set() const{
    return m_members_isSet;
}

bool OAIListPreviewRotationShiftsRequest::is_members_Valid() const{
    return m_members_isValid;
}

QString OAIListPreviewRotationShiftsRequest::getTimeZoneId() const {
    return m_time_zone_id;
}
void OAIListPreviewRotationShiftsRequest::setTimeZoneId(const QString &time_zone_id) {
    m_time_zone_id = time_zone_id;
    m_time_zone_id_isSet = true;
}

bool OAIListPreviewRotationShiftsRequest::is_time_zone_id_Set() const{
    return m_time_zone_id_isSet;
}

bool OAIListPreviewRotationShiftsRequest::is_time_zone_id_Valid() const{
    return m_time_zone_id_isValid;
}

OAIListPreviewRotationShiftsRequest_Recurrence OAIListPreviewRotationShiftsRequest::getRecurrence() const {
    return m_recurrence;
}
void OAIListPreviewRotationShiftsRequest::setRecurrence(const OAIListPreviewRotationShiftsRequest_Recurrence &recurrence) {
    m_recurrence = recurrence;
    m_recurrence_isSet = true;
}

bool OAIListPreviewRotationShiftsRequest::is_recurrence_Set() const{
    return m_recurrence_isSet;
}

bool OAIListPreviewRotationShiftsRequest::is_recurrence_Valid() const{
    return m_recurrence_isValid;
}

QList OAIListPreviewRotationShiftsRequest::getOverrides() const {
    return m_overrides;
}
void OAIListPreviewRotationShiftsRequest::setOverrides(const QList &overrides) {
    m_overrides = overrides;
    m_overrides_isSet = true;
}

bool OAIListPreviewRotationShiftsRequest::is_overrides_Set() const{
    return m_overrides_isSet;
}

bool OAIListPreviewRotationShiftsRequest::is_overrides_Valid() const{
    return m_overrides_isValid;
}

QString OAIListPreviewRotationShiftsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListPreviewRotationShiftsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPreviewRotationShiftsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPreviewRotationShiftsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListPreviewRotationShiftsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListPreviewRotationShiftsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListPreviewRotationShiftsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListPreviewRotationShiftsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListPreviewRotationShiftsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rotation_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPreviewRotationShiftsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_time_isValid && m_members_isValid && m_time_zone_id_isValid && m_recurrence_isValid && true;
}

} // namespace OpenAPI
