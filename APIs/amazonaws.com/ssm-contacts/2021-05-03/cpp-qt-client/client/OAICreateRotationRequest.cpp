/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRotationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRotationRequest::OAICreateRotationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRotationRequest::OAICreateRotationRequest() {
    this->initializeModel();
}

OAICreateRotationRequest::~OAICreateRotationRequest() {}

void OAICreateRotationRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_contact_ids_isSet = false;
    m_contact_ids_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_time_zone_id_isSet = false;
    m_time_zone_id_isValid = false;

    m_recurrence_isSet = false;
    m_recurrence_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAICreateRotationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRotationRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_contact_ids_isValid = ::OpenAPI::fromJsonValue(m_contact_ids, json[QString("ContactIds")]);
    m_contact_ids_isSet = !json[QString("ContactIds")].isNull() && m_contact_ids_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_time_zone_id_isValid = ::OpenAPI::fromJsonValue(m_time_zone_id, json[QString("TimeZoneId")]);
    m_time_zone_id_isSet = !json[QString("TimeZoneId")].isNull() && m_time_zone_id_isValid;

    m_recurrence_isValid = ::OpenAPI::fromJsonValue(m_recurrence, json[QString("Recurrence")]);
    m_recurrence_isSet = !json[QString("Recurrence")].isNull() && m_recurrence_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAICreateRotationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRotationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_contact_ids.isSet()) {
        obj.insert(QString("ContactIds"), ::OpenAPI::toJsonValue(m_contact_ids));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_time_zone_id_isSet) {
        obj.insert(QString("TimeZoneId"), ::OpenAPI::toJsonValue(m_time_zone_id));
    }
    if (m_recurrence.isSet()) {
        obj.insert(QString("Recurrence"), ::OpenAPI::toJsonValue(m_recurrence));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAICreateRotationRequest::getName() const {
    return m_name;
}
void OAICreateRotationRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateRotationRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateRotationRequest::is_name_Valid() const{
    return m_name_isValid;
}

QList OAICreateRotationRequest::getContactIds() const {
    return m_contact_ids;
}
void OAICreateRotationRequest::setContactIds(const QList &contact_ids) {
    m_contact_ids = contact_ids;
    m_contact_ids_isSet = true;
}

bool OAICreateRotationRequest::is_contact_ids_Set() const{
    return m_contact_ids_isSet;
}

bool OAICreateRotationRequest::is_contact_ids_Valid() const{
    return m_contact_ids_isValid;
}

QDateTime OAICreateRotationRequest::getStartTime() const {
    return m_start_time;
}
void OAICreateRotationRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICreateRotationRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICreateRotationRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAICreateRotationRequest::getTimeZoneId() const {
    return m_time_zone_id;
}
void OAICreateRotationRequest::setTimeZoneId(const QString &time_zone_id) {
    m_time_zone_id = time_zone_id;
    m_time_zone_id_isSet = true;
}

bool OAICreateRotationRequest::is_time_zone_id_Set() const{
    return m_time_zone_id_isSet;
}

bool OAICreateRotationRequest::is_time_zone_id_Valid() const{
    return m_time_zone_id_isValid;
}

OAICreateRotationRequest_Recurrence OAICreateRotationRequest::getRecurrence() const {
    return m_recurrence;
}
void OAICreateRotationRequest::setRecurrence(const OAICreateRotationRequest_Recurrence &recurrence) {
    m_recurrence = recurrence;
    m_recurrence_isSet = true;
}

bool OAICreateRotationRequest::is_recurrence_Set() const{
    return m_recurrence_isSet;
}

bool OAICreateRotationRequest::is_recurrence_Valid() const{
    return m_recurrence_isValid;
}

QList OAICreateRotationRequest::getTags() const {
    return m_tags;
}
void OAICreateRotationRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRotationRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRotationRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateRotationRequest::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAICreateRotationRequest::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAICreateRotationRequest::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAICreateRotationRequest::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAICreateRotationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRotationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_contact_ids_isValid && m_time_zone_id_isValid && m_recurrence_isValid && true;
}

} // namespace OpenAPI
