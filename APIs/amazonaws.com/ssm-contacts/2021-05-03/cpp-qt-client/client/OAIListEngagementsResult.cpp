/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListEngagementsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListEngagementsResult::OAIListEngagementsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListEngagementsResult::OAIListEngagementsResult() {
    this->initializeModel();
}

OAIListEngagementsResult::~OAIListEngagementsResult() {}

void OAIListEngagementsResult::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_engagements_isSet = false;
    m_engagements_isValid = false;
}

void OAIListEngagementsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListEngagementsResult::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_engagements_isValid = ::OpenAPI::fromJsonValue(m_engagements, json[QString("Engagements")]);
    m_engagements_isSet = !json[QString("Engagements")].isNull() && m_engagements_isValid;
}

QString OAIListEngagementsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListEngagementsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_engagements.isSet()) {
        obj.insert(QString("Engagements"), ::OpenAPI::toJsonValue(m_engagements));
    }
    return obj;
}

QString OAIListEngagementsResult::getNextToken() const {
    return m_next_token;
}
void OAIListEngagementsResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListEngagementsResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListEngagementsResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListEngagementsResult::getEngagements() const {
    return m_engagements;
}
void OAIListEngagementsResult::setEngagements(const QList &engagements) {
    m_engagements = engagements;
    m_engagements_isSet = true;
}

bool OAIListEngagementsResult::is_engagements_Set() const{
    return m_engagements_isSet;
}

bool OAIListEngagementsResult::is_engagements_Valid() const{
    return m_engagements_isValid;
}

bool OAIListEngagementsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engagements.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListEngagementsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_engagements_isValid && true;
}

} // namespace OpenAPI
