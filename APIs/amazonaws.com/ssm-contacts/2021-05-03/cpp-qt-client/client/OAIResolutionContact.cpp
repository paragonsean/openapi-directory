/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResolutionContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResolutionContact::OAIResolutionContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResolutionContact::OAIResolutionContact() {
    this->initializeModel();
}

OAIResolutionContact::~OAIResolutionContact() {}

void OAIResolutionContact::initializeModel() {

    m_contact_arn_isSet = false;
    m_contact_arn_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_stage_index_isSet = false;
    m_stage_index_isValid = false;
}

void OAIResolutionContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResolutionContact::fromJsonObject(QJsonObject json) {

    m_contact_arn_isValid = ::OpenAPI::fromJsonValue(m_contact_arn, json[QString("ContactArn")]);
    m_contact_arn_isSet = !json[QString("ContactArn")].isNull() && m_contact_arn_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_stage_index_isValid = ::OpenAPI::fromJsonValue(m_stage_index, json[QString("StageIndex")]);
    m_stage_index_isSet = !json[QString("StageIndex")].isNull() && m_stage_index_isValid;
}

QString OAIResolutionContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResolutionContact::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_arn_isSet) {
        obj.insert(QString("ContactArn"), ::OpenAPI::toJsonValue(m_contact_arn));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_stage_index_isSet) {
        obj.insert(QString("StageIndex"), ::OpenAPI::toJsonValue(m_stage_index));
    }
    return obj;
}

QString OAIResolutionContact::getContactArn() const {
    return m_contact_arn;
}
void OAIResolutionContact::setContactArn(const QString &contact_arn) {
    m_contact_arn = contact_arn;
    m_contact_arn_isSet = true;
}

bool OAIResolutionContact::is_contact_arn_Set() const{
    return m_contact_arn_isSet;
}

bool OAIResolutionContact::is_contact_arn_Valid() const{
    return m_contact_arn_isValid;
}

OAIContactType OAIResolutionContact::getType() const {
    return m_type;
}
void OAIResolutionContact::setType(const OAIContactType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResolutionContact::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResolutionContact::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIResolutionContact::getStageIndex() const {
    return m_stage_index;
}
void OAIResolutionContact::setStageIndex(const qint32 &stage_index) {
    m_stage_index = stage_index;
    m_stage_index_isSet = true;
}

bool OAIResolutionContact::is_stage_index_Set() const{
    return m_stage_index_isSet;
}

bool OAIResolutionContact::is_stage_index_Valid() const{
    return m_stage_index_isValid;
}

bool OAIResolutionContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResolutionContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_arn_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
