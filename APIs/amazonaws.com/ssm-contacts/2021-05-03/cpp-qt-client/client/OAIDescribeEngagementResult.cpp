/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeEngagementResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeEngagementResult::OAIDescribeEngagementResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeEngagementResult::OAIDescribeEngagementResult() {
    this->initializeModel();
}

OAIDescribeEngagementResult::~OAIDescribeEngagementResult() {}

void OAIDescribeEngagementResult::initializeModel() {

    m_contact_arn_isSet = false;
    m_contact_arn_isValid = false;

    m_engagement_arn_isSet = false;
    m_engagement_arn_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_public_subject_isSet = false;
    m_public_subject_isValid = false;

    m_public_content_isSet = false;
    m_public_content_isValid = false;

    m_incident_id_isSet = false;
    m_incident_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_stop_time_isSet = false;
    m_stop_time_isValid = false;
}

void OAIDescribeEngagementResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeEngagementResult::fromJsonObject(QJsonObject json) {

    m_contact_arn_isValid = ::OpenAPI::fromJsonValue(m_contact_arn, json[QString("ContactArn")]);
    m_contact_arn_isSet = !json[QString("ContactArn")].isNull() && m_contact_arn_isValid;

    m_engagement_arn_isValid = ::OpenAPI::fromJsonValue(m_engagement_arn, json[QString("EngagementArn")]);
    m_engagement_arn_isSet = !json[QString("EngagementArn")].isNull() && m_engagement_arn_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("Sender")]);
    m_sender_isSet = !json[QString("Sender")].isNull() && m_sender_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_public_subject_isValid = ::OpenAPI::fromJsonValue(m_public_subject, json[QString("PublicSubject")]);
    m_public_subject_isSet = !json[QString("PublicSubject")].isNull() && m_public_subject_isValid;

    m_public_content_isValid = ::OpenAPI::fromJsonValue(m_public_content, json[QString("PublicContent")]);
    m_public_content_isSet = !json[QString("PublicContent")].isNull() && m_public_content_isValid;

    m_incident_id_isValid = ::OpenAPI::fromJsonValue(m_incident_id, json[QString("IncidentId")]);
    m_incident_id_isSet = !json[QString("IncidentId")].isNull() && m_incident_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_stop_time_isValid = ::OpenAPI::fromJsonValue(m_stop_time, json[QString("StopTime")]);
    m_stop_time_isSet = !json[QString("StopTime")].isNull() && m_stop_time_isValid;
}

QString OAIDescribeEngagementResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeEngagementResult::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_arn_isSet) {
        obj.insert(QString("ContactArn"), ::OpenAPI::toJsonValue(m_contact_arn));
    }
    if (m_engagement_arn_isSet) {
        obj.insert(QString("EngagementArn"), ::OpenAPI::toJsonValue(m_engagement_arn));
    }
    if (m_sender_isSet) {
        obj.insert(QString("Sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_public_subject_isSet) {
        obj.insert(QString("PublicSubject"), ::OpenAPI::toJsonValue(m_public_subject));
    }
    if (m_public_content_isSet) {
        obj.insert(QString("PublicContent"), ::OpenAPI::toJsonValue(m_public_content));
    }
    if (m_incident_id_isSet) {
        obj.insert(QString("IncidentId"), ::OpenAPI::toJsonValue(m_incident_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_stop_time_isSet) {
        obj.insert(QString("StopTime"), ::OpenAPI::toJsonValue(m_stop_time));
    }
    return obj;
}

QString OAIDescribeEngagementResult::getContactArn() const {
    return m_contact_arn;
}
void OAIDescribeEngagementResult::setContactArn(const QString &contact_arn) {
    m_contact_arn = contact_arn;
    m_contact_arn_isSet = true;
}

bool OAIDescribeEngagementResult::is_contact_arn_Set() const{
    return m_contact_arn_isSet;
}

bool OAIDescribeEngagementResult::is_contact_arn_Valid() const{
    return m_contact_arn_isValid;
}

QString OAIDescribeEngagementResult::getEngagementArn() const {
    return m_engagement_arn;
}
void OAIDescribeEngagementResult::setEngagementArn(const QString &engagement_arn) {
    m_engagement_arn = engagement_arn;
    m_engagement_arn_isSet = true;
}

bool OAIDescribeEngagementResult::is_engagement_arn_Set() const{
    return m_engagement_arn_isSet;
}

bool OAIDescribeEngagementResult::is_engagement_arn_Valid() const{
    return m_engagement_arn_isValid;
}

QString OAIDescribeEngagementResult::getSender() const {
    return m_sender;
}
void OAIDescribeEngagementResult::setSender(const QString &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIDescribeEngagementResult::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIDescribeEngagementResult::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAIDescribeEngagementResult::getSubject() const {
    return m_subject;
}
void OAIDescribeEngagementResult::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIDescribeEngagementResult::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIDescribeEngagementResult::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIDescribeEngagementResult::getContent() const {
    return m_content;
}
void OAIDescribeEngagementResult::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIDescribeEngagementResult::is_content_Set() const{
    return m_content_isSet;
}

bool OAIDescribeEngagementResult::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIDescribeEngagementResult::getPublicSubject() const {
    return m_public_subject;
}
void OAIDescribeEngagementResult::setPublicSubject(const QString &public_subject) {
    m_public_subject = public_subject;
    m_public_subject_isSet = true;
}

bool OAIDescribeEngagementResult::is_public_subject_Set() const{
    return m_public_subject_isSet;
}

bool OAIDescribeEngagementResult::is_public_subject_Valid() const{
    return m_public_subject_isValid;
}

QString OAIDescribeEngagementResult::getPublicContent() const {
    return m_public_content;
}
void OAIDescribeEngagementResult::setPublicContent(const QString &public_content) {
    m_public_content = public_content;
    m_public_content_isSet = true;
}

bool OAIDescribeEngagementResult::is_public_content_Set() const{
    return m_public_content_isSet;
}

bool OAIDescribeEngagementResult::is_public_content_Valid() const{
    return m_public_content_isValid;
}

QString OAIDescribeEngagementResult::getIncidentId() const {
    return m_incident_id;
}
void OAIDescribeEngagementResult::setIncidentId(const QString &incident_id) {
    m_incident_id = incident_id;
    m_incident_id_isSet = true;
}

bool OAIDescribeEngagementResult::is_incident_id_Set() const{
    return m_incident_id_isSet;
}

bool OAIDescribeEngagementResult::is_incident_id_Valid() const{
    return m_incident_id_isValid;
}

QDateTime OAIDescribeEngagementResult::getStartTime() const {
    return m_start_time;
}
void OAIDescribeEngagementResult::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeEngagementResult::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeEngagementResult::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDescribeEngagementResult::getStopTime() const {
    return m_stop_time;
}
void OAIDescribeEngagementResult::setStopTime(const QDateTime &stop_time) {
    m_stop_time = stop_time;
    m_stop_time_isSet = true;
}

bool OAIDescribeEngagementResult::is_stop_time_Set() const{
    return m_stop_time_isSet;
}

bool OAIDescribeEngagementResult::is_stop_time_Valid() const{
    return m_stop_time_isValid;
}

bool OAIDescribeEngagementResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engagement_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incident_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeEngagementResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_arn_isValid && m_engagement_arn_isValid && m_sender_isValid && m_subject_isValid && m_content_isValid && true;
}

} // namespace OpenAPI
