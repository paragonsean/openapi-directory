/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreviewOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreviewOverride::OAIPreviewOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreviewOverride::OAIPreviewOverride() {
    this->initializeModel();
}

OAIPreviewOverride::~OAIPreviewOverride() {}

void OAIPreviewOverride::initializeModel() {

    m_new_members_isSet = false;
    m_new_members_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;
}

void OAIPreviewOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreviewOverride::fromJsonObject(QJsonObject json) {

    m_new_members_isValid = ::OpenAPI::fromJsonValue(m_new_members, json[QString("NewMembers")]);
    m_new_members_isSet = !json[QString("NewMembers")].isNull() && m_new_members_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;
}

QString OAIPreviewOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreviewOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_new_members.isSet()) {
        obj.insert(QString("NewMembers"), ::OpenAPI::toJsonValue(m_new_members));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    return obj;
}

QList OAIPreviewOverride::getNewMembers() const {
    return m_new_members;
}
void OAIPreviewOverride::setNewMembers(const QList &new_members) {
    m_new_members = new_members;
    m_new_members_isSet = true;
}

bool OAIPreviewOverride::is_new_members_Set() const{
    return m_new_members_isSet;
}

bool OAIPreviewOverride::is_new_members_Valid() const{
    return m_new_members_isValid;
}

QDateTime OAIPreviewOverride::getStartTime() const {
    return m_start_time;
}
void OAIPreviewOverride::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPreviewOverride::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPreviewOverride::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIPreviewOverride::getEndTime() const {
    return m_end_time;
}
void OAIPreviewOverride::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIPreviewOverride::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIPreviewOverride::is_end_time_Valid() const{
    return m_end_time_isValid;
}

bool OAIPreviewOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_members.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreviewOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
