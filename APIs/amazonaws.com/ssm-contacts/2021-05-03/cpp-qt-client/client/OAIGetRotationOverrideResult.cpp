/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRotationOverrideResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRotationOverrideResult::OAIGetRotationOverrideResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRotationOverrideResult::OAIGetRotationOverrideResult() {
    this->initializeModel();
}

OAIGetRotationOverrideResult::~OAIGetRotationOverrideResult() {}

void OAIGetRotationOverrideResult::initializeModel() {

    m_rotation_override_id_isSet = false;
    m_rotation_override_id_isValid = false;

    m_rotation_arn_isSet = false;
    m_rotation_arn_isValid = false;

    m_new_contact_ids_isSet = false;
    m_new_contact_ids_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;
}

void OAIGetRotationOverrideResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRotationOverrideResult::fromJsonObject(QJsonObject json) {

    m_rotation_override_id_isValid = ::OpenAPI::fromJsonValue(m_rotation_override_id, json[QString("RotationOverrideId")]);
    m_rotation_override_id_isSet = !json[QString("RotationOverrideId")].isNull() && m_rotation_override_id_isValid;

    m_rotation_arn_isValid = ::OpenAPI::fromJsonValue(m_rotation_arn, json[QString("RotationArn")]);
    m_rotation_arn_isSet = !json[QString("RotationArn")].isNull() && m_rotation_arn_isValid;

    m_new_contact_ids_isValid = ::OpenAPI::fromJsonValue(m_new_contact_ids, json[QString("NewContactIds")]);
    m_new_contact_ids_isSet = !json[QString("NewContactIds")].isNull() && m_new_contact_ids_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("CreateTime")]);
    m_create_time_isSet = !json[QString("CreateTime")].isNull() && m_create_time_isValid;
}

QString OAIGetRotationOverrideResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRotationOverrideResult::asJsonObject() const {
    QJsonObject obj;
    if (m_rotation_override_id_isSet) {
        obj.insert(QString("RotationOverrideId"), ::OpenAPI::toJsonValue(m_rotation_override_id));
    }
    if (m_rotation_arn_isSet) {
        obj.insert(QString("RotationArn"), ::OpenAPI::toJsonValue(m_rotation_arn));
    }
    if (m_new_contact_ids.isSet()) {
        obj.insert(QString("NewContactIds"), ::OpenAPI::toJsonValue(m_new_contact_ids));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("CreateTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    return obj;
}

QString OAIGetRotationOverrideResult::getRotationOverrideId() const {
    return m_rotation_override_id;
}
void OAIGetRotationOverrideResult::setRotationOverrideId(const QString &rotation_override_id) {
    m_rotation_override_id = rotation_override_id;
    m_rotation_override_id_isSet = true;
}

bool OAIGetRotationOverrideResult::is_rotation_override_id_Set() const{
    return m_rotation_override_id_isSet;
}

bool OAIGetRotationOverrideResult::is_rotation_override_id_Valid() const{
    return m_rotation_override_id_isValid;
}

QString OAIGetRotationOverrideResult::getRotationArn() const {
    return m_rotation_arn;
}
void OAIGetRotationOverrideResult::setRotationArn(const QString &rotation_arn) {
    m_rotation_arn = rotation_arn;
    m_rotation_arn_isSet = true;
}

bool OAIGetRotationOverrideResult::is_rotation_arn_Set() const{
    return m_rotation_arn_isSet;
}

bool OAIGetRotationOverrideResult::is_rotation_arn_Valid() const{
    return m_rotation_arn_isValid;
}

QList OAIGetRotationOverrideResult::getNewContactIds() const {
    return m_new_contact_ids;
}
void OAIGetRotationOverrideResult::setNewContactIds(const QList &new_contact_ids) {
    m_new_contact_ids = new_contact_ids;
    m_new_contact_ids_isSet = true;
}

bool OAIGetRotationOverrideResult::is_new_contact_ids_Set() const{
    return m_new_contact_ids_isSet;
}

bool OAIGetRotationOverrideResult::is_new_contact_ids_Valid() const{
    return m_new_contact_ids_isValid;
}

QDateTime OAIGetRotationOverrideResult::getStartTime() const {
    return m_start_time;
}
void OAIGetRotationOverrideResult::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetRotationOverrideResult::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetRotationOverrideResult::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetRotationOverrideResult::getEndTime() const {
    return m_end_time;
}
void OAIGetRotationOverrideResult::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetRotationOverrideResult::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetRotationOverrideResult::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIGetRotationOverrideResult::getCreateTime() const {
    return m_create_time;
}
void OAIGetRotationOverrideResult::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGetRotationOverrideResult::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGetRotationOverrideResult::is_create_time_Valid() const{
    return m_create_time_isValid;
}

bool OAIGetRotationOverrideResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rotation_override_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_contact_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRotationOverrideResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
