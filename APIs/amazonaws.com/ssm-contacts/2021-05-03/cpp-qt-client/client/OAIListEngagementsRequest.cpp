/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListEngagementsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListEngagementsRequest::OAIListEngagementsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListEngagementsRequest::OAIListEngagementsRequest() {
    this->initializeModel();
}

OAIListEngagementsRequest::~OAIListEngagementsRequest() {}

void OAIListEngagementsRequest::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_incident_id_isSet = false;
    m_incident_id_isValid = false;

    m_time_range_value_isSet = false;
    m_time_range_value_isValid = false;
}

void OAIListEngagementsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListEngagementsRequest::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_incident_id_isValid = ::OpenAPI::fromJsonValue(m_incident_id, json[QString("IncidentId")]);
    m_incident_id_isSet = !json[QString("IncidentId")].isNull() && m_incident_id_isValid;

    m_time_range_value_isValid = ::OpenAPI::fromJsonValue(m_time_range_value, json[QString("TimeRangeValue")]);
    m_time_range_value_isSet = !json[QString("TimeRangeValue")].isNull() && m_time_range_value_isValid;
}

QString OAIListEngagementsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListEngagementsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_incident_id_isSet) {
        obj.insert(QString("IncidentId"), ::OpenAPI::toJsonValue(m_incident_id));
    }
    if (m_time_range_value.isSet()) {
        obj.insert(QString("TimeRangeValue"), ::OpenAPI::toJsonValue(m_time_range_value));
    }
    return obj;
}

QString OAIListEngagementsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListEngagementsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListEngagementsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListEngagementsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListEngagementsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListEngagementsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListEngagementsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListEngagementsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListEngagementsRequest::getIncidentId() const {
    return m_incident_id;
}
void OAIListEngagementsRequest::setIncidentId(const QString &incident_id) {
    m_incident_id = incident_id;
    m_incident_id_isSet = true;
}

bool OAIListEngagementsRequest::is_incident_id_Set() const{
    return m_incident_id_isSet;
}

bool OAIListEngagementsRequest::is_incident_id_Valid() const{
    return m_incident_id_isValid;
}

OAIListEngagementsRequest_TimeRangeValue OAIListEngagementsRequest::getTimeRangeValue() const {
    return m_time_range_value;
}
void OAIListEngagementsRequest::setTimeRangeValue(const OAIListEngagementsRequest_TimeRangeValue &time_range_value) {
    m_time_range_value = time_range_value;
    m_time_range_value_isSet = true;
}

bool OAIListEngagementsRequest::is_time_range_value_Set() const{
    return m_time_range_value_isSet;
}

bool OAIListEngagementsRequest::is_time_range_value_Valid() const{
    return m_time_range_value_isValid;
}

bool OAIListEngagementsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incident_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListEngagementsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
