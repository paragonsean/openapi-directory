/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivateContactChannelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivateContactChannelRequest::OAIActivateContactChannelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivateContactChannelRequest::OAIActivateContactChannelRequest() {
    this->initializeModel();
}

OAIActivateContactChannelRequest::~OAIActivateContactChannelRequest() {}

void OAIActivateContactChannelRequest::initializeModel() {

    m_contact_channel_id_isSet = false;
    m_contact_channel_id_isValid = false;

    m_activation_code_isSet = false;
    m_activation_code_isValid = false;
}

void OAIActivateContactChannelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivateContactChannelRequest::fromJsonObject(QJsonObject json) {

    m_contact_channel_id_isValid = ::OpenAPI::fromJsonValue(m_contact_channel_id, json[QString("ContactChannelId")]);
    m_contact_channel_id_isSet = !json[QString("ContactChannelId")].isNull() && m_contact_channel_id_isValid;

    m_activation_code_isValid = ::OpenAPI::fromJsonValue(m_activation_code, json[QString("ActivationCode")]);
    m_activation_code_isSet = !json[QString("ActivationCode")].isNull() && m_activation_code_isValid;
}

QString OAIActivateContactChannelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivateContactChannelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_channel_id_isSet) {
        obj.insert(QString("ContactChannelId"), ::OpenAPI::toJsonValue(m_contact_channel_id));
    }
    if (m_activation_code_isSet) {
        obj.insert(QString("ActivationCode"), ::OpenAPI::toJsonValue(m_activation_code));
    }
    return obj;
}

QString OAIActivateContactChannelRequest::getContactChannelId() const {
    return m_contact_channel_id;
}
void OAIActivateContactChannelRequest::setContactChannelId(const QString &contact_channel_id) {
    m_contact_channel_id = contact_channel_id;
    m_contact_channel_id_isSet = true;
}

bool OAIActivateContactChannelRequest::is_contact_channel_id_Set() const{
    return m_contact_channel_id_isSet;
}

bool OAIActivateContactChannelRequest::is_contact_channel_id_Valid() const{
    return m_contact_channel_id_isValid;
}

QString OAIActivateContactChannelRequest::getActivationCode() const {
    return m_activation_code;
}
void OAIActivateContactChannelRequest::setActivationCode(const QString &activation_code) {
    m_activation_code = activation_code;
    m_activation_code_isSet = true;
}

bool OAIActivateContactChannelRequest::is_activation_code_Set() const{
    return m_activation_code_isSet;
}

bool OAIActivateContactChannelRequest::is_activation_code_Valid() const{
    return m_activation_code_isValid;
}

bool OAIActivateContactChannelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activation_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivateContactChannelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_channel_id_isValid && m_activation_code_isValid && true;
}

} // namespace OpenAPI
