/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRotationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRotationResult::OAICreateRotationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRotationResult::OAICreateRotationResult() {
    this->initializeModel();
}

OAICreateRotationResult::~OAICreateRotationResult() {}

void OAICreateRotationResult::initializeModel() {

    m_rotation_arn_isSet = false;
    m_rotation_arn_isValid = false;
}

void OAICreateRotationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRotationResult::fromJsonObject(QJsonObject json) {

    m_rotation_arn_isValid = ::OpenAPI::fromJsonValue(m_rotation_arn, json[QString("RotationArn")]);
    m_rotation_arn_isSet = !json[QString("RotationArn")].isNull() && m_rotation_arn_isValid;
}

QString OAICreateRotationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRotationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_rotation_arn_isSet) {
        obj.insert(QString("RotationArn"), ::OpenAPI::toJsonValue(m_rotation_arn));
    }
    return obj;
}

QString OAICreateRotationResult::getRotationArn() const {
    return m_rotation_arn;
}
void OAICreateRotationResult::setRotationArn(const QString &rotation_arn) {
    m_rotation_arn = rotation_arn;
    m_rotation_arn_isSet = true;
}

bool OAICreateRotationResult::is_rotation_arn_Set() const{
    return m_rotation_arn_isSet;
}

bool OAICreateRotationResult::is_rotation_arn_Valid() const{
    return m_rotation_arn_isValid;
}

bool OAICreateRotationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rotation_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRotationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rotation_arn_isValid && true;
}

} // namespace OpenAPI
