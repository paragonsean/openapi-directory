/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateContactRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateContactRequest::OAICreateContactRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateContactRequest::OAICreateContactRequest() {
    this->initializeModel();
}

OAICreateContactRequest::~OAICreateContactRequest() {}

void OAICreateContactRequest::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAICreateContactRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateContactRequest::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("Alias")]);
    m_alias_isSet = !json[QString("Alias")].isNull() && m_alias_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("Plan")]);
    m_plan_isSet = !json[QString("Plan")].isNull() && m_plan_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAICreateContactRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateContactRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("Alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("Plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAICreateContactRequest::getAlias() const {
    return m_alias;
}
void OAICreateContactRequest::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAICreateContactRequest::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAICreateContactRequest::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAICreateContactRequest::getDisplayName() const {
    return m_display_name;
}
void OAICreateContactRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICreateContactRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICreateContactRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIContactType OAICreateContactRequest::getType() const {
    return m_type;
}
void OAICreateContactRequest::setType(const OAIContactType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateContactRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateContactRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAICreateContactRequest_Plan OAICreateContactRequest::getPlan() const {
    return m_plan;
}
void OAICreateContactRequest::setPlan(const OAICreateContactRequest_Plan &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAICreateContactRequest::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAICreateContactRequest::is_plan_Valid() const{
    return m_plan_isValid;
}

QList OAICreateContactRequest::getTags() const {
    return m_tags;
}
void OAICreateContactRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateContactRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateContactRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateContactRequest::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAICreateContactRequest::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAICreateContactRequest::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAICreateContactRequest::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAICreateContactRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateContactRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alias_isValid && m_type_isValid && m_plan_isValid && true;
}

} // namespace OpenAPI
