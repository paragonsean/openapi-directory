/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEngagement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEngagement::OAIEngagement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEngagement::OAIEngagement() {
    this->initializeModel();
}

OAIEngagement::~OAIEngagement() {}

void OAIEngagement::initializeModel() {

    m_engagement_arn_isSet = false;
    m_engagement_arn_isValid = false;

    m_contact_arn_isSet = false;
    m_contact_arn_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_incident_id_isSet = false;
    m_incident_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_stop_time_isSet = false;
    m_stop_time_isValid = false;
}

void OAIEngagement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEngagement::fromJsonObject(QJsonObject json) {

    m_engagement_arn_isValid = ::OpenAPI::fromJsonValue(m_engagement_arn, json[QString("EngagementArn")]);
    m_engagement_arn_isSet = !json[QString("EngagementArn")].isNull() && m_engagement_arn_isValid;

    m_contact_arn_isValid = ::OpenAPI::fromJsonValue(m_contact_arn, json[QString("ContactArn")]);
    m_contact_arn_isSet = !json[QString("ContactArn")].isNull() && m_contact_arn_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("Sender")]);
    m_sender_isSet = !json[QString("Sender")].isNull() && m_sender_isValid;

    m_incident_id_isValid = ::OpenAPI::fromJsonValue(m_incident_id, json[QString("IncidentId")]);
    m_incident_id_isSet = !json[QString("IncidentId")].isNull() && m_incident_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_stop_time_isValid = ::OpenAPI::fromJsonValue(m_stop_time, json[QString("StopTime")]);
    m_stop_time_isSet = !json[QString("StopTime")].isNull() && m_stop_time_isValid;
}

QString OAIEngagement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEngagement::asJsonObject() const {
    QJsonObject obj;
    if (m_engagement_arn_isSet) {
        obj.insert(QString("EngagementArn"), ::OpenAPI::toJsonValue(m_engagement_arn));
    }
    if (m_contact_arn_isSet) {
        obj.insert(QString("ContactArn"), ::OpenAPI::toJsonValue(m_contact_arn));
    }
    if (m_sender_isSet) {
        obj.insert(QString("Sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_incident_id_isSet) {
        obj.insert(QString("IncidentId"), ::OpenAPI::toJsonValue(m_incident_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_stop_time_isSet) {
        obj.insert(QString("StopTime"), ::OpenAPI::toJsonValue(m_stop_time));
    }
    return obj;
}

QString OAIEngagement::getEngagementArn() const {
    return m_engagement_arn;
}
void OAIEngagement::setEngagementArn(const QString &engagement_arn) {
    m_engagement_arn = engagement_arn;
    m_engagement_arn_isSet = true;
}

bool OAIEngagement::is_engagement_arn_Set() const{
    return m_engagement_arn_isSet;
}

bool OAIEngagement::is_engagement_arn_Valid() const{
    return m_engagement_arn_isValid;
}

QString OAIEngagement::getContactArn() const {
    return m_contact_arn;
}
void OAIEngagement::setContactArn(const QString &contact_arn) {
    m_contact_arn = contact_arn;
    m_contact_arn_isSet = true;
}

bool OAIEngagement::is_contact_arn_Set() const{
    return m_contact_arn_isSet;
}

bool OAIEngagement::is_contact_arn_Valid() const{
    return m_contact_arn_isValid;
}

QString OAIEngagement::getSender() const {
    return m_sender;
}
void OAIEngagement::setSender(const QString &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIEngagement::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIEngagement::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAIEngagement::getIncidentId() const {
    return m_incident_id;
}
void OAIEngagement::setIncidentId(const QString &incident_id) {
    m_incident_id = incident_id;
    m_incident_id_isSet = true;
}

bool OAIEngagement::is_incident_id_Set() const{
    return m_incident_id_isSet;
}

bool OAIEngagement::is_incident_id_Valid() const{
    return m_incident_id_isValid;
}

QDateTime OAIEngagement::getStartTime() const {
    return m_start_time;
}
void OAIEngagement::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIEngagement::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIEngagement::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIEngagement::getStopTime() const {
    return m_stop_time;
}
void OAIEngagement::setStopTime(const QDateTime &stop_time) {
    m_stop_time = stop_time;
    m_stop_time_isSet = true;
}

bool OAIEngagement::is_stop_time_Set() const{
    return m_stop_time_isSet;
}

bool OAIEngagement::is_stop_time_Valid() const{
    return m_stop_time_isValid;
}

bool OAIEngagement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engagement_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incident_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEngagement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_engagement_arn_isValid && m_contact_arn_isValid && m_sender_isValid && true;
}

} // namespace OpenAPI
