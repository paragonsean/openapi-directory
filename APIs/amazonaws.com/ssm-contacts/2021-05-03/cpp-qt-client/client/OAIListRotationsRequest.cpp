/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRotationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRotationsRequest::OAIListRotationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRotationsRequest::OAIListRotationsRequest() {
    this->initializeModel();
}

OAIListRotationsRequest::~OAIListRotationsRequest() {}

void OAIListRotationsRequest::initializeModel() {

    m_rotation_name_prefix_isSet = false;
    m_rotation_name_prefix_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListRotationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRotationsRequest::fromJsonObject(QJsonObject json) {

    m_rotation_name_prefix_isValid = ::OpenAPI::fromJsonValue(m_rotation_name_prefix, json[QString("RotationNamePrefix")]);
    m_rotation_name_prefix_isSet = !json[QString("RotationNamePrefix")].isNull() && m_rotation_name_prefix_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListRotationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRotationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_rotation_name_prefix_isSet) {
        obj.insert(QString("RotationNamePrefix"), ::OpenAPI::toJsonValue(m_rotation_name_prefix));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListRotationsRequest::getRotationNamePrefix() const {
    return m_rotation_name_prefix;
}
void OAIListRotationsRequest::setRotationNamePrefix(const QString &rotation_name_prefix) {
    m_rotation_name_prefix = rotation_name_prefix;
    m_rotation_name_prefix_isSet = true;
}

bool OAIListRotationsRequest::is_rotation_name_prefix_Set() const{
    return m_rotation_name_prefix_isSet;
}

bool OAIListRotationsRequest::is_rotation_name_prefix_Valid() const{
    return m_rotation_name_prefix_isValid;
}

QString OAIListRotationsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListRotationsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListRotationsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListRotationsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListRotationsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListRotationsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListRotationsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListRotationsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListRotationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rotation_name_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRotationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
