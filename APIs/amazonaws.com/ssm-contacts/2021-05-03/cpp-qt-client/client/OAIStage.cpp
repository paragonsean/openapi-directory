/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStage::OAIStage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStage::OAIStage() {
    this->initializeModel();
}

OAIStage::~OAIStage() {}

void OAIStage::initializeModel() {

    m_duration_in_minutes_isSet = false;
    m_duration_in_minutes_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;
}

void OAIStage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStage::fromJsonObject(QJsonObject json) {

    m_duration_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_duration_in_minutes, json[QString("DurationInMinutes")]);
    m_duration_in_minutes_isSet = !json[QString("DurationInMinutes")].isNull() && m_duration_in_minutes_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("Targets")]);
    m_targets_isSet = !json[QString("Targets")].isNull() && m_targets_isValid;
}

QString OAIStage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStage::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_in_minutes_isSet) {
        obj.insert(QString("DurationInMinutes"), ::OpenAPI::toJsonValue(m_duration_in_minutes));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("Targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    return obj;
}

qint32 OAIStage::getDurationInMinutes() const {
    return m_duration_in_minutes;
}
void OAIStage::setDurationInMinutes(const qint32 &duration_in_minutes) {
    m_duration_in_minutes = duration_in_minutes;
    m_duration_in_minutes_isSet = true;
}

bool OAIStage::is_duration_in_minutes_Set() const{
    return m_duration_in_minutes_isSet;
}

bool OAIStage::is_duration_in_minutes_Valid() const{
    return m_duration_in_minutes_isValid;
}

QList OAIStage::getTargets() const {
    return m_targets;
}
void OAIStage::setTargets(const QList &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIStage::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIStage::is_targets_Valid() const{
    return m_targets_isValid;
}

bool OAIStage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_in_minutes_isValid && m_targets_isValid && true;
}

} // namespace OpenAPI
