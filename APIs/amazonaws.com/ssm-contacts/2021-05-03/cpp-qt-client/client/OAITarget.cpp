/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget::OAITarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget::OAITarget() {
    this->initializeModel();
}

OAITarget::~OAITarget() {}

void OAITarget::initializeModel() {

    m_channel_target_info_isSet = false;
    m_channel_target_info_isValid = false;

    m_contact_target_info_isSet = false;
    m_contact_target_info_isValid = false;
}

void OAITarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget::fromJsonObject(QJsonObject json) {

    m_channel_target_info_isValid = ::OpenAPI::fromJsonValue(m_channel_target_info, json[QString("ChannelTargetInfo")]);
    m_channel_target_info_isSet = !json[QString("ChannelTargetInfo")].isNull() && m_channel_target_info_isValid;

    m_contact_target_info_isValid = ::OpenAPI::fromJsonValue(m_contact_target_info, json[QString("ContactTargetInfo")]);
    m_contact_target_info_isSet = !json[QString("ContactTargetInfo")].isNull() && m_contact_target_info_isValid;
}

QString OAITarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_target_info.isSet()) {
        obj.insert(QString("ChannelTargetInfo"), ::OpenAPI::toJsonValue(m_channel_target_info));
    }
    if (m_contact_target_info.isSet()) {
        obj.insert(QString("ContactTargetInfo"), ::OpenAPI::toJsonValue(m_contact_target_info));
    }
    return obj;
}

OAITarget_ChannelTargetInfo OAITarget::getChannelTargetInfo() const {
    return m_channel_target_info;
}
void OAITarget::setChannelTargetInfo(const OAITarget_ChannelTargetInfo &channel_target_info) {
    m_channel_target_info = channel_target_info;
    m_channel_target_info_isSet = true;
}

bool OAITarget::is_channel_target_info_Set() const{
    return m_channel_target_info_isSet;
}

bool OAITarget::is_channel_target_info_Valid() const{
    return m_channel_target_info_isValid;
}

OAITarget_ContactTargetInfo OAITarget::getContactTargetInfo() const {
    return m_contact_target_info;
}
void OAITarget::setContactTargetInfo(const OAITarget_ContactTargetInfo &contact_target_info) {
    m_contact_target_info = contact_target_info;
    m_contact_target_info_isSet = true;
}

bool OAITarget::is_contact_target_info_Set() const{
    return m_contact_target_info_isSet;
}

bool OAITarget::is_contact_target_info_Valid() const{
    return m_contact_target_info_isValid;
}

bool OAITarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_target_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_target_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
