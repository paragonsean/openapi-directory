/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRotationRequest_Recurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRotationRequest_Recurrence::OAIUpdateRotationRequest_Recurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRotationRequest_Recurrence::OAIUpdateRotationRequest_Recurrence() {
    this->initializeModel();
}

OAIUpdateRotationRequest_Recurrence::~OAIUpdateRotationRequest_Recurrence() {}

void OAIUpdateRotationRequest_Recurrence::initializeModel() {

    m_monthly_settings_isSet = false;
    m_monthly_settings_isValid = false;

    m_weekly_settings_isSet = false;
    m_weekly_settings_isValid = false;

    m_daily_settings_isSet = false;
    m_daily_settings_isValid = false;

    m_number_of_on_calls_isSet = false;
    m_number_of_on_calls_isValid = false;

    m_shift_coverages_isSet = false;
    m_shift_coverages_isValid = false;

    m_recurrence_multiplier_isSet = false;
    m_recurrence_multiplier_isValid = false;
}

void OAIUpdateRotationRequest_Recurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRotationRequest_Recurrence::fromJsonObject(QJsonObject json) {

    m_monthly_settings_isValid = ::OpenAPI::fromJsonValue(m_monthly_settings, json[QString("MonthlySettings")]);
    m_monthly_settings_isSet = !json[QString("MonthlySettings")].isNull() && m_monthly_settings_isValid;

    m_weekly_settings_isValid = ::OpenAPI::fromJsonValue(m_weekly_settings, json[QString("WeeklySettings")]);
    m_weekly_settings_isSet = !json[QString("WeeklySettings")].isNull() && m_weekly_settings_isValid;

    m_daily_settings_isValid = ::OpenAPI::fromJsonValue(m_daily_settings, json[QString("DailySettings")]);
    m_daily_settings_isSet = !json[QString("DailySettings")].isNull() && m_daily_settings_isValid;

    m_number_of_on_calls_isValid = ::OpenAPI::fromJsonValue(m_number_of_on_calls, json[QString("NumberOfOnCalls")]);
    m_number_of_on_calls_isSet = !json[QString("NumberOfOnCalls")].isNull() && m_number_of_on_calls_isValid;

    m_shift_coverages_isValid = ::OpenAPI::fromJsonValue(m_shift_coverages, json[QString("ShiftCoverages")]);
    m_shift_coverages_isSet = !json[QString("ShiftCoverages")].isNull() && m_shift_coverages_isValid;

    m_recurrence_multiplier_isValid = ::OpenAPI::fromJsonValue(m_recurrence_multiplier, json[QString("RecurrenceMultiplier")]);
    m_recurrence_multiplier_isSet = !json[QString("RecurrenceMultiplier")].isNull() && m_recurrence_multiplier_isValid;
}

QString OAIUpdateRotationRequest_Recurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRotationRequest_Recurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_monthly_settings.isSet()) {
        obj.insert(QString("MonthlySettings"), ::OpenAPI::toJsonValue(m_monthly_settings));
    }
    if (m_weekly_settings.isSet()) {
        obj.insert(QString("WeeklySettings"), ::OpenAPI::toJsonValue(m_weekly_settings));
    }
    if (m_daily_settings.isSet()) {
        obj.insert(QString("DailySettings"), ::OpenAPI::toJsonValue(m_daily_settings));
    }
    if (m_number_of_on_calls_isSet) {
        obj.insert(QString("NumberOfOnCalls"), ::OpenAPI::toJsonValue(m_number_of_on_calls));
    }
    if (m_shift_coverages.isSet()) {
        obj.insert(QString("ShiftCoverages"), ::OpenAPI::toJsonValue(m_shift_coverages));
    }
    if (m_recurrence_multiplier_isSet) {
        obj.insert(QString("RecurrenceMultiplier"), ::OpenAPI::toJsonValue(m_recurrence_multiplier));
    }
    return obj;
}

QList OAIUpdateRotationRequest_Recurrence::getMonthlySettings() const {
    return m_monthly_settings;
}
void OAIUpdateRotationRequest_Recurrence::setMonthlySettings(const QList &monthly_settings) {
    m_monthly_settings = monthly_settings;
    m_monthly_settings_isSet = true;
}

bool OAIUpdateRotationRequest_Recurrence::is_monthly_settings_Set() const{
    return m_monthly_settings_isSet;
}

bool OAIUpdateRotationRequest_Recurrence::is_monthly_settings_Valid() const{
    return m_monthly_settings_isValid;
}

QList OAIUpdateRotationRequest_Recurrence::getWeeklySettings() const {
    return m_weekly_settings;
}
void OAIUpdateRotationRequest_Recurrence::setWeeklySettings(const QList &weekly_settings) {
    m_weekly_settings = weekly_settings;
    m_weekly_settings_isSet = true;
}

bool OAIUpdateRotationRequest_Recurrence::is_weekly_settings_Set() const{
    return m_weekly_settings_isSet;
}

bool OAIUpdateRotationRequest_Recurrence::is_weekly_settings_Valid() const{
    return m_weekly_settings_isValid;
}

QList OAIUpdateRotationRequest_Recurrence::getDailySettings() const {
    return m_daily_settings;
}
void OAIUpdateRotationRequest_Recurrence::setDailySettings(const QList &daily_settings) {
    m_daily_settings = daily_settings;
    m_daily_settings_isSet = true;
}

bool OAIUpdateRotationRequest_Recurrence::is_daily_settings_Set() const{
    return m_daily_settings_isSet;
}

bool OAIUpdateRotationRequest_Recurrence::is_daily_settings_Valid() const{
    return m_daily_settings_isValid;
}

qint32 OAIUpdateRotationRequest_Recurrence::getNumberOfOnCalls() const {
    return m_number_of_on_calls;
}
void OAIUpdateRotationRequest_Recurrence::setNumberOfOnCalls(const qint32 &number_of_on_calls) {
    m_number_of_on_calls = number_of_on_calls;
    m_number_of_on_calls_isSet = true;
}

bool OAIUpdateRotationRequest_Recurrence::is_number_of_on_calls_Set() const{
    return m_number_of_on_calls_isSet;
}

bool OAIUpdateRotationRequest_Recurrence::is_number_of_on_calls_Valid() const{
    return m_number_of_on_calls_isValid;
}

QMap OAIUpdateRotationRequest_Recurrence::getShiftCoverages() const {
    return m_shift_coverages;
}
void OAIUpdateRotationRequest_Recurrence::setShiftCoverages(const QMap &shift_coverages) {
    m_shift_coverages = shift_coverages;
    m_shift_coverages_isSet = true;
}

bool OAIUpdateRotationRequest_Recurrence::is_shift_coverages_Set() const{
    return m_shift_coverages_isSet;
}

bool OAIUpdateRotationRequest_Recurrence::is_shift_coverages_Valid() const{
    return m_shift_coverages_isValid;
}

qint32 OAIUpdateRotationRequest_Recurrence::getRecurrenceMultiplier() const {
    return m_recurrence_multiplier;
}
void OAIUpdateRotationRequest_Recurrence::setRecurrenceMultiplier(const qint32 &recurrence_multiplier) {
    m_recurrence_multiplier = recurrence_multiplier;
    m_recurrence_multiplier_isSet = true;
}

bool OAIUpdateRotationRequest_Recurrence::is_recurrence_multiplier_Set() const{
    return m_recurrence_multiplier_isSet;
}

bool OAIUpdateRotationRequest_Recurrence::is_recurrence_multiplier_Valid() const{
    return m_recurrence_multiplier_isValid;
}

bool OAIUpdateRotationRequest_Recurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_monthly_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekly_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_on_calls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shift_coverages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_multiplier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRotationRequest_Recurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_number_of_on_calls_isValid && m_recurrence_multiplier_isValid && true;
}

} // namespace OpenAPI
