/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRotationShift.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRotationShift::OAIRotationShift(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRotationShift::OAIRotationShift() {
    this->initializeModel();
}

OAIRotationShift::~OAIRotationShift() {}

void OAIRotationShift::initializeModel() {

    m_contact_ids_isSet = false;
    m_contact_ids_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_shift_details_isSet = false;
    m_shift_details_isValid = false;
}

void OAIRotationShift::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRotationShift::fromJsonObject(QJsonObject json) {

    m_contact_ids_isValid = ::OpenAPI::fromJsonValue(m_contact_ids, json[QString("ContactIds")]);
    m_contact_ids_isSet = !json[QString("ContactIds")].isNull() && m_contact_ids_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_shift_details_isValid = ::OpenAPI::fromJsonValue(m_shift_details, json[QString("ShiftDetails")]);
    m_shift_details_isSet = !json[QString("ShiftDetails")].isNull() && m_shift_details_isValid;
}

QString OAIRotationShift::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRotationShift::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_ids.isSet()) {
        obj.insert(QString("ContactIds"), ::OpenAPI::toJsonValue(m_contact_ids));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_shift_details.isSet()) {
        obj.insert(QString("ShiftDetails"), ::OpenAPI::toJsonValue(m_shift_details));
    }
    return obj;
}

QList OAIRotationShift::getContactIds() const {
    return m_contact_ids;
}
void OAIRotationShift::setContactIds(const QList &contact_ids) {
    m_contact_ids = contact_ids;
    m_contact_ids_isSet = true;
}

bool OAIRotationShift::is_contact_ids_Set() const{
    return m_contact_ids_isSet;
}

bool OAIRotationShift::is_contact_ids_Valid() const{
    return m_contact_ids_isValid;
}

QDateTime OAIRotationShift::getStartTime() const {
    return m_start_time;
}
void OAIRotationShift::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRotationShift::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRotationShift::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIRotationShift::getEndTime() const {
    return m_end_time;
}
void OAIRotationShift::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIRotationShift::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIRotationShift::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIShiftType OAIRotationShift::getType() const {
    return m_type;
}
void OAIRotationShift::setType(const OAIShiftType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRotationShift::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRotationShift::is_type_Valid() const{
    return m_type_isValid;
}

OAIRotationShift_ShiftDetails OAIRotationShift::getShiftDetails() const {
    return m_shift_details;
}
void OAIRotationShift::setShiftDetails(const OAIRotationShift_ShiftDetails &shift_details) {
    m_shift_details = shift_details;
    m_shift_details_isSet = true;
}

bool OAIRotationShift::is_shift_details_Set() const{
    return m_shift_details_isSet;
}

bool OAIRotationShift::is_shift_details_Valid() const{
    return m_shift_details_isValid;
}

bool OAIRotationShift::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shift_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRotationShift::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_time_isValid && m_end_time_isValid && true;
}

} // namespace OpenAPI
