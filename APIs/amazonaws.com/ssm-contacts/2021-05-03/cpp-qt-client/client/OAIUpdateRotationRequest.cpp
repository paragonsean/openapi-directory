/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRotationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRotationRequest::OAIUpdateRotationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRotationRequest::OAIUpdateRotationRequest() {
    this->initializeModel();
}

OAIUpdateRotationRequest::~OAIUpdateRotationRequest() {}

void OAIUpdateRotationRequest::initializeModel() {

    m_rotation_id_isSet = false;
    m_rotation_id_isValid = false;

    m_contact_ids_isSet = false;
    m_contact_ids_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_time_zone_id_isSet = false;
    m_time_zone_id_isValid = false;

    m_recurrence_isSet = false;
    m_recurrence_isValid = false;
}

void OAIUpdateRotationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRotationRequest::fromJsonObject(QJsonObject json) {

    m_rotation_id_isValid = ::OpenAPI::fromJsonValue(m_rotation_id, json[QString("RotationId")]);
    m_rotation_id_isSet = !json[QString("RotationId")].isNull() && m_rotation_id_isValid;

    m_contact_ids_isValid = ::OpenAPI::fromJsonValue(m_contact_ids, json[QString("ContactIds")]);
    m_contact_ids_isSet = !json[QString("ContactIds")].isNull() && m_contact_ids_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_time_zone_id_isValid = ::OpenAPI::fromJsonValue(m_time_zone_id, json[QString("TimeZoneId")]);
    m_time_zone_id_isSet = !json[QString("TimeZoneId")].isNull() && m_time_zone_id_isValid;

    m_recurrence_isValid = ::OpenAPI::fromJsonValue(m_recurrence, json[QString("Recurrence")]);
    m_recurrence_isSet = !json[QString("Recurrence")].isNull() && m_recurrence_isValid;
}

QString OAIUpdateRotationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRotationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_rotation_id_isSet) {
        obj.insert(QString("RotationId"), ::OpenAPI::toJsonValue(m_rotation_id));
    }
    if (m_contact_ids.isSet()) {
        obj.insert(QString("ContactIds"), ::OpenAPI::toJsonValue(m_contact_ids));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_time_zone_id_isSet) {
        obj.insert(QString("TimeZoneId"), ::OpenAPI::toJsonValue(m_time_zone_id));
    }
    if (m_recurrence.isSet()) {
        obj.insert(QString("Recurrence"), ::OpenAPI::toJsonValue(m_recurrence));
    }
    return obj;
}

QString OAIUpdateRotationRequest::getRotationId() const {
    return m_rotation_id;
}
void OAIUpdateRotationRequest::setRotationId(const QString &rotation_id) {
    m_rotation_id = rotation_id;
    m_rotation_id_isSet = true;
}

bool OAIUpdateRotationRequest::is_rotation_id_Set() const{
    return m_rotation_id_isSet;
}

bool OAIUpdateRotationRequest::is_rotation_id_Valid() const{
    return m_rotation_id_isValid;
}

QList OAIUpdateRotationRequest::getContactIds() const {
    return m_contact_ids;
}
void OAIUpdateRotationRequest::setContactIds(const QList &contact_ids) {
    m_contact_ids = contact_ids;
    m_contact_ids_isSet = true;
}

bool OAIUpdateRotationRequest::is_contact_ids_Set() const{
    return m_contact_ids_isSet;
}

bool OAIUpdateRotationRequest::is_contact_ids_Valid() const{
    return m_contact_ids_isValid;
}

QDateTime OAIUpdateRotationRequest::getStartTime() const {
    return m_start_time;
}
void OAIUpdateRotationRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIUpdateRotationRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIUpdateRotationRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIUpdateRotationRequest::getTimeZoneId() const {
    return m_time_zone_id;
}
void OAIUpdateRotationRequest::setTimeZoneId(const QString &time_zone_id) {
    m_time_zone_id = time_zone_id;
    m_time_zone_id_isSet = true;
}

bool OAIUpdateRotationRequest::is_time_zone_id_Set() const{
    return m_time_zone_id_isSet;
}

bool OAIUpdateRotationRequest::is_time_zone_id_Valid() const{
    return m_time_zone_id_isValid;
}

OAIUpdateRotationRequest_Recurrence OAIUpdateRotationRequest::getRecurrence() const {
    return m_recurrence;
}
void OAIUpdateRotationRequest::setRecurrence(const OAIUpdateRotationRequest_Recurrence &recurrence) {
    m_recurrence = recurrence;
    m_recurrence_isSet = true;
}

bool OAIUpdateRotationRequest::is_recurrence_Set() const{
    return m_recurrence_isSet;
}

bool OAIUpdateRotationRequest::is_recurrence_Valid() const{
    return m_recurrence_isValid;
}

bool OAIUpdateRotationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rotation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRotationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rotation_id_isValid && m_recurrence_isValid && true;
}

} // namespace OpenAPI
