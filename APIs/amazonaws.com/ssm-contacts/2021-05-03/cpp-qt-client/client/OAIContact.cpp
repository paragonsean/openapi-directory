/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContact::OAIContact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContact::OAIContact() {
    this->initializeModel();
}

OAIContact::~OAIContact() {}

void OAIContact::initializeModel() {

    m_contact_arn_isSet = false;
    m_contact_arn_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIContact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContact::fromJsonObject(QJsonObject json) {

    m_contact_arn_isValid = ::OpenAPI::fromJsonValue(m_contact_arn, json[QString("ContactArn")]);
    m_contact_arn_isSet = !json[QString("ContactArn")].isNull() && m_contact_arn_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("Alias")]);
    m_alias_isSet = !json[QString("Alias")].isNull() && m_alias_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIContact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContact::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_arn_isSet) {
        obj.insert(QString("ContactArn"), ::OpenAPI::toJsonValue(m_contact_arn));
    }
    if (m_alias_isSet) {
        obj.insert(QString("Alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIContact::getContactArn() const {
    return m_contact_arn;
}
void OAIContact::setContactArn(const QString &contact_arn) {
    m_contact_arn = contact_arn;
    m_contact_arn_isSet = true;
}

bool OAIContact::is_contact_arn_Set() const{
    return m_contact_arn_isSet;
}

bool OAIContact::is_contact_arn_Valid() const{
    return m_contact_arn_isValid;
}

QString OAIContact::getAlias() const {
    return m_alias;
}
void OAIContact::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIContact::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIContact::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIContact::getDisplayName() const {
    return m_display_name;
}
void OAIContact::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIContact::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIContact::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIContactType OAIContact::getType() const {
    return m_type;
}
void OAIContact::setType(const OAIContactType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContact::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContact::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIContact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContact::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_arn_isValid && m_alias_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
