/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRotationOverrideRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRotationOverrideRequest::OAIGetRotationOverrideRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRotationOverrideRequest::OAIGetRotationOverrideRequest() {
    this->initializeModel();
}

OAIGetRotationOverrideRequest::~OAIGetRotationOverrideRequest() {}

void OAIGetRotationOverrideRequest::initializeModel() {

    m_rotation_id_isSet = false;
    m_rotation_id_isValid = false;

    m_rotation_override_id_isSet = false;
    m_rotation_override_id_isValid = false;
}

void OAIGetRotationOverrideRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRotationOverrideRequest::fromJsonObject(QJsonObject json) {

    m_rotation_id_isValid = ::OpenAPI::fromJsonValue(m_rotation_id, json[QString("RotationId")]);
    m_rotation_id_isSet = !json[QString("RotationId")].isNull() && m_rotation_id_isValid;

    m_rotation_override_id_isValid = ::OpenAPI::fromJsonValue(m_rotation_override_id, json[QString("RotationOverrideId")]);
    m_rotation_override_id_isSet = !json[QString("RotationOverrideId")].isNull() && m_rotation_override_id_isValid;
}

QString OAIGetRotationOverrideRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRotationOverrideRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_rotation_id_isSet) {
        obj.insert(QString("RotationId"), ::OpenAPI::toJsonValue(m_rotation_id));
    }
    if (m_rotation_override_id_isSet) {
        obj.insert(QString("RotationOverrideId"), ::OpenAPI::toJsonValue(m_rotation_override_id));
    }
    return obj;
}

QString OAIGetRotationOverrideRequest::getRotationId() const {
    return m_rotation_id;
}
void OAIGetRotationOverrideRequest::setRotationId(const QString &rotation_id) {
    m_rotation_id = rotation_id;
    m_rotation_id_isSet = true;
}

bool OAIGetRotationOverrideRequest::is_rotation_id_Set() const{
    return m_rotation_id_isSet;
}

bool OAIGetRotationOverrideRequest::is_rotation_id_Valid() const{
    return m_rotation_id_isValid;
}

QString OAIGetRotationOverrideRequest::getRotationOverrideId() const {
    return m_rotation_override_id;
}
void OAIGetRotationOverrideRequest::setRotationOverrideId(const QString &rotation_override_id) {
    m_rotation_override_id = rotation_override_id;
    m_rotation_override_id_isSet = true;
}

bool OAIGetRotationOverrideRequest::is_rotation_override_id_Set() const{
    return m_rotation_override_id_isSet;
}

bool OAIGetRotationOverrideRequest::is_rotation_override_id_Valid() const{
    return m_rotation_override_id_isValid;
}

bool OAIGetRotationOverrideRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rotation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_override_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRotationOverrideRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rotation_id_isValid && m_rotation_override_id_isValid && true;
}

} // namespace OpenAPI
