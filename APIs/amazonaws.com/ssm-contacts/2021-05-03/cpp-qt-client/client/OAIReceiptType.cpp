/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiptType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiptType::OAIReceiptType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiptType::OAIReceiptType() {
    this->initializeModel();
}

OAIReceiptType::~OAIReceiptType() {}

void OAIReceiptType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReceiptType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReceiptType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DELIVERED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceiptType::DELIVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceiptType::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceiptType::READ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceiptType::SENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceiptType::STOP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReceiptType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReceiptType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReceiptType::DELIVERED:
            val = "DELIVERED";
            break;
        case eOAIReceiptType::ERROR:
            val = "ERROR";
            break;
        case eOAIReceiptType::READ:
            val = "READ";
            break;
        case eOAIReceiptType::SENT:
            val = "SENT";
            break;
        case eOAIReceiptType::STOP:
            val = "STOP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReceiptType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReceiptType::eOAIReceiptType OAIReceiptType::getValue() const {
    return m_value;
}

void OAIReceiptType::setValue(const OAIReceiptType::eOAIReceiptType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReceiptType::isSet() const {
    
    return m_value_isSet;
}

bool OAIReceiptType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
