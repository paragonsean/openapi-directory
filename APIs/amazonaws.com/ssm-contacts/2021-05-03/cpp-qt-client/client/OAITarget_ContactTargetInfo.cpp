/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget_ContactTargetInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget_ContactTargetInfo::OAITarget_ContactTargetInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget_ContactTargetInfo::OAITarget_ContactTargetInfo() {
    this->initializeModel();
}

OAITarget_ContactTargetInfo::~OAITarget_ContactTargetInfo() {}

void OAITarget_ContactTargetInfo::initializeModel() {

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_is_essential_isSet = false;
    m_is_essential_isValid = false;
}

void OAITarget_ContactTargetInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget_ContactTargetInfo::fromJsonObject(QJsonObject json) {

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;

    m_is_essential_isValid = ::OpenAPI::fromJsonValue(m_is_essential, json[QString("IsEssential")]);
    m_is_essential_isSet = !json[QString("IsEssential")].isNull() && m_is_essential_isValid;
}

QString OAITarget_ContactTargetInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget_ContactTargetInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_is_essential_isSet) {
        obj.insert(QString("IsEssential"), ::OpenAPI::toJsonValue(m_is_essential));
    }
    return obj;
}

QString OAITarget_ContactTargetInfo::getContactId() const {
    return m_contact_id;
}
void OAITarget_ContactTargetInfo::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAITarget_ContactTargetInfo::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAITarget_ContactTargetInfo::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

bool OAITarget_ContactTargetInfo::getIsEssential() const {
    return m_is_essential;
}
void OAITarget_ContactTargetInfo::setIsEssential(const bool &is_essential) {
    m_is_essential = is_essential;
    m_is_essential_isSet = true;
}

bool OAITarget_ContactTargetInfo::is_is_essential_Set() const{
    return m_is_essential_isSet;
}

bool OAITarget_ContactTargetInfo::is_is_essential_Valid() const{
    return m_is_essential_isValid;
}

bool OAITarget_ContactTargetInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_essential_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget_ContactTargetInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_essential_isValid && true;
}

} // namespace OpenAPI
