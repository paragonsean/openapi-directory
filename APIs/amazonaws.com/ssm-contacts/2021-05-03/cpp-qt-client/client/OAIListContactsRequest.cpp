/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListContactsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListContactsRequest::OAIListContactsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListContactsRequest::OAIListContactsRequest() {
    this->initializeModel();
}

OAIListContactsRequest::~OAIListContactsRequest() {}

void OAIListContactsRequest::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_alias_prefix_isSet = false;
    m_alias_prefix_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIListContactsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListContactsRequest::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_alias_prefix_isValid = ::OpenAPI::fromJsonValue(m_alias_prefix, json[QString("AliasPrefix")]);
    m_alias_prefix_isSet = !json[QString("AliasPrefix")].isNull() && m_alias_prefix_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIListContactsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListContactsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_alias_prefix_isSet) {
        obj.insert(QString("AliasPrefix"), ::OpenAPI::toJsonValue(m_alias_prefix));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIListContactsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListContactsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListContactsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListContactsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListContactsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListContactsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListContactsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListContactsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListContactsRequest::getAliasPrefix() const {
    return m_alias_prefix;
}
void OAIListContactsRequest::setAliasPrefix(const QString &alias_prefix) {
    m_alias_prefix = alias_prefix;
    m_alias_prefix_isSet = true;
}

bool OAIListContactsRequest::is_alias_prefix_Set() const{
    return m_alias_prefix_isSet;
}

bool OAIListContactsRequest::is_alias_prefix_Valid() const{
    return m_alias_prefix_isValid;
}

OAIContactType OAIListContactsRequest::getType() const {
    return m_type;
}
void OAIListContactsRequest::setType(const OAIContactType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIListContactsRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIListContactsRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIListContactsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListContactsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
