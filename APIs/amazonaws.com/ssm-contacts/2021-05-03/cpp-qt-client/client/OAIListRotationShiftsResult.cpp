/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRotationShiftsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRotationShiftsResult::OAIListRotationShiftsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRotationShiftsResult::OAIListRotationShiftsResult() {
    this->initializeModel();
}

OAIListRotationShiftsResult::~OAIListRotationShiftsResult() {}

void OAIListRotationShiftsResult::initializeModel() {

    m_rotation_shifts_isSet = false;
    m_rotation_shifts_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListRotationShiftsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRotationShiftsResult::fromJsonObject(QJsonObject json) {

    m_rotation_shifts_isValid = ::OpenAPI::fromJsonValue(m_rotation_shifts, json[QString("RotationShifts")]);
    m_rotation_shifts_isSet = !json[QString("RotationShifts")].isNull() && m_rotation_shifts_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListRotationShiftsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRotationShiftsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_rotation_shifts.isSet()) {
        obj.insert(QString("RotationShifts"), ::OpenAPI::toJsonValue(m_rotation_shifts));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListRotationShiftsResult::getRotationShifts() const {
    return m_rotation_shifts;
}
void OAIListRotationShiftsResult::setRotationShifts(const QList &rotation_shifts) {
    m_rotation_shifts = rotation_shifts;
    m_rotation_shifts_isSet = true;
}

bool OAIListRotationShiftsResult::is_rotation_shifts_Set() const{
    return m_rotation_shifts_isSet;
}

bool OAIListRotationShiftsResult::is_rotation_shifts_Valid() const{
    return m_rotation_shifts_isValid;
}

QString OAIListRotationShiftsResult::getNextToken() const {
    return m_next_token;
}
void OAIListRotationShiftsResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListRotationShiftsResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListRotationShiftsResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListRotationShiftsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rotation_shifts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRotationShiftsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
