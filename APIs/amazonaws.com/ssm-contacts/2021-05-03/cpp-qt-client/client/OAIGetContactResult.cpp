/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetContactResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetContactResult::OAIGetContactResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetContactResult::OAIGetContactResult() {
    this->initializeModel();
}

OAIGetContactResult::~OAIGetContactResult() {}

void OAIGetContactResult::initializeModel() {

    m_contact_arn_isSet = false;
    m_contact_arn_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;
}

void OAIGetContactResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetContactResult::fromJsonObject(QJsonObject json) {

    m_contact_arn_isValid = ::OpenAPI::fromJsonValue(m_contact_arn, json[QString("ContactArn")]);
    m_contact_arn_isSet = !json[QString("ContactArn")].isNull() && m_contact_arn_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("Alias")]);
    m_alias_isSet = !json[QString("Alias")].isNull() && m_alias_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("Plan")]);
    m_plan_isSet = !json[QString("Plan")].isNull() && m_plan_isValid;
}

QString OAIGetContactResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetContactResult::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_arn_isSet) {
        obj.insert(QString("ContactArn"), ::OpenAPI::toJsonValue(m_contact_arn));
    }
    if (m_alias_isSet) {
        obj.insert(QString("Alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("Plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    return obj;
}

QString OAIGetContactResult::getContactArn() const {
    return m_contact_arn;
}
void OAIGetContactResult::setContactArn(const QString &contact_arn) {
    m_contact_arn = contact_arn;
    m_contact_arn_isSet = true;
}

bool OAIGetContactResult::is_contact_arn_Set() const{
    return m_contact_arn_isSet;
}

bool OAIGetContactResult::is_contact_arn_Valid() const{
    return m_contact_arn_isValid;
}

QString OAIGetContactResult::getAlias() const {
    return m_alias;
}
void OAIGetContactResult::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIGetContactResult::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIGetContactResult::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIGetContactResult::getDisplayName() const {
    return m_display_name;
}
void OAIGetContactResult::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGetContactResult::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGetContactResult::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIContactType OAIGetContactResult::getType() const {
    return m_type;
}
void OAIGetContactResult::setType(const OAIContactType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetContactResult::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetContactResult::is_type_Valid() const{
    return m_type_isValid;
}

OAIGetContactResult_Plan OAIGetContactResult::getPlan() const {
    return m_plan;
}
void OAIGetContactResult::setPlan(const OAIGetContactResult_Plan &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIGetContactResult::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIGetContactResult::is_plan_Valid() const{
    return m_plan_isValid;
}

bool OAIGetContactResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetContactResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_arn_isValid && m_alias_isValid && m_type_isValid && m_plan_isValid && true;
}

} // namespace OpenAPI
