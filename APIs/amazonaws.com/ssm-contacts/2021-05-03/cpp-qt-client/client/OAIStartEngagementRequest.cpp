/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartEngagementRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartEngagementRequest::OAIStartEngagementRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartEngagementRequest::OAIStartEngagementRequest() {
    this->initializeModel();
}

OAIStartEngagementRequest::~OAIStartEngagementRequest() {}

void OAIStartEngagementRequest::initializeModel() {

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_public_subject_isSet = false;
    m_public_subject_isValid = false;

    m_public_content_isSet = false;
    m_public_content_isValid = false;

    m_incident_id_isSet = false;
    m_incident_id_isValid = false;

    m_idempotency_token_isSet = false;
    m_idempotency_token_isValid = false;
}

void OAIStartEngagementRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartEngagementRequest::fromJsonObject(QJsonObject json) {

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("Sender")]);
    m_sender_isSet = !json[QString("Sender")].isNull() && m_sender_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("Subject")]);
    m_subject_isSet = !json[QString("Subject")].isNull() && m_subject_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_public_subject_isValid = ::OpenAPI::fromJsonValue(m_public_subject, json[QString("PublicSubject")]);
    m_public_subject_isSet = !json[QString("PublicSubject")].isNull() && m_public_subject_isValid;

    m_public_content_isValid = ::OpenAPI::fromJsonValue(m_public_content, json[QString("PublicContent")]);
    m_public_content_isSet = !json[QString("PublicContent")].isNull() && m_public_content_isValid;

    m_incident_id_isValid = ::OpenAPI::fromJsonValue(m_incident_id, json[QString("IncidentId")]);
    m_incident_id_isSet = !json[QString("IncidentId")].isNull() && m_incident_id_isValid;

    m_idempotency_token_isValid = ::OpenAPI::fromJsonValue(m_idempotency_token, json[QString("IdempotencyToken")]);
    m_idempotency_token_isSet = !json[QString("IdempotencyToken")].isNull() && m_idempotency_token_isValid;
}

QString OAIStartEngagementRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartEngagementRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_sender_isSet) {
        obj.insert(QString("Sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    if (m_subject_isSet) {
        obj.insert(QString("Subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_public_subject_isSet) {
        obj.insert(QString("PublicSubject"), ::OpenAPI::toJsonValue(m_public_subject));
    }
    if (m_public_content_isSet) {
        obj.insert(QString("PublicContent"), ::OpenAPI::toJsonValue(m_public_content));
    }
    if (m_incident_id_isSet) {
        obj.insert(QString("IncidentId"), ::OpenAPI::toJsonValue(m_incident_id));
    }
    if (m_idempotency_token_isSet) {
        obj.insert(QString("IdempotencyToken"), ::OpenAPI::toJsonValue(m_idempotency_token));
    }
    return obj;
}

QString OAIStartEngagementRequest::getContactId() const {
    return m_contact_id;
}
void OAIStartEngagementRequest::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAIStartEngagementRequest::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAIStartEngagementRequest::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAIStartEngagementRequest::getSender() const {
    return m_sender;
}
void OAIStartEngagementRequest::setSender(const QString &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIStartEngagementRequest::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIStartEngagementRequest::is_sender_Valid() const{
    return m_sender_isValid;
}

QString OAIStartEngagementRequest::getSubject() const {
    return m_subject;
}
void OAIStartEngagementRequest::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIStartEngagementRequest::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIStartEngagementRequest::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIStartEngagementRequest::getContent() const {
    return m_content;
}
void OAIStartEngagementRequest::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIStartEngagementRequest::is_content_Set() const{
    return m_content_isSet;
}

bool OAIStartEngagementRequest::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIStartEngagementRequest::getPublicSubject() const {
    return m_public_subject;
}
void OAIStartEngagementRequest::setPublicSubject(const QString &public_subject) {
    m_public_subject = public_subject;
    m_public_subject_isSet = true;
}

bool OAIStartEngagementRequest::is_public_subject_Set() const{
    return m_public_subject_isSet;
}

bool OAIStartEngagementRequest::is_public_subject_Valid() const{
    return m_public_subject_isValid;
}

QString OAIStartEngagementRequest::getPublicContent() const {
    return m_public_content;
}
void OAIStartEngagementRequest::setPublicContent(const QString &public_content) {
    m_public_content = public_content;
    m_public_content_isSet = true;
}

bool OAIStartEngagementRequest::is_public_content_Set() const{
    return m_public_content_isSet;
}

bool OAIStartEngagementRequest::is_public_content_Valid() const{
    return m_public_content_isValid;
}

QString OAIStartEngagementRequest::getIncidentId() const {
    return m_incident_id;
}
void OAIStartEngagementRequest::setIncidentId(const QString &incident_id) {
    m_incident_id = incident_id;
    m_incident_id_isSet = true;
}

bool OAIStartEngagementRequest::is_incident_id_Set() const{
    return m_incident_id_isSet;
}

bool OAIStartEngagementRequest::is_incident_id_Valid() const{
    return m_incident_id_isValid;
}

QString OAIStartEngagementRequest::getIdempotencyToken() const {
    return m_idempotency_token;
}
void OAIStartEngagementRequest::setIdempotencyToken(const QString &idempotency_token) {
    m_idempotency_token = idempotency_token;
    m_idempotency_token_isSet = true;
}

bool OAIStartEngagementRequest::is_idempotency_token_Set() const{
    return m_idempotency_token_isSet;
}

bool OAIStartEngagementRequest::is_idempotency_token_Valid() const{
    return m_idempotency_token_isValid;
}

bool OAIStartEngagementRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incident_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idempotency_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartEngagementRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_id_isValid && m_sender_isValid && m_subject_isValid && m_content_isValid && true;
}

} // namespace OpenAPI
