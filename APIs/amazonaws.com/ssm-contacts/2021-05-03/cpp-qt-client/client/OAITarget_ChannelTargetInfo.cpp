/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITarget_ChannelTargetInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITarget_ChannelTargetInfo::OAITarget_ChannelTargetInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITarget_ChannelTargetInfo::OAITarget_ChannelTargetInfo() {
    this->initializeModel();
}

OAITarget_ChannelTargetInfo::~OAITarget_ChannelTargetInfo() {}

void OAITarget_ChannelTargetInfo::initializeModel() {

    m_contact_channel_id_isSet = false;
    m_contact_channel_id_isValid = false;

    m_retry_interval_in_minutes_isSet = false;
    m_retry_interval_in_minutes_isValid = false;
}

void OAITarget_ChannelTargetInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITarget_ChannelTargetInfo::fromJsonObject(QJsonObject json) {

    m_contact_channel_id_isValid = ::OpenAPI::fromJsonValue(m_contact_channel_id, json[QString("ContactChannelId")]);
    m_contact_channel_id_isSet = !json[QString("ContactChannelId")].isNull() && m_contact_channel_id_isValid;

    m_retry_interval_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_retry_interval_in_minutes, json[QString("RetryIntervalInMinutes")]);
    m_retry_interval_in_minutes_isSet = !json[QString("RetryIntervalInMinutes")].isNull() && m_retry_interval_in_minutes_isValid;
}

QString OAITarget_ChannelTargetInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITarget_ChannelTargetInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_channel_id_isSet) {
        obj.insert(QString("ContactChannelId"), ::OpenAPI::toJsonValue(m_contact_channel_id));
    }
    if (m_retry_interval_in_minutes_isSet) {
        obj.insert(QString("RetryIntervalInMinutes"), ::OpenAPI::toJsonValue(m_retry_interval_in_minutes));
    }
    return obj;
}

QString OAITarget_ChannelTargetInfo::getContactChannelId() const {
    return m_contact_channel_id;
}
void OAITarget_ChannelTargetInfo::setContactChannelId(const QString &contact_channel_id) {
    m_contact_channel_id = contact_channel_id;
    m_contact_channel_id_isSet = true;
}

bool OAITarget_ChannelTargetInfo::is_contact_channel_id_Set() const{
    return m_contact_channel_id_isSet;
}

bool OAITarget_ChannelTargetInfo::is_contact_channel_id_Valid() const{
    return m_contact_channel_id_isValid;
}

qint32 OAITarget_ChannelTargetInfo::getRetryIntervalInMinutes() const {
    return m_retry_interval_in_minutes;
}
void OAITarget_ChannelTargetInfo::setRetryIntervalInMinutes(const qint32 &retry_interval_in_minutes) {
    m_retry_interval_in_minutes = retry_interval_in_minutes;
    m_retry_interval_in_minutes_isSet = true;
}

bool OAITarget_ChannelTargetInfo::is_retry_interval_in_minutes_Set() const{
    return m_retry_interval_in_minutes_isSet;
}

bool OAITarget_ChannelTargetInfo::is_retry_interval_in_minutes_Valid() const{
    return m_retry_interval_in_minutes_isValid;
}

bool OAITarget_ChannelTargetInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_interval_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITarget_ChannelTargetInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_channel_id_isValid && true;
}

} // namespace OpenAPI
