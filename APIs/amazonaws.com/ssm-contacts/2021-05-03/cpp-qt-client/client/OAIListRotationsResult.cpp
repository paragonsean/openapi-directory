/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRotationsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRotationsResult::OAIListRotationsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRotationsResult::OAIListRotationsResult() {
    this->initializeModel();
}

OAIListRotationsResult::~OAIListRotationsResult() {}

void OAIListRotationsResult::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_rotations_isSet = false;
    m_rotations_isValid = false;
}

void OAIListRotationsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRotationsResult::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_rotations_isValid = ::OpenAPI::fromJsonValue(m_rotations, json[QString("Rotations")]);
    m_rotations_isSet = !json[QString("Rotations")].isNull() && m_rotations_isValid;
}

QString OAIListRotationsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRotationsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_rotations.isSet()) {
        obj.insert(QString("Rotations"), ::OpenAPI::toJsonValue(m_rotations));
    }
    return obj;
}

QString OAIListRotationsResult::getNextToken() const {
    return m_next_token;
}
void OAIListRotationsResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListRotationsResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListRotationsResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListRotationsResult::getRotations() const {
    return m_rotations;
}
void OAIListRotationsResult::setRotations(const QList &rotations) {
    m_rotations = rotations;
    m_rotations_isSet = true;
}

bool OAIListRotationsResult::is_rotations_Set() const{
    return m_rotations_isSet;
}

bool OAIListRotationsResult::is_rotations_Valid() const{
    return m_rotations_isValid;
}

bool OAIListRotationsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRotationsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rotations_isValid && true;
}

} // namespace OpenAPI
