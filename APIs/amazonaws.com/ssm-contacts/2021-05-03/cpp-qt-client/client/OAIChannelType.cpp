/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelType::OAIChannelType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelType::OAIChannelType() {
    this->initializeModel();
}

OAIChannelType::~OAIChannelType() {}

void OAIChannelType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIChannelType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIChannelType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SMS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelType::SMS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VOICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelType::VOICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChannelType::EMAIL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIChannelType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIChannelType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIChannelType::SMS:
            val = "SMS";
            break;
        case eOAIChannelType::VOICE:
            val = "VOICE";
            break;
        case eOAIChannelType::EMAIL:
            val = "EMAIL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIChannelType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIChannelType::eOAIChannelType OAIChannelType::getValue() const {
    return m_value;
}

void OAIChannelType::setValue(const OAIChannelType::eOAIChannelType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIChannelType::isSet() const {
    
    return m_value_isSet;
}

bool OAIChannelType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
