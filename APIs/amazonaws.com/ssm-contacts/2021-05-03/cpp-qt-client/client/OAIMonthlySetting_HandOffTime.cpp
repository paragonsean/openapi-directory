/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonthlySetting_HandOffTime.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonthlySetting_HandOffTime::OAIMonthlySetting_HandOffTime(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonthlySetting_HandOffTime::OAIMonthlySetting_HandOffTime() {
    this->initializeModel();
}

OAIMonthlySetting_HandOffTime::~OAIMonthlySetting_HandOffTime() {}

void OAIMonthlySetting_HandOffTime::initializeModel() {

    m_hour_of_day_isSet = false;
    m_hour_of_day_isValid = false;

    m_minute_of_hour_isSet = false;
    m_minute_of_hour_isValid = false;
}

void OAIMonthlySetting_HandOffTime::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonthlySetting_HandOffTime::fromJsonObject(QJsonObject json) {

    m_hour_of_day_isValid = ::OpenAPI::fromJsonValue(m_hour_of_day, json[QString("HourOfDay")]);
    m_hour_of_day_isSet = !json[QString("HourOfDay")].isNull() && m_hour_of_day_isValid;

    m_minute_of_hour_isValid = ::OpenAPI::fromJsonValue(m_minute_of_hour, json[QString("MinuteOfHour")]);
    m_minute_of_hour_isSet = !json[QString("MinuteOfHour")].isNull() && m_minute_of_hour_isValid;
}

QString OAIMonthlySetting_HandOffTime::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonthlySetting_HandOffTime::asJsonObject() const {
    QJsonObject obj;
    if (m_hour_of_day_isSet) {
        obj.insert(QString("HourOfDay"), ::OpenAPI::toJsonValue(m_hour_of_day));
    }
    if (m_minute_of_hour_isSet) {
        obj.insert(QString("MinuteOfHour"), ::OpenAPI::toJsonValue(m_minute_of_hour));
    }
    return obj;
}

qint32 OAIMonthlySetting_HandOffTime::getHourOfDay() const {
    return m_hour_of_day;
}
void OAIMonthlySetting_HandOffTime::setHourOfDay(const qint32 &hour_of_day) {
    m_hour_of_day = hour_of_day;
    m_hour_of_day_isSet = true;
}

bool OAIMonthlySetting_HandOffTime::is_hour_of_day_Set() const{
    return m_hour_of_day_isSet;
}

bool OAIMonthlySetting_HandOffTime::is_hour_of_day_Valid() const{
    return m_hour_of_day_isValid;
}

qint32 OAIMonthlySetting_HandOffTime::getMinuteOfHour() const {
    return m_minute_of_hour;
}
void OAIMonthlySetting_HandOffTime::setMinuteOfHour(const qint32 &minute_of_hour) {
    m_minute_of_hour = minute_of_hour;
    m_minute_of_hour_isSet = true;
}

bool OAIMonthlySetting_HandOffTime::is_minute_of_hour_Set() const{
    return m_minute_of_hour_isSet;
}

bool OAIMonthlySetting_HandOffTime::is_minute_of_hour_Valid() const{
    return m_minute_of_hour_isValid;
}

bool OAIMonthlySetting_HandOffTime::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hour_of_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minute_of_hour_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonthlySetting_HandOffTime::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hour_of_day_isValid && m_minute_of_hour_isValid && true;
}

} // namespace OpenAPI
