/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteRotationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteRotationRequest::OAIDeleteRotationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteRotationRequest::OAIDeleteRotationRequest() {
    this->initializeModel();
}

OAIDeleteRotationRequest::~OAIDeleteRotationRequest() {}

void OAIDeleteRotationRequest::initializeModel() {

    m_rotation_id_isSet = false;
    m_rotation_id_isValid = false;
}

void OAIDeleteRotationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteRotationRequest::fromJsonObject(QJsonObject json) {

    m_rotation_id_isValid = ::OpenAPI::fromJsonValue(m_rotation_id, json[QString("RotationId")]);
    m_rotation_id_isSet = !json[QString("RotationId")].isNull() && m_rotation_id_isValid;
}

QString OAIDeleteRotationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteRotationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_rotation_id_isSet) {
        obj.insert(QString("RotationId"), ::OpenAPI::toJsonValue(m_rotation_id));
    }
    return obj;
}

QString OAIDeleteRotationRequest::getRotationId() const {
    return m_rotation_id;
}
void OAIDeleteRotationRequest::setRotationId(const QString &rotation_id) {
    m_rotation_id = rotation_id;
    m_rotation_id_isSet = true;
}

bool OAIDeleteRotationRequest::is_rotation_id_Set() const{
    return m_rotation_id_isSet;
}

bool OAIDeleteRotationRequest::is_rotation_id_Valid() const{
    return m_rotation_id_isValid;
}

bool OAIDeleteRotationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rotation_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteRotationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rotation_id_isValid && true;
}

} // namespace OpenAPI
