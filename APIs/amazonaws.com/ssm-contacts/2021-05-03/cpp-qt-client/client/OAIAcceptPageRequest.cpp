/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcceptPageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcceptPageRequest::OAIAcceptPageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcceptPageRequest::OAIAcceptPageRequest() {
    this->initializeModel();
}

OAIAcceptPageRequest::~OAIAcceptPageRequest() {}

void OAIAcceptPageRequest::initializeModel() {

    m_page_id_isSet = false;
    m_page_id_isValid = false;

    m_contact_channel_id_isSet = false;
    m_contact_channel_id_isValid = false;

    m_accept_type_isSet = false;
    m_accept_type_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_accept_code_isSet = false;
    m_accept_code_isValid = false;

    m_accept_code_validation_isSet = false;
    m_accept_code_validation_isValid = false;
}

void OAIAcceptPageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcceptPageRequest::fromJsonObject(QJsonObject json) {

    m_page_id_isValid = ::OpenAPI::fromJsonValue(m_page_id, json[QString("PageId")]);
    m_page_id_isSet = !json[QString("PageId")].isNull() && m_page_id_isValid;

    m_contact_channel_id_isValid = ::OpenAPI::fromJsonValue(m_contact_channel_id, json[QString("ContactChannelId")]);
    m_contact_channel_id_isSet = !json[QString("ContactChannelId")].isNull() && m_contact_channel_id_isValid;

    m_accept_type_isValid = ::OpenAPI::fromJsonValue(m_accept_type, json[QString("AcceptType")]);
    m_accept_type_isSet = !json[QString("AcceptType")].isNull() && m_accept_type_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("Note")]);
    m_note_isSet = !json[QString("Note")].isNull() && m_note_isValid;

    m_accept_code_isValid = ::OpenAPI::fromJsonValue(m_accept_code, json[QString("AcceptCode")]);
    m_accept_code_isSet = !json[QString("AcceptCode")].isNull() && m_accept_code_isValid;

    m_accept_code_validation_isValid = ::OpenAPI::fromJsonValue(m_accept_code_validation, json[QString("AcceptCodeValidation")]);
    m_accept_code_validation_isSet = !json[QString("AcceptCodeValidation")].isNull() && m_accept_code_validation_isValid;
}

QString OAIAcceptPageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcceptPageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_page_id_isSet) {
        obj.insert(QString("PageId"), ::OpenAPI::toJsonValue(m_page_id));
    }
    if (m_contact_channel_id_isSet) {
        obj.insert(QString("ContactChannelId"), ::OpenAPI::toJsonValue(m_contact_channel_id));
    }
    if (m_accept_type.isSet()) {
        obj.insert(QString("AcceptType"), ::OpenAPI::toJsonValue(m_accept_type));
    }
    if (m_note_isSet) {
        obj.insert(QString("Note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_accept_code_isSet) {
        obj.insert(QString("AcceptCode"), ::OpenAPI::toJsonValue(m_accept_code));
    }
    if (m_accept_code_validation.isSet()) {
        obj.insert(QString("AcceptCodeValidation"), ::OpenAPI::toJsonValue(m_accept_code_validation));
    }
    return obj;
}

QString OAIAcceptPageRequest::getPageId() const {
    return m_page_id;
}
void OAIAcceptPageRequest::setPageId(const QString &page_id) {
    m_page_id = page_id;
    m_page_id_isSet = true;
}

bool OAIAcceptPageRequest::is_page_id_Set() const{
    return m_page_id_isSet;
}

bool OAIAcceptPageRequest::is_page_id_Valid() const{
    return m_page_id_isValid;
}

QString OAIAcceptPageRequest::getContactChannelId() const {
    return m_contact_channel_id;
}
void OAIAcceptPageRequest::setContactChannelId(const QString &contact_channel_id) {
    m_contact_channel_id = contact_channel_id;
    m_contact_channel_id_isSet = true;
}

bool OAIAcceptPageRequest::is_contact_channel_id_Set() const{
    return m_contact_channel_id_isSet;
}

bool OAIAcceptPageRequest::is_contact_channel_id_Valid() const{
    return m_contact_channel_id_isValid;
}

OAIAcceptType OAIAcceptPageRequest::getAcceptType() const {
    return m_accept_type;
}
void OAIAcceptPageRequest::setAcceptType(const OAIAcceptType &accept_type) {
    m_accept_type = accept_type;
    m_accept_type_isSet = true;
}

bool OAIAcceptPageRequest::is_accept_type_Set() const{
    return m_accept_type_isSet;
}

bool OAIAcceptPageRequest::is_accept_type_Valid() const{
    return m_accept_type_isValid;
}

QString OAIAcceptPageRequest::getNote() const {
    return m_note;
}
void OAIAcceptPageRequest::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIAcceptPageRequest::is_note_Set() const{
    return m_note_isSet;
}

bool OAIAcceptPageRequest::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIAcceptPageRequest::getAcceptCode() const {
    return m_accept_code;
}
void OAIAcceptPageRequest::setAcceptCode(const QString &accept_code) {
    m_accept_code = accept_code;
    m_accept_code_isSet = true;
}

bool OAIAcceptPageRequest::is_accept_code_Set() const{
    return m_accept_code_isSet;
}

bool OAIAcceptPageRequest::is_accept_code_Valid() const{
    return m_accept_code_isValid;
}

OAIAcceptCodeValidation OAIAcceptPageRequest::getAcceptCodeValidation() const {
    return m_accept_code_validation;
}
void OAIAcceptPageRequest::setAcceptCodeValidation(const OAIAcceptCodeValidation &accept_code_validation) {
    m_accept_code_validation = accept_code_validation;
    m_accept_code_validation_isSet = true;
}

bool OAIAcceptPageRequest::is_accept_code_validation_Set() const{
    return m_accept_code_validation_isSet;
}

bool OAIAcceptPageRequest::is_accept_code_validation_Valid() const{
    return m_accept_code_validation_isValid;
}

bool OAIAcceptPageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_page_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accept_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accept_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accept_code_validation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcceptPageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_page_id_isValid && m_accept_type_isValid && m_accept_code_isValid && true;
}

} // namespace OpenAPI
