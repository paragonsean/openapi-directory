/**
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateContactRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateContactRequest::OAIUpdateContactRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateContactRequest::OAIUpdateContactRequest() {
    this->initializeModel();
}

OAIUpdateContactRequest::~OAIUpdateContactRequest() {}

void OAIUpdateContactRequest::initializeModel() {

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;
}

void OAIUpdateContactRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateContactRequest::fromJsonObject(QJsonObject json) {

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("Plan")]);
    m_plan_isSet = !json[QString("Plan")].isNull() && m_plan_isValid;
}

QString OAIUpdateContactRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateContactRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("Plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    return obj;
}

QString OAIUpdateContactRequest::getContactId() const {
    return m_contact_id;
}
void OAIUpdateContactRequest::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAIUpdateContactRequest::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAIUpdateContactRequest::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

QString OAIUpdateContactRequest::getDisplayName() const {
    return m_display_name;
}
void OAIUpdateContactRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUpdateContactRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUpdateContactRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIUpdateContactRequest_Plan OAIUpdateContactRequest::getPlan() const {
    return m_plan;
}
void OAIUpdateContactRequest::setPlan(const OAIUpdateContactRequest_Plan &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIUpdateContactRequest::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIUpdateContactRequest::is_plan_Valid() const{
    return m_plan_isValid;
}

bool OAIUpdateContactRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateContactRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contact_id_isValid && true;
}

} // namespace OpenAPI
