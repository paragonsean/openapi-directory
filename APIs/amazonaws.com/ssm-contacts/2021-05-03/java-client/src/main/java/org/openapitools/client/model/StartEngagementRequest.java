/*
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartEngagementRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:32.829859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartEngagementRequest {
  public static final String SERIALIZED_NAME_CONTACT_ID = "ContactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private String contactId;

  public static final String SERIALIZED_NAME_SENDER = "Sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_PUBLIC_SUBJECT = "PublicSubject";
  @SerializedName(SERIALIZED_NAME_PUBLIC_SUBJECT)
  private String publicSubject;

  public static final String SERIALIZED_NAME_PUBLIC_CONTENT = "PublicContent";
  @SerializedName(SERIALIZED_NAME_PUBLIC_CONTENT)
  private String publicContent;

  public static final String SERIALIZED_NAME_INCIDENT_ID = "IncidentId";
  @SerializedName(SERIALIZED_NAME_INCIDENT_ID)
  private String incidentId;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_TOKEN = "IdempotencyToken";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_TOKEN)
  private String idempotencyToken;

  public StartEngagementRequest() {
  }

  public StartEngagementRequest contactId(String contactId) {
    this.contactId = contactId;
    return this;
  }

  /**
   * Get contactId
   * @return contactId
   */
  @javax.annotation.Nonnull
  public String getContactId() {
    return contactId;
  }

  public void setContactId(String contactId) {
    this.contactId = contactId;
  }


  public StartEngagementRequest sender(String sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nonnull
  public String getSender() {
    return sender;
  }

  public void setSender(String sender) {
    this.sender = sender;
  }


  public StartEngagementRequest subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public StartEngagementRequest content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public StartEngagementRequest publicSubject(String publicSubject) {
    this.publicSubject = publicSubject;
    return this;
  }

  /**
   * Get publicSubject
   * @return publicSubject
   */
  @javax.annotation.Nullable
  public String getPublicSubject() {
    return publicSubject;
  }

  public void setPublicSubject(String publicSubject) {
    this.publicSubject = publicSubject;
  }


  public StartEngagementRequest publicContent(String publicContent) {
    this.publicContent = publicContent;
    return this;
  }

  /**
   * Get publicContent
   * @return publicContent
   */
  @javax.annotation.Nullable
  public String getPublicContent() {
    return publicContent;
  }

  public void setPublicContent(String publicContent) {
    this.publicContent = publicContent;
  }


  public StartEngagementRequest incidentId(String incidentId) {
    this.incidentId = incidentId;
    return this;
  }

  /**
   * Get incidentId
   * @return incidentId
   */
  @javax.annotation.Nullable
  public String getIncidentId() {
    return incidentId;
  }

  public void setIncidentId(String incidentId) {
    this.incidentId = incidentId;
  }


  public StartEngagementRequest idempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
    return this;
  }

  /**
   * Get idempotencyToken
   * @return idempotencyToken
   */
  @javax.annotation.Nullable
  public String getIdempotencyToken() {
    return idempotencyToken;
  }

  public void setIdempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartEngagementRequest startEngagementRequest = (StartEngagementRequest) o;
    return Objects.equals(this.contactId, startEngagementRequest.contactId) &&
        Objects.equals(this.sender, startEngagementRequest.sender) &&
        Objects.equals(this.subject, startEngagementRequest.subject) &&
        Objects.equals(this.content, startEngagementRequest.content) &&
        Objects.equals(this.publicSubject, startEngagementRequest.publicSubject) &&
        Objects.equals(this.publicContent, startEngagementRequest.publicContent) &&
        Objects.equals(this.incidentId, startEngagementRequest.incidentId) &&
        Objects.equals(this.idempotencyToken, startEngagementRequest.idempotencyToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactId, sender, subject, content, publicSubject, publicContent, incidentId, idempotencyToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartEngagementRequest {\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    publicSubject: ").append(toIndentedString(publicSubject)).append("\n");
    sb.append("    publicContent: ").append(toIndentedString(publicContent)).append("\n");
    sb.append("    incidentId: ").append(toIndentedString(incidentId)).append("\n");
    sb.append("    idempotencyToken: ").append(toIndentedString(idempotencyToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContactId");
    openapiFields.add("Sender");
    openapiFields.add("Subject");
    openapiFields.add("Content");
    openapiFields.add("PublicSubject");
    openapiFields.add("PublicContent");
    openapiFields.add("IncidentId");
    openapiFields.add("IdempotencyToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ContactId");
    openapiRequiredFields.add("Sender");
    openapiRequiredFields.add("Subject");
    openapiRequiredFields.add("Content");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartEngagementRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartEngagementRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartEngagementRequest is not found in the empty JSON string", StartEngagementRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartEngagementRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartEngagementRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartEngagementRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ContactId`
      String.validateJsonElement(jsonObj.get("ContactId"));
      // validate the required field `Sender`
      String.validateJsonElement(jsonObj.get("Sender"));
      // validate the required field `Subject`
      String.validateJsonElement(jsonObj.get("Subject"));
      // validate the required field `Content`
      String.validateJsonElement(jsonObj.get("Content"));
      // validate the optional field `PublicSubject`
      if (jsonObj.get("PublicSubject") != null && !jsonObj.get("PublicSubject").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublicSubject"));
      }
      // validate the optional field `PublicContent`
      if (jsonObj.get("PublicContent") != null && !jsonObj.get("PublicContent").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublicContent"));
      }
      // validate the optional field `IncidentId`
      if (jsonObj.get("IncidentId") != null && !jsonObj.get("IncidentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IncidentId"));
      }
      // validate the optional field `IdempotencyToken`
      if (jsonObj.get("IdempotencyToken") != null && !jsonObj.get("IdempotencyToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IdempotencyToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartEngagementRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartEngagementRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartEngagementRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartEngagementRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartEngagementRequest>() {
           @Override
           public void write(JsonWriter out, StartEngagementRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartEngagementRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartEngagementRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartEngagementRequest
   * @throws IOException if the JSON string is invalid with respect to StartEngagementRequest
   */
  public static StartEngagementRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartEngagementRequest.class);
  }

  /**
   * Convert an instance of StartEngagementRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

