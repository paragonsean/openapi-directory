/*
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RotationRecurrence
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:32.829859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RotationRecurrence {
  public static final String SERIALIZED_NAME_MONTHLY_SETTINGS = "MonthlySettings";
  @SerializedName(SERIALIZED_NAME_MONTHLY_SETTINGS)
  private List monthlySettings;

  public static final String SERIALIZED_NAME_WEEKLY_SETTINGS = "WeeklySettings";
  @SerializedName(SERIALIZED_NAME_WEEKLY_SETTINGS)
  private List weeklySettings;

  public static final String SERIALIZED_NAME_DAILY_SETTINGS = "DailySettings";
  @SerializedName(SERIALIZED_NAME_DAILY_SETTINGS)
  private List dailySettings;

  public static final String SERIALIZED_NAME_NUMBER_OF_ON_CALLS = "NumberOfOnCalls";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ON_CALLS)
  private Integer numberOfOnCalls;

  public static final String SERIALIZED_NAME_SHIFT_COVERAGES = "ShiftCoverages";
  @SerializedName(SERIALIZED_NAME_SHIFT_COVERAGES)
  private Map shiftCoverages;

  public static final String SERIALIZED_NAME_RECURRENCE_MULTIPLIER = "RecurrenceMultiplier";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_MULTIPLIER)
  private Integer recurrenceMultiplier;

  public RotationRecurrence() {
  }

  public RotationRecurrence monthlySettings(List monthlySettings) {
    this.monthlySettings = monthlySettings;
    return this;
  }

  /**
   * Get monthlySettings
   * @return monthlySettings
   */
  @javax.annotation.Nullable
  public List getMonthlySettings() {
    return monthlySettings;
  }

  public void setMonthlySettings(List monthlySettings) {
    this.monthlySettings = monthlySettings;
  }


  public RotationRecurrence weeklySettings(List weeklySettings) {
    this.weeklySettings = weeklySettings;
    return this;
  }

  /**
   * Get weeklySettings
   * @return weeklySettings
   */
  @javax.annotation.Nullable
  public List getWeeklySettings() {
    return weeklySettings;
  }

  public void setWeeklySettings(List weeklySettings) {
    this.weeklySettings = weeklySettings;
  }


  public RotationRecurrence dailySettings(List dailySettings) {
    this.dailySettings = dailySettings;
    return this;
  }

  /**
   * Get dailySettings
   * @return dailySettings
   */
  @javax.annotation.Nullable
  public List getDailySettings() {
    return dailySettings;
  }

  public void setDailySettings(List dailySettings) {
    this.dailySettings = dailySettings;
  }


  public RotationRecurrence numberOfOnCalls(Integer numberOfOnCalls) {
    this.numberOfOnCalls = numberOfOnCalls;
    return this;
  }

  /**
   * Get numberOfOnCalls
   * @return numberOfOnCalls
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfOnCalls() {
    return numberOfOnCalls;
  }

  public void setNumberOfOnCalls(Integer numberOfOnCalls) {
    this.numberOfOnCalls = numberOfOnCalls;
  }


  public RotationRecurrence shiftCoverages(Map shiftCoverages) {
    this.shiftCoverages = shiftCoverages;
    return this;
  }

  /**
   * Get shiftCoverages
   * @return shiftCoverages
   */
  @javax.annotation.Nullable
  public Map getShiftCoverages() {
    return shiftCoverages;
  }

  public void setShiftCoverages(Map shiftCoverages) {
    this.shiftCoverages = shiftCoverages;
  }


  public RotationRecurrence recurrenceMultiplier(Integer recurrenceMultiplier) {
    this.recurrenceMultiplier = recurrenceMultiplier;
    return this;
  }

  /**
   * Get recurrenceMultiplier
   * @return recurrenceMultiplier
   */
  @javax.annotation.Nonnull
  public Integer getRecurrenceMultiplier() {
    return recurrenceMultiplier;
  }

  public void setRecurrenceMultiplier(Integer recurrenceMultiplier) {
    this.recurrenceMultiplier = recurrenceMultiplier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RotationRecurrence rotationRecurrence = (RotationRecurrence) o;
    return Objects.equals(this.monthlySettings, rotationRecurrence.monthlySettings) &&
        Objects.equals(this.weeklySettings, rotationRecurrence.weeklySettings) &&
        Objects.equals(this.dailySettings, rotationRecurrence.dailySettings) &&
        Objects.equals(this.numberOfOnCalls, rotationRecurrence.numberOfOnCalls) &&
        Objects.equals(this.shiftCoverages, rotationRecurrence.shiftCoverages) &&
        Objects.equals(this.recurrenceMultiplier, rotationRecurrence.recurrenceMultiplier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(monthlySettings, weeklySettings, dailySettings, numberOfOnCalls, shiftCoverages, recurrenceMultiplier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RotationRecurrence {\n");
    sb.append("    monthlySettings: ").append(toIndentedString(monthlySettings)).append("\n");
    sb.append("    weeklySettings: ").append(toIndentedString(weeklySettings)).append("\n");
    sb.append("    dailySettings: ").append(toIndentedString(dailySettings)).append("\n");
    sb.append("    numberOfOnCalls: ").append(toIndentedString(numberOfOnCalls)).append("\n");
    sb.append("    shiftCoverages: ").append(toIndentedString(shiftCoverages)).append("\n");
    sb.append("    recurrenceMultiplier: ").append(toIndentedString(recurrenceMultiplier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MonthlySettings");
    openapiFields.add("WeeklySettings");
    openapiFields.add("DailySettings");
    openapiFields.add("NumberOfOnCalls");
    openapiFields.add("ShiftCoverages");
    openapiFields.add("RecurrenceMultiplier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("NumberOfOnCalls");
    openapiRequiredFields.add("RecurrenceMultiplier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RotationRecurrence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RotationRecurrence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RotationRecurrence is not found in the empty JSON string", RotationRecurrence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RotationRecurrence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RotationRecurrence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RotationRecurrence.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MonthlySettings`
      if (jsonObj.get("MonthlySettings") != null && !jsonObj.get("MonthlySettings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MonthlySettings"));
      }
      // validate the optional field `WeeklySettings`
      if (jsonObj.get("WeeklySettings") != null && !jsonObj.get("WeeklySettings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("WeeklySettings"));
      }
      // validate the optional field `DailySettings`
      if (jsonObj.get("DailySettings") != null && !jsonObj.get("DailySettings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DailySettings"));
      }
      // validate the required field `NumberOfOnCalls`
      Integer.validateJsonElement(jsonObj.get("NumberOfOnCalls"));
      // validate the optional field `ShiftCoverages`
      if (jsonObj.get("ShiftCoverages") != null && !jsonObj.get("ShiftCoverages").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ShiftCoverages"));
      }
      // validate the required field `RecurrenceMultiplier`
      Integer.validateJsonElement(jsonObj.get("RecurrenceMultiplier"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RotationRecurrence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RotationRecurrence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RotationRecurrence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RotationRecurrence.class));

       return (TypeAdapter<T>) new TypeAdapter<RotationRecurrence>() {
           @Override
           public void write(JsonWriter out, RotationRecurrence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RotationRecurrence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RotationRecurrence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RotationRecurrence
   * @throws IOException if the JSON string is invalid with respect to RotationRecurrence
   */
  public static RotationRecurrence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RotationRecurrence.class);
  }

  /**
   * Convert an instance of RotationRecurrence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

