/*
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Incident Manager reaching out to a contact or escalation plan to engage contact during an incident.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:32.829859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Engagement {
  public static final String SERIALIZED_NAME_ENGAGEMENT_ARN = "EngagementArn";
  @SerializedName(SERIALIZED_NAME_ENGAGEMENT_ARN)
  private String engagementArn;

  public static final String SERIALIZED_NAME_CONTACT_ARN = "ContactArn";
  @SerializedName(SERIALIZED_NAME_CONTACT_ARN)
  private String contactArn;

  public static final String SERIALIZED_NAME_SENDER = "Sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private String sender;

  public static final String SERIALIZED_NAME_INCIDENT_ID = "IncidentId";
  @SerializedName(SERIALIZED_NAME_INCIDENT_ID)
  private String incidentId;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STOP_TIME = "StopTime";
  @SerializedName(SERIALIZED_NAME_STOP_TIME)
  private OffsetDateTime stopTime;

  public Engagement() {
  }

  public Engagement engagementArn(String engagementArn) {
    this.engagementArn = engagementArn;
    return this;
  }

  /**
   * Get engagementArn
   * @return engagementArn
   */
  @javax.annotation.Nonnull
  public String getEngagementArn() {
    return engagementArn;
  }

  public void setEngagementArn(String engagementArn) {
    this.engagementArn = engagementArn;
  }


  public Engagement contactArn(String contactArn) {
    this.contactArn = contactArn;
    return this;
  }

  /**
   * Get contactArn
   * @return contactArn
   */
  @javax.annotation.Nonnull
  public String getContactArn() {
    return contactArn;
  }

  public void setContactArn(String contactArn) {
    this.contactArn = contactArn;
  }


  public Engagement sender(String sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nonnull
  public String getSender() {
    return sender;
  }

  public void setSender(String sender) {
    this.sender = sender;
  }


  public Engagement incidentId(String incidentId) {
    this.incidentId = incidentId;
    return this;
  }

  /**
   * Get incidentId
   * @return incidentId
   */
  @javax.annotation.Nullable
  public String getIncidentId() {
    return incidentId;
  }

  public void setIncidentId(String incidentId) {
    this.incidentId = incidentId;
  }


  public Engagement startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Engagement stopTime(OffsetDateTime stopTime) {
    this.stopTime = stopTime;
    return this;
  }

  /**
   * Get stopTime
   * @return stopTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStopTime() {
    return stopTime;
  }

  public void setStopTime(OffsetDateTime stopTime) {
    this.stopTime = stopTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Engagement engagement = (Engagement) o;
    return Objects.equals(this.engagementArn, engagement.engagementArn) &&
        Objects.equals(this.contactArn, engagement.contactArn) &&
        Objects.equals(this.sender, engagement.sender) &&
        Objects.equals(this.incidentId, engagement.incidentId) &&
        Objects.equals(this.startTime, engagement.startTime) &&
        Objects.equals(this.stopTime, engagement.stopTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engagementArn, contactArn, sender, incidentId, startTime, stopTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Engagement {\n");
    sb.append("    engagementArn: ").append(toIndentedString(engagementArn)).append("\n");
    sb.append("    contactArn: ").append(toIndentedString(contactArn)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    incidentId: ").append(toIndentedString(incidentId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    stopTime: ").append(toIndentedString(stopTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EngagementArn");
    openapiFields.add("ContactArn");
    openapiFields.add("Sender");
    openapiFields.add("IncidentId");
    openapiFields.add("StartTime");
    openapiFields.add("StopTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EngagementArn");
    openapiRequiredFields.add("ContactArn");
    openapiRequiredFields.add("Sender");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Engagement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Engagement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Engagement is not found in the empty JSON string", Engagement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Engagement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Engagement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Engagement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `EngagementArn`
      String.validateJsonElement(jsonObj.get("EngagementArn"));
      // validate the required field `ContactArn`
      String.validateJsonElement(jsonObj.get("ContactArn"));
      // validate the required field `Sender`
      String.validateJsonElement(jsonObj.get("Sender"));
      // validate the optional field `IncidentId`
      if (jsonObj.get("IncidentId") != null && !jsonObj.get("IncidentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IncidentId"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `StopTime`
      if (jsonObj.get("StopTime") != null && !jsonObj.get("StopTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StopTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Engagement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Engagement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Engagement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Engagement.class));

       return (TypeAdapter<T>) new TypeAdapter<Engagement>() {
           @Override
           public void write(JsonWriter out, Engagement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Engagement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Engagement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Engagement
   * @throws IOException if the JSON string is invalid with respect to Engagement
   */
  public static Engagement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Engagement.class);
  }

  /**
   * Convert an instance of Engagement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

