/*
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRotationOverrideResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:32.829859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRotationOverrideResult {
  public static final String SERIALIZED_NAME_ROTATION_OVERRIDE_ID = "RotationOverrideId";
  @SerializedName(SERIALIZED_NAME_ROTATION_OVERRIDE_ID)
  private String rotationOverrideId;

  public static final String SERIALIZED_NAME_ROTATION_ARN = "RotationArn";
  @SerializedName(SERIALIZED_NAME_ROTATION_ARN)
  private String rotationArn;

  public static final String SERIALIZED_NAME_NEW_CONTACT_IDS = "NewContactIds";
  @SerializedName(SERIALIZED_NAME_NEW_CONTACT_IDS)
  private List newContactIds;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_CREATE_TIME = "CreateTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public GetRotationOverrideResult() {
  }

  public GetRotationOverrideResult rotationOverrideId(String rotationOverrideId) {
    this.rotationOverrideId = rotationOverrideId;
    return this;
  }

  /**
   * Get rotationOverrideId
   * @return rotationOverrideId
   */
  @javax.annotation.Nullable
  public String getRotationOverrideId() {
    return rotationOverrideId;
  }

  public void setRotationOverrideId(String rotationOverrideId) {
    this.rotationOverrideId = rotationOverrideId;
  }


  public GetRotationOverrideResult rotationArn(String rotationArn) {
    this.rotationArn = rotationArn;
    return this;
  }

  /**
   * Get rotationArn
   * @return rotationArn
   */
  @javax.annotation.Nullable
  public String getRotationArn() {
    return rotationArn;
  }

  public void setRotationArn(String rotationArn) {
    this.rotationArn = rotationArn;
  }


  public GetRotationOverrideResult newContactIds(List newContactIds) {
    this.newContactIds = newContactIds;
    return this;
  }

  /**
   * Get newContactIds
   * @return newContactIds
   */
  @javax.annotation.Nullable
  public List getNewContactIds() {
    return newContactIds;
  }

  public void setNewContactIds(List newContactIds) {
    this.newContactIds = newContactIds;
  }


  public GetRotationOverrideResult startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public GetRotationOverrideResult endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public GetRotationOverrideResult createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRotationOverrideResult getRotationOverrideResult = (GetRotationOverrideResult) o;
    return Objects.equals(this.rotationOverrideId, getRotationOverrideResult.rotationOverrideId) &&
        Objects.equals(this.rotationArn, getRotationOverrideResult.rotationArn) &&
        Objects.equals(this.newContactIds, getRotationOverrideResult.newContactIds) &&
        Objects.equals(this.startTime, getRotationOverrideResult.startTime) &&
        Objects.equals(this.endTime, getRotationOverrideResult.endTime) &&
        Objects.equals(this.createTime, getRotationOverrideResult.createTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rotationOverrideId, rotationArn, newContactIds, startTime, endTime, createTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRotationOverrideResult {\n");
    sb.append("    rotationOverrideId: ").append(toIndentedString(rotationOverrideId)).append("\n");
    sb.append("    rotationArn: ").append(toIndentedString(rotationArn)).append("\n");
    sb.append("    newContactIds: ").append(toIndentedString(newContactIds)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RotationOverrideId");
    openapiFields.add("RotationArn");
    openapiFields.add("NewContactIds");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("CreateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRotationOverrideResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRotationOverrideResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRotationOverrideResult is not found in the empty JSON string", GetRotationOverrideResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRotationOverrideResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRotationOverrideResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RotationOverrideId`
      if (jsonObj.get("RotationOverrideId") != null && !jsonObj.get("RotationOverrideId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RotationOverrideId"));
      }
      // validate the optional field `RotationArn`
      if (jsonObj.get("RotationArn") != null && !jsonObj.get("RotationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RotationArn"));
      }
      // validate the optional field `NewContactIds`
      if (jsonObj.get("NewContactIds") != null && !jsonObj.get("NewContactIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NewContactIds"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `CreateTime`
      if (jsonObj.get("CreateTime") != null && !jsonObj.get("CreateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreateTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRotationOverrideResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRotationOverrideResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRotationOverrideResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRotationOverrideResult.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRotationOverrideResult>() {
           @Override
           public void write(JsonWriter out, GetRotationOverrideResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRotationOverrideResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRotationOverrideResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRotationOverrideResult
   * @throws IOException if the JSON string is invalid with respect to GetRotationOverrideResult
   */
  public static GetRotationOverrideResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRotationOverrideResult.class);
  }

  /**
   * Convert an instance of GetRotationOverrideResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

