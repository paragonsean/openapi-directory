/*
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRotationOverrideRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:32.829859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRotationOverrideRequest {
  public static final String SERIALIZED_NAME_ROTATION_ID = "RotationId";
  @SerializedName(SERIALIZED_NAME_ROTATION_ID)
  private String rotationId;

  public static final String SERIALIZED_NAME_NEW_CONTACT_IDS = "NewContactIds";
  @SerializedName(SERIALIZED_NAME_NEW_CONTACT_IDS)
  private List newContactIds;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_TOKEN = "IdempotencyToken";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_TOKEN)
  private String idempotencyToken;

  public CreateRotationOverrideRequest() {
  }

  public CreateRotationOverrideRequest rotationId(String rotationId) {
    this.rotationId = rotationId;
    return this;
  }

  /**
   * Get rotationId
   * @return rotationId
   */
  @javax.annotation.Nonnull
  public String getRotationId() {
    return rotationId;
  }

  public void setRotationId(String rotationId) {
    this.rotationId = rotationId;
  }


  public CreateRotationOverrideRequest newContactIds(List newContactIds) {
    this.newContactIds = newContactIds;
    return this;
  }

  /**
   * Get newContactIds
   * @return newContactIds
   */
  @javax.annotation.Nonnull
  public List getNewContactIds() {
    return newContactIds;
  }

  public void setNewContactIds(List newContactIds) {
    this.newContactIds = newContactIds;
  }


  public CreateRotationOverrideRequest startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public CreateRotationOverrideRequest endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public CreateRotationOverrideRequest idempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
    return this;
  }

  /**
   * Get idempotencyToken
   * @return idempotencyToken
   */
  @javax.annotation.Nullable
  public String getIdempotencyToken() {
    return idempotencyToken;
  }

  public void setIdempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRotationOverrideRequest createRotationOverrideRequest = (CreateRotationOverrideRequest) o;
    return Objects.equals(this.rotationId, createRotationOverrideRequest.rotationId) &&
        Objects.equals(this.newContactIds, createRotationOverrideRequest.newContactIds) &&
        Objects.equals(this.startTime, createRotationOverrideRequest.startTime) &&
        Objects.equals(this.endTime, createRotationOverrideRequest.endTime) &&
        Objects.equals(this.idempotencyToken, createRotationOverrideRequest.idempotencyToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rotationId, newContactIds, startTime, endTime, idempotencyToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRotationOverrideRequest {\n");
    sb.append("    rotationId: ").append(toIndentedString(rotationId)).append("\n");
    sb.append("    newContactIds: ").append(toIndentedString(newContactIds)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    idempotencyToken: ").append(toIndentedString(idempotencyToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RotationId");
    openapiFields.add("NewContactIds");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("IdempotencyToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RotationId");
    openapiRequiredFields.add("NewContactIds");
    openapiRequiredFields.add("StartTime");
    openapiRequiredFields.add("EndTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRotationOverrideRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRotationOverrideRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRotationOverrideRequest is not found in the empty JSON string", CreateRotationOverrideRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRotationOverrideRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRotationOverrideRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRotationOverrideRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `RotationId`
      String.validateJsonElement(jsonObj.get("RotationId"));
      // validate the required field `NewContactIds`
      List.validateJsonElement(jsonObj.get("NewContactIds"));
      // validate the required field `StartTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      // validate the required field `EndTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      // validate the optional field `IdempotencyToken`
      if (jsonObj.get("IdempotencyToken") != null && !jsonObj.get("IdempotencyToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IdempotencyToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRotationOverrideRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRotationOverrideRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRotationOverrideRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRotationOverrideRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRotationOverrideRequest>() {
           @Override
           public void write(JsonWriter out, CreateRotationOverrideRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRotationOverrideRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRotationOverrideRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRotationOverrideRequest
   * @throws IOException if the JSON string is invalid with respect to CreateRotationOverrideRequest
   */
  public static CreateRotationOverrideRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRotationOverrideRequest.class);
  }

  /**
   * Convert an instance of CreateRotationOverrideRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

