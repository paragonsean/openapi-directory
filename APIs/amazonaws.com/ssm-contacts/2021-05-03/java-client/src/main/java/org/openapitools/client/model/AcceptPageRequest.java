/*
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AcceptCodeValidation;
import org.openapitools.client.model.AcceptType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AcceptPageRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:32.829859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AcceptPageRequest {
  public static final String SERIALIZED_NAME_PAGE_ID = "PageId";
  @SerializedName(SERIALIZED_NAME_PAGE_ID)
  private String pageId;

  public static final String SERIALIZED_NAME_CONTACT_CHANNEL_ID = "ContactChannelId";
  @SerializedName(SERIALIZED_NAME_CONTACT_CHANNEL_ID)
  private String contactChannelId;

  public static final String SERIALIZED_NAME_ACCEPT_TYPE = "AcceptType";
  @SerializedName(SERIALIZED_NAME_ACCEPT_TYPE)
  private AcceptType acceptType;

  public static final String SERIALIZED_NAME_NOTE = "Note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_ACCEPT_CODE = "AcceptCode";
  @SerializedName(SERIALIZED_NAME_ACCEPT_CODE)
  private String acceptCode;

  public static final String SERIALIZED_NAME_ACCEPT_CODE_VALIDATION = "AcceptCodeValidation";
  @SerializedName(SERIALIZED_NAME_ACCEPT_CODE_VALIDATION)
  private AcceptCodeValidation acceptCodeValidation;

  public AcceptPageRequest() {
  }

  public AcceptPageRequest pageId(String pageId) {
    this.pageId = pageId;
    return this;
  }

  /**
   * Get pageId
   * @return pageId
   */
  @javax.annotation.Nonnull
  public String getPageId() {
    return pageId;
  }

  public void setPageId(String pageId) {
    this.pageId = pageId;
  }


  public AcceptPageRequest contactChannelId(String contactChannelId) {
    this.contactChannelId = contactChannelId;
    return this;
  }

  /**
   * Get contactChannelId
   * @return contactChannelId
   */
  @javax.annotation.Nullable
  public String getContactChannelId() {
    return contactChannelId;
  }

  public void setContactChannelId(String contactChannelId) {
    this.contactChannelId = contactChannelId;
  }


  public AcceptPageRequest acceptType(AcceptType acceptType) {
    this.acceptType = acceptType;
    return this;
  }

  /**
   * Get acceptType
   * @return acceptType
   */
  @javax.annotation.Nonnull
  public AcceptType getAcceptType() {
    return acceptType;
  }

  public void setAcceptType(AcceptType acceptType) {
    this.acceptType = acceptType;
  }


  public AcceptPageRequest note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public AcceptPageRequest acceptCode(String acceptCode) {
    this.acceptCode = acceptCode;
    return this;
  }

  /**
   * Get acceptCode
   * @return acceptCode
   */
  @javax.annotation.Nonnull
  public String getAcceptCode() {
    return acceptCode;
  }

  public void setAcceptCode(String acceptCode) {
    this.acceptCode = acceptCode;
  }


  public AcceptPageRequest acceptCodeValidation(AcceptCodeValidation acceptCodeValidation) {
    this.acceptCodeValidation = acceptCodeValidation;
    return this;
  }

  /**
   * Get acceptCodeValidation
   * @return acceptCodeValidation
   */
  @javax.annotation.Nullable
  public AcceptCodeValidation getAcceptCodeValidation() {
    return acceptCodeValidation;
  }

  public void setAcceptCodeValidation(AcceptCodeValidation acceptCodeValidation) {
    this.acceptCodeValidation = acceptCodeValidation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AcceptPageRequest acceptPageRequest = (AcceptPageRequest) o;
    return Objects.equals(this.pageId, acceptPageRequest.pageId) &&
        Objects.equals(this.contactChannelId, acceptPageRequest.contactChannelId) &&
        Objects.equals(this.acceptType, acceptPageRequest.acceptType) &&
        Objects.equals(this.note, acceptPageRequest.note) &&
        Objects.equals(this.acceptCode, acceptPageRequest.acceptCode) &&
        Objects.equals(this.acceptCodeValidation, acceptPageRequest.acceptCodeValidation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageId, contactChannelId, acceptType, note, acceptCode, acceptCodeValidation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AcceptPageRequest {\n");
    sb.append("    pageId: ").append(toIndentedString(pageId)).append("\n");
    sb.append("    contactChannelId: ").append(toIndentedString(contactChannelId)).append("\n");
    sb.append("    acceptType: ").append(toIndentedString(acceptType)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    acceptCode: ").append(toIndentedString(acceptCode)).append("\n");
    sb.append("    acceptCodeValidation: ").append(toIndentedString(acceptCodeValidation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PageId");
    openapiFields.add("ContactChannelId");
    openapiFields.add("AcceptType");
    openapiFields.add("Note");
    openapiFields.add("AcceptCode");
    openapiFields.add("AcceptCodeValidation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PageId");
    openapiRequiredFields.add("AcceptType");
    openapiRequiredFields.add("AcceptCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AcceptPageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AcceptPageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AcceptPageRequest is not found in the empty JSON string", AcceptPageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AcceptPageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AcceptPageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AcceptPageRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `PageId`
      String.validateJsonElement(jsonObj.get("PageId"));
      // validate the optional field `ContactChannelId`
      if (jsonObj.get("ContactChannelId") != null && !jsonObj.get("ContactChannelId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContactChannelId"));
      }
      // validate the required field `AcceptType`
      AcceptType.validateJsonElement(jsonObj.get("AcceptType"));
      // validate the optional field `Note`
      if (jsonObj.get("Note") != null && !jsonObj.get("Note").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Note"));
      }
      // validate the required field `AcceptCode`
      String.validateJsonElement(jsonObj.get("AcceptCode"));
      // validate the optional field `AcceptCodeValidation`
      if (jsonObj.get("AcceptCodeValidation") != null && !jsonObj.get("AcceptCodeValidation").isJsonNull()) {
        AcceptCodeValidation.validateJsonElement(jsonObj.get("AcceptCodeValidation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AcceptPageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AcceptPageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AcceptPageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AcceptPageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AcceptPageRequest>() {
           @Override
           public void write(JsonWriter out, AcceptPageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AcceptPageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AcceptPageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AcceptPageRequest
   * @throws IOException if the JSON string is invalid with respect to AcceptPageRequest
   */
  public static AcceptPageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AcceptPageRequest.class);
  }

  /**
   * Convert an instance of AcceptPageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

