/*
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelType;
import org.openapitools.client.model.CreateContactChannelRequestDeliveryAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateContactChannelRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:32.829859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateContactChannelRequest {
  public static final String SERIALIZED_NAME_CONTACT_ID = "ContactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private String contactId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ChannelType type;

  public static final String SERIALIZED_NAME_DELIVERY_ADDRESS = "DeliveryAddress";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ADDRESS)
  private CreateContactChannelRequestDeliveryAddress deliveryAddress;

  public static final String SERIALIZED_NAME_DEFER_ACTIVATION = "DeferActivation";
  @SerializedName(SERIALIZED_NAME_DEFER_ACTIVATION)
  private Boolean deferActivation;

  public static final String SERIALIZED_NAME_IDEMPOTENCY_TOKEN = "IdempotencyToken";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_TOKEN)
  private String idempotencyToken;

  public CreateContactChannelRequest() {
  }

  public CreateContactChannelRequest contactId(String contactId) {
    this.contactId = contactId;
    return this;
  }

  /**
   * Get contactId
   * @return contactId
   */
  @javax.annotation.Nonnull
  public String getContactId() {
    return contactId;
  }

  public void setContactId(String contactId) {
    this.contactId = contactId;
  }


  public CreateContactChannelRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateContactChannelRequest type(ChannelType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public ChannelType getType() {
    return type;
  }

  public void setType(ChannelType type) {
    this.type = type;
  }


  public CreateContactChannelRequest deliveryAddress(CreateContactChannelRequestDeliveryAddress deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
    return this;
  }

  /**
   * Get deliveryAddress
   * @return deliveryAddress
   */
  @javax.annotation.Nonnull
  public CreateContactChannelRequestDeliveryAddress getDeliveryAddress() {
    return deliveryAddress;
  }

  public void setDeliveryAddress(CreateContactChannelRequestDeliveryAddress deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
  }


  public CreateContactChannelRequest deferActivation(Boolean deferActivation) {
    this.deferActivation = deferActivation;
    return this;
  }

  /**
   * Get deferActivation
   * @return deferActivation
   */
  @javax.annotation.Nullable
  public Boolean getDeferActivation() {
    return deferActivation;
  }

  public void setDeferActivation(Boolean deferActivation) {
    this.deferActivation = deferActivation;
  }


  public CreateContactChannelRequest idempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
    return this;
  }

  /**
   * Get idempotencyToken
   * @return idempotencyToken
   */
  @javax.annotation.Nullable
  public String getIdempotencyToken() {
    return idempotencyToken;
  }

  public void setIdempotencyToken(String idempotencyToken) {
    this.idempotencyToken = idempotencyToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateContactChannelRequest createContactChannelRequest = (CreateContactChannelRequest) o;
    return Objects.equals(this.contactId, createContactChannelRequest.contactId) &&
        Objects.equals(this.name, createContactChannelRequest.name) &&
        Objects.equals(this.type, createContactChannelRequest.type) &&
        Objects.equals(this.deliveryAddress, createContactChannelRequest.deliveryAddress) &&
        Objects.equals(this.deferActivation, createContactChannelRequest.deferActivation) &&
        Objects.equals(this.idempotencyToken, createContactChannelRequest.idempotencyToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactId, name, type, deliveryAddress, deferActivation, idempotencyToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateContactChannelRequest {\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    deliveryAddress: ").append(toIndentedString(deliveryAddress)).append("\n");
    sb.append("    deferActivation: ").append(toIndentedString(deferActivation)).append("\n");
    sb.append("    idempotencyToken: ").append(toIndentedString(idempotencyToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContactId");
    openapiFields.add("Name");
    openapiFields.add("Type");
    openapiFields.add("DeliveryAddress");
    openapiFields.add("DeferActivation");
    openapiFields.add("IdempotencyToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ContactId");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("DeliveryAddress");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateContactChannelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateContactChannelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateContactChannelRequest is not found in the empty JSON string", CreateContactChannelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateContactChannelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateContactChannelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateContactChannelRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ContactId`
      String.validateJsonElement(jsonObj.get("ContactId"));
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `Type`
      ChannelType.validateJsonElement(jsonObj.get("Type"));
      // validate the required field `DeliveryAddress`
      CreateContactChannelRequestDeliveryAddress.validateJsonElement(jsonObj.get("DeliveryAddress"));
      // validate the optional field `DeferActivation`
      if (jsonObj.get("DeferActivation") != null && !jsonObj.get("DeferActivation").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeferActivation"));
      }
      // validate the optional field `IdempotencyToken`
      if (jsonObj.get("IdempotencyToken") != null && !jsonObj.get("IdempotencyToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IdempotencyToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateContactChannelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateContactChannelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateContactChannelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateContactChannelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateContactChannelRequest>() {
           @Override
           public void write(JsonWriter out, CreateContactChannelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateContactChannelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateContactChannelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateContactChannelRequest
   * @throws IOException if the JSON string is invalid with respect to CreateContactChannelRequest
   */
  public static CreateContactChannelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateContactChannelRequest.class);
  }

  /**
   * Convert an instance of CreateContactChannelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

