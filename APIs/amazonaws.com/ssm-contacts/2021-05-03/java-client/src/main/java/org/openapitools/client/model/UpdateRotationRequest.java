/*
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateRotationRequestRecurrence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateRotationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:32.829859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateRotationRequest {
  public static final String SERIALIZED_NAME_ROTATION_ID = "RotationId";
  @SerializedName(SERIALIZED_NAME_ROTATION_ID)
  private String rotationId;

  public static final String SERIALIZED_NAME_CONTACT_IDS = "ContactIds";
  @SerializedName(SERIALIZED_NAME_CONTACT_IDS)
  private List contactIds;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TIME_ZONE_ID = "TimeZoneId";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_ID)
  private String timeZoneId;

  public static final String SERIALIZED_NAME_RECURRENCE = "Recurrence";
  @SerializedName(SERIALIZED_NAME_RECURRENCE)
  private UpdateRotationRequestRecurrence recurrence;

  public UpdateRotationRequest() {
  }

  public UpdateRotationRequest rotationId(String rotationId) {
    this.rotationId = rotationId;
    return this;
  }

  /**
   * Get rotationId
   * @return rotationId
   */
  @javax.annotation.Nonnull
  public String getRotationId() {
    return rotationId;
  }

  public void setRotationId(String rotationId) {
    this.rotationId = rotationId;
  }


  public UpdateRotationRequest contactIds(List contactIds) {
    this.contactIds = contactIds;
    return this;
  }

  /**
   * Get contactIds
   * @return contactIds
   */
  @javax.annotation.Nullable
  public List getContactIds() {
    return contactIds;
  }

  public void setContactIds(List contactIds) {
    this.contactIds = contactIds;
  }


  public UpdateRotationRequest startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public UpdateRotationRequest timeZoneId(String timeZoneId) {
    this.timeZoneId = timeZoneId;
    return this;
  }

  /**
   * Get timeZoneId
   * @return timeZoneId
   */
  @javax.annotation.Nullable
  public String getTimeZoneId() {
    return timeZoneId;
  }

  public void setTimeZoneId(String timeZoneId) {
    this.timeZoneId = timeZoneId;
  }


  public UpdateRotationRequest recurrence(UpdateRotationRequestRecurrence recurrence) {
    this.recurrence = recurrence;
    return this;
  }

  /**
   * Get recurrence
   * @return recurrence
   */
  @javax.annotation.Nonnull
  public UpdateRotationRequestRecurrence getRecurrence() {
    return recurrence;
  }

  public void setRecurrence(UpdateRotationRequestRecurrence recurrence) {
    this.recurrence = recurrence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateRotationRequest updateRotationRequest = (UpdateRotationRequest) o;
    return Objects.equals(this.rotationId, updateRotationRequest.rotationId) &&
        Objects.equals(this.contactIds, updateRotationRequest.contactIds) &&
        Objects.equals(this.startTime, updateRotationRequest.startTime) &&
        Objects.equals(this.timeZoneId, updateRotationRequest.timeZoneId) &&
        Objects.equals(this.recurrence, updateRotationRequest.recurrence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rotationId, contactIds, startTime, timeZoneId, recurrence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateRotationRequest {\n");
    sb.append("    rotationId: ").append(toIndentedString(rotationId)).append("\n");
    sb.append("    contactIds: ").append(toIndentedString(contactIds)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    timeZoneId: ").append(toIndentedString(timeZoneId)).append("\n");
    sb.append("    recurrence: ").append(toIndentedString(recurrence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RotationId");
    openapiFields.add("ContactIds");
    openapiFields.add("StartTime");
    openapiFields.add("TimeZoneId");
    openapiFields.add("Recurrence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RotationId");
    openapiRequiredFields.add("Recurrence");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateRotationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateRotationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateRotationRequest is not found in the empty JSON string", UpdateRotationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateRotationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateRotationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateRotationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `RotationId`
      String.validateJsonElement(jsonObj.get("RotationId"));
      // validate the optional field `ContactIds`
      if (jsonObj.get("ContactIds") != null && !jsonObj.get("ContactIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ContactIds"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `TimeZoneId`
      if (jsonObj.get("TimeZoneId") != null && !jsonObj.get("TimeZoneId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TimeZoneId"));
      }
      // validate the required field `Recurrence`
      UpdateRotationRequestRecurrence.validateJsonElement(jsonObj.get("Recurrence"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateRotationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateRotationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateRotationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateRotationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateRotationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateRotationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateRotationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateRotationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateRotationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateRotationRequest
   */
  public static UpdateRotationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateRotationRequest.class);
  }

  /**
   * Convert an instance of UpdateRotationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

