/*
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RotationShiftShiftDetails;
import org.openapitools.client.model.ShiftType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a shift that belongs to an on-call rotation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:32.829859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RotationShift {
  public static final String SERIALIZED_NAME_CONTACT_IDS = "ContactIds";
  @SerializedName(SERIALIZED_NAME_CONTACT_IDS)
  private List contactIds;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ShiftType type;

  public static final String SERIALIZED_NAME_SHIFT_DETAILS = "ShiftDetails";
  @SerializedName(SERIALIZED_NAME_SHIFT_DETAILS)
  private RotationShiftShiftDetails shiftDetails;

  public RotationShift() {
  }

  public RotationShift contactIds(List contactIds) {
    this.contactIds = contactIds;
    return this;
  }

  /**
   * Get contactIds
   * @return contactIds
   */
  @javax.annotation.Nullable
  public List getContactIds() {
    return contactIds;
  }

  public void setContactIds(List contactIds) {
    this.contactIds = contactIds;
  }


  public RotationShift startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public RotationShift endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public RotationShift type(ShiftType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ShiftType getType() {
    return type;
  }

  public void setType(ShiftType type) {
    this.type = type;
  }


  public RotationShift shiftDetails(RotationShiftShiftDetails shiftDetails) {
    this.shiftDetails = shiftDetails;
    return this;
  }

  /**
   * Get shiftDetails
   * @return shiftDetails
   */
  @javax.annotation.Nullable
  public RotationShiftShiftDetails getShiftDetails() {
    return shiftDetails;
  }

  public void setShiftDetails(RotationShiftShiftDetails shiftDetails) {
    this.shiftDetails = shiftDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RotationShift rotationShift = (RotationShift) o;
    return Objects.equals(this.contactIds, rotationShift.contactIds) &&
        Objects.equals(this.startTime, rotationShift.startTime) &&
        Objects.equals(this.endTime, rotationShift.endTime) &&
        Objects.equals(this.type, rotationShift.type) &&
        Objects.equals(this.shiftDetails, rotationShift.shiftDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactIds, startTime, endTime, type, shiftDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RotationShift {\n");
    sb.append("    contactIds: ").append(toIndentedString(contactIds)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    shiftDetails: ").append(toIndentedString(shiftDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContactIds");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("Type");
    openapiFields.add("ShiftDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StartTime");
    openapiRequiredFields.add("EndTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RotationShift
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RotationShift.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RotationShift is not found in the empty JSON string", RotationShift.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RotationShift.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RotationShift` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RotationShift.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ContactIds`
      if (jsonObj.get("ContactIds") != null && !jsonObj.get("ContactIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ContactIds"));
      }
      // validate the required field `StartTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      // validate the required field `EndTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ShiftType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `ShiftDetails`
      if (jsonObj.get("ShiftDetails") != null && !jsonObj.get("ShiftDetails").isJsonNull()) {
        RotationShiftShiftDetails.validateJsonElement(jsonObj.get("ShiftDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RotationShift.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RotationShift' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RotationShift> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RotationShift.class));

       return (TypeAdapter<T>) new TypeAdapter<RotationShift>() {
           @Override
           public void write(JsonWriter out, RotationShift value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RotationShift read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RotationShift given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RotationShift
   * @throws IOException if the JSON string is invalid with respect to RotationShift
   */
  public static RotationShift fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RotationShift.class);
  }

  /**
   * Convert an instance of RotationShift to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

