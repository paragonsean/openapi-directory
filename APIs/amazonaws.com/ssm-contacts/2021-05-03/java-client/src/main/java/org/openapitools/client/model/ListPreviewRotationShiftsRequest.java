/*
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListPreviewRotationShiftsRequestRecurrence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListPreviewRotationShiftsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:32.829859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListPreviewRotationShiftsRequest {
  public static final String SERIALIZED_NAME_ROTATION_START_TIME = "RotationStartTime";
  @SerializedName(SERIALIZED_NAME_ROTATION_START_TIME)
  private OffsetDateTime rotationStartTime;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_MEMBERS = "Members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List members;

  public static final String SERIALIZED_NAME_TIME_ZONE_ID = "TimeZoneId";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_ID)
  private String timeZoneId;

  public static final String SERIALIZED_NAME_RECURRENCE = "Recurrence";
  @SerializedName(SERIALIZED_NAME_RECURRENCE)
  private ListPreviewRotationShiftsRequestRecurrence recurrence;

  public static final String SERIALIZED_NAME_OVERRIDES = "Overrides";
  @SerializedName(SERIALIZED_NAME_OVERRIDES)
  private List overrides;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public ListPreviewRotationShiftsRequest() {
  }

  public ListPreviewRotationShiftsRequest rotationStartTime(OffsetDateTime rotationStartTime) {
    this.rotationStartTime = rotationStartTime;
    return this;
  }

  /**
   * Get rotationStartTime
   * @return rotationStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRotationStartTime() {
    return rotationStartTime;
  }

  public void setRotationStartTime(OffsetDateTime rotationStartTime) {
    this.rotationStartTime = rotationStartTime;
  }


  public ListPreviewRotationShiftsRequest startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ListPreviewRotationShiftsRequest endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ListPreviewRotationShiftsRequest members(List members) {
    this.members = members;
    return this;
  }

  /**
   * Get members
   * @return members
   */
  @javax.annotation.Nonnull
  public List getMembers() {
    return members;
  }

  public void setMembers(List members) {
    this.members = members;
  }


  public ListPreviewRotationShiftsRequest timeZoneId(String timeZoneId) {
    this.timeZoneId = timeZoneId;
    return this;
  }

  /**
   * Get timeZoneId
   * @return timeZoneId
   */
  @javax.annotation.Nonnull
  public String getTimeZoneId() {
    return timeZoneId;
  }

  public void setTimeZoneId(String timeZoneId) {
    this.timeZoneId = timeZoneId;
  }


  public ListPreviewRotationShiftsRequest recurrence(ListPreviewRotationShiftsRequestRecurrence recurrence) {
    this.recurrence = recurrence;
    return this;
  }

  /**
   * Get recurrence
   * @return recurrence
   */
  @javax.annotation.Nonnull
  public ListPreviewRotationShiftsRequestRecurrence getRecurrence() {
    return recurrence;
  }

  public void setRecurrence(ListPreviewRotationShiftsRequestRecurrence recurrence) {
    this.recurrence = recurrence;
  }


  public ListPreviewRotationShiftsRequest overrides(List overrides) {
    this.overrides = overrides;
    return this;
  }

  /**
   * Get overrides
   * @return overrides
   */
  @javax.annotation.Nullable
  public List getOverrides() {
    return overrides;
  }

  public void setOverrides(List overrides) {
    this.overrides = overrides;
  }


  public ListPreviewRotationShiftsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListPreviewRotationShiftsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPreviewRotationShiftsRequest listPreviewRotationShiftsRequest = (ListPreviewRotationShiftsRequest) o;
    return Objects.equals(this.rotationStartTime, listPreviewRotationShiftsRequest.rotationStartTime) &&
        Objects.equals(this.startTime, listPreviewRotationShiftsRequest.startTime) &&
        Objects.equals(this.endTime, listPreviewRotationShiftsRequest.endTime) &&
        Objects.equals(this.members, listPreviewRotationShiftsRequest.members) &&
        Objects.equals(this.timeZoneId, listPreviewRotationShiftsRequest.timeZoneId) &&
        Objects.equals(this.recurrence, listPreviewRotationShiftsRequest.recurrence) &&
        Objects.equals(this.overrides, listPreviewRotationShiftsRequest.overrides) &&
        Objects.equals(this.nextToken, listPreviewRotationShiftsRequest.nextToken) &&
        Objects.equals(this.maxResults, listPreviewRotationShiftsRequest.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rotationStartTime, startTime, endTime, members, timeZoneId, recurrence, overrides, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPreviewRotationShiftsRequest {\n");
    sb.append("    rotationStartTime: ").append(toIndentedString(rotationStartTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    timeZoneId: ").append(toIndentedString(timeZoneId)).append("\n");
    sb.append("    recurrence: ").append(toIndentedString(recurrence)).append("\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RotationStartTime");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("Members");
    openapiFields.add("TimeZoneId");
    openapiFields.add("Recurrence");
    openapiFields.add("Overrides");
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EndTime");
    openapiRequiredFields.add("Members");
    openapiRequiredFields.add("TimeZoneId");
    openapiRequiredFields.add("Recurrence");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListPreviewRotationShiftsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListPreviewRotationShiftsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListPreviewRotationShiftsRequest is not found in the empty JSON string", ListPreviewRotationShiftsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListPreviewRotationShiftsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListPreviewRotationShiftsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListPreviewRotationShiftsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RotationStartTime`
      if (jsonObj.get("RotationStartTime") != null && !jsonObj.get("RotationStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("RotationStartTime"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the required field `EndTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      // validate the required field `Members`
      List.validateJsonElement(jsonObj.get("Members"));
      // validate the required field `TimeZoneId`
      String.validateJsonElement(jsonObj.get("TimeZoneId"));
      // validate the required field `Recurrence`
      ListPreviewRotationShiftsRequestRecurrence.validateJsonElement(jsonObj.get("Recurrence"));
      // validate the optional field `Overrides`
      if (jsonObj.get("Overrides") != null && !jsonObj.get("Overrides").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Overrides"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListPreviewRotationShiftsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListPreviewRotationShiftsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListPreviewRotationShiftsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListPreviewRotationShiftsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListPreviewRotationShiftsRequest>() {
           @Override
           public void write(JsonWriter out, ListPreviewRotationShiftsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListPreviewRotationShiftsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListPreviewRotationShiftsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListPreviewRotationShiftsRequest
   * @throws IOException if the JSON string is invalid with respect to ListPreviewRotationShiftsRequest
   */
  public static ListPreviewRotationShiftsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListPreviewRotationShiftsRequest.class);
  }

  /**
   * Convert an instance of ListPreviewRotationShiftsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

