/*
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ActivationStatus;
import org.openapitools.client.model.ChannelType;
import org.openapitools.client.model.GetContactChannelResultDeliveryAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The method that Incident Manager uses to engage a contact.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:32.829859-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContactChannel {
  public static final String SERIALIZED_NAME_CONTACT_CHANNEL_ARN = "ContactChannelArn";
  @SerializedName(SERIALIZED_NAME_CONTACT_CHANNEL_ARN)
  private String contactChannelArn;

  public static final String SERIALIZED_NAME_CONTACT_ARN = "ContactArn";
  @SerializedName(SERIALIZED_NAME_CONTACT_ARN)
  private String contactArn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ChannelType type;

  public static final String SERIALIZED_NAME_DELIVERY_ADDRESS = "DeliveryAddress";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ADDRESS)
  private GetContactChannelResultDeliveryAddress deliveryAddress;

  public static final String SERIALIZED_NAME_ACTIVATION_STATUS = "ActivationStatus";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_STATUS)
  private ActivationStatus activationStatus;

  public ContactChannel() {
  }

  public ContactChannel contactChannelArn(String contactChannelArn) {
    this.contactChannelArn = contactChannelArn;
    return this;
  }

  /**
   * Get contactChannelArn
   * @return contactChannelArn
   */
  @javax.annotation.Nonnull
  public String getContactChannelArn() {
    return contactChannelArn;
  }

  public void setContactChannelArn(String contactChannelArn) {
    this.contactChannelArn = contactChannelArn;
  }


  public ContactChannel contactArn(String contactArn) {
    this.contactArn = contactArn;
    return this;
  }

  /**
   * Get contactArn
   * @return contactArn
   */
  @javax.annotation.Nonnull
  public String getContactArn() {
    return contactArn;
  }

  public void setContactArn(String contactArn) {
    this.contactArn = contactArn;
  }


  public ContactChannel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContactChannel type(ChannelType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ChannelType getType() {
    return type;
  }

  public void setType(ChannelType type) {
    this.type = type;
  }


  public ContactChannel deliveryAddress(GetContactChannelResultDeliveryAddress deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
    return this;
  }

  /**
   * Get deliveryAddress
   * @return deliveryAddress
   */
  @javax.annotation.Nonnull
  public GetContactChannelResultDeliveryAddress getDeliveryAddress() {
    return deliveryAddress;
  }

  public void setDeliveryAddress(GetContactChannelResultDeliveryAddress deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
  }


  public ContactChannel activationStatus(ActivationStatus activationStatus) {
    this.activationStatus = activationStatus;
    return this;
  }

  /**
   * Get activationStatus
   * @return activationStatus
   */
  @javax.annotation.Nonnull
  public ActivationStatus getActivationStatus() {
    return activationStatus;
  }

  public void setActivationStatus(ActivationStatus activationStatus) {
    this.activationStatus = activationStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactChannel contactChannel = (ContactChannel) o;
    return Objects.equals(this.contactChannelArn, contactChannel.contactChannelArn) &&
        Objects.equals(this.contactArn, contactChannel.contactArn) &&
        Objects.equals(this.name, contactChannel.name) &&
        Objects.equals(this.type, contactChannel.type) &&
        Objects.equals(this.deliveryAddress, contactChannel.deliveryAddress) &&
        Objects.equals(this.activationStatus, contactChannel.activationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactChannelArn, contactArn, name, type, deliveryAddress, activationStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactChannel {\n");
    sb.append("    contactChannelArn: ").append(toIndentedString(contactChannelArn)).append("\n");
    sb.append("    contactArn: ").append(toIndentedString(contactArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    deliveryAddress: ").append(toIndentedString(deliveryAddress)).append("\n");
    sb.append("    activationStatus: ").append(toIndentedString(activationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContactChannelArn");
    openapiFields.add("ContactArn");
    openapiFields.add("Name");
    openapiFields.add("Type");
    openapiFields.add("DeliveryAddress");
    openapiFields.add("ActivationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ContactChannelArn");
    openapiRequiredFields.add("ContactArn");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("DeliveryAddress");
    openapiRequiredFields.add("ActivationStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContactChannel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactChannel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactChannel is not found in the empty JSON string", ContactChannel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactChannel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactChannel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContactChannel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ContactChannelArn`
      String.validateJsonElement(jsonObj.get("ContactChannelArn"));
      // validate the required field `ContactArn`
      String.validateJsonElement(jsonObj.get("ContactArn"));
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ChannelType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the required field `DeliveryAddress`
      GetContactChannelResultDeliveryAddress.validateJsonElement(jsonObj.get("DeliveryAddress"));
      // validate the required field `ActivationStatus`
      ActivationStatus.validateJsonElement(jsonObj.get("ActivationStatus"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactChannel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactChannel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactChannel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactChannel.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactChannel>() {
           @Override
           public void write(JsonWriter out, ContactChannel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactChannel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContactChannel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContactChannel
   * @throws IOException if the JSON string is invalid with respect to ContactChannel
   */
  public static ContactChannel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactChannel.class);
  }

  /**
   * Convert an instance of ContactChannel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

