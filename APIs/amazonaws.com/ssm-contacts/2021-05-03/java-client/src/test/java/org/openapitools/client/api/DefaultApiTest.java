/*
 * AWS Systems Manager Incident Manager Contacts
 * <p>Systems Manager Incident Manager is an incident management console designed to help users mitigate and recover from incidents affecting their Amazon Web Services-hosted applications. An incident is any unplanned interruption or reduction in quality of services.</p> <p>Incident Manager increases incident resolution by notifying responders of impact, highlighting relevant troubleshooting data, and providing collaboration tools to get services back up and running. To achieve the primary goal of reducing the time-to-resolution of critical incidents, Incident Manager automates response plans and enables responder team escalation.</p>
 *
 * The version of the OpenAPI document: 2021-05-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptPageRequest;
import org.openapitools.client.model.ActivateContactChannelRequest;
import org.openapitools.client.model.CreateContactChannelRequest;
import org.openapitools.client.model.CreateContactChannelResult;
import org.openapitools.client.model.CreateContactRequest;
import org.openapitools.client.model.CreateContactResult;
import org.openapitools.client.model.CreateRotationOverrideRequest;
import org.openapitools.client.model.CreateRotationOverrideResult;
import org.openapitools.client.model.CreateRotationRequest;
import org.openapitools.client.model.CreateRotationResult;
import org.openapitools.client.model.DeactivateContactChannelRequest;
import org.openapitools.client.model.DeleteContactChannelRequest;
import org.openapitools.client.model.DeleteContactRequest;
import org.openapitools.client.model.DeleteRotationOverrideRequest;
import org.openapitools.client.model.DeleteRotationRequest;
import org.openapitools.client.model.DescribeEngagementRequest;
import org.openapitools.client.model.DescribeEngagementResult;
import org.openapitools.client.model.DescribePageRequest;
import org.openapitools.client.model.DescribePageResult;
import org.openapitools.client.model.GetContactChannelRequest;
import org.openapitools.client.model.GetContactChannelResult;
import org.openapitools.client.model.GetContactPolicyRequest;
import org.openapitools.client.model.GetContactPolicyResult;
import org.openapitools.client.model.GetContactRequest;
import org.openapitools.client.model.GetContactResult;
import org.openapitools.client.model.GetRotationOverrideRequest;
import org.openapitools.client.model.GetRotationOverrideResult;
import org.openapitools.client.model.GetRotationRequest;
import org.openapitools.client.model.GetRotationResult;
import org.openapitools.client.model.ListContactChannelsRequest;
import org.openapitools.client.model.ListContactChannelsResult;
import org.openapitools.client.model.ListContactsRequest;
import org.openapitools.client.model.ListContactsResult;
import org.openapitools.client.model.ListEngagementsRequest;
import org.openapitools.client.model.ListEngagementsResult;
import org.openapitools.client.model.ListPageReceiptsRequest;
import org.openapitools.client.model.ListPageReceiptsResult;
import org.openapitools.client.model.ListPageResolutionsRequest;
import org.openapitools.client.model.ListPageResolutionsResult;
import org.openapitools.client.model.ListPagesByContactRequest;
import org.openapitools.client.model.ListPagesByContactResult;
import org.openapitools.client.model.ListPagesByEngagementRequest;
import org.openapitools.client.model.ListPagesByEngagementResult;
import org.openapitools.client.model.ListPreviewRotationShiftsRequest;
import org.openapitools.client.model.ListPreviewRotationShiftsResult;
import org.openapitools.client.model.ListRotationOverridesRequest;
import org.openapitools.client.model.ListRotationOverridesResult;
import org.openapitools.client.model.ListRotationShiftsRequest;
import org.openapitools.client.model.ListRotationShiftsResult;
import org.openapitools.client.model.ListRotationsRequest;
import org.openapitools.client.model.ListRotationsResult;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResult;
import org.openapitools.client.model.PutContactPolicyRequest;
import org.openapitools.client.model.SendActivationCodeRequest;
import org.openapitools.client.model.StartEngagementRequest;
import org.openapitools.client.model.StartEngagementResult;
import org.openapitools.client.model.StopEngagementRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateContactChannelRequest;
import org.openapitools.client.model.UpdateContactRequest;
import org.openapitools.client.model.UpdateRotationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Used to acknowledge an engagement to a contact channel during an incident.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptPageTest() throws ApiException {
        String xAmzTarget = null;
        AcceptPageRequest acceptPageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.acceptPage(xAmzTarget, acceptPageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Activates a contact&#39;s contact channel. Incident Manager can&#39;t engage a contact until the contact channel has been activated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateContactChannelTest() throws ApiException {
        String xAmzTarget = null;
        ActivateContactChannelRequest activateContactChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.activateContactChannel(xAmzTarget, activateContactChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Contacts are either the contacts that Incident Manager engages during an incident or the escalation plans that Incident Manager uses to engage contacts in phases during an incident.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactTest() throws ApiException {
        String xAmzTarget = null;
        CreateContactRequest createContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContactResult response = api.createContact(xAmzTarget, createContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * A contact channel is the method that Incident Manager uses to engage your contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContactChannelTest() throws ApiException {
        String xAmzTarget = null;
        CreateContactChannelRequest createContactChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContactChannelResult response = api.createContactChannel(xAmzTarget, createContactChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a rotation in an on-call schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRotationTest() throws ApiException {
        String xAmzTarget = null;
        CreateRotationRequest createRotationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRotationResult response = api.createRotation(xAmzTarget, createRotationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an override for a rotation in an on-call schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRotationOverrideTest() throws ApiException {
        String xAmzTarget = null;
        CreateRotationOverrideRequest createRotationOverrideRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRotationOverrideResult response = api.createRotationOverride(xAmzTarget, createRotationOverrideRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * To no longer receive Incident Manager engagements to a contact channel, you can deactivate the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateContactChannelTest() throws ApiException {
        String xAmzTarget = null;
        DeactivateContactChannelRequest deactivateContactChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deactivateContactChannel(xAmzTarget, deactivateContactChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * To remove a contact from Incident Manager, you can delete the contact. Deleting a contact removes them from all escalation plans and related response plans. Deleting an escalation plan removes it from all related response plans. You will have to recreate the contact and its contact channels before you can use it again.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactTest() throws ApiException {
        String xAmzTarget = null;
        DeleteContactRequest deleteContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteContact(xAmzTarget, deleteContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * To no longer receive engagements on a contact channel, you can delete the channel from a contact. Deleting the contact channel removes it from the contact&#39;s engagement plan. If you delete the only contact channel for a contact, you won&#39;t be able to engage that contact during an incident.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactChannelTest() throws ApiException {
        String xAmzTarget = null;
        DeleteContactChannelRequest deleteContactChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteContactChannel(xAmzTarget, deleteContactChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a rotation from the system. If a rotation belongs to more than one on-call schedule, this operation deletes it from all of them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRotationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRotationRequest deleteRotationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteRotation(xAmzTarget, deleteRotationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing override for an on-call rotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRotationOverrideTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRotationOverrideRequest deleteRotationOverrideRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteRotationOverride(xAmzTarget, deleteRotationOverrideRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Incident Manager uses engagements to engage contacts and escalation plans during an incident. Use this command to describe the engagement that occurred during an incident.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEngagementTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEngagementRequest describeEngagementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEngagementResult response = api.describeEngagement(xAmzTarget, describeEngagementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists details of the engagement to a contact channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePageTest() throws ApiException {
        String xAmzTarget = null;
        DescribePageRequest describePageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePageResult response = api.describePage(xAmzTarget, describePageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the specified contact or escalation plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactTest() throws ApiException {
        String xAmzTarget = null;
        GetContactRequest getContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContactResult response = api.getContact(xAmzTarget, getContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * List details about a specific contact channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactChannelTest() throws ApiException {
        String xAmzTarget = null;
        GetContactChannelRequest getContactChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContactChannelResult response = api.getContactChannel(xAmzTarget, getContactChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the resource policies attached to the specified contact or escalation plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContactPolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetContactPolicyRequest getContactPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContactPolicyResult response = api.getContactPolicy(xAmzTarget, getContactPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about an on-call rotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRotationTest() throws ApiException {
        String xAmzTarget = null;
        GetRotationRequest getRotationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRotationResult response = api.getRotation(xAmzTarget, getRotationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about an override to an on-call rotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRotationOverrideTest() throws ApiException {
        String xAmzTarget = null;
        GetRotationOverrideRequest getRotationOverrideRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRotationOverrideResult response = api.getRotationOverride(xAmzTarget, getRotationOverrideRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all contact channels for the specified contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContactChannelsTest() throws ApiException {
        String xAmzTarget = null;
        ListContactChannelsRequest listContactChannelsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListContactChannelsResult response = api.listContactChannels(xAmzTarget, listContactChannelsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all contacts and escalation plans in Incident Manager.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContactsTest() throws ApiException {
        String xAmzTarget = null;
        ListContactsRequest listContactsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListContactsResult response = api.listContacts(xAmzTarget, listContactsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all engagements that have happened in an incident.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEngagementsTest() throws ApiException {
        String xAmzTarget = null;
        ListEngagementsRequest listEngagementsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListEngagementsResult response = api.listEngagements(xAmzTarget, listEngagementsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all of the engagements to contact channels that have been acknowledged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPageReceiptsTest() throws ApiException {
        String xAmzTarget = null;
        ListPageReceiptsRequest listPageReceiptsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPageReceiptsResult response = api.listPageReceipts(xAmzTarget, listPageReceiptsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the resolution path of an engagement. For example, the escalation plan engaged in an incident might target an on-call schedule that includes several contacts in a rotation, but just one contact on-call when the incident starts. The resolution path indicates the hierarchy of &lt;i&gt;escalation plan &amp;gt; on-call schedule &amp;gt; contact&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPageResolutionsTest() throws ApiException {
        String xAmzTarget = null;
        ListPageResolutionsRequest listPageResolutionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        ListPageResolutionsResult response = api.listPageResolutions(xAmzTarget, listPageResolutionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the engagements to a contact&#39;s contact channels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPagesByContactTest() throws ApiException {
        String xAmzTarget = null;
        ListPagesByContactRequest listPagesByContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPagesByContactResult response = api.listPagesByContact(xAmzTarget, listPagesByContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the engagements to contact channels that occurred by engaging a contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPagesByEngagementTest() throws ApiException {
        String xAmzTarget = null;
        ListPagesByEngagementRequest listPagesByEngagementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPagesByEngagementResult response = api.listPagesByEngagement(xAmzTarget, listPagesByEngagementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of shifts based on rotation configuration parameters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Incident Manager primarily uses this operation to populate the &lt;b&gt;Preview&lt;/b&gt; calendar. It is not typically run by end users.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPreviewRotationShiftsTest() throws ApiException {
        String xAmzTarget = null;
        ListPreviewRotationShiftsRequest listPreviewRotationShiftsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPreviewRotationShiftsResult response = api.listPreviewRotationShifts(xAmzTarget, listPreviewRotationShiftsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of overrides currently specified for an on-call rotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRotationOverridesTest() throws ApiException {
        String xAmzTarget = null;
        ListRotationOverridesRequest listRotationOverridesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListRotationOverridesResult response = api.listRotationOverrides(xAmzTarget, listRotationOverridesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of shifts generated by an existing rotation in the system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRotationShiftsTest() throws ApiException {
        String xAmzTarget = null;
        ListRotationShiftsRequest listRotationShiftsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListRotationShiftsResult response = api.listRotationShifts(xAmzTarget, listRotationShiftsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of on-call rotations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRotationsTest() throws ApiException {
        String xAmzTarget = null;
        ListRotationsRequest listRotationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListRotationsResult response = api.listRotations(xAmzTarget, listRotationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the tags of an escalation plan or contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResult response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a resource policy to the specified contact or escalation plan. The resource policy is used to share the contact or escalation plan using Resource Access Manager (RAM). For more information about cross-account sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/incident-manager/latest/userguide/xa.html\&quot;&gt;Setting up cross-account functionality&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putContactPolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutContactPolicyRequest putContactPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putContactPolicy(xAmzTarget, putContactPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sends an activation code to a contact channel. The contact can use this code to activate the contact channel in the console or with the &lt;code&gt;ActivateChannel&lt;/code&gt; operation. Incident Manager can&#39;t engage a contact channel until it has been activated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendActivationCodeTest() throws ApiException {
        String xAmzTarget = null;
        SendActivationCodeRequest sendActivationCodeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.sendActivationCode(xAmzTarget, sendActivationCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an engagement to a contact or escalation plan. The engagement engages each contact specified in the incident.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startEngagementTest() throws ApiException {
        String xAmzTarget = null;
        StartEngagementRequest startEngagementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartEngagementResult response = api.startEngagement(xAmzTarget, startEngagementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops an engagement before it finishes the final stage of the escalation plan or engagement plan. Further contacts aren&#39;t engaged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopEngagementTest() throws ApiException {
        String xAmzTarget = null;
        StopEngagementRequest stopEngagementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopEngagement(xAmzTarget, stopEngagementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Tags a contact or escalation plan. You can tag only contacts and escalation plans in the first region of your replication set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the contact or escalation plan specified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        String xAmzTarget = null;
        UpdateContactRequest updateContactRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContact(xAmzTarget, updateContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a contact&#39;s contact channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactChannelTest() throws ApiException {
        String xAmzTarget = null;
        UpdateContactChannelRequest updateContactChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateContactChannel(xAmzTarget, updateContactChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the information specified for an on-call rotation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRotationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateRotationRequest updateRotationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateRotation(xAmzTarget, updateRotationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
