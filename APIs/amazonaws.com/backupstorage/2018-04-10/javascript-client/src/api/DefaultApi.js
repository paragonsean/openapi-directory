/**
 * AWS Backup Storage
 * The frontend service for Cryo Storage.
 *
 * The version of the OpenAPI document: 2018-04-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetChunkOutput from '../model/GetChunkOutput';
import GetObjectMetadataOutput from '../model/GetObjectMetadataOutput';
import ListChunksOutput from '../model/ListChunksOutput';
import ListObjectsOutput from '../model/ListObjectsOutput';
import NotifyObjectCompleteOutput from '../model/NotifyObjectCompleteOutput';
import NotifyObjectCompleteRequest from '../model/NotifyObjectCompleteRequest';
import PutChunkOutput from '../model/PutChunkOutput';
import PutChunkRequest from '../model/PutChunkRequest';
import PutObjectOutput from '../model/PutObjectOutput';
import PutObjectRequest from '../model/PutObjectRequest';
import StartObjectOutput from '../model/StartObjectOutput';
import StartObjectRequest from '../model/StartObjectRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-04-10
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteObject operation.
     * @callback module:api/DefaultApi~deleteObjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Object from the incremental base Backup.
     * @param {String} jobId Backup job Id for the in-progress backup.
     * @param {String} objectName The name of the Object.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteObjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteObject(jobId, objectName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling deleteObject");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling deleteObject");
      }

      let pathParams = {
        'jobId': jobId,
        'objectName': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/backup-jobs/{jobId}/object/{objectName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChunk operation.
     * @callback module:api/DefaultApi~getChunkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChunkOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified object's chunk.
     * @param {String} jobId Storage job id
     * @param {String} chunkToken Chunk token
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getChunkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChunkOutput}
     */
    getChunk(jobId, chunkToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getChunk");
      }
      // verify the required parameter 'chunkToken' is set
      if (chunkToken === undefined || chunkToken === null) {
        throw new Error("Missing the required parameter 'chunkToken' when calling getChunk");
      }

      let pathParams = {
        'jobId': jobId,
        'chunkToken': chunkToken
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChunkOutput;
      return this.apiClient.callApi(
        '/restore-jobs/{jobId}/chunk/{chunkToken}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectMetadata operation.
     * @callback module:api/DefaultApi~getObjectMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetObjectMetadataOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metadata associated with an Object.
     * @param {String} jobId Backup job id for the in-progress backup.
     * @param {String} objectToken Object token.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getObjectMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetObjectMetadataOutput}
     */
    getObjectMetadata(jobId, objectToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getObjectMetadata");
      }
      // verify the required parameter 'objectToken' is set
      if (objectToken === undefined || objectToken === null) {
        throw new Error("Missing the required parameter 'objectToken' when calling getObjectMetadata");
      }

      let pathParams = {
        'jobId': jobId,
        'objectToken': objectToken
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetObjectMetadataOutput;
      return this.apiClient.callApi(
        '/restore-jobs/{jobId}/object/{objectToken}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChunks operation.
     * @callback module:api/DefaultApi~listChunksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChunksOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List chunks in a given Object
     * @param {String} jobId Storage job id
     * @param {String} objectToken Object token
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] Maximum number of chunks
     * @param {String} [nextToken] Pagination token
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listChunksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChunksOutput}
     */
    listChunks(jobId, objectToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling listChunks");
      }
      // verify the required parameter 'objectToken' is set
      if (objectToken === undefined || objectToken === null) {
        throw new Error("Missing the required parameter 'objectToken' when calling listChunks");
      }

      let pathParams = {
        'jobId': jobId,
        'objectToken': objectToken
      };
      let queryParams = {
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChunksOutput;
      return this.apiClient.callApi(
        '/restore-jobs/{jobId}/chunks/{objectToken}/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listObjects operation.
     * @callback module:api/DefaultApi~listObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListObjectsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Objects in a given Backup.
     * @param {String} jobId Storage job id
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [startingObjectName] Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL
     * @param {String} [startingObjectPrefix] Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL
     * @param {Number} [maxResults] Maximum objects count
     * @param {String} [nextToken] Pagination token
     * @param {Date} [createdBefore] (Optional) Created before filter
     * @param {Date} [createdAfter] (Optional) Created after filter
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListObjectsOutput}
     */
    listObjects(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling listObjects");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'starting-object-name': opts['startingObjectName'],
        'starting-object-prefix': opts['startingObjectPrefix'],
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'created-before': opts['createdBefore'],
        'created-after': opts['createdAfter'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListObjectsOutput;
      return this.apiClient.callApi(
        '/restore-jobs/{jobId}/objects/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyObjectComplete operation.
     * @callback module:api/DefaultApi~notifyObjectCompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotifyObjectCompleteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete upload
     * @param {String} jobId Backup job Id for the in-progress backup
     * @param {String} uploadId Upload Id for the in-progress upload
     * @param {String} checksum Object checksum
     * @param {module:model/String} checksumAlgorithm Checksum algorithm
     * @param {module:model/NotifyObjectCompleteRequest} notifyObjectCompleteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [metadataString] Optional metadata associated with an Object. Maximum string length is 256 bytes.
     * @param {Number} [metadataBlobLength] The size of MetadataBlob.
     * @param {String} [metadataChecksum] Checksum of MetadataBlob.
     * @param {module:model/String} [metadataChecksumAlgorithm] Checksum algorithm.
     * @param {module:api/DefaultApi~notifyObjectCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotifyObjectCompleteOutput}
     */
    notifyObjectComplete(jobId, uploadId, checksum, checksumAlgorithm, notifyObjectCompleteRequest, opts, callback) {
      opts = opts || {};
      let postBody = notifyObjectCompleteRequest;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling notifyObjectComplete");
      }
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling notifyObjectComplete");
      }
      // verify the required parameter 'checksum' is set
      if (checksum === undefined || checksum === null) {
        throw new Error("Missing the required parameter 'checksum' when calling notifyObjectComplete");
      }
      // verify the required parameter 'checksumAlgorithm' is set
      if (checksumAlgorithm === undefined || checksumAlgorithm === null) {
        throw new Error("Missing the required parameter 'checksumAlgorithm' when calling notifyObjectComplete");
      }
      // verify the required parameter 'notifyObjectCompleteRequest' is set
      if (notifyObjectCompleteRequest === undefined || notifyObjectCompleteRequest === null) {
        throw new Error("Missing the required parameter 'notifyObjectCompleteRequest' when calling notifyObjectComplete");
      }

      let pathParams = {
        'jobId': jobId,
        'uploadId': uploadId
      };
      let queryParams = {
        'checksum': checksum,
        'checksum-algorithm': checksumAlgorithm,
        'metadata-string': opts['metadataString'],
        'metadata-blob-length': opts['metadataBlobLength'],
        'metadata-checksum': opts['metadataChecksum'],
        'metadata-checksum-algorithm': opts['metadataChecksumAlgorithm']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotifyObjectCompleteOutput;
      return this.apiClient.callApi(
        '/backup-jobs/{jobId}/object/{uploadId}/complete#checksum&checksum-algorithm', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putChunk operation.
     * @callback module:api/DefaultApi~putChunkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutChunkOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload chunk.
     * @param {String} jobId Backup job Id for the in-progress backup.
     * @param {String} uploadId Upload Id for the in-progress upload.
     * @param {Number} chunkIndex Describes this chunk's position relative to the other chunks
     * @param {Number} length Data length
     * @param {String} checksum Data checksum
     * @param {module:model/String} checksumAlgorithm Checksum algorithm
     * @param {module:model/PutChunkRequest} putChunkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putChunkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutChunkOutput}
     */
    putChunk(jobId, uploadId, chunkIndex, length, checksum, checksumAlgorithm, putChunkRequest, opts, callback) {
      opts = opts || {};
      let postBody = putChunkRequest;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling putChunk");
      }
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling putChunk");
      }
      // verify the required parameter 'chunkIndex' is set
      if (chunkIndex === undefined || chunkIndex === null) {
        throw new Error("Missing the required parameter 'chunkIndex' when calling putChunk");
      }
      // verify the required parameter 'length' is set
      if (length === undefined || length === null) {
        throw new Error("Missing the required parameter 'length' when calling putChunk");
      }
      // verify the required parameter 'checksum' is set
      if (checksum === undefined || checksum === null) {
        throw new Error("Missing the required parameter 'checksum' when calling putChunk");
      }
      // verify the required parameter 'checksumAlgorithm' is set
      if (checksumAlgorithm === undefined || checksumAlgorithm === null) {
        throw new Error("Missing the required parameter 'checksumAlgorithm' when calling putChunk");
      }
      // verify the required parameter 'putChunkRequest' is set
      if (putChunkRequest === undefined || putChunkRequest === null) {
        throw new Error("Missing the required parameter 'putChunkRequest' when calling putChunk");
      }

      let pathParams = {
        'jobId': jobId,
        'uploadId': uploadId,
        'chunkIndex': chunkIndex
      };
      let queryParams = {
        'length': length,
        'checksum': checksum,
        'checksum-algorithm': checksumAlgorithm
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutChunkOutput;
      return this.apiClient.callApi(
        '/backup-jobs/{jobId}/chunk/{uploadId}/{chunkIndex}#length&checksum&checksum-algorithm', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putObject operation.
     * @callback module:api/DefaultApi~putObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutObjectOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload object that can store object metadata String and data blob in single API call using inline chunk field.
     * @param {String} jobId Backup job Id for the in-progress backup.
     * @param {String} objectName The name of the Object to be uploaded.
     * @param {module:model/PutObjectRequest} putObjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [metadataString] Store user defined metadata like backup checksum, disk ids, restore metadata etc.
     * @param {Number} [length] Length of the inline chunk data.
     * @param {String} [checksum] Inline chunk checksum
     * @param {String} [checksumAlgorithm] Inline chunk checksum algorithm
     * @param {String} [objectChecksum] object checksum
     * @param {module:model/String} [objectChecksumAlgorithm] object checksum algorithm
     * @param {Boolean} [throwOnDuplicate] Throw an exception if Object name is already exist.
     * @param {module:api/DefaultApi~putObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutObjectOutput}
     */
    putObject(jobId, objectName, putObjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = putObjectRequest;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling putObject");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling putObject");
      }
      // verify the required parameter 'putObjectRequest' is set
      if (putObjectRequest === undefined || putObjectRequest === null) {
        throw new Error("Missing the required parameter 'putObjectRequest' when calling putObject");
      }

      let pathParams = {
        'jobId': jobId,
        'objectName': objectName
      };
      let queryParams = {
        'metadata-string': opts['metadataString'],
        'length': opts['length'],
        'checksum': opts['checksum'],
        'checksum-algorithm': opts['checksumAlgorithm'],
        'object-checksum': opts['objectChecksum'],
        'object-checksum-algorithm': opts['objectChecksumAlgorithm'],
        'throwOnDuplicate': opts['throwOnDuplicate']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutObjectOutput;
      return this.apiClient.callApi(
        '/backup-jobs/{jobId}/object/{objectName}/put-object', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startObject operation.
     * @callback module:api/DefaultApi~startObjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartObjectOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start upload containing one or many chunks.
     * @param {String} jobId Backup job Id for the in-progress backup
     * @param {String} objectName Name for the object.
     * @param {module:model/StartObjectRequest} startObjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startObjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartObjectOutput}
     */
    startObject(jobId, objectName, startObjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = startObjectRequest;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling startObject");
      }
      // verify the required parameter 'objectName' is set
      if (objectName === undefined || objectName === null) {
        throw new Error("Missing the required parameter 'objectName' when calling startObject");
      }
      // verify the required parameter 'startObjectRequest' is set
      if (startObjectRequest === undefined || startObjectRequest === null) {
        throw new Error("Missing the required parameter 'startObjectRequest' when calling startObject");
      }

      let pathParams = {
        'jobId': jobId,
        'objectName': objectName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartObjectOutput;
      return this.apiClient.callApi(
        '/backup-jobs/{jobId}/object/{objectName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
