/*
 * AWS Backup Storage
 * The frontend service for Cryo Storage.
 *
 * The version of the OpenAPI document: 2018-04-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SummaryChecksumAlgorithm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:21.102560-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupObject {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CHUNKS_COUNT = "ChunksCount";
  @SerializedName(SERIALIZED_NAME_CHUNKS_COUNT)
  private Integer chunksCount;

  public static final String SERIALIZED_NAME_METADATA_STRING = "MetadataString";
  @SerializedName(SERIALIZED_NAME_METADATA_STRING)
  private String metadataString;

  public static final String SERIALIZED_NAME_OBJECT_CHECKSUM = "ObjectChecksum";
  @SerializedName(SERIALIZED_NAME_OBJECT_CHECKSUM)
  private String objectChecksum;

  public static final String SERIALIZED_NAME_OBJECT_CHECKSUM_ALGORITHM = "ObjectChecksumAlgorithm";
  @SerializedName(SERIALIZED_NAME_OBJECT_CHECKSUM_ALGORITHM)
  private SummaryChecksumAlgorithm objectChecksumAlgorithm;

  public static final String SERIALIZED_NAME_OBJECT_TOKEN = "ObjectToken";
  @SerializedName(SERIALIZED_NAME_OBJECT_TOKEN)
  private String objectToken;

  public BackupObject() {
  }

  public BackupObject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BackupObject chunksCount(Integer chunksCount) {
    this.chunksCount = chunksCount;
    return this;
  }

  /**
   * Get chunksCount
   * @return chunksCount
   */
  @javax.annotation.Nullable
  public Integer getChunksCount() {
    return chunksCount;
  }

  public void setChunksCount(Integer chunksCount) {
    this.chunksCount = chunksCount;
  }


  public BackupObject metadataString(String metadataString) {
    this.metadataString = metadataString;
    return this;
  }

  /**
   * Get metadataString
   * @return metadataString
   */
  @javax.annotation.Nullable
  public String getMetadataString() {
    return metadataString;
  }

  public void setMetadataString(String metadataString) {
    this.metadataString = metadataString;
  }


  public BackupObject objectChecksum(String objectChecksum) {
    this.objectChecksum = objectChecksum;
    return this;
  }

  /**
   * Get objectChecksum
   * @return objectChecksum
   */
  @javax.annotation.Nonnull
  public String getObjectChecksum() {
    return objectChecksum;
  }

  public void setObjectChecksum(String objectChecksum) {
    this.objectChecksum = objectChecksum;
  }


  public BackupObject objectChecksumAlgorithm(SummaryChecksumAlgorithm objectChecksumAlgorithm) {
    this.objectChecksumAlgorithm = objectChecksumAlgorithm;
    return this;
  }

  /**
   * Get objectChecksumAlgorithm
   * @return objectChecksumAlgorithm
   */
  @javax.annotation.Nonnull
  public SummaryChecksumAlgorithm getObjectChecksumAlgorithm() {
    return objectChecksumAlgorithm;
  }

  public void setObjectChecksumAlgorithm(SummaryChecksumAlgorithm objectChecksumAlgorithm) {
    this.objectChecksumAlgorithm = objectChecksumAlgorithm;
  }


  public BackupObject objectToken(String objectToken) {
    this.objectToken = objectToken;
    return this;
  }

  /**
   * Get objectToken
   * @return objectToken
   */
  @javax.annotation.Nonnull
  public String getObjectToken() {
    return objectToken;
  }

  public void setObjectToken(String objectToken) {
    this.objectToken = objectToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupObject backupObject = (BackupObject) o;
    return Objects.equals(this.name, backupObject.name) &&
        Objects.equals(this.chunksCount, backupObject.chunksCount) &&
        Objects.equals(this.metadataString, backupObject.metadataString) &&
        Objects.equals(this.objectChecksum, backupObject.objectChecksum) &&
        Objects.equals(this.objectChecksumAlgorithm, backupObject.objectChecksumAlgorithm) &&
        Objects.equals(this.objectToken, backupObject.objectToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, chunksCount, metadataString, objectChecksum, objectChecksumAlgorithm, objectToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupObject {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    chunksCount: ").append(toIndentedString(chunksCount)).append("\n");
    sb.append("    metadataString: ").append(toIndentedString(metadataString)).append("\n");
    sb.append("    objectChecksum: ").append(toIndentedString(objectChecksum)).append("\n");
    sb.append("    objectChecksumAlgorithm: ").append(toIndentedString(objectChecksumAlgorithm)).append("\n");
    sb.append("    objectToken: ").append(toIndentedString(objectToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("ChunksCount");
    openapiFields.add("MetadataString");
    openapiFields.add("ObjectChecksum");
    openapiFields.add("ObjectChecksumAlgorithm");
    openapiFields.add("ObjectToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("ObjectChecksum");
    openapiRequiredFields.add("ObjectChecksumAlgorithm");
    openapiRequiredFields.add("ObjectToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupObject is not found in the empty JSON string", BackupObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BackupObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `ChunksCount`
      if (jsonObj.get("ChunksCount") != null && !jsonObj.get("ChunksCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ChunksCount"));
      }
      // validate the optional field `MetadataString`
      if (jsonObj.get("MetadataString") != null && !jsonObj.get("MetadataString").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MetadataString"));
      }
      // validate the required field `ObjectChecksum`
      String.validateJsonElement(jsonObj.get("ObjectChecksum"));
      // validate the required field `ObjectChecksumAlgorithm`
      SummaryChecksumAlgorithm.validateJsonElement(jsonObj.get("ObjectChecksumAlgorithm"));
      // validate the required field `ObjectToken`
      String.validateJsonElement(jsonObj.get("ObjectToken"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupObject.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupObject>() {
           @Override
           public void write(JsonWriter out, BackupObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupObject
   * @throws IOException if the JSON string is invalid with respect to BackupObject
   */
  public static BackupObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupObject.class);
  }

  /**
   * Convert an instance of BackupObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

