/*
 * AWS Backup Storage
 * The frontend service for Cryo Storage.
 *
 * The version of the OpenAPI document: 2018-04-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataChecksumAlgorithm;
import org.openapitools.client.model.SummaryChecksumAlgorithm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutObjectOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:21.102560-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutObjectOutput {
  public static final String SERIALIZED_NAME_INLINE_CHUNK_CHECKSUM = "InlineChunkChecksum";
  @SerializedName(SERIALIZED_NAME_INLINE_CHUNK_CHECKSUM)
  private String inlineChunkChecksum;

  public static final String SERIALIZED_NAME_INLINE_CHUNK_CHECKSUM_ALGORITHM = "InlineChunkChecksumAlgorithm";
  @SerializedName(SERIALIZED_NAME_INLINE_CHUNK_CHECKSUM_ALGORITHM)
  private DataChecksumAlgorithm inlineChunkChecksumAlgorithm;

  public static final String SERIALIZED_NAME_OBJECT_CHECKSUM = "ObjectChecksum";
  @SerializedName(SERIALIZED_NAME_OBJECT_CHECKSUM)
  private String objectChecksum;

  public static final String SERIALIZED_NAME_OBJECT_CHECKSUM_ALGORITHM = "ObjectChecksumAlgorithm";
  @SerializedName(SERIALIZED_NAME_OBJECT_CHECKSUM_ALGORITHM)
  private SummaryChecksumAlgorithm objectChecksumAlgorithm;

  public PutObjectOutput() {
  }

  public PutObjectOutput inlineChunkChecksum(String inlineChunkChecksum) {
    this.inlineChunkChecksum = inlineChunkChecksum;
    return this;
  }

  /**
   * Get inlineChunkChecksum
   * @return inlineChunkChecksum
   */
  @javax.annotation.Nonnull
  public String getInlineChunkChecksum() {
    return inlineChunkChecksum;
  }

  public void setInlineChunkChecksum(String inlineChunkChecksum) {
    this.inlineChunkChecksum = inlineChunkChecksum;
  }


  public PutObjectOutput inlineChunkChecksumAlgorithm(DataChecksumAlgorithm inlineChunkChecksumAlgorithm) {
    this.inlineChunkChecksumAlgorithm = inlineChunkChecksumAlgorithm;
    return this;
  }

  /**
   * Get inlineChunkChecksumAlgorithm
   * @return inlineChunkChecksumAlgorithm
   */
  @javax.annotation.Nonnull
  public DataChecksumAlgorithm getInlineChunkChecksumAlgorithm() {
    return inlineChunkChecksumAlgorithm;
  }

  public void setInlineChunkChecksumAlgorithm(DataChecksumAlgorithm inlineChunkChecksumAlgorithm) {
    this.inlineChunkChecksumAlgorithm = inlineChunkChecksumAlgorithm;
  }


  public PutObjectOutput objectChecksum(String objectChecksum) {
    this.objectChecksum = objectChecksum;
    return this;
  }

  /**
   * Get objectChecksum
   * @return objectChecksum
   */
  @javax.annotation.Nonnull
  public String getObjectChecksum() {
    return objectChecksum;
  }

  public void setObjectChecksum(String objectChecksum) {
    this.objectChecksum = objectChecksum;
  }


  public PutObjectOutput objectChecksumAlgorithm(SummaryChecksumAlgorithm objectChecksumAlgorithm) {
    this.objectChecksumAlgorithm = objectChecksumAlgorithm;
    return this;
  }

  /**
   * Get objectChecksumAlgorithm
   * @return objectChecksumAlgorithm
   */
  @javax.annotation.Nonnull
  public SummaryChecksumAlgorithm getObjectChecksumAlgorithm() {
    return objectChecksumAlgorithm;
  }

  public void setObjectChecksumAlgorithm(SummaryChecksumAlgorithm objectChecksumAlgorithm) {
    this.objectChecksumAlgorithm = objectChecksumAlgorithm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutObjectOutput putObjectOutput = (PutObjectOutput) o;
    return Objects.equals(this.inlineChunkChecksum, putObjectOutput.inlineChunkChecksum) &&
        Objects.equals(this.inlineChunkChecksumAlgorithm, putObjectOutput.inlineChunkChecksumAlgorithm) &&
        Objects.equals(this.objectChecksum, putObjectOutput.objectChecksum) &&
        Objects.equals(this.objectChecksumAlgorithm, putObjectOutput.objectChecksumAlgorithm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inlineChunkChecksum, inlineChunkChecksumAlgorithm, objectChecksum, objectChecksumAlgorithm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutObjectOutput {\n");
    sb.append("    inlineChunkChecksum: ").append(toIndentedString(inlineChunkChecksum)).append("\n");
    sb.append("    inlineChunkChecksumAlgorithm: ").append(toIndentedString(inlineChunkChecksumAlgorithm)).append("\n");
    sb.append("    objectChecksum: ").append(toIndentedString(objectChecksum)).append("\n");
    sb.append("    objectChecksumAlgorithm: ").append(toIndentedString(objectChecksumAlgorithm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InlineChunkChecksum");
    openapiFields.add("InlineChunkChecksumAlgorithm");
    openapiFields.add("ObjectChecksum");
    openapiFields.add("ObjectChecksumAlgorithm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InlineChunkChecksum");
    openapiRequiredFields.add("InlineChunkChecksumAlgorithm");
    openapiRequiredFields.add("ObjectChecksum");
    openapiRequiredFields.add("ObjectChecksumAlgorithm");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutObjectOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutObjectOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutObjectOutput is not found in the empty JSON string", PutObjectOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutObjectOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutObjectOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutObjectOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `InlineChunkChecksum`
      String.validateJsonElement(jsonObj.get("InlineChunkChecksum"));
      // validate the required field `InlineChunkChecksumAlgorithm`
      DataChecksumAlgorithm.validateJsonElement(jsonObj.get("InlineChunkChecksumAlgorithm"));
      // validate the required field `ObjectChecksum`
      String.validateJsonElement(jsonObj.get("ObjectChecksum"));
      // validate the required field `ObjectChecksumAlgorithm`
      SummaryChecksumAlgorithm.validateJsonElement(jsonObj.get("ObjectChecksumAlgorithm"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutObjectOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutObjectOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutObjectOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutObjectOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<PutObjectOutput>() {
           @Override
           public void write(JsonWriter out, PutObjectOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutObjectOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutObjectOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutObjectOutput
   * @throws IOException if the JSON string is invalid with respect to PutObjectOutput
   */
  public static PutObjectOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutObjectOutput.class);
  }

  /**
   * Convert an instance of PutObjectOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

