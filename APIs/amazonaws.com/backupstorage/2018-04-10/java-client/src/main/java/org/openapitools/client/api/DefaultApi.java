/*
 * AWS Backup Storage
 * The frontend service for Cryo Storage.
 *
 * The version of the OpenAPI document: 2018-04-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetChunkOutput;
import org.openapitools.client.model.GetObjectMetadataOutput;
import org.openapitools.client.model.ListChunksOutput;
import org.openapitools.client.model.ListObjectsOutput;
import org.openapitools.client.model.NotifyObjectCompleteOutput;
import org.openapitools.client.model.NotifyObjectCompleteRequest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PutChunkOutput;
import org.openapitools.client.model.PutChunkRequest;
import org.openapitools.client.model.PutObjectOutput;
import org.openapitools.client.model.PutObjectRequest;
import org.openapitools.client.model.StartObjectOutput;
import org.openapitools.client.model.StartObjectRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteObject
     * @param jobId Backup job Id for the in-progress backup. (required)
     * @param objectName The name of the Object. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectCall(String jobId, String objectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/backup-jobs/{jobId}/object/{objectName}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteObjectValidateBeforeCall(String jobId, String objectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling deleteObject(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling deleteObject(Async)");
        }

        return deleteObjectCall(jobId, objectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Delete Object from the incremental base Backup.
     * @param jobId Backup job Id for the in-progress backup. (required)
     * @param objectName The name of the Object. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteObject(String jobId, String objectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteObjectWithHttpInfo(jobId, objectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Delete Object from the incremental base Backup.
     * @param jobId Backup job Id for the in-progress backup. (required)
     * @param objectName The name of the Object. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteObjectWithHttpInfo(String jobId, String objectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteObjectValidateBeforeCall(jobId, objectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete Object from the incremental base Backup.
     * @param jobId Backup job Id for the in-progress backup. (required)
     * @param objectName The name of the Object. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectAsync(String jobId, String objectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteObjectValidateBeforeCall(jobId, objectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChunk
     * @param jobId Storage job id (required)
     * @param chunkToken Chunk token (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChunkCall(String jobId, String chunkToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restore-jobs/{jobId}/chunk/{chunkToken}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "chunkToken" + "}", localVarApiClient.escapeString(chunkToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChunkValidateBeforeCall(String jobId, String chunkToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getChunk(Async)");
        }

        // verify the required parameter 'chunkToken' is set
        if (chunkToken == null) {
            throw new ApiException("Missing the required parameter 'chunkToken' when calling getChunk(Async)");
        }

        return getChunkCall(jobId, chunkToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets the specified object&#39;s chunk.
     * @param jobId Storage job id (required)
     * @param chunkToken Chunk token (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetChunkOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public GetChunkOutput getChunk(String jobId, String chunkToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetChunkOutput> localVarResp = getChunkWithHttpInfo(jobId, chunkToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified object&#39;s chunk.
     * @param jobId Storage job id (required)
     * @param chunkToken Chunk token (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetChunkOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetChunkOutput> getChunkWithHttpInfo(String jobId, String chunkToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getChunkValidateBeforeCall(jobId, chunkToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetChunkOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified object&#39;s chunk.
     * @param jobId Storage job id (required)
     * @param chunkToken Chunk token (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChunkAsync(String jobId, String chunkToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetChunkOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChunkValidateBeforeCall(jobId, chunkToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetChunkOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectMetadata
     * @param jobId Backup job id for the in-progress backup. (required)
     * @param objectToken Object token. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectMetadataCall(String jobId, String objectToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restore-jobs/{jobId}/object/{objectToken}/metadata"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "objectToken" + "}", localVarApiClient.escapeString(objectToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectMetadataValidateBeforeCall(String jobId, String objectToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getObjectMetadata(Async)");
        }

        // verify the required parameter 'objectToken' is set
        if (objectToken == null) {
            throw new ApiException("Missing the required parameter 'objectToken' when calling getObjectMetadata(Async)");
        }

        return getObjectMetadataCall(jobId, objectToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Get metadata associated with an Object.
     * @param jobId Backup job id for the in-progress backup. (required)
     * @param objectToken Object token. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetObjectMetadataOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectMetadataOutput getObjectMetadata(String jobId, String objectToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetObjectMetadataOutput> localVarResp = getObjectMetadataWithHttpInfo(jobId, objectToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Get metadata associated with an Object.
     * @param jobId Backup job id for the in-progress backup. (required)
     * @param objectToken Object token. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetObjectMetadataOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetObjectMetadataOutput> getObjectMetadataWithHttpInfo(String jobId, String objectToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getObjectMetadataValidateBeforeCall(jobId, objectToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetObjectMetadataOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get metadata associated with an Object.
     * @param jobId Backup job id for the in-progress backup. (required)
     * @param objectToken Object token. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectMetadataAsync(String jobId, String objectToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetObjectMetadataOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectMetadataValidateBeforeCall(jobId, objectToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetObjectMetadataOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChunks
     * @param jobId Storage job id (required)
     * @param objectToken Object token (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Maximum number of chunks (optional)
     * @param nextToken Pagination token (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChunksCall(String jobId, String objectToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restore-jobs/{jobId}/chunks/{objectToken}/list"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "objectToken" + "}", localVarApiClient.escapeString(objectToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChunksValidateBeforeCall(String jobId, String objectToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling listChunks(Async)");
        }

        // verify the required parameter 'objectToken' is set
        if (objectToken == null) {
            throw new ApiException("Missing the required parameter 'objectToken' when calling listChunks(Async)");
        }

        return listChunksCall(jobId, objectToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * List chunks in a given Object
     * @param jobId Storage job id (required)
     * @param objectToken Object token (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Maximum number of chunks (optional)
     * @param nextToken Pagination token (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChunksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ListChunksOutput listChunks(String jobId, String objectToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChunksOutput> localVarResp = listChunksWithHttpInfo(jobId, objectToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * List chunks in a given Object
     * @param jobId Storage job id (required)
     * @param objectToken Object token (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Maximum number of chunks (optional)
     * @param nextToken Pagination token (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChunksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChunksOutput> listChunksWithHttpInfo(String jobId, String objectToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChunksValidateBeforeCall(jobId, objectToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChunksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List chunks in a given Object
     * @param jobId Storage job id (required)
     * @param objectToken Object token (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Maximum number of chunks (optional)
     * @param nextToken Pagination token (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChunksAsync(String jobId, String objectToken, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListChunksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChunksValidateBeforeCall(jobId, objectToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChunksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listObjects
     * @param jobId Storage job id (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startingObjectName Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL (optional)
     * @param startingObjectPrefix Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL (optional)
     * @param maxResults Maximum objects count (optional)
     * @param nextToken Pagination token (optional)
     * @param createdBefore (Optional) Created before filter (optional)
     * @param createdAfter (Optional) Created after filter (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectsCall(String jobId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String startingObjectName, String startingObjectPrefix, Integer maxResults, String nextToken, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restore-jobs/{jobId}/objects/list"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startingObjectName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting-object-name", startingObjectName));
        }

        if (startingObjectPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("starting-object-prefix", startingObjectPrefix));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created-before", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created-after", createdAfter));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listObjectsValidateBeforeCall(String jobId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String startingObjectName, String startingObjectPrefix, Integer maxResults, String nextToken, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling listObjects(Async)");
        }

        return listObjectsCall(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startingObjectName, startingObjectPrefix, maxResults, nextToken, createdBefore, createdAfter, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * List all Objects in a given Backup.
     * @param jobId Storage job id (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startingObjectName Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL (optional)
     * @param startingObjectPrefix Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL (optional)
     * @param maxResults Maximum objects count (optional)
     * @param nextToken Pagination token (optional)
     * @param createdBefore (Optional) Created before filter (optional)
     * @param createdAfter (Optional) Created after filter (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListObjectsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ListObjectsOutput listObjects(String jobId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String startingObjectName, String startingObjectPrefix, Integer maxResults, String nextToken, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListObjectsOutput> localVarResp = listObjectsWithHttpInfo(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startingObjectName, startingObjectPrefix, maxResults, nextToken, createdBefore, createdAfter, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * List all Objects in a given Backup.
     * @param jobId Storage job id (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startingObjectName Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL (optional)
     * @param startingObjectPrefix Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL (optional)
     * @param maxResults Maximum objects count (optional)
     * @param nextToken Pagination token (optional)
     * @param createdBefore (Optional) Created before filter (optional)
     * @param createdAfter (Optional) Created after filter (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListObjectsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListObjectsOutput> listObjectsWithHttpInfo(String jobId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String startingObjectName, String startingObjectPrefix, Integer maxResults, String nextToken, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listObjectsValidateBeforeCall(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startingObjectName, startingObjectPrefix, maxResults, nextToken, createdBefore, createdAfter, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListObjectsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all Objects in a given Backup.
     * @param jobId Storage job id (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startingObjectName Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL (optional)
     * @param startingObjectPrefix Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL (optional)
     * @param maxResults Maximum objects count (optional)
     * @param nextToken Pagination token (optional)
     * @param createdBefore (Optional) Created before filter (optional)
     * @param createdAfter (Optional) Created after filter (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectsAsync(String jobId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String startingObjectName, String startingObjectPrefix, Integer maxResults, String nextToken, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String maxResults2, String nextToken2, final ApiCallback<ListObjectsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listObjectsValidateBeforeCall(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startingObjectName, startingObjectPrefix, maxResults, nextToken, createdBefore, createdAfter, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListObjectsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notifyObjectComplete
     * @param jobId Backup job Id for the in-progress backup (required)
     * @param uploadId Upload Id for the in-progress upload (required)
     * @param checksum Object checksum (required)
     * @param checksumAlgorithm Checksum algorithm (required)
     * @param notifyObjectCompleteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metadataString Optional metadata associated with an Object. Maximum string length is 256 bytes. (optional)
     * @param metadataBlobLength The size of MetadataBlob. (optional)
     * @param metadataChecksum Checksum of MetadataBlob. (optional)
     * @param metadataChecksumAlgorithm Checksum algorithm. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotReadableInputStreamException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyObjectCompleteCall(String jobId, String uploadId, String checksum, String checksumAlgorithm, NotifyObjectCompleteRequest notifyObjectCompleteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String metadataString, Integer metadataBlobLength, String metadataChecksum, String metadataChecksumAlgorithm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notifyObjectCompleteRequest;

        // create path and map variables
        String localVarPath = "/backup-jobs/{jobId}/object/{uploadId}/complete#checksum&checksum-algorithm"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "uploadId" + "}", localVarApiClient.escapeString(uploadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checksum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checksum", checksum));
        }

        if (checksumAlgorithm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checksum-algorithm", checksumAlgorithm));
        }

        if (metadataString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata-string", metadataString));
        }

        if (metadataBlobLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata-blob-length", metadataBlobLength));
        }

        if (metadataChecksum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata-checksum", metadataChecksum));
        }

        if (metadataChecksumAlgorithm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata-checksum-algorithm", metadataChecksumAlgorithm));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notifyObjectCompleteValidateBeforeCall(String jobId, String uploadId, String checksum, String checksumAlgorithm, NotifyObjectCompleteRequest notifyObjectCompleteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String metadataString, Integer metadataBlobLength, String metadataChecksum, String metadataChecksumAlgorithm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling notifyObjectComplete(Async)");
        }

        // verify the required parameter 'uploadId' is set
        if (uploadId == null) {
            throw new ApiException("Missing the required parameter 'uploadId' when calling notifyObjectComplete(Async)");
        }

        // verify the required parameter 'checksum' is set
        if (checksum == null) {
            throw new ApiException("Missing the required parameter 'checksum' when calling notifyObjectComplete(Async)");
        }

        // verify the required parameter 'checksumAlgorithm' is set
        if (checksumAlgorithm == null) {
            throw new ApiException("Missing the required parameter 'checksumAlgorithm' when calling notifyObjectComplete(Async)");
        }

        // verify the required parameter 'notifyObjectCompleteRequest' is set
        if (notifyObjectCompleteRequest == null) {
            throw new ApiException("Missing the required parameter 'notifyObjectCompleteRequest' when calling notifyObjectComplete(Async)");
        }

        return notifyObjectCompleteCall(jobId, uploadId, checksum, checksumAlgorithm, notifyObjectCompleteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metadataString, metadataBlobLength, metadataChecksum, metadataChecksumAlgorithm, _callback);

    }

    /**
     * 
     * Complete upload
     * @param jobId Backup job Id for the in-progress backup (required)
     * @param uploadId Upload Id for the in-progress upload (required)
     * @param checksum Object checksum (required)
     * @param checksumAlgorithm Checksum algorithm (required)
     * @param notifyObjectCompleteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metadataString Optional metadata associated with an Object. Maximum string length is 256 bytes. (optional)
     * @param metadataBlobLength The size of MetadataBlob. (optional)
     * @param metadataChecksum Checksum of MetadataBlob. (optional)
     * @param metadataChecksumAlgorithm Checksum algorithm. (optional)
     * @return NotifyObjectCompleteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotReadableInputStreamException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public NotifyObjectCompleteOutput notifyObjectComplete(String jobId, String uploadId, String checksum, String checksumAlgorithm, NotifyObjectCompleteRequest notifyObjectCompleteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String metadataString, Integer metadataBlobLength, String metadataChecksum, String metadataChecksumAlgorithm) throws ApiException {
        ApiResponse<NotifyObjectCompleteOutput> localVarResp = notifyObjectCompleteWithHttpInfo(jobId, uploadId, checksum, checksumAlgorithm, notifyObjectCompleteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metadataString, metadataBlobLength, metadataChecksum, metadataChecksumAlgorithm);
        return localVarResp.getData();
    }

    /**
     * 
     * Complete upload
     * @param jobId Backup job Id for the in-progress backup (required)
     * @param uploadId Upload Id for the in-progress upload (required)
     * @param checksum Object checksum (required)
     * @param checksumAlgorithm Checksum algorithm (required)
     * @param notifyObjectCompleteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metadataString Optional metadata associated with an Object. Maximum string length is 256 bytes. (optional)
     * @param metadataBlobLength The size of MetadataBlob. (optional)
     * @param metadataChecksum Checksum of MetadataBlob. (optional)
     * @param metadataChecksumAlgorithm Checksum algorithm. (optional)
     * @return ApiResponse&lt;NotifyObjectCompleteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotReadableInputStreamException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotifyObjectCompleteOutput> notifyObjectCompleteWithHttpInfo(String jobId, String uploadId, String checksum, String checksumAlgorithm, NotifyObjectCompleteRequest notifyObjectCompleteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String metadataString, Integer metadataBlobLength, String metadataChecksum, String metadataChecksumAlgorithm) throws ApiException {
        okhttp3.Call localVarCall = notifyObjectCompleteValidateBeforeCall(jobId, uploadId, checksum, checksumAlgorithm, notifyObjectCompleteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metadataString, metadataBlobLength, metadataChecksum, metadataChecksumAlgorithm, null);
        Type localVarReturnType = new TypeToken<NotifyObjectCompleteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Complete upload
     * @param jobId Backup job Id for the in-progress backup (required)
     * @param uploadId Upload Id for the in-progress upload (required)
     * @param checksum Object checksum (required)
     * @param checksumAlgorithm Checksum algorithm (required)
     * @param notifyObjectCompleteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metadataString Optional metadata associated with an Object. Maximum string length is 256 bytes. (optional)
     * @param metadataBlobLength The size of MetadataBlob. (optional)
     * @param metadataChecksum Checksum of MetadataBlob. (optional)
     * @param metadataChecksumAlgorithm Checksum algorithm. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotReadableInputStreamException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notifyObjectCompleteAsync(String jobId, String uploadId, String checksum, String checksumAlgorithm, NotifyObjectCompleteRequest notifyObjectCompleteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String metadataString, Integer metadataBlobLength, String metadataChecksum, String metadataChecksumAlgorithm, final ApiCallback<NotifyObjectCompleteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = notifyObjectCompleteValidateBeforeCall(jobId, uploadId, checksum, checksumAlgorithm, notifyObjectCompleteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metadataString, metadataBlobLength, metadataChecksum, metadataChecksumAlgorithm, _callback);
        Type localVarReturnType = new TypeToken<NotifyObjectCompleteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putChunk
     * @param jobId Backup job Id for the in-progress backup. (required)
     * @param uploadId Upload Id for the in-progress upload. (required)
     * @param chunkIndex Describes this chunk&#39;s position relative to the other chunks (required)
     * @param length Data length (required)
     * @param checksum Data checksum (required)
     * @param checksumAlgorithm Checksum algorithm (required)
     * @param putChunkRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotReadableInputStreamException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putChunkCall(String jobId, String uploadId, Integer chunkIndex, Integer length, String checksum, String checksumAlgorithm, PutChunkRequest putChunkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putChunkRequest;

        // create path and map variables
        String localVarPath = "/backup-jobs/{jobId}/chunk/{uploadId}/{chunkIndex}#length&checksum&checksum-algorithm"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "uploadId" + "}", localVarApiClient.escapeString(uploadId.toString()))
            .replace("{" + "chunkIndex" + "}", localVarApiClient.escapeString(chunkIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (length != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length", length));
        }

        if (checksum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checksum", checksum));
        }

        if (checksumAlgorithm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checksum-algorithm", checksumAlgorithm));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putChunkValidateBeforeCall(String jobId, String uploadId, Integer chunkIndex, Integer length, String checksum, String checksumAlgorithm, PutChunkRequest putChunkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling putChunk(Async)");
        }

        // verify the required parameter 'uploadId' is set
        if (uploadId == null) {
            throw new ApiException("Missing the required parameter 'uploadId' when calling putChunk(Async)");
        }

        // verify the required parameter 'chunkIndex' is set
        if (chunkIndex == null) {
            throw new ApiException("Missing the required parameter 'chunkIndex' when calling putChunk(Async)");
        }

        // verify the required parameter 'length' is set
        if (length == null) {
            throw new ApiException("Missing the required parameter 'length' when calling putChunk(Async)");
        }

        // verify the required parameter 'checksum' is set
        if (checksum == null) {
            throw new ApiException("Missing the required parameter 'checksum' when calling putChunk(Async)");
        }

        // verify the required parameter 'checksumAlgorithm' is set
        if (checksumAlgorithm == null) {
            throw new ApiException("Missing the required parameter 'checksumAlgorithm' when calling putChunk(Async)");
        }

        // verify the required parameter 'putChunkRequest' is set
        if (putChunkRequest == null) {
            throw new ApiException("Missing the required parameter 'putChunkRequest' when calling putChunk(Async)");
        }

        return putChunkCall(jobId, uploadId, chunkIndex, length, checksum, checksumAlgorithm, putChunkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Upload chunk.
     * @param jobId Backup job Id for the in-progress backup. (required)
     * @param uploadId Upload Id for the in-progress upload. (required)
     * @param chunkIndex Describes this chunk&#39;s position relative to the other chunks (required)
     * @param length Data length (required)
     * @param checksum Data checksum (required)
     * @param checksumAlgorithm Checksum algorithm (required)
     * @param putChunkRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutChunkOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotReadableInputStreamException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public PutChunkOutput putChunk(String jobId, String uploadId, Integer chunkIndex, Integer length, String checksum, String checksumAlgorithm, PutChunkRequest putChunkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutChunkOutput> localVarResp = putChunkWithHttpInfo(jobId, uploadId, chunkIndex, length, checksum, checksumAlgorithm, putChunkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Upload chunk.
     * @param jobId Backup job Id for the in-progress backup. (required)
     * @param uploadId Upload Id for the in-progress upload. (required)
     * @param chunkIndex Describes this chunk&#39;s position relative to the other chunks (required)
     * @param length Data length (required)
     * @param checksum Data checksum (required)
     * @param checksumAlgorithm Checksum algorithm (required)
     * @param putChunkRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutChunkOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotReadableInputStreamException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutChunkOutput> putChunkWithHttpInfo(String jobId, String uploadId, Integer chunkIndex, Integer length, String checksum, String checksumAlgorithm, PutChunkRequest putChunkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putChunkValidateBeforeCall(jobId, uploadId, chunkIndex, length, checksum, checksumAlgorithm, putChunkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutChunkOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload chunk.
     * @param jobId Backup job Id for the in-progress backup. (required)
     * @param uploadId Upload Id for the in-progress upload. (required)
     * @param chunkIndex Describes this chunk&#39;s position relative to the other chunks (required)
     * @param length Data length (required)
     * @param checksum Data checksum (required)
     * @param checksumAlgorithm Checksum algorithm (required)
     * @param putChunkRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotReadableInputStreamException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putChunkAsync(String jobId, String uploadId, Integer chunkIndex, Integer length, String checksum, String checksumAlgorithm, PutChunkRequest putChunkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutChunkOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = putChunkValidateBeforeCall(jobId, uploadId, chunkIndex, length, checksum, checksumAlgorithm, putChunkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutChunkOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putObject
     * @param jobId Backup job Id for the in-progress backup. (required)
     * @param objectName The name of the Object to be uploaded. (required)
     * @param putObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metadataString Store user defined metadata like backup checksum, disk ids, restore metadata etc. (optional)
     * @param length Length of the inline chunk data. (optional)
     * @param checksum Inline chunk checksum (optional)
     * @param checksumAlgorithm Inline chunk checksum algorithm (optional)
     * @param objectChecksum object checksum (optional)
     * @param objectChecksumAlgorithm object checksum algorithm (optional)
     * @param throwOnDuplicate Throw an exception if Object name is already exist. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotReadableInputStreamException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putObjectCall(String jobId, String objectName, PutObjectRequest putObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String metadataString, Integer length, String checksum, String checksumAlgorithm, String objectChecksum, String objectChecksumAlgorithm, Boolean throwOnDuplicate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putObjectRequest;

        // create path and map variables
        String localVarPath = "/backup-jobs/{jobId}/object/{objectName}/put-object"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metadataString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metadata-string", metadataString));
        }

        if (length != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("length", length));
        }

        if (checksum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checksum", checksum));
        }

        if (checksumAlgorithm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checksum-algorithm", checksumAlgorithm));
        }

        if (objectChecksum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object-checksum", objectChecksum));
        }

        if (objectChecksumAlgorithm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object-checksum-algorithm", objectChecksumAlgorithm));
        }

        if (throwOnDuplicate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("throwOnDuplicate", throwOnDuplicate));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putObjectValidateBeforeCall(String jobId, String objectName, PutObjectRequest putObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String metadataString, Integer length, String checksum, String checksumAlgorithm, String objectChecksum, String objectChecksumAlgorithm, Boolean throwOnDuplicate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling putObject(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling putObject(Async)");
        }

        // verify the required parameter 'putObjectRequest' is set
        if (putObjectRequest == null) {
            throw new ApiException("Missing the required parameter 'putObjectRequest' when calling putObject(Async)");
        }

        return putObjectCall(jobId, objectName, putObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metadataString, length, checksum, checksumAlgorithm, objectChecksum, objectChecksumAlgorithm, throwOnDuplicate, _callback);

    }

    /**
     * 
     * Upload object that can store object metadata String and data blob in single API call using inline chunk field.
     * @param jobId Backup job Id for the in-progress backup. (required)
     * @param objectName The name of the Object to be uploaded. (required)
     * @param putObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metadataString Store user defined metadata like backup checksum, disk ids, restore metadata etc. (optional)
     * @param length Length of the inline chunk data. (optional)
     * @param checksum Inline chunk checksum (optional)
     * @param checksumAlgorithm Inline chunk checksum algorithm (optional)
     * @param objectChecksum object checksum (optional)
     * @param objectChecksumAlgorithm object checksum algorithm (optional)
     * @param throwOnDuplicate Throw an exception if Object name is already exist. (optional)
     * @return PutObjectOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotReadableInputStreamException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public PutObjectOutput putObject(String jobId, String objectName, PutObjectRequest putObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String metadataString, Integer length, String checksum, String checksumAlgorithm, String objectChecksum, String objectChecksumAlgorithm, Boolean throwOnDuplicate) throws ApiException {
        ApiResponse<PutObjectOutput> localVarResp = putObjectWithHttpInfo(jobId, objectName, putObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metadataString, length, checksum, checksumAlgorithm, objectChecksum, objectChecksumAlgorithm, throwOnDuplicate);
        return localVarResp.getData();
    }

    /**
     * 
     * Upload object that can store object metadata String and data blob in single API call using inline chunk field.
     * @param jobId Backup job Id for the in-progress backup. (required)
     * @param objectName The name of the Object to be uploaded. (required)
     * @param putObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metadataString Store user defined metadata like backup checksum, disk ids, restore metadata etc. (optional)
     * @param length Length of the inline chunk data. (optional)
     * @param checksum Inline chunk checksum (optional)
     * @param checksumAlgorithm Inline chunk checksum algorithm (optional)
     * @param objectChecksum object checksum (optional)
     * @param objectChecksumAlgorithm object checksum algorithm (optional)
     * @param throwOnDuplicate Throw an exception if Object name is already exist. (optional)
     * @return ApiResponse&lt;PutObjectOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotReadableInputStreamException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutObjectOutput> putObjectWithHttpInfo(String jobId, String objectName, PutObjectRequest putObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String metadataString, Integer length, String checksum, String checksumAlgorithm, String objectChecksum, String objectChecksumAlgorithm, Boolean throwOnDuplicate) throws ApiException {
        okhttp3.Call localVarCall = putObjectValidateBeforeCall(jobId, objectName, putObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metadataString, length, checksum, checksumAlgorithm, objectChecksum, objectChecksumAlgorithm, throwOnDuplicate, null);
        Type localVarReturnType = new TypeToken<PutObjectOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload object that can store object metadata String and data blob in single API call using inline chunk field.
     * @param jobId Backup job Id for the in-progress backup. (required)
     * @param objectName The name of the Object to be uploaded. (required)
     * @param putObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metadataString Store user defined metadata like backup checksum, disk ids, restore metadata etc. (optional)
     * @param length Length of the inline chunk data. (optional)
     * @param checksum Inline chunk checksum (optional)
     * @param checksumAlgorithm Inline chunk checksum algorithm (optional)
     * @param objectChecksum object checksum (optional)
     * @param objectChecksumAlgorithm object checksum algorithm (optional)
     * @param throwOnDuplicate Throw an exception if Object name is already exist. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotReadableInputStreamException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> KMSInvalidKeyUsageException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putObjectAsync(String jobId, String objectName, PutObjectRequest putObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String metadataString, Integer length, String checksum, String checksumAlgorithm, String objectChecksum, String objectChecksumAlgorithm, Boolean throwOnDuplicate, final ApiCallback<PutObjectOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = putObjectValidateBeforeCall(jobId, objectName, putObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metadataString, length, checksum, checksumAlgorithm, objectChecksum, objectChecksumAlgorithm, throwOnDuplicate, _callback);
        Type localVarReturnType = new TypeToken<PutObjectOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startObject
     * @param jobId Backup job Id for the in-progress backup (required)
     * @param objectName Name for the object. (required)
     * @param startObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DataAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startObjectCall(String jobId, String objectName, StartObjectRequest startObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startObjectRequest;

        // create path and map variables
        String localVarPath = "/backup-jobs/{jobId}/object/{objectName}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startObjectValidateBeforeCall(String jobId, String objectName, StartObjectRequest startObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling startObject(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling startObject(Async)");
        }

        // verify the required parameter 'startObjectRequest' is set
        if (startObjectRequest == null) {
            throw new ApiException("Missing the required parameter 'startObjectRequest' when calling startObject(Async)");
        }

        return startObjectCall(jobId, objectName, startObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Start upload containing one or many chunks.
     * @param jobId Backup job Id for the in-progress backup (required)
     * @param objectName Name for the object. (required)
     * @param startObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartObjectOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DataAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public StartObjectOutput startObject(String jobId, String objectName, StartObjectRequest startObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartObjectOutput> localVarResp = startObjectWithHttpInfo(jobId, objectName, startObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Start upload containing one or many chunks.
     * @param jobId Backup job Id for the in-progress backup (required)
     * @param objectName Name for the object. (required)
     * @param startObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartObjectOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DataAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartObjectOutput> startObjectWithHttpInfo(String jobId, String objectName, StartObjectRequest startObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startObjectValidateBeforeCall(jobId, objectName, startObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartObjectOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start upload containing one or many chunks.
     * @param jobId Backup job Id for the in-progress backup (required)
     * @param objectName Name for the object. (required)
     * @param startObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceInternalException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IllegalArgumentException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DataAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startObjectAsync(String jobId, String objectName, StartObjectRequest startObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartObjectOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = startObjectValidateBeforeCall(jobId, objectName, startObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartObjectOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
