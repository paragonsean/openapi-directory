/*
 * AWS Backup Storage
 * The frontend service for Cryo Storage.
 *
 * The version of the OpenAPI document: 2018-04-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetChunkOutput;
import org.openapitools.client.model.GetObjectMetadataOutput;
import org.openapitools.client.model.ListChunksOutput;
import org.openapitools.client.model.ListObjectsOutput;
import org.openapitools.client.model.NotifyObjectCompleteOutput;
import org.openapitools.client.model.NotifyObjectCompleteRequest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PutChunkOutput;
import org.openapitools.client.model.PutChunkRequest;
import org.openapitools.client.model.PutObjectOutput;
import org.openapitools.client.model.PutObjectRequest;
import org.openapitools.client.model.StartObjectOutput;
import org.openapitools.client.model.StartObjectRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Delete Object from the incremental base Backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteObjectTest() throws ApiException {
        String jobId = null;
        String objectName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteObject(jobId, objectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the specified object&#39;s chunk.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChunkTest() throws ApiException {
        String jobId = null;
        String chunkToken = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetChunkOutput response = api.getChunk(jobId, chunkToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get metadata associated with an Object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectMetadataTest() throws ApiException {
        String jobId = null;
        String objectToken = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetObjectMetadataOutput response = api.getObjectMetadata(jobId, objectToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * List chunks in a given Object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChunksTest() throws ApiException {
        String jobId = null;
        String objectToken = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListChunksOutput response = api.listChunks(jobId, objectToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List all Objects in a given Backup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listObjectsTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String startingObjectName = null;
        String startingObjectPrefix = null;
        Integer maxResults = null;
        String nextToken = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime createdAfter = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListObjectsOutput response = api.listObjects(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startingObjectName, startingObjectPrefix, maxResults, nextToken, createdBefore, createdAfter, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Complete upload
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notifyObjectCompleteTest() throws ApiException {
        String jobId = null;
        String uploadId = null;
        String checksum = null;
        String checksumAlgorithm = null;
        NotifyObjectCompleteRequest notifyObjectCompleteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String metadataString = null;
        Integer metadataBlobLength = null;
        String metadataChecksum = null;
        String metadataChecksumAlgorithm = null;
        NotifyObjectCompleteOutput response = api.notifyObjectComplete(jobId, uploadId, checksum, checksumAlgorithm, notifyObjectCompleteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metadataString, metadataBlobLength, metadataChecksum, metadataChecksumAlgorithm);
        // TODO: test validations
    }

    /**
     * Upload chunk.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putChunkTest() throws ApiException {
        String jobId = null;
        String uploadId = null;
        Integer chunkIndex = null;
        Integer length = null;
        String checksum = null;
        String checksumAlgorithm = null;
        PutChunkRequest putChunkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutChunkOutput response = api.putChunk(jobId, uploadId, chunkIndex, length, checksum, checksumAlgorithm, putChunkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Upload object that can store object metadata String and data blob in single API call using inline chunk field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putObjectTest() throws ApiException {
        String jobId = null;
        String objectName = null;
        PutObjectRequest putObjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String metadataString = null;
        Integer length = null;
        String checksum = null;
        String checksumAlgorithm = null;
        String objectChecksum = null;
        String objectChecksumAlgorithm = null;
        Boolean throwOnDuplicate = null;
        PutObjectOutput response = api.putObject(jobId, objectName, putObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metadataString, length, checksum, checksumAlgorithm, objectChecksum, objectChecksumAlgorithm, throwOnDuplicate);
        // TODO: test validations
    }

    /**
     * Start upload containing one or many chunks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startObjectTest() throws ApiException {
        String jobId = null;
        String objectName = null;
        StartObjectRequest startObjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartObjectOutput response = api.startObject(jobId, objectName, startObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
