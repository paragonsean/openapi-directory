/**
 * AWS Backup Storage
 * The frontend service for Cryo Storage.
 *
 * The version of the OpenAPI document: 2018-04-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupObject::OAIBackupObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupObject::OAIBackupObject() {
    this->initializeModel();
}

OAIBackupObject::~OAIBackupObject() {}

void OAIBackupObject::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_chunks_count_isSet = false;
    m_chunks_count_isValid = false;

    m_metadata_string_isSet = false;
    m_metadata_string_isValid = false;

    m_object_checksum_isSet = false;
    m_object_checksum_isValid = false;

    m_object_checksum_algorithm_isSet = false;
    m_object_checksum_algorithm_isValid = false;

    m_object_token_isSet = false;
    m_object_token_isValid = false;
}

void OAIBackupObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupObject::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_chunks_count_isValid = ::OpenAPI::fromJsonValue(m_chunks_count, json[QString("ChunksCount")]);
    m_chunks_count_isSet = !json[QString("ChunksCount")].isNull() && m_chunks_count_isValid;

    m_metadata_string_isValid = ::OpenAPI::fromJsonValue(m_metadata_string, json[QString("MetadataString")]);
    m_metadata_string_isSet = !json[QString("MetadataString")].isNull() && m_metadata_string_isValid;

    m_object_checksum_isValid = ::OpenAPI::fromJsonValue(m_object_checksum, json[QString("ObjectChecksum")]);
    m_object_checksum_isSet = !json[QString("ObjectChecksum")].isNull() && m_object_checksum_isValid;

    m_object_checksum_algorithm_isValid = ::OpenAPI::fromJsonValue(m_object_checksum_algorithm, json[QString("ObjectChecksumAlgorithm")]);
    m_object_checksum_algorithm_isSet = !json[QString("ObjectChecksumAlgorithm")].isNull() && m_object_checksum_algorithm_isValid;

    m_object_token_isValid = ::OpenAPI::fromJsonValue(m_object_token, json[QString("ObjectToken")]);
    m_object_token_isSet = !json[QString("ObjectToken")].isNull() && m_object_token_isValid;
}

QString OAIBackupObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupObject::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_chunks_count_isSet) {
        obj.insert(QString("ChunksCount"), ::OpenAPI::toJsonValue(m_chunks_count));
    }
    if (m_metadata_string_isSet) {
        obj.insert(QString("MetadataString"), ::OpenAPI::toJsonValue(m_metadata_string));
    }
    if (m_object_checksum_isSet) {
        obj.insert(QString("ObjectChecksum"), ::OpenAPI::toJsonValue(m_object_checksum));
    }
    if (m_object_checksum_algorithm.isSet()) {
        obj.insert(QString("ObjectChecksumAlgorithm"), ::OpenAPI::toJsonValue(m_object_checksum_algorithm));
    }
    if (m_object_token_isSet) {
        obj.insert(QString("ObjectToken"), ::OpenAPI::toJsonValue(m_object_token));
    }
    return obj;
}

QString OAIBackupObject::getName() const {
    return m_name;
}
void OAIBackupObject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBackupObject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBackupObject::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIBackupObject::getChunksCount() const {
    return m_chunks_count;
}
void OAIBackupObject::setChunksCount(const qint32 &chunks_count) {
    m_chunks_count = chunks_count;
    m_chunks_count_isSet = true;
}

bool OAIBackupObject::is_chunks_count_Set() const{
    return m_chunks_count_isSet;
}

bool OAIBackupObject::is_chunks_count_Valid() const{
    return m_chunks_count_isValid;
}

QString OAIBackupObject::getMetadataString() const {
    return m_metadata_string;
}
void OAIBackupObject::setMetadataString(const QString &metadata_string) {
    m_metadata_string = metadata_string;
    m_metadata_string_isSet = true;
}

bool OAIBackupObject::is_metadata_string_Set() const{
    return m_metadata_string_isSet;
}

bool OAIBackupObject::is_metadata_string_Valid() const{
    return m_metadata_string_isValid;
}

QString OAIBackupObject::getObjectChecksum() const {
    return m_object_checksum;
}
void OAIBackupObject::setObjectChecksum(const QString &object_checksum) {
    m_object_checksum = object_checksum;
    m_object_checksum_isSet = true;
}

bool OAIBackupObject::is_object_checksum_Set() const{
    return m_object_checksum_isSet;
}

bool OAIBackupObject::is_object_checksum_Valid() const{
    return m_object_checksum_isValid;
}

OAISummaryChecksumAlgorithm OAIBackupObject::getObjectChecksumAlgorithm() const {
    return m_object_checksum_algorithm;
}
void OAIBackupObject::setObjectChecksumAlgorithm(const OAISummaryChecksumAlgorithm &object_checksum_algorithm) {
    m_object_checksum_algorithm = object_checksum_algorithm;
    m_object_checksum_algorithm_isSet = true;
}

bool OAIBackupObject::is_object_checksum_algorithm_Set() const{
    return m_object_checksum_algorithm_isSet;
}

bool OAIBackupObject::is_object_checksum_algorithm_Valid() const{
    return m_object_checksum_algorithm_isValid;
}

QString OAIBackupObject::getObjectToken() const {
    return m_object_token;
}
void OAIBackupObject::setObjectToken(const QString &object_token) {
    m_object_token = object_token;
    m_object_token_isSet = true;
}

bool OAIBackupObject::is_object_token_Set() const{
    return m_object_token_isSet;
}

bool OAIBackupObject::is_object_token_Valid() const{
    return m_object_token_isValid;
}

bool OAIBackupObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chunks_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_checksum_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_object_checksum_isValid && m_object_checksum_algorithm_isValid && m_object_token_isValid && true;
}

} // namespace OpenAPI
