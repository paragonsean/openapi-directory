/**
 * AWS Backup Storage
 * The frontend service for Cryo Storage.
 *
 * The version of the OpenAPI document: 2018-04-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutObjectInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutObjectInput::OAIPutObjectInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutObjectInput::OAIPutObjectInput() {
    this->initializeModel();
}

OAIPutObjectInput::~OAIPutObjectInput() {}

void OAIPutObjectInput::initializeModel() {

    m_inline_chunk_isSet = false;
    m_inline_chunk_isValid = false;
}

void OAIPutObjectInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutObjectInput::fromJsonObject(QJsonObject json) {

    m_inline_chunk_isValid = ::OpenAPI::fromJsonValue(m_inline_chunk, json[QString("InlineChunk")]);
    m_inline_chunk_isSet = !json[QString("InlineChunk")].isNull() && m_inline_chunk_isValid;
}

QString OAIPutObjectInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutObjectInput::asJsonObject() const {
    QJsonObject obj;
    if (m_inline_chunk_isSet) {
        obj.insert(QString("InlineChunk"), ::OpenAPI::toJsonValue(m_inline_chunk));
    }
    return obj;
}

QString OAIPutObjectInput::getInlineChunk() const {
    return m_inline_chunk;
}
void OAIPutObjectInput::setInlineChunk(const QString &inline_chunk) {
    m_inline_chunk = inline_chunk;
    m_inline_chunk_isSet = true;
}

bool OAIPutObjectInput::is_inline_chunk_Set() const{
    return m_inline_chunk_isSet;
}

bool OAIPutObjectInput::is_inline_chunk_Valid() const{
    return m_inline_chunk_isValid;
}

bool OAIPutObjectInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inline_chunk_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutObjectInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
