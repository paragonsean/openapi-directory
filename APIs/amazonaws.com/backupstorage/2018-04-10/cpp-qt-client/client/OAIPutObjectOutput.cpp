/**
 * AWS Backup Storage
 * The frontend service for Cryo Storage.
 *
 * The version of the OpenAPI document: 2018-04-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutObjectOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutObjectOutput::OAIPutObjectOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutObjectOutput::OAIPutObjectOutput() {
    this->initializeModel();
}

OAIPutObjectOutput::~OAIPutObjectOutput() {}

void OAIPutObjectOutput::initializeModel() {

    m_inline_chunk_checksum_isSet = false;
    m_inline_chunk_checksum_isValid = false;

    m_inline_chunk_checksum_algorithm_isSet = false;
    m_inline_chunk_checksum_algorithm_isValid = false;

    m_object_checksum_isSet = false;
    m_object_checksum_isValid = false;

    m_object_checksum_algorithm_isSet = false;
    m_object_checksum_algorithm_isValid = false;
}

void OAIPutObjectOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutObjectOutput::fromJsonObject(QJsonObject json) {

    m_inline_chunk_checksum_isValid = ::OpenAPI::fromJsonValue(m_inline_chunk_checksum, json[QString("InlineChunkChecksum")]);
    m_inline_chunk_checksum_isSet = !json[QString("InlineChunkChecksum")].isNull() && m_inline_chunk_checksum_isValid;

    m_inline_chunk_checksum_algorithm_isValid = ::OpenAPI::fromJsonValue(m_inline_chunk_checksum_algorithm, json[QString("InlineChunkChecksumAlgorithm")]);
    m_inline_chunk_checksum_algorithm_isSet = !json[QString("InlineChunkChecksumAlgorithm")].isNull() && m_inline_chunk_checksum_algorithm_isValid;

    m_object_checksum_isValid = ::OpenAPI::fromJsonValue(m_object_checksum, json[QString("ObjectChecksum")]);
    m_object_checksum_isSet = !json[QString("ObjectChecksum")].isNull() && m_object_checksum_isValid;

    m_object_checksum_algorithm_isValid = ::OpenAPI::fromJsonValue(m_object_checksum_algorithm, json[QString("ObjectChecksumAlgorithm")]);
    m_object_checksum_algorithm_isSet = !json[QString("ObjectChecksumAlgorithm")].isNull() && m_object_checksum_algorithm_isValid;
}

QString OAIPutObjectOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutObjectOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_inline_chunk_checksum_isSet) {
        obj.insert(QString("InlineChunkChecksum"), ::OpenAPI::toJsonValue(m_inline_chunk_checksum));
    }
    if (m_inline_chunk_checksum_algorithm.isSet()) {
        obj.insert(QString("InlineChunkChecksumAlgorithm"), ::OpenAPI::toJsonValue(m_inline_chunk_checksum_algorithm));
    }
    if (m_object_checksum_isSet) {
        obj.insert(QString("ObjectChecksum"), ::OpenAPI::toJsonValue(m_object_checksum));
    }
    if (m_object_checksum_algorithm.isSet()) {
        obj.insert(QString("ObjectChecksumAlgorithm"), ::OpenAPI::toJsonValue(m_object_checksum_algorithm));
    }
    return obj;
}

QString OAIPutObjectOutput::getInlineChunkChecksum() const {
    return m_inline_chunk_checksum;
}
void OAIPutObjectOutput::setInlineChunkChecksum(const QString &inline_chunk_checksum) {
    m_inline_chunk_checksum = inline_chunk_checksum;
    m_inline_chunk_checksum_isSet = true;
}

bool OAIPutObjectOutput::is_inline_chunk_checksum_Set() const{
    return m_inline_chunk_checksum_isSet;
}

bool OAIPutObjectOutput::is_inline_chunk_checksum_Valid() const{
    return m_inline_chunk_checksum_isValid;
}

OAIDataChecksumAlgorithm OAIPutObjectOutput::getInlineChunkChecksumAlgorithm() const {
    return m_inline_chunk_checksum_algorithm;
}
void OAIPutObjectOutput::setInlineChunkChecksumAlgorithm(const OAIDataChecksumAlgorithm &inline_chunk_checksum_algorithm) {
    m_inline_chunk_checksum_algorithm = inline_chunk_checksum_algorithm;
    m_inline_chunk_checksum_algorithm_isSet = true;
}

bool OAIPutObjectOutput::is_inline_chunk_checksum_algorithm_Set() const{
    return m_inline_chunk_checksum_algorithm_isSet;
}

bool OAIPutObjectOutput::is_inline_chunk_checksum_algorithm_Valid() const{
    return m_inline_chunk_checksum_algorithm_isValid;
}

QString OAIPutObjectOutput::getObjectChecksum() const {
    return m_object_checksum;
}
void OAIPutObjectOutput::setObjectChecksum(const QString &object_checksum) {
    m_object_checksum = object_checksum;
    m_object_checksum_isSet = true;
}

bool OAIPutObjectOutput::is_object_checksum_Set() const{
    return m_object_checksum_isSet;
}

bool OAIPutObjectOutput::is_object_checksum_Valid() const{
    return m_object_checksum_isValid;
}

OAISummaryChecksumAlgorithm OAIPutObjectOutput::getObjectChecksumAlgorithm() const {
    return m_object_checksum_algorithm;
}
void OAIPutObjectOutput::setObjectChecksumAlgorithm(const OAISummaryChecksumAlgorithm &object_checksum_algorithm) {
    m_object_checksum_algorithm = object_checksum_algorithm;
    m_object_checksum_algorithm_isSet = true;
}

bool OAIPutObjectOutput::is_object_checksum_algorithm_Set() const{
    return m_object_checksum_algorithm_isSet;
}

bool OAIPutObjectOutput::is_object_checksum_algorithm_Valid() const{
    return m_object_checksum_algorithm_isValid;
}

bool OAIPutObjectOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inline_chunk_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_chunk_checksum_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_checksum_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutObjectOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inline_chunk_checksum_isValid && m_inline_chunk_checksum_algorithm_isValid && m_object_checksum_isValid && m_object_checksum_algorithm_isValid && true;
}

} // namespace OpenAPI
