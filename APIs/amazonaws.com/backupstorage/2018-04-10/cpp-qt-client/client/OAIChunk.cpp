/**
 * AWS Backup Storage
 * The frontend service for Cryo Storage.
 *
 * The version of the OpenAPI document: 2018-04-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChunk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChunk::OAIChunk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChunk::OAIChunk() {
    this->initializeModel();
}

OAIChunk::~OAIChunk() {}

void OAIChunk::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_checksum_algorithm_isSet = false;
    m_checksum_algorithm_isValid = false;

    m_chunk_token_isSet = false;
    m_chunk_token_isValid = false;
}

void OAIChunk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChunk::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("Index")]);
    m_index_isSet = !json[QString("Index")].isNull() && m_index_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("Length")]);
    m_length_isSet = !json[QString("Length")].isNull() && m_length_isValid;

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("Checksum")]);
    m_checksum_isSet = !json[QString("Checksum")].isNull() && m_checksum_isValid;

    m_checksum_algorithm_isValid = ::OpenAPI::fromJsonValue(m_checksum_algorithm, json[QString("ChecksumAlgorithm")]);
    m_checksum_algorithm_isSet = !json[QString("ChecksumAlgorithm")].isNull() && m_checksum_algorithm_isValid;

    m_chunk_token_isValid = ::OpenAPI::fromJsonValue(m_chunk_token, json[QString("ChunkToken")]);
    m_chunk_token_isSet = !json[QString("ChunkToken")].isNull() && m_chunk_token_isValid;
}

QString OAIChunk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChunk::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("Index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_length_isSet) {
        obj.insert(QString("Length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_checksum_isSet) {
        obj.insert(QString("Checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_checksum_algorithm.isSet()) {
        obj.insert(QString("ChecksumAlgorithm"), ::OpenAPI::toJsonValue(m_checksum_algorithm));
    }
    if (m_chunk_token_isSet) {
        obj.insert(QString("ChunkToken"), ::OpenAPI::toJsonValue(m_chunk_token));
    }
    return obj;
}

qint32 OAIChunk::getIndex() const {
    return m_index;
}
void OAIChunk::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIChunk::is_index_Set() const{
    return m_index_isSet;
}

bool OAIChunk::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIChunk::getLength() const {
    return m_length;
}
void OAIChunk::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIChunk::is_length_Set() const{
    return m_length_isSet;
}

bool OAIChunk::is_length_Valid() const{
    return m_length_isValid;
}

QString OAIChunk::getChecksum() const {
    return m_checksum;
}
void OAIChunk::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAIChunk::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAIChunk::is_checksum_Valid() const{
    return m_checksum_isValid;
}

OAIDataChecksumAlgorithm OAIChunk::getChecksumAlgorithm() const {
    return m_checksum_algorithm;
}
void OAIChunk::setChecksumAlgorithm(const OAIDataChecksumAlgorithm &checksum_algorithm) {
    m_checksum_algorithm = checksum_algorithm;
    m_checksum_algorithm_isSet = true;
}

bool OAIChunk::is_checksum_algorithm_Set() const{
    return m_checksum_algorithm_isSet;
}

bool OAIChunk::is_checksum_algorithm_Valid() const{
    return m_checksum_algorithm_isValid;
}

QString OAIChunk::getChunkToken() const {
    return m_chunk_token;
}
void OAIChunk::setChunkToken(const QString &chunk_token) {
    m_chunk_token = chunk_token;
    m_chunk_token_isSet = true;
}

bool OAIChunk::is_chunk_token_Set() const{
    return m_chunk_token_isSet;
}

bool OAIChunk::is_chunk_token_Valid() const{
    return m_chunk_token_isValid;
}

bool OAIChunk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checksum_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_chunk_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChunk::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_isValid && m_length_isValid && m_checksum_isValid && m_checksum_algorithm_isValid && m_chunk_token_isValid && true;
}

} // namespace OpenAPI
