# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.summary_checksum_algorithm import SummaryChecksumAlgorithm
from openapi_server import util


class BackupObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, chunks_count: int=None, metadata_string: str=None, object_checksum: str=None, object_checksum_algorithm: SummaryChecksumAlgorithm=None, object_token: str=None):
        """BackupObject - a model defined in OpenAPI

        :param name: The name of this BackupObject.
        :param chunks_count: The chunks_count of this BackupObject.
        :param metadata_string: The metadata_string of this BackupObject.
        :param object_checksum: The object_checksum of this BackupObject.
        :param object_checksum_algorithm: The object_checksum_algorithm of this BackupObject.
        :param object_token: The object_token of this BackupObject.
        """
        self.openapi_types = {
            'name': str,
            'chunks_count': int,
            'metadata_string': str,
            'object_checksum': str,
            'object_checksum_algorithm': SummaryChecksumAlgorithm,
            'object_token': str
        }

        self.attribute_map = {
            'name': 'Name',
            'chunks_count': 'ChunksCount',
            'metadata_string': 'MetadataString',
            'object_checksum': 'ObjectChecksum',
            'object_checksum_algorithm': 'ObjectChecksumAlgorithm',
            'object_token': 'ObjectToken'
        }

        self._name = name
        self._chunks_count = chunks_count
        self._metadata_string = metadata_string
        self._object_checksum = object_checksum
        self._object_checksum_algorithm = object_checksum_algorithm
        self._object_token = object_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupObject of this BackupObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this BackupObject.


        :return: The name of this BackupObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BackupObject.


        :param name: The name of this BackupObject.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def chunks_count(self):
        """Gets the chunks_count of this BackupObject.


        :return: The chunks_count of this BackupObject.
        :rtype: int
        """
        return self._chunks_count

    @chunks_count.setter
    def chunks_count(self, chunks_count):
        """Sets the chunks_count of this BackupObject.


        :param chunks_count: The chunks_count of this BackupObject.
        :type chunks_count: int
        """

        self._chunks_count = chunks_count

    @property
    def metadata_string(self):
        """Gets the metadata_string of this BackupObject.


        :return: The metadata_string of this BackupObject.
        :rtype: str
        """
        return self._metadata_string

    @metadata_string.setter
    def metadata_string(self, metadata_string):
        """Sets the metadata_string of this BackupObject.


        :param metadata_string: The metadata_string of this BackupObject.
        :type metadata_string: str
        """

        self._metadata_string = metadata_string

    @property
    def object_checksum(self):
        """Gets the object_checksum of this BackupObject.


        :return: The object_checksum of this BackupObject.
        :rtype: str
        """
        return self._object_checksum

    @object_checksum.setter
    def object_checksum(self, object_checksum):
        """Sets the object_checksum of this BackupObject.


        :param object_checksum: The object_checksum of this BackupObject.
        :type object_checksum: str
        """
        if object_checksum is None:
            raise ValueError("Invalid value for `object_checksum`, must not be `None`")

        self._object_checksum = object_checksum

    @property
    def object_checksum_algorithm(self):
        """Gets the object_checksum_algorithm of this BackupObject.


        :return: The object_checksum_algorithm of this BackupObject.
        :rtype: SummaryChecksumAlgorithm
        """
        return self._object_checksum_algorithm

    @object_checksum_algorithm.setter
    def object_checksum_algorithm(self, object_checksum_algorithm):
        """Sets the object_checksum_algorithm of this BackupObject.


        :param object_checksum_algorithm: The object_checksum_algorithm of this BackupObject.
        :type object_checksum_algorithm: SummaryChecksumAlgorithm
        """
        if object_checksum_algorithm is None:
            raise ValueError("Invalid value for `object_checksum_algorithm`, must not be `None`")

        self._object_checksum_algorithm = object_checksum_algorithm

    @property
    def object_token(self):
        """Gets the object_token of this BackupObject.


        :return: The object_token of this BackupObject.
        :rtype: str
        """
        return self._object_token

    @object_token.setter
    def object_token(self, object_token):
        """Sets the object_token of this BackupObject.


        :param object_token: The object_token of this BackupObject.
        :type object_token: str
        """
        if object_token is None:
            raise ValueError("Invalid value for `object_token`, must not be `None`")

        self._object_token = object_token
