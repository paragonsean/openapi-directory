# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_checksum_algorithm import DataChecksumAlgorithm
from openapi_server import util


class Chunk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index: int=None, length: int=None, checksum: str=None, checksum_algorithm: DataChecksumAlgorithm=None, chunk_token: str=None):
        """Chunk - a model defined in OpenAPI

        :param index: The index of this Chunk.
        :param length: The length of this Chunk.
        :param checksum: The checksum of this Chunk.
        :param checksum_algorithm: The checksum_algorithm of this Chunk.
        :param chunk_token: The chunk_token of this Chunk.
        """
        self.openapi_types = {
            'index': int,
            'length': int,
            'checksum': str,
            'checksum_algorithm': DataChecksumAlgorithm,
            'chunk_token': str
        }

        self.attribute_map = {
            'index': 'Index',
            'length': 'Length',
            'checksum': 'Checksum',
            'checksum_algorithm': 'ChecksumAlgorithm',
            'chunk_token': 'ChunkToken'
        }

        self._index = index
        self._length = length
        self._checksum = checksum
        self._checksum_algorithm = checksum_algorithm
        self._chunk_token = chunk_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Chunk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Chunk of this Chunk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this Chunk.


        :return: The index of this Chunk.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this Chunk.


        :param index: The index of this Chunk.
        :type index: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")

        self._index = index

    @property
    def length(self):
        """Gets the length of this Chunk.


        :return: The length of this Chunk.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Chunk.


        :param length: The length of this Chunk.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def checksum(self):
        """Gets the checksum of this Chunk.


        :return: The checksum of this Chunk.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this Chunk.


        :param checksum: The checksum of this Chunk.
        :type checksum: str
        """
        if checksum is None:
            raise ValueError("Invalid value for `checksum`, must not be `None`")

        self._checksum = checksum

    @property
    def checksum_algorithm(self):
        """Gets the checksum_algorithm of this Chunk.


        :return: The checksum_algorithm of this Chunk.
        :rtype: DataChecksumAlgorithm
        """
        return self._checksum_algorithm

    @checksum_algorithm.setter
    def checksum_algorithm(self, checksum_algorithm):
        """Sets the checksum_algorithm of this Chunk.


        :param checksum_algorithm: The checksum_algorithm of this Chunk.
        :type checksum_algorithm: DataChecksumAlgorithm
        """
        if checksum_algorithm is None:
            raise ValueError("Invalid value for `checksum_algorithm`, must not be `None`")

        self._checksum_algorithm = checksum_algorithm

    @property
    def chunk_token(self):
        """Gets the chunk_token of this Chunk.


        :return: The chunk_token of this Chunk.
        :rtype: str
        """
        return self._chunk_token

    @chunk_token.setter
    def chunk_token(self, chunk_token):
        """Sets the chunk_token of this Chunk.


        :param chunk_token: The chunk_token of this Chunk.
        :type chunk_token: str
        """
        if chunk_token is None:
            raise ValueError("Invalid value for `chunk_token`, must not be `None`")

        self._chunk_token = chunk_token
