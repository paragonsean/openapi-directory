/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeWorkspaceResponse_workspace.h
 *
 * 
 */

#ifndef OAIDescribeWorkspaceResponse_workspace_H
#define OAIDescribeWorkspaceResponse_workspace_H

#include <QJsonObject>

#include "OAIAccountAccessType.h"
#include "OAILicenseType.h"
#include "OAIPermissionType.h"
#include "OAIWorkspaceDescription_authentication.h"
#include "OAIWorkspaceDescription_networkAccessControl.h"
#include "OAIWorkspaceDescription_vpcConfiguration.h"
#include "OAIWorkspaceStatus.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWorkspaceDescription_authentication;
class OAIWorkspaceDescription_networkAccessControl;
class OAIWorkspaceDescription_vpcConfiguration;

class OAIDescribeWorkspaceResponse_workspace : public OAIObject {
public:
    OAIDescribeWorkspaceResponse_workspace();
    OAIDescribeWorkspaceResponse_workspace(QString json);
    ~OAIDescribeWorkspaceResponse_workspace() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAccountAccessType getAccountAccessType() const;
    void setAccountAccessType(const OAIAccountAccessType &account_access_type);
    bool is_account_access_type_Set() const;
    bool is_account_access_type_Valid() const;

    OAIWorkspaceDescription_authentication getAuthentication() const;
    void setAuthentication(const OAIWorkspaceDescription_authentication &authentication);
    bool is_authentication_Set() const;
    bool is_authentication_Valid() const;

    QDateTime getCreated() const;
    void setCreated(const QDateTime &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QList getDataSources() const;
    void setDataSources(const QList &data_sources);
    bool is_data_sources_Set() const;
    bool is_data_sources_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEndpoint() const;
    void setEndpoint(const QString &endpoint);
    bool is_endpoint_Set() const;
    bool is_endpoint_Valid() const;

    bool getFreeTrialConsumed() const;
    void setFreeTrialConsumed(const bool &free_trial_consumed);
    bool is_free_trial_consumed_Set() const;
    bool is_free_trial_consumed_Valid() const;

    QDateTime getFreeTrialExpiration() const;
    void setFreeTrialExpiration(const QDateTime &free_trial_expiration);
    bool is_free_trial_expiration_Set() const;
    bool is_free_trial_expiration_Valid() const;

    QString getGrafanaVersion() const;
    void setGrafanaVersion(const QString &grafana_version);
    bool is_grafana_version_Set() const;
    bool is_grafana_version_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getLicenseExpiration() const;
    void setLicenseExpiration(const QDateTime &license_expiration);
    bool is_license_expiration_Set() const;
    bool is_license_expiration_Valid() const;

    OAILicenseType getLicenseType() const;
    void setLicenseType(const OAILicenseType &license_type);
    bool is_license_type_Set() const;
    bool is_license_type_Valid() const;

    QDateTime getModified() const;
    void setModified(const QDateTime &modified);
    bool is_modified_Set() const;
    bool is_modified_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIWorkspaceDescription_networkAccessControl getNetworkAccessControl() const;
    void setNetworkAccessControl(const OAIWorkspaceDescription_networkAccessControl &network_access_control);
    bool is_network_access_control_Set() const;
    bool is_network_access_control_Valid() const;

    QList getNotificationDestinations() const;
    void setNotificationDestinations(const QList &notification_destinations);
    bool is_notification_destinations_Set() const;
    bool is_notification_destinations_Valid() const;

    QString getOrganizationRoleName() const;
    void setOrganizationRoleName(const QString &organization_role_name);
    bool is_organization_role_name_Set() const;
    bool is_organization_role_name_Valid() const;

    QList getOrganizationalUnits() const;
    void setOrganizationalUnits(const QList &organizational_units);
    bool is_organizational_units_Set() const;
    bool is_organizational_units_Valid() const;

    OAIPermissionType getPermissionType() const;
    void setPermissionType(const OAIPermissionType &permission_type);
    bool is_permission_type_Set() const;
    bool is_permission_type_Valid() const;

    QString getStackSetName() const;
    void setStackSetName(const QString &stack_set_name);
    bool is_stack_set_name_Set() const;
    bool is_stack_set_name_Valid() const;

    OAIWorkspaceStatus getStatus() const;
    void setStatus(const OAIWorkspaceStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIWorkspaceDescription_vpcConfiguration getVpcConfiguration() const;
    void setVpcConfiguration(const OAIWorkspaceDescription_vpcConfiguration &vpc_configuration);
    bool is_vpc_configuration_Set() const;
    bool is_vpc_configuration_Valid() const;

    QString getWorkspaceRoleArn() const;
    void setWorkspaceRoleArn(const QString &workspace_role_arn);
    bool is_workspace_role_arn_Set() const;
    bool is_workspace_role_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAccountAccessType m_account_access_type;
    bool m_account_access_type_isSet;
    bool m_account_access_type_isValid;

    OAIWorkspaceDescription_authentication m_authentication;
    bool m_authentication_isSet;
    bool m_authentication_isValid;

    QDateTime m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QList m_data_sources;
    bool m_data_sources_isSet;
    bool m_data_sources_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_endpoint;
    bool m_endpoint_isSet;
    bool m_endpoint_isValid;

    bool m_free_trial_consumed;
    bool m_free_trial_consumed_isSet;
    bool m_free_trial_consumed_isValid;

    QDateTime m_free_trial_expiration;
    bool m_free_trial_expiration_isSet;
    bool m_free_trial_expiration_isValid;

    QString m_grafana_version;
    bool m_grafana_version_isSet;
    bool m_grafana_version_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_license_expiration;
    bool m_license_expiration_isSet;
    bool m_license_expiration_isValid;

    OAILicenseType m_license_type;
    bool m_license_type_isSet;
    bool m_license_type_isValid;

    QDateTime m_modified;
    bool m_modified_isSet;
    bool m_modified_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIWorkspaceDescription_networkAccessControl m_network_access_control;
    bool m_network_access_control_isSet;
    bool m_network_access_control_isValid;

    QList m_notification_destinations;
    bool m_notification_destinations_isSet;
    bool m_notification_destinations_isValid;

    QString m_organization_role_name;
    bool m_organization_role_name_isSet;
    bool m_organization_role_name_isValid;

    QList m_organizational_units;
    bool m_organizational_units_isSet;
    bool m_organizational_units_isValid;

    OAIPermissionType m_permission_type;
    bool m_permission_type_isSet;
    bool m_permission_type_isValid;

    QString m_stack_set_name;
    bool m_stack_set_name_isSet;
    bool m_stack_set_name_isValid;

    OAIWorkspaceStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIWorkspaceDescription_vpcConfiguration m_vpc_configuration;
    bool m_vpc_configuration_isSet;
    bool m_vpc_configuration_isValid;

    QString m_workspace_role_arn;
    bool m_workspace_role_arn_isSet;
    bool m_workspace_role_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeWorkspaceResponse_workspace)

#endif // OAIDescribeWorkspaceResponse_workspace_H
