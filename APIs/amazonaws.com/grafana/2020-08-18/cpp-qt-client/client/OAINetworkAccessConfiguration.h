/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINetworkAccessConfiguration.h
 *
 * &lt;p&gt;The configuration settings for in-bound network access to your workspace.&lt;/p&gt; &lt;p&gt;When this is configured, only listed IP addresses and VPC endpoints will be able to access your workspace. Standard Grafana authentication and authorization are still required.&lt;/p&gt; &lt;p&gt;Access is granted to a caller that is in either the IP address list or the VPC endpoint list - they do not need to be in both.&lt;/p&gt; &lt;p&gt;If this is not configured, or is removed, then all IP addresses and VPC endpoints are allowed. Standard Grafana authentication and authorization are still required.&lt;/p&gt; &lt;note&gt; &lt;p&gt;While both &lt;code&gt;prefixListIds&lt;/code&gt; and &lt;code&gt;vpceIds&lt;/code&gt; are required, you can pass in an empty array of strings for either parameter if you do not want to allow any of that type.&lt;/p&gt; &lt;p&gt;If both are passed as empty arrays, no traffic is allowed to the workspace, because only &lt;i&gt;explicitly&lt;/i&gt; allowed connections are accepted.&lt;/p&gt; &lt;/note&gt;
 */

#ifndef OAINetworkAccessConfiguration_H
#define OAINetworkAccessConfiguration_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINetworkAccessConfiguration : public OAIObject {
public:
    OAINetworkAccessConfiguration();
    OAINetworkAccessConfiguration(QString json);
    ~OAINetworkAccessConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getPrefixListIds() const;
    void setPrefixListIds(const QList &prefix_list_ids);
    bool is_prefix_list_ids_Set() const;
    bool is_prefix_list_ids_Valid() const;

    QList getVpceIds() const;
    void setVpceIds(const QList &vpce_ids);
    bool is_vpce_ids_Set() const;
    bool is_vpce_ids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_prefix_list_ids;
    bool m_prefix_list_ids_isSet;
    bool m_prefix_list_ids_isValid;

    QList m_vpce_ids;
    bool m_vpce_ids_isSet;
    bool m_vpce_ids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINetworkAccessConfiguration)

#endif // OAINetworkAccessConfiguration_H
