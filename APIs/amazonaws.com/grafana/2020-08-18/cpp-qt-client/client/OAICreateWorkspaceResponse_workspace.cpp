/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWorkspaceResponse_workspace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWorkspaceResponse_workspace::OAICreateWorkspaceResponse_workspace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWorkspaceResponse_workspace::OAICreateWorkspaceResponse_workspace() {
    this->initializeModel();
}

OAICreateWorkspaceResponse_workspace::~OAICreateWorkspaceResponse_workspace() {}

void OAICreateWorkspaceResponse_workspace::initializeModel() {

    m_account_access_type_isSet = false;
    m_account_access_type_isValid = false;

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_data_sources_isSet = false;
    m_data_sources_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_free_trial_consumed_isSet = false;
    m_free_trial_consumed_isValid = false;

    m_free_trial_expiration_isSet = false;
    m_free_trial_expiration_isValid = false;

    m_grafana_version_isSet = false;
    m_grafana_version_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_license_expiration_isSet = false;
    m_license_expiration_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_access_control_isSet = false;
    m_network_access_control_isValid = false;

    m_notification_destinations_isSet = false;
    m_notification_destinations_isValid = false;

    m_organization_role_name_isSet = false;
    m_organization_role_name_isValid = false;

    m_organizational_units_isSet = false;
    m_organizational_units_isValid = false;

    m_permission_type_isSet = false;
    m_permission_type_isValid = false;

    m_stack_set_name_isSet = false;
    m_stack_set_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;

    m_workspace_role_arn_isSet = false;
    m_workspace_role_arn_isValid = false;
}

void OAICreateWorkspaceResponse_workspace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWorkspaceResponse_workspace::fromJsonObject(QJsonObject json) {

    m_account_access_type_isValid = ::OpenAPI::fromJsonValue(m_account_access_type, json[QString("accountAccessType")]);
    m_account_access_type_isSet = !json[QString("accountAccessType")].isNull() && m_account_access_type_isValid;

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_data_sources_isValid = ::OpenAPI::fromJsonValue(m_data_sources, json[QString("dataSources")]);
    m_data_sources_isSet = !json[QString("dataSources")].isNull() && m_data_sources_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_free_trial_consumed_isValid = ::OpenAPI::fromJsonValue(m_free_trial_consumed, json[QString("freeTrialConsumed")]);
    m_free_trial_consumed_isSet = !json[QString("freeTrialConsumed")].isNull() && m_free_trial_consumed_isValid;

    m_free_trial_expiration_isValid = ::OpenAPI::fromJsonValue(m_free_trial_expiration, json[QString("freeTrialExpiration")]);
    m_free_trial_expiration_isSet = !json[QString("freeTrialExpiration")].isNull() && m_free_trial_expiration_isValid;

    m_grafana_version_isValid = ::OpenAPI::fromJsonValue(m_grafana_version, json[QString("grafanaVersion")]);
    m_grafana_version_isSet = !json[QString("grafanaVersion")].isNull() && m_grafana_version_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_license_expiration_isValid = ::OpenAPI::fromJsonValue(m_license_expiration, json[QString("licenseExpiration")]);
    m_license_expiration_isSet = !json[QString("licenseExpiration")].isNull() && m_license_expiration_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_access_control_isValid = ::OpenAPI::fromJsonValue(m_network_access_control, json[QString("networkAccessControl")]);
    m_network_access_control_isSet = !json[QString("networkAccessControl")].isNull() && m_network_access_control_isValid;

    m_notification_destinations_isValid = ::OpenAPI::fromJsonValue(m_notification_destinations, json[QString("notificationDestinations")]);
    m_notification_destinations_isSet = !json[QString("notificationDestinations")].isNull() && m_notification_destinations_isValid;

    m_organization_role_name_isValid = ::OpenAPI::fromJsonValue(m_organization_role_name, json[QString("organizationRoleName")]);
    m_organization_role_name_isSet = !json[QString("organizationRoleName")].isNull() && m_organization_role_name_isValid;

    m_organizational_units_isValid = ::OpenAPI::fromJsonValue(m_organizational_units, json[QString("organizationalUnits")]);
    m_organizational_units_isSet = !json[QString("organizationalUnits")].isNull() && m_organizational_units_isValid;

    m_permission_type_isValid = ::OpenAPI::fromJsonValue(m_permission_type, json[QString("permissionType")]);
    m_permission_type_isSet = !json[QString("permissionType")].isNull() && m_permission_type_isValid;

    m_stack_set_name_isValid = ::OpenAPI::fromJsonValue(m_stack_set_name, json[QString("stackSetName")]);
    m_stack_set_name_isSet = !json[QString("stackSetName")].isNull() && m_stack_set_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("vpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("vpcConfiguration")].isNull() && m_vpc_configuration_isValid;

    m_workspace_role_arn_isValid = ::OpenAPI::fromJsonValue(m_workspace_role_arn, json[QString("workspaceRoleArn")]);
    m_workspace_role_arn_isSet = !json[QString("workspaceRoleArn")].isNull() && m_workspace_role_arn_isValid;
}

QString OAICreateWorkspaceResponse_workspace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWorkspaceResponse_workspace::asJsonObject() const {
    QJsonObject obj;
    if (m_account_access_type.isSet()) {
        obj.insert(QString("accountAccessType"), ::OpenAPI::toJsonValue(m_account_access_type));
    }
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_data_sources.isSet()) {
        obj.insert(QString("dataSources"), ::OpenAPI::toJsonValue(m_data_sources));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_free_trial_consumed_isSet) {
        obj.insert(QString("freeTrialConsumed"), ::OpenAPI::toJsonValue(m_free_trial_consumed));
    }
    if (m_free_trial_expiration_isSet) {
        obj.insert(QString("freeTrialExpiration"), ::OpenAPI::toJsonValue(m_free_trial_expiration));
    }
    if (m_grafana_version_isSet) {
        obj.insert(QString("grafanaVersion"), ::OpenAPI::toJsonValue(m_grafana_version));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_license_expiration_isSet) {
        obj.insert(QString("licenseExpiration"), ::OpenAPI::toJsonValue(m_license_expiration));
    }
    if (m_license_type.isSet()) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_access_control.isSet()) {
        obj.insert(QString("networkAccessControl"), ::OpenAPI::toJsonValue(m_network_access_control));
    }
    if (m_notification_destinations.isSet()) {
        obj.insert(QString("notificationDestinations"), ::OpenAPI::toJsonValue(m_notification_destinations));
    }
    if (m_organization_role_name_isSet) {
        obj.insert(QString("organizationRoleName"), ::OpenAPI::toJsonValue(m_organization_role_name));
    }
    if (m_organizational_units.isSet()) {
        obj.insert(QString("organizationalUnits"), ::OpenAPI::toJsonValue(m_organizational_units));
    }
    if (m_permission_type.isSet()) {
        obj.insert(QString("permissionType"), ::OpenAPI::toJsonValue(m_permission_type));
    }
    if (m_stack_set_name_isSet) {
        obj.insert(QString("stackSetName"), ::OpenAPI::toJsonValue(m_stack_set_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("vpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    if (m_workspace_role_arn_isSet) {
        obj.insert(QString("workspaceRoleArn"), ::OpenAPI::toJsonValue(m_workspace_role_arn));
    }
    return obj;
}

OAIAccountAccessType OAICreateWorkspaceResponse_workspace::getAccountAccessType() const {
    return m_account_access_type;
}
void OAICreateWorkspaceResponse_workspace::setAccountAccessType(const OAIAccountAccessType &account_access_type) {
    m_account_access_type = account_access_type;
    m_account_access_type_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_account_access_type_Set() const{
    return m_account_access_type_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_account_access_type_Valid() const{
    return m_account_access_type_isValid;
}

OAIWorkspaceDescription_authentication OAICreateWorkspaceResponse_workspace::getAuthentication() const {
    return m_authentication;
}
void OAICreateWorkspaceResponse_workspace::setAuthentication(const OAIWorkspaceDescription_authentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QDateTime OAICreateWorkspaceResponse_workspace::getCreated() const {
    return m_created;
}
void OAICreateWorkspaceResponse_workspace::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_created_Set() const{
    return m_created_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_created_Valid() const{
    return m_created_isValid;
}

QList OAICreateWorkspaceResponse_workspace::getDataSources() const {
    return m_data_sources;
}
void OAICreateWorkspaceResponse_workspace::setDataSources(const QList &data_sources) {
    m_data_sources = data_sources;
    m_data_sources_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_data_sources_Set() const{
    return m_data_sources_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_data_sources_Valid() const{
    return m_data_sources_isValid;
}

QString OAICreateWorkspaceResponse_workspace::getDescription() const {
    return m_description;
}
void OAICreateWorkspaceResponse_workspace::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateWorkspaceResponse_workspace::getEndpoint() const {
    return m_endpoint;
}
void OAICreateWorkspaceResponse_workspace::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

bool OAICreateWorkspaceResponse_workspace::getFreeTrialConsumed() const {
    return m_free_trial_consumed;
}
void OAICreateWorkspaceResponse_workspace::setFreeTrialConsumed(const bool &free_trial_consumed) {
    m_free_trial_consumed = free_trial_consumed;
    m_free_trial_consumed_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_free_trial_consumed_Set() const{
    return m_free_trial_consumed_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_free_trial_consumed_Valid() const{
    return m_free_trial_consumed_isValid;
}

QDateTime OAICreateWorkspaceResponse_workspace::getFreeTrialExpiration() const {
    return m_free_trial_expiration;
}
void OAICreateWorkspaceResponse_workspace::setFreeTrialExpiration(const QDateTime &free_trial_expiration) {
    m_free_trial_expiration = free_trial_expiration;
    m_free_trial_expiration_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_free_trial_expiration_Set() const{
    return m_free_trial_expiration_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_free_trial_expiration_Valid() const{
    return m_free_trial_expiration_isValid;
}

QString OAICreateWorkspaceResponse_workspace::getGrafanaVersion() const {
    return m_grafana_version;
}
void OAICreateWorkspaceResponse_workspace::setGrafanaVersion(const QString &grafana_version) {
    m_grafana_version = grafana_version;
    m_grafana_version_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_grafana_version_Set() const{
    return m_grafana_version_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_grafana_version_Valid() const{
    return m_grafana_version_isValid;
}

QString OAICreateWorkspaceResponse_workspace::getId() const {
    return m_id;
}
void OAICreateWorkspaceResponse_workspace::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAICreateWorkspaceResponse_workspace::getLicenseExpiration() const {
    return m_license_expiration;
}
void OAICreateWorkspaceResponse_workspace::setLicenseExpiration(const QDateTime &license_expiration) {
    m_license_expiration = license_expiration;
    m_license_expiration_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_license_expiration_Set() const{
    return m_license_expiration_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_license_expiration_Valid() const{
    return m_license_expiration_isValid;
}

OAILicenseType OAICreateWorkspaceResponse_workspace::getLicenseType() const {
    return m_license_type;
}
void OAICreateWorkspaceResponse_workspace::setLicenseType(const OAILicenseType &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_license_type_Valid() const{
    return m_license_type_isValid;
}

QDateTime OAICreateWorkspaceResponse_workspace::getModified() const {
    return m_modified;
}
void OAICreateWorkspaceResponse_workspace::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAICreateWorkspaceResponse_workspace::getName() const {
    return m_name;
}
void OAICreateWorkspaceResponse_workspace::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_name_Valid() const{
    return m_name_isValid;
}

OAIWorkspaceDescription_networkAccessControl OAICreateWorkspaceResponse_workspace::getNetworkAccessControl() const {
    return m_network_access_control;
}
void OAICreateWorkspaceResponse_workspace::setNetworkAccessControl(const OAIWorkspaceDescription_networkAccessControl &network_access_control) {
    m_network_access_control = network_access_control;
    m_network_access_control_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_network_access_control_Set() const{
    return m_network_access_control_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_network_access_control_Valid() const{
    return m_network_access_control_isValid;
}

QList OAICreateWorkspaceResponse_workspace::getNotificationDestinations() const {
    return m_notification_destinations;
}
void OAICreateWorkspaceResponse_workspace::setNotificationDestinations(const QList &notification_destinations) {
    m_notification_destinations = notification_destinations;
    m_notification_destinations_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_notification_destinations_Set() const{
    return m_notification_destinations_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_notification_destinations_Valid() const{
    return m_notification_destinations_isValid;
}

QString OAICreateWorkspaceResponse_workspace::getOrganizationRoleName() const {
    return m_organization_role_name;
}
void OAICreateWorkspaceResponse_workspace::setOrganizationRoleName(const QString &organization_role_name) {
    m_organization_role_name = organization_role_name;
    m_organization_role_name_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_organization_role_name_Set() const{
    return m_organization_role_name_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_organization_role_name_Valid() const{
    return m_organization_role_name_isValid;
}

QList OAICreateWorkspaceResponse_workspace::getOrganizationalUnits() const {
    return m_organizational_units;
}
void OAICreateWorkspaceResponse_workspace::setOrganizationalUnits(const QList &organizational_units) {
    m_organizational_units = organizational_units;
    m_organizational_units_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_organizational_units_Set() const{
    return m_organizational_units_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_organizational_units_Valid() const{
    return m_organizational_units_isValid;
}

OAIPermissionType OAICreateWorkspaceResponse_workspace::getPermissionType() const {
    return m_permission_type;
}
void OAICreateWorkspaceResponse_workspace::setPermissionType(const OAIPermissionType &permission_type) {
    m_permission_type = permission_type;
    m_permission_type_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_permission_type_Set() const{
    return m_permission_type_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_permission_type_Valid() const{
    return m_permission_type_isValid;
}

QString OAICreateWorkspaceResponse_workspace::getStackSetName() const {
    return m_stack_set_name;
}
void OAICreateWorkspaceResponse_workspace::setStackSetName(const QString &stack_set_name) {
    m_stack_set_name = stack_set_name;
    m_stack_set_name_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_stack_set_name_Set() const{
    return m_stack_set_name_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_stack_set_name_Valid() const{
    return m_stack_set_name_isValid;
}

OAIWorkspaceStatus OAICreateWorkspaceResponse_workspace::getStatus() const {
    return m_status;
}
void OAICreateWorkspaceResponse_workspace::setStatus(const OAIWorkspaceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAICreateWorkspaceResponse_workspace::getTags() const {
    return m_tags;
}
void OAICreateWorkspaceResponse_workspace::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIWorkspaceDescription_vpcConfiguration OAICreateWorkspaceResponse_workspace::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAICreateWorkspaceResponse_workspace::setVpcConfiguration(const OAIWorkspaceDescription_vpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

QString OAICreateWorkspaceResponse_workspace::getWorkspaceRoleArn() const {
    return m_workspace_role_arn;
}
void OAICreateWorkspaceResponse_workspace::setWorkspaceRoleArn(const QString &workspace_role_arn) {
    m_workspace_role_arn = workspace_role_arn;
    m_workspace_role_arn_isSet = true;
}

bool OAICreateWorkspaceResponse_workspace::is_workspace_role_arn_Set() const{
    return m_workspace_role_arn_isSet;
}

bool OAICreateWorkspaceResponse_workspace::is_workspace_role_arn_Valid() const{
    return m_workspace_role_arn_isValid;
}

bool OAICreateWorkspaceResponse_workspace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_access_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_trial_consumed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_trial_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grafana_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_access_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWorkspaceResponse_workspace::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authentication_isValid && m_created_isValid && m_data_sources_isValid && m_endpoint_isValid && m_grafana_version_isValid && m_id_isValid && m_modified_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
