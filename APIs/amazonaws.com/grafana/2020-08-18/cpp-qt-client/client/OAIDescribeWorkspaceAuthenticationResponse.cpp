/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeWorkspaceAuthenticationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeWorkspaceAuthenticationResponse::OAIDescribeWorkspaceAuthenticationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeWorkspaceAuthenticationResponse::OAIDescribeWorkspaceAuthenticationResponse() {
    this->initializeModel();
}

OAIDescribeWorkspaceAuthenticationResponse::~OAIDescribeWorkspaceAuthenticationResponse() {}

void OAIDescribeWorkspaceAuthenticationResponse::initializeModel() {

    m_authentication_isSet = false;
    m_authentication_isValid = false;
}

void OAIDescribeWorkspaceAuthenticationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeWorkspaceAuthenticationResponse::fromJsonObject(QJsonObject json) {

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;
}

QString OAIDescribeWorkspaceAuthenticationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeWorkspaceAuthenticationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    return obj;
}

OAIDescribeWorkspaceAuthenticationResponse_authentication OAIDescribeWorkspaceAuthenticationResponse::getAuthentication() const {
    return m_authentication;
}
void OAIDescribeWorkspaceAuthenticationResponse::setAuthentication(const OAIDescribeWorkspaceAuthenticationResponse_authentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIDescribeWorkspaceAuthenticationResponse::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIDescribeWorkspaceAuthenticationResponse::is_authentication_Valid() const{
    return m_authentication_isValid;
}

bool OAIDescribeWorkspaceAuthenticationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeWorkspaceAuthenticationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authentication_isValid && true;
}

} // namespace OpenAPI
