/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateInstruction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateInstruction::OAIUpdateInstruction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateInstruction::OAIUpdateInstruction() {
    this->initializeModel();
}

OAIUpdateInstruction::~OAIUpdateInstruction() {}

void OAIUpdateInstruction::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIUpdateInstruction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateInstruction::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIUpdateInstruction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateInstruction::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_users.isSet()) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

OAIUpdateAction OAIUpdateInstruction::getAction() const {
    return m_action;
}
void OAIUpdateInstruction::setAction(const OAIUpdateAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIUpdateInstruction::is_action_Set() const{
    return m_action_isSet;
}

bool OAIUpdateInstruction::is_action_Valid() const{
    return m_action_isValid;
}

OAIRole OAIUpdateInstruction::getRole() const {
    return m_role;
}
void OAIUpdateInstruction::setRole(const OAIRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIUpdateInstruction::is_role_Set() const{
    return m_role_isSet;
}

bool OAIUpdateInstruction::is_role_Valid() const{
    return m_role_isValid;
}

QList OAIUpdateInstruction::getUsers() const {
    return m_users;
}
void OAIUpdateInstruction::setUsers(const QList &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIUpdateInstruction::is_users_Set() const{
    return m_users_isSet;
}

bool OAIUpdateInstruction::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIUpdateInstruction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateInstruction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_role_isValid && m_users_isValid && true;
}

} // namespace OpenAPI
