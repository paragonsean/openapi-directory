/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkAccessConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkAccessConfiguration::OAINetworkAccessConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkAccessConfiguration::OAINetworkAccessConfiguration() {
    this->initializeModel();
}

OAINetworkAccessConfiguration::~OAINetworkAccessConfiguration() {}

void OAINetworkAccessConfiguration::initializeModel() {

    m_prefix_list_ids_isSet = false;
    m_prefix_list_ids_isValid = false;

    m_vpce_ids_isSet = false;
    m_vpce_ids_isValid = false;
}

void OAINetworkAccessConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkAccessConfiguration::fromJsonObject(QJsonObject json) {

    m_prefix_list_ids_isValid = ::OpenAPI::fromJsonValue(m_prefix_list_ids, json[QString("prefixListIds")]);
    m_prefix_list_ids_isSet = !json[QString("prefixListIds")].isNull() && m_prefix_list_ids_isValid;

    m_vpce_ids_isValid = ::OpenAPI::fromJsonValue(m_vpce_ids, json[QString("vpceIds")]);
    m_vpce_ids_isSet = !json[QString("vpceIds")].isNull() && m_vpce_ids_isValid;
}

QString OAINetworkAccessConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkAccessConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_prefix_list_ids.isSet()) {
        obj.insert(QString("prefixListIds"), ::OpenAPI::toJsonValue(m_prefix_list_ids));
    }
    if (m_vpce_ids.isSet()) {
        obj.insert(QString("vpceIds"), ::OpenAPI::toJsonValue(m_vpce_ids));
    }
    return obj;
}

QList OAINetworkAccessConfiguration::getPrefixListIds() const {
    return m_prefix_list_ids;
}
void OAINetworkAccessConfiguration::setPrefixListIds(const QList &prefix_list_ids) {
    m_prefix_list_ids = prefix_list_ids;
    m_prefix_list_ids_isSet = true;
}

bool OAINetworkAccessConfiguration::is_prefix_list_ids_Set() const{
    return m_prefix_list_ids_isSet;
}

bool OAINetworkAccessConfiguration::is_prefix_list_ids_Valid() const{
    return m_prefix_list_ids_isValid;
}

QList OAINetworkAccessConfiguration::getVpceIds() const {
    return m_vpce_ids;
}
void OAINetworkAccessConfiguration::setVpceIds(const QList &vpce_ids) {
    m_vpce_ids = vpce_ids;
    m_vpce_ids_isSet = true;
}

bool OAINetworkAccessConfiguration::is_vpce_ids_Set() const{
    return m_vpce_ids_isSet;
}

bool OAINetworkAccessConfiguration::is_vpce_ids_Valid() const{
    return m_vpce_ids_isValid;
}

bool OAINetworkAccessConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prefix_list_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpce_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkAccessConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_prefix_list_ids_isValid && m_vpce_ids_isValid && true;
}

} // namespace OpenAPI
