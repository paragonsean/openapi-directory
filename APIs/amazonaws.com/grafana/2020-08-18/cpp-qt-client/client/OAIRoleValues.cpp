/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleValues::OAIRoleValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleValues::OAIRoleValues() {
    this->initializeModel();
}

OAIRoleValues::~OAIRoleValues() {}

void OAIRoleValues::initializeModel() {

    m_admin_isSet = false;
    m_admin_isValid = false;

    m_editor_isSet = false;
    m_editor_isValid = false;
}

void OAIRoleValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleValues::fromJsonObject(QJsonObject json) {

    m_admin_isValid = ::OpenAPI::fromJsonValue(m_admin, json[QString("admin")]);
    m_admin_isSet = !json[QString("admin")].isNull() && m_admin_isValid;

    m_editor_isValid = ::OpenAPI::fromJsonValue(m_editor, json[QString("editor")]);
    m_editor_isSet = !json[QString("editor")].isNull() && m_editor_isValid;
}

QString OAIRoleValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleValues::asJsonObject() const {
    QJsonObject obj;
    if (m_admin.isSet()) {
        obj.insert(QString("admin"), ::OpenAPI::toJsonValue(m_admin));
    }
    if (m_editor.isSet()) {
        obj.insert(QString("editor"), ::OpenAPI::toJsonValue(m_editor));
    }
    return obj;
}

QList OAIRoleValues::getAdmin() const {
    return m_admin;
}
void OAIRoleValues::setAdmin(const QList &admin) {
    m_admin = admin;
    m_admin_isSet = true;
}

bool OAIRoleValues::is_admin_Set() const{
    return m_admin_isSet;
}

bool OAIRoleValues::is_admin_Valid() const{
    return m_admin_isValid;
}

QList OAIRoleValues::getEditor() const {
    return m_editor;
}
void OAIRoleValues::setEditor(const QList &editor) {
    m_editor = editor;
    m_editor_isSet = true;
}

bool OAIRoleValues::is_editor_Set() const{
    return m_editor_isSet;
}

bool OAIRoleValues::is_editor_Valid() const{
    return m_editor_isValid;
}

bool OAIRoleValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_editor.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
