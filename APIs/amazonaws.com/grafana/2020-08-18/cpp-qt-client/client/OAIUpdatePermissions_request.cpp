/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePermissions_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePermissions_request::OAIUpdatePermissions_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePermissions_request::OAIUpdatePermissions_request() {
    this->initializeModel();
}

OAIUpdatePermissions_request::~OAIUpdatePermissions_request() {}

void OAIUpdatePermissions_request::initializeModel() {

    m_update_instruction_batch_isSet = false;
    m_update_instruction_batch_isValid = false;
}

void OAIUpdatePermissions_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePermissions_request::fromJsonObject(QJsonObject json) {

    m_update_instruction_batch_isValid = ::OpenAPI::fromJsonValue(m_update_instruction_batch, json[QString("updateInstructionBatch")]);
    m_update_instruction_batch_isSet = !json[QString("updateInstructionBatch")].isNull() && m_update_instruction_batch_isValid;
}

QString OAIUpdatePermissions_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePermissions_request::asJsonObject() const {
    QJsonObject obj;
    if (m_update_instruction_batch.size() > 0) {
        obj.insert(QString("updateInstructionBatch"), ::OpenAPI::toJsonValue(m_update_instruction_batch));
    }
    return obj;
}

QList<OAIUpdateInstruction> OAIUpdatePermissions_request::getUpdateInstructionBatch() const {
    return m_update_instruction_batch;
}
void OAIUpdatePermissions_request::setUpdateInstructionBatch(const QList<OAIUpdateInstruction> &update_instruction_batch) {
    m_update_instruction_batch = update_instruction_batch;
    m_update_instruction_batch_isSet = true;
}

bool OAIUpdatePermissions_request::is_update_instruction_batch_Set() const{
    return m_update_instruction_batch_isSet;
}

bool OAIUpdatePermissions_request::is_update_instruction_batch_Valid() const{
    return m_update_instruction_batch_isValid;
}

bool OAIUpdatePermissions_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_update_instruction_batch.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePermissions_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_update_instruction_batch_isValid && true;
}

} // namespace OpenAPI
