/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateError::OAIUpdateError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateError::OAIUpdateError() {
    this->initializeModel();
}

OAIUpdateError::~OAIUpdateError() {}

void OAIUpdateError::initializeModel() {

    m_caused_by_isSet = false;
    m_caused_by_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIUpdateError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateError::fromJsonObject(QJsonObject json) {

    m_caused_by_isValid = ::OpenAPI::fromJsonValue(m_caused_by, json[QString("causedBy")]);
    m_caused_by_isSet = !json[QString("causedBy")].isNull() && m_caused_by_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIUpdateError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateError::asJsonObject() const {
    QJsonObject obj;
    if (m_caused_by.isSet()) {
        obj.insert(QString("causedBy"), ::OpenAPI::toJsonValue(m_caused_by));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAIUpdateError_causedBy OAIUpdateError::getCausedBy() const {
    return m_caused_by;
}
void OAIUpdateError::setCausedBy(const OAIUpdateError_causedBy &caused_by) {
    m_caused_by = caused_by;
    m_caused_by_isSet = true;
}

bool OAIUpdateError::is_caused_by_Set() const{
    return m_caused_by_isSet;
}

bool OAIUpdateError::is_caused_by_Valid() const{
    return m_caused_by_isValid;
}

qint32 OAIUpdateError::getCode() const {
    return m_code;
}
void OAIUpdateError::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIUpdateError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIUpdateError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIUpdateError::getMessage() const {
    return m_message;
}
void OAIUpdateError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIUpdateError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIUpdateError::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIUpdateError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caused_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_caused_by_isValid && m_code_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
