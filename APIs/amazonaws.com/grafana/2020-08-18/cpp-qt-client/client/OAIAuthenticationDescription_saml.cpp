/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationDescription_saml.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticationDescription_saml::OAIAuthenticationDescription_saml(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticationDescription_saml::OAIAuthenticationDescription_saml() {
    this->initializeModel();
}

OAIAuthenticationDescription_saml::~OAIAuthenticationDescription_saml() {}

void OAIAuthenticationDescription_saml::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAuthenticationDescription_saml::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticationDescription_saml::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAuthenticationDescription_saml::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticationDescription_saml::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAISamlAuthentication_configuration OAIAuthenticationDescription_saml::getConfiguration() const {
    return m_configuration;
}
void OAIAuthenticationDescription_saml::setConfiguration(const OAISamlAuthentication_configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIAuthenticationDescription_saml::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIAuthenticationDescription_saml::is_configuration_Valid() const{
    return m_configuration_isValid;
}

OAISamlConfigurationStatus OAIAuthenticationDescription_saml::getStatus() const {
    return m_status;
}
void OAIAuthenticationDescription_saml::setStatus(const OAISamlConfigurationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAuthenticationDescription_saml::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAuthenticationDescription_saml::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAuthenticationDescription_saml::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticationDescription_saml::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
