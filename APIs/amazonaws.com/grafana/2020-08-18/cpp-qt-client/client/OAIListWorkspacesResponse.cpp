/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListWorkspacesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListWorkspacesResponse::OAIListWorkspacesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListWorkspacesResponse::OAIListWorkspacesResponse() {
    this->initializeModel();
}

OAIListWorkspacesResponse::~OAIListWorkspacesResponse() {}

void OAIListWorkspacesResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_workspaces_isSet = false;
    m_workspaces_isValid = false;
}

void OAIListWorkspacesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListWorkspacesResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_workspaces_isValid = ::OpenAPI::fromJsonValue(m_workspaces, json[QString("workspaces")]);
    m_workspaces_isSet = !json[QString("workspaces")].isNull() && m_workspaces_isValid;
}

QString OAIListWorkspacesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListWorkspacesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_workspaces.isSet()) {
        obj.insert(QString("workspaces"), ::OpenAPI::toJsonValue(m_workspaces));
    }
    return obj;
}

QString OAIListWorkspacesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListWorkspacesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListWorkspacesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListWorkspacesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListWorkspacesResponse::getWorkspaces() const {
    return m_workspaces;
}
void OAIListWorkspacesResponse::setWorkspaces(const QList &workspaces) {
    m_workspaces = workspaces;
    m_workspaces_isSet = true;
}

bool OAIListWorkspacesResponse::is_workspaces_Set() const{
    return m_workspaces_isSet;
}

bool OAIListWorkspacesResponse::is_workspaces_Valid() const{
    return m_workspaces_isValid;
}

bool OAIListWorkspacesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspaces.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListWorkspacesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workspaces_isValid && true;
}

} // namespace OpenAPI
