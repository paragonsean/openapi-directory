/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateWorkspaceAuthentication_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateWorkspaceAuthentication_request::OAIUpdateWorkspaceAuthentication_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateWorkspaceAuthentication_request::OAIUpdateWorkspaceAuthentication_request() {
    this->initializeModel();
}

OAIUpdateWorkspaceAuthentication_request::~OAIUpdateWorkspaceAuthentication_request() {}

void OAIUpdateWorkspaceAuthentication_request::initializeModel() {

    m_authentication_providers_isSet = false;
    m_authentication_providers_isValid = false;

    m_saml_configuration_isSet = false;
    m_saml_configuration_isValid = false;
}

void OAIUpdateWorkspaceAuthentication_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateWorkspaceAuthentication_request::fromJsonObject(QJsonObject json) {

    m_authentication_providers_isValid = ::OpenAPI::fromJsonValue(m_authentication_providers, json[QString("authenticationProviders")]);
    m_authentication_providers_isSet = !json[QString("authenticationProviders")].isNull() && m_authentication_providers_isValid;

    m_saml_configuration_isValid = ::OpenAPI::fromJsonValue(m_saml_configuration, json[QString("samlConfiguration")]);
    m_saml_configuration_isSet = !json[QString("samlConfiguration")].isNull() && m_saml_configuration_isValid;
}

QString OAIUpdateWorkspaceAuthentication_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateWorkspaceAuthentication_request::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_providers.size() > 0) {
        obj.insert(QString("authenticationProviders"), ::OpenAPI::toJsonValue(m_authentication_providers));
    }
    if (m_saml_configuration.isSet()) {
        obj.insert(QString("samlConfiguration"), ::OpenAPI::toJsonValue(m_saml_configuration));
    }
    return obj;
}

QList<OAIAuthenticationProviderTypes> OAIUpdateWorkspaceAuthentication_request::getAuthenticationProviders() const {
    return m_authentication_providers;
}
void OAIUpdateWorkspaceAuthentication_request::setAuthenticationProviders(const QList<OAIAuthenticationProviderTypes> &authentication_providers) {
    m_authentication_providers = authentication_providers;
    m_authentication_providers_isSet = true;
}

bool OAIUpdateWorkspaceAuthentication_request::is_authentication_providers_Set() const{
    return m_authentication_providers_isSet;
}

bool OAIUpdateWorkspaceAuthentication_request::is_authentication_providers_Valid() const{
    return m_authentication_providers_isValid;
}

OAIUpdateWorkspaceAuthentication_request_samlConfiguration OAIUpdateWorkspaceAuthentication_request::getSamlConfiguration() const {
    return m_saml_configuration;
}
void OAIUpdateWorkspaceAuthentication_request::setSamlConfiguration(const OAIUpdateWorkspaceAuthentication_request_samlConfiguration &saml_configuration) {
    m_saml_configuration = saml_configuration;
    m_saml_configuration_isSet = true;
}

bool OAIUpdateWorkspaceAuthentication_request::is_saml_configuration_Set() const{
    return m_saml_configuration_isSet;
}

bool OAIUpdateWorkspaceAuthentication_request::is_saml_configuration_Valid() const{
    return m_saml_configuration_isValid;
}

bool OAIUpdateWorkspaceAuthentication_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateWorkspaceAuthentication_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authentication_providers_isValid && true;
}

} // namespace OpenAPI
