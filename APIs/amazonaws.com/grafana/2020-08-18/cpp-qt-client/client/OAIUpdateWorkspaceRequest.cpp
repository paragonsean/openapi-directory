/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateWorkspaceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateWorkspaceRequest::OAIUpdateWorkspaceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateWorkspaceRequest::OAIUpdateWorkspaceRequest() {
    this->initializeModel();
}

OAIUpdateWorkspaceRequest::~OAIUpdateWorkspaceRequest() {}

void OAIUpdateWorkspaceRequest::initializeModel() {

    m_account_access_type_isSet = false;
    m_account_access_type_isValid = false;

    m_network_access_control_isSet = false;
    m_network_access_control_isValid = false;

    m_organization_role_name_isSet = false;
    m_organization_role_name_isValid = false;

    m_permission_type_isSet = false;
    m_permission_type_isValid = false;

    m_remove_network_access_configuration_isSet = false;
    m_remove_network_access_configuration_isValid = false;

    m_remove_vpc_configuration_isSet = false;
    m_remove_vpc_configuration_isValid = false;

    m_stack_set_name_isSet = false;
    m_stack_set_name_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;

    m_workspace_data_sources_isSet = false;
    m_workspace_data_sources_isValid = false;

    m_workspace_description_isSet = false;
    m_workspace_description_isValid = false;

    m_workspace_name_isSet = false;
    m_workspace_name_isValid = false;

    m_workspace_notification_destinations_isSet = false;
    m_workspace_notification_destinations_isValid = false;

    m_workspace_organizational_units_isSet = false;
    m_workspace_organizational_units_isValid = false;

    m_workspace_role_arn_isSet = false;
    m_workspace_role_arn_isValid = false;
}

void OAIUpdateWorkspaceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateWorkspaceRequest::fromJsonObject(QJsonObject json) {

    m_account_access_type_isValid = ::OpenAPI::fromJsonValue(m_account_access_type, json[QString("accountAccessType")]);
    m_account_access_type_isSet = !json[QString("accountAccessType")].isNull() && m_account_access_type_isValid;

    m_network_access_control_isValid = ::OpenAPI::fromJsonValue(m_network_access_control, json[QString("networkAccessControl")]);
    m_network_access_control_isSet = !json[QString("networkAccessControl")].isNull() && m_network_access_control_isValid;

    m_organization_role_name_isValid = ::OpenAPI::fromJsonValue(m_organization_role_name, json[QString("organizationRoleName")]);
    m_organization_role_name_isSet = !json[QString("organizationRoleName")].isNull() && m_organization_role_name_isValid;

    m_permission_type_isValid = ::OpenAPI::fromJsonValue(m_permission_type, json[QString("permissionType")]);
    m_permission_type_isSet = !json[QString("permissionType")].isNull() && m_permission_type_isValid;

    m_remove_network_access_configuration_isValid = ::OpenAPI::fromJsonValue(m_remove_network_access_configuration, json[QString("removeNetworkAccessConfiguration")]);
    m_remove_network_access_configuration_isSet = !json[QString("removeNetworkAccessConfiguration")].isNull() && m_remove_network_access_configuration_isValid;

    m_remove_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_remove_vpc_configuration, json[QString("removeVpcConfiguration")]);
    m_remove_vpc_configuration_isSet = !json[QString("removeVpcConfiguration")].isNull() && m_remove_vpc_configuration_isValid;

    m_stack_set_name_isValid = ::OpenAPI::fromJsonValue(m_stack_set_name, json[QString("stackSetName")]);
    m_stack_set_name_isSet = !json[QString("stackSetName")].isNull() && m_stack_set_name_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("vpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("vpcConfiguration")].isNull() && m_vpc_configuration_isValid;

    m_workspace_data_sources_isValid = ::OpenAPI::fromJsonValue(m_workspace_data_sources, json[QString("workspaceDataSources")]);
    m_workspace_data_sources_isSet = !json[QString("workspaceDataSources")].isNull() && m_workspace_data_sources_isValid;

    m_workspace_description_isValid = ::OpenAPI::fromJsonValue(m_workspace_description, json[QString("workspaceDescription")]);
    m_workspace_description_isSet = !json[QString("workspaceDescription")].isNull() && m_workspace_description_isValid;

    m_workspace_name_isValid = ::OpenAPI::fromJsonValue(m_workspace_name, json[QString("workspaceName")]);
    m_workspace_name_isSet = !json[QString("workspaceName")].isNull() && m_workspace_name_isValid;

    m_workspace_notification_destinations_isValid = ::OpenAPI::fromJsonValue(m_workspace_notification_destinations, json[QString("workspaceNotificationDestinations")]);
    m_workspace_notification_destinations_isSet = !json[QString("workspaceNotificationDestinations")].isNull() && m_workspace_notification_destinations_isValid;

    m_workspace_organizational_units_isValid = ::OpenAPI::fromJsonValue(m_workspace_organizational_units, json[QString("workspaceOrganizationalUnits")]);
    m_workspace_organizational_units_isSet = !json[QString("workspaceOrganizationalUnits")].isNull() && m_workspace_organizational_units_isValid;

    m_workspace_role_arn_isValid = ::OpenAPI::fromJsonValue(m_workspace_role_arn, json[QString("workspaceRoleArn")]);
    m_workspace_role_arn_isSet = !json[QString("workspaceRoleArn")].isNull() && m_workspace_role_arn_isValid;
}

QString OAIUpdateWorkspaceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateWorkspaceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_access_type.isSet()) {
        obj.insert(QString("accountAccessType"), ::OpenAPI::toJsonValue(m_account_access_type));
    }
    if (m_network_access_control.isSet()) {
        obj.insert(QString("networkAccessControl"), ::OpenAPI::toJsonValue(m_network_access_control));
    }
    if (m_organization_role_name_isSet) {
        obj.insert(QString("organizationRoleName"), ::OpenAPI::toJsonValue(m_organization_role_name));
    }
    if (m_permission_type.isSet()) {
        obj.insert(QString("permissionType"), ::OpenAPI::toJsonValue(m_permission_type));
    }
    if (m_remove_network_access_configuration_isSet) {
        obj.insert(QString("removeNetworkAccessConfiguration"), ::OpenAPI::toJsonValue(m_remove_network_access_configuration));
    }
    if (m_remove_vpc_configuration_isSet) {
        obj.insert(QString("removeVpcConfiguration"), ::OpenAPI::toJsonValue(m_remove_vpc_configuration));
    }
    if (m_stack_set_name_isSet) {
        obj.insert(QString("stackSetName"), ::OpenAPI::toJsonValue(m_stack_set_name));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("vpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    if (m_workspace_data_sources.isSet()) {
        obj.insert(QString("workspaceDataSources"), ::OpenAPI::toJsonValue(m_workspace_data_sources));
    }
    if (m_workspace_description_isSet) {
        obj.insert(QString("workspaceDescription"), ::OpenAPI::toJsonValue(m_workspace_description));
    }
    if (m_workspace_name_isSet) {
        obj.insert(QString("workspaceName"), ::OpenAPI::toJsonValue(m_workspace_name));
    }
    if (m_workspace_notification_destinations.isSet()) {
        obj.insert(QString("workspaceNotificationDestinations"), ::OpenAPI::toJsonValue(m_workspace_notification_destinations));
    }
    if (m_workspace_organizational_units.isSet()) {
        obj.insert(QString("workspaceOrganizationalUnits"), ::OpenAPI::toJsonValue(m_workspace_organizational_units));
    }
    if (m_workspace_role_arn_isSet) {
        obj.insert(QString("workspaceRoleArn"), ::OpenAPI::toJsonValue(m_workspace_role_arn));
    }
    return obj;
}

OAIAccountAccessType OAIUpdateWorkspaceRequest::getAccountAccessType() const {
    return m_account_access_type;
}
void OAIUpdateWorkspaceRequest::setAccountAccessType(const OAIAccountAccessType &account_access_type) {
    m_account_access_type = account_access_type;
    m_account_access_type_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_account_access_type_Set() const{
    return m_account_access_type_isSet;
}

bool OAIUpdateWorkspaceRequest::is_account_access_type_Valid() const{
    return m_account_access_type_isValid;
}

OAIUpdateWorkspaceRequest_networkAccessControl OAIUpdateWorkspaceRequest::getNetworkAccessControl() const {
    return m_network_access_control;
}
void OAIUpdateWorkspaceRequest::setNetworkAccessControl(const OAIUpdateWorkspaceRequest_networkAccessControl &network_access_control) {
    m_network_access_control = network_access_control;
    m_network_access_control_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_network_access_control_Set() const{
    return m_network_access_control_isSet;
}

bool OAIUpdateWorkspaceRequest::is_network_access_control_Valid() const{
    return m_network_access_control_isValid;
}

QString OAIUpdateWorkspaceRequest::getOrganizationRoleName() const {
    return m_organization_role_name;
}
void OAIUpdateWorkspaceRequest::setOrganizationRoleName(const QString &organization_role_name) {
    m_organization_role_name = organization_role_name;
    m_organization_role_name_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_organization_role_name_Set() const{
    return m_organization_role_name_isSet;
}

bool OAIUpdateWorkspaceRequest::is_organization_role_name_Valid() const{
    return m_organization_role_name_isValid;
}

OAIPermissionType OAIUpdateWorkspaceRequest::getPermissionType() const {
    return m_permission_type;
}
void OAIUpdateWorkspaceRequest::setPermissionType(const OAIPermissionType &permission_type) {
    m_permission_type = permission_type;
    m_permission_type_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_permission_type_Set() const{
    return m_permission_type_isSet;
}

bool OAIUpdateWorkspaceRequest::is_permission_type_Valid() const{
    return m_permission_type_isValid;
}

bool OAIUpdateWorkspaceRequest::getRemoveNetworkAccessConfiguration() const {
    return m_remove_network_access_configuration;
}
void OAIUpdateWorkspaceRequest::setRemoveNetworkAccessConfiguration(const bool &remove_network_access_configuration) {
    m_remove_network_access_configuration = remove_network_access_configuration;
    m_remove_network_access_configuration_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_remove_network_access_configuration_Set() const{
    return m_remove_network_access_configuration_isSet;
}

bool OAIUpdateWorkspaceRequest::is_remove_network_access_configuration_Valid() const{
    return m_remove_network_access_configuration_isValid;
}

bool OAIUpdateWorkspaceRequest::getRemoveVpcConfiguration() const {
    return m_remove_vpc_configuration;
}
void OAIUpdateWorkspaceRequest::setRemoveVpcConfiguration(const bool &remove_vpc_configuration) {
    m_remove_vpc_configuration = remove_vpc_configuration;
    m_remove_vpc_configuration_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_remove_vpc_configuration_Set() const{
    return m_remove_vpc_configuration_isSet;
}

bool OAIUpdateWorkspaceRequest::is_remove_vpc_configuration_Valid() const{
    return m_remove_vpc_configuration_isValid;
}

QString OAIUpdateWorkspaceRequest::getStackSetName() const {
    return m_stack_set_name;
}
void OAIUpdateWorkspaceRequest::setStackSetName(const QString &stack_set_name) {
    m_stack_set_name = stack_set_name;
    m_stack_set_name_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_stack_set_name_Set() const{
    return m_stack_set_name_isSet;
}

bool OAIUpdateWorkspaceRequest::is_stack_set_name_Valid() const{
    return m_stack_set_name_isValid;
}

OAIUpdateWorkspaceRequest_vpcConfiguration OAIUpdateWorkspaceRequest::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAIUpdateWorkspaceRequest::setVpcConfiguration(const OAIUpdateWorkspaceRequest_vpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAIUpdateWorkspaceRequest::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

QList OAIUpdateWorkspaceRequest::getWorkspaceDataSources() const {
    return m_workspace_data_sources;
}
void OAIUpdateWorkspaceRequest::setWorkspaceDataSources(const QList &workspace_data_sources) {
    m_workspace_data_sources = workspace_data_sources;
    m_workspace_data_sources_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_workspace_data_sources_Set() const{
    return m_workspace_data_sources_isSet;
}

bool OAIUpdateWorkspaceRequest::is_workspace_data_sources_Valid() const{
    return m_workspace_data_sources_isValid;
}

QString OAIUpdateWorkspaceRequest::getWorkspaceDescription() const {
    return m_workspace_description;
}
void OAIUpdateWorkspaceRequest::setWorkspaceDescription(const QString &workspace_description) {
    m_workspace_description = workspace_description;
    m_workspace_description_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_workspace_description_Set() const{
    return m_workspace_description_isSet;
}

bool OAIUpdateWorkspaceRequest::is_workspace_description_Valid() const{
    return m_workspace_description_isValid;
}

QString OAIUpdateWorkspaceRequest::getWorkspaceName() const {
    return m_workspace_name;
}
void OAIUpdateWorkspaceRequest::setWorkspaceName(const QString &workspace_name) {
    m_workspace_name = workspace_name;
    m_workspace_name_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_workspace_name_Set() const{
    return m_workspace_name_isSet;
}

bool OAIUpdateWorkspaceRequest::is_workspace_name_Valid() const{
    return m_workspace_name_isValid;
}

QList OAIUpdateWorkspaceRequest::getWorkspaceNotificationDestinations() const {
    return m_workspace_notification_destinations;
}
void OAIUpdateWorkspaceRequest::setWorkspaceNotificationDestinations(const QList &workspace_notification_destinations) {
    m_workspace_notification_destinations = workspace_notification_destinations;
    m_workspace_notification_destinations_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_workspace_notification_destinations_Set() const{
    return m_workspace_notification_destinations_isSet;
}

bool OAIUpdateWorkspaceRequest::is_workspace_notification_destinations_Valid() const{
    return m_workspace_notification_destinations_isValid;
}

QList OAIUpdateWorkspaceRequest::getWorkspaceOrganizationalUnits() const {
    return m_workspace_organizational_units;
}
void OAIUpdateWorkspaceRequest::setWorkspaceOrganizationalUnits(const QList &workspace_organizational_units) {
    m_workspace_organizational_units = workspace_organizational_units;
    m_workspace_organizational_units_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_workspace_organizational_units_Set() const{
    return m_workspace_organizational_units_isSet;
}

bool OAIUpdateWorkspaceRequest::is_workspace_organizational_units_Valid() const{
    return m_workspace_organizational_units_isValid;
}

QString OAIUpdateWorkspaceRequest::getWorkspaceRoleArn() const {
    return m_workspace_role_arn;
}
void OAIUpdateWorkspaceRequest::setWorkspaceRoleArn(const QString &workspace_role_arn) {
    m_workspace_role_arn = workspace_role_arn;
    m_workspace_role_arn_isSet = true;
}

bool OAIUpdateWorkspaceRequest::is_workspace_role_arn_Set() const{
    return m_workspace_role_arn_isSet;
}

bool OAIUpdateWorkspaceRequest::is_workspace_role_arn_Valid() const{
    return m_workspace_role_arn_isValid;
}

bool OAIUpdateWorkspaceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_access_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_access_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_network_access_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_vpc_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_data_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_notification_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_organizational_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateWorkspaceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
