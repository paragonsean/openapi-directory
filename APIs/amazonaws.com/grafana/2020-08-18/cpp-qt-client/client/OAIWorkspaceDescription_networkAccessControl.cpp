/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceDescription_networkAccessControl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceDescription_networkAccessControl::OAIWorkspaceDescription_networkAccessControl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceDescription_networkAccessControl::OAIWorkspaceDescription_networkAccessControl() {
    this->initializeModel();
}

OAIWorkspaceDescription_networkAccessControl::~OAIWorkspaceDescription_networkAccessControl() {}

void OAIWorkspaceDescription_networkAccessControl::initializeModel() {

    m_prefix_list_ids_isSet = false;
    m_prefix_list_ids_isValid = false;

    m_vpce_ids_isSet = false;
    m_vpce_ids_isValid = false;
}

void OAIWorkspaceDescription_networkAccessControl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceDescription_networkAccessControl::fromJsonObject(QJsonObject json) {

    m_prefix_list_ids_isValid = ::OpenAPI::fromJsonValue(m_prefix_list_ids, json[QString("prefixListIds")]);
    m_prefix_list_ids_isSet = !json[QString("prefixListIds")].isNull() && m_prefix_list_ids_isValid;

    m_vpce_ids_isValid = ::OpenAPI::fromJsonValue(m_vpce_ids, json[QString("vpceIds")]);
    m_vpce_ids_isSet = !json[QString("vpceIds")].isNull() && m_vpce_ids_isValid;
}

QString OAIWorkspaceDescription_networkAccessControl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceDescription_networkAccessControl::asJsonObject() const {
    QJsonObject obj;
    if (m_prefix_list_ids.isSet()) {
        obj.insert(QString("prefixListIds"), ::OpenAPI::toJsonValue(m_prefix_list_ids));
    }
    if (m_vpce_ids.isSet()) {
        obj.insert(QString("vpceIds"), ::OpenAPI::toJsonValue(m_vpce_ids));
    }
    return obj;
}

QList OAIWorkspaceDescription_networkAccessControl::getPrefixListIds() const {
    return m_prefix_list_ids;
}
void OAIWorkspaceDescription_networkAccessControl::setPrefixListIds(const QList &prefix_list_ids) {
    m_prefix_list_ids = prefix_list_ids;
    m_prefix_list_ids_isSet = true;
}

bool OAIWorkspaceDescription_networkAccessControl::is_prefix_list_ids_Set() const{
    return m_prefix_list_ids_isSet;
}

bool OAIWorkspaceDescription_networkAccessControl::is_prefix_list_ids_Valid() const{
    return m_prefix_list_ids_isValid;
}

QList OAIWorkspaceDescription_networkAccessControl::getVpceIds() const {
    return m_vpce_ids;
}
void OAIWorkspaceDescription_networkAccessControl::setVpceIds(const QList &vpce_ids) {
    m_vpce_ids = vpce_ids;
    m_vpce_ids_isSet = true;
}

bool OAIWorkspaceDescription_networkAccessControl::is_vpce_ids_Set() const{
    return m_vpce_ids_isSet;
}

bool OAIWorkspaceDescription_networkAccessControl::is_vpce_ids_Valid() const{
    return m_vpce_ids_isValid;
}

bool OAIWorkspaceDescription_networkAccessControl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_prefix_list_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpce_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceDescription_networkAccessControl::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_prefix_list_ids_isValid && m_vpce_ids_isValid && true;
}

} // namespace OpenAPI
