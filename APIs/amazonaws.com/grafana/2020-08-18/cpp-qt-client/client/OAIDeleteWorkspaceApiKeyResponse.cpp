/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteWorkspaceApiKeyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteWorkspaceApiKeyResponse::OAIDeleteWorkspaceApiKeyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteWorkspaceApiKeyResponse::OAIDeleteWorkspaceApiKeyResponse() {
    this->initializeModel();
}

OAIDeleteWorkspaceApiKeyResponse::~OAIDeleteWorkspaceApiKeyResponse() {}

void OAIDeleteWorkspaceApiKeyResponse::initializeModel() {

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;
}

void OAIDeleteWorkspaceApiKeyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteWorkspaceApiKeyResponse::fromJsonObject(QJsonObject json) {

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("keyName")]);
    m_key_name_isSet = !json[QString("keyName")].isNull() && m_key_name_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;
}

QString OAIDeleteWorkspaceApiKeyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteWorkspaceApiKeyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_key_name_isSet) {
        obj.insert(QString("keyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    return obj;
}

QString OAIDeleteWorkspaceApiKeyResponse::getKeyName() const {
    return m_key_name;
}
void OAIDeleteWorkspaceApiKeyResponse::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAIDeleteWorkspaceApiKeyResponse::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAIDeleteWorkspaceApiKeyResponse::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QString OAIDeleteWorkspaceApiKeyResponse::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIDeleteWorkspaceApiKeyResponse::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIDeleteWorkspaceApiKeyResponse::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIDeleteWorkspaceApiKeyResponse::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

bool OAIDeleteWorkspaceApiKeyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteWorkspaceApiKeyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_name_isValid && m_workspace_id_isValid && true;
}

} // namespace OpenAPI
