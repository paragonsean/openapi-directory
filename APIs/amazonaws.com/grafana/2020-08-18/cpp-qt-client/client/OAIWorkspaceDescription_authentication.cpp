/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceDescription_authentication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceDescription_authentication::OAIWorkspaceDescription_authentication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceDescription_authentication::OAIWorkspaceDescription_authentication() {
    this->initializeModel();
}

OAIWorkspaceDescription_authentication::~OAIWorkspaceDescription_authentication() {}

void OAIWorkspaceDescription_authentication::initializeModel() {

    m_providers_isSet = false;
    m_providers_isValid = false;

    m_saml_configuration_status_isSet = false;
    m_saml_configuration_status_isValid = false;
}

void OAIWorkspaceDescription_authentication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceDescription_authentication::fromJsonObject(QJsonObject json) {

    m_providers_isValid = ::OpenAPI::fromJsonValue(m_providers, json[QString("providers")]);
    m_providers_isSet = !json[QString("providers")].isNull() && m_providers_isValid;

    m_saml_configuration_status_isValid = ::OpenAPI::fromJsonValue(m_saml_configuration_status, json[QString("samlConfigurationStatus")]);
    m_saml_configuration_status_isSet = !json[QString("samlConfigurationStatus")].isNull() && m_saml_configuration_status_isValid;
}

QString OAIWorkspaceDescription_authentication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceDescription_authentication::asJsonObject() const {
    QJsonObject obj;
    if (m_providers.isSet()) {
        obj.insert(QString("providers"), ::OpenAPI::toJsonValue(m_providers));
    }
    if (m_saml_configuration_status.isSet()) {
        obj.insert(QString("samlConfigurationStatus"), ::OpenAPI::toJsonValue(m_saml_configuration_status));
    }
    return obj;
}

QList OAIWorkspaceDescription_authentication::getProviders() const {
    return m_providers;
}
void OAIWorkspaceDescription_authentication::setProviders(const QList &providers) {
    m_providers = providers;
    m_providers_isSet = true;
}

bool OAIWorkspaceDescription_authentication::is_providers_Set() const{
    return m_providers_isSet;
}

bool OAIWorkspaceDescription_authentication::is_providers_Valid() const{
    return m_providers_isValid;
}

OAISamlConfigurationStatus OAIWorkspaceDescription_authentication::getSamlConfigurationStatus() const {
    return m_saml_configuration_status;
}
void OAIWorkspaceDescription_authentication::setSamlConfigurationStatus(const OAISamlConfigurationStatus &saml_configuration_status) {
    m_saml_configuration_status = saml_configuration_status;
    m_saml_configuration_status_isSet = true;
}

bool OAIWorkspaceDescription_authentication::is_saml_configuration_status_Set() const{
    return m_saml_configuration_status_isSet;
}

bool OAIWorkspaceDescription_authentication::is_saml_configuration_status_Valid() const{
    return m_saml_configuration_status_isValid;
}

bool OAIWorkspaceDescription_authentication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_providers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_configuration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceDescription_authentication::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_providers_isValid && true;
}

} // namespace OpenAPI
