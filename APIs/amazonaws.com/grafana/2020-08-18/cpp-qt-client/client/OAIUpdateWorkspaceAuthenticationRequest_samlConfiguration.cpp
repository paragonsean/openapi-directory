/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration() {
    this->initializeModel();
}

OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::~OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration() {}

void OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::initializeModel() {

    m_allowed_organizations_isSet = false;
    m_allowed_organizations_isValid = false;

    m_assertion_attributes_isSet = false;
    m_assertion_attributes_isValid = false;

    m_idp_metadata_isSet = false;
    m_idp_metadata_isValid = false;

    m_login_validity_duration_isSet = false;
    m_login_validity_duration_isValid = false;

    m_role_values_isSet = false;
    m_role_values_isValid = false;
}

void OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::fromJsonObject(QJsonObject json) {

    m_allowed_organizations_isValid = ::OpenAPI::fromJsonValue(m_allowed_organizations, json[QString("allowedOrganizations")]);
    m_allowed_organizations_isSet = !json[QString("allowedOrganizations")].isNull() && m_allowed_organizations_isValid;

    m_assertion_attributes_isValid = ::OpenAPI::fromJsonValue(m_assertion_attributes, json[QString("assertionAttributes")]);
    m_assertion_attributes_isSet = !json[QString("assertionAttributes")].isNull() && m_assertion_attributes_isValid;

    m_idp_metadata_isValid = ::OpenAPI::fromJsonValue(m_idp_metadata, json[QString("idpMetadata")]);
    m_idp_metadata_isSet = !json[QString("idpMetadata")].isNull() && m_idp_metadata_isValid;

    m_login_validity_duration_isValid = ::OpenAPI::fromJsonValue(m_login_validity_duration, json[QString("loginValidityDuration")]);
    m_login_validity_duration_isSet = !json[QString("loginValidityDuration")].isNull() && m_login_validity_duration_isValid;

    m_role_values_isValid = ::OpenAPI::fromJsonValue(m_role_values, json[QString("roleValues")]);
    m_role_values_isSet = !json[QString("roleValues")].isNull() && m_role_values_isValid;
}

QString OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_organizations.isSet()) {
        obj.insert(QString("allowedOrganizations"), ::OpenAPI::toJsonValue(m_allowed_organizations));
    }
    if (m_assertion_attributes.isSet()) {
        obj.insert(QString("assertionAttributes"), ::OpenAPI::toJsonValue(m_assertion_attributes));
    }
    if (m_idp_metadata.isSet()) {
        obj.insert(QString("idpMetadata"), ::OpenAPI::toJsonValue(m_idp_metadata));
    }
    if (m_login_validity_duration_isSet) {
        obj.insert(QString("loginValidityDuration"), ::OpenAPI::toJsonValue(m_login_validity_duration));
    }
    if (m_role_values.isSet()) {
        obj.insert(QString("roleValues"), ::OpenAPI::toJsonValue(m_role_values));
    }
    return obj;
}

QList OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::getAllowedOrganizations() const {
    return m_allowed_organizations;
}
void OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::setAllowedOrganizations(const QList &allowed_organizations) {
    m_allowed_organizations = allowed_organizations;
    m_allowed_organizations_isSet = true;
}

bool OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::is_allowed_organizations_Set() const{
    return m_allowed_organizations_isSet;
}

bool OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::is_allowed_organizations_Valid() const{
    return m_allowed_organizations_isValid;
}

OAIUpdateWorkspaceAuthentication_request_samlConfiguration_assertionAttributes OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::getAssertionAttributes() const {
    return m_assertion_attributes;
}
void OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::setAssertionAttributes(const OAIUpdateWorkspaceAuthentication_request_samlConfiguration_assertionAttributes &assertion_attributes) {
    m_assertion_attributes = assertion_attributes;
    m_assertion_attributes_isSet = true;
}

bool OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::is_assertion_attributes_Set() const{
    return m_assertion_attributes_isSet;
}

bool OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::is_assertion_attributes_Valid() const{
    return m_assertion_attributes_isValid;
}

OAIUpdateWorkspaceAuthentication_request_samlConfiguration_idpMetadata OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::getIdpMetadata() const {
    return m_idp_metadata;
}
void OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::setIdpMetadata(const OAIUpdateWorkspaceAuthentication_request_samlConfiguration_idpMetadata &idp_metadata) {
    m_idp_metadata = idp_metadata;
    m_idp_metadata_isSet = true;
}

bool OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::is_idp_metadata_Set() const{
    return m_idp_metadata_isSet;
}

bool OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::is_idp_metadata_Valid() const{
    return m_idp_metadata_isValid;
}

qint32 OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::getLoginValidityDuration() const {
    return m_login_validity_duration;
}
void OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::setLoginValidityDuration(const qint32 &login_validity_duration) {
    m_login_validity_duration = login_validity_duration;
    m_login_validity_duration_isSet = true;
}

bool OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::is_login_validity_duration_Set() const{
    return m_login_validity_duration_isSet;
}

bool OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::is_login_validity_duration_Valid() const{
    return m_login_validity_duration_isValid;
}

OAIUpdateWorkspaceAuthentication_request_samlConfiguration_roleValues OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::getRoleValues() const {
    return m_role_values;
}
void OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::setRoleValues(const OAIUpdateWorkspaceAuthentication_request_samlConfiguration_roleValues &role_values) {
    m_role_values = role_values;
    m_role_values_isSet = true;
}

bool OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::is_role_values_Set() const{
    return m_role_values_isSet;
}

bool OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::is_role_values_Valid() const{
    return m_role_values_isValid;
}

bool OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_organizations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assertion_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idp_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_validity_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateWorkspaceAuthenticationRequest_samlConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_idp_metadata_isValid && true;
}

} // namespace OpenAPI
