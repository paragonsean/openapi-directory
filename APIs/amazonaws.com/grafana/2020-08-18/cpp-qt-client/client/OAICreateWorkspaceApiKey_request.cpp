/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWorkspaceApiKey_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWorkspaceApiKey_request::OAICreateWorkspaceApiKey_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWorkspaceApiKey_request::OAICreateWorkspaceApiKey_request() {
    this->initializeModel();
}

OAICreateWorkspaceApiKey_request::~OAICreateWorkspaceApiKey_request() {}

void OAICreateWorkspaceApiKey_request::initializeModel() {

    m_key_name_isSet = false;
    m_key_name_isValid = false;

    m_key_role_isSet = false;
    m_key_role_isValid = false;

    m_seconds_to_live_isSet = false;
    m_seconds_to_live_isValid = false;
}

void OAICreateWorkspaceApiKey_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWorkspaceApiKey_request::fromJsonObject(QJsonObject json) {

    m_key_name_isValid = ::OpenAPI::fromJsonValue(m_key_name, json[QString("keyName")]);
    m_key_name_isSet = !json[QString("keyName")].isNull() && m_key_name_isValid;

    m_key_role_isValid = ::OpenAPI::fromJsonValue(m_key_role, json[QString("keyRole")]);
    m_key_role_isSet = !json[QString("keyRole")].isNull() && m_key_role_isValid;

    m_seconds_to_live_isValid = ::OpenAPI::fromJsonValue(m_seconds_to_live, json[QString("secondsToLive")]);
    m_seconds_to_live_isSet = !json[QString("secondsToLive")].isNull() && m_seconds_to_live_isValid;
}

QString OAICreateWorkspaceApiKey_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWorkspaceApiKey_request::asJsonObject() const {
    QJsonObject obj;
    if (m_key_name_isSet) {
        obj.insert(QString("keyName"), ::OpenAPI::toJsonValue(m_key_name));
    }
    if (m_key_role_isSet) {
        obj.insert(QString("keyRole"), ::OpenAPI::toJsonValue(m_key_role));
    }
    if (m_seconds_to_live_isSet) {
        obj.insert(QString("secondsToLive"), ::OpenAPI::toJsonValue(m_seconds_to_live));
    }
    return obj;
}

QString OAICreateWorkspaceApiKey_request::getKeyName() const {
    return m_key_name;
}
void OAICreateWorkspaceApiKey_request::setKeyName(const QString &key_name) {
    m_key_name = key_name;
    m_key_name_isSet = true;
}

bool OAICreateWorkspaceApiKey_request::is_key_name_Set() const{
    return m_key_name_isSet;
}

bool OAICreateWorkspaceApiKey_request::is_key_name_Valid() const{
    return m_key_name_isValid;
}

QString OAICreateWorkspaceApiKey_request::getKeyRole() const {
    return m_key_role;
}
void OAICreateWorkspaceApiKey_request::setKeyRole(const QString &key_role) {
    m_key_role = key_role;
    m_key_role_isSet = true;
}

bool OAICreateWorkspaceApiKey_request::is_key_role_Set() const{
    return m_key_role_isSet;
}

bool OAICreateWorkspaceApiKey_request::is_key_role_Valid() const{
    return m_key_role_isValid;
}

qint32 OAICreateWorkspaceApiKey_request::getSecondsToLive() const {
    return m_seconds_to_live;
}
void OAICreateWorkspaceApiKey_request::setSecondsToLive(const qint32 &seconds_to_live) {
    m_seconds_to_live = seconds_to_live;
    m_seconds_to_live_isSet = true;
}

bool OAICreateWorkspaceApiKey_request::is_seconds_to_live_Set() const{
    return m_seconds_to_live_isSet;
}

bool OAICreateWorkspaceApiKey_request::is_seconds_to_live_Valid() const{
    return m_seconds_to_live_isValid;
}

bool OAICreateWorkspaceApiKey_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seconds_to_live_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWorkspaceApiKey_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_name_isValid && m_key_role_isValid && m_seconds_to_live_isValid && true;
}

} // namespace OpenAPI
