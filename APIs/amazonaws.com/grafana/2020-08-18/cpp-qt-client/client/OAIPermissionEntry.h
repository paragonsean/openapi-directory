/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPermissionEntry.h
 *
 * A structure containing the identity of one user or group and the &lt;code&gt;Admin&lt;/code&gt;, &lt;code&gt;Editor&lt;/code&gt;, or &lt;code&gt;Viewer&lt;/code&gt; role that they have.
 */

#ifndef OAIPermissionEntry_H
#define OAIPermissionEntry_H

#include <QJsonObject>

#include "OAIPermissionEntry_user.h"
#include "OAIRole.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPermissionEntry_user;

class OAIPermissionEntry : public OAIObject {
public:
    OAIPermissionEntry();
    OAIPermissionEntry(QString json);
    ~OAIPermissionEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIRole getRole() const;
    void setRole(const OAIRole &role);
    bool is_role_Set() const;
    bool is_role_Valid() const;

    OAIPermissionEntry_user getUser() const;
    void setUser(const OAIPermissionEntry_user &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIRole m_role;
    bool m_role_isSet;
    bool m_role_isValid;

    OAIPermissionEntry_user m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPermissionEntry)

#endif // OAIPermissionEntry_H
