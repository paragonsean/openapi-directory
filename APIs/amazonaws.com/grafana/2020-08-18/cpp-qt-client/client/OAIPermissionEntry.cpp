/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermissionEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermissionEntry::OAIPermissionEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermissionEntry::OAIPermissionEntry() {
    this->initializeModel();
}

OAIPermissionEntry::~OAIPermissionEntry() {}

void OAIPermissionEntry::initializeModel() {

    m_role_isSet = false;
    m_role_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIPermissionEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermissionEntry::fromJsonObject(QJsonObject json) {

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIPermissionEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermissionEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIRole OAIPermissionEntry::getRole() const {
    return m_role;
}
void OAIPermissionEntry::setRole(const OAIRole &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIPermissionEntry::is_role_Set() const{
    return m_role_isSet;
}

bool OAIPermissionEntry::is_role_Valid() const{
    return m_role_isValid;
}

OAIPermissionEntry_user OAIPermissionEntry::getUser() const {
    return m_user;
}
void OAIPermissionEntry::setUser(const OAIPermissionEntry_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIPermissionEntry::is_user_Set() const{
    return m_user_isSet;
}

bool OAIPermissionEntry::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIPermissionEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermissionEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_isValid && m_user_isValid && true;
}

} // namespace OpenAPI
