/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssertionAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssertionAttributes::OAIAssertionAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssertionAttributes::OAIAssertionAttributes() {
    this->initializeModel();
}

OAIAssertionAttributes::~OAIAssertionAttributes() {}

void OAIAssertionAttributes::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_isSet = false;
    m_org_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIAssertionAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssertionAttributes::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_isValid = ::OpenAPI::fromJsonValue(m_org, json[QString("org")]);
    m_org_isSet = !json[QString("org")].isNull() && m_org_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIAssertionAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssertionAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_groups_isSet) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_isSet) {
        obj.insert(QString("org"), ::OpenAPI::toJsonValue(m_org));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIAssertionAttributes::getEmail() const {
    return m_email;
}
void OAIAssertionAttributes::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAssertionAttributes::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAssertionAttributes::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAssertionAttributes::getGroups() const {
    return m_groups;
}
void OAIAssertionAttributes::setGroups(const QString &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIAssertionAttributes::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIAssertionAttributes::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIAssertionAttributes::getLogin() const {
    return m_login;
}
void OAIAssertionAttributes::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIAssertionAttributes::is_login_Set() const{
    return m_login_isSet;
}

bool OAIAssertionAttributes::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIAssertionAttributes::getName() const {
    return m_name;
}
void OAIAssertionAttributes::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssertionAttributes::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssertionAttributes::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAssertionAttributes::getOrg() const {
    return m_org;
}
void OAIAssertionAttributes::setOrg(const QString &org) {
    m_org = org;
    m_org_isSet = true;
}

bool OAIAssertionAttributes::is_org_Set() const{
    return m_org_isSet;
}

bool OAIAssertionAttributes::is_org_Valid() const{
    return m_org_isValid;
}

QString OAIAssertionAttributes::getRole() const {
    return m_role;
}
void OAIAssertionAttributes::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIAssertionAttributes::is_role_Set() const{
    return m_role_isSet;
}

bool OAIAssertionAttributes::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIAssertionAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssertionAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
