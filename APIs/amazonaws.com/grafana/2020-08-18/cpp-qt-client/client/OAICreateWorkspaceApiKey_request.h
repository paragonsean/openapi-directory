/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateWorkspaceApiKey_request.h
 *
 * 
 */

#ifndef OAICreateWorkspaceApiKey_request_H
#define OAICreateWorkspaceApiKey_request_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateWorkspaceApiKey_request : public OAIObject {
public:
    OAICreateWorkspaceApiKey_request();
    OAICreateWorkspaceApiKey_request(QString json);
    ~OAICreateWorkspaceApiKey_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getKeyName() const;
    void setKeyName(const QString &key_name);
    bool is_key_name_Set() const;
    bool is_key_name_Valid() const;

    QString getKeyRole() const;
    void setKeyRole(const QString &key_role);
    bool is_key_role_Set() const;
    bool is_key_role_Valid() const;

    qint32 getSecondsToLive() const;
    void setSecondsToLive(const qint32 &seconds_to_live);
    bool is_seconds_to_live_Set() const;
    bool is_seconds_to_live_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_key_name;
    bool m_key_name_isSet;
    bool m_key_name_isValid;

    QString m_key_role;
    bool m_key_role_isSet;
    bool m_key_role_isValid;

    qint32 m_seconds_to_live;
    bool m_seconds_to_live_isSet;
    bool m_seconds_to_live_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateWorkspaceApiKey_request)

#endif // OAICreateWorkspaceApiKey_request_H
