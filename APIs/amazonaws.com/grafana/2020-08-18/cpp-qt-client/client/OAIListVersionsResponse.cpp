/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListVersionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListVersionsResponse::OAIListVersionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListVersionsResponse::OAIListVersionsResponse() {
    this->initializeModel();
}

OAIListVersionsResponse::~OAIListVersionsResponse() {}

void OAIListVersionsResponse::initializeModel() {

    m_grafana_versions_isSet = false;
    m_grafana_versions_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListVersionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListVersionsResponse::fromJsonObject(QJsonObject json) {

    m_grafana_versions_isValid = ::OpenAPI::fromJsonValue(m_grafana_versions, json[QString("grafanaVersions")]);
    m_grafana_versions_isSet = !json[QString("grafanaVersions")].isNull() && m_grafana_versions_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListVersionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListVersionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_grafana_versions.isSet()) {
        obj.insert(QString("grafanaVersions"), ::OpenAPI::toJsonValue(m_grafana_versions));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListVersionsResponse::getGrafanaVersions() const {
    return m_grafana_versions;
}
void OAIListVersionsResponse::setGrafanaVersions(const QList &grafana_versions) {
    m_grafana_versions = grafana_versions;
    m_grafana_versions_isSet = true;
}

bool OAIListVersionsResponse::is_grafana_versions_Set() const{
    return m_grafana_versions_isSet;
}

bool OAIListVersionsResponse::is_grafana_versions_Valid() const{
    return m_grafana_versions_isValid;
}

QString OAIListVersionsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListVersionsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListVersionsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListVersionsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListVersionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grafana_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListVersionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
