/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateWorkspace_request.h
 *
 * 
 */

#ifndef OAICreateWorkspace_request_H
#define OAICreateWorkspace_request_H

#include <QJsonObject>

#include "OAIAuthenticationProviderTypes.h"
#include "OAICreateWorkspace_request_networkAccessControl.h"
#include "OAICreateWorkspace_request_vpcConfiguration.h"
#include "OAIDataSourceType.h"
#include "OAINotificationDestinationType.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateWorkspace_request_networkAccessControl;
class OAICreateWorkspace_request_vpcConfiguration;

class OAICreateWorkspace_request : public OAIObject {
public:
    OAICreateWorkspace_request();
    OAICreateWorkspace_request(QString json);
    ~OAICreateWorkspace_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountAccessType() const;
    void setAccountAccessType(const QString &account_access_type);
    bool is_account_access_type_Set() const;
    bool is_account_access_type_Valid() const;

    QList<OAIAuthenticationProviderTypes> getAuthenticationProviders() const;
    void setAuthenticationProviders(const QList<OAIAuthenticationProviderTypes> &authentication_providers);
    bool is_authentication_providers_Set() const;
    bool is_authentication_providers_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QString getConfiguration() const;
    void setConfiguration(const QString &configuration);
    bool is_configuration_Set() const;
    bool is_configuration_Valid() const;

    QString getGrafanaVersion() const;
    void setGrafanaVersion(const QString &grafana_version);
    bool is_grafana_version_Set() const;
    bool is_grafana_version_Valid() const;

    OAICreateWorkspace_request_networkAccessControl getNetworkAccessControl() const;
    void setNetworkAccessControl(const OAICreateWorkspace_request_networkAccessControl &network_access_control);
    bool is_network_access_control_Set() const;
    bool is_network_access_control_Valid() const;

    QString getOrganizationRoleName() const;
    void setOrganizationRoleName(const QString &organization_role_name);
    bool is_organization_role_name_Set() const;
    bool is_organization_role_name_Valid() const;

    QString getPermissionType() const;
    void setPermissionType(const QString &permission_type);
    bool is_permission_type_Set() const;
    bool is_permission_type_Valid() const;

    QString getStackSetName() const;
    void setStackSetName(const QString &stack_set_name);
    bool is_stack_set_name_Set() const;
    bool is_stack_set_name_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAICreateWorkspace_request_vpcConfiguration getVpcConfiguration() const;
    void setVpcConfiguration(const OAICreateWorkspace_request_vpcConfiguration &vpc_configuration);
    bool is_vpc_configuration_Set() const;
    bool is_vpc_configuration_Valid() const;

    QList<OAIDataSourceType> getWorkspaceDataSources() const;
    void setWorkspaceDataSources(const QList<OAIDataSourceType> &workspace_data_sources);
    bool is_workspace_data_sources_Set() const;
    bool is_workspace_data_sources_Valid() const;

    QString getWorkspaceDescription() const;
    void setWorkspaceDescription(const QString &workspace_description);
    bool is_workspace_description_Set() const;
    bool is_workspace_description_Valid() const;

    QString getWorkspaceName() const;
    void setWorkspaceName(const QString &workspace_name);
    bool is_workspace_name_Set() const;
    bool is_workspace_name_Valid() const;

    QList<OAINotificationDestinationType> getWorkspaceNotificationDestinations() const;
    void setWorkspaceNotificationDestinations(const QList<OAINotificationDestinationType> &workspace_notification_destinations);
    bool is_workspace_notification_destinations_Set() const;
    bool is_workspace_notification_destinations_Valid() const;

    QList<QString> getWorkspaceOrganizationalUnits() const;
    void setWorkspaceOrganizationalUnits(const QList<QString> &workspace_organizational_units);
    bool is_workspace_organizational_units_Set() const;
    bool is_workspace_organizational_units_Valid() const;

    QString getWorkspaceRoleArn() const;
    void setWorkspaceRoleArn(const QString &workspace_role_arn);
    bool is_workspace_role_arn_Set() const;
    bool is_workspace_role_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_access_type;
    bool m_account_access_type_isSet;
    bool m_account_access_type_isValid;

    QList<OAIAuthenticationProviderTypes> m_authentication_providers;
    bool m_authentication_providers_isSet;
    bool m_authentication_providers_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QString m_configuration;
    bool m_configuration_isSet;
    bool m_configuration_isValid;

    QString m_grafana_version;
    bool m_grafana_version_isSet;
    bool m_grafana_version_isValid;

    OAICreateWorkspace_request_networkAccessControl m_network_access_control;
    bool m_network_access_control_isSet;
    bool m_network_access_control_isValid;

    QString m_organization_role_name;
    bool m_organization_role_name_isSet;
    bool m_organization_role_name_isValid;

    QString m_permission_type;
    bool m_permission_type_isSet;
    bool m_permission_type_isValid;

    QString m_stack_set_name;
    bool m_stack_set_name_isSet;
    bool m_stack_set_name_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAICreateWorkspace_request_vpcConfiguration m_vpc_configuration;
    bool m_vpc_configuration_isSet;
    bool m_vpc_configuration_isValid;

    QList<OAIDataSourceType> m_workspace_data_sources;
    bool m_workspace_data_sources_isSet;
    bool m_workspace_data_sources_isValid;

    QString m_workspace_description;
    bool m_workspace_description_isSet;
    bool m_workspace_description_isValid;

    QString m_workspace_name;
    bool m_workspace_name_isSet;
    bool m_workspace_name_isValid;

    QList<OAINotificationDestinationType> m_workspace_notification_destinations;
    bool m_workspace_notification_destinations_isSet;
    bool m_workspace_notification_destinations_isValid;

    QList<QString> m_workspace_organizational_units;
    bool m_workspace_organizational_units_isSet;
    bool m_workspace_organizational_units_isValid;

    QString m_workspace_role_arn;
    bool m_workspace_role_arn_isSet;
    bool m_workspace_role_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateWorkspace_request)

#endif // OAICreateWorkspace_request_H
