/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWorkspace_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWorkspace_request::OAICreateWorkspace_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWorkspace_request::OAICreateWorkspace_request() {
    this->initializeModel();
}

OAICreateWorkspace_request::~OAICreateWorkspace_request() {}

void OAICreateWorkspace_request::initializeModel() {

    m_account_access_type_isSet = false;
    m_account_access_type_isValid = false;

    m_authentication_providers_isSet = false;
    m_authentication_providers_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_grafana_version_isSet = false;
    m_grafana_version_isValid = false;

    m_network_access_control_isSet = false;
    m_network_access_control_isValid = false;

    m_organization_role_name_isSet = false;
    m_organization_role_name_isValid = false;

    m_permission_type_isSet = false;
    m_permission_type_isValid = false;

    m_stack_set_name_isSet = false;
    m_stack_set_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_vpc_configuration_isSet = false;
    m_vpc_configuration_isValid = false;

    m_workspace_data_sources_isSet = false;
    m_workspace_data_sources_isValid = false;

    m_workspace_description_isSet = false;
    m_workspace_description_isValid = false;

    m_workspace_name_isSet = false;
    m_workspace_name_isValid = false;

    m_workspace_notification_destinations_isSet = false;
    m_workspace_notification_destinations_isValid = false;

    m_workspace_organizational_units_isSet = false;
    m_workspace_organizational_units_isValid = false;

    m_workspace_role_arn_isSet = false;
    m_workspace_role_arn_isValid = false;
}

void OAICreateWorkspace_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWorkspace_request::fromJsonObject(QJsonObject json) {

    m_account_access_type_isValid = ::OpenAPI::fromJsonValue(m_account_access_type, json[QString("accountAccessType")]);
    m_account_access_type_isSet = !json[QString("accountAccessType")].isNull() && m_account_access_type_isValid;

    m_authentication_providers_isValid = ::OpenAPI::fromJsonValue(m_authentication_providers, json[QString("authenticationProviders")]);
    m_authentication_providers_isSet = !json[QString("authenticationProviders")].isNull() && m_authentication_providers_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_grafana_version_isValid = ::OpenAPI::fromJsonValue(m_grafana_version, json[QString("grafanaVersion")]);
    m_grafana_version_isSet = !json[QString("grafanaVersion")].isNull() && m_grafana_version_isValid;

    m_network_access_control_isValid = ::OpenAPI::fromJsonValue(m_network_access_control, json[QString("networkAccessControl")]);
    m_network_access_control_isSet = !json[QString("networkAccessControl")].isNull() && m_network_access_control_isValid;

    m_organization_role_name_isValid = ::OpenAPI::fromJsonValue(m_organization_role_name, json[QString("organizationRoleName")]);
    m_organization_role_name_isSet = !json[QString("organizationRoleName")].isNull() && m_organization_role_name_isValid;

    m_permission_type_isValid = ::OpenAPI::fromJsonValue(m_permission_type, json[QString("permissionType")]);
    m_permission_type_isSet = !json[QString("permissionType")].isNull() && m_permission_type_isValid;

    m_stack_set_name_isValid = ::OpenAPI::fromJsonValue(m_stack_set_name, json[QString("stackSetName")]);
    m_stack_set_name_isSet = !json[QString("stackSetName")].isNull() && m_stack_set_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_vpc_configuration_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration, json[QString("vpcConfiguration")]);
    m_vpc_configuration_isSet = !json[QString("vpcConfiguration")].isNull() && m_vpc_configuration_isValid;

    m_workspace_data_sources_isValid = ::OpenAPI::fromJsonValue(m_workspace_data_sources, json[QString("workspaceDataSources")]);
    m_workspace_data_sources_isSet = !json[QString("workspaceDataSources")].isNull() && m_workspace_data_sources_isValid;

    m_workspace_description_isValid = ::OpenAPI::fromJsonValue(m_workspace_description, json[QString("workspaceDescription")]);
    m_workspace_description_isSet = !json[QString("workspaceDescription")].isNull() && m_workspace_description_isValid;

    m_workspace_name_isValid = ::OpenAPI::fromJsonValue(m_workspace_name, json[QString("workspaceName")]);
    m_workspace_name_isSet = !json[QString("workspaceName")].isNull() && m_workspace_name_isValid;

    m_workspace_notification_destinations_isValid = ::OpenAPI::fromJsonValue(m_workspace_notification_destinations, json[QString("workspaceNotificationDestinations")]);
    m_workspace_notification_destinations_isSet = !json[QString("workspaceNotificationDestinations")].isNull() && m_workspace_notification_destinations_isValid;

    m_workspace_organizational_units_isValid = ::OpenAPI::fromJsonValue(m_workspace_organizational_units, json[QString("workspaceOrganizationalUnits")]);
    m_workspace_organizational_units_isSet = !json[QString("workspaceOrganizationalUnits")].isNull() && m_workspace_organizational_units_isValid;

    m_workspace_role_arn_isValid = ::OpenAPI::fromJsonValue(m_workspace_role_arn, json[QString("workspaceRoleArn")]);
    m_workspace_role_arn_isSet = !json[QString("workspaceRoleArn")].isNull() && m_workspace_role_arn_isValid;
}

QString OAICreateWorkspace_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWorkspace_request::asJsonObject() const {
    QJsonObject obj;
    if (m_account_access_type_isSet) {
        obj.insert(QString("accountAccessType"), ::OpenAPI::toJsonValue(m_account_access_type));
    }
    if (m_authentication_providers.size() > 0) {
        obj.insert(QString("authenticationProviders"), ::OpenAPI::toJsonValue(m_authentication_providers));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_configuration_isSet) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_grafana_version_isSet) {
        obj.insert(QString("grafanaVersion"), ::OpenAPI::toJsonValue(m_grafana_version));
    }
    if (m_network_access_control.isSet()) {
        obj.insert(QString("networkAccessControl"), ::OpenAPI::toJsonValue(m_network_access_control));
    }
    if (m_organization_role_name_isSet) {
        obj.insert(QString("organizationRoleName"), ::OpenAPI::toJsonValue(m_organization_role_name));
    }
    if (m_permission_type_isSet) {
        obj.insert(QString("permissionType"), ::OpenAPI::toJsonValue(m_permission_type));
    }
    if (m_stack_set_name_isSet) {
        obj.insert(QString("stackSetName"), ::OpenAPI::toJsonValue(m_stack_set_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_vpc_configuration.isSet()) {
        obj.insert(QString("vpcConfiguration"), ::OpenAPI::toJsonValue(m_vpc_configuration));
    }
    if (m_workspace_data_sources.size() > 0) {
        obj.insert(QString("workspaceDataSources"), ::OpenAPI::toJsonValue(m_workspace_data_sources));
    }
    if (m_workspace_description_isSet) {
        obj.insert(QString("workspaceDescription"), ::OpenAPI::toJsonValue(m_workspace_description));
    }
    if (m_workspace_name_isSet) {
        obj.insert(QString("workspaceName"), ::OpenAPI::toJsonValue(m_workspace_name));
    }
    if (m_workspace_notification_destinations.size() > 0) {
        obj.insert(QString("workspaceNotificationDestinations"), ::OpenAPI::toJsonValue(m_workspace_notification_destinations));
    }
    if (m_workspace_organizational_units.size() > 0) {
        obj.insert(QString("workspaceOrganizationalUnits"), ::OpenAPI::toJsonValue(m_workspace_organizational_units));
    }
    if (m_workspace_role_arn_isSet) {
        obj.insert(QString("workspaceRoleArn"), ::OpenAPI::toJsonValue(m_workspace_role_arn));
    }
    return obj;
}

QString OAICreateWorkspace_request::getAccountAccessType() const {
    return m_account_access_type;
}
void OAICreateWorkspace_request::setAccountAccessType(const QString &account_access_type) {
    m_account_access_type = account_access_type;
    m_account_access_type_isSet = true;
}

bool OAICreateWorkspace_request::is_account_access_type_Set() const{
    return m_account_access_type_isSet;
}

bool OAICreateWorkspace_request::is_account_access_type_Valid() const{
    return m_account_access_type_isValid;
}

QList<OAIAuthenticationProviderTypes> OAICreateWorkspace_request::getAuthenticationProviders() const {
    return m_authentication_providers;
}
void OAICreateWorkspace_request::setAuthenticationProviders(const QList<OAIAuthenticationProviderTypes> &authentication_providers) {
    m_authentication_providers = authentication_providers;
    m_authentication_providers_isSet = true;
}

bool OAICreateWorkspace_request::is_authentication_providers_Set() const{
    return m_authentication_providers_isSet;
}

bool OAICreateWorkspace_request::is_authentication_providers_Valid() const{
    return m_authentication_providers_isValid;
}

QString OAICreateWorkspace_request::getClientToken() const {
    return m_client_token;
}
void OAICreateWorkspace_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateWorkspace_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateWorkspace_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateWorkspace_request::getConfiguration() const {
    return m_configuration;
}
void OAICreateWorkspace_request::setConfiguration(const QString &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICreateWorkspace_request::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICreateWorkspace_request::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAICreateWorkspace_request::getGrafanaVersion() const {
    return m_grafana_version;
}
void OAICreateWorkspace_request::setGrafanaVersion(const QString &grafana_version) {
    m_grafana_version = grafana_version;
    m_grafana_version_isSet = true;
}

bool OAICreateWorkspace_request::is_grafana_version_Set() const{
    return m_grafana_version_isSet;
}

bool OAICreateWorkspace_request::is_grafana_version_Valid() const{
    return m_grafana_version_isValid;
}

OAICreateWorkspace_request_networkAccessControl OAICreateWorkspace_request::getNetworkAccessControl() const {
    return m_network_access_control;
}
void OAICreateWorkspace_request::setNetworkAccessControl(const OAICreateWorkspace_request_networkAccessControl &network_access_control) {
    m_network_access_control = network_access_control;
    m_network_access_control_isSet = true;
}

bool OAICreateWorkspace_request::is_network_access_control_Set() const{
    return m_network_access_control_isSet;
}

bool OAICreateWorkspace_request::is_network_access_control_Valid() const{
    return m_network_access_control_isValid;
}

QString OAICreateWorkspace_request::getOrganizationRoleName() const {
    return m_organization_role_name;
}
void OAICreateWorkspace_request::setOrganizationRoleName(const QString &organization_role_name) {
    m_organization_role_name = organization_role_name;
    m_organization_role_name_isSet = true;
}

bool OAICreateWorkspace_request::is_organization_role_name_Set() const{
    return m_organization_role_name_isSet;
}

bool OAICreateWorkspace_request::is_organization_role_name_Valid() const{
    return m_organization_role_name_isValid;
}

QString OAICreateWorkspace_request::getPermissionType() const {
    return m_permission_type;
}
void OAICreateWorkspace_request::setPermissionType(const QString &permission_type) {
    m_permission_type = permission_type;
    m_permission_type_isSet = true;
}

bool OAICreateWorkspace_request::is_permission_type_Set() const{
    return m_permission_type_isSet;
}

bool OAICreateWorkspace_request::is_permission_type_Valid() const{
    return m_permission_type_isValid;
}

QString OAICreateWorkspace_request::getStackSetName() const {
    return m_stack_set_name;
}
void OAICreateWorkspace_request::setStackSetName(const QString &stack_set_name) {
    m_stack_set_name = stack_set_name;
    m_stack_set_name_isSet = true;
}

bool OAICreateWorkspace_request::is_stack_set_name_Set() const{
    return m_stack_set_name_isSet;
}

bool OAICreateWorkspace_request::is_stack_set_name_Valid() const{
    return m_stack_set_name_isValid;
}

QMap<QString, QString> OAICreateWorkspace_request::getTags() const {
    return m_tags;
}
void OAICreateWorkspace_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateWorkspace_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateWorkspace_request::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateWorkspace_request_vpcConfiguration OAICreateWorkspace_request::getVpcConfiguration() const {
    return m_vpc_configuration;
}
void OAICreateWorkspace_request::setVpcConfiguration(const OAICreateWorkspace_request_vpcConfiguration &vpc_configuration) {
    m_vpc_configuration = vpc_configuration;
    m_vpc_configuration_isSet = true;
}

bool OAICreateWorkspace_request::is_vpc_configuration_Set() const{
    return m_vpc_configuration_isSet;
}

bool OAICreateWorkspace_request::is_vpc_configuration_Valid() const{
    return m_vpc_configuration_isValid;
}

QList<OAIDataSourceType> OAICreateWorkspace_request::getWorkspaceDataSources() const {
    return m_workspace_data_sources;
}
void OAICreateWorkspace_request::setWorkspaceDataSources(const QList<OAIDataSourceType> &workspace_data_sources) {
    m_workspace_data_sources = workspace_data_sources;
    m_workspace_data_sources_isSet = true;
}

bool OAICreateWorkspace_request::is_workspace_data_sources_Set() const{
    return m_workspace_data_sources_isSet;
}

bool OAICreateWorkspace_request::is_workspace_data_sources_Valid() const{
    return m_workspace_data_sources_isValid;
}

QString OAICreateWorkspace_request::getWorkspaceDescription() const {
    return m_workspace_description;
}
void OAICreateWorkspace_request::setWorkspaceDescription(const QString &workspace_description) {
    m_workspace_description = workspace_description;
    m_workspace_description_isSet = true;
}

bool OAICreateWorkspace_request::is_workspace_description_Set() const{
    return m_workspace_description_isSet;
}

bool OAICreateWorkspace_request::is_workspace_description_Valid() const{
    return m_workspace_description_isValid;
}

QString OAICreateWorkspace_request::getWorkspaceName() const {
    return m_workspace_name;
}
void OAICreateWorkspace_request::setWorkspaceName(const QString &workspace_name) {
    m_workspace_name = workspace_name;
    m_workspace_name_isSet = true;
}

bool OAICreateWorkspace_request::is_workspace_name_Set() const{
    return m_workspace_name_isSet;
}

bool OAICreateWorkspace_request::is_workspace_name_Valid() const{
    return m_workspace_name_isValid;
}

QList<OAINotificationDestinationType> OAICreateWorkspace_request::getWorkspaceNotificationDestinations() const {
    return m_workspace_notification_destinations;
}
void OAICreateWorkspace_request::setWorkspaceNotificationDestinations(const QList<OAINotificationDestinationType> &workspace_notification_destinations) {
    m_workspace_notification_destinations = workspace_notification_destinations;
    m_workspace_notification_destinations_isSet = true;
}

bool OAICreateWorkspace_request::is_workspace_notification_destinations_Set() const{
    return m_workspace_notification_destinations_isSet;
}

bool OAICreateWorkspace_request::is_workspace_notification_destinations_Valid() const{
    return m_workspace_notification_destinations_isValid;
}

QList<QString> OAICreateWorkspace_request::getWorkspaceOrganizationalUnits() const {
    return m_workspace_organizational_units;
}
void OAICreateWorkspace_request::setWorkspaceOrganizationalUnits(const QList<QString> &workspace_organizational_units) {
    m_workspace_organizational_units = workspace_organizational_units;
    m_workspace_organizational_units_isSet = true;
}

bool OAICreateWorkspace_request::is_workspace_organizational_units_Set() const{
    return m_workspace_organizational_units_isSet;
}

bool OAICreateWorkspace_request::is_workspace_organizational_units_Valid() const{
    return m_workspace_organizational_units_isValid;
}

QString OAICreateWorkspace_request::getWorkspaceRoleArn() const {
    return m_workspace_role_arn;
}
void OAICreateWorkspace_request::setWorkspaceRoleArn(const QString &workspace_role_arn) {
    m_workspace_role_arn = workspace_role_arn;
    m_workspace_role_arn_isSet = true;
}

bool OAICreateWorkspace_request::is_workspace_role_arn_Set() const{
    return m_workspace_role_arn_isSet;
}

bool OAICreateWorkspace_request::is_workspace_role_arn_Valid() const{
    return m_workspace_role_arn_isValid;
}

bool OAICreateWorkspace_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_access_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grafana_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_access_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_data_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_notification_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_organizational_units.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWorkspace_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_access_type_isValid && m_authentication_providers_isValid && m_permission_type_isValid && true;
}

} // namespace OpenAPI
