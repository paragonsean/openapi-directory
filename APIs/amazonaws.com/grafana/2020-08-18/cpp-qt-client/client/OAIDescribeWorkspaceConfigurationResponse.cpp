/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeWorkspaceConfigurationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeWorkspaceConfigurationResponse::OAIDescribeWorkspaceConfigurationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeWorkspaceConfigurationResponse::OAIDescribeWorkspaceConfigurationResponse() {
    this->initializeModel();
}

OAIDescribeWorkspaceConfigurationResponse::~OAIDescribeWorkspaceConfigurationResponse() {}

void OAIDescribeWorkspaceConfigurationResponse::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_grafana_version_isSet = false;
    m_grafana_version_isValid = false;
}

void OAIDescribeWorkspaceConfigurationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeWorkspaceConfigurationResponse::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_grafana_version_isValid = ::OpenAPI::fromJsonValue(m_grafana_version, json[QString("grafanaVersion")]);
    m_grafana_version_isSet = !json[QString("grafanaVersion")].isNull() && m_grafana_version_isValid;
}

QString OAIDescribeWorkspaceConfigurationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeWorkspaceConfigurationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_isSet) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_grafana_version_isSet) {
        obj.insert(QString("grafanaVersion"), ::OpenAPI::toJsonValue(m_grafana_version));
    }
    return obj;
}

QString OAIDescribeWorkspaceConfigurationResponse::getConfiguration() const {
    return m_configuration;
}
void OAIDescribeWorkspaceConfigurationResponse::setConfiguration(const QString &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIDescribeWorkspaceConfigurationResponse::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIDescribeWorkspaceConfigurationResponse::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIDescribeWorkspaceConfigurationResponse::getGrafanaVersion() const {
    return m_grafana_version;
}
void OAIDescribeWorkspaceConfigurationResponse::setGrafanaVersion(const QString &grafana_version) {
    m_grafana_version = grafana_version;
    m_grafana_version_isSet = true;
}

bool OAIDescribeWorkspaceConfigurationResponse::is_grafana_version_Set() const{
    return m_grafana_version_isSet;
}

bool OAIDescribeWorkspaceConfigurationResponse::is_grafana_version_Valid() const{
    return m_grafana_version_isValid;
}

bool OAIDescribeWorkspaceConfigurationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grafana_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeWorkspaceConfigurationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_configuration_isValid && true;
}

} // namespace OpenAPI
