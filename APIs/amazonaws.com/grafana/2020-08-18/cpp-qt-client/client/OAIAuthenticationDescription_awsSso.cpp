/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationDescription_awsSso.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticationDescription_awsSso::OAIAuthenticationDescription_awsSso(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticationDescription_awsSso::OAIAuthenticationDescription_awsSso() {
    this->initializeModel();
}

OAIAuthenticationDescription_awsSso::~OAIAuthenticationDescription_awsSso() {}

void OAIAuthenticationDescription_awsSso::initializeModel() {

    m_sso_client_id_isSet = false;
    m_sso_client_id_isValid = false;
}

void OAIAuthenticationDescription_awsSso::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticationDescription_awsSso::fromJsonObject(QJsonObject json) {

    m_sso_client_id_isValid = ::OpenAPI::fromJsonValue(m_sso_client_id, json[QString("ssoClientId")]);
    m_sso_client_id_isSet = !json[QString("ssoClientId")].isNull() && m_sso_client_id_isValid;
}

QString OAIAuthenticationDescription_awsSso::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticationDescription_awsSso::asJsonObject() const {
    QJsonObject obj;
    if (m_sso_client_id_isSet) {
        obj.insert(QString("ssoClientId"), ::OpenAPI::toJsonValue(m_sso_client_id));
    }
    return obj;
}

QString OAIAuthenticationDescription_awsSso::getSsoClientId() const {
    return m_sso_client_id;
}
void OAIAuthenticationDescription_awsSso::setSsoClientId(const QString &sso_client_id) {
    m_sso_client_id = sso_client_id;
    m_sso_client_id_isSet = true;
}

bool OAIAuthenticationDescription_awsSso::is_sso_client_id_Set() const{
    return m_sso_client_id_isSet;
}

bool OAIAuthenticationDescription_awsSso::is_sso_client_id_Valid() const{
    return m_sso_client_id_isValid;
}

bool OAIAuthenticationDescription_awsSso::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sso_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticationDescription_awsSso::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
