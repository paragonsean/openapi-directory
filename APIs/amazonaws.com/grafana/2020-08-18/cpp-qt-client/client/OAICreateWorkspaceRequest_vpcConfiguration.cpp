/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWorkspaceRequest_vpcConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWorkspaceRequest_vpcConfiguration::OAICreateWorkspaceRequest_vpcConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWorkspaceRequest_vpcConfiguration::OAICreateWorkspaceRequest_vpcConfiguration() {
    this->initializeModel();
}

OAICreateWorkspaceRequest_vpcConfiguration::~OAICreateWorkspaceRequest_vpcConfiguration() {}

void OAICreateWorkspaceRequest_vpcConfiguration::initializeModel() {

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;
}

void OAICreateWorkspaceRequest_vpcConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWorkspaceRequest_vpcConfiguration::fromJsonObject(QJsonObject json) {

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("securityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("securityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("subnetIds")]);
    m_subnet_ids_isSet = !json[QString("subnetIds")].isNull() && m_subnet_ids_isValid;
}

QString OAICreateWorkspaceRequest_vpcConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWorkspaceRequest_vpcConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("securityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("subnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    return obj;
}

QList OAICreateWorkspaceRequest_vpcConfiguration::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAICreateWorkspaceRequest_vpcConfiguration::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAICreateWorkspaceRequest_vpcConfiguration::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAICreateWorkspaceRequest_vpcConfiguration::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QList OAICreateWorkspaceRequest_vpcConfiguration::getSubnetIds() const {
    return m_subnet_ids;
}
void OAICreateWorkspaceRequest_vpcConfiguration::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAICreateWorkspaceRequest_vpcConfiguration::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAICreateWorkspaceRequest_vpcConfiguration::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

bool OAICreateWorkspaceRequest_vpcConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWorkspaceRequest_vpcConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_security_group_ids_isValid && m_subnet_ids_isValid && true;
}

} // namespace OpenAPI
