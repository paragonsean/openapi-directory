/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceSummary::OAIWorkspaceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceSummary::OAIWorkspaceSummary() {
    this->initializeModel();
}

OAIWorkspaceSummary::~OAIWorkspaceSummary() {}

void OAIWorkspaceSummary::initializeModel() {

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_grafana_version_isSet = false;
    m_grafana_version_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_destinations_isSet = false;
    m_notification_destinations_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIWorkspaceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceSummary::fromJsonObject(QJsonObject json) {

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_grafana_version_isValid = ::OpenAPI::fromJsonValue(m_grafana_version, json[QString("grafanaVersion")]);
    m_grafana_version_isSet = !json[QString("grafanaVersion")].isNull() && m_grafana_version_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_destinations_isValid = ::OpenAPI::fromJsonValue(m_notification_destinations, json[QString("notificationDestinations")]);
    m_notification_destinations_isSet = !json[QString("notificationDestinations")].isNull() && m_notification_destinations_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIWorkspaceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_grafana_version_isSet) {
        obj.insert(QString("grafanaVersion"), ::OpenAPI::toJsonValue(m_grafana_version));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_destinations.isSet()) {
        obj.insert(QString("notificationDestinations"), ::OpenAPI::toJsonValue(m_notification_destinations));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAIWorkspaceSummary_authentication OAIWorkspaceSummary::getAuthentication() const {
    return m_authentication;
}
void OAIWorkspaceSummary::setAuthentication(const OAIWorkspaceSummary_authentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIWorkspaceSummary::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIWorkspaceSummary::is_authentication_Valid() const{
    return m_authentication_isValid;
}

QDateTime OAIWorkspaceSummary::getCreated() const {
    return m_created;
}
void OAIWorkspaceSummary::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIWorkspaceSummary::is_created_Set() const{
    return m_created_isSet;
}

bool OAIWorkspaceSummary::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIWorkspaceSummary::getDescription() const {
    return m_description;
}
void OAIWorkspaceSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWorkspaceSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWorkspaceSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIWorkspaceSummary::getEndpoint() const {
    return m_endpoint;
}
void OAIWorkspaceSummary::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIWorkspaceSummary::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIWorkspaceSummary::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIWorkspaceSummary::getGrafanaVersion() const {
    return m_grafana_version;
}
void OAIWorkspaceSummary::setGrafanaVersion(const QString &grafana_version) {
    m_grafana_version = grafana_version;
    m_grafana_version_isSet = true;
}

bool OAIWorkspaceSummary::is_grafana_version_Set() const{
    return m_grafana_version_isSet;
}

bool OAIWorkspaceSummary::is_grafana_version_Valid() const{
    return m_grafana_version_isValid;
}

QString OAIWorkspaceSummary::getId() const {
    return m_id;
}
void OAIWorkspaceSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWorkspaceSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWorkspaceSummary::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIWorkspaceSummary::getModified() const {
    return m_modified;
}
void OAIWorkspaceSummary::setModified(const QDateTime &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIWorkspaceSummary::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIWorkspaceSummary::is_modified_Valid() const{
    return m_modified_isValid;
}

QString OAIWorkspaceSummary::getName() const {
    return m_name;
}
void OAIWorkspaceSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkspaceSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkspaceSummary::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIWorkspaceSummary::getNotificationDestinations() const {
    return m_notification_destinations;
}
void OAIWorkspaceSummary::setNotificationDestinations(const QList &notification_destinations) {
    m_notification_destinations = notification_destinations;
    m_notification_destinations_isSet = true;
}

bool OAIWorkspaceSummary::is_notification_destinations_Set() const{
    return m_notification_destinations_isSet;
}

bool OAIWorkspaceSummary::is_notification_destinations_Valid() const{
    return m_notification_destinations_isValid;
}

OAIWorkspaceStatus OAIWorkspaceSummary::getStatus() const {
    return m_status;
}
void OAIWorkspaceSummary::setStatus(const OAIWorkspaceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWorkspaceSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWorkspaceSummary::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIWorkspaceSummary::getTags() const {
    return m_tags;
}
void OAIWorkspaceSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWorkspaceSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWorkspaceSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIWorkspaceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grafana_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authentication_isValid && m_created_isValid && m_endpoint_isValid && m_grafana_version_isValid && m_id_isValid && m_modified_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
