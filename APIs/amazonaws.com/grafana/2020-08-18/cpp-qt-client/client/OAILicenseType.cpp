/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseType::OAILicenseType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseType::OAILicenseType() {
    this->initializeModel();
}

OAILicenseType::~OAILicenseType() {}

void OAILicenseType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILicenseType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILicenseType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ENTERPRISE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILicenseType::ENTERPRISE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENTERPRISE_FREE_TRIAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAILicenseType::ENTERPRISE_FREE_TRIAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILicenseType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILicenseType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILicenseType::ENTERPRISE:
            val = "ENTERPRISE";
            break;
        case eOAILicenseType::ENTERPRISE_FREE_TRIAL:
            val = "ENTERPRISE_FREE_TRIAL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILicenseType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILicenseType::eOAILicenseType OAILicenseType::getValue() const {
    return m_value;
}

void OAILicenseType::setValue(const OAILicenseType::eOAILicenseType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILicenseType::isSet() const {
    
    return m_value_isSet;
}

bool OAILicenseType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
