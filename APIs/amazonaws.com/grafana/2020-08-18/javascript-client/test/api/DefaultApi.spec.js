/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonManagedGrafana);
  }
}(this, function(expect, AmazonManagedGrafana) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonManagedGrafana.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateLicense', function() {
      it('should call associateLicense successfully', function(done) {
        //uncomment below and update the code to test associateLicense
        //instance.associateLicense(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWorkspace', function() {
      it('should call createWorkspace successfully', function(done) {
        //uncomment below and update the code to test createWorkspace
        //instance.createWorkspace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWorkspaceApiKey', function() {
      it('should call createWorkspaceApiKey successfully', function(done) {
        //uncomment below and update the code to test createWorkspaceApiKey
        //instance.createWorkspaceApiKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkspace', function() {
      it('should call deleteWorkspace successfully', function(done) {
        //uncomment below and update the code to test deleteWorkspace
        //instance.deleteWorkspace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkspaceApiKey', function() {
      it('should call deleteWorkspaceApiKey successfully', function(done) {
        //uncomment below and update the code to test deleteWorkspaceApiKey
        //instance.deleteWorkspaceApiKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkspace', function() {
      it('should call describeWorkspace successfully', function(done) {
        //uncomment below and update the code to test describeWorkspace
        //instance.describeWorkspace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkspaceAuthentication', function() {
      it('should call describeWorkspaceAuthentication successfully', function(done) {
        //uncomment below and update the code to test describeWorkspaceAuthentication
        //instance.describeWorkspaceAuthentication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkspaceConfiguration', function() {
      it('should call describeWorkspaceConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeWorkspaceConfiguration
        //instance.describeWorkspaceConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateLicense', function() {
      it('should call disassociateLicense successfully', function(done) {
        //uncomment below and update the code to test disassociateLicense
        //instance.disassociateLicense(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPermissions', function() {
      it('should call listPermissions successfully', function(done) {
        //uncomment below and update the code to test listPermissions
        //instance.listPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVersions', function() {
      it('should call listVersions successfully', function(done) {
        //uncomment below and update the code to test listVersions
        //instance.listVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorkspaces', function() {
      it('should call listWorkspaces successfully', function(done) {
        //uncomment below and update the code to test listWorkspaces
        //instance.listWorkspaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePermissions', function() {
      it('should call updatePermissions successfully', function(done) {
        //uncomment below and update the code to test updatePermissions
        //instance.updatePermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkspace', function() {
      it('should call updateWorkspace successfully', function(done) {
        //uncomment below and update the code to test updateWorkspace
        //instance.updateWorkspace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkspaceAuthentication', function() {
      it('should call updateWorkspaceAuthentication successfully', function(done) {
        //uncomment below and update the code to test updateWorkspaceAuthentication
        //instance.updateWorkspaceAuthentication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkspaceConfiguration', function() {
      it('should call updateWorkspaceConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateWorkspaceConfiguration
        //instance.updateWorkspaceConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
