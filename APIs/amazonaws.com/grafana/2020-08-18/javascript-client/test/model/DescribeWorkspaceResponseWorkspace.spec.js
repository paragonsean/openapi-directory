/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonManagedGrafana);
  }
}(this, function(expect, AmazonManagedGrafana) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DescribeWorkspaceResponseWorkspace', function() {
    it('should create an instance of DescribeWorkspaceResponseWorkspace', function() {
      // uncomment below and update the code to test DescribeWorkspaceResponseWorkspace
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be.a(AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace);
    });

    it('should have the property accountAccessType (base name: "accountAccessType")', function() {
      // uncomment below and update the code to test the property accountAccessType
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property authentication (base name: "authentication")', function() {
      // uncomment below and update the code to test the property authentication
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property dataSources (base name: "dataSources")', function() {
      // uncomment below and update the code to test the property dataSources
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property endpoint (base name: "endpoint")', function() {
      // uncomment below and update the code to test the property endpoint
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property freeTrialConsumed (base name: "freeTrialConsumed")', function() {
      // uncomment below and update the code to test the property freeTrialConsumed
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property freeTrialExpiration (base name: "freeTrialExpiration")', function() {
      // uncomment below and update the code to test the property freeTrialExpiration
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property grafanaVersion (base name: "grafanaVersion")', function() {
      // uncomment below and update the code to test the property grafanaVersion
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property licenseExpiration (base name: "licenseExpiration")', function() {
      // uncomment below and update the code to test the property licenseExpiration
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property licenseType (base name: "licenseType")', function() {
      // uncomment below and update the code to test the property licenseType
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property modified (base name: "modified")', function() {
      // uncomment below and update the code to test the property modified
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property networkAccessControl (base name: "networkAccessControl")', function() {
      // uncomment below and update the code to test the property networkAccessControl
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property notificationDestinations (base name: "notificationDestinations")', function() {
      // uncomment below and update the code to test the property notificationDestinations
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property organizationRoleName (base name: "organizationRoleName")', function() {
      // uncomment below and update the code to test the property organizationRoleName
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property organizationalUnits (base name: "organizationalUnits")', function() {
      // uncomment below and update the code to test the property organizationalUnits
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property permissionType (base name: "permissionType")', function() {
      // uncomment below and update the code to test the property permissionType
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property stackSetName (base name: "stackSetName")', function() {
      // uncomment below and update the code to test the property stackSetName
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property vpcConfiguration (base name: "vpcConfiguration")', function() {
      // uncomment below and update the code to test the property vpcConfiguration
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

    it('should have the property workspaceRoleArn (base name: "workspaceRoleArn")', function() {
      // uncomment below and update the code to test the property workspaceRoleArn
      //var instance = new AmazonManagedGrafana.DescribeWorkspaceResponseWorkspace();
      //expect(instance).to.be();
    });

  });

}));
