/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateWorkspaceRequestNetworkAccessControl from './CreateWorkspaceRequestNetworkAccessControl';
import CreateWorkspaceRequestVpcConfiguration from './CreateWorkspaceRequestVpcConfiguration';
import DataSourceType from './DataSourceType';
import NotificationDestinationType from './NotificationDestinationType';

/**
 * The UpdateWorkspaceRequest model module.
 * @module model/UpdateWorkspaceRequest
 * @version 2020-08-18
 */
class UpdateWorkspaceRequest {
    /**
     * Constructs a new <code>UpdateWorkspaceRequest</code>.
     * @alias module:model/UpdateWorkspaceRequest
     */
    constructor() { 
        
        UpdateWorkspaceRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateWorkspaceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateWorkspaceRequest} obj Optional instance to populate.
     * @return {module:model/UpdateWorkspaceRequest} The populated <code>UpdateWorkspaceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateWorkspaceRequest();

            if (data.hasOwnProperty('accountAccessType')) {
                obj['accountAccessType'] = ApiClient.convertToType(data['accountAccessType'], 'String');
            }
            if (data.hasOwnProperty('networkAccessControl')) {
                obj['networkAccessControl'] = CreateWorkspaceRequestNetworkAccessControl.constructFromObject(data['networkAccessControl']);
            }
            if (data.hasOwnProperty('organizationRoleName')) {
                obj['organizationRoleName'] = ApiClient.convertToType(data['organizationRoleName'], 'String');
            }
            if (data.hasOwnProperty('permissionType')) {
                obj['permissionType'] = ApiClient.convertToType(data['permissionType'], 'String');
            }
            if (data.hasOwnProperty('removeNetworkAccessConfiguration')) {
                obj['removeNetworkAccessConfiguration'] = ApiClient.convertToType(data['removeNetworkAccessConfiguration'], 'Boolean');
            }
            if (data.hasOwnProperty('removeVpcConfiguration')) {
                obj['removeVpcConfiguration'] = ApiClient.convertToType(data['removeVpcConfiguration'], 'Boolean');
            }
            if (data.hasOwnProperty('stackSetName')) {
                obj['stackSetName'] = ApiClient.convertToType(data['stackSetName'], 'String');
            }
            if (data.hasOwnProperty('vpcConfiguration')) {
                obj['vpcConfiguration'] = CreateWorkspaceRequestVpcConfiguration.constructFromObject(data['vpcConfiguration']);
            }
            if (data.hasOwnProperty('workspaceDataSources')) {
                obj['workspaceDataSources'] = ApiClient.convertToType(data['workspaceDataSources'], [DataSourceType]);
            }
            if (data.hasOwnProperty('workspaceDescription')) {
                obj['workspaceDescription'] = ApiClient.convertToType(data['workspaceDescription'], 'String');
            }
            if (data.hasOwnProperty('workspaceName')) {
                obj['workspaceName'] = ApiClient.convertToType(data['workspaceName'], 'String');
            }
            if (data.hasOwnProperty('workspaceNotificationDestinations')) {
                obj['workspaceNotificationDestinations'] = ApiClient.convertToType(data['workspaceNotificationDestinations'], [NotificationDestinationType]);
            }
            if (data.hasOwnProperty('workspaceOrganizationalUnits')) {
                obj['workspaceOrganizationalUnits'] = ApiClient.convertToType(data['workspaceOrganizationalUnits'], ['String']);
            }
            if (data.hasOwnProperty('workspaceRoleArn')) {
                obj['workspaceRoleArn'] = ApiClient.convertToType(data['workspaceRoleArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateWorkspaceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateWorkspaceRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountAccessType'] && !(typeof data['accountAccessType'] === 'string' || data['accountAccessType'] instanceof String)) {
            throw new Error("Expected the field `accountAccessType` to be a primitive type in the JSON string but got " + data['accountAccessType']);
        }
        // validate the optional field `networkAccessControl`
        if (data['networkAccessControl']) { // data not null
          CreateWorkspaceRequestNetworkAccessControl.validateJSON(data['networkAccessControl']);
        }
        // ensure the json data is a string
        if (data['organizationRoleName'] && !(typeof data['organizationRoleName'] === 'string' || data['organizationRoleName'] instanceof String)) {
            throw new Error("Expected the field `organizationRoleName` to be a primitive type in the JSON string but got " + data['organizationRoleName']);
        }
        // ensure the json data is a string
        if (data['permissionType'] && !(typeof data['permissionType'] === 'string' || data['permissionType'] instanceof String)) {
            throw new Error("Expected the field `permissionType` to be a primitive type in the JSON string but got " + data['permissionType']);
        }
        // ensure the json data is a string
        if (data['stackSetName'] && !(typeof data['stackSetName'] === 'string' || data['stackSetName'] instanceof String)) {
            throw new Error("Expected the field `stackSetName` to be a primitive type in the JSON string but got " + data['stackSetName']);
        }
        // validate the optional field `vpcConfiguration`
        if (data['vpcConfiguration']) { // data not null
          CreateWorkspaceRequestVpcConfiguration.validateJSON(data['vpcConfiguration']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['workspaceDataSources'])) {
            throw new Error("Expected the field `workspaceDataSources` to be an array in the JSON data but got " + data['workspaceDataSources']);
        }
        // ensure the json data is a string
        if (data['workspaceDescription'] && !(typeof data['workspaceDescription'] === 'string' || data['workspaceDescription'] instanceof String)) {
            throw new Error("Expected the field `workspaceDescription` to be a primitive type in the JSON string but got " + data['workspaceDescription']);
        }
        // ensure the json data is a string
        if (data['workspaceName'] && !(typeof data['workspaceName'] === 'string' || data['workspaceName'] instanceof String)) {
            throw new Error("Expected the field `workspaceName` to be a primitive type in the JSON string but got " + data['workspaceName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['workspaceNotificationDestinations'])) {
            throw new Error("Expected the field `workspaceNotificationDestinations` to be an array in the JSON data but got " + data['workspaceNotificationDestinations']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['workspaceOrganizationalUnits'])) {
            throw new Error("Expected the field `workspaceOrganizationalUnits` to be an array in the JSON data but got " + data['workspaceOrganizationalUnits']);
        }
        // ensure the json data is a string
        if (data['workspaceRoleArn'] && !(typeof data['workspaceRoleArn'] === 'string' || data['workspaceRoleArn'] instanceof String)) {
            throw new Error("Expected the field `workspaceRoleArn` to be a primitive type in the JSON string but got " + data['workspaceRoleArn']);
        }

        return true;
    }


}



/**
 * Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must specify which organizational units the workspace can access in the <code>workspaceOrganizationalUnits</code> parameter.
 * @member {module:model/UpdateWorkspaceRequest.AccountAccessTypeEnum} accountAccessType
 */
UpdateWorkspaceRequest.prototype['accountAccessType'] = undefined;

/**
 * @member {module:model/CreateWorkspaceRequestNetworkAccessControl} networkAccessControl
 */
UpdateWorkspaceRequest.prototype['networkAccessControl'] = undefined;

/**
 * The name of an IAM role that already exists to use to access resources through Organizations. This can only be used with a workspace that has the <code>permissionType</code> set to <code>CUSTOMER_MANAGED</code>.
 * @member {String} organizationRoleName
 */
UpdateWorkspaceRequest.prototype['organizationRoleName'] = undefined;

/**
 * <p>Use this parameter if you want to change a workspace from <code>SERVICE_MANAGED</code> to <code>CUSTOMER_MANAGED</code>. This allows you to manage the permissions that the workspace uses to access datasources and notification channels. If the workspace is in a member Amazon Web Services account of an organization, and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services accounts in the organization, you must choose <code>CUSTOMER_MANAGED</code>.</p> <p>If you specify this as <code>CUSTOMER_MANAGED</code>, you must also specify a <code>workspaceRoleArn</code> that the workspace will use for accessing Amazon Web Services resources.</p> <p>For more information on the role and permissions needed, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html\">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a> </p> <note> <p>Do not use this to convert a <code>CUSTOMER_MANAGED</code> workspace to <code>SERVICE_MANAGED</code>. Do not include this parameter if you want to leave the workspace as <code>SERVICE_MANAGED</code>.</p> <p>You can convert a <code>CUSTOMER_MANAGED</code> workspace to <code>SERVICE_MANAGED</code> using the Amazon Managed Grafana console. For more information, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html\">Managing permissions for data sources and notification channels</a>.</p> </note>
 * @member {module:model/UpdateWorkspaceRequest.PermissionTypeEnum} permissionType
 */
UpdateWorkspaceRequest.prototype['permissionType'] = undefined;

/**
 * <p>Whether to remove the network access configuration from the workspace.</p> <p>Setting this to <code>true</code> and providing a <code>networkAccessControl</code> to set will return an error.</p> <p>If you remove this configuration by setting this to <code>true</code>, then all IP addresses and VPC endpoints will be allowed. Standard Grafana authentication and authorization will still be required.</p>
 * @member {Boolean} removeNetworkAccessConfiguration
 */
UpdateWorkspaceRequest.prototype['removeNetworkAccessConfiguration'] = undefined;

/**
 * <p>Whether to remove the VPC configuration from the workspace.</p> <p>Setting this to <code>true</code> and providing a <code>vpcConfiguration</code> to set will return an error.</p>
 * @member {Boolean} removeVpcConfiguration
 */
UpdateWorkspaceRequest.prototype['removeVpcConfiguration'] = undefined;

/**
 * The name of the CloudFormation stack set to use to generate IAM roles to be used for this workspace.
 * @member {String} stackSetName
 */
UpdateWorkspaceRequest.prototype['stackSetName'] = undefined;

/**
 * @member {module:model/CreateWorkspaceRequestVpcConfiguration} vpcConfiguration
 */
UpdateWorkspaceRequest.prototype['vpcConfiguration'] = undefined;

/**
 * This parameter is for internal use only, and should not be used.
 * @member {Array.<module:model/DataSourceType>} workspaceDataSources
 */
UpdateWorkspaceRequest.prototype['workspaceDataSources'] = undefined;

/**
 * A description for the workspace. This is used only to help you identify this workspace.
 * @member {String} workspaceDescription
 */
UpdateWorkspaceRequest.prototype['workspaceDescription'] = undefined;

/**
 * A new name for the workspace to update.
 * @member {String} workspaceName
 */
UpdateWorkspaceRequest.prototype['workspaceName'] = undefined;

/**
 * Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to use these channels.
 * @member {Array.<module:model/NotificationDestinationType>} workspaceNotificationDestinations
 */
UpdateWorkspaceRequest.prototype['workspaceNotificationDestinations'] = undefined;

/**
 * Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.
 * @member {Array.<String>} workspaceOrganizationalUnits
 */
UpdateWorkspaceRequest.prototype['workspaceOrganizationalUnits'] = undefined;

/**
 * Specifies an IAM role that grants permissions to Amazon Web Services resources that the workspace accesses, such as data sources and notification channels. If this workspace has <code>permissionType</code> <code>CUSTOMER_MANAGED</code>, then this role is required.
 * @member {String} workspaceRoleArn
 */
UpdateWorkspaceRequest.prototype['workspaceRoleArn'] = undefined;





/**
 * Allowed values for the <code>accountAccessType</code> property.
 * @enum {String}
 * @readonly
 */
UpdateWorkspaceRequest['AccountAccessTypeEnum'] = {

    /**
     * value: "CURRENT_ACCOUNT"
     * @const
     */
    "CURRENT_ACCOUNT": "CURRENT_ACCOUNT",

    /**
     * value: "ORGANIZATION"
     * @const
     */
    "ORGANIZATION": "ORGANIZATION"
};


/**
 * Allowed values for the <code>permissionType</code> property.
 * @enum {String}
 * @readonly
 */
UpdateWorkspaceRequest['PermissionTypeEnum'] = {

    /**
     * value: "CUSTOMER_MANAGED"
     * @const
     */
    "CUSTOMER_MANAGED": "CUSTOMER_MANAGED",

    /**
     * value: "SERVICE_MANAGED"
     * @const
     */
    "SERVICE_MANAGED": "SERVICE_MANAGED"
};



export default UpdateWorkspaceRequest;

