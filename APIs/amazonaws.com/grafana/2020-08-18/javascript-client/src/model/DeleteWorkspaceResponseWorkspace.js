/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountAccessType from './AccountAccessType';
import LicenseType from './LicenseType';
import PermissionType from './PermissionType';
import WorkspaceDescription from './WorkspaceDescription';
import WorkspaceDescriptionAuthentication from './WorkspaceDescriptionAuthentication';
import WorkspaceDescriptionNetworkAccessControl from './WorkspaceDescriptionNetworkAccessControl';
import WorkspaceDescriptionVpcConfiguration from './WorkspaceDescriptionVpcConfiguration';
import WorkspaceStatus from './WorkspaceStatus';

/**
 * The DeleteWorkspaceResponseWorkspace model module.
 * @module model/DeleteWorkspaceResponseWorkspace
 * @version 2020-08-18
 */
class DeleteWorkspaceResponseWorkspace {
    /**
     * Constructs a new <code>DeleteWorkspaceResponseWorkspace</code>.
     * @alias module:model/DeleteWorkspaceResponseWorkspace
     * @implements module:model/WorkspaceDescription
     * @param authentication {module:model/WorkspaceDescriptionAuthentication} 
     * @param created {Date} 
     * @param dataSources {Array} 
     * @param endpoint {String} 
     * @param grafanaVersion {String} 
     * @param id {String} 
     * @param modified {Date} 
     * @param status {module:model/WorkspaceStatus} 
     */
    constructor(authentication, created, dataSources, endpoint, grafanaVersion, id, modified, status) { 
        WorkspaceDescription.initialize(this, authentication, created, dataSources, endpoint, grafanaVersion, id, modified, status);
        DeleteWorkspaceResponseWorkspace.initialize(this, authentication, created, dataSources, endpoint, grafanaVersion, id, modified, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authentication, created, dataSources, endpoint, grafanaVersion, id, modified, status) { 
        obj['authentication'] = authentication;
        obj['created'] = created;
        obj['dataSources'] = dataSources;
        obj['endpoint'] = endpoint;
        obj['grafanaVersion'] = grafanaVersion;
        obj['id'] = id;
        obj['modified'] = modified;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>DeleteWorkspaceResponseWorkspace</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeleteWorkspaceResponseWorkspace} obj Optional instance to populate.
     * @return {module:model/DeleteWorkspaceResponseWorkspace} The populated <code>DeleteWorkspaceResponseWorkspace</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeleteWorkspaceResponseWorkspace();
            WorkspaceDescription.constructFromObject(data, obj);

            if (data.hasOwnProperty('accountAccessType')) {
                obj['accountAccessType'] = ApiClient.convertToType(data['accountAccessType'], AccountAccessType);
            }
            if (data.hasOwnProperty('authentication')) {
                obj['authentication'] = WorkspaceDescriptionAuthentication.constructFromObject(data['authentication']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('dataSources')) {
                obj['dataSources'] = ApiClient.convertToType(data['dataSources'], Array);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('freeTrialConsumed')) {
                obj['freeTrialConsumed'] = ApiClient.convertToType(data['freeTrialConsumed'], 'Boolean');
            }
            if (data.hasOwnProperty('freeTrialExpiration')) {
                obj['freeTrialExpiration'] = ApiClient.convertToType(data['freeTrialExpiration'], 'Date');
            }
            if (data.hasOwnProperty('grafanaVersion')) {
                obj['grafanaVersion'] = ApiClient.convertToType(data['grafanaVersion'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('licenseExpiration')) {
                obj['licenseExpiration'] = ApiClient.convertToType(data['licenseExpiration'], 'Date');
            }
            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], LicenseType);
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkAccessControl')) {
                obj['networkAccessControl'] = WorkspaceDescriptionNetworkAccessControl.constructFromObject(data['networkAccessControl']);
            }
            if (data.hasOwnProperty('notificationDestinations')) {
                obj['notificationDestinations'] = ApiClient.convertToType(data['notificationDestinations'], Array);
            }
            if (data.hasOwnProperty('organizationRoleName')) {
                obj['organizationRoleName'] = ApiClient.convertToType(data['organizationRoleName'], 'String');
            }
            if (data.hasOwnProperty('organizationalUnits')) {
                obj['organizationalUnits'] = ApiClient.convertToType(data['organizationalUnits'], Array);
            }
            if (data.hasOwnProperty('permissionType')) {
                obj['permissionType'] = ApiClient.convertToType(data['permissionType'], PermissionType);
            }
            if (data.hasOwnProperty('stackSetName')) {
                obj['stackSetName'] = ApiClient.convertToType(data['stackSetName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], WorkspaceStatus);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
            if (data.hasOwnProperty('vpcConfiguration')) {
                obj['vpcConfiguration'] = WorkspaceDescriptionVpcConfiguration.constructFromObject(data['vpcConfiguration']);
            }
            if (data.hasOwnProperty('workspaceRoleArn')) {
                obj['workspaceRoleArn'] = ApiClient.convertToType(data['workspaceRoleArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeleteWorkspaceResponseWorkspace</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeleteWorkspaceResponseWorkspace</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeleteWorkspaceResponseWorkspace.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accountAccessType`
        if (data['accountAccessType']) { // data not null
          AccountAccessType.validateJSON(data['accountAccessType']);
        }
        // validate the optional field `authentication`
        if (data['authentication']) { // data not null
          WorkspaceDescriptionAuthentication.validateJSON(data['authentication']);
        }
        // validate the optional field `created`
        if (data['created']) { // data not null
          Date.validateJSON(data['created']);
        }
        // validate the optional field `dataSources`
        if (data['dataSources']) { // data not null
          Array.validateJSON(data['dataSources']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `endpoint`
        if (data['endpoint']) { // data not null
          String.validateJSON(data['endpoint']);
        }
        // validate the optional field `freeTrialConsumed`
        if (data['freeTrialConsumed']) { // data not null
          Boolean.validateJSON(data['freeTrialConsumed']);
        }
        // validate the optional field `freeTrialExpiration`
        if (data['freeTrialExpiration']) { // data not null
          Date.validateJSON(data['freeTrialExpiration']);
        }
        // validate the optional field `grafanaVersion`
        if (data['grafanaVersion']) { // data not null
          String.validateJSON(data['grafanaVersion']);
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          String.validateJSON(data['id']);
        }
        // validate the optional field `licenseExpiration`
        if (data['licenseExpiration']) { // data not null
          Date.validateJSON(data['licenseExpiration']);
        }
        // validate the optional field `licenseType`
        if (data['licenseType']) { // data not null
          LicenseType.validateJSON(data['licenseType']);
        }
        // validate the optional field `modified`
        if (data['modified']) { // data not null
          Date.validateJSON(data['modified']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `networkAccessControl`
        if (data['networkAccessControl']) { // data not null
          WorkspaceDescriptionNetworkAccessControl.validateJSON(data['networkAccessControl']);
        }
        // validate the optional field `notificationDestinations`
        if (data['notificationDestinations']) { // data not null
          Array.validateJSON(data['notificationDestinations']);
        }
        // validate the optional field `organizationRoleName`
        if (data['organizationRoleName']) { // data not null
          String.validateJSON(data['organizationRoleName']);
        }
        // validate the optional field `organizationalUnits`
        if (data['organizationalUnits']) { // data not null
          Array.validateJSON(data['organizationalUnits']);
        }
        // validate the optional field `permissionType`
        if (data['permissionType']) { // data not null
          PermissionType.validateJSON(data['permissionType']);
        }
        // validate the optional field `stackSetName`
        if (data['stackSetName']) { // data not null
          String.validateJSON(data['stackSetName']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          WorkspaceStatus.validateJSON(data['status']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }
        // validate the optional field `vpcConfiguration`
        if (data['vpcConfiguration']) { // data not null
          WorkspaceDescriptionVpcConfiguration.validateJSON(data['vpcConfiguration']);
        }
        // validate the optional field `workspaceRoleArn`
        if (data['workspaceRoleArn']) { // data not null
          String.validateJSON(data['workspaceRoleArn']);
        }

        return true;
    }


}

DeleteWorkspaceResponseWorkspace.RequiredProperties = ["authentication", "created", "dataSources", "endpoint", "grafanaVersion", "id", "modified", "status"];

/**
 * @member {module:model/AccountAccessType} accountAccessType
 */
DeleteWorkspaceResponseWorkspace.prototype['accountAccessType'] = undefined;

/**
 * @member {module:model/WorkspaceDescriptionAuthentication} authentication
 */
DeleteWorkspaceResponseWorkspace.prototype['authentication'] = undefined;

/**
 * @member {Date} created
 */
DeleteWorkspaceResponseWorkspace.prototype['created'] = undefined;

/**
 * @member {Array} dataSources
 */
DeleteWorkspaceResponseWorkspace.prototype['dataSources'] = undefined;

/**
 * @member {String} description
 */
DeleteWorkspaceResponseWorkspace.prototype['description'] = undefined;

/**
 * @member {String} endpoint
 */
DeleteWorkspaceResponseWorkspace.prototype['endpoint'] = undefined;

/**
 * @member {Boolean} freeTrialConsumed
 */
DeleteWorkspaceResponseWorkspace.prototype['freeTrialConsumed'] = undefined;

/**
 * @member {Date} freeTrialExpiration
 */
DeleteWorkspaceResponseWorkspace.prototype['freeTrialExpiration'] = undefined;

/**
 * @member {String} grafanaVersion
 */
DeleteWorkspaceResponseWorkspace.prototype['grafanaVersion'] = undefined;

/**
 * @member {String} id
 */
DeleteWorkspaceResponseWorkspace.prototype['id'] = undefined;

/**
 * @member {Date} licenseExpiration
 */
DeleteWorkspaceResponseWorkspace.prototype['licenseExpiration'] = undefined;

/**
 * @member {module:model/LicenseType} licenseType
 */
DeleteWorkspaceResponseWorkspace.prototype['licenseType'] = undefined;

/**
 * @member {Date} modified
 */
DeleteWorkspaceResponseWorkspace.prototype['modified'] = undefined;

/**
 * @member {String} name
 */
DeleteWorkspaceResponseWorkspace.prototype['name'] = undefined;

/**
 * @member {module:model/WorkspaceDescriptionNetworkAccessControl} networkAccessControl
 */
DeleteWorkspaceResponseWorkspace.prototype['networkAccessControl'] = undefined;

/**
 * @member {Array} notificationDestinations
 */
DeleteWorkspaceResponseWorkspace.prototype['notificationDestinations'] = undefined;

/**
 * @member {String} organizationRoleName
 */
DeleteWorkspaceResponseWorkspace.prototype['organizationRoleName'] = undefined;

/**
 * @member {Array} organizationalUnits
 */
DeleteWorkspaceResponseWorkspace.prototype['organizationalUnits'] = undefined;

/**
 * @member {module:model/PermissionType} permissionType
 */
DeleteWorkspaceResponseWorkspace.prototype['permissionType'] = undefined;

/**
 * @member {String} stackSetName
 */
DeleteWorkspaceResponseWorkspace.prototype['stackSetName'] = undefined;

/**
 * @member {module:model/WorkspaceStatus} status
 */
DeleteWorkspaceResponseWorkspace.prototype['status'] = undefined;

/**
 * @member {Object} tags
 */
DeleteWorkspaceResponseWorkspace.prototype['tags'] = undefined;

/**
 * @member {module:model/WorkspaceDescriptionVpcConfiguration} vpcConfiguration
 */
DeleteWorkspaceResponseWorkspace.prototype['vpcConfiguration'] = undefined;

/**
 * @member {String} workspaceRoleArn
 */
DeleteWorkspaceResponseWorkspace.prototype['workspaceRoleArn'] = undefined;


// Implement WorkspaceDescription interface:
/**
 * @member {module:model/AccountAccessType} accountAccessType
 */
WorkspaceDescription.prototype['accountAccessType'] = undefined;
/**
 * @member {module:model/WorkspaceDescriptionAuthentication} authentication
 */
WorkspaceDescription.prototype['authentication'] = undefined;
/**
 * @member {Date} created
 */
WorkspaceDescription.prototype['created'] = undefined;
/**
 * @member {Array} dataSources
 */
WorkspaceDescription.prototype['dataSources'] = undefined;
/**
 * @member {String} description
 */
WorkspaceDescription.prototype['description'] = undefined;
/**
 * @member {String} endpoint
 */
WorkspaceDescription.prototype['endpoint'] = undefined;
/**
 * @member {Boolean} freeTrialConsumed
 */
WorkspaceDescription.prototype['freeTrialConsumed'] = undefined;
/**
 * @member {Date} freeTrialExpiration
 */
WorkspaceDescription.prototype['freeTrialExpiration'] = undefined;
/**
 * @member {String} grafanaVersion
 */
WorkspaceDescription.prototype['grafanaVersion'] = undefined;
/**
 * @member {String} id
 */
WorkspaceDescription.prototype['id'] = undefined;
/**
 * @member {Date} licenseExpiration
 */
WorkspaceDescription.prototype['licenseExpiration'] = undefined;
/**
 * @member {module:model/LicenseType} licenseType
 */
WorkspaceDescription.prototype['licenseType'] = undefined;
/**
 * @member {Date} modified
 */
WorkspaceDescription.prototype['modified'] = undefined;
/**
 * @member {String} name
 */
WorkspaceDescription.prototype['name'] = undefined;
/**
 * @member {module:model/WorkspaceDescriptionNetworkAccessControl} networkAccessControl
 */
WorkspaceDescription.prototype['networkAccessControl'] = undefined;
/**
 * @member {Array} notificationDestinations
 */
WorkspaceDescription.prototype['notificationDestinations'] = undefined;
/**
 * @member {String} organizationRoleName
 */
WorkspaceDescription.prototype['organizationRoleName'] = undefined;
/**
 * @member {Array} organizationalUnits
 */
WorkspaceDescription.prototype['organizationalUnits'] = undefined;
/**
 * @member {module:model/PermissionType} permissionType
 */
WorkspaceDescription.prototype['permissionType'] = undefined;
/**
 * @member {String} stackSetName
 */
WorkspaceDescription.prototype['stackSetName'] = undefined;
/**
 * @member {module:model/WorkspaceStatus} status
 */
WorkspaceDescription.prototype['status'] = undefined;
/**
 * @member {Object} tags
 */
WorkspaceDescription.prototype['tags'] = undefined;
/**
 * @member {module:model/WorkspaceDescriptionVpcConfiguration} vpcConfiguration
 */
WorkspaceDescription.prototype['vpcConfiguration'] = undefined;
/**
 * @member {String} workspaceRoleArn
 */
WorkspaceDescription.prototype['workspaceRoleArn'] = undefined;




export default DeleteWorkspaceResponseWorkspace;

