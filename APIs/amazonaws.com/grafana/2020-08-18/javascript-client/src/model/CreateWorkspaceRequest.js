/**
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthenticationProviderTypes from './AuthenticationProviderTypes';
import CreateWorkspaceRequestNetworkAccessControl from './CreateWorkspaceRequestNetworkAccessControl';
import CreateWorkspaceRequestVpcConfiguration from './CreateWorkspaceRequestVpcConfiguration';
import DataSourceType from './DataSourceType';
import NotificationDestinationType from './NotificationDestinationType';

/**
 * The CreateWorkspaceRequest model module.
 * @module model/CreateWorkspaceRequest
 * @version 2020-08-18
 */
class CreateWorkspaceRequest {
    /**
     * Constructs a new <code>CreateWorkspaceRequest</code>.
     * @alias module:model/CreateWorkspaceRequest
     * @param accountAccessType {module:model/CreateWorkspaceRequest.AccountAccessTypeEnum} Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must specify which organizational units the workspace can access in the <code>workspaceOrganizationalUnits</code> parameter.
     * @param authenticationProviders {Array.<module:model/AuthenticationProviderTypes>} Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html\">User authentication in Amazon Managed Grafana</a>.
     * @param permissionType {module:model/CreateWorkspaceRequest.PermissionTypeEnum} <p>When creating a workspace through the Amazon Web Services API, CLI or Amazon Web Services CloudFormation, you must manage IAM roles and provision the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p> <p>You must also specify a <code>workspaceRoleArn</code> for a role that you will manage for the workspace to use when accessing those datasources and notification channels.</p> <p>The ability for Amazon Managed Grafana to create and update IAM roles on behalf of the user is supported only in the Amazon Managed Grafana console, where this value may be set to <code>SERVICE_MANAGED</code>.</p> <note> <p>Use only the <code>CUSTOMER_MANAGED</code> permission type when creating a workspace with the API, CLI or Amazon Web Services CloudFormation. </p> </note> <p>For more information, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html\">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a>.</p>
     */
    constructor(accountAccessType, authenticationProviders, permissionType) { 
        
        CreateWorkspaceRequest.initialize(this, accountAccessType, authenticationProviders, permissionType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountAccessType, authenticationProviders, permissionType) { 
        obj['accountAccessType'] = accountAccessType;
        obj['authenticationProviders'] = authenticationProviders;
        obj['permissionType'] = permissionType;
    }

    /**
     * Constructs a <code>CreateWorkspaceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateWorkspaceRequest} obj Optional instance to populate.
     * @return {module:model/CreateWorkspaceRequest} The populated <code>CreateWorkspaceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateWorkspaceRequest();

            if (data.hasOwnProperty('accountAccessType')) {
                obj['accountAccessType'] = ApiClient.convertToType(data['accountAccessType'], 'String');
            }
            if (data.hasOwnProperty('authenticationProviders')) {
                obj['authenticationProviders'] = ApiClient.convertToType(data['authenticationProviders'], [AuthenticationProviderTypes]);
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = ApiClient.convertToType(data['configuration'], 'String');
            }
            if (data.hasOwnProperty('grafanaVersion')) {
                obj['grafanaVersion'] = ApiClient.convertToType(data['grafanaVersion'], 'String');
            }
            if (data.hasOwnProperty('networkAccessControl')) {
                obj['networkAccessControl'] = CreateWorkspaceRequestNetworkAccessControl.constructFromObject(data['networkAccessControl']);
            }
            if (data.hasOwnProperty('organizationRoleName')) {
                obj['organizationRoleName'] = ApiClient.convertToType(data['organizationRoleName'], 'String');
            }
            if (data.hasOwnProperty('permissionType')) {
                obj['permissionType'] = ApiClient.convertToType(data['permissionType'], 'String');
            }
            if (data.hasOwnProperty('stackSetName')) {
                obj['stackSetName'] = ApiClient.convertToType(data['stackSetName'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('vpcConfiguration')) {
                obj['vpcConfiguration'] = CreateWorkspaceRequestVpcConfiguration.constructFromObject(data['vpcConfiguration']);
            }
            if (data.hasOwnProperty('workspaceDataSources')) {
                obj['workspaceDataSources'] = ApiClient.convertToType(data['workspaceDataSources'], [DataSourceType]);
            }
            if (data.hasOwnProperty('workspaceDescription')) {
                obj['workspaceDescription'] = ApiClient.convertToType(data['workspaceDescription'], 'String');
            }
            if (data.hasOwnProperty('workspaceName')) {
                obj['workspaceName'] = ApiClient.convertToType(data['workspaceName'], 'String');
            }
            if (data.hasOwnProperty('workspaceNotificationDestinations')) {
                obj['workspaceNotificationDestinations'] = ApiClient.convertToType(data['workspaceNotificationDestinations'], [NotificationDestinationType]);
            }
            if (data.hasOwnProperty('workspaceOrganizationalUnits')) {
                obj['workspaceOrganizationalUnits'] = ApiClient.convertToType(data['workspaceOrganizationalUnits'], ['String']);
            }
            if (data.hasOwnProperty('workspaceRoleArn')) {
                obj['workspaceRoleArn'] = ApiClient.convertToType(data['workspaceRoleArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateWorkspaceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateWorkspaceRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateWorkspaceRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountAccessType'] && !(typeof data['accountAccessType'] === 'string' || data['accountAccessType'] instanceof String)) {
            throw new Error("Expected the field `accountAccessType` to be a primitive type in the JSON string but got " + data['accountAccessType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['authenticationProviders'])) {
            throw new Error("Expected the field `authenticationProviders` to be an array in the JSON data but got " + data['authenticationProviders']);
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // ensure the json data is a string
        if (data['configuration'] && !(typeof data['configuration'] === 'string' || data['configuration'] instanceof String)) {
            throw new Error("Expected the field `configuration` to be a primitive type in the JSON string but got " + data['configuration']);
        }
        // ensure the json data is a string
        if (data['grafanaVersion'] && !(typeof data['grafanaVersion'] === 'string' || data['grafanaVersion'] instanceof String)) {
            throw new Error("Expected the field `grafanaVersion` to be a primitive type in the JSON string but got " + data['grafanaVersion']);
        }
        // validate the optional field `networkAccessControl`
        if (data['networkAccessControl']) { // data not null
          CreateWorkspaceRequestNetworkAccessControl.validateJSON(data['networkAccessControl']);
        }
        // ensure the json data is a string
        if (data['organizationRoleName'] && !(typeof data['organizationRoleName'] === 'string' || data['organizationRoleName'] instanceof String)) {
            throw new Error("Expected the field `organizationRoleName` to be a primitive type in the JSON string but got " + data['organizationRoleName']);
        }
        // ensure the json data is a string
        if (data['permissionType'] && !(typeof data['permissionType'] === 'string' || data['permissionType'] instanceof String)) {
            throw new Error("Expected the field `permissionType` to be a primitive type in the JSON string but got " + data['permissionType']);
        }
        // ensure the json data is a string
        if (data['stackSetName'] && !(typeof data['stackSetName'] === 'string' || data['stackSetName'] instanceof String)) {
            throw new Error("Expected the field `stackSetName` to be a primitive type in the JSON string but got " + data['stackSetName']);
        }
        // validate the optional field `vpcConfiguration`
        if (data['vpcConfiguration']) { // data not null
          CreateWorkspaceRequestVpcConfiguration.validateJSON(data['vpcConfiguration']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['workspaceDataSources'])) {
            throw new Error("Expected the field `workspaceDataSources` to be an array in the JSON data but got " + data['workspaceDataSources']);
        }
        // ensure the json data is a string
        if (data['workspaceDescription'] && !(typeof data['workspaceDescription'] === 'string' || data['workspaceDescription'] instanceof String)) {
            throw new Error("Expected the field `workspaceDescription` to be a primitive type in the JSON string but got " + data['workspaceDescription']);
        }
        // ensure the json data is a string
        if (data['workspaceName'] && !(typeof data['workspaceName'] === 'string' || data['workspaceName'] instanceof String)) {
            throw new Error("Expected the field `workspaceName` to be a primitive type in the JSON string but got " + data['workspaceName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['workspaceNotificationDestinations'])) {
            throw new Error("Expected the field `workspaceNotificationDestinations` to be an array in the JSON data but got " + data['workspaceNotificationDestinations']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['workspaceOrganizationalUnits'])) {
            throw new Error("Expected the field `workspaceOrganizationalUnits` to be an array in the JSON data but got " + data['workspaceOrganizationalUnits']);
        }
        // ensure the json data is a string
        if (data['workspaceRoleArn'] && !(typeof data['workspaceRoleArn'] === 'string' || data['workspaceRoleArn'] instanceof String)) {
            throw new Error("Expected the field `workspaceRoleArn` to be a primitive type in the JSON string but got " + data['workspaceRoleArn']);
        }

        return true;
    }


}

CreateWorkspaceRequest.RequiredProperties = ["accountAccessType", "authenticationProviders", "permissionType"];

/**
 * Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must specify which organizational units the workspace can access in the <code>workspaceOrganizationalUnits</code> parameter.
 * @member {module:model/CreateWorkspaceRequest.AccountAccessTypeEnum} accountAccessType
 */
CreateWorkspaceRequest.prototype['accountAccessType'] = undefined;

/**
 * Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html\">User authentication in Amazon Managed Grafana</a>.
 * @member {Array.<module:model/AuthenticationProviderTypes>} authenticationProviders
 */
CreateWorkspaceRequest.prototype['authenticationProviders'] = undefined;

/**
 * A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
 * @member {String} clientToken
 */
CreateWorkspaceRequest.prototype['clientToken'] = undefined;

/**
 * The configuration string for the workspace that you create. For more information about the format and configuration options available, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-configure-workspace.html\">Working in your Grafana workspace</a>.
 * @member {String} configuration
 */
CreateWorkspaceRequest.prototype['configuration'] = undefined;

/**
 * <p>Specifies the version of Grafana to support in the new workspace.</p> <p>To get a list of supported version, use the <code>ListVersions</code> operation.</p>
 * @member {String} grafanaVersion
 */
CreateWorkspaceRequest.prototype['grafanaVersion'] = undefined;

/**
 * @member {module:model/CreateWorkspaceRequestNetworkAccessControl} networkAccessControl
 */
CreateWorkspaceRequest.prototype['networkAccessControl'] = undefined;

/**
 * The name of an IAM role that already exists to use with Organizations to access Amazon Web Services data sources and notification channels in other accounts in an organization.
 * @member {String} organizationRoleName
 */
CreateWorkspaceRequest.prototype['organizationRoleName'] = undefined;

/**
 * <p>When creating a workspace through the Amazon Web Services API, CLI or Amazon Web Services CloudFormation, you must manage IAM roles and provision the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p> <p>You must also specify a <code>workspaceRoleArn</code> for a role that you will manage for the workspace to use when accessing those datasources and notification channels.</p> <p>The ability for Amazon Managed Grafana to create and update IAM roles on behalf of the user is supported only in the Amazon Managed Grafana console, where this value may be set to <code>SERVICE_MANAGED</code>.</p> <note> <p>Use only the <code>CUSTOMER_MANAGED</code> permission type when creating a workspace with the API, CLI or Amazon Web Services CloudFormation. </p> </note> <p>For more information, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html\">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a>.</p>
 * @member {module:model/CreateWorkspaceRequest.PermissionTypeEnum} permissionType
 */
CreateWorkspaceRequest.prototype['permissionType'] = undefined;

/**
 * The name of the CloudFormation stack set to use to generate IAM roles to be used for this workspace.
 * @member {String} stackSetName
 */
CreateWorkspaceRequest.prototype['stackSetName'] = undefined;

/**
 * The list of tags associated with the workspace.
 * @member {Object.<String, String>} tags
 */
CreateWorkspaceRequest.prototype['tags'] = undefined;

/**
 * @member {module:model/CreateWorkspaceRequestVpcConfiguration} vpcConfiguration
 */
CreateWorkspaceRequest.prototype['vpcConfiguration'] = undefined;

/**
 * This parameter is for internal use only, and should not be used.
 * @member {Array.<module:model/DataSourceType>} workspaceDataSources
 */
CreateWorkspaceRequest.prototype['workspaceDataSources'] = undefined;

/**
 * <p>A description for the workspace. This is used only to help you identify this workspace.</p> <p>Pattern: <code>^[\\\\p{L}\\\\p{Z}\\\\p{N}\\\\p{P}]{0,2048}$</code> </p>
 * @member {String} workspaceDescription
 */
CreateWorkspaceRequest.prototype['workspaceDescription'] = undefined;

/**
 * The name for the workspace. It does not have to be unique.
 * @member {String} workspaceName
 */
CreateWorkspaceRequest.prototype['workspaceName'] = undefined;

/**
 * Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to use these channels.
 * @member {Array.<module:model/NotificationDestinationType>} workspaceNotificationDestinations
 */
CreateWorkspaceRequest.prototype['workspaceNotificationDestinations'] = undefined;

/**
 * Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.
 * @member {Array.<String>} workspaceOrganizationalUnits
 */
CreateWorkspaceRequest.prototype['workspaceOrganizationalUnits'] = undefined;

/**
 * Specified the IAM role that grants permissions to the Amazon Web Services resources that the workspace will view data from, including both data sources and notification channels. You are responsible for managing the permissions for this role as new data sources or notification channels are added. 
 * @member {String} workspaceRoleArn
 */
CreateWorkspaceRequest.prototype['workspaceRoleArn'] = undefined;





/**
 * Allowed values for the <code>accountAccessType</code> property.
 * @enum {String}
 * @readonly
 */
CreateWorkspaceRequest['AccountAccessTypeEnum'] = {

    /**
     * value: "CURRENT_ACCOUNT"
     * @const
     */
    "CURRENT_ACCOUNT": "CURRENT_ACCOUNT",

    /**
     * value: "ORGANIZATION"
     * @const
     */
    "ORGANIZATION": "ORGANIZATION"
};


/**
 * Allowed values for the <code>permissionType</code> property.
 * @enum {String}
 * @readonly
 */
CreateWorkspaceRequest['PermissionTypeEnum'] = {

    /**
     * value: "CUSTOMER_MANAGED"
     * @const
     */
    "CUSTOMER_MANAGED": "CUSTOMER_MANAGED",

    /**
     * value: "SERVICE_MANAGED"
     * @const
     */
    "SERVICE_MANAGED": "SERVICE_MANAGED"
};



export default CreateWorkspaceRequest;

