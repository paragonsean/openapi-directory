# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_instruction import UpdateInstruction
from openapi_server import util


class UpdatePermissionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, update_instruction_batch: List[UpdateInstruction]=None):
        """UpdatePermissionsRequest - a model defined in OpenAPI

        :param update_instruction_batch: The update_instruction_batch of this UpdatePermissionsRequest.
        """
        self.openapi_types = {
            'update_instruction_batch': List[UpdateInstruction]
        }

        self.attribute_map = {
            'update_instruction_batch': 'updateInstructionBatch'
        }

        self._update_instruction_batch = update_instruction_batch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePermissionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePermissions_request of this UpdatePermissionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def update_instruction_batch(self):
        """Gets the update_instruction_batch of this UpdatePermissionsRequest.

        An array of structures that contain the permission updates to make.

        :return: The update_instruction_batch of this UpdatePermissionsRequest.
        :rtype: List[UpdateInstruction]
        """
        return self._update_instruction_batch

    @update_instruction_batch.setter
    def update_instruction_batch(self, update_instruction_batch):
        """Sets the update_instruction_batch of this UpdatePermissionsRequest.

        An array of structures that contain the permission updates to make.

        :param update_instruction_batch: The update_instruction_batch of this UpdatePermissionsRequest.
        :type update_instruction_batch: List[UpdateInstruction]
        """
        if update_instruction_batch is None:
            raise ValueError("Invalid value for `update_instruction_batch`, must not be `None`")
        if update_instruction_batch is not None and len(update_instruction_batch) > 20:
            raise ValueError("Invalid value for `update_instruction_batch`, number of items must be less than or equal to `20`")
        if update_instruction_batch is not None and len(update_instruction_batch) < 0:
            raise ValueError("Invalid value for `update_instruction_batch`, number of items must be greater than or equal to `0`")

        self._update_instruction_batch = update_instruction_batch
