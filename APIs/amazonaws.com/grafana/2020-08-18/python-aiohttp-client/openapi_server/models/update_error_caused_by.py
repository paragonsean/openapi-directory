# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.role import Role
from openapi_server.models.update_action import UpdateAction
from openapi_server import util


class UpdateErrorCausedBy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: UpdateAction=None, role: Role=None, users: List=None):
        """UpdateErrorCausedBy - a model defined in OpenAPI

        :param action: The action of this UpdateErrorCausedBy.
        :param role: The role of this UpdateErrorCausedBy.
        :param users: The users of this UpdateErrorCausedBy.
        """
        self.openapi_types = {
            'action': UpdateAction,
            'role': Role,
            'users': List
        }

        self.attribute_map = {
            'action': 'action',
            'role': 'role',
            'users': 'users'
        }

        self._action = action
        self._role = role
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateErrorCausedBy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateError_causedBy of this UpdateErrorCausedBy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this UpdateErrorCausedBy.


        :return: The action of this UpdateErrorCausedBy.
        :rtype: UpdateAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UpdateErrorCausedBy.


        :param action: The action of this UpdateErrorCausedBy.
        :type action: UpdateAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def role(self):
        """Gets the role of this UpdateErrorCausedBy.


        :return: The role of this UpdateErrorCausedBy.
        :rtype: Role
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UpdateErrorCausedBy.


        :param role: The role of this UpdateErrorCausedBy.
        :type role: Role
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def users(self):
        """Gets the users of this UpdateErrorCausedBy.


        :return: The users of this UpdateErrorCausedBy.
        :rtype: List
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this UpdateErrorCausedBy.


        :param users: The users of this UpdateErrorCausedBy.
        :type users: List
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users
