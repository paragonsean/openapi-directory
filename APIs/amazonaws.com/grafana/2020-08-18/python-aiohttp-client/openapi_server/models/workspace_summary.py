# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workspace_status import WorkspaceStatus
from openapi_server.models.workspace_summary_authentication import WorkspaceSummaryAuthentication
from openapi_server import util


class WorkspaceSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: WorkspaceSummaryAuthentication=None, created: datetime=None, description: str=None, endpoint: str=None, grafana_version: str=None, id: str=None, modified: datetime=None, name: str=None, notification_destinations: List=None, status: WorkspaceStatus=None, tags: Dict=None):
        """WorkspaceSummary - a model defined in OpenAPI

        :param authentication: The authentication of this WorkspaceSummary.
        :param created: The created of this WorkspaceSummary.
        :param description: The description of this WorkspaceSummary.
        :param endpoint: The endpoint of this WorkspaceSummary.
        :param grafana_version: The grafana_version of this WorkspaceSummary.
        :param id: The id of this WorkspaceSummary.
        :param modified: The modified of this WorkspaceSummary.
        :param name: The name of this WorkspaceSummary.
        :param notification_destinations: The notification_destinations of this WorkspaceSummary.
        :param status: The status of this WorkspaceSummary.
        :param tags: The tags of this WorkspaceSummary.
        """
        self.openapi_types = {
            'authentication': WorkspaceSummaryAuthentication,
            'created': datetime,
            'description': str,
            'endpoint': str,
            'grafana_version': str,
            'id': str,
            'modified': datetime,
            'name': str,
            'notification_destinations': List,
            'status': WorkspaceStatus,
            'tags': Dict
        }

        self.attribute_map = {
            'authentication': 'authentication',
            'created': 'created',
            'description': 'description',
            'endpoint': 'endpoint',
            'grafana_version': 'grafanaVersion',
            'id': 'id',
            'modified': 'modified',
            'name': 'name',
            'notification_destinations': 'notificationDestinations',
            'status': 'status',
            'tags': 'tags'
        }

        self._authentication = authentication
        self._created = created
        self._description = description
        self._endpoint = endpoint
        self._grafana_version = grafana_version
        self._id = id
        self._modified = modified
        self._name = name
        self._notification_destinations = notification_destinations
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceSummary of this WorkspaceSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this WorkspaceSummary.


        :return: The authentication of this WorkspaceSummary.
        :rtype: WorkspaceSummaryAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this WorkspaceSummary.


        :param authentication: The authentication of this WorkspaceSummary.
        :type authentication: WorkspaceSummaryAuthentication
        """
        if authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")

        self._authentication = authentication

    @property
    def created(self):
        """Gets the created of this WorkspaceSummary.


        :return: The created of this WorkspaceSummary.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WorkspaceSummary.


        :param created: The created of this WorkspaceSummary.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def description(self):
        """Gets the description of this WorkspaceSummary.


        :return: The description of this WorkspaceSummary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkspaceSummary.


        :param description: The description of this WorkspaceSummary.
        :type description: str
        """

        self._description = description

    @property
    def endpoint(self):
        """Gets the endpoint of this WorkspaceSummary.


        :return: The endpoint of this WorkspaceSummary.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this WorkspaceSummary.


        :param endpoint: The endpoint of this WorkspaceSummary.
        :type endpoint: str
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")

        self._endpoint = endpoint

    @property
    def grafana_version(self):
        """Gets the grafana_version of this WorkspaceSummary.


        :return: The grafana_version of this WorkspaceSummary.
        :rtype: str
        """
        return self._grafana_version

    @grafana_version.setter
    def grafana_version(self, grafana_version):
        """Sets the grafana_version of this WorkspaceSummary.


        :param grafana_version: The grafana_version of this WorkspaceSummary.
        :type grafana_version: str
        """
        if grafana_version is None:
            raise ValueError("Invalid value for `grafana_version`, must not be `None`")

        self._grafana_version = grafana_version

    @property
    def id(self):
        """Gets the id of this WorkspaceSummary.


        :return: The id of this WorkspaceSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkspaceSummary.


        :param id: The id of this WorkspaceSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this WorkspaceSummary.


        :return: The modified of this WorkspaceSummary.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this WorkspaceSummary.


        :param modified: The modified of this WorkspaceSummary.
        :type modified: datetime
        """
        if modified is None:
            raise ValueError("Invalid value for `modified`, must not be `None`")

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this WorkspaceSummary.


        :return: The name of this WorkspaceSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkspaceSummary.


        :param name: The name of this WorkspaceSummary.
        :type name: str
        """

        self._name = name

    @property
    def notification_destinations(self):
        """Gets the notification_destinations of this WorkspaceSummary.


        :return: The notification_destinations of this WorkspaceSummary.
        :rtype: List
        """
        return self._notification_destinations

    @notification_destinations.setter
    def notification_destinations(self, notification_destinations):
        """Sets the notification_destinations of this WorkspaceSummary.


        :param notification_destinations: The notification_destinations of this WorkspaceSummary.
        :type notification_destinations: List
        """

        self._notification_destinations = notification_destinations

    @property
    def status(self):
        """Gets the status of this WorkspaceSummary.


        :return: The status of this WorkspaceSummary.
        :rtype: WorkspaceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkspaceSummary.


        :param status: The status of this WorkspaceSummary.
        :type status: WorkspaceStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this WorkspaceSummary.


        :return: The tags of this WorkspaceSummary.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WorkspaceSummary.


        :param tags: The tags of this WorkspaceSummary.
        :type tags: Dict
        """

        self._tags = tags
