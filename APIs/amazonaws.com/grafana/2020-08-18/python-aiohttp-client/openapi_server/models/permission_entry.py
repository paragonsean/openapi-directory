# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permission_entry_user import PermissionEntryUser
from openapi_server.models.role import Role
from openapi_server import util


class PermissionEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role: Role=None, user: PermissionEntryUser=None):
        """PermissionEntry - a model defined in OpenAPI

        :param role: The role of this PermissionEntry.
        :param user: The user of this PermissionEntry.
        """
        self.openapi_types = {
            'role': Role,
            'user': PermissionEntryUser
        }

        self.attribute_map = {
            'role': 'role',
            'user': 'user'
        }

        self._role = role
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PermissionEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PermissionEntry of this PermissionEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role(self):
        """Gets the role of this PermissionEntry.


        :return: The role of this PermissionEntry.
        :rtype: Role
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PermissionEntry.


        :param role: The role of this PermissionEntry.
        :type role: Role
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def user(self):
        """Gets the user of this PermissionEntry.


        :return: The user of this PermissionEntry.
        :rtype: PermissionEntryUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PermissionEntry.


        :param user: The user of this PermissionEntry.
        :type user: PermissionEntryUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
