# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.saml_authentication_configuration import SamlAuthenticationConfiguration
from openapi_server.models.saml_configuration_status import SamlConfigurationStatus
from openapi_server import util


class AuthenticationDescriptionSaml(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: SamlAuthenticationConfiguration=None, status: SamlConfigurationStatus=None):
        """AuthenticationDescriptionSaml - a model defined in OpenAPI

        :param configuration: The configuration of this AuthenticationDescriptionSaml.
        :param status: The status of this AuthenticationDescriptionSaml.
        """
        self.openapi_types = {
            'configuration': SamlAuthenticationConfiguration,
            'status': SamlConfigurationStatus
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'status': 'status'
        }

        self._configuration = configuration
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationDescriptionSaml':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticationDescription_saml of this AuthenticationDescriptionSaml.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this AuthenticationDescriptionSaml.


        :return: The configuration of this AuthenticationDescriptionSaml.
        :rtype: SamlAuthenticationConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this AuthenticationDescriptionSaml.


        :param configuration: The configuration of this AuthenticationDescriptionSaml.
        :type configuration: SamlAuthenticationConfiguration
        """

        self._configuration = configuration

    @property
    def status(self):
        """Gets the status of this AuthenticationDescriptionSaml.


        :return: The status of this AuthenticationDescriptionSaml.
        :rtype: SamlConfigurationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AuthenticationDescriptionSaml.


        :param status: The status of this AuthenticationDescriptionSaml.
        :type status: SamlConfigurationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
