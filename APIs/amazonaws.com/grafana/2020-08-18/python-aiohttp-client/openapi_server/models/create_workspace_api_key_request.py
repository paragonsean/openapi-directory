# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateWorkspaceApiKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_name: str=None, key_role: str=None, seconds_to_live: int=None):
        """CreateWorkspaceApiKeyRequest - a model defined in OpenAPI

        :param key_name: The key_name of this CreateWorkspaceApiKeyRequest.
        :param key_role: The key_role of this CreateWorkspaceApiKeyRequest.
        :param seconds_to_live: The seconds_to_live of this CreateWorkspaceApiKeyRequest.
        """
        self.openapi_types = {
            'key_name': str,
            'key_role': str,
            'seconds_to_live': int
        }

        self.attribute_map = {
            'key_name': 'keyName',
            'key_role': 'keyRole',
            'seconds_to_live': 'secondsToLive'
        }

        self._key_name = key_name
        self._key_role = key_role
        self._seconds_to_live = seconds_to_live

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorkspaceApiKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWorkspaceApiKey_request of this CreateWorkspaceApiKeyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_name(self):
        """Gets the key_name of this CreateWorkspaceApiKeyRequest.

        Specifies the name of the key. Keynames must be unique to the workspace.

        :return: The key_name of this CreateWorkspaceApiKeyRequest.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this CreateWorkspaceApiKeyRequest.

        Specifies the name of the key. Keynames must be unique to the workspace.

        :param key_name: The key_name of this CreateWorkspaceApiKeyRequest.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")
        if key_name is not None and len(key_name) > 100:
            raise ValueError("Invalid value for `key_name`, length must be less than or equal to `100`")
        if key_name is not None and len(key_name) < 1:
            raise ValueError("Invalid value for `key_name`, length must be greater than or equal to `1`")

        self._key_name = key_name

    @property
    def key_role(self):
        """Gets the key_role of this CreateWorkspaceApiKeyRequest.

        <p>Specifies the permission level of the key.</p> <p> Valid values: <code>VIEWER</code>|<code>EDITOR</code>|<code>ADMIN</code> </p>

        :return: The key_role of this CreateWorkspaceApiKeyRequest.
        :rtype: str
        """
        return self._key_role

    @key_role.setter
    def key_role(self, key_role):
        """Sets the key_role of this CreateWorkspaceApiKeyRequest.

        <p>Specifies the permission level of the key.</p> <p> Valid values: <code>VIEWER</code>|<code>EDITOR</code>|<code>ADMIN</code> </p>

        :param key_role: The key_role of this CreateWorkspaceApiKeyRequest.
        :type key_role: str
        """
        if key_role is None:
            raise ValueError("Invalid value for `key_role`, must not be `None`")

        self._key_role = key_role

    @property
    def seconds_to_live(self):
        """Gets the seconds_to_live of this CreateWorkspaceApiKeyRequest.

        Specifies the time in seconds until the key expires. Keys can be valid for up to 30 days.

        :return: The seconds_to_live of this CreateWorkspaceApiKeyRequest.
        :rtype: int
        """
        return self._seconds_to_live

    @seconds_to_live.setter
    def seconds_to_live(self, seconds_to_live):
        """Sets the seconds_to_live of this CreateWorkspaceApiKeyRequest.

        Specifies the time in seconds until the key expires. Keys can be valid for up to 30 days.

        :param seconds_to_live: The seconds_to_live of this CreateWorkspaceApiKeyRequest.
        :type seconds_to_live: int
        """
        if seconds_to_live is None:
            raise ValueError("Invalid value for `seconds_to_live`, must not be `None`")
        if seconds_to_live is not None and seconds_to_live > 2592000:
            raise ValueError("Invalid value for `seconds_to_live`, must be a value less than or equal to `2592000`")
        if seconds_to_live is not None and seconds_to_live < 1:
            raise ValueError("Invalid value for `seconds_to_live`, must be a value greater than or equal to `1`")

        self._seconds_to_live = seconds_to_live
