# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_provider_types import AuthenticationProviderTypes
from openapi_server.models.create_workspace_request_network_access_control import CreateWorkspaceRequestNetworkAccessControl
from openapi_server.models.create_workspace_request_vpc_configuration import CreateWorkspaceRequestVpcConfiguration
from openapi_server.models.data_source_type import DataSourceType
from openapi_server.models.notification_destination_type import NotificationDestinationType
import re
from openapi_server import util


class CreateWorkspaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_access_type: str=None, authentication_providers: List[AuthenticationProviderTypes]=None, client_token: str=None, configuration: str=None, grafana_version: str=None, network_access_control: CreateWorkspaceRequestNetworkAccessControl=None, organization_role_name: str=None, permission_type: str=None, stack_set_name: str=None, tags: Dict[str, str]=None, vpc_configuration: CreateWorkspaceRequestVpcConfiguration=None, workspace_data_sources: List[DataSourceType]=None, workspace_description: str=None, workspace_name: str=None, workspace_notification_destinations: List[NotificationDestinationType]=None, workspace_organizational_units: List[str]=None, workspace_role_arn: str=None):
        """CreateWorkspaceRequest - a model defined in OpenAPI

        :param account_access_type: The account_access_type of this CreateWorkspaceRequest.
        :param authentication_providers: The authentication_providers of this CreateWorkspaceRequest.
        :param client_token: The client_token of this CreateWorkspaceRequest.
        :param configuration: The configuration of this CreateWorkspaceRequest.
        :param grafana_version: The grafana_version of this CreateWorkspaceRequest.
        :param network_access_control: The network_access_control of this CreateWorkspaceRequest.
        :param organization_role_name: The organization_role_name of this CreateWorkspaceRequest.
        :param permission_type: The permission_type of this CreateWorkspaceRequest.
        :param stack_set_name: The stack_set_name of this CreateWorkspaceRequest.
        :param tags: The tags of this CreateWorkspaceRequest.
        :param vpc_configuration: The vpc_configuration of this CreateWorkspaceRequest.
        :param workspace_data_sources: The workspace_data_sources of this CreateWorkspaceRequest.
        :param workspace_description: The workspace_description of this CreateWorkspaceRequest.
        :param workspace_name: The workspace_name of this CreateWorkspaceRequest.
        :param workspace_notification_destinations: The workspace_notification_destinations of this CreateWorkspaceRequest.
        :param workspace_organizational_units: The workspace_organizational_units of this CreateWorkspaceRequest.
        :param workspace_role_arn: The workspace_role_arn of this CreateWorkspaceRequest.
        """
        self.openapi_types = {
            'account_access_type': str,
            'authentication_providers': List[AuthenticationProviderTypes],
            'client_token': str,
            'configuration': str,
            'grafana_version': str,
            'network_access_control': CreateWorkspaceRequestNetworkAccessControl,
            'organization_role_name': str,
            'permission_type': str,
            'stack_set_name': str,
            'tags': Dict[str, str],
            'vpc_configuration': CreateWorkspaceRequestVpcConfiguration,
            'workspace_data_sources': List[DataSourceType],
            'workspace_description': str,
            'workspace_name': str,
            'workspace_notification_destinations': List[NotificationDestinationType],
            'workspace_organizational_units': List[str],
            'workspace_role_arn': str
        }

        self.attribute_map = {
            'account_access_type': 'accountAccessType',
            'authentication_providers': 'authenticationProviders',
            'client_token': 'clientToken',
            'configuration': 'configuration',
            'grafana_version': 'grafanaVersion',
            'network_access_control': 'networkAccessControl',
            'organization_role_name': 'organizationRoleName',
            'permission_type': 'permissionType',
            'stack_set_name': 'stackSetName',
            'tags': 'tags',
            'vpc_configuration': 'vpcConfiguration',
            'workspace_data_sources': 'workspaceDataSources',
            'workspace_description': 'workspaceDescription',
            'workspace_name': 'workspaceName',
            'workspace_notification_destinations': 'workspaceNotificationDestinations',
            'workspace_organizational_units': 'workspaceOrganizationalUnits',
            'workspace_role_arn': 'workspaceRoleArn'
        }

        self._account_access_type = account_access_type
        self._authentication_providers = authentication_providers
        self._client_token = client_token
        self._configuration = configuration
        self._grafana_version = grafana_version
        self._network_access_control = network_access_control
        self._organization_role_name = organization_role_name
        self._permission_type = permission_type
        self._stack_set_name = stack_set_name
        self._tags = tags
        self._vpc_configuration = vpc_configuration
        self._workspace_data_sources = workspace_data_sources
        self._workspace_description = workspace_description
        self._workspace_name = workspace_name
        self._workspace_notification_destinations = workspace_notification_destinations
        self._workspace_organizational_units = workspace_organizational_units
        self._workspace_role_arn = workspace_role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorkspaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWorkspace_request of this CreateWorkspaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_access_type(self):
        """Gets the account_access_type of this CreateWorkspaceRequest.

        Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must specify which organizational units the workspace can access in the <code>workspaceOrganizationalUnits</code> parameter.

        :return: The account_access_type of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._account_access_type

    @account_access_type.setter
    def account_access_type(self, account_access_type):
        """Sets the account_access_type of this CreateWorkspaceRequest.

        Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must specify which organizational units the workspace can access in the <code>workspaceOrganizationalUnits</code> parameter.

        :param account_access_type: The account_access_type of this CreateWorkspaceRequest.
        :type account_access_type: str
        """
        allowed_values = ["CURRENT_ACCOUNT", "ORGANIZATION"]  # noqa: E501
        if account_access_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_access_type` ({0}), must be one of {1}"
                .format(account_access_type, allowed_values)
            )

        self._account_access_type = account_access_type

    @property
    def authentication_providers(self):
        """Gets the authentication_providers of this CreateWorkspaceRequest.

        Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html\">User authentication in Amazon Managed Grafana</a>.

        :return: The authentication_providers of this CreateWorkspaceRequest.
        :rtype: List[AuthenticationProviderTypes]
        """
        return self._authentication_providers

    @authentication_providers.setter
    def authentication_providers(self, authentication_providers):
        """Sets the authentication_providers of this CreateWorkspaceRequest.

        Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html\">User authentication in Amazon Managed Grafana</a>.

        :param authentication_providers: The authentication_providers of this CreateWorkspaceRequest.
        :type authentication_providers: List[AuthenticationProviderTypes]
        """
        if authentication_providers is None:
            raise ValueError("Invalid value for `authentication_providers`, must not be `None`")

        self._authentication_providers = authentication_providers

    @property
    def client_token(self):
        """Gets the client_token of this CreateWorkspaceRequest.

        A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.

        :return: The client_token of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateWorkspaceRequest.

        A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.

        :param client_token: The client_token of this CreateWorkspaceRequest.
        :type client_token: str
        """
        if client_token is not None and not re.search(r'^[!-~]{1,64}$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[!-~]{1,64}$/`")

        self._client_token = client_token

    @property
    def configuration(self):
        """Gets the configuration of this CreateWorkspaceRequest.

        The configuration string for the workspace that you create. For more information about the format and configuration options available, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-configure-workspace.html\">Working in your Grafana workspace</a>.

        :return: The configuration of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CreateWorkspaceRequest.

        The configuration string for the workspace that you create. For more information about the format and configuration options available, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-configure-workspace.html\">Working in your Grafana workspace</a>.

        :param configuration: The configuration of this CreateWorkspaceRequest.
        :type configuration: str
        """
        if configuration is not None and len(configuration) > 65536:
            raise ValueError("Invalid value for `configuration`, length must be less than or equal to `65536`")
        if configuration is not None and len(configuration) < 2:
            raise ValueError("Invalid value for `configuration`, length must be greater than or equal to `2`")

        self._configuration = configuration

    @property
    def grafana_version(self):
        """Gets the grafana_version of this CreateWorkspaceRequest.

        <p>Specifies the version of Grafana to support in the new workspace.</p> <p>To get a list of supported version, use the <code>ListVersions</code> operation.</p>

        :return: The grafana_version of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._grafana_version

    @grafana_version.setter
    def grafana_version(self, grafana_version):
        """Sets the grafana_version of this CreateWorkspaceRequest.

        <p>Specifies the version of Grafana to support in the new workspace.</p> <p>To get a list of supported version, use the <code>ListVersions</code> operation.</p>

        :param grafana_version: The grafana_version of this CreateWorkspaceRequest.
        :type grafana_version: str
        """
        if grafana_version is not None and len(grafana_version) > 255:
            raise ValueError("Invalid value for `grafana_version`, length must be less than or equal to `255`")
        if grafana_version is not None and len(grafana_version) < 1:
            raise ValueError("Invalid value for `grafana_version`, length must be greater than or equal to `1`")

        self._grafana_version = grafana_version

    @property
    def network_access_control(self):
        """Gets the network_access_control of this CreateWorkspaceRequest.


        :return: The network_access_control of this CreateWorkspaceRequest.
        :rtype: CreateWorkspaceRequestNetworkAccessControl
        """
        return self._network_access_control

    @network_access_control.setter
    def network_access_control(self, network_access_control):
        """Sets the network_access_control of this CreateWorkspaceRequest.


        :param network_access_control: The network_access_control of this CreateWorkspaceRequest.
        :type network_access_control: CreateWorkspaceRequestNetworkAccessControl
        """

        self._network_access_control = network_access_control

    @property
    def organization_role_name(self):
        """Gets the organization_role_name of this CreateWorkspaceRequest.

        The name of an IAM role that already exists to use with Organizations to access Amazon Web Services data sources and notification channels in other accounts in an organization.

        :return: The organization_role_name of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._organization_role_name

    @organization_role_name.setter
    def organization_role_name(self, organization_role_name):
        """Sets the organization_role_name of this CreateWorkspaceRequest.

        The name of an IAM role that already exists to use with Organizations to access Amazon Web Services data sources and notification channels in other accounts in an organization.

        :param organization_role_name: The organization_role_name of this CreateWorkspaceRequest.
        :type organization_role_name: str
        """
        if organization_role_name is not None and len(organization_role_name) > 2048:
            raise ValueError("Invalid value for `organization_role_name`, length must be less than or equal to `2048`")
        if organization_role_name is not None and len(organization_role_name) < 1:
            raise ValueError("Invalid value for `organization_role_name`, length must be greater than or equal to `1`")

        self._organization_role_name = organization_role_name

    @property
    def permission_type(self):
        """Gets the permission_type of this CreateWorkspaceRequest.

        <p>When creating a workspace through the Amazon Web Services API, CLI or Amazon Web Services CloudFormation, you must manage IAM roles and provision the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p> <p>You must also specify a <code>workspaceRoleArn</code> for a role that you will manage for the workspace to use when accessing those datasources and notification channels.</p> <p>The ability for Amazon Managed Grafana to create and update IAM roles on behalf of the user is supported only in the Amazon Managed Grafana console, where this value may be set to <code>SERVICE_MANAGED</code>.</p> <note> <p>Use only the <code>CUSTOMER_MANAGED</code> permission type when creating a workspace with the API, CLI or Amazon Web Services CloudFormation. </p> </note> <p>For more information, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html\">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a>.</p>

        :return: The permission_type of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._permission_type

    @permission_type.setter
    def permission_type(self, permission_type):
        """Sets the permission_type of this CreateWorkspaceRequest.

        <p>When creating a workspace through the Amazon Web Services API, CLI or Amazon Web Services CloudFormation, you must manage IAM roles and provision the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p> <p>You must also specify a <code>workspaceRoleArn</code> for a role that you will manage for the workspace to use when accessing those datasources and notification channels.</p> <p>The ability for Amazon Managed Grafana to create and update IAM roles on behalf of the user is supported only in the Amazon Managed Grafana console, where this value may be set to <code>SERVICE_MANAGED</code>.</p> <note> <p>Use only the <code>CUSTOMER_MANAGED</code> permission type when creating a workspace with the API, CLI or Amazon Web Services CloudFormation. </p> </note> <p>For more information, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html\">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a>.</p>

        :param permission_type: The permission_type of this CreateWorkspaceRequest.
        :type permission_type: str
        """
        allowed_values = ["CUSTOMER_MANAGED", "SERVICE_MANAGED"]  # noqa: E501
        if permission_type not in allowed_values:
            raise ValueError(
                "Invalid value for `permission_type` ({0}), must be one of {1}"
                .format(permission_type, allowed_values)
            )

        self._permission_type = permission_type

    @property
    def stack_set_name(self):
        """Gets the stack_set_name of this CreateWorkspaceRequest.

        The name of the CloudFormation stack set to use to generate IAM roles to be used for this workspace.

        :return: The stack_set_name of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._stack_set_name

    @stack_set_name.setter
    def stack_set_name(self, stack_set_name):
        """Sets the stack_set_name of this CreateWorkspaceRequest.

        The name of the CloudFormation stack set to use to generate IAM roles to be used for this workspace.

        :param stack_set_name: The stack_set_name of this CreateWorkspaceRequest.
        :type stack_set_name: str
        """

        self._stack_set_name = stack_set_name

    @property
    def tags(self):
        """Gets the tags of this CreateWorkspaceRequest.

        The list of tags associated with the workspace.

        :return: The tags of this CreateWorkspaceRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateWorkspaceRequest.

        The list of tags associated with the workspace.

        :param tags: The tags of this CreateWorkspaceRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def vpc_configuration(self):
        """Gets the vpc_configuration of this CreateWorkspaceRequest.


        :return: The vpc_configuration of this CreateWorkspaceRequest.
        :rtype: CreateWorkspaceRequestVpcConfiguration
        """
        return self._vpc_configuration

    @vpc_configuration.setter
    def vpc_configuration(self, vpc_configuration):
        """Sets the vpc_configuration of this CreateWorkspaceRequest.


        :param vpc_configuration: The vpc_configuration of this CreateWorkspaceRequest.
        :type vpc_configuration: CreateWorkspaceRequestVpcConfiguration
        """

        self._vpc_configuration = vpc_configuration

    @property
    def workspace_data_sources(self):
        """Gets the workspace_data_sources of this CreateWorkspaceRequest.

        This parameter is for internal use only, and should not be used.

        :return: The workspace_data_sources of this CreateWorkspaceRequest.
        :rtype: List[DataSourceType]
        """
        return self._workspace_data_sources

    @workspace_data_sources.setter
    def workspace_data_sources(self, workspace_data_sources):
        """Sets the workspace_data_sources of this CreateWorkspaceRequest.

        This parameter is for internal use only, and should not be used.

        :param workspace_data_sources: The workspace_data_sources of this CreateWorkspaceRequest.
        :type workspace_data_sources: List[DataSourceType]
        """

        self._workspace_data_sources = workspace_data_sources

    @property
    def workspace_description(self):
        """Gets the workspace_description of this CreateWorkspaceRequest.

        <p>A description for the workspace. This is used only to help you identify this workspace.</p> <p>Pattern: <code>^[\\\\p{L}\\\\p{Z}\\\\p{N}\\\\p{P}]{0,2048}$</code> </p>

        :return: The workspace_description of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._workspace_description

    @workspace_description.setter
    def workspace_description(self, workspace_description):
        """Sets the workspace_description of this CreateWorkspaceRequest.

        <p>A description for the workspace. This is used only to help you identify this workspace.</p> <p>Pattern: <code>^[\\\\p{L}\\\\p{Z}\\\\p{N}\\\\p{P}]{0,2048}$</code> </p>

        :param workspace_description: The workspace_description of this CreateWorkspaceRequest.
        :type workspace_description: str
        """
        if workspace_description is not None and len(workspace_description) > 2048:
            raise ValueError("Invalid value for `workspace_description`, length must be less than or equal to `2048`")
        if workspace_description is not None and len(workspace_description) < 0:
            raise ValueError("Invalid value for `workspace_description`, length must be greater than or equal to `0`")

        self._workspace_description = workspace_description

    @property
    def workspace_name(self):
        """Gets the workspace_name of this CreateWorkspaceRequest.

        The name for the workspace. It does not have to be unique.

        :return: The workspace_name of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._workspace_name

    @workspace_name.setter
    def workspace_name(self, workspace_name):
        """Sets the workspace_name of this CreateWorkspaceRequest.

        The name for the workspace. It does not have to be unique.

        :param workspace_name: The workspace_name of this CreateWorkspaceRequest.
        :type workspace_name: str
        """
        if workspace_name is not None and not re.search(r'^[a-zA-Z0-9-._~]{1,255}$', workspace_name):
            raise ValueError("Invalid value for `workspace_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-._~]{1,255}$/`")

        self._workspace_name = workspace_name

    @property
    def workspace_notification_destinations(self):
        """Gets the workspace_notification_destinations of this CreateWorkspaceRequest.

        Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to use these channels.

        :return: The workspace_notification_destinations of this CreateWorkspaceRequest.
        :rtype: List[NotificationDestinationType]
        """
        return self._workspace_notification_destinations

    @workspace_notification_destinations.setter
    def workspace_notification_destinations(self, workspace_notification_destinations):
        """Sets the workspace_notification_destinations of this CreateWorkspaceRequest.

        Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to use these channels.

        :param workspace_notification_destinations: The workspace_notification_destinations of this CreateWorkspaceRequest.
        :type workspace_notification_destinations: List[NotificationDestinationType]
        """

        self._workspace_notification_destinations = workspace_notification_destinations

    @property
    def workspace_organizational_units(self):
        """Gets the workspace_organizational_units of this CreateWorkspaceRequest.

        Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.

        :return: The workspace_organizational_units of this CreateWorkspaceRequest.
        :rtype: List[str]
        """
        return self._workspace_organizational_units

    @workspace_organizational_units.setter
    def workspace_organizational_units(self, workspace_organizational_units):
        """Sets the workspace_organizational_units of this CreateWorkspaceRequest.

        Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.

        :param workspace_organizational_units: The workspace_organizational_units of this CreateWorkspaceRequest.
        :type workspace_organizational_units: List[str]
        """

        self._workspace_organizational_units = workspace_organizational_units

    @property
    def workspace_role_arn(self):
        """Gets the workspace_role_arn of this CreateWorkspaceRequest.

        Specified the IAM role that grants permissions to the Amazon Web Services resources that the workspace will view data from, including both data sources and notification channels. You are responsible for managing the permissions for this role as new data sources or notification channels are added. 

        :return: The workspace_role_arn of this CreateWorkspaceRequest.
        :rtype: str
        """
        return self._workspace_role_arn

    @workspace_role_arn.setter
    def workspace_role_arn(self, workspace_role_arn):
        """Sets the workspace_role_arn of this CreateWorkspaceRequest.

        Specified the IAM role that grants permissions to the Amazon Web Services resources that the workspace will view data from, including both data sources and notification channels. You are responsible for managing the permissions for this role as new data sources or notification channels are added. 

        :param workspace_role_arn: The workspace_role_arn of this CreateWorkspaceRequest.
        :type workspace_role_arn: str
        """
        if workspace_role_arn is not None and len(workspace_role_arn) > 2048:
            raise ValueError("Invalid value for `workspace_role_arn`, length must be less than or equal to `2048`")
        if workspace_role_arn is not None and len(workspace_role_arn) < 1:
            raise ValueError("Invalid value for `workspace_role_arn`, length must be greater than or equal to `1`")

        self._workspace_role_arn = workspace_role_arn
