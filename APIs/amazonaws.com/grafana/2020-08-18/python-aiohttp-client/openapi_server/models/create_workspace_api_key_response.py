# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateWorkspaceApiKeyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, key_name: str=None, workspace_id: str=None):
        """CreateWorkspaceApiKeyResponse - a model defined in OpenAPI

        :param key: The key of this CreateWorkspaceApiKeyResponse.
        :param key_name: The key_name of this CreateWorkspaceApiKeyResponse.
        :param workspace_id: The workspace_id of this CreateWorkspaceApiKeyResponse.
        """
        self.openapi_types = {
            'key': str,
            'key_name': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'key': 'key',
            'key_name': 'keyName',
            'workspace_id': 'workspaceId'
        }

        self._key = key
        self._key_name = key_name
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorkspaceApiKeyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWorkspaceApiKeyResponse of this CreateWorkspaceApiKeyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this CreateWorkspaceApiKeyResponse.


        :return: The key of this CreateWorkspaceApiKeyResponse.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CreateWorkspaceApiKeyResponse.


        :param key: The key of this CreateWorkspaceApiKeyResponse.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def key_name(self):
        """Gets the key_name of this CreateWorkspaceApiKeyResponse.


        :return: The key_name of this CreateWorkspaceApiKeyResponse.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this CreateWorkspaceApiKeyResponse.


        :param key_name: The key_name of this CreateWorkspaceApiKeyResponse.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")

        self._key_name = key_name

    @property
    def workspace_id(self):
        """Gets the workspace_id of this CreateWorkspaceApiKeyResponse.


        :return: The workspace_id of this CreateWorkspaceApiKeyResponse.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this CreateWorkspaceApiKeyResponse.


        :param workspace_id: The workspace_id of this CreateWorkspaceApiKeyResponse.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id
