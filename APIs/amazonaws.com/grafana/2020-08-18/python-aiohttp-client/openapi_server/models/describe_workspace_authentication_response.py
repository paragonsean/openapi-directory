# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_workspace_authentication_response_authentication import DescribeWorkspaceAuthenticationResponseAuthentication
from openapi_server import util


class DescribeWorkspaceAuthenticationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: DescribeWorkspaceAuthenticationResponseAuthentication=None):
        """DescribeWorkspaceAuthenticationResponse - a model defined in OpenAPI

        :param authentication: The authentication of this DescribeWorkspaceAuthenticationResponse.
        """
        self.openapi_types = {
            'authentication': DescribeWorkspaceAuthenticationResponseAuthentication
        }

        self.attribute_map = {
            'authentication': 'authentication'
        }

        self._authentication = authentication

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeWorkspaceAuthenticationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeWorkspaceAuthenticationResponse of this DescribeWorkspaceAuthenticationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this DescribeWorkspaceAuthenticationResponse.


        :return: The authentication of this DescribeWorkspaceAuthenticationResponse.
        :rtype: DescribeWorkspaceAuthenticationResponseAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this DescribeWorkspaceAuthenticationResponse.


        :param authentication: The authentication of this DescribeWorkspaceAuthenticationResponse.
        :type authentication: DescribeWorkspaceAuthenticationResponseAuthentication
        """
        if authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")

        self._authentication = authentication
