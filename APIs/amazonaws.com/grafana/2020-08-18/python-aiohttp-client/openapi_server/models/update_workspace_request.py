# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_workspace_request_network_access_control import CreateWorkspaceRequestNetworkAccessControl
from openapi_server.models.create_workspace_request_vpc_configuration import CreateWorkspaceRequestVpcConfiguration
from openapi_server.models.data_source_type import DataSourceType
from openapi_server.models.notification_destination_type import NotificationDestinationType
import re
from openapi_server import util


class UpdateWorkspaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_access_type: str=None, network_access_control: CreateWorkspaceRequestNetworkAccessControl=None, organization_role_name: str=None, permission_type: str=None, remove_network_access_configuration: bool=None, remove_vpc_configuration: bool=None, stack_set_name: str=None, vpc_configuration: CreateWorkspaceRequestVpcConfiguration=None, workspace_data_sources: List[DataSourceType]=None, workspace_description: str=None, workspace_name: str=None, workspace_notification_destinations: List[NotificationDestinationType]=None, workspace_organizational_units: List[str]=None, workspace_role_arn: str=None):
        """UpdateWorkspaceRequest - a model defined in OpenAPI

        :param account_access_type: The account_access_type of this UpdateWorkspaceRequest.
        :param network_access_control: The network_access_control of this UpdateWorkspaceRequest.
        :param organization_role_name: The organization_role_name of this UpdateWorkspaceRequest.
        :param permission_type: The permission_type of this UpdateWorkspaceRequest.
        :param remove_network_access_configuration: The remove_network_access_configuration of this UpdateWorkspaceRequest.
        :param remove_vpc_configuration: The remove_vpc_configuration of this UpdateWorkspaceRequest.
        :param stack_set_name: The stack_set_name of this UpdateWorkspaceRequest.
        :param vpc_configuration: The vpc_configuration of this UpdateWorkspaceRequest.
        :param workspace_data_sources: The workspace_data_sources of this UpdateWorkspaceRequest.
        :param workspace_description: The workspace_description of this UpdateWorkspaceRequest.
        :param workspace_name: The workspace_name of this UpdateWorkspaceRequest.
        :param workspace_notification_destinations: The workspace_notification_destinations of this UpdateWorkspaceRequest.
        :param workspace_organizational_units: The workspace_organizational_units of this UpdateWorkspaceRequest.
        :param workspace_role_arn: The workspace_role_arn of this UpdateWorkspaceRequest.
        """
        self.openapi_types = {
            'account_access_type': str,
            'network_access_control': CreateWorkspaceRequestNetworkAccessControl,
            'organization_role_name': str,
            'permission_type': str,
            'remove_network_access_configuration': bool,
            'remove_vpc_configuration': bool,
            'stack_set_name': str,
            'vpc_configuration': CreateWorkspaceRequestVpcConfiguration,
            'workspace_data_sources': List[DataSourceType],
            'workspace_description': str,
            'workspace_name': str,
            'workspace_notification_destinations': List[NotificationDestinationType],
            'workspace_organizational_units': List[str],
            'workspace_role_arn': str
        }

        self.attribute_map = {
            'account_access_type': 'accountAccessType',
            'network_access_control': 'networkAccessControl',
            'organization_role_name': 'organizationRoleName',
            'permission_type': 'permissionType',
            'remove_network_access_configuration': 'removeNetworkAccessConfiguration',
            'remove_vpc_configuration': 'removeVpcConfiguration',
            'stack_set_name': 'stackSetName',
            'vpc_configuration': 'vpcConfiguration',
            'workspace_data_sources': 'workspaceDataSources',
            'workspace_description': 'workspaceDescription',
            'workspace_name': 'workspaceName',
            'workspace_notification_destinations': 'workspaceNotificationDestinations',
            'workspace_organizational_units': 'workspaceOrganizationalUnits',
            'workspace_role_arn': 'workspaceRoleArn'
        }

        self._account_access_type = account_access_type
        self._network_access_control = network_access_control
        self._organization_role_name = organization_role_name
        self._permission_type = permission_type
        self._remove_network_access_configuration = remove_network_access_configuration
        self._remove_vpc_configuration = remove_vpc_configuration
        self._stack_set_name = stack_set_name
        self._vpc_configuration = vpc_configuration
        self._workspace_data_sources = workspace_data_sources
        self._workspace_description = workspace_description
        self._workspace_name = workspace_name
        self._workspace_notification_destinations = workspace_notification_destinations
        self._workspace_organizational_units = workspace_organizational_units
        self._workspace_role_arn = workspace_role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateWorkspaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateWorkspace_request of this UpdateWorkspaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_access_type(self):
        """Gets the account_access_type of this UpdateWorkspaceRequest.

        Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must specify which organizational units the workspace can access in the <code>workspaceOrganizationalUnits</code> parameter.

        :return: The account_access_type of this UpdateWorkspaceRequest.
        :rtype: str
        """
        return self._account_access_type

    @account_access_type.setter
    def account_access_type(self, account_access_type):
        """Sets the account_access_type of this UpdateWorkspaceRequest.

        Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must specify which organizational units the workspace can access in the <code>workspaceOrganizationalUnits</code> parameter.

        :param account_access_type: The account_access_type of this UpdateWorkspaceRequest.
        :type account_access_type: str
        """
        allowed_values = ["CURRENT_ACCOUNT", "ORGANIZATION"]  # noqa: E501
        if account_access_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_access_type` ({0}), must be one of {1}"
                .format(account_access_type, allowed_values)
            )

        self._account_access_type = account_access_type

    @property
    def network_access_control(self):
        """Gets the network_access_control of this UpdateWorkspaceRequest.


        :return: The network_access_control of this UpdateWorkspaceRequest.
        :rtype: CreateWorkspaceRequestNetworkAccessControl
        """
        return self._network_access_control

    @network_access_control.setter
    def network_access_control(self, network_access_control):
        """Sets the network_access_control of this UpdateWorkspaceRequest.


        :param network_access_control: The network_access_control of this UpdateWorkspaceRequest.
        :type network_access_control: CreateWorkspaceRequestNetworkAccessControl
        """

        self._network_access_control = network_access_control

    @property
    def organization_role_name(self):
        """Gets the organization_role_name of this UpdateWorkspaceRequest.

        The name of an IAM role that already exists to use to access resources through Organizations. This can only be used with a workspace that has the <code>permissionType</code> set to <code>CUSTOMER_MANAGED</code>.

        :return: The organization_role_name of this UpdateWorkspaceRequest.
        :rtype: str
        """
        return self._organization_role_name

    @organization_role_name.setter
    def organization_role_name(self, organization_role_name):
        """Sets the organization_role_name of this UpdateWorkspaceRequest.

        The name of an IAM role that already exists to use to access resources through Organizations. This can only be used with a workspace that has the <code>permissionType</code> set to <code>CUSTOMER_MANAGED</code>.

        :param organization_role_name: The organization_role_name of this UpdateWorkspaceRequest.
        :type organization_role_name: str
        """
        if organization_role_name is not None and len(organization_role_name) > 2048:
            raise ValueError("Invalid value for `organization_role_name`, length must be less than or equal to `2048`")
        if organization_role_name is not None and len(organization_role_name) < 1:
            raise ValueError("Invalid value for `organization_role_name`, length must be greater than or equal to `1`")

        self._organization_role_name = organization_role_name

    @property
    def permission_type(self):
        """Gets the permission_type of this UpdateWorkspaceRequest.

        <p>Use this parameter if you want to change a workspace from <code>SERVICE_MANAGED</code> to <code>CUSTOMER_MANAGED</code>. This allows you to manage the permissions that the workspace uses to access datasources and notification channels. If the workspace is in a member Amazon Web Services account of an organization, and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services accounts in the organization, you must choose <code>CUSTOMER_MANAGED</code>.</p> <p>If you specify this as <code>CUSTOMER_MANAGED</code>, you must also specify a <code>workspaceRoleArn</code> that the workspace will use for accessing Amazon Web Services resources.</p> <p>For more information on the role and permissions needed, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html\">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a> </p> <note> <p>Do not use this to convert a <code>CUSTOMER_MANAGED</code> workspace to <code>SERVICE_MANAGED</code>. Do not include this parameter if you want to leave the workspace as <code>SERVICE_MANAGED</code>.</p> <p>You can convert a <code>CUSTOMER_MANAGED</code> workspace to <code>SERVICE_MANAGED</code> using the Amazon Managed Grafana console. For more information, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html\">Managing permissions for data sources and notification channels</a>.</p> </note>

        :return: The permission_type of this UpdateWorkspaceRequest.
        :rtype: str
        """
        return self._permission_type

    @permission_type.setter
    def permission_type(self, permission_type):
        """Sets the permission_type of this UpdateWorkspaceRequest.

        <p>Use this parameter if you want to change a workspace from <code>SERVICE_MANAGED</code> to <code>CUSTOMER_MANAGED</code>. This allows you to manage the permissions that the workspace uses to access datasources and notification channels. If the workspace is in a member Amazon Web Services account of an organization, and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services accounts in the organization, you must choose <code>CUSTOMER_MANAGED</code>.</p> <p>If you specify this as <code>CUSTOMER_MANAGED</code>, you must also specify a <code>workspaceRoleArn</code> that the workspace will use for accessing Amazon Web Services resources.</p> <p>For more information on the role and permissions needed, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html\">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a> </p> <note> <p>Do not use this to convert a <code>CUSTOMER_MANAGED</code> workspace to <code>SERVICE_MANAGED</code>. Do not include this parameter if you want to leave the workspace as <code>SERVICE_MANAGED</code>.</p> <p>You can convert a <code>CUSTOMER_MANAGED</code> workspace to <code>SERVICE_MANAGED</code> using the Amazon Managed Grafana console. For more information, see <a href=\"https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html\">Managing permissions for data sources and notification channels</a>.</p> </note>

        :param permission_type: The permission_type of this UpdateWorkspaceRequest.
        :type permission_type: str
        """
        allowed_values = ["CUSTOMER_MANAGED", "SERVICE_MANAGED"]  # noqa: E501
        if permission_type not in allowed_values:
            raise ValueError(
                "Invalid value for `permission_type` ({0}), must be one of {1}"
                .format(permission_type, allowed_values)
            )

        self._permission_type = permission_type

    @property
    def remove_network_access_configuration(self):
        """Gets the remove_network_access_configuration of this UpdateWorkspaceRequest.

        <p>Whether to remove the network access configuration from the workspace.</p> <p>Setting this to <code>true</code> and providing a <code>networkAccessControl</code> to set will return an error.</p> <p>If you remove this configuration by setting this to <code>true</code>, then all IP addresses and VPC endpoints will be allowed. Standard Grafana authentication and authorization will still be required.</p>

        :return: The remove_network_access_configuration of this UpdateWorkspaceRequest.
        :rtype: bool
        """
        return self._remove_network_access_configuration

    @remove_network_access_configuration.setter
    def remove_network_access_configuration(self, remove_network_access_configuration):
        """Sets the remove_network_access_configuration of this UpdateWorkspaceRequest.

        <p>Whether to remove the network access configuration from the workspace.</p> <p>Setting this to <code>true</code> and providing a <code>networkAccessControl</code> to set will return an error.</p> <p>If you remove this configuration by setting this to <code>true</code>, then all IP addresses and VPC endpoints will be allowed. Standard Grafana authentication and authorization will still be required.</p>

        :param remove_network_access_configuration: The remove_network_access_configuration of this UpdateWorkspaceRequest.
        :type remove_network_access_configuration: bool
        """

        self._remove_network_access_configuration = remove_network_access_configuration

    @property
    def remove_vpc_configuration(self):
        """Gets the remove_vpc_configuration of this UpdateWorkspaceRequest.

        <p>Whether to remove the VPC configuration from the workspace.</p> <p>Setting this to <code>true</code> and providing a <code>vpcConfiguration</code> to set will return an error.</p>

        :return: The remove_vpc_configuration of this UpdateWorkspaceRequest.
        :rtype: bool
        """
        return self._remove_vpc_configuration

    @remove_vpc_configuration.setter
    def remove_vpc_configuration(self, remove_vpc_configuration):
        """Sets the remove_vpc_configuration of this UpdateWorkspaceRequest.

        <p>Whether to remove the VPC configuration from the workspace.</p> <p>Setting this to <code>true</code> and providing a <code>vpcConfiguration</code> to set will return an error.</p>

        :param remove_vpc_configuration: The remove_vpc_configuration of this UpdateWorkspaceRequest.
        :type remove_vpc_configuration: bool
        """

        self._remove_vpc_configuration = remove_vpc_configuration

    @property
    def stack_set_name(self):
        """Gets the stack_set_name of this UpdateWorkspaceRequest.

        The name of the CloudFormation stack set to use to generate IAM roles to be used for this workspace.

        :return: The stack_set_name of this UpdateWorkspaceRequest.
        :rtype: str
        """
        return self._stack_set_name

    @stack_set_name.setter
    def stack_set_name(self, stack_set_name):
        """Sets the stack_set_name of this UpdateWorkspaceRequest.

        The name of the CloudFormation stack set to use to generate IAM roles to be used for this workspace.

        :param stack_set_name: The stack_set_name of this UpdateWorkspaceRequest.
        :type stack_set_name: str
        """

        self._stack_set_name = stack_set_name

    @property
    def vpc_configuration(self):
        """Gets the vpc_configuration of this UpdateWorkspaceRequest.


        :return: The vpc_configuration of this UpdateWorkspaceRequest.
        :rtype: CreateWorkspaceRequestVpcConfiguration
        """
        return self._vpc_configuration

    @vpc_configuration.setter
    def vpc_configuration(self, vpc_configuration):
        """Sets the vpc_configuration of this UpdateWorkspaceRequest.


        :param vpc_configuration: The vpc_configuration of this UpdateWorkspaceRequest.
        :type vpc_configuration: CreateWorkspaceRequestVpcConfiguration
        """

        self._vpc_configuration = vpc_configuration

    @property
    def workspace_data_sources(self):
        """Gets the workspace_data_sources of this UpdateWorkspaceRequest.

        This parameter is for internal use only, and should not be used.

        :return: The workspace_data_sources of this UpdateWorkspaceRequest.
        :rtype: List[DataSourceType]
        """
        return self._workspace_data_sources

    @workspace_data_sources.setter
    def workspace_data_sources(self, workspace_data_sources):
        """Sets the workspace_data_sources of this UpdateWorkspaceRequest.

        This parameter is for internal use only, and should not be used.

        :param workspace_data_sources: The workspace_data_sources of this UpdateWorkspaceRequest.
        :type workspace_data_sources: List[DataSourceType]
        """

        self._workspace_data_sources = workspace_data_sources

    @property
    def workspace_description(self):
        """Gets the workspace_description of this UpdateWorkspaceRequest.

        A description for the workspace. This is used only to help you identify this workspace.

        :return: The workspace_description of this UpdateWorkspaceRequest.
        :rtype: str
        """
        return self._workspace_description

    @workspace_description.setter
    def workspace_description(self, workspace_description):
        """Sets the workspace_description of this UpdateWorkspaceRequest.

        A description for the workspace. This is used only to help you identify this workspace.

        :param workspace_description: The workspace_description of this UpdateWorkspaceRequest.
        :type workspace_description: str
        """
        if workspace_description is not None and len(workspace_description) > 2048:
            raise ValueError("Invalid value for `workspace_description`, length must be less than or equal to `2048`")
        if workspace_description is not None and len(workspace_description) < 0:
            raise ValueError("Invalid value for `workspace_description`, length must be greater than or equal to `0`")

        self._workspace_description = workspace_description

    @property
    def workspace_name(self):
        """Gets the workspace_name of this UpdateWorkspaceRequest.

        A new name for the workspace to update.

        :return: The workspace_name of this UpdateWorkspaceRequest.
        :rtype: str
        """
        return self._workspace_name

    @workspace_name.setter
    def workspace_name(self, workspace_name):
        """Sets the workspace_name of this UpdateWorkspaceRequest.

        A new name for the workspace to update.

        :param workspace_name: The workspace_name of this UpdateWorkspaceRequest.
        :type workspace_name: str
        """
        if workspace_name is not None and not re.search(r'^[a-zA-Z0-9-._~]{1,255}$', workspace_name):
            raise ValueError("Invalid value for `workspace_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-._~]{1,255}$/`")

        self._workspace_name = workspace_name

    @property
    def workspace_notification_destinations(self):
        """Gets the workspace_notification_destinations of this UpdateWorkspaceRequest.

        Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to use these channels.

        :return: The workspace_notification_destinations of this UpdateWorkspaceRequest.
        :rtype: List[NotificationDestinationType]
        """
        return self._workspace_notification_destinations

    @workspace_notification_destinations.setter
    def workspace_notification_destinations(self, workspace_notification_destinations):
        """Sets the workspace_notification_destinations of this UpdateWorkspaceRequest.

        Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to use these channels.

        :param workspace_notification_destinations: The workspace_notification_destinations of this UpdateWorkspaceRequest.
        :type workspace_notification_destinations: List[NotificationDestinationType]
        """

        self._workspace_notification_destinations = workspace_notification_destinations

    @property
    def workspace_organizational_units(self):
        """Gets the workspace_organizational_units of this UpdateWorkspaceRequest.

        Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.

        :return: The workspace_organizational_units of this UpdateWorkspaceRequest.
        :rtype: List[str]
        """
        return self._workspace_organizational_units

    @workspace_organizational_units.setter
    def workspace_organizational_units(self, workspace_organizational_units):
        """Sets the workspace_organizational_units of this UpdateWorkspaceRequest.

        Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.

        :param workspace_organizational_units: The workspace_organizational_units of this UpdateWorkspaceRequest.
        :type workspace_organizational_units: List[str]
        """

        self._workspace_organizational_units = workspace_organizational_units

    @property
    def workspace_role_arn(self):
        """Gets the workspace_role_arn of this UpdateWorkspaceRequest.

        Specifies an IAM role that grants permissions to Amazon Web Services resources that the workspace accesses, such as data sources and notification channels. If this workspace has <code>permissionType</code> <code>CUSTOMER_MANAGED</code>, then this role is required.

        :return: The workspace_role_arn of this UpdateWorkspaceRequest.
        :rtype: str
        """
        return self._workspace_role_arn

    @workspace_role_arn.setter
    def workspace_role_arn(self, workspace_role_arn):
        """Sets the workspace_role_arn of this UpdateWorkspaceRequest.

        Specifies an IAM role that grants permissions to Amazon Web Services resources that the workspace accesses, such as data sources and notification channels. If this workspace has <code>permissionType</code> <code>CUSTOMER_MANAGED</code>, then this role is required.

        :param workspace_role_arn: The workspace_role_arn of this UpdateWorkspaceRequest.
        :type workspace_role_arn: str
        """
        if workspace_role_arn is not None and len(workspace_role_arn) > 2048:
            raise ValueError("Invalid value for `workspace_role_arn`, length must be less than or equal to `2048`")
        if workspace_role_arn is not None and len(workspace_role_arn) < 1:
            raise ValueError("Invalid value for `workspace_role_arn`, length must be greater than or equal to `1`")

        self._workspace_role_arn = workspace_role_arn
