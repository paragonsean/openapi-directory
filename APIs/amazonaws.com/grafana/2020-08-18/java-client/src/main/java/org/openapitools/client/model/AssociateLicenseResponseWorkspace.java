/*
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AccountAccessType;
import org.openapitools.client.model.LicenseType;
import org.openapitools.client.model.PermissionType;
import org.openapitools.client.model.WorkspaceDescriptionAuthentication;
import org.openapitools.client.model.WorkspaceDescriptionNetworkAccessControl;
import org.openapitools.client.model.WorkspaceDescriptionVpcConfiguration;
import org.openapitools.client.model.WorkspaceStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociateLicenseResponseWorkspace
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:13.859303-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociateLicenseResponseWorkspace {
  public static final String SERIALIZED_NAME_ACCOUNT_ACCESS_TYPE = "accountAccessType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ACCESS_TYPE)
  private AccountAccessType accountAccessType;

  public static final String SERIALIZED_NAME_AUTHENTICATION = "authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private WorkspaceDescriptionAuthentication authentication;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DATA_SOURCES = "dataSources";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCES)
  private List dataSources;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_FREE_TRIAL_CONSUMED = "freeTrialConsumed";
  @SerializedName(SERIALIZED_NAME_FREE_TRIAL_CONSUMED)
  private Boolean freeTrialConsumed;

  public static final String SERIALIZED_NAME_FREE_TRIAL_EXPIRATION = "freeTrialExpiration";
  @SerializedName(SERIALIZED_NAME_FREE_TRIAL_EXPIRATION)
  private OffsetDateTime freeTrialExpiration;

  public static final String SERIALIZED_NAME_GRAFANA_VERSION = "grafanaVersion";
  @SerializedName(SERIALIZED_NAME_GRAFANA_VERSION)
  private String grafanaVersion;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LICENSE_EXPIRATION = "licenseExpiration";
  @SerializedName(SERIALIZED_NAME_LICENSE_EXPIRATION)
  private OffsetDateTime licenseExpiration;

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private LicenseType licenseType;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_ACCESS_CONTROL = "networkAccessControl";
  @SerializedName(SERIALIZED_NAME_NETWORK_ACCESS_CONTROL)
  private WorkspaceDescriptionNetworkAccessControl networkAccessControl;

  public static final String SERIALIZED_NAME_NOTIFICATION_DESTINATIONS = "notificationDestinations";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_DESTINATIONS)
  private List notificationDestinations;

  public static final String SERIALIZED_NAME_ORGANIZATION_ROLE_NAME = "organizationRoleName";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ROLE_NAME)
  private String organizationRoleName;

  public static final String SERIALIZED_NAME_ORGANIZATIONAL_UNITS = "organizationalUnits";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONAL_UNITS)
  private List organizationalUnits;

  public static final String SERIALIZED_NAME_PERMISSION_TYPE = "permissionType";
  @SerializedName(SERIALIZED_NAME_PERMISSION_TYPE)
  private PermissionType permissionType;

  public static final String SERIALIZED_NAME_STACK_SET_NAME = "stackSetName";
  @SerializedName(SERIALIZED_NAME_STACK_SET_NAME)
  private String stackSetName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private WorkspaceStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_VPC_CONFIGURATION = "vpcConfiguration";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION)
  private WorkspaceDescriptionVpcConfiguration vpcConfiguration;

  public static final String SERIALIZED_NAME_WORKSPACE_ROLE_ARN = "workspaceRoleArn";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ROLE_ARN)
  private String workspaceRoleArn;

  public AssociateLicenseResponseWorkspace() {
  }

  public AssociateLicenseResponseWorkspace accountAccessType(AccountAccessType accountAccessType) {
    this.accountAccessType = accountAccessType;
    return this;
  }

  /**
   * Get accountAccessType
   * @return accountAccessType
   */
  @javax.annotation.Nullable
  public AccountAccessType getAccountAccessType() {
    return accountAccessType;
  }

  public void setAccountAccessType(AccountAccessType accountAccessType) {
    this.accountAccessType = accountAccessType;
  }


  public AssociateLicenseResponseWorkspace authentication(WorkspaceDescriptionAuthentication authentication) {
    this.authentication = authentication;
    return this;
  }

  /**
   * Get authentication
   * @return authentication
   */
  @javax.annotation.Nonnull
  public WorkspaceDescriptionAuthentication getAuthentication() {
    return authentication;
  }

  public void setAuthentication(WorkspaceDescriptionAuthentication authentication) {
    this.authentication = authentication;
  }


  public AssociateLicenseResponseWorkspace created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public AssociateLicenseResponseWorkspace dataSources(List dataSources) {
    this.dataSources = dataSources;
    return this;
  }

  /**
   * Get dataSources
   * @return dataSources
   */
  @javax.annotation.Nonnull
  public List getDataSources() {
    return dataSources;
  }

  public void setDataSources(List dataSources) {
    this.dataSources = dataSources;
  }


  public AssociateLicenseResponseWorkspace description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AssociateLicenseResponseWorkspace endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Get endpoint
   * @return endpoint
   */
  @javax.annotation.Nonnull
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public AssociateLicenseResponseWorkspace freeTrialConsumed(Boolean freeTrialConsumed) {
    this.freeTrialConsumed = freeTrialConsumed;
    return this;
  }

  /**
   * Get freeTrialConsumed
   * @return freeTrialConsumed
   */
  @javax.annotation.Nullable
  public Boolean getFreeTrialConsumed() {
    return freeTrialConsumed;
  }

  public void setFreeTrialConsumed(Boolean freeTrialConsumed) {
    this.freeTrialConsumed = freeTrialConsumed;
  }


  public AssociateLicenseResponseWorkspace freeTrialExpiration(OffsetDateTime freeTrialExpiration) {
    this.freeTrialExpiration = freeTrialExpiration;
    return this;
  }

  /**
   * Get freeTrialExpiration
   * @return freeTrialExpiration
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFreeTrialExpiration() {
    return freeTrialExpiration;
  }

  public void setFreeTrialExpiration(OffsetDateTime freeTrialExpiration) {
    this.freeTrialExpiration = freeTrialExpiration;
  }


  public AssociateLicenseResponseWorkspace grafanaVersion(String grafanaVersion) {
    this.grafanaVersion = grafanaVersion;
    return this;
  }

  /**
   * Get grafanaVersion
   * @return grafanaVersion
   */
  @javax.annotation.Nonnull
  public String getGrafanaVersion() {
    return grafanaVersion;
  }

  public void setGrafanaVersion(String grafanaVersion) {
    this.grafanaVersion = grafanaVersion;
  }


  public AssociateLicenseResponseWorkspace id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AssociateLicenseResponseWorkspace licenseExpiration(OffsetDateTime licenseExpiration) {
    this.licenseExpiration = licenseExpiration;
    return this;
  }

  /**
   * Get licenseExpiration
   * @return licenseExpiration
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLicenseExpiration() {
    return licenseExpiration;
  }

  public void setLicenseExpiration(OffsetDateTime licenseExpiration) {
    this.licenseExpiration = licenseExpiration;
  }


  public AssociateLicenseResponseWorkspace licenseType(LicenseType licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * Get licenseType
   * @return licenseType
   */
  @javax.annotation.Nullable
  public LicenseType getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(LicenseType licenseType) {
    this.licenseType = licenseType;
  }


  public AssociateLicenseResponseWorkspace modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

  /**
   * Get modified
   * @return modified
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public AssociateLicenseResponseWorkspace name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AssociateLicenseResponseWorkspace networkAccessControl(WorkspaceDescriptionNetworkAccessControl networkAccessControl) {
    this.networkAccessControl = networkAccessControl;
    return this;
  }

  /**
   * Get networkAccessControl
   * @return networkAccessControl
   */
  @javax.annotation.Nullable
  public WorkspaceDescriptionNetworkAccessControl getNetworkAccessControl() {
    return networkAccessControl;
  }

  public void setNetworkAccessControl(WorkspaceDescriptionNetworkAccessControl networkAccessControl) {
    this.networkAccessControl = networkAccessControl;
  }


  public AssociateLicenseResponseWorkspace notificationDestinations(List notificationDestinations) {
    this.notificationDestinations = notificationDestinations;
    return this;
  }

  /**
   * Get notificationDestinations
   * @return notificationDestinations
   */
  @javax.annotation.Nullable
  public List getNotificationDestinations() {
    return notificationDestinations;
  }

  public void setNotificationDestinations(List notificationDestinations) {
    this.notificationDestinations = notificationDestinations;
  }


  public AssociateLicenseResponseWorkspace organizationRoleName(String organizationRoleName) {
    this.organizationRoleName = organizationRoleName;
    return this;
  }

  /**
   * Get organizationRoleName
   * @return organizationRoleName
   */
  @javax.annotation.Nullable
  public String getOrganizationRoleName() {
    return organizationRoleName;
  }

  public void setOrganizationRoleName(String organizationRoleName) {
    this.organizationRoleName = organizationRoleName;
  }


  public AssociateLicenseResponseWorkspace organizationalUnits(List organizationalUnits) {
    this.organizationalUnits = organizationalUnits;
    return this;
  }

  /**
   * Get organizationalUnits
   * @return organizationalUnits
   */
  @javax.annotation.Nullable
  public List getOrganizationalUnits() {
    return organizationalUnits;
  }

  public void setOrganizationalUnits(List organizationalUnits) {
    this.organizationalUnits = organizationalUnits;
  }


  public AssociateLicenseResponseWorkspace permissionType(PermissionType permissionType) {
    this.permissionType = permissionType;
    return this;
  }

  /**
   * Get permissionType
   * @return permissionType
   */
  @javax.annotation.Nullable
  public PermissionType getPermissionType() {
    return permissionType;
  }

  public void setPermissionType(PermissionType permissionType) {
    this.permissionType = permissionType;
  }


  public AssociateLicenseResponseWorkspace stackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
    return this;
  }

  /**
   * Get stackSetName
   * @return stackSetName
   */
  @javax.annotation.Nullable
  public String getStackSetName() {
    return stackSetName;
  }

  public void setStackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
  }


  public AssociateLicenseResponseWorkspace status(WorkspaceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public WorkspaceStatus getStatus() {
    return status;
  }

  public void setStatus(WorkspaceStatus status) {
    this.status = status;
  }


  public AssociateLicenseResponseWorkspace tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public AssociateLicenseResponseWorkspace vpcConfiguration(WorkspaceDescriptionVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
    return this;
  }

  /**
   * Get vpcConfiguration
   * @return vpcConfiguration
   */
  @javax.annotation.Nullable
  public WorkspaceDescriptionVpcConfiguration getVpcConfiguration() {
    return vpcConfiguration;
  }

  public void setVpcConfiguration(WorkspaceDescriptionVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
  }


  public AssociateLicenseResponseWorkspace workspaceRoleArn(String workspaceRoleArn) {
    this.workspaceRoleArn = workspaceRoleArn;
    return this;
  }

  /**
   * Get workspaceRoleArn
   * @return workspaceRoleArn
   */
  @javax.annotation.Nullable
  public String getWorkspaceRoleArn() {
    return workspaceRoleArn;
  }

  public void setWorkspaceRoleArn(String workspaceRoleArn) {
    this.workspaceRoleArn = workspaceRoleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateLicenseResponseWorkspace associateLicenseResponseWorkspace = (AssociateLicenseResponseWorkspace) o;
    return Objects.equals(this.accountAccessType, associateLicenseResponseWorkspace.accountAccessType) &&
        Objects.equals(this.authentication, associateLicenseResponseWorkspace.authentication) &&
        Objects.equals(this.created, associateLicenseResponseWorkspace.created) &&
        Objects.equals(this.dataSources, associateLicenseResponseWorkspace.dataSources) &&
        Objects.equals(this.description, associateLicenseResponseWorkspace.description) &&
        Objects.equals(this.endpoint, associateLicenseResponseWorkspace.endpoint) &&
        Objects.equals(this.freeTrialConsumed, associateLicenseResponseWorkspace.freeTrialConsumed) &&
        Objects.equals(this.freeTrialExpiration, associateLicenseResponseWorkspace.freeTrialExpiration) &&
        Objects.equals(this.grafanaVersion, associateLicenseResponseWorkspace.grafanaVersion) &&
        Objects.equals(this.id, associateLicenseResponseWorkspace.id) &&
        Objects.equals(this.licenseExpiration, associateLicenseResponseWorkspace.licenseExpiration) &&
        Objects.equals(this.licenseType, associateLicenseResponseWorkspace.licenseType) &&
        Objects.equals(this.modified, associateLicenseResponseWorkspace.modified) &&
        Objects.equals(this.name, associateLicenseResponseWorkspace.name) &&
        Objects.equals(this.networkAccessControl, associateLicenseResponseWorkspace.networkAccessControl) &&
        Objects.equals(this.notificationDestinations, associateLicenseResponseWorkspace.notificationDestinations) &&
        Objects.equals(this.organizationRoleName, associateLicenseResponseWorkspace.organizationRoleName) &&
        Objects.equals(this.organizationalUnits, associateLicenseResponseWorkspace.organizationalUnits) &&
        Objects.equals(this.permissionType, associateLicenseResponseWorkspace.permissionType) &&
        Objects.equals(this.stackSetName, associateLicenseResponseWorkspace.stackSetName) &&
        Objects.equals(this.status, associateLicenseResponseWorkspace.status) &&
        Objects.equals(this.tags, associateLicenseResponseWorkspace.tags) &&
        Objects.equals(this.vpcConfiguration, associateLicenseResponseWorkspace.vpcConfiguration) &&
        Objects.equals(this.workspaceRoleArn, associateLicenseResponseWorkspace.workspaceRoleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountAccessType, authentication, created, dataSources, description, endpoint, freeTrialConsumed, freeTrialExpiration, grafanaVersion, id, licenseExpiration, licenseType, modified, name, networkAccessControl, notificationDestinations, organizationRoleName, organizationalUnits, permissionType, stackSetName, status, tags, vpcConfiguration, workspaceRoleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateLicenseResponseWorkspace {\n");
    sb.append("    accountAccessType: ").append(toIndentedString(accountAccessType)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    dataSources: ").append(toIndentedString(dataSources)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    freeTrialConsumed: ").append(toIndentedString(freeTrialConsumed)).append("\n");
    sb.append("    freeTrialExpiration: ").append(toIndentedString(freeTrialExpiration)).append("\n");
    sb.append("    grafanaVersion: ").append(toIndentedString(grafanaVersion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    licenseExpiration: ").append(toIndentedString(licenseExpiration)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkAccessControl: ").append(toIndentedString(networkAccessControl)).append("\n");
    sb.append("    notificationDestinations: ").append(toIndentedString(notificationDestinations)).append("\n");
    sb.append("    organizationRoleName: ").append(toIndentedString(organizationRoleName)).append("\n");
    sb.append("    organizationalUnits: ").append(toIndentedString(organizationalUnits)).append("\n");
    sb.append("    permissionType: ").append(toIndentedString(permissionType)).append("\n");
    sb.append("    stackSetName: ").append(toIndentedString(stackSetName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    vpcConfiguration: ").append(toIndentedString(vpcConfiguration)).append("\n");
    sb.append("    workspaceRoleArn: ").append(toIndentedString(workspaceRoleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountAccessType");
    openapiFields.add("authentication");
    openapiFields.add("created");
    openapiFields.add("dataSources");
    openapiFields.add("description");
    openapiFields.add("endpoint");
    openapiFields.add("freeTrialConsumed");
    openapiFields.add("freeTrialExpiration");
    openapiFields.add("grafanaVersion");
    openapiFields.add("id");
    openapiFields.add("licenseExpiration");
    openapiFields.add("licenseType");
    openapiFields.add("modified");
    openapiFields.add("name");
    openapiFields.add("networkAccessControl");
    openapiFields.add("notificationDestinations");
    openapiFields.add("organizationRoleName");
    openapiFields.add("organizationalUnits");
    openapiFields.add("permissionType");
    openapiFields.add("stackSetName");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("vpcConfiguration");
    openapiFields.add("workspaceRoleArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authentication");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("dataSources");
    openapiRequiredFields.add("endpoint");
    openapiRequiredFields.add("grafanaVersion");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("modified");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociateLicenseResponseWorkspace
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociateLicenseResponseWorkspace.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociateLicenseResponseWorkspace is not found in the empty JSON string", AssociateLicenseResponseWorkspace.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociateLicenseResponseWorkspace.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociateLicenseResponseWorkspace` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssociateLicenseResponseWorkspace.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountAccessType`
      if (jsonObj.get("accountAccessType") != null && !jsonObj.get("accountAccessType").isJsonNull()) {
        AccountAccessType.validateJsonElement(jsonObj.get("accountAccessType"));
      }
      // validate the required field `authentication`
      WorkspaceDescriptionAuthentication.validateJsonElement(jsonObj.get("authentication"));
      // validate the required field `created`
      OffsetDateTime.validateJsonElement(jsonObj.get("created"));
      // validate the required field `dataSources`
      List.validateJsonElement(jsonObj.get("dataSources"));
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the required field `endpoint`
      String.validateJsonElement(jsonObj.get("endpoint"));
      // validate the optional field `freeTrialConsumed`
      if (jsonObj.get("freeTrialConsumed") != null && !jsonObj.get("freeTrialConsumed").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("freeTrialConsumed"));
      }
      // validate the optional field `freeTrialExpiration`
      if (jsonObj.get("freeTrialExpiration") != null && !jsonObj.get("freeTrialExpiration").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("freeTrialExpiration"));
      }
      // validate the required field `grafanaVersion`
      String.validateJsonElement(jsonObj.get("grafanaVersion"));
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the optional field `licenseExpiration`
      if (jsonObj.get("licenseExpiration") != null && !jsonObj.get("licenseExpiration").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("licenseExpiration"));
      }
      // validate the optional field `licenseType`
      if (jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) {
        LicenseType.validateJsonElement(jsonObj.get("licenseType"));
      }
      // validate the required field `modified`
      OffsetDateTime.validateJsonElement(jsonObj.get("modified"));
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `networkAccessControl`
      if (jsonObj.get("networkAccessControl") != null && !jsonObj.get("networkAccessControl").isJsonNull()) {
        WorkspaceDescriptionNetworkAccessControl.validateJsonElement(jsonObj.get("networkAccessControl"));
      }
      // validate the optional field `notificationDestinations`
      if (jsonObj.get("notificationDestinations") != null && !jsonObj.get("notificationDestinations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("notificationDestinations"));
      }
      // validate the optional field `organizationRoleName`
      if (jsonObj.get("organizationRoleName") != null && !jsonObj.get("organizationRoleName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("organizationRoleName"));
      }
      // validate the optional field `organizationalUnits`
      if (jsonObj.get("organizationalUnits") != null && !jsonObj.get("organizationalUnits").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("organizationalUnits"));
      }
      // validate the optional field `permissionType`
      if (jsonObj.get("permissionType") != null && !jsonObj.get("permissionType").isJsonNull()) {
        PermissionType.validateJsonElement(jsonObj.get("permissionType"));
      }
      // validate the optional field `stackSetName`
      if (jsonObj.get("stackSetName") != null && !jsonObj.get("stackSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("stackSetName"));
      }
      // validate the required field `status`
      WorkspaceStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `vpcConfiguration`
      if (jsonObj.get("vpcConfiguration") != null && !jsonObj.get("vpcConfiguration").isJsonNull()) {
        WorkspaceDescriptionVpcConfiguration.validateJsonElement(jsonObj.get("vpcConfiguration"));
      }
      // validate the optional field `workspaceRoleArn`
      if (jsonObj.get("workspaceRoleArn") != null && !jsonObj.get("workspaceRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("workspaceRoleArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociateLicenseResponseWorkspace.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociateLicenseResponseWorkspace' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociateLicenseResponseWorkspace> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociateLicenseResponseWorkspace.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociateLicenseResponseWorkspace>() {
           @Override
           public void write(JsonWriter out, AssociateLicenseResponseWorkspace value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociateLicenseResponseWorkspace read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociateLicenseResponseWorkspace given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociateLicenseResponseWorkspace
   * @throws IOException if the JSON string is invalid with respect to AssociateLicenseResponseWorkspace
   */
  public static AssociateLicenseResponseWorkspace fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociateLicenseResponseWorkspace.class);
  }

  /**
   * Convert an instance of AssociateLicenseResponseWorkspace to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

