/*
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.WorkspaceStatus;
import org.openapitools.client.model.WorkspaceSummaryAuthentication;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A structure that contains some information about one workspace in the account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:13.859303-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkspaceSummary {
  public static final String SERIALIZED_NAME_AUTHENTICATION = "authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private WorkspaceSummaryAuthentication authentication;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_GRAFANA_VERSION = "grafanaVersion";
  @SerializedName(SERIALIZED_NAME_GRAFANA_VERSION)
  private String grafanaVersion;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private OffsetDateTime modified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION_DESTINATIONS = "notificationDestinations";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_DESTINATIONS)
  private List notificationDestinations;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private WorkspaceStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public WorkspaceSummary() {
  }

  public WorkspaceSummary authentication(WorkspaceSummaryAuthentication authentication) {
    this.authentication = authentication;
    return this;
  }

  /**
   * Get authentication
   * @return authentication
   */
  @javax.annotation.Nonnull
  public WorkspaceSummaryAuthentication getAuthentication() {
    return authentication;
  }

  public void setAuthentication(WorkspaceSummaryAuthentication authentication) {
    this.authentication = authentication;
  }


  public WorkspaceSummary created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public WorkspaceSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WorkspaceSummary endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Get endpoint
   * @return endpoint
   */
  @javax.annotation.Nonnull
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public WorkspaceSummary grafanaVersion(String grafanaVersion) {
    this.grafanaVersion = grafanaVersion;
    return this;
  }

  /**
   * Get grafanaVersion
   * @return grafanaVersion
   */
  @javax.annotation.Nonnull
  public String getGrafanaVersion() {
    return grafanaVersion;
  }

  public void setGrafanaVersion(String grafanaVersion) {
    this.grafanaVersion = grafanaVersion;
  }


  public WorkspaceSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public WorkspaceSummary modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

  /**
   * Get modified
   * @return modified
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }


  public WorkspaceSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WorkspaceSummary notificationDestinations(List notificationDestinations) {
    this.notificationDestinations = notificationDestinations;
    return this;
  }

  /**
   * Get notificationDestinations
   * @return notificationDestinations
   */
  @javax.annotation.Nullable
  public List getNotificationDestinations() {
    return notificationDestinations;
  }

  public void setNotificationDestinations(List notificationDestinations) {
    this.notificationDestinations = notificationDestinations;
  }


  public WorkspaceSummary status(WorkspaceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public WorkspaceStatus getStatus() {
    return status;
  }

  public void setStatus(WorkspaceStatus status) {
    this.status = status;
  }


  public WorkspaceSummary tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkspaceSummary workspaceSummary = (WorkspaceSummary) o;
    return Objects.equals(this.authentication, workspaceSummary.authentication) &&
        Objects.equals(this.created, workspaceSummary.created) &&
        Objects.equals(this.description, workspaceSummary.description) &&
        Objects.equals(this.endpoint, workspaceSummary.endpoint) &&
        Objects.equals(this.grafanaVersion, workspaceSummary.grafanaVersion) &&
        Objects.equals(this.id, workspaceSummary.id) &&
        Objects.equals(this.modified, workspaceSummary.modified) &&
        Objects.equals(this.name, workspaceSummary.name) &&
        Objects.equals(this.notificationDestinations, workspaceSummary.notificationDestinations) &&
        Objects.equals(this.status, workspaceSummary.status) &&
        Objects.equals(this.tags, workspaceSummary.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authentication, created, description, endpoint, grafanaVersion, id, modified, name, notificationDestinations, status, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkspaceSummary {\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    grafanaVersion: ").append(toIndentedString(grafanaVersion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationDestinations: ").append(toIndentedString(notificationDestinations)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authentication");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("endpoint");
    openapiFields.add("grafanaVersion");
    openapiFields.add("id");
    openapiFields.add("modified");
    openapiFields.add("name");
    openapiFields.add("notificationDestinations");
    openapiFields.add("status");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authentication");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("endpoint");
    openapiRequiredFields.add("grafanaVersion");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("modified");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkspaceSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkspaceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkspaceSummary is not found in the empty JSON string", WorkspaceSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkspaceSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkspaceSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkspaceSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `authentication`
      WorkspaceSummaryAuthentication.validateJsonElement(jsonObj.get("authentication"));
      // validate the required field `created`
      OffsetDateTime.validateJsonElement(jsonObj.get("created"));
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the required field `endpoint`
      String.validateJsonElement(jsonObj.get("endpoint"));
      // validate the required field `grafanaVersion`
      String.validateJsonElement(jsonObj.get("grafanaVersion"));
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the required field `modified`
      OffsetDateTime.validateJsonElement(jsonObj.get("modified"));
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `notificationDestinations`
      if (jsonObj.get("notificationDestinations") != null && !jsonObj.get("notificationDestinations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("notificationDestinations"));
      }
      // validate the required field `status`
      WorkspaceStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkspaceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkspaceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkspaceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkspaceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkspaceSummary>() {
           @Override
           public void write(JsonWriter out, WorkspaceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkspaceSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkspaceSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkspaceSummary
   * @throws IOException if the JSON string is invalid with respect to WorkspaceSummary
   */
  public static WorkspaceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkspaceSummary.class);
  }

  /**
   * Convert an instance of WorkspaceSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

