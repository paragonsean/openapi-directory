/*
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AuthenticationProviderTypes;
import org.openapitools.client.model.CreateWorkspaceRequestNetworkAccessControl;
import org.openapitools.client.model.CreateWorkspaceRequestVpcConfiguration;
import org.openapitools.client.model.DataSourceType;
import org.openapitools.client.model.NotificationDestinationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateWorkspaceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:13.859303-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateWorkspaceRequest {
  /**
   * Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify &lt;code&gt;ORGANIZATION&lt;/code&gt;, you must specify which organizational units the workspace can access in the &lt;code&gt;workspaceOrganizationalUnits&lt;/code&gt; parameter.
   */
  @JsonAdapter(AccountAccessTypeEnum.Adapter.class)
  public enum AccountAccessTypeEnum {
    CURRENT_ACCOUNT("CURRENT_ACCOUNT"),
    
    ORGANIZATION("ORGANIZATION");

    private String value;

    AccountAccessTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountAccessTypeEnum fromValue(String value) {
      for (AccountAccessTypeEnum b : AccountAccessTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountAccessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountAccessTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountAccessTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountAccessTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccountAccessTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_ACCESS_TYPE = "accountAccessType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ACCESS_TYPE)
  private AccountAccessTypeEnum accountAccessType;

  public static final String SERIALIZED_NAME_AUTHENTICATION_PROVIDERS = "authenticationProviders";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_PROVIDERS)
  private List<AuthenticationProviderTypes> authenticationProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private String _configuration;

  public static final String SERIALIZED_NAME_GRAFANA_VERSION = "grafanaVersion";
  @SerializedName(SERIALIZED_NAME_GRAFANA_VERSION)
  private String grafanaVersion;

  public static final String SERIALIZED_NAME_NETWORK_ACCESS_CONTROL = "networkAccessControl";
  @SerializedName(SERIALIZED_NAME_NETWORK_ACCESS_CONTROL)
  private CreateWorkspaceRequestNetworkAccessControl networkAccessControl;

  public static final String SERIALIZED_NAME_ORGANIZATION_ROLE_NAME = "organizationRoleName";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ROLE_NAME)
  private String organizationRoleName;

  /**
   * &lt;p&gt;When creating a workspace through the Amazon Web Services API, CLI or Amazon Web Services CloudFormation, you must manage IAM roles and provision the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.&lt;/p&gt; &lt;p&gt;You must also specify a &lt;code&gt;workspaceRoleArn&lt;/code&gt; for a role that you will manage for the workspace to use when accessing those datasources and notification channels.&lt;/p&gt; &lt;p&gt;The ability for Amazon Managed Grafana to create and update IAM roles on behalf of the user is supported only in the Amazon Managed Grafana console, where this value may be set to &lt;code&gt;SERVICE_MANAGED&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Use only the &lt;code&gt;CUSTOMER_MANAGED&lt;/code&gt; permission type when creating a workspace with the API, CLI or Amazon Web Services CloudFormation. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html\&quot;&gt;Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels&lt;/a&gt;.&lt;/p&gt;
   */
  @JsonAdapter(PermissionTypeEnum.Adapter.class)
  public enum PermissionTypeEnum {
    CUSTOMER_MANAGED("CUSTOMER_MANAGED"),
    
    SERVICE_MANAGED("SERVICE_MANAGED");

    private String value;

    PermissionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionTypeEnum fromValue(String value) {
      for (PermissionTypeEnum b : PermissionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PermissionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERMISSION_TYPE = "permissionType";
  @SerializedName(SERIALIZED_NAME_PERMISSION_TYPE)
  private PermissionTypeEnum permissionType;

  public static final String SERIALIZED_NAME_STACK_SET_NAME = "stackSetName";
  @SerializedName(SERIALIZED_NAME_STACK_SET_NAME)
  private String stackSetName;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_VPC_CONFIGURATION = "vpcConfiguration";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION)
  private CreateWorkspaceRequestVpcConfiguration vpcConfiguration;

  public static final String SERIALIZED_NAME_WORKSPACE_DATA_SOURCES = "workspaceDataSources";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_DATA_SOURCES)
  private List<DataSourceType> workspaceDataSources = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKSPACE_DESCRIPTION = "workspaceDescription";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_DESCRIPTION)
  private String workspaceDescription;

  public static final String SERIALIZED_NAME_WORKSPACE_NAME = "workspaceName";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_NAME)
  private String workspaceName;

  public static final String SERIALIZED_NAME_WORKSPACE_NOTIFICATION_DESTINATIONS = "workspaceNotificationDestinations";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_NOTIFICATION_DESTINATIONS)
  private List<NotificationDestinationType> workspaceNotificationDestinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKSPACE_ORGANIZATIONAL_UNITS = "workspaceOrganizationalUnits";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ORGANIZATIONAL_UNITS)
  private List<String> workspaceOrganizationalUnits = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKSPACE_ROLE_ARN = "workspaceRoleArn";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ROLE_ARN)
  private String workspaceRoleArn;

  public CreateWorkspaceRequest() {
  }

  public CreateWorkspaceRequest accountAccessType(AccountAccessTypeEnum accountAccessType) {
    this.accountAccessType = accountAccessType;
    return this;
  }

  /**
   * Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify &lt;code&gt;ORGANIZATION&lt;/code&gt;, you must specify which organizational units the workspace can access in the &lt;code&gt;workspaceOrganizationalUnits&lt;/code&gt; parameter.
   * @return accountAccessType
   */
  @javax.annotation.Nonnull
  public AccountAccessTypeEnum getAccountAccessType() {
    return accountAccessType;
  }

  public void setAccountAccessType(AccountAccessTypeEnum accountAccessType) {
    this.accountAccessType = accountAccessType;
  }


  public CreateWorkspaceRequest authenticationProviders(List<AuthenticationProviderTypes> authenticationProviders) {
    this.authenticationProviders = authenticationProviders;
    return this;
  }

  public CreateWorkspaceRequest addAuthenticationProvidersItem(AuthenticationProviderTypes authenticationProvidersItem) {
    if (this.authenticationProviders == null) {
      this.authenticationProviders = new ArrayList<>();
    }
    this.authenticationProviders.add(authenticationProvidersItem);
    return this;
  }

  /**
   * Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html\&quot;&gt;User authentication in Amazon Managed Grafana&lt;/a&gt;.
   * @return authenticationProviders
   */
  @javax.annotation.Nonnull
  public List<AuthenticationProviderTypes> getAuthenticationProviders() {
    return authenticationProviders;
  }

  public void setAuthenticationProviders(List<AuthenticationProviderTypes> authenticationProviders) {
    this.authenticationProviders = authenticationProviders;
  }


  public CreateWorkspaceRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateWorkspaceRequest _configuration(String _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * The configuration string for the workspace that you create. For more information about the format and configuration options available, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/grafana/latest/userguide/AMG-configure-workspace.html\&quot;&gt;Working in your Grafana workspace&lt;/a&gt;.
   * @return _configuration
   */
  @javax.annotation.Nullable
  public String getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(String _configuration) {
    this._configuration = _configuration;
  }


  public CreateWorkspaceRequest grafanaVersion(String grafanaVersion) {
    this.grafanaVersion = grafanaVersion;
    return this;
  }

  /**
   * &lt;p&gt;Specifies the version of Grafana to support in the new workspace.&lt;/p&gt; &lt;p&gt;To get a list of supported version, use the &lt;code&gt;ListVersions&lt;/code&gt; operation.&lt;/p&gt;
   * @return grafanaVersion
   */
  @javax.annotation.Nullable
  public String getGrafanaVersion() {
    return grafanaVersion;
  }

  public void setGrafanaVersion(String grafanaVersion) {
    this.grafanaVersion = grafanaVersion;
  }


  public CreateWorkspaceRequest networkAccessControl(CreateWorkspaceRequestNetworkAccessControl networkAccessControl) {
    this.networkAccessControl = networkAccessControl;
    return this;
  }

  /**
   * Get networkAccessControl
   * @return networkAccessControl
   */
  @javax.annotation.Nullable
  public CreateWorkspaceRequestNetworkAccessControl getNetworkAccessControl() {
    return networkAccessControl;
  }

  public void setNetworkAccessControl(CreateWorkspaceRequestNetworkAccessControl networkAccessControl) {
    this.networkAccessControl = networkAccessControl;
  }


  public CreateWorkspaceRequest organizationRoleName(String organizationRoleName) {
    this.organizationRoleName = organizationRoleName;
    return this;
  }

  /**
   * The name of an IAM role that already exists to use with Organizations to access Amazon Web Services data sources and notification channels in other accounts in an organization.
   * @return organizationRoleName
   */
  @javax.annotation.Nullable
  public String getOrganizationRoleName() {
    return organizationRoleName;
  }

  public void setOrganizationRoleName(String organizationRoleName) {
    this.organizationRoleName = organizationRoleName;
  }


  public CreateWorkspaceRequest permissionType(PermissionTypeEnum permissionType) {
    this.permissionType = permissionType;
    return this;
  }

  /**
   * &lt;p&gt;When creating a workspace through the Amazon Web Services API, CLI or Amazon Web Services CloudFormation, you must manage IAM roles and provision the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.&lt;/p&gt; &lt;p&gt;You must also specify a &lt;code&gt;workspaceRoleArn&lt;/code&gt; for a role that you will manage for the workspace to use when accessing those datasources and notification channels.&lt;/p&gt; &lt;p&gt;The ability for Amazon Managed Grafana to create and update IAM roles on behalf of the user is supported only in the Amazon Managed Grafana console, where this value may be set to &lt;code&gt;SERVICE_MANAGED&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Use only the &lt;code&gt;CUSTOMER_MANAGED&lt;/code&gt; permission type when creating a workspace with the API, CLI or Amazon Web Services CloudFormation. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html\&quot;&gt;Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels&lt;/a&gt;.&lt;/p&gt;
   * @return permissionType
   */
  @javax.annotation.Nonnull
  public PermissionTypeEnum getPermissionType() {
    return permissionType;
  }

  public void setPermissionType(PermissionTypeEnum permissionType) {
    this.permissionType = permissionType;
  }


  public CreateWorkspaceRequest stackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
    return this;
  }

  /**
   * The name of the CloudFormation stack set to use to generate IAM roles to be used for this workspace.
   * @return stackSetName
   */
  @javax.annotation.Nullable
  public String getStackSetName() {
    return stackSetName;
  }

  public void setStackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
  }


  public CreateWorkspaceRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateWorkspaceRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The list of tags associated with the workspace.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateWorkspaceRequest vpcConfiguration(CreateWorkspaceRequestVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
    return this;
  }

  /**
   * Get vpcConfiguration
   * @return vpcConfiguration
   */
  @javax.annotation.Nullable
  public CreateWorkspaceRequestVpcConfiguration getVpcConfiguration() {
    return vpcConfiguration;
  }

  public void setVpcConfiguration(CreateWorkspaceRequestVpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
  }


  public CreateWorkspaceRequest workspaceDataSources(List<DataSourceType> workspaceDataSources) {
    this.workspaceDataSources = workspaceDataSources;
    return this;
  }

  public CreateWorkspaceRequest addWorkspaceDataSourcesItem(DataSourceType workspaceDataSourcesItem) {
    if (this.workspaceDataSources == null) {
      this.workspaceDataSources = new ArrayList<>();
    }
    this.workspaceDataSources.add(workspaceDataSourcesItem);
    return this;
  }

  /**
   * This parameter is for internal use only, and should not be used.
   * @return workspaceDataSources
   */
  @javax.annotation.Nullable
  public List<DataSourceType> getWorkspaceDataSources() {
    return workspaceDataSources;
  }

  public void setWorkspaceDataSources(List<DataSourceType> workspaceDataSources) {
    this.workspaceDataSources = workspaceDataSources;
  }


  public CreateWorkspaceRequest workspaceDescription(String workspaceDescription) {
    this.workspaceDescription = workspaceDescription;
    return this;
  }

  /**
   * &lt;p&gt;A description for the workspace. This is used only to help you identify this workspace.&lt;/p&gt; &lt;p&gt;Pattern: &lt;code&gt;^[\\\\p{L}\\\\p{Z}\\\\p{N}\\\\p{P}]{0,2048}$&lt;/code&gt; &lt;/p&gt;
   * @return workspaceDescription
   */
  @javax.annotation.Nullable
  public String getWorkspaceDescription() {
    return workspaceDescription;
  }

  public void setWorkspaceDescription(String workspaceDescription) {
    this.workspaceDescription = workspaceDescription;
  }


  public CreateWorkspaceRequest workspaceName(String workspaceName) {
    this.workspaceName = workspaceName;
    return this;
  }

  /**
   * The name for the workspace. It does not have to be unique.
   * @return workspaceName
   */
  @javax.annotation.Nullable
  public String getWorkspaceName() {
    return workspaceName;
  }

  public void setWorkspaceName(String workspaceName) {
    this.workspaceName = workspaceName;
  }


  public CreateWorkspaceRequest workspaceNotificationDestinations(List<NotificationDestinationType> workspaceNotificationDestinations) {
    this.workspaceNotificationDestinations = workspaceNotificationDestinations;
    return this;
  }

  public CreateWorkspaceRequest addWorkspaceNotificationDestinationsItem(NotificationDestinationType workspaceNotificationDestinationsItem) {
    if (this.workspaceNotificationDestinations == null) {
      this.workspaceNotificationDestinations = new ArrayList<>();
    }
    this.workspaceNotificationDestinations.add(workspaceNotificationDestinationsItem);
    return this;
  }

  /**
   * Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to use these channels.
   * @return workspaceNotificationDestinations
   */
  @javax.annotation.Nullable
  public List<NotificationDestinationType> getWorkspaceNotificationDestinations() {
    return workspaceNotificationDestinations;
  }

  public void setWorkspaceNotificationDestinations(List<NotificationDestinationType> workspaceNotificationDestinations) {
    this.workspaceNotificationDestinations = workspaceNotificationDestinations;
  }


  public CreateWorkspaceRequest workspaceOrganizationalUnits(List<String> workspaceOrganizationalUnits) {
    this.workspaceOrganizationalUnits = workspaceOrganizationalUnits;
    return this;
  }

  public CreateWorkspaceRequest addWorkspaceOrganizationalUnitsItem(String workspaceOrganizationalUnitsItem) {
    if (this.workspaceOrganizationalUnits == null) {
      this.workspaceOrganizationalUnits = new ArrayList<>();
    }
    this.workspaceOrganizationalUnits.add(workspaceOrganizationalUnitsItem);
    return this;
  }

  /**
   * Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.
   * @return workspaceOrganizationalUnits
   */
  @javax.annotation.Nullable
  public List<String> getWorkspaceOrganizationalUnits() {
    return workspaceOrganizationalUnits;
  }

  public void setWorkspaceOrganizationalUnits(List<String> workspaceOrganizationalUnits) {
    this.workspaceOrganizationalUnits = workspaceOrganizationalUnits;
  }


  public CreateWorkspaceRequest workspaceRoleArn(String workspaceRoleArn) {
    this.workspaceRoleArn = workspaceRoleArn;
    return this;
  }

  /**
   * Specified the IAM role that grants permissions to the Amazon Web Services resources that the workspace will view data from, including both data sources and notification channels. You are responsible for managing the permissions for this role as new data sources or notification channels are added. 
   * @return workspaceRoleArn
   */
  @javax.annotation.Nullable
  public String getWorkspaceRoleArn() {
    return workspaceRoleArn;
  }

  public void setWorkspaceRoleArn(String workspaceRoleArn) {
    this.workspaceRoleArn = workspaceRoleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWorkspaceRequest createWorkspaceRequest = (CreateWorkspaceRequest) o;
    return Objects.equals(this.accountAccessType, createWorkspaceRequest.accountAccessType) &&
        Objects.equals(this.authenticationProviders, createWorkspaceRequest.authenticationProviders) &&
        Objects.equals(this.clientToken, createWorkspaceRequest.clientToken) &&
        Objects.equals(this._configuration, createWorkspaceRequest._configuration) &&
        Objects.equals(this.grafanaVersion, createWorkspaceRequest.grafanaVersion) &&
        Objects.equals(this.networkAccessControl, createWorkspaceRequest.networkAccessControl) &&
        Objects.equals(this.organizationRoleName, createWorkspaceRequest.organizationRoleName) &&
        Objects.equals(this.permissionType, createWorkspaceRequest.permissionType) &&
        Objects.equals(this.stackSetName, createWorkspaceRequest.stackSetName) &&
        Objects.equals(this.tags, createWorkspaceRequest.tags) &&
        Objects.equals(this.vpcConfiguration, createWorkspaceRequest.vpcConfiguration) &&
        Objects.equals(this.workspaceDataSources, createWorkspaceRequest.workspaceDataSources) &&
        Objects.equals(this.workspaceDescription, createWorkspaceRequest.workspaceDescription) &&
        Objects.equals(this.workspaceName, createWorkspaceRequest.workspaceName) &&
        Objects.equals(this.workspaceNotificationDestinations, createWorkspaceRequest.workspaceNotificationDestinations) &&
        Objects.equals(this.workspaceOrganizationalUnits, createWorkspaceRequest.workspaceOrganizationalUnits) &&
        Objects.equals(this.workspaceRoleArn, createWorkspaceRequest.workspaceRoleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountAccessType, authenticationProviders, clientToken, _configuration, grafanaVersion, networkAccessControl, organizationRoleName, permissionType, stackSetName, tags, vpcConfiguration, workspaceDataSources, workspaceDescription, workspaceName, workspaceNotificationDestinations, workspaceOrganizationalUnits, workspaceRoleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWorkspaceRequest {\n");
    sb.append("    accountAccessType: ").append(toIndentedString(accountAccessType)).append("\n");
    sb.append("    authenticationProviders: ").append(toIndentedString(authenticationProviders)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    grafanaVersion: ").append(toIndentedString(grafanaVersion)).append("\n");
    sb.append("    networkAccessControl: ").append(toIndentedString(networkAccessControl)).append("\n");
    sb.append("    organizationRoleName: ").append("*").append("\n");
    sb.append("    permissionType: ").append(toIndentedString(permissionType)).append("\n");
    sb.append("    stackSetName: ").append(toIndentedString(stackSetName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    vpcConfiguration: ").append(toIndentedString(vpcConfiguration)).append("\n");
    sb.append("    workspaceDataSources: ").append(toIndentedString(workspaceDataSources)).append("\n");
    sb.append("    workspaceDescription: ").append("*").append("\n");
    sb.append("    workspaceName: ").append("*").append("\n");
    sb.append("    workspaceNotificationDestinations: ").append(toIndentedString(workspaceNotificationDestinations)).append("\n");
    sb.append("    workspaceOrganizationalUnits: ").append(toIndentedString(workspaceOrganizationalUnits)).append("\n");
    sb.append("    workspaceRoleArn: ").append("*").append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountAccessType");
    openapiFields.add("authenticationProviders");
    openapiFields.add("clientToken");
    openapiFields.add("configuration");
    openapiFields.add("grafanaVersion");
    openapiFields.add("networkAccessControl");
    openapiFields.add("organizationRoleName");
    openapiFields.add("permissionType");
    openapiFields.add("stackSetName");
    openapiFields.add("tags");
    openapiFields.add("vpcConfiguration");
    openapiFields.add("workspaceDataSources");
    openapiFields.add("workspaceDescription");
    openapiFields.add("workspaceName");
    openapiFields.add("workspaceNotificationDestinations");
    openapiFields.add("workspaceOrganizationalUnits");
    openapiFields.add("workspaceRoleArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountAccessType");
    openapiRequiredFields.add("authenticationProviders");
    openapiRequiredFields.add("permissionType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateWorkspaceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateWorkspaceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateWorkspaceRequest is not found in the empty JSON string", CreateWorkspaceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateWorkspaceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateWorkspaceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateWorkspaceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountAccessType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountAccessType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountAccessType").toString()));
      }
      // validate the required field `accountAccessType`
      AccountAccessTypeEnum.validateJsonElement(jsonObj.get("accountAccessType"));
      // ensure the required json array is present
      if (jsonObj.get("authenticationProviders") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("authenticationProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationProviders` to be an array in the JSON string but got `%s`", jsonObj.get("authenticationProviders").toString()));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if ((jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) && !jsonObj.get("configuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configuration").toString()));
      }
      if ((jsonObj.get("grafanaVersion") != null && !jsonObj.get("grafanaVersion").isJsonNull()) && !jsonObj.get("grafanaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grafanaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grafanaVersion").toString()));
      }
      // validate the optional field `networkAccessControl`
      if (jsonObj.get("networkAccessControl") != null && !jsonObj.get("networkAccessControl").isJsonNull()) {
        CreateWorkspaceRequestNetworkAccessControl.validateJsonElement(jsonObj.get("networkAccessControl"));
      }
      if ((jsonObj.get("organizationRoleName") != null && !jsonObj.get("organizationRoleName").isJsonNull()) && !jsonObj.get("organizationRoleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationRoleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationRoleName").toString()));
      }
      if (!jsonObj.get("permissionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionType").toString()));
      }
      // validate the required field `permissionType`
      PermissionTypeEnum.validateJsonElement(jsonObj.get("permissionType"));
      if ((jsonObj.get("stackSetName") != null && !jsonObj.get("stackSetName").isJsonNull()) && !jsonObj.get("stackSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stackSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stackSetName").toString()));
      }
      // validate the optional field `vpcConfiguration`
      if (jsonObj.get("vpcConfiguration") != null && !jsonObj.get("vpcConfiguration").isJsonNull()) {
        CreateWorkspaceRequestVpcConfiguration.validateJsonElement(jsonObj.get("vpcConfiguration"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workspaceDataSources") != null && !jsonObj.get("workspaceDataSources").isJsonNull() && !jsonObj.get("workspaceDataSources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceDataSources` to be an array in the JSON string but got `%s`", jsonObj.get("workspaceDataSources").toString()));
      }
      if ((jsonObj.get("workspaceDescription") != null && !jsonObj.get("workspaceDescription").isJsonNull()) && !jsonObj.get("workspaceDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceDescription").toString()));
      }
      if ((jsonObj.get("workspaceName") != null && !jsonObj.get("workspaceName").isJsonNull()) && !jsonObj.get("workspaceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workspaceNotificationDestinations") != null && !jsonObj.get("workspaceNotificationDestinations").isJsonNull() && !jsonObj.get("workspaceNotificationDestinations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceNotificationDestinations` to be an array in the JSON string but got `%s`", jsonObj.get("workspaceNotificationDestinations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workspaceOrganizationalUnits") != null && !jsonObj.get("workspaceOrganizationalUnits").isJsonNull() && !jsonObj.get("workspaceOrganizationalUnits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceOrganizationalUnits` to be an array in the JSON string but got `%s`", jsonObj.get("workspaceOrganizationalUnits").toString()));
      }
      if ((jsonObj.get("workspaceRoleArn") != null && !jsonObj.get("workspaceRoleArn").isJsonNull()) && !jsonObj.get("workspaceRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceRoleArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateWorkspaceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateWorkspaceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateWorkspaceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateWorkspaceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateWorkspaceRequest>() {
           @Override
           public void write(JsonWriter out, CreateWorkspaceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateWorkspaceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateWorkspaceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateWorkspaceRequest
   * @throws IOException if the JSON string is invalid with respect to CreateWorkspaceRequest
   */
  public static CreateWorkspaceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateWorkspaceRequest.class);
  }

  /**
   * Convert an instance of CreateWorkspaceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

