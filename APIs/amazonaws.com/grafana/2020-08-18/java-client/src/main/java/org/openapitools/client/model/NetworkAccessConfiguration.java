/*
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The configuration settings for in-bound network access to your workspace.&lt;/p&gt; &lt;p&gt;When this is configured, only listed IP addresses and VPC endpoints will be able to access your workspace. Standard Grafana authentication and authorization are still required.&lt;/p&gt; &lt;p&gt;Access is granted to a caller that is in either the IP address list or the VPC endpoint list - they do not need to be in both.&lt;/p&gt; &lt;p&gt;If this is not configured, or is removed, then all IP addresses and VPC endpoints are allowed. Standard Grafana authentication and authorization are still required.&lt;/p&gt; &lt;note&gt; &lt;p&gt;While both &lt;code&gt;prefixListIds&lt;/code&gt; and &lt;code&gt;vpceIds&lt;/code&gt; are required, you can pass in an empty array of strings for either parameter if you do not want to allow any of that type.&lt;/p&gt; &lt;p&gt;If both are passed as empty arrays, no traffic is allowed to the workspace, because only &lt;i&gt;explicitly&lt;/i&gt; allowed connections are accepted.&lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:13.859303-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkAccessConfiguration {
  public static final String SERIALIZED_NAME_PREFIX_LIST_IDS = "prefixListIds";
  @SerializedName(SERIALIZED_NAME_PREFIX_LIST_IDS)
  private List prefixListIds;

  public static final String SERIALIZED_NAME_VPCE_IDS = "vpceIds";
  @SerializedName(SERIALIZED_NAME_VPCE_IDS)
  private List vpceIds;

  public NetworkAccessConfiguration() {
  }

  public NetworkAccessConfiguration prefixListIds(List prefixListIds) {
    this.prefixListIds = prefixListIds;
    return this;
  }

  /**
   * Get prefixListIds
   * @return prefixListIds
   */
  @javax.annotation.Nonnull
  public List getPrefixListIds() {
    return prefixListIds;
  }

  public void setPrefixListIds(List prefixListIds) {
    this.prefixListIds = prefixListIds;
  }


  public NetworkAccessConfiguration vpceIds(List vpceIds) {
    this.vpceIds = vpceIds;
    return this;
  }

  /**
   * Get vpceIds
   * @return vpceIds
   */
  @javax.annotation.Nonnull
  public List getVpceIds() {
    return vpceIds;
  }

  public void setVpceIds(List vpceIds) {
    this.vpceIds = vpceIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkAccessConfiguration networkAccessConfiguration = (NetworkAccessConfiguration) o;
    return Objects.equals(this.prefixListIds, networkAccessConfiguration.prefixListIds) &&
        Objects.equals(this.vpceIds, networkAccessConfiguration.vpceIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prefixListIds, vpceIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkAccessConfiguration {\n");
    sb.append("    prefixListIds: ").append(toIndentedString(prefixListIds)).append("\n");
    sb.append("    vpceIds: ").append(toIndentedString(vpceIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("prefixListIds");
    openapiFields.add("vpceIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("prefixListIds");
    openapiRequiredFields.add("vpceIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkAccessConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkAccessConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkAccessConfiguration is not found in the empty JSON string", NetworkAccessConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkAccessConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkAccessConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NetworkAccessConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `prefixListIds`
      List.validateJsonElement(jsonObj.get("prefixListIds"));
      // validate the required field `vpceIds`
      List.validateJsonElement(jsonObj.get("vpceIds"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkAccessConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkAccessConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkAccessConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkAccessConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkAccessConfiguration>() {
           @Override
           public void write(JsonWriter out, NetworkAccessConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkAccessConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkAccessConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkAccessConfiguration
   * @throws IOException if the JSON string is invalid with respect to NetworkAccessConfiguration
   */
  public static NetworkAccessConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkAccessConfiguration.class);
  }

  /**
   * Convert an instance of NetworkAccessConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

