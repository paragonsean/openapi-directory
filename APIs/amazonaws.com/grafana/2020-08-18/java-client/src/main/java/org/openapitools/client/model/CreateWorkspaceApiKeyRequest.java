/*
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateWorkspaceApiKeyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:13.859303-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateWorkspaceApiKeyRequest {
  public static final String SERIALIZED_NAME_KEY_NAME = "keyName";
  @SerializedName(SERIALIZED_NAME_KEY_NAME)
  private String keyName;

  public static final String SERIALIZED_NAME_KEY_ROLE = "keyRole";
  @SerializedName(SERIALIZED_NAME_KEY_ROLE)
  private String keyRole;

  public static final String SERIALIZED_NAME_SECONDS_TO_LIVE = "secondsToLive";
  @SerializedName(SERIALIZED_NAME_SECONDS_TO_LIVE)
  private Integer secondsToLive;

  public CreateWorkspaceApiKeyRequest() {
  }

  public CreateWorkspaceApiKeyRequest keyName(String keyName) {
    this.keyName = keyName;
    return this;
  }

  /**
   * Specifies the name of the key. Keynames must be unique to the workspace.
   * @return keyName
   */
  @javax.annotation.Nonnull
  public String getKeyName() {
    return keyName;
  }

  public void setKeyName(String keyName) {
    this.keyName = keyName;
  }


  public CreateWorkspaceApiKeyRequest keyRole(String keyRole) {
    this.keyRole = keyRole;
    return this;
  }

  /**
   * &lt;p&gt;Specifies the permission level of the key.&lt;/p&gt; &lt;p&gt; Valid values: &lt;code&gt;VIEWER&lt;/code&gt;|&lt;code&gt;EDITOR&lt;/code&gt;|&lt;code&gt;ADMIN&lt;/code&gt; &lt;/p&gt;
   * @return keyRole
   */
  @javax.annotation.Nonnull
  public String getKeyRole() {
    return keyRole;
  }

  public void setKeyRole(String keyRole) {
    this.keyRole = keyRole;
  }


  public CreateWorkspaceApiKeyRequest secondsToLive(Integer secondsToLive) {
    this.secondsToLive = secondsToLive;
    return this;
  }

  /**
   * Specifies the time in seconds until the key expires. Keys can be valid for up to 30 days.
   * minimum: 1
   * maximum: 2592000
   * @return secondsToLive
   */
  @javax.annotation.Nonnull
  public Integer getSecondsToLive() {
    return secondsToLive;
  }

  public void setSecondsToLive(Integer secondsToLive) {
    this.secondsToLive = secondsToLive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWorkspaceApiKeyRequest createWorkspaceApiKeyRequest = (CreateWorkspaceApiKeyRequest) o;
    return Objects.equals(this.keyName, createWorkspaceApiKeyRequest.keyName) &&
        Objects.equals(this.keyRole, createWorkspaceApiKeyRequest.keyRole) &&
        Objects.equals(this.secondsToLive, createWorkspaceApiKeyRequest.secondsToLive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyName, keyRole, secondsToLive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWorkspaceApiKeyRequest {\n");
    sb.append("    keyName: ").append(toIndentedString(keyName)).append("\n");
    sb.append("    keyRole: ").append(toIndentedString(keyRole)).append("\n");
    sb.append("    secondsToLive: ").append(toIndentedString(secondsToLive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyName");
    openapiFields.add("keyRole");
    openapiFields.add("secondsToLive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("keyName");
    openapiRequiredFields.add("keyRole");
    openapiRequiredFields.add("secondsToLive");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateWorkspaceApiKeyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateWorkspaceApiKeyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateWorkspaceApiKeyRequest is not found in the empty JSON string", CreateWorkspaceApiKeyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateWorkspaceApiKeyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateWorkspaceApiKeyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateWorkspaceApiKeyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("keyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyName").toString()));
      }
      if (!jsonObj.get("keyRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyRole").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateWorkspaceApiKeyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateWorkspaceApiKeyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateWorkspaceApiKeyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateWorkspaceApiKeyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateWorkspaceApiKeyRequest>() {
           @Override
           public void write(JsonWriter out, CreateWorkspaceApiKeyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateWorkspaceApiKeyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateWorkspaceApiKeyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateWorkspaceApiKeyRequest
   * @throws IOException if the JSON string is invalid with respect to CreateWorkspaceApiKeyRequest
   */
  public static CreateWorkspaceApiKeyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateWorkspaceApiKeyRequest.class);
  }

  /**
   * Convert an instance of CreateWorkspaceApiKeyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

