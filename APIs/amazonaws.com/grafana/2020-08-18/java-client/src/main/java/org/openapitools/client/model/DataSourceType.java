/*
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets DataSourceType
 */
@JsonAdapter(DataSourceType.Adapter.class)
public enum DataSourceType {
  
  AMAZON_OPENSEARCH_SERVICE("AMAZON_OPENSEARCH_SERVICE"),
  
  CLOUDWATCH("CLOUDWATCH"),
  
  PROMETHEUS("PROMETHEUS"),
  
  XRAY("XRAY"),
  
  TIMESTREAM("TIMESTREAM"),
  
  SITEWISE("SITEWISE"),
  
  ATHENA("ATHENA"),
  
  REDSHIFT("REDSHIFT"),
  
  TWINMAKER("TWINMAKER");

  private String value;

  DataSourceType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DataSourceType fromValue(String value) {
    for (DataSourceType b : DataSourceType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DataSourceType> {
    @Override
    public void write(final JsonWriter jsonWriter, final DataSourceType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DataSourceType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DataSourceType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DataSourceType.fromValue(value);
  }
}

