/*
 * Amazon Managed Grafana
 * <p>Amazon Managed Grafana is a fully managed and secure data visualization service that you can use to instantly query, correlate, and visualize operational metrics, logs, and traces from multiple sources. Amazon Managed Grafana makes it easy to deploy, operate, and scale Grafana, a widely deployed data visualization tool that is popular for its extensible data support.</p> <p>With Amazon Managed Grafana, you create logically isolated Grafana servers called <i>workspaces</i>. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces without having to build, package, or deploy any hardware to run Grafana servers. </p>
 *
 * The version of the OpenAPI document: 2020-08-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateLicenseResponse;
import org.openapitools.client.model.CreateWorkspaceApiKeyRequest;
import org.openapitools.client.model.CreateWorkspaceApiKeyResponse;
import org.openapitools.client.model.CreateWorkspaceRequest;
import org.openapitools.client.model.CreateWorkspaceResponse;
import org.openapitools.client.model.DeleteWorkspaceApiKeyResponse;
import org.openapitools.client.model.DeleteWorkspaceResponse;
import org.openapitools.client.model.DescribeWorkspaceAuthenticationResponse;
import org.openapitools.client.model.DescribeWorkspaceConfigurationResponse;
import org.openapitools.client.model.DescribeWorkspaceResponse;
import org.openapitools.client.model.DisassociateLicenseResponse;
import org.openapitools.client.model.ListPermissionsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListVersionsResponse;
import org.openapitools.client.model.ListWorkspacesResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdatePermissionsRequest;
import org.openapitools.client.model.UpdatePermissionsResponse;
import org.openapitools.client.model.UpdateWorkspaceAuthenticationRequest;
import org.openapitools.client.model.UpdateWorkspaceAuthenticationResponse;
import org.openapitools.client.model.UpdateWorkspaceConfigurationRequest;
import org.openapitools.client.model.UpdateWorkspaceRequest;
import org.openapitools.client.model.UpdateWorkspaceResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Assigns a Grafana Enterprise license to a workspace. Upgrading to Grafana Enterprise incurs additional fees. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/grafana/latest/userguide/upgrade-to-Grafana-Enterprise.html\&quot;&gt;Upgrade a workspace to Grafana Enterprise&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateLicenseTest() throws ApiException {
        String licenseType = null;
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateLicenseResponse response = api.associateLicense(licenseType, workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a &lt;i&gt;workspace&lt;/i&gt;. In a workspace, you can create Grafana dashboards and visualizations to analyze your metrics, logs, and traces. You don&#39;t have to build, package, or deploy any hardware to run the Grafana server.&lt;/p&gt; &lt;p&gt;Don&#39;t use &lt;code&gt;CreateWorkspace&lt;/code&gt; to modify an existing workspace. Instead, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdateWorkspace.html\&quot;&gt;UpdateWorkspace&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkspaceTest() throws ApiException {
        CreateWorkspaceRequest createWorkspaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkspaceResponse response = api.createWorkspace(createWorkspaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Grafana API key for the workspace. This key can be used to authenticate requests sent to the workspace&#39;s HTTP API. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/grafana/latest/userguide/Using-Grafana-APIs.html\&quot;&gt;https://docs.aws.amazon.com/grafana/latest/userguide/Using-Grafana-APIs.html&lt;/a&gt; for available APIs and example requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkspaceApiKeyTest() throws ApiException {
        String workspaceId = null;
        CreateWorkspaceApiKeyRequest createWorkspaceApiKeyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkspaceApiKeyResponse response = api.createWorkspaceApiKey(workspaceId, createWorkspaceApiKeyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon Managed Grafana workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteWorkspaceResponse response = api.deleteWorkspace(workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Grafana API key for the workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkspaceApiKeyTest() throws ApiException {
        String keyName = null;
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteWorkspaceApiKeyResponse response = api.deleteWorkspaceApiKey(keyName, workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Displays information about one Amazon Managed Grafana workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkspaceTest() throws ApiException {
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeWorkspaceResponse response = api.describeWorkspace(workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Displays information about the authentication methods used in one Amazon Managed Grafana workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkspaceAuthenticationTest() throws ApiException {
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeWorkspaceAuthenticationResponse response = api.describeWorkspaceAuthentication(workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the current configuration string for the given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeWorkspaceConfigurationTest() throws ApiException {
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeWorkspaceConfigurationResponse response = api.describeWorkspaceConfiguration(workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the Grafana Enterprise license from a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateLicenseTest() throws ApiException {
        String licenseType = null;
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateLicenseResponse response = api.disassociateLicense(licenseType, workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the users and groups who have the Grafana &lt;code&gt;Admin&lt;/code&gt; and &lt;code&gt;Editor&lt;/code&gt; roles in this workspace. If you use this operation without specifying &lt;code&gt;userId&lt;/code&gt; or &lt;code&gt;groupId&lt;/code&gt;, the operation returns the roles of all users and groups. If you specify a &lt;code&gt;userId&lt;/code&gt; or a &lt;code&gt;groupId&lt;/code&gt;, only the roles for that user or group are returned. If you do this, you can specify only one &lt;code&gt;userId&lt;/code&gt; or one &lt;code&gt;groupId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPermissionsTest() throws ApiException {
        String workspaceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String groupId = null;
        Integer maxResults = null;
        String nextToken = null;
        String userId = null;
        String userType = null;
        ListPermissionsResponse response = api.listPermissions(workspaceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, groupId, maxResults, nextToken, userId, userType);
        // TODO: test validations
    }

    /**
     * The &lt;code&gt;ListTagsForResource&lt;/code&gt; operation returns the tags that are associated with the Amazon Managed Service for Grafana resource specified by the &lt;code&gt;resourceArn&lt;/code&gt;. Currently, the only resource that can be tagged is a workspace. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists available versions of Grafana. These are available when calling &lt;code&gt;CreateWorkspace&lt;/code&gt;. Optionally, include a workspace to list the versions to which it can be upgraded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVersionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String workspaceId = null;
        ListVersionsResponse response = api.listVersions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, workspaceId);
        // TODO: test validations
    }

    /**
     * Returns a list of Amazon Managed Grafana workspaces in the account, with some information about each workspace. For more complete information about one workspace, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AAMG/latest/APIReference/API_DescribeWorkspace.html\&quot;&gt;DescribeWorkspace&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkspacesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListWorkspacesResponse response = api.listWorkspaces(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;The &lt;code&gt;TagResource&lt;/code&gt; operation associates tags with an Amazon Managed Grafana resource. Currently, the only resource that can be tagged is workspaces. &lt;/p&gt; &lt;p&gt;If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The &lt;code&gt;UntagResource&lt;/code&gt; operation removes the association of the tag with the Amazon Managed Grafana resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates which users in a workspace have the Grafana &lt;code&gt;Admin&lt;/code&gt; or &lt;code&gt;Editor&lt;/code&gt; roles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePermissionsTest() throws ApiException {
        String workspaceId = null;
        UpdatePermissionsRequest updatePermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePermissionsResponse response = api.updatePermissions(workspaceId, updatePermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies an existing Amazon Managed Grafana workspace. If you use this operation and omit any optional parameters, the existing values of those parameters are not changed.&lt;/p&gt; &lt;p&gt;To modify the user authentication methods that the workspace uses, such as SAML or IAM Identity Center, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdateWorkspaceAuthentication.html\&quot;&gt;UpdateWorkspaceAuthentication&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To modify which users in the workspace have the &lt;code&gt;Admin&lt;/code&gt; and &lt;code&gt;Editor&lt;/code&gt; Grafana roles, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdatePermissions.html\&quot;&gt;UpdatePermissions&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkspaceTest() throws ApiException {
        String workspaceId = null;
        UpdateWorkspaceRequest updateWorkspaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateWorkspaceResponse response = api.updateWorkspace(workspaceId, updateWorkspaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Use this operation to define the identity provider (IdP) that this workspace authenticates users from, using SAML. You can also map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the &lt;code&gt;Admin&lt;/code&gt; and &lt;code&gt;Editor&lt;/code&gt; roles in the workspace.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Changes to the authentication method for a workspace may take a few minutes to take effect.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkspaceAuthenticationTest() throws ApiException {
        String workspaceId = null;
        UpdateWorkspaceAuthenticationRequest updateWorkspaceAuthenticationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateWorkspaceAuthenticationResponse response = api.updateWorkspaceAuthentication(workspaceId, updateWorkspaceAuthenticationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration string for the given workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkspaceConfigurationTest() throws ApiException {
        String workspaceId = null;
        UpdateWorkspaceConfigurationRequest updateWorkspaceConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateWorkspaceConfiguration(workspaceId, updateWorkspaceConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
