/*
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddCustomAttributesRequest;
import org.openapitools.client.model.AdminAddUserToGroupRequest;
import org.openapitools.client.model.AdminConfirmSignUpRequest;
import org.openapitools.client.model.AdminCreateUserRequest;
import org.openapitools.client.model.AdminCreateUserResponse;
import org.openapitools.client.model.AdminDeleteUserAttributesRequest;
import org.openapitools.client.model.AdminDeleteUserRequest;
import org.openapitools.client.model.AdminDisableProviderForUserRequest;
import org.openapitools.client.model.AdminDisableUserRequest;
import org.openapitools.client.model.AdminEnableUserRequest;
import org.openapitools.client.model.AdminForgetDeviceRequest;
import org.openapitools.client.model.AdminGetDeviceRequest;
import org.openapitools.client.model.AdminGetDeviceResponse;
import org.openapitools.client.model.AdminGetUserRequest;
import org.openapitools.client.model.AdminGetUserResponse;
import org.openapitools.client.model.AdminInitiateAuthRequest;
import org.openapitools.client.model.AdminInitiateAuthResponse;
import org.openapitools.client.model.AdminLinkProviderForUserRequest;
import org.openapitools.client.model.AdminListDevicesRequest;
import org.openapitools.client.model.AdminListDevicesResponse;
import org.openapitools.client.model.AdminListGroupsForUserRequest;
import org.openapitools.client.model.AdminListGroupsForUserResponse;
import org.openapitools.client.model.AdminListUserAuthEventsRequest;
import org.openapitools.client.model.AdminListUserAuthEventsResponse;
import org.openapitools.client.model.AdminRemoveUserFromGroupRequest;
import org.openapitools.client.model.AdminResetUserPasswordRequest;
import org.openapitools.client.model.AdminRespondToAuthChallengeRequest;
import org.openapitools.client.model.AdminRespondToAuthChallengeResponse;
import org.openapitools.client.model.AdminSetUserMFAPreferenceRequest;
import org.openapitools.client.model.AdminSetUserPasswordRequest;
import org.openapitools.client.model.AdminSetUserSettingsRequest;
import org.openapitools.client.model.AdminUpdateAuthEventFeedbackRequest;
import org.openapitools.client.model.AdminUpdateDeviceStatusRequest;
import org.openapitools.client.model.AdminUpdateUserAttributesRequest;
import org.openapitools.client.model.AdminUserGlobalSignOutRequest;
import org.openapitools.client.model.AssociateSoftwareTokenRequest;
import org.openapitools.client.model.AssociateSoftwareTokenResponse;
import org.openapitools.client.model.ChangePasswordRequest;
import org.openapitools.client.model.ConfirmDeviceRequest;
import org.openapitools.client.model.ConfirmDeviceResponse;
import org.openapitools.client.model.ConfirmForgotPasswordRequest;
import org.openapitools.client.model.ConfirmSignUpRequest;
import org.openapitools.client.model.CreateGroupRequest;
import org.openapitools.client.model.CreateGroupResponse;
import org.openapitools.client.model.CreateIdentityProviderRequest;
import org.openapitools.client.model.CreateIdentityProviderResponse;
import org.openapitools.client.model.CreateResourceServerRequest;
import org.openapitools.client.model.CreateResourceServerResponse;
import org.openapitools.client.model.CreateUserImportJobRequest;
import org.openapitools.client.model.CreateUserImportJobResponse;
import org.openapitools.client.model.CreateUserPoolClientRequest;
import org.openapitools.client.model.CreateUserPoolClientResponse;
import org.openapitools.client.model.CreateUserPoolDomainRequest;
import org.openapitools.client.model.CreateUserPoolDomainResponse;
import org.openapitools.client.model.CreateUserPoolRequest;
import org.openapitools.client.model.CreateUserPoolResponse;
import org.openapitools.client.model.DeleteGroupRequest;
import org.openapitools.client.model.DeleteIdentityProviderRequest;
import org.openapitools.client.model.DeleteResourceServerRequest;
import org.openapitools.client.model.DeleteUserAttributesRequest;
import org.openapitools.client.model.DeleteUserPoolClientRequest;
import org.openapitools.client.model.DeleteUserPoolDomainRequest;
import org.openapitools.client.model.DeleteUserPoolRequest;
import org.openapitools.client.model.DeleteUserRequest;
import org.openapitools.client.model.DescribeIdentityProviderRequest;
import org.openapitools.client.model.DescribeIdentityProviderResponse;
import org.openapitools.client.model.DescribeResourceServerRequest;
import org.openapitools.client.model.DescribeResourceServerResponse;
import org.openapitools.client.model.DescribeRiskConfigurationRequest;
import org.openapitools.client.model.DescribeRiskConfigurationResponse;
import org.openapitools.client.model.DescribeUserImportJobRequest;
import org.openapitools.client.model.DescribeUserImportJobResponse;
import org.openapitools.client.model.DescribeUserPoolClientRequest;
import org.openapitools.client.model.DescribeUserPoolClientResponse;
import org.openapitools.client.model.DescribeUserPoolDomainRequest;
import org.openapitools.client.model.DescribeUserPoolDomainResponse;
import org.openapitools.client.model.DescribeUserPoolRequest;
import org.openapitools.client.model.DescribeUserPoolResponse;
import org.openapitools.client.model.ForgetDeviceRequest;
import org.openapitools.client.model.ForgotPasswordRequest;
import org.openapitools.client.model.ForgotPasswordResponse;
import org.openapitools.client.model.GetCSVHeaderRequest;
import org.openapitools.client.model.GetCSVHeaderResponse;
import org.openapitools.client.model.GetDeviceRequest;
import org.openapitools.client.model.GetDeviceResponse;
import org.openapitools.client.model.GetGroupRequest;
import org.openapitools.client.model.GetGroupResponse;
import org.openapitools.client.model.GetIdentityProviderByIdentifierRequest;
import org.openapitools.client.model.GetIdentityProviderByIdentifierResponse;
import org.openapitools.client.model.GetLogDeliveryConfigurationRequest;
import org.openapitools.client.model.GetLogDeliveryConfigurationResponse;
import org.openapitools.client.model.GetSigningCertificateRequest;
import org.openapitools.client.model.GetSigningCertificateResponse;
import org.openapitools.client.model.GetUICustomizationRequest;
import org.openapitools.client.model.GetUICustomizationResponse;
import org.openapitools.client.model.GetUserAttributeVerificationCodeRequest;
import org.openapitools.client.model.GetUserAttributeVerificationCodeResponse;
import org.openapitools.client.model.GetUserPoolMfaConfigRequest;
import org.openapitools.client.model.GetUserPoolMfaConfigResponse;
import org.openapitools.client.model.GetUserRequest;
import org.openapitools.client.model.GetUserResponse;
import org.openapitools.client.model.GlobalSignOutRequest;
import org.openapitools.client.model.InitiateAuthRequest;
import org.openapitools.client.model.InitiateAuthResponse;
import org.openapitools.client.model.ListDevicesRequest;
import org.openapitools.client.model.ListDevicesResponse;
import org.openapitools.client.model.ListGroupsRequest;
import org.openapitools.client.model.ListGroupsResponse;
import org.openapitools.client.model.ListIdentityProvidersRequest;
import org.openapitools.client.model.ListIdentityProvidersResponse;
import org.openapitools.client.model.ListResourceServersRequest;
import org.openapitools.client.model.ListResourceServersResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListUserImportJobsRequest;
import org.openapitools.client.model.ListUserImportJobsResponse;
import org.openapitools.client.model.ListUserPoolClientsRequest;
import org.openapitools.client.model.ListUserPoolClientsResponse;
import org.openapitools.client.model.ListUserPoolsRequest;
import org.openapitools.client.model.ListUserPoolsResponse;
import org.openapitools.client.model.ListUsersInGroupRequest;
import org.openapitools.client.model.ListUsersInGroupResponse;
import org.openapitools.client.model.ListUsersRequest;
import org.openapitools.client.model.ListUsersResponse;
import org.openapitools.client.model.ResendConfirmationCodeRequest;
import org.openapitools.client.model.ResendConfirmationCodeResponse;
import org.openapitools.client.model.RespondToAuthChallengeRequest;
import org.openapitools.client.model.RespondToAuthChallengeResponse;
import org.openapitools.client.model.RevokeTokenRequest;
import org.openapitools.client.model.SetLogDeliveryConfigurationRequest;
import org.openapitools.client.model.SetLogDeliveryConfigurationResponse;
import org.openapitools.client.model.SetRiskConfigurationRequest;
import org.openapitools.client.model.SetRiskConfigurationResponse;
import org.openapitools.client.model.SetUICustomizationRequest;
import org.openapitools.client.model.SetUICustomizationResponse;
import org.openapitools.client.model.SetUserMFAPreferenceRequest;
import org.openapitools.client.model.SetUserPoolMfaConfigRequest;
import org.openapitools.client.model.SetUserPoolMfaConfigResponse;
import org.openapitools.client.model.SetUserSettingsRequest;
import org.openapitools.client.model.SignUpRequest;
import org.openapitools.client.model.SignUpResponse;
import org.openapitools.client.model.StartUserImportJobRequest;
import org.openapitools.client.model.StartUserImportJobResponse;
import org.openapitools.client.model.StopUserImportJobRequest;
import org.openapitools.client.model.StopUserImportJobResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateAuthEventFeedbackRequest;
import org.openapitools.client.model.UpdateDeviceStatusRequest;
import org.openapitools.client.model.UpdateGroupRequest;
import org.openapitools.client.model.UpdateGroupResponse;
import org.openapitools.client.model.UpdateIdentityProviderRequest;
import org.openapitools.client.model.UpdateIdentityProviderResponse;
import org.openapitools.client.model.UpdateResourceServerRequest;
import org.openapitools.client.model.UpdateResourceServerResponse;
import org.openapitools.client.model.UpdateUserAttributesRequest;
import org.openapitools.client.model.UpdateUserAttributesResponse;
import org.openapitools.client.model.UpdateUserPoolClientRequest;
import org.openapitools.client.model.UpdateUserPoolClientResponse;
import org.openapitools.client.model.UpdateUserPoolDomainRequest;
import org.openapitools.client.model.UpdateUserPoolDomainResponse;
import org.openapitools.client.model.UpdateUserPoolRequest;
import org.openapitools.client.model.VerifySoftwareTokenRequest;
import org.openapitools.client.model.VerifySoftwareTokenResponse;
import org.openapitools.client.model.VerifyUserAttributeRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Adds additional user attributes to the user pool schema.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCustomAttributesTest() throws ApiException {
        String xAmzTarget = null;
        AddCustomAttributesRequest addCustomAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.addCustomAttributes(xAmzTarget, addCustomAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds the specified user to the specified group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminAddUserToGroupTest() throws ApiException {
        String xAmzTarget = null;
        AdminAddUserToGroupRequest adminAddUserToGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.adminAddUserToGroup(xAmzTarget, adminAddUserToGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Confirms user registration as an admin without using a confirmation code. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminConfirmSignUpTest() throws ApiException {
        String xAmzTarget = null;
        AdminConfirmSignUpRequest adminConfirmSignUpRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminConfirmSignUp(xAmzTarget, adminConfirmSignUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new user in the specified user pool.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MessageAction&lt;/code&gt; isn&#39;t set, the default is to send a welcome message via email or phone (SMS).&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This message is based on a template that you configured in your call to create or update a user pool. This template includes your custom sign-up instructions and placeholders for user name and temporary password.&lt;/p&gt; &lt;p&gt;Alternatively, you can call &lt;code&gt;AdminCreateUser&lt;/code&gt; with &lt;code&gt;SUPPRESS&lt;/code&gt; for the &lt;code&gt;MessageAction&lt;/code&gt; parameter, and Amazon Cognito won&#39;t send any email. &lt;/p&gt; &lt;p&gt;In either case, the user will be in the &lt;code&gt;FORCE_CHANGE_PASSWORD&lt;/code&gt; state until they sign in and change their password.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminCreateUserTest() throws ApiException {
        String xAmzTarget = null;
        AdminCreateUserRequest adminCreateUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AdminCreateUserResponse response = api.adminCreateUser(xAmzTarget, adminCreateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a user as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminDeleteUserTest() throws ApiException {
        String xAmzTarget = null;
        AdminDeleteUserRequest adminDeleteUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.adminDeleteUser(xAmzTarget, adminDeleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the user attributes in a user pool as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminDeleteUserAttributesTest() throws ApiException {
        String xAmzTarget = null;
        AdminDeleteUserAttributesRequest adminDeleteUserAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminDeleteUserAttributes(xAmzTarget, adminDeleteUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Prevents the user from signing in with the specified external (SAML or social) identity provider (IdP). If the user that you want to deactivate is a Amazon Cognito user pools native username + password user, they can&#39;t use their password to sign in. If the user to deactivate is a linked external IdP user, any link between that user and an existing user is removed. When the external user signs in again, and the user is no longer attached to the previously linked &lt;code&gt;DestinationUser&lt;/code&gt;, the user must create a new user account. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminLinkProviderForUser.html\&quot;&gt;AdminLinkProviderForUser&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ProviderName&lt;/code&gt; must match the value specified when creating an IdP for the pool. &lt;/p&gt; &lt;p&gt;To deactivate a native username + password user, the &lt;code&gt;ProviderName&lt;/code&gt; value must be &lt;code&gt;Cognito&lt;/code&gt; and the &lt;code&gt;ProviderAttributeName&lt;/code&gt; must be &lt;code&gt;Cognito_Subject&lt;/code&gt;. The &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must be the name that is used in the user pool for the user.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ProviderAttributeName&lt;/code&gt; must always be &lt;code&gt;Cognito_Subject&lt;/code&gt; for social IdPs. The &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must always be the exact subject that was used when the user was originally linked as a source user.&lt;/p&gt; &lt;p&gt;For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign in, the &lt;code&gt;ProviderAttributeName&lt;/code&gt; and &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must be the same values that were used for the &lt;code&gt;SourceUser&lt;/code&gt; when the identities were originally linked using &lt;code&gt; AdminLinkProviderForUser&lt;/code&gt; call. (If the linking was done with &lt;code&gt;ProviderAttributeName&lt;/code&gt; set to &lt;code&gt;Cognito_Subject&lt;/code&gt;, the same applies here). However, if the user has already signed in, the &lt;code&gt;ProviderAttributeName&lt;/code&gt; must be &lt;code&gt;Cognito_Subject&lt;/code&gt; and &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must be the subject of the SAML assertion.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminDisableProviderForUserTest() throws ApiException {
        String xAmzTarget = null;
        AdminDisableProviderForUserRequest adminDisableProviderForUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminDisableProviderForUser(xAmzTarget, adminDisableProviderForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deactivates a user and revokes all access tokens for the user. A deactivated user can&#39;t sign in, but still appears in the responses to &lt;code&gt;GetUser&lt;/code&gt; and &lt;code&gt;ListUsers&lt;/code&gt; API requests.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminDisableUserTest() throws ApiException {
        String xAmzTarget = null;
        AdminDisableUserRequest adminDisableUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminDisableUser(xAmzTarget, adminDisableUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables the specified user as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminEnableUserTest() throws ApiException {
        String xAmzTarget = null;
        AdminEnableUserRequest adminEnableUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminEnableUser(xAmzTarget, adminEnableUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Forgets the device, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminForgetDeviceTest() throws ApiException {
        String xAmzTarget = null;
        AdminForgetDeviceRequest adminForgetDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.adminForgetDevice(xAmzTarget, adminForgetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the device, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminGetDeviceTest() throws ApiException {
        String xAmzTarget = null;
        AdminGetDeviceRequest adminGetDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AdminGetDeviceResponse response = api.adminGetDevice(xAmzTarget, adminGetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the specified user by user name in a user pool as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminGetUserTest() throws ApiException {
        String xAmzTarget = null;
        AdminGetUserRequest adminGetUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AdminGetUserResponse response = api.adminGetUser(xAmzTarget, adminGetUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Initiates the authentication flow, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminInitiateAuthTest() throws ApiException {
        String xAmzTarget = null;
        AdminInitiateAuthRequest adminInitiateAuthRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AdminInitiateAuthResponse response = api.adminInitiateAuth(xAmzTarget, adminInitiateAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Links an existing user account in a user pool (&lt;code&gt;DestinationUser&lt;/code&gt;) to an identity from an external IdP (&lt;code&gt;SourceUser&lt;/code&gt;) based on a specified attribute name and value from the external IdP. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in. You can then use the federated user identity to sign in as the existing user account. &lt;/p&gt; &lt;p&gt; For example, if there is an existing user with a username and password, this API links that user to a federated user identity. When the user signs in with a federated user identity, they sign in as the existing user account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The maximum number of federated identities linked to a user is five.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external IdPs and provider attributes that have been trusted by the application owner.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminLinkProviderForUserTest() throws ApiException {
        String xAmzTarget = null;
        AdminLinkProviderForUserRequest adminLinkProviderForUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminLinkProviderForUser(xAmzTarget, adminLinkProviderForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists devices, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminListDevicesTest() throws ApiException {
        String xAmzTarget = null;
        AdminListDevicesRequest adminListDevicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AdminListDevicesResponse response = api.adminListDevices(xAmzTarget, adminListDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the groups that the user belongs to.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminListGroupsForUserTest() throws ApiException {
        String xAmzTarget = null;
        AdminListGroupsForUserRequest adminListGroupsForUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String limit = null;
        String nextToken = null;
        AdminListGroupsForUserResponse response = api.adminListGroupsForUser(xAmzTarget, adminListGroupsForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;A history of user activity and any risks detected as part of Amazon Cognito advanced security.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminListUserAuthEventsTest() throws ApiException {
        String xAmzTarget = null;
        AdminListUserAuthEventsRequest adminListUserAuthEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        AdminListUserAuthEventsResponse response = api.adminListUserAuthEvents(xAmzTarget, adminListUserAuthEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes the specified user from the specified group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminRemoveUserFromGroupTest() throws ApiException {
        String xAmzTarget = null;
        AdminRemoveUserFromGroupRequest adminRemoveUserFromGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.adminRemoveUserFromGroup(xAmzTarget, adminRemoveUserFromGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Resets the specified user&#39;s password in a user pool as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Deactivates a user&#39;s password, requiring them to change it. If a user tries to sign in after the API is called, Amazon Cognito responds with a &lt;code&gt;PasswordResetRequiredException&lt;/code&gt; error. Your app must then perform the actions that reset your user&#39;s password: the forgot-password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminResetUserPasswordTest() throws ApiException {
        String xAmzTarget = null;
        AdminResetUserPasswordRequest adminResetUserPasswordRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminResetUserPassword(xAmzTarget, adminResetUserPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Responds to an authentication challenge, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminRespondToAuthChallengeTest() throws ApiException {
        String xAmzTarget = null;
        AdminRespondToAuthChallengeRequest adminRespondToAuthChallengeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AdminRespondToAuthChallengeResponse response = api.adminRespondToAuthChallenge(xAmzTarget, adminRespondToAuthChallengeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;The user&#39;s multi-factor authentication (MFA) preference, including which MFA options are activated, and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminSetUserMFAPreferenceTest() throws ApiException {
        String xAmzTarget = null;
        AdminSetUserMFAPreferenceRequest adminSetUserMFAPreferenceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminSetUserMFAPreference(xAmzTarget, adminSetUserMFAPreferenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the specified user&#39;s password in a user pool as an administrator. Works on any user. &lt;/p&gt; &lt;p&gt;The password can be temporary or permanent. If it is temporary, the user status enters the &lt;code&gt;FORCE_CHANGE_PASSWORD&lt;/code&gt; state. When the user next tries to sign in, the InitiateAuth/AdminInitiateAuth response will contain the &lt;code&gt;NEW_PASSWORD_REQUIRED&lt;/code&gt; challenge. If the user doesn&#39;t sign in before it expires, the user won&#39;t be able to sign in, and an administrator must reset their password. &lt;/p&gt; &lt;p&gt;Once the user has set a new password, or the password is permanent, the user status is set to &lt;code&gt;Confirmed&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AdminSetUserPassword&lt;/code&gt; can set a password for the user profile that Amazon Cognito creates for third-party federated users. When you set a password, the federated user&#39;s status changes from &lt;code&gt;EXTERNAL_PROVIDER&lt;/code&gt; to &lt;code&gt;CONFIRMED&lt;/code&gt;. A user in this state can sign in as a federated user, and initiate authentication flows in the API like a linked native user. They can also modify their password and attributes in token-authenticated API requests like &lt;code&gt;ChangePassword&lt;/code&gt; and &lt;code&gt;UpdateUserAttributes&lt;/code&gt;. As a best security practice and to keep users in sync with your external IdP, don&#39;t set passwords on federated user profiles. To set up a federated user for native sign-in with a linked native user, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\&quot;&gt;Linking federated users to an existing user profile&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminSetUserPasswordTest() throws ApiException {
        String xAmzTarget = null;
        AdminSetUserPasswordRequest adminSetUserPasswordRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminSetUserPassword(xAmzTarget, adminSetUserPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; &lt;i&gt;This action is no longer supported.&lt;/i&gt; You can use it to configure only SMS MFA. You can&#39;t use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminSetUserMFAPreference.html\&quot;&gt;AdminSetUserMFAPreference&lt;/a&gt; instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminSetUserSettingsTest() throws ApiException {
        String xAmzTarget = null;
        AdminSetUserSettingsRequest adminSetUserSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminSetUserSettings(xAmzTarget, adminSetUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides feedback for an authentication event indicating if it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUpdateAuthEventFeedbackTest() throws ApiException {
        String xAmzTarget = null;
        AdminUpdateAuthEventFeedbackRequest adminUpdateAuthEventFeedbackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminUpdateAuthEventFeedback(xAmzTarget, adminUpdateAuthEventFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the device status as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUpdateDeviceStatusTest() throws ApiException {
        String xAmzTarget = null;
        AdminUpdateDeviceStatusRequest adminUpdateDeviceStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminUpdateDeviceStatus(xAmzTarget, adminUpdateDeviceStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Updates the specified user&#39;s attributes, including developer attributes, as an administrator. Works on any user.&lt;/p&gt; &lt;p&gt;For custom attributes, you must prepend the &lt;code&gt;custom:&lt;/code&gt; prefix to the attribute name.&lt;/p&gt; &lt;p&gt;In addition to updating user attributes, this API can also be used to mark phone and email as verified.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUpdateUserAttributesTest() throws ApiException {
        String xAmzTarget = null;
        AdminUpdateUserAttributesRequest adminUpdateUserAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminUpdateUserAttributes(xAmzTarget, adminUpdateUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Signs out a user from all devices. &lt;code&gt;AdminUserGlobalSignOut&lt;/code&gt; invalidates all identity, access and refresh tokens that Amazon Cognito has issued to a user. A user can still use a hosted UI cookie to retrieve new tokens for the duration of the 1-hour cookie validity period.&lt;/p&gt; &lt;p&gt;Your app isn&#39;t aware that a user&#39;s access token is revoked unless it attempts to authorize a user pools API request with an access token that contains the scope &lt;code&gt;aws.cognito.signin.user.admin&lt;/code&gt;. Your app might otherwise accept access tokens until they expire.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminUserGlobalSignOutTest() throws ApiException {
        String xAmzTarget = null;
        AdminUserGlobalSignOutRequest adminUserGlobalSignOutRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.adminUserGlobalSignOut(xAmzTarget, adminUserGlobalSignOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Begins setup of time-based one-time password (TOTP) multi-factor authentication (MFA) for a user, with a unique private key that Amazon Cognito generates and returns in the API response. You can authorize an &lt;code&gt;AssociateSoftwareToken&lt;/code&gt; request with either the user&#39;s access token, or a session string from a challenge response that you received from Amazon Cognito.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito disassociates an existing software token when you verify the new token in a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerifySoftwareToken.html\&quot;&gt; VerifySoftwareToken&lt;/a&gt; API request. If you don&#39;t verify the software token and your user pool doesn&#39;t require MFA, the user can then authenticate with user name and password credentials alone. If your user pool requires TOTP MFA, Amazon Cognito generates an &lt;code&gt;MFA_SETUP&lt;/code&gt; or &lt;code&gt;SOFTWARE_TOKEN_SETUP&lt;/code&gt; challenge each time your user signs. Complete setup with &lt;code&gt;AssociateSoftwareToken&lt;/code&gt; and &lt;code&gt;VerifySoftwareToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you set up software token MFA for your user, Amazon Cognito generates a &lt;code&gt;SOFTWARE_TOKEN_MFA&lt;/code&gt; challenge when they authenticate. Respond to this challenge with your user&#39;s TOTP.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateSoftwareTokenTest() throws ApiException {
        String xAmzTarget = null;
        AssociateSoftwareTokenRequest associateSoftwareTokenRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateSoftwareTokenResponse response = api.associateSoftwareToken(xAmzTarget, associateSoftwareTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Changes the password for a specified user in a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changePasswordTest() throws ApiException {
        String xAmzTarget = null;
        ChangePasswordRequest changePasswordRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.changePassword(xAmzTarget, changePasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Confirms tracking of the device. This API call is the call that begins device tracking.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmDeviceTest() throws ApiException {
        String xAmzTarget = null;
        ConfirmDeviceRequest confirmDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ConfirmDeviceResponse response = api.confirmDevice(xAmzTarget, confirmDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows a user to enter a confirmation code to reset a forgotten password.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmForgotPasswordTest() throws ApiException {
        String xAmzTarget = null;
        ConfirmForgotPasswordRequest confirmForgotPasswordRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.confirmForgotPassword(xAmzTarget, confirmForgotPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Confirms registration of a new user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmSignUpTest() throws ApiException {
        String xAmzTarget = null;
        ConfirmSignUpRequest confirmSignUpRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.confirmSignUp(xAmzTarget, confirmSignUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new group in the specified user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateGroupRequest createGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGroupResponse response = api.createGroup(xAmzTarget, createGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an IdP for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIdentityProviderTest() throws ApiException {
        String xAmzTarget = null;
        CreateIdentityProviderRequest createIdentityProviderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateIdentityProviderResponse response = api.createIdentityProvider(xAmzTarget, createIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new OAuth2.0 resource server and defines custom scopes within it.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResourceServerTest() throws ApiException {
        String xAmzTarget = null;
        CreateResourceServerRequest createResourceServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateResourceServerResponse response = api.createResourceServer(xAmzTarget, createResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a user import job.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserImportJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateUserImportJobRequest createUserImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserImportJobResponse response = api.createUserImportJob(xAmzTarget, createUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a new Amazon Cognito user pool and sets the password policy for the pool.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserPoolTest() throws ApiException {
        String xAmzTarget = null;
        CreateUserPoolRequest createUserPoolRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserPoolResponse response = api.createUserPool(xAmzTarget, createUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates the user pool client.&lt;/p&gt; &lt;p&gt;When you create a new user pool client, token revocation is automatically activated. For more information about revoking tokens, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html\&quot;&gt;RevokeToken&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserPoolClientTest() throws ApiException {
        String xAmzTarget = null;
        CreateUserPoolClientRequest createUserPoolClientRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserPoolClientResponse response = api.createUserPoolClient(xAmzTarget, createUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new domain for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserPoolDomainTest() throws ApiException {
        String xAmzTarget = null;
        CreateUserPoolDomainRequest createUserPoolDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserPoolDomainResponse response = api.createUserPoolDomain(xAmzTarget, createUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a group.&lt;/p&gt; &lt;p&gt;Calling this action requires developer credentials.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteGroupRequest deleteGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteGroup(xAmzTarget, deleteGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an IdP for a user pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIdentityProviderTest() throws ApiException {
        String xAmzTarget = null;
        DeleteIdentityProviderRequest deleteIdentityProviderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteIdentityProvider(xAmzTarget, deleteIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a resource server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourceServerTest() throws ApiException {
        String xAmzTarget = null;
        DeleteResourceServerRequest deleteResourceServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteResourceServer(xAmzTarget, deleteResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows a user to delete their own user profile.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUserRequest deleteUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteUser(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the attributes for a user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserAttributesTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUserAttributesRequest deleteUserAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteUserAttributes(xAmzTarget, deleteUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified Amazon Cognito user pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserPoolTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUserPoolRequest deleteUserPoolRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteUserPool(xAmzTarget, deleteUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows the developer to delete the user pool client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserPoolClientTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUserPoolClientRequest deleteUserPoolClientRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteUserPoolClient(xAmzTarget, deleteUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a domain for a user pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserPoolDomainTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUserPoolDomainRequest deleteUserPoolDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteUserPoolDomain(xAmzTarget, deleteUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specific IdP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeIdentityProviderTest() throws ApiException {
        String xAmzTarget = null;
        DescribeIdentityProviderRequest describeIdentityProviderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeIdentityProviderResponse response = api.describeIdentityProvider(xAmzTarget, describeIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes a resource server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeResourceServerTest() throws ApiException {
        String xAmzTarget = null;
        DescribeResourceServerRequest describeResourceServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeResourceServerResponse response = api.describeResourceServer(xAmzTarget, describeResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the risk configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRiskConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DescribeRiskConfigurationRequest describeRiskConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRiskConfigurationResponse response = api.describeRiskConfiguration(xAmzTarget, describeRiskConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the user import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUserImportJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeUserImportJobRequest describeUserImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUserImportJobResponse response = api.describeUserImportJob(xAmzTarget, describeUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the configuration information and metadata of the specified user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUserPoolTest() throws ApiException {
        String xAmzTarget = null;
        DescribeUserPoolRequest describeUserPoolRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUserPoolResponse response = api.describeUserPool(xAmzTarget, describeUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Client method for returning the configuration information and metadata of the specified user pool app client.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUserPoolClientTest() throws ApiException {
        String xAmzTarget = null;
        DescribeUserPoolClientRequest describeUserPoolClientRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUserPoolClientResponse response = api.describeUserPoolClient(xAmzTarget, describeUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUserPoolDomainTest() throws ApiException {
        String xAmzTarget = null;
        DescribeUserPoolDomainRequest describeUserPoolDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUserPoolDomainResponse response = api.describeUserPoolDomain(xAmzTarget, describeUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Forgets the specified device.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forgetDeviceTest() throws ApiException {
        String xAmzTarget = null;
        ForgetDeviceRequest forgetDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.forgetDevice(xAmzTarget, forgetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user&#39;s password. For the &lt;code&gt;Username&lt;/code&gt; parameter, you can use the username or user alias. The method used to send the confirmation code is sent according to the specified AccountRecoverySetting. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-recover-a-user-account.html\&quot;&gt;Recovering User Accounts&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;. To use the confirmation code for resetting the password, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmForgotPassword.html\&quot;&gt;ConfirmForgotPassword&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;If neither a verified phone number nor a verified email exists, this API returns &lt;code&gt;InvalidParameterException&lt;/code&gt;. If your app client has a client secret and you don&#39;t provide a &lt;code&gt;SECRET_HASH&lt;/code&gt; parameter, this API returns &lt;code&gt;NotAuthorizedException&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forgotPasswordTest() throws ApiException {
        String xAmzTarget = null;
        ForgotPasswordRequest forgotPasswordRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ForgotPasswordResponse response = api.forgotPassword(xAmzTarget, forgotPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the header information for the comma-separated value (CSV) file to be used as input for the user import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCSVHeaderTest() throws ApiException {
        String xAmzTarget = null;
        GetCSVHeaderRequest getCSVHeaderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCSVHeaderResponse response = api.getCSVHeader(xAmzTarget, getCSVHeaderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the device.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceTest() throws ApiException {
        String xAmzTarget = null;
        GetDeviceRequest getDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeviceResponse response = api.getDevice(xAmzTarget, getDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets a group.&lt;/p&gt; &lt;p&gt;Calling this action requires developer credentials.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupTest() throws ApiException {
        String xAmzTarget = null;
        GetGroupRequest getGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetGroupResponse response = api.getGroup(xAmzTarget, getGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the specified IdP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIdentityProviderByIdentifierTest() throws ApiException {
        String xAmzTarget = null;
        GetIdentityProviderByIdentifierRequest getIdentityProviderByIdentifierRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetIdentityProviderByIdentifierResponse response = api.getIdentityProviderByIdentifier(xAmzTarget, getIdentityProviderByIdentifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the detailed activity logging configuration for a user pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLogDeliveryConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        GetLogDeliveryConfigurationRequest getLogDeliveryConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLogDeliveryConfigurationResponse response = api.getLogDeliveryConfiguration(xAmzTarget, getLogDeliveryConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This method takes a user pool ID, and returns the signing certificate. The issued certificate is valid for 10 years from the date of issue.&lt;/p&gt; &lt;p&gt;Amazon Cognito issues and assigns a new signing certificate annually. This process returns a new value in the response to &lt;code&gt;GetSigningCertificate&lt;/code&gt;, but doesn&#39;t invalidate the original certificate.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSigningCertificateTest() throws ApiException {
        String xAmzTarget = null;
        GetSigningCertificateRequest getSigningCertificateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSigningCertificateResponse response = api.getSigningCertificate(xAmzTarget, getSigningCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the user interface (UI) Customization information for a particular app client&#39;s app UI, if any such information exists for the client. If nothing is set for the particular client, but there is an existing pool level customization (the app &lt;code&gt;clientId&lt;/code&gt; is &lt;code&gt;ALL&lt;/code&gt;), then that information is returned. If nothing is present, then an empty shape is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUICustomizationTest() throws ApiException {
        String xAmzTarget = null;
        GetUICustomizationRequest getUICustomizationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUICustomizationResponse response = api.getUICustomization(xAmzTarget, getUICustomizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the user attributes and metadata for a user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String xAmzTarget = null;
        GetUserRequest getUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUserResponse response = api.getUser(xAmzTarget, getUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Generates a user attribute verification code for the specified attribute name. Sends a message to a user with a code that they must return in a VerifyUserAttribute request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAttributeVerificationCodeTest() throws ApiException {
        String xAmzTarget = null;
        GetUserAttributeVerificationCodeRequest getUserAttributeVerificationCodeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUserAttributeVerificationCodeResponse response = api.getUserAttributeVerificationCode(xAmzTarget, getUserAttributeVerificationCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the user pool multi-factor authentication (MFA) configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPoolMfaConfigTest() throws ApiException {
        String xAmzTarget = null;
        GetUserPoolMfaConfigRequest getUserPoolMfaConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUserPoolMfaConfigResponse response = api.getUserPoolMfaConfig(xAmzTarget, getUserPoolMfaConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Signs out a user from all devices. &lt;code&gt;GlobalSignOut&lt;/code&gt; invalidates all identity, access and refresh tokens that Amazon Cognito has issued to a user. A user can still use a hosted UI cookie to retrieve new tokens for the duration of the 1-hour cookie validity period.&lt;/p&gt; &lt;p&gt;Your app isn&#39;t aware that a user&#39;s access token is revoked unless it attempts to authorize a user pools API request with an access token that contains the scope &lt;code&gt;aws.cognito.signin.user.admin&lt;/code&gt;. Your app might otherwise accept access tokens until they expire.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalSignOutTest() throws ApiException {
        String xAmzTarget = null;
        GlobalSignOutRequest globalSignOutRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.globalSignOut(xAmzTarget, globalSignOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Initiates sign-in for a user in the Amazon Cognito user directory. You can&#39;t sign in a user with a federated IdP with &lt;code&gt;InitiateAuth&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation.html\&quot;&gt; Adding user pool sign-in through a third party&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateAuthTest() throws ApiException {
        String xAmzTarget = null;
        InitiateAuthRequest initiateAuthRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        InitiateAuthResponse response = api.initiateAuth(xAmzTarget, initiateAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the sign-in devices that Amazon Cognito has registered to the current user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevicesTest() throws ApiException {
        String xAmzTarget = null;
        ListDevicesRequest listDevicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListDevicesResponse response = api.listDevices(xAmzTarget, listDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the groups associated with a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupsTest() throws ApiException {
        String xAmzTarget = null;
        ListGroupsRequest listGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String limit = null;
        String nextToken = null;
        ListGroupsResponse response = api.listGroups(xAmzTarget, listGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists information about all IdPs for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIdentityProvidersTest() throws ApiException {
        String xAmzTarget = null;
        ListIdentityProvidersRequest listIdentityProvidersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListIdentityProvidersResponse response = api.listIdentityProviders(xAmzTarget, listIdentityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the resource servers for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourceServersTest() throws ApiException {
        String xAmzTarget = null;
        ListResourceServersRequest listResourceServersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResourceServersResponse response = api.listResourceServers(xAmzTarget, listResourceServersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the tags that are assigned to an Amazon Cognito user pool.&lt;/p&gt; &lt;p&gt;A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.&lt;/p&gt; &lt;p&gt;You can use this action up to 10 times per second, per account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists user import jobs for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserImportJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListUserImportJobsRequest listUserImportJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListUserImportJobsResponse response = api.listUserImportJobs(xAmzTarget, listUserImportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the clients that have been created for the specified user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserPoolClientsTest() throws ApiException {
        String xAmzTarget = null;
        ListUserPoolClientsRequest listUserPoolClientsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListUserPoolClientsResponse response = api.listUserPoolClients(xAmzTarget, listUserPoolClientsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the user pools associated with an Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserPoolsTest() throws ApiException {
        String xAmzTarget = null;
        ListUserPoolsRequest listUserPoolsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListUserPoolsResponse response = api.listUserPools(xAmzTarget, listUserPoolsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists users and their basic details in a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        String xAmzTarget = null;
        ListUsersRequest listUsersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String limit = null;
        String paginationToken = null;
        ListUsersResponse response = api.listUsers(xAmzTarget, listUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, paginationToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the users in the specified group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersInGroupTest() throws ApiException {
        String xAmzTarget = null;
        ListUsersInGroupRequest listUsersInGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String limit = null;
        String nextToken = null;
        ListUsersInGroupResponse response = api.listUsersInGroup(xAmzTarget, listUsersInGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Resends the confirmation (for confirmation of registration) to a specific user in the user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendConfirmationCodeTest() throws ApiException {
        String xAmzTarget = null;
        ResendConfirmationCodeRequest resendConfirmationCodeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResendConfirmationCodeResponse response = api.resendConfirmationCode(xAmzTarget, resendConfirmationCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Responds to the authentication challenge.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void respondToAuthChallengeTest() throws ApiException {
        String xAmzTarget = null;
        RespondToAuthChallengeRequest respondToAuthChallengeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RespondToAuthChallengeResponse response = api.respondToAuthChallenge(xAmzTarget, respondToAuthChallengeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Revokes all of the access tokens generated by, and at the same time as, the specified refresh token. After a token is revoked, you can&#39;t use the revoked token to access Amazon Cognito user APIs, or to authorize access to your resource server.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeTokenTest() throws ApiException {
        String xAmzTarget = null;
        RevokeTokenRequest revokeTokenRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.revokeToken(xAmzTarget, revokeTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets up or modifies the detailed activity logging configuration of a user pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setLogDeliveryConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        SetLogDeliveryConfigurationRequest setLogDeliveryConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetLogDeliveryConfigurationResponse response = api.setLogDeliveryConfiguration(xAmzTarget, setLogDeliveryConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Configures actions on detected risks. To delete the risk configuration for &lt;code&gt;UserPoolId&lt;/code&gt; or &lt;code&gt;ClientId&lt;/code&gt;, pass null values for all four configuration types.&lt;/p&gt; &lt;p&gt;To activate Amazon Cognito advanced security features, update the user pool to include the &lt;code&gt;UserPoolAddOns&lt;/code&gt; key&lt;code&gt;AdvancedSecurityMode&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setRiskConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        SetRiskConfigurationRequest setRiskConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetRiskConfigurationResponse response = api.setRiskConfiguration(xAmzTarget, setRiskConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the user interface (UI) customization information for a user pool&#39;s built-in app UI.&lt;/p&gt; &lt;p&gt;You can specify app UI customization settings for a single client (with a specific &lt;code&gt;clientId&lt;/code&gt;) or for all clients (by setting the &lt;code&gt;clientId&lt;/code&gt; to &lt;code&gt;ALL&lt;/code&gt;). If you specify &lt;code&gt;ALL&lt;/code&gt;, the default configuration is used for every client that has no previously set UI customization. If you specify UI customization settings for a particular client, it will no longer return to the &lt;code&gt;ALL&lt;/code&gt; configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app&#39;s pages, and the service will throw an error.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setUICustomizationTest() throws ApiException {
        String xAmzTarget = null;
        SetUICustomizationRequest setUICustomizationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetUICustomizationResponse response = api.setUICustomization(xAmzTarget, setUICustomizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Set the user&#39;s multi-factor authentication (MFA) method preference, including which MFA factors are activated and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts unless device tracking is turned on and the device has been trusted. If you want MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setUserMFAPreferenceTest() throws ApiException {
        String xAmzTarget = null;
        SetUserMFAPreferenceRequest setUserMFAPreferenceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.setUserMFAPreference(xAmzTarget, setUserMFAPreferenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the user pool multi-factor authentication (MFA) configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setUserPoolMfaConfigTest() throws ApiException {
        String xAmzTarget = null;
        SetUserPoolMfaConfigRequest setUserPoolMfaConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetUserPoolMfaConfigResponse response = api.setUserPoolMfaConfig(xAmzTarget, setUserPoolMfaConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; &lt;i&gt;This action is no longer supported.&lt;/i&gt; You can use it to configure only SMS MFA. You can&#39;t use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserMFAPreference.html\&quot;&gt;SetUserMFAPreference&lt;/a&gt; instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setUserSettingsTest() throws ApiException {
        String xAmzTarget = null;
        SetUserSettingsRequest setUserSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.setUserSettings(xAmzTarget, setUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Registers the user in the specified user pool and creates a user name, password, and user attributes.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signUpTest() throws ApiException {
        String xAmzTarget = null;
        SignUpRequest signUpRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SignUpResponse response = api.signUp(xAmzTarget, signUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts the user import.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startUserImportJobTest() throws ApiException {
        String xAmzTarget = null;
        StartUserImportJobRequest startUserImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartUserImportJobResponse response = api.startUserImportJob(xAmzTarget, startUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops the user import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopUserImportJobTest() throws ApiException {
        String xAmzTarget = null;
        StopUserImportJobRequest stopUserImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopUserImportJobResponse response = api.stopUserImportJob(xAmzTarget, stopUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of a user pool, one for testing and another for production, you might assign an &lt;code&gt;Environment&lt;/code&gt; tag key to both user pools. The value of this key might be &lt;code&gt;Test&lt;/code&gt; for one user pool, and &lt;code&gt;Production&lt;/code&gt; for the other.&lt;/p&gt; &lt;p&gt;Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your user pools. In an Identity and Access Management policy, you can constrain permissions for user pools based on specific tags or tag values.&lt;/p&gt; &lt;p&gt;You can use this action up to 5 times per second, per account. A user pool can have as many as 50 tags.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5 times per second, per account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides the feedback for an authentication event, whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAuthEventFeedbackTest() throws ApiException {
        String xAmzTarget = null;
        UpdateAuthEventFeedbackRequest updateAuthEventFeedbackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateAuthEventFeedback(xAmzTarget, updateAuthEventFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the device status.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceStatusTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDeviceStatusRequest updateDeviceStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDeviceStatus(xAmzTarget, updateDeviceStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the specified group with the specified attributes.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGroupTest() throws ApiException {
        String xAmzTarget = null;
        UpdateGroupRequest updateGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateGroupResponse response = api.updateGroup(xAmzTarget, updateGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates IdP information for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIdentityProviderTest() throws ApiException {
        String xAmzTarget = null;
        UpdateIdentityProviderRequest updateIdentityProviderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateIdentityProviderResponse response = api.updateIdentityProvider(xAmzTarget, updateIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the name and scopes of resource server. All other fields are read-only.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, it is set to the default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourceServerTest() throws ApiException {
        String xAmzTarget = null;
        UpdateResourceServerRequest updateResourceServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateResourceServerResponse response = api.updateResourceServer(xAmzTarget, updateResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows a user to update a specific attribute (one at a time).&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserAttributesTest() throws ApiException {
        String xAmzTarget = null;
        UpdateUserAttributesRequest updateUserAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateUserAttributesResponse response = api.updateUserAttributes(xAmzTarget, updateUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Updates the specified user pool with the specified attributes. You can get a list of the current user pool settings using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html\&quot;&gt;DescribeUserPool&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserPoolTest() throws ApiException {
        String xAmzTarget = null;
        UpdateUserPoolRequest updateUserPoolRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateUserPool(xAmzTarget, updateUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the specified user pool app client with the specified attributes. You can get a list of the current user pool app client settings using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPoolClient.html\&quot;&gt;DescribeUserPoolClient&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can also use this operation to enable token revocation for user pool clients. For more information about revoking tokens, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html\&quot;&gt;RevokeToken&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserPoolClientTest() throws ApiException {
        String xAmzTarget = null;
        UpdateUserPoolClientRequest updateUserPoolClientRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateUserPoolClientResponse response = api.updateUserPoolClient(xAmzTarget, updateUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user pool.&lt;/p&gt; &lt;p&gt;You can use this operation to provide the Amazon Resource Name (ARN) of a new certificate to Amazon Cognito. You can&#39;t use it to change the domain for a user pool.&lt;/p&gt; &lt;p&gt;A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up and sign-in pages for your application. When you set up a custom domain, you provide a certificate that you manage with Certificate Manager (ACM). When necessary, you can use this operation to change the certificate that you applied to your custom domain.&lt;/p&gt; &lt;p&gt;Usually, this is unnecessary following routine certificate renewal with ACM. When you renew your existing certificate in ACM, the ARN for your certificate remains the same, and your custom domain uses the new certificate automatically.&lt;/p&gt; &lt;p&gt;However, if you replace your existing certificate with a new one, ACM gives the new certificate a new ARN. To apply the new certificate to your custom domain, you must provide this ARN to Amazon Cognito.&lt;/p&gt; &lt;p&gt;When you add your new certificate in ACM, you must choose US East (N. Virginia) as the Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new certificate to your custom domain.&lt;/p&gt; &lt;p&gt;For more information about adding a custom domain to your user pool, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html\&quot;&gt;Using Your Own Domain for the Hosted UI&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserPoolDomainTest() throws ApiException {
        String xAmzTarget = null;
        UpdateUserPoolDomainRequest updateUserPoolDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateUserPoolDomainResponse response = api.updateUserPoolDomain(xAmzTarget, updateUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Use this API to register a user&#39;s entered time-based one-time password (TOTP) code and mark the user&#39;s software token MFA status as \&quot;verified\&quot; if successful. The request takes an access token or a session string, but not both.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifySoftwareTokenTest() throws ApiException {
        String xAmzTarget = null;
        VerifySoftwareTokenRequest verifySoftwareTokenRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        VerifySoftwareTokenResponse response = api.verifySoftwareToken(xAmzTarget, verifySoftwareTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Verifies the specified user attributes in the user pool.&lt;/p&gt; &lt;p&gt; If your user pool requires verification before Amazon Cognito updates the attribute value, VerifyUserAttribute updates the affected attribute to its pending value. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserAttributeUpdateSettingsType.html\&quot;&gt; UserAttributeUpdateSettingsType&lt;/a&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyUserAttributeTest() throws ApiException {
        String xAmzTarget = null;
        VerifyUserAttributeRequest verifyUserAttributeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.verifyUserAttribute(xAmzTarget, verifyUserAttributeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
