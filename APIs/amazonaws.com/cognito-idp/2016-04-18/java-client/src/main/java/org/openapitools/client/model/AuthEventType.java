/*
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthEventTypeEventContextData;
import org.openapitools.client.model.AuthEventTypeEventFeedback;
import org.openapitools.client.model.AuthEventTypeEventRisk;
import org.openapitools.client.model.EventResponseType;
import org.openapitools.client.model.EventType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The authentication event type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:34.148435-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthEventType {
  public static final String SERIALIZED_NAME_EVENT_ID = "EventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "EventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventType eventType;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_EVENT_RESPONSE = "EventResponse";
  @SerializedName(SERIALIZED_NAME_EVENT_RESPONSE)
  private EventResponseType eventResponse;

  public static final String SERIALIZED_NAME_EVENT_RISK = "EventRisk";
  @SerializedName(SERIALIZED_NAME_EVENT_RISK)
  private AuthEventTypeEventRisk eventRisk;

  public static final String SERIALIZED_NAME_CHALLENGE_RESPONSES = "ChallengeResponses";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_RESPONSES)
  private List challengeResponses;

  public static final String SERIALIZED_NAME_EVENT_CONTEXT_DATA = "EventContextData";
  @SerializedName(SERIALIZED_NAME_EVENT_CONTEXT_DATA)
  private AuthEventTypeEventContextData eventContextData;

  public static final String SERIALIZED_NAME_EVENT_FEEDBACK = "EventFeedback";
  @SerializedName(SERIALIZED_NAME_EVENT_FEEDBACK)
  private AuthEventTypeEventFeedback eventFeedback;

  public AuthEventType() {
  }

  public AuthEventType eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Get eventId
   * @return eventId
   */
  @javax.annotation.Nullable
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public AuthEventType eventType(EventType eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nullable
  public EventType getEventType() {
    return eventType;
  }

  public void setEventType(EventType eventType) {
    this.eventType = eventType;
  }


  public AuthEventType creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public AuthEventType eventResponse(EventResponseType eventResponse) {
    this.eventResponse = eventResponse;
    return this;
  }

  /**
   * Get eventResponse
   * @return eventResponse
   */
  @javax.annotation.Nullable
  public EventResponseType getEventResponse() {
    return eventResponse;
  }

  public void setEventResponse(EventResponseType eventResponse) {
    this.eventResponse = eventResponse;
  }


  public AuthEventType eventRisk(AuthEventTypeEventRisk eventRisk) {
    this.eventRisk = eventRisk;
    return this;
  }

  /**
   * Get eventRisk
   * @return eventRisk
   */
  @javax.annotation.Nullable
  public AuthEventTypeEventRisk getEventRisk() {
    return eventRisk;
  }

  public void setEventRisk(AuthEventTypeEventRisk eventRisk) {
    this.eventRisk = eventRisk;
  }


  public AuthEventType challengeResponses(List challengeResponses) {
    this.challengeResponses = challengeResponses;
    return this;
  }

  /**
   * Get challengeResponses
   * @return challengeResponses
   */
  @javax.annotation.Nullable
  public List getChallengeResponses() {
    return challengeResponses;
  }

  public void setChallengeResponses(List challengeResponses) {
    this.challengeResponses = challengeResponses;
  }


  public AuthEventType eventContextData(AuthEventTypeEventContextData eventContextData) {
    this.eventContextData = eventContextData;
    return this;
  }

  /**
   * Get eventContextData
   * @return eventContextData
   */
  @javax.annotation.Nullable
  public AuthEventTypeEventContextData getEventContextData() {
    return eventContextData;
  }

  public void setEventContextData(AuthEventTypeEventContextData eventContextData) {
    this.eventContextData = eventContextData;
  }


  public AuthEventType eventFeedback(AuthEventTypeEventFeedback eventFeedback) {
    this.eventFeedback = eventFeedback;
    return this;
  }

  /**
   * Get eventFeedback
   * @return eventFeedback
   */
  @javax.annotation.Nullable
  public AuthEventTypeEventFeedback getEventFeedback() {
    return eventFeedback;
  }

  public void setEventFeedback(AuthEventTypeEventFeedback eventFeedback) {
    this.eventFeedback = eventFeedback;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthEventType authEventType = (AuthEventType) o;
    return Objects.equals(this.eventId, authEventType.eventId) &&
        Objects.equals(this.eventType, authEventType.eventType) &&
        Objects.equals(this.creationDate, authEventType.creationDate) &&
        Objects.equals(this.eventResponse, authEventType.eventResponse) &&
        Objects.equals(this.eventRisk, authEventType.eventRisk) &&
        Objects.equals(this.challengeResponses, authEventType.challengeResponses) &&
        Objects.equals(this.eventContextData, authEventType.eventContextData) &&
        Objects.equals(this.eventFeedback, authEventType.eventFeedback);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, eventType, creationDate, eventResponse, eventRisk, challengeResponses, eventContextData, eventFeedback);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthEventType {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    eventResponse: ").append(toIndentedString(eventResponse)).append("\n");
    sb.append("    eventRisk: ").append(toIndentedString(eventRisk)).append("\n");
    sb.append("    challengeResponses: ").append(toIndentedString(challengeResponses)).append("\n");
    sb.append("    eventContextData: ").append(toIndentedString(eventContextData)).append("\n");
    sb.append("    eventFeedback: ").append(toIndentedString(eventFeedback)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventId");
    openapiFields.add("EventType");
    openapiFields.add("CreationDate");
    openapiFields.add("EventResponse");
    openapiFields.add("EventRisk");
    openapiFields.add("ChallengeResponses");
    openapiFields.add("EventContextData");
    openapiFields.add("EventFeedback");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthEventType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthEventType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthEventType is not found in the empty JSON string", AuthEventType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthEventType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthEventType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EventId`
      if (jsonObj.get("EventId") != null && !jsonObj.get("EventId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EventId"));
      }
      // validate the optional field `EventType`
      if (jsonObj.get("EventType") != null && !jsonObj.get("EventType").isJsonNull()) {
        EventType.validateJsonElement(jsonObj.get("EventType"));
      }
      // validate the optional field `CreationDate`
      if (jsonObj.get("CreationDate") != null && !jsonObj.get("CreationDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationDate"));
      }
      // validate the optional field `EventResponse`
      if (jsonObj.get("EventResponse") != null && !jsonObj.get("EventResponse").isJsonNull()) {
        EventResponseType.validateJsonElement(jsonObj.get("EventResponse"));
      }
      // validate the optional field `EventRisk`
      if (jsonObj.get("EventRisk") != null && !jsonObj.get("EventRisk").isJsonNull()) {
        AuthEventTypeEventRisk.validateJsonElement(jsonObj.get("EventRisk"));
      }
      // validate the optional field `ChallengeResponses`
      if (jsonObj.get("ChallengeResponses") != null && !jsonObj.get("ChallengeResponses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ChallengeResponses"));
      }
      // validate the optional field `EventContextData`
      if (jsonObj.get("EventContextData") != null && !jsonObj.get("EventContextData").isJsonNull()) {
        AuthEventTypeEventContextData.validateJsonElement(jsonObj.get("EventContextData"));
      }
      // validate the optional field `EventFeedback`
      if (jsonObj.get("EventFeedback") != null && !jsonObj.get("EventFeedback").isJsonNull()) {
        AuthEventTypeEventFeedback.validateJsonElement(jsonObj.get("EventFeedback"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthEventType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthEventType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthEventType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthEventType.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthEventType>() {
           @Override
           public void write(JsonWriter out, AuthEventType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthEventType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthEventType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthEventType
   * @throws IOException if the JSON string is invalid with respect to AuthEventType
   */
  public static AuthEventType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthEventType.class);
  }

  /**
   * Convert an instance of AuthEventType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

