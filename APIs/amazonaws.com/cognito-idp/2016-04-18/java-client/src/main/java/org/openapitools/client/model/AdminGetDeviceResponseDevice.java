/*
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdminGetDeviceResponseDevice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:34.148435-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdminGetDeviceResponseDevice {
  public static final String SERIALIZED_NAME_DEVICE_KEY = "DeviceKey";
  @SerializedName(SERIALIZED_NAME_DEVICE_KEY)
  private String deviceKey;

  public static final String SERIALIZED_NAME_DEVICE_ATTRIBUTES = "DeviceAttributes";
  @SerializedName(SERIALIZED_NAME_DEVICE_ATTRIBUTES)
  private List deviceAttributes;

  public static final String SERIALIZED_NAME_DEVICE_CREATE_DATE = "DeviceCreateDate";
  @SerializedName(SERIALIZED_NAME_DEVICE_CREATE_DATE)
  private OffsetDateTime deviceCreateDate;

  public static final String SERIALIZED_NAME_DEVICE_LAST_MODIFIED_DATE = "DeviceLastModifiedDate";
  @SerializedName(SERIALIZED_NAME_DEVICE_LAST_MODIFIED_DATE)
  private OffsetDateTime deviceLastModifiedDate;

  public static final String SERIALIZED_NAME_DEVICE_LAST_AUTHENTICATED_DATE = "DeviceLastAuthenticatedDate";
  @SerializedName(SERIALIZED_NAME_DEVICE_LAST_AUTHENTICATED_DATE)
  private OffsetDateTime deviceLastAuthenticatedDate;

  public AdminGetDeviceResponseDevice() {
  }

  public AdminGetDeviceResponseDevice deviceKey(String deviceKey) {
    this.deviceKey = deviceKey;
    return this;
  }

  /**
   * Get deviceKey
   * @return deviceKey
   */
  @javax.annotation.Nullable
  public String getDeviceKey() {
    return deviceKey;
  }

  public void setDeviceKey(String deviceKey) {
    this.deviceKey = deviceKey;
  }


  public AdminGetDeviceResponseDevice deviceAttributes(List deviceAttributes) {
    this.deviceAttributes = deviceAttributes;
    return this;
  }

  /**
   * Get deviceAttributes
   * @return deviceAttributes
   */
  @javax.annotation.Nullable
  public List getDeviceAttributes() {
    return deviceAttributes;
  }

  public void setDeviceAttributes(List deviceAttributes) {
    this.deviceAttributes = deviceAttributes;
  }


  public AdminGetDeviceResponseDevice deviceCreateDate(OffsetDateTime deviceCreateDate) {
    this.deviceCreateDate = deviceCreateDate;
    return this;
  }

  /**
   * Get deviceCreateDate
   * @return deviceCreateDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeviceCreateDate() {
    return deviceCreateDate;
  }

  public void setDeviceCreateDate(OffsetDateTime deviceCreateDate) {
    this.deviceCreateDate = deviceCreateDate;
  }


  public AdminGetDeviceResponseDevice deviceLastModifiedDate(OffsetDateTime deviceLastModifiedDate) {
    this.deviceLastModifiedDate = deviceLastModifiedDate;
    return this;
  }

  /**
   * Get deviceLastModifiedDate
   * @return deviceLastModifiedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeviceLastModifiedDate() {
    return deviceLastModifiedDate;
  }

  public void setDeviceLastModifiedDate(OffsetDateTime deviceLastModifiedDate) {
    this.deviceLastModifiedDate = deviceLastModifiedDate;
  }


  public AdminGetDeviceResponseDevice deviceLastAuthenticatedDate(OffsetDateTime deviceLastAuthenticatedDate) {
    this.deviceLastAuthenticatedDate = deviceLastAuthenticatedDate;
    return this;
  }

  /**
   * Get deviceLastAuthenticatedDate
   * @return deviceLastAuthenticatedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeviceLastAuthenticatedDate() {
    return deviceLastAuthenticatedDate;
  }

  public void setDeviceLastAuthenticatedDate(OffsetDateTime deviceLastAuthenticatedDate) {
    this.deviceLastAuthenticatedDate = deviceLastAuthenticatedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminGetDeviceResponseDevice adminGetDeviceResponseDevice = (AdminGetDeviceResponseDevice) o;
    return Objects.equals(this.deviceKey, adminGetDeviceResponseDevice.deviceKey) &&
        Objects.equals(this.deviceAttributes, adminGetDeviceResponseDevice.deviceAttributes) &&
        Objects.equals(this.deviceCreateDate, adminGetDeviceResponseDevice.deviceCreateDate) &&
        Objects.equals(this.deviceLastModifiedDate, adminGetDeviceResponseDevice.deviceLastModifiedDate) &&
        Objects.equals(this.deviceLastAuthenticatedDate, adminGetDeviceResponseDevice.deviceLastAuthenticatedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceKey, deviceAttributes, deviceCreateDate, deviceLastModifiedDate, deviceLastAuthenticatedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminGetDeviceResponseDevice {\n");
    sb.append("    deviceKey: ").append(toIndentedString(deviceKey)).append("\n");
    sb.append("    deviceAttributes: ").append(toIndentedString(deviceAttributes)).append("\n");
    sb.append("    deviceCreateDate: ").append(toIndentedString(deviceCreateDate)).append("\n");
    sb.append("    deviceLastModifiedDate: ").append(toIndentedString(deviceLastModifiedDate)).append("\n");
    sb.append("    deviceLastAuthenticatedDate: ").append(toIndentedString(deviceLastAuthenticatedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceKey");
    openapiFields.add("DeviceAttributes");
    openapiFields.add("DeviceCreateDate");
    openapiFields.add("DeviceLastModifiedDate");
    openapiFields.add("DeviceLastAuthenticatedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminGetDeviceResponseDevice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminGetDeviceResponseDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminGetDeviceResponseDevice is not found in the empty JSON string", AdminGetDeviceResponseDevice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminGetDeviceResponseDevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminGetDeviceResponseDevice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DeviceKey`
      if (jsonObj.get("DeviceKey") != null && !jsonObj.get("DeviceKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeviceKey"));
      }
      // validate the optional field `DeviceAttributes`
      if (jsonObj.get("DeviceAttributes") != null && !jsonObj.get("DeviceAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DeviceAttributes"));
      }
      // validate the optional field `DeviceCreateDate`
      if (jsonObj.get("DeviceCreateDate") != null && !jsonObj.get("DeviceCreateDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeviceCreateDate"));
      }
      // validate the optional field `DeviceLastModifiedDate`
      if (jsonObj.get("DeviceLastModifiedDate") != null && !jsonObj.get("DeviceLastModifiedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeviceLastModifiedDate"));
      }
      // validate the optional field `DeviceLastAuthenticatedDate`
      if (jsonObj.get("DeviceLastAuthenticatedDate") != null && !jsonObj.get("DeviceLastAuthenticatedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeviceLastAuthenticatedDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminGetDeviceResponseDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminGetDeviceResponseDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminGetDeviceResponseDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminGetDeviceResponseDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminGetDeviceResponseDevice>() {
           @Override
           public void write(JsonWriter out, AdminGetDeviceResponseDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminGetDeviceResponseDevice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminGetDeviceResponseDevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminGetDeviceResponseDevice
   * @throws IOException if the JSON string is invalid with respect to AdminGetDeviceResponseDevice
   */
  public static AdminGetDeviceResponseDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminGetDeviceResponseDevice.class);
  }

  /**
   * Convert an instance of AdminGetDeviceResponseDevice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

