/*
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddCustomAttributesRequest;
import org.openapitools.client.model.AdminAddUserToGroupRequest;
import org.openapitools.client.model.AdminConfirmSignUpRequest;
import org.openapitools.client.model.AdminCreateUserRequest;
import org.openapitools.client.model.AdminCreateUserResponse;
import org.openapitools.client.model.AdminDeleteUserAttributesRequest;
import org.openapitools.client.model.AdminDeleteUserRequest;
import org.openapitools.client.model.AdminDisableProviderForUserRequest;
import org.openapitools.client.model.AdminDisableUserRequest;
import org.openapitools.client.model.AdminEnableUserRequest;
import org.openapitools.client.model.AdminForgetDeviceRequest;
import org.openapitools.client.model.AdminGetDeviceRequest;
import org.openapitools.client.model.AdminGetDeviceResponse;
import org.openapitools.client.model.AdminGetUserRequest;
import org.openapitools.client.model.AdminGetUserResponse;
import org.openapitools.client.model.AdminInitiateAuthRequest;
import org.openapitools.client.model.AdminInitiateAuthResponse;
import org.openapitools.client.model.AdminLinkProviderForUserRequest;
import org.openapitools.client.model.AdminListDevicesRequest;
import org.openapitools.client.model.AdminListDevicesResponse;
import org.openapitools.client.model.AdminListGroupsForUserRequest;
import org.openapitools.client.model.AdminListGroupsForUserResponse;
import org.openapitools.client.model.AdminListUserAuthEventsRequest;
import org.openapitools.client.model.AdminListUserAuthEventsResponse;
import org.openapitools.client.model.AdminRemoveUserFromGroupRequest;
import org.openapitools.client.model.AdminResetUserPasswordRequest;
import org.openapitools.client.model.AdminRespondToAuthChallengeRequest;
import org.openapitools.client.model.AdminRespondToAuthChallengeResponse;
import org.openapitools.client.model.AdminSetUserMFAPreferenceRequest;
import org.openapitools.client.model.AdminSetUserPasswordRequest;
import org.openapitools.client.model.AdminSetUserSettingsRequest;
import org.openapitools.client.model.AdminUpdateAuthEventFeedbackRequest;
import org.openapitools.client.model.AdminUpdateDeviceStatusRequest;
import org.openapitools.client.model.AdminUpdateUserAttributesRequest;
import org.openapitools.client.model.AdminUserGlobalSignOutRequest;
import org.openapitools.client.model.AssociateSoftwareTokenRequest;
import org.openapitools.client.model.AssociateSoftwareTokenResponse;
import org.openapitools.client.model.ChangePasswordRequest;
import org.openapitools.client.model.ConfirmDeviceRequest;
import org.openapitools.client.model.ConfirmDeviceResponse;
import org.openapitools.client.model.ConfirmForgotPasswordRequest;
import org.openapitools.client.model.ConfirmSignUpRequest;
import org.openapitools.client.model.CreateGroupRequest;
import org.openapitools.client.model.CreateGroupResponse;
import org.openapitools.client.model.CreateIdentityProviderRequest;
import org.openapitools.client.model.CreateIdentityProviderResponse;
import org.openapitools.client.model.CreateResourceServerRequest;
import org.openapitools.client.model.CreateResourceServerResponse;
import org.openapitools.client.model.CreateUserImportJobRequest;
import org.openapitools.client.model.CreateUserImportJobResponse;
import org.openapitools.client.model.CreateUserPoolClientRequest;
import org.openapitools.client.model.CreateUserPoolClientResponse;
import org.openapitools.client.model.CreateUserPoolDomainRequest;
import org.openapitools.client.model.CreateUserPoolDomainResponse;
import org.openapitools.client.model.CreateUserPoolRequest;
import org.openapitools.client.model.CreateUserPoolResponse;
import org.openapitools.client.model.DeleteGroupRequest;
import org.openapitools.client.model.DeleteIdentityProviderRequest;
import org.openapitools.client.model.DeleteResourceServerRequest;
import org.openapitools.client.model.DeleteUserAttributesRequest;
import org.openapitools.client.model.DeleteUserPoolClientRequest;
import org.openapitools.client.model.DeleteUserPoolDomainRequest;
import org.openapitools.client.model.DeleteUserPoolRequest;
import org.openapitools.client.model.DeleteUserRequest;
import org.openapitools.client.model.DescribeIdentityProviderRequest;
import org.openapitools.client.model.DescribeIdentityProviderResponse;
import org.openapitools.client.model.DescribeResourceServerRequest;
import org.openapitools.client.model.DescribeResourceServerResponse;
import org.openapitools.client.model.DescribeRiskConfigurationRequest;
import org.openapitools.client.model.DescribeRiskConfigurationResponse;
import org.openapitools.client.model.DescribeUserImportJobRequest;
import org.openapitools.client.model.DescribeUserImportJobResponse;
import org.openapitools.client.model.DescribeUserPoolClientRequest;
import org.openapitools.client.model.DescribeUserPoolClientResponse;
import org.openapitools.client.model.DescribeUserPoolDomainRequest;
import org.openapitools.client.model.DescribeUserPoolDomainResponse;
import org.openapitools.client.model.DescribeUserPoolRequest;
import org.openapitools.client.model.DescribeUserPoolResponse;
import org.openapitools.client.model.ForgetDeviceRequest;
import org.openapitools.client.model.ForgotPasswordRequest;
import org.openapitools.client.model.ForgotPasswordResponse;
import org.openapitools.client.model.GetCSVHeaderRequest;
import org.openapitools.client.model.GetCSVHeaderResponse;
import org.openapitools.client.model.GetDeviceRequest;
import org.openapitools.client.model.GetDeviceResponse;
import org.openapitools.client.model.GetGroupRequest;
import org.openapitools.client.model.GetGroupResponse;
import org.openapitools.client.model.GetIdentityProviderByIdentifierRequest;
import org.openapitools.client.model.GetIdentityProviderByIdentifierResponse;
import org.openapitools.client.model.GetLogDeliveryConfigurationRequest;
import org.openapitools.client.model.GetLogDeliveryConfigurationResponse;
import org.openapitools.client.model.GetSigningCertificateRequest;
import org.openapitools.client.model.GetSigningCertificateResponse;
import org.openapitools.client.model.GetUICustomizationRequest;
import org.openapitools.client.model.GetUICustomizationResponse;
import org.openapitools.client.model.GetUserAttributeVerificationCodeRequest;
import org.openapitools.client.model.GetUserAttributeVerificationCodeResponse;
import org.openapitools.client.model.GetUserPoolMfaConfigRequest;
import org.openapitools.client.model.GetUserPoolMfaConfigResponse;
import org.openapitools.client.model.GetUserRequest;
import org.openapitools.client.model.GetUserResponse;
import org.openapitools.client.model.GlobalSignOutRequest;
import org.openapitools.client.model.InitiateAuthRequest;
import org.openapitools.client.model.InitiateAuthResponse;
import org.openapitools.client.model.ListDevicesRequest;
import org.openapitools.client.model.ListDevicesResponse;
import org.openapitools.client.model.ListGroupsRequest;
import org.openapitools.client.model.ListGroupsResponse;
import org.openapitools.client.model.ListIdentityProvidersRequest;
import org.openapitools.client.model.ListIdentityProvidersResponse;
import org.openapitools.client.model.ListResourceServersRequest;
import org.openapitools.client.model.ListResourceServersResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListUserImportJobsRequest;
import org.openapitools.client.model.ListUserImportJobsResponse;
import org.openapitools.client.model.ListUserPoolClientsRequest;
import org.openapitools.client.model.ListUserPoolClientsResponse;
import org.openapitools.client.model.ListUserPoolsRequest;
import org.openapitools.client.model.ListUserPoolsResponse;
import org.openapitools.client.model.ListUsersInGroupRequest;
import org.openapitools.client.model.ListUsersInGroupResponse;
import org.openapitools.client.model.ListUsersRequest;
import org.openapitools.client.model.ListUsersResponse;
import org.openapitools.client.model.ResendConfirmationCodeRequest;
import org.openapitools.client.model.ResendConfirmationCodeResponse;
import org.openapitools.client.model.RespondToAuthChallengeRequest;
import org.openapitools.client.model.RespondToAuthChallengeResponse;
import org.openapitools.client.model.RevokeTokenRequest;
import org.openapitools.client.model.SetLogDeliveryConfigurationRequest;
import org.openapitools.client.model.SetLogDeliveryConfigurationResponse;
import org.openapitools.client.model.SetRiskConfigurationRequest;
import org.openapitools.client.model.SetRiskConfigurationResponse;
import org.openapitools.client.model.SetUICustomizationRequest;
import org.openapitools.client.model.SetUICustomizationResponse;
import org.openapitools.client.model.SetUserMFAPreferenceRequest;
import org.openapitools.client.model.SetUserPoolMfaConfigRequest;
import org.openapitools.client.model.SetUserPoolMfaConfigResponse;
import org.openapitools.client.model.SetUserSettingsRequest;
import org.openapitools.client.model.SignUpRequest;
import org.openapitools.client.model.SignUpResponse;
import org.openapitools.client.model.StartUserImportJobRequest;
import org.openapitools.client.model.StartUserImportJobResponse;
import org.openapitools.client.model.StopUserImportJobRequest;
import org.openapitools.client.model.StopUserImportJobResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateAuthEventFeedbackRequest;
import org.openapitools.client.model.UpdateDeviceStatusRequest;
import org.openapitools.client.model.UpdateGroupRequest;
import org.openapitools.client.model.UpdateGroupResponse;
import org.openapitools.client.model.UpdateIdentityProviderRequest;
import org.openapitools.client.model.UpdateIdentityProviderResponse;
import org.openapitools.client.model.UpdateResourceServerRequest;
import org.openapitools.client.model.UpdateResourceServerResponse;
import org.openapitools.client.model.UpdateUserAttributesRequest;
import org.openapitools.client.model.UpdateUserAttributesResponse;
import org.openapitools.client.model.UpdateUserPoolClientRequest;
import org.openapitools.client.model.UpdateUserPoolClientResponse;
import org.openapitools.client.model.UpdateUserPoolDomainRequest;
import org.openapitools.client.model.UpdateUserPoolDomainResponse;
import org.openapitools.client.model.UpdateUserPoolRequest;
import org.openapitools.client.model.VerifySoftwareTokenRequest;
import org.openapitools.client.model.VerifySoftwareTokenResponse;
import org.openapitools.client.model.VerifyUserAttributeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addCustomAttributes
     * @param xAmzTarget  (required)
     * @param addCustomAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserImportInProgressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCustomAttributesCall(String xAmzTarget, AddCustomAttributesRequest addCustomAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addCustomAttributesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AddCustomAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCustomAttributesValidateBeforeCall(String xAmzTarget, AddCustomAttributesRequest addCustomAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling addCustomAttributes(Async)");
        }

        // verify the required parameter 'addCustomAttributesRequest' is set
        if (addCustomAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'addCustomAttributesRequest' when calling addCustomAttributes(Async)");
        }

        return addCustomAttributesCall(xAmzTarget, addCustomAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds additional user attributes to the user pool schema.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param addCustomAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserImportInProgressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object addCustomAttributes(String xAmzTarget, AddCustomAttributesRequest addCustomAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = addCustomAttributesWithHttpInfo(xAmzTarget, addCustomAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds additional user attributes to the user pool schema.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param addCustomAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserImportInProgressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addCustomAttributesWithHttpInfo(String xAmzTarget, AddCustomAttributesRequest addCustomAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = addCustomAttributesValidateBeforeCall(xAmzTarget, addCustomAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds additional user attributes to the user pool schema.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param addCustomAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserImportInProgressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCustomAttributesAsync(String xAmzTarget, AddCustomAttributesRequest addCustomAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCustomAttributesValidateBeforeCall(xAmzTarget, addCustomAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminAddUserToGroup
     * @param xAmzTarget  (required)
     * @param adminAddUserToGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminAddUserToGroupCall(String xAmzTarget, AdminAddUserToGroupRequest adminAddUserToGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminAddUserToGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminAddUserToGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminAddUserToGroupValidateBeforeCall(String xAmzTarget, AdminAddUserToGroupRequest adminAddUserToGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminAddUserToGroup(Async)");
        }

        // verify the required parameter 'adminAddUserToGroupRequest' is set
        if (adminAddUserToGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'adminAddUserToGroupRequest' when calling adminAddUserToGroup(Async)");
        }

        return adminAddUserToGroupCall(xAmzTarget, adminAddUserToGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds the specified user to the specified group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminAddUserToGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void adminAddUserToGroup(String xAmzTarget, AdminAddUserToGroupRequest adminAddUserToGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        adminAddUserToGroupWithHttpInfo(xAmzTarget, adminAddUserToGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Adds the specified user to the specified group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminAddUserToGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminAddUserToGroupWithHttpInfo(String xAmzTarget, AdminAddUserToGroupRequest adminAddUserToGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminAddUserToGroupValidateBeforeCall(xAmzTarget, adminAddUserToGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds the specified user to the specified group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminAddUserToGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminAddUserToGroupAsync(String xAmzTarget, AdminAddUserToGroupRequest adminAddUserToGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminAddUserToGroupValidateBeforeCall(xAmzTarget, adminAddUserToGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminConfirmSignUp
     * @param xAmzTarget  (required)
     * @param adminConfirmSignUpRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFailedAttemptsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminConfirmSignUpCall(String xAmzTarget, AdminConfirmSignUpRequest adminConfirmSignUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminConfirmSignUpRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminConfirmSignUp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminConfirmSignUpValidateBeforeCall(String xAmzTarget, AdminConfirmSignUpRequest adminConfirmSignUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminConfirmSignUp(Async)");
        }

        // verify the required parameter 'adminConfirmSignUpRequest' is set
        if (adminConfirmSignUpRequest == null) {
            throw new ApiException("Missing the required parameter 'adminConfirmSignUpRequest' when calling adminConfirmSignUp(Async)");
        }

        return adminConfirmSignUpCall(xAmzTarget, adminConfirmSignUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Confirms user registration as an admin without using a confirmation code. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminConfirmSignUpRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFailedAttemptsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminConfirmSignUp(String xAmzTarget, AdminConfirmSignUpRequest adminConfirmSignUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminConfirmSignUpWithHttpInfo(xAmzTarget, adminConfirmSignUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Confirms user registration as an admin without using a confirmation code. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminConfirmSignUpRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFailedAttemptsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminConfirmSignUpWithHttpInfo(String xAmzTarget, AdminConfirmSignUpRequest adminConfirmSignUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminConfirmSignUpValidateBeforeCall(xAmzTarget, adminConfirmSignUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Confirms user registration as an admin without using a confirmation code. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminConfirmSignUpRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFailedAttemptsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminConfirmSignUpAsync(String xAmzTarget, AdminConfirmSignUpRequest adminConfirmSignUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminConfirmSignUpValidateBeforeCall(xAmzTarget, adminConfirmSignUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminCreateUser
     * @param xAmzTarget  (required)
     * @param adminCreateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UsernameExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UnsupportedUserStateException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminCreateUserCall(String xAmzTarget, AdminCreateUserRequest adminCreateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminCreateUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminCreateUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminCreateUserValidateBeforeCall(String xAmzTarget, AdminCreateUserRequest adminCreateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminCreateUser(Async)");
        }

        // verify the required parameter 'adminCreateUserRequest' is set
        if (adminCreateUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminCreateUserRequest' when calling adminCreateUser(Async)");
        }

        return adminCreateUserCall(xAmzTarget, adminCreateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new user in the specified user pool.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MessageAction&lt;/code&gt; isn&#39;t set, the default is to send a welcome message via email or phone (SMS).&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This message is based on a template that you configured in your call to create or update a user pool. This template includes your custom sign-up instructions and placeholders for user name and temporary password.&lt;/p&gt; &lt;p&gt;Alternatively, you can call &lt;code&gt;AdminCreateUser&lt;/code&gt; with &lt;code&gt;SUPPRESS&lt;/code&gt; for the &lt;code&gt;MessageAction&lt;/code&gt; parameter, and Amazon Cognito won&#39;t send any email. &lt;/p&gt; &lt;p&gt;In either case, the user will be in the &lt;code&gt;FORCE_CHANGE_PASSWORD&lt;/code&gt; state until they sign in and change their password.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminCreateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AdminCreateUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UsernameExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UnsupportedUserStateException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public AdminCreateUserResponse adminCreateUser(String xAmzTarget, AdminCreateUserRequest adminCreateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AdminCreateUserResponse> localVarResp = adminCreateUserWithHttpInfo(xAmzTarget, adminCreateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new user in the specified user pool.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MessageAction&lt;/code&gt; isn&#39;t set, the default is to send a welcome message via email or phone (SMS).&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This message is based on a template that you configured in your call to create or update a user pool. This template includes your custom sign-up instructions and placeholders for user name and temporary password.&lt;/p&gt; &lt;p&gt;Alternatively, you can call &lt;code&gt;AdminCreateUser&lt;/code&gt; with &lt;code&gt;SUPPRESS&lt;/code&gt; for the &lt;code&gt;MessageAction&lt;/code&gt; parameter, and Amazon Cognito won&#39;t send any email. &lt;/p&gt; &lt;p&gt;In either case, the user will be in the &lt;code&gt;FORCE_CHANGE_PASSWORD&lt;/code&gt; state until they sign in and change their password.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminCreateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AdminCreateUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UsernameExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UnsupportedUserStateException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminCreateUserResponse> adminCreateUserWithHttpInfo(String xAmzTarget, AdminCreateUserRequest adminCreateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminCreateUserValidateBeforeCall(xAmzTarget, adminCreateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AdminCreateUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new user in the specified user pool.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;MessageAction&lt;/code&gt; isn&#39;t set, the default is to send a welcome message via email or phone (SMS).&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This message is based on a template that you configured in your call to create or update a user pool. This template includes your custom sign-up instructions and placeholders for user name and temporary password.&lt;/p&gt; &lt;p&gt;Alternatively, you can call &lt;code&gt;AdminCreateUser&lt;/code&gt; with &lt;code&gt;SUPPRESS&lt;/code&gt; for the &lt;code&gt;MessageAction&lt;/code&gt; parameter, and Amazon Cognito won&#39;t send any email. &lt;/p&gt; &lt;p&gt;In either case, the user will be in the &lt;code&gt;FORCE_CHANGE_PASSWORD&lt;/code&gt; state until they sign in and change their password.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminCreateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UsernameExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UnsupportedUserStateException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminCreateUserAsync(String xAmzTarget, AdminCreateUserRequest adminCreateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AdminCreateUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminCreateUserValidateBeforeCall(xAmzTarget, adminCreateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AdminCreateUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminDeleteUser
     * @param xAmzTarget  (required)
     * @param adminDeleteUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDeleteUserCall(String xAmzTarget, AdminDeleteUserRequest adminDeleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminDeleteUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDeleteUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminDeleteUserValidateBeforeCall(String xAmzTarget, AdminDeleteUserRequest adminDeleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminDeleteUser(Async)");
        }

        // verify the required parameter 'adminDeleteUserRequest' is set
        if (adminDeleteUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminDeleteUserRequest' when calling adminDeleteUser(Async)");
        }

        return adminDeleteUserCall(xAmzTarget, adminDeleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a user as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminDeleteUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void adminDeleteUser(String xAmzTarget, AdminDeleteUserRequest adminDeleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        adminDeleteUserWithHttpInfo(xAmzTarget, adminDeleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a user as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminDeleteUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminDeleteUserWithHttpInfo(String xAmzTarget, AdminDeleteUserRequest adminDeleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminDeleteUserValidateBeforeCall(xAmzTarget, adminDeleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a user as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminDeleteUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDeleteUserAsync(String xAmzTarget, AdminDeleteUserRequest adminDeleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminDeleteUserValidateBeforeCall(xAmzTarget, adminDeleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminDeleteUserAttributes
     * @param xAmzTarget  (required)
     * @param adminDeleteUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDeleteUserAttributesCall(String xAmzTarget, AdminDeleteUserAttributesRequest adminDeleteUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminDeleteUserAttributesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDeleteUserAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminDeleteUserAttributesValidateBeforeCall(String xAmzTarget, AdminDeleteUserAttributesRequest adminDeleteUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminDeleteUserAttributes(Async)");
        }

        // verify the required parameter 'adminDeleteUserAttributesRequest' is set
        if (adminDeleteUserAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'adminDeleteUserAttributesRequest' when calling adminDeleteUserAttributes(Async)");
        }

        return adminDeleteUserAttributesCall(xAmzTarget, adminDeleteUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the user attributes in a user pool as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminDeleteUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminDeleteUserAttributes(String xAmzTarget, AdminDeleteUserAttributesRequest adminDeleteUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminDeleteUserAttributesWithHttpInfo(xAmzTarget, adminDeleteUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the user attributes in a user pool as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminDeleteUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminDeleteUserAttributesWithHttpInfo(String xAmzTarget, AdminDeleteUserAttributesRequest adminDeleteUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminDeleteUserAttributesValidateBeforeCall(xAmzTarget, adminDeleteUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the user attributes in a user pool as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminDeleteUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDeleteUserAttributesAsync(String xAmzTarget, AdminDeleteUserAttributesRequest adminDeleteUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminDeleteUserAttributesValidateBeforeCall(xAmzTarget, adminDeleteUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminDisableProviderForUser
     * @param xAmzTarget  (required)
     * @param adminDisableProviderForUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDisableProviderForUserCall(String xAmzTarget, AdminDisableProviderForUserRequest adminDisableProviderForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminDisableProviderForUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDisableProviderForUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminDisableProviderForUserValidateBeforeCall(String xAmzTarget, AdminDisableProviderForUserRequest adminDisableProviderForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminDisableProviderForUser(Async)");
        }

        // verify the required parameter 'adminDisableProviderForUserRequest' is set
        if (adminDisableProviderForUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminDisableProviderForUserRequest' when calling adminDisableProviderForUser(Async)");
        }

        return adminDisableProviderForUserCall(xAmzTarget, adminDisableProviderForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Prevents the user from signing in with the specified external (SAML or social) identity provider (IdP). If the user that you want to deactivate is a Amazon Cognito user pools native username + password user, they can&#39;t use their password to sign in. If the user to deactivate is a linked external IdP user, any link between that user and an existing user is removed. When the external user signs in again, and the user is no longer attached to the previously linked &lt;code&gt;DestinationUser&lt;/code&gt;, the user must create a new user account. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminLinkProviderForUser.html\&quot;&gt;AdminLinkProviderForUser&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ProviderName&lt;/code&gt; must match the value specified when creating an IdP for the pool. &lt;/p&gt; &lt;p&gt;To deactivate a native username + password user, the &lt;code&gt;ProviderName&lt;/code&gt; value must be &lt;code&gt;Cognito&lt;/code&gt; and the &lt;code&gt;ProviderAttributeName&lt;/code&gt; must be &lt;code&gt;Cognito_Subject&lt;/code&gt;. The &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must be the name that is used in the user pool for the user.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ProviderAttributeName&lt;/code&gt; must always be &lt;code&gt;Cognito_Subject&lt;/code&gt; for social IdPs. The &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must always be the exact subject that was used when the user was originally linked as a source user.&lt;/p&gt; &lt;p&gt;For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign in, the &lt;code&gt;ProviderAttributeName&lt;/code&gt; and &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must be the same values that were used for the &lt;code&gt;SourceUser&lt;/code&gt; when the identities were originally linked using &lt;code&gt; AdminLinkProviderForUser&lt;/code&gt; call. (If the linking was done with &lt;code&gt;ProviderAttributeName&lt;/code&gt; set to &lt;code&gt;Cognito_Subject&lt;/code&gt;, the same applies here). However, if the user has already signed in, the &lt;code&gt;ProviderAttributeName&lt;/code&gt; must be &lt;code&gt;Cognito_Subject&lt;/code&gt; and &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must be the subject of the SAML assertion.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminDisableProviderForUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminDisableProviderForUser(String xAmzTarget, AdminDisableProviderForUserRequest adminDisableProviderForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminDisableProviderForUserWithHttpInfo(xAmzTarget, adminDisableProviderForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Prevents the user from signing in with the specified external (SAML or social) identity provider (IdP). If the user that you want to deactivate is a Amazon Cognito user pools native username + password user, they can&#39;t use their password to sign in. If the user to deactivate is a linked external IdP user, any link between that user and an existing user is removed. When the external user signs in again, and the user is no longer attached to the previously linked &lt;code&gt;DestinationUser&lt;/code&gt;, the user must create a new user account. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminLinkProviderForUser.html\&quot;&gt;AdminLinkProviderForUser&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ProviderName&lt;/code&gt; must match the value specified when creating an IdP for the pool. &lt;/p&gt; &lt;p&gt;To deactivate a native username + password user, the &lt;code&gt;ProviderName&lt;/code&gt; value must be &lt;code&gt;Cognito&lt;/code&gt; and the &lt;code&gt;ProviderAttributeName&lt;/code&gt; must be &lt;code&gt;Cognito_Subject&lt;/code&gt;. The &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must be the name that is used in the user pool for the user.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ProviderAttributeName&lt;/code&gt; must always be &lt;code&gt;Cognito_Subject&lt;/code&gt; for social IdPs. The &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must always be the exact subject that was used when the user was originally linked as a source user.&lt;/p&gt; &lt;p&gt;For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign in, the &lt;code&gt;ProviderAttributeName&lt;/code&gt; and &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must be the same values that were used for the &lt;code&gt;SourceUser&lt;/code&gt; when the identities were originally linked using &lt;code&gt; AdminLinkProviderForUser&lt;/code&gt; call. (If the linking was done with &lt;code&gt;ProviderAttributeName&lt;/code&gt; set to &lt;code&gt;Cognito_Subject&lt;/code&gt;, the same applies here). However, if the user has already signed in, the &lt;code&gt;ProviderAttributeName&lt;/code&gt; must be &lt;code&gt;Cognito_Subject&lt;/code&gt; and &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must be the subject of the SAML assertion.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminDisableProviderForUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminDisableProviderForUserWithHttpInfo(String xAmzTarget, AdminDisableProviderForUserRequest adminDisableProviderForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminDisableProviderForUserValidateBeforeCall(xAmzTarget, adminDisableProviderForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Prevents the user from signing in with the specified external (SAML or social) identity provider (IdP). If the user that you want to deactivate is a Amazon Cognito user pools native username + password user, they can&#39;t use their password to sign in. If the user to deactivate is a linked external IdP user, any link between that user and an existing user is removed. When the external user signs in again, and the user is no longer attached to the previously linked &lt;code&gt;DestinationUser&lt;/code&gt;, the user must create a new user account. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminLinkProviderForUser.html\&quot;&gt;AdminLinkProviderForUser&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ProviderName&lt;/code&gt; must match the value specified when creating an IdP for the pool. &lt;/p&gt; &lt;p&gt;To deactivate a native username + password user, the &lt;code&gt;ProviderName&lt;/code&gt; value must be &lt;code&gt;Cognito&lt;/code&gt; and the &lt;code&gt;ProviderAttributeName&lt;/code&gt; must be &lt;code&gt;Cognito_Subject&lt;/code&gt;. The &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must be the name that is used in the user pool for the user.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ProviderAttributeName&lt;/code&gt; must always be &lt;code&gt;Cognito_Subject&lt;/code&gt; for social IdPs. The &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must always be the exact subject that was used when the user was originally linked as a source user.&lt;/p&gt; &lt;p&gt;For de-linking a SAML identity, there are two scenarios. If the linked identity has not yet been used to sign in, the &lt;code&gt;ProviderAttributeName&lt;/code&gt; and &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must be the same values that were used for the &lt;code&gt;SourceUser&lt;/code&gt; when the identities were originally linked using &lt;code&gt; AdminLinkProviderForUser&lt;/code&gt; call. (If the linking was done with &lt;code&gt;ProviderAttributeName&lt;/code&gt; set to &lt;code&gt;Cognito_Subject&lt;/code&gt;, the same applies here). However, if the user has already signed in, the &lt;code&gt;ProviderAttributeName&lt;/code&gt; must be &lt;code&gt;Cognito_Subject&lt;/code&gt; and &lt;code&gt;ProviderAttributeValue&lt;/code&gt; must be the subject of the SAML assertion.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminDisableProviderForUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDisableProviderForUserAsync(String xAmzTarget, AdminDisableProviderForUserRequest adminDisableProviderForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminDisableProviderForUserValidateBeforeCall(xAmzTarget, adminDisableProviderForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminDisableUser
     * @param xAmzTarget  (required)
     * @param adminDisableUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDisableUserCall(String xAmzTarget, AdminDisableUserRequest adminDisableUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminDisableUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminDisableUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminDisableUserValidateBeforeCall(String xAmzTarget, AdminDisableUserRequest adminDisableUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminDisableUser(Async)");
        }

        // verify the required parameter 'adminDisableUserRequest' is set
        if (adminDisableUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminDisableUserRequest' when calling adminDisableUser(Async)");
        }

        return adminDisableUserCall(xAmzTarget, adminDisableUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deactivates a user and revokes all access tokens for the user. A deactivated user can&#39;t sign in, but still appears in the responses to &lt;code&gt;GetUser&lt;/code&gt; and &lt;code&gt;ListUsers&lt;/code&gt; API requests.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminDisableUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminDisableUser(String xAmzTarget, AdminDisableUserRequest adminDisableUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminDisableUserWithHttpInfo(xAmzTarget, adminDisableUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deactivates a user and revokes all access tokens for the user. A deactivated user can&#39;t sign in, but still appears in the responses to &lt;code&gt;GetUser&lt;/code&gt; and &lt;code&gt;ListUsers&lt;/code&gt; API requests.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminDisableUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminDisableUserWithHttpInfo(String xAmzTarget, AdminDisableUserRequest adminDisableUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminDisableUserValidateBeforeCall(xAmzTarget, adminDisableUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deactivates a user and revokes all access tokens for the user. A deactivated user can&#39;t sign in, but still appears in the responses to &lt;code&gt;GetUser&lt;/code&gt; and &lt;code&gt;ListUsers&lt;/code&gt; API requests.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminDisableUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminDisableUserAsync(String xAmzTarget, AdminDisableUserRequest adminDisableUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminDisableUserValidateBeforeCall(xAmzTarget, adminDisableUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminEnableUser
     * @param xAmzTarget  (required)
     * @param adminEnableUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminEnableUserCall(String xAmzTarget, AdminEnableUserRequest adminEnableUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminEnableUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminEnableUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminEnableUserValidateBeforeCall(String xAmzTarget, AdminEnableUserRequest adminEnableUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminEnableUser(Async)");
        }

        // verify the required parameter 'adminEnableUserRequest' is set
        if (adminEnableUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminEnableUserRequest' when calling adminEnableUser(Async)");
        }

        return adminEnableUserCall(xAmzTarget, adminEnableUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Enables the specified user as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminEnableUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminEnableUser(String xAmzTarget, AdminEnableUserRequest adminEnableUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminEnableUserWithHttpInfo(xAmzTarget, adminEnableUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Enables the specified user as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminEnableUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminEnableUserWithHttpInfo(String xAmzTarget, AdminEnableUserRequest adminEnableUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminEnableUserValidateBeforeCall(xAmzTarget, adminEnableUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Enables the specified user as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminEnableUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminEnableUserAsync(String xAmzTarget, AdminEnableUserRequest adminEnableUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminEnableUserValidateBeforeCall(xAmzTarget, adminEnableUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminForgetDevice
     * @param xAmzTarget  (required)
     * @param adminForgetDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminForgetDeviceCall(String xAmzTarget, AdminForgetDeviceRequest adminForgetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminForgetDeviceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminForgetDevice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminForgetDeviceValidateBeforeCall(String xAmzTarget, AdminForgetDeviceRequest adminForgetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminForgetDevice(Async)");
        }

        // verify the required parameter 'adminForgetDeviceRequest' is set
        if (adminForgetDeviceRequest == null) {
            throw new ApiException("Missing the required parameter 'adminForgetDeviceRequest' when calling adminForgetDevice(Async)");
        }

        return adminForgetDeviceCall(xAmzTarget, adminForgetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Forgets the device, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminForgetDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void adminForgetDevice(String xAmzTarget, AdminForgetDeviceRequest adminForgetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        adminForgetDeviceWithHttpInfo(xAmzTarget, adminForgetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Forgets the device, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminForgetDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminForgetDeviceWithHttpInfo(String xAmzTarget, AdminForgetDeviceRequest adminForgetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminForgetDeviceValidateBeforeCall(xAmzTarget, adminForgetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Forgets the device, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminForgetDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminForgetDeviceAsync(String xAmzTarget, AdminForgetDeviceRequest adminForgetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminForgetDeviceValidateBeforeCall(xAmzTarget, adminForgetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetDevice
     * @param xAmzTarget  (required)
     * @param adminGetDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetDeviceCall(String xAmzTarget, AdminGetDeviceRequest adminGetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminGetDeviceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminGetDevice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetDeviceValidateBeforeCall(String xAmzTarget, AdminGetDeviceRequest adminGetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminGetDevice(Async)");
        }

        // verify the required parameter 'adminGetDeviceRequest' is set
        if (adminGetDeviceRequest == null) {
            throw new ApiException("Missing the required parameter 'adminGetDeviceRequest' when calling adminGetDevice(Async)");
        }

        return adminGetDeviceCall(xAmzTarget, adminGetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the device, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminGetDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AdminGetDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public AdminGetDeviceResponse adminGetDevice(String xAmzTarget, AdminGetDeviceRequest adminGetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AdminGetDeviceResponse> localVarResp = adminGetDeviceWithHttpInfo(xAmzTarget, adminGetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the device, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminGetDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AdminGetDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminGetDeviceResponse> adminGetDeviceWithHttpInfo(String xAmzTarget, AdminGetDeviceRequest adminGetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminGetDeviceValidateBeforeCall(xAmzTarget, adminGetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AdminGetDeviceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the device, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminGetDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetDeviceAsync(String xAmzTarget, AdminGetDeviceRequest adminGetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AdminGetDeviceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetDeviceValidateBeforeCall(xAmzTarget, adminGetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AdminGetDeviceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminGetUser
     * @param xAmzTarget  (required)
     * @param adminGetUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetUserCall(String xAmzTarget, AdminGetUserRequest adminGetUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminGetUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminGetUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminGetUserValidateBeforeCall(String xAmzTarget, AdminGetUserRequest adminGetUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminGetUser(Async)");
        }

        // verify the required parameter 'adminGetUserRequest' is set
        if (adminGetUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminGetUserRequest' when calling adminGetUser(Async)");
        }

        return adminGetUserCall(xAmzTarget, adminGetUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the specified user by user name in a user pool as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminGetUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AdminGetUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public AdminGetUserResponse adminGetUser(String xAmzTarget, AdminGetUserRequest adminGetUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AdminGetUserResponse> localVarResp = adminGetUserWithHttpInfo(xAmzTarget, adminGetUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the specified user by user name in a user pool as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminGetUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AdminGetUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminGetUserResponse> adminGetUserWithHttpInfo(String xAmzTarget, AdminGetUserRequest adminGetUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminGetUserValidateBeforeCall(xAmzTarget, adminGetUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AdminGetUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the specified user by user name in a user pool as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminGetUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminGetUserAsync(String xAmzTarget, AdminGetUserRequest adminGetUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AdminGetUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminGetUserValidateBeforeCall(xAmzTarget, adminGetUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AdminGetUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminInitiateAuth
     * @param xAmzTarget  (required)
     * @param adminInitiateAuthRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MFAMethodNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminInitiateAuthCall(String xAmzTarget, AdminInitiateAuthRequest adminInitiateAuthRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminInitiateAuthRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminInitiateAuth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminInitiateAuthValidateBeforeCall(String xAmzTarget, AdminInitiateAuthRequest adminInitiateAuthRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminInitiateAuth(Async)");
        }

        // verify the required parameter 'adminInitiateAuthRequest' is set
        if (adminInitiateAuthRequest == null) {
            throw new ApiException("Missing the required parameter 'adminInitiateAuthRequest' when calling adminInitiateAuth(Async)");
        }

        return adminInitiateAuthCall(xAmzTarget, adminInitiateAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Initiates the authentication flow, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminInitiateAuthRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AdminInitiateAuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MFAMethodNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
     </table>
     */
    public AdminInitiateAuthResponse adminInitiateAuth(String xAmzTarget, AdminInitiateAuthRequest adminInitiateAuthRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AdminInitiateAuthResponse> localVarResp = adminInitiateAuthWithHttpInfo(xAmzTarget, adminInitiateAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Initiates the authentication flow, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminInitiateAuthRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AdminInitiateAuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MFAMethodNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminInitiateAuthResponse> adminInitiateAuthWithHttpInfo(String xAmzTarget, AdminInitiateAuthRequest adminInitiateAuthRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminInitiateAuthValidateBeforeCall(xAmzTarget, adminInitiateAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AdminInitiateAuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Initiates the authentication flow, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminInitiateAuthRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> MFAMethodNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminInitiateAuthAsync(String xAmzTarget, AdminInitiateAuthRequest adminInitiateAuthRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AdminInitiateAuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminInitiateAuthValidateBeforeCall(xAmzTarget, adminInitiateAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AdminInitiateAuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminLinkProviderForUser
     * @param xAmzTarget  (required)
     * @param adminLinkProviderForUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminLinkProviderForUserCall(String xAmzTarget, AdminLinkProviderForUserRequest adminLinkProviderForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminLinkProviderForUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminLinkProviderForUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminLinkProviderForUserValidateBeforeCall(String xAmzTarget, AdminLinkProviderForUserRequest adminLinkProviderForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminLinkProviderForUser(Async)");
        }

        // verify the required parameter 'adminLinkProviderForUserRequest' is set
        if (adminLinkProviderForUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminLinkProviderForUserRequest' when calling adminLinkProviderForUser(Async)");
        }

        return adminLinkProviderForUserCall(xAmzTarget, adminLinkProviderForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Links an existing user account in a user pool (&lt;code&gt;DestinationUser&lt;/code&gt;) to an identity from an external IdP (&lt;code&gt;SourceUser&lt;/code&gt;) based on a specified attribute name and value from the external IdP. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in. You can then use the federated user identity to sign in as the existing user account. &lt;/p&gt; &lt;p&gt; For example, if there is an existing user with a username and password, this API links that user to a federated user identity. When the user signs in with a federated user identity, they sign in as the existing user account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The maximum number of federated identities linked to a user is five.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external IdPs and provider attributes that have been trusted by the application owner.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminLinkProviderForUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminLinkProviderForUser(String xAmzTarget, AdminLinkProviderForUserRequest adminLinkProviderForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminLinkProviderForUserWithHttpInfo(xAmzTarget, adminLinkProviderForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Links an existing user account in a user pool (&lt;code&gt;DestinationUser&lt;/code&gt;) to an identity from an external IdP (&lt;code&gt;SourceUser&lt;/code&gt;) based on a specified attribute name and value from the external IdP. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in. You can then use the federated user identity to sign in as the existing user account. &lt;/p&gt; &lt;p&gt; For example, if there is an existing user with a username and password, this API links that user to a federated user identity. When the user signs in with a federated user identity, they sign in as the existing user account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The maximum number of federated identities linked to a user is five.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external IdPs and provider attributes that have been trusted by the application owner.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminLinkProviderForUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminLinkProviderForUserWithHttpInfo(String xAmzTarget, AdminLinkProviderForUserRequest adminLinkProviderForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminLinkProviderForUserValidateBeforeCall(xAmzTarget, adminLinkProviderForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Links an existing user account in a user pool (&lt;code&gt;DestinationUser&lt;/code&gt;) to an identity from an external IdP (&lt;code&gt;SourceUser&lt;/code&gt;) based on a specified attribute name and value from the external IdP. This allows you to create a link from the existing user account to an external federated user identity that has not yet been used to sign in. You can then use the federated user identity to sign in as the existing user account. &lt;/p&gt; &lt;p&gt; For example, if there is an existing user with a username and password, this API links that user to a federated user identity. When the user signs in with a federated user identity, they sign in as the existing user account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The maximum number of federated identities linked to a user is five.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Because this API allows a user with an external federated identity to sign in as an existing user in the user pool, it is critical that it only be used with external IdPs and provider attributes that have been trusted by the application owner.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminLinkProviderForUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminLinkProviderForUserAsync(String xAmzTarget, AdminLinkProviderForUserRequest adminLinkProviderForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminLinkProviderForUserValidateBeforeCall(xAmzTarget, adminLinkProviderForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminListDevices
     * @param xAmzTarget  (required)
     * @param adminListDevicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminListDevicesCall(String xAmzTarget, AdminListDevicesRequest adminListDevicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminListDevicesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListDevices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminListDevicesValidateBeforeCall(String xAmzTarget, AdminListDevicesRequest adminListDevicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminListDevices(Async)");
        }

        // verify the required parameter 'adminListDevicesRequest' is set
        if (adminListDevicesRequest == null) {
            throw new ApiException("Missing the required parameter 'adminListDevicesRequest' when calling adminListDevices(Async)");
        }

        return adminListDevicesCall(xAmzTarget, adminListDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists devices, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminListDevicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AdminListDevicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public AdminListDevicesResponse adminListDevices(String xAmzTarget, AdminListDevicesRequest adminListDevicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AdminListDevicesResponse> localVarResp = adminListDevicesWithHttpInfo(xAmzTarget, adminListDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists devices, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminListDevicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AdminListDevicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminListDevicesResponse> adminListDevicesWithHttpInfo(String xAmzTarget, AdminListDevicesRequest adminListDevicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminListDevicesValidateBeforeCall(xAmzTarget, adminListDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AdminListDevicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists devices, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminListDevicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminListDevicesAsync(String xAmzTarget, AdminListDevicesRequest adminListDevicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AdminListDevicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminListDevicesValidateBeforeCall(xAmzTarget, adminListDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AdminListDevicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminListGroupsForUser
     * @param xAmzTarget  (required)
     * @param adminListGroupsForUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminListGroupsForUserCall(String xAmzTarget, AdminListGroupsForUserRequest adminListGroupsForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminListGroupsForUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListGroupsForUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Limit", limit));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminListGroupsForUserValidateBeforeCall(String xAmzTarget, AdminListGroupsForUserRequest adminListGroupsForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminListGroupsForUser(Async)");
        }

        // verify the required parameter 'adminListGroupsForUserRequest' is set
        if (adminListGroupsForUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminListGroupsForUserRequest' when calling adminListGroupsForUser(Async)");
        }

        return adminListGroupsForUserCall(xAmzTarget, adminListGroupsForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the groups that the user belongs to.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminListGroupsForUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return AdminListGroupsForUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public AdminListGroupsForUserResponse adminListGroupsForUser(String xAmzTarget, AdminListGroupsForUserRequest adminListGroupsForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken) throws ApiException {
        ApiResponse<AdminListGroupsForUserResponse> localVarResp = adminListGroupsForUserWithHttpInfo(xAmzTarget, adminListGroupsForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the groups that the user belongs to.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminListGroupsForUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;AdminListGroupsForUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminListGroupsForUserResponse> adminListGroupsForUserWithHttpInfo(String xAmzTarget, AdminListGroupsForUserRequest adminListGroupsForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = adminListGroupsForUserValidateBeforeCall(xAmzTarget, adminListGroupsForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, null);
        Type localVarReturnType = new TypeToken<AdminListGroupsForUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the groups that the user belongs to.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminListGroupsForUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminListGroupsForUserAsync(String xAmzTarget, AdminListGroupsForUserRequest adminListGroupsForUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken, final ApiCallback<AdminListGroupsForUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminListGroupsForUserValidateBeforeCall(xAmzTarget, adminListGroupsForUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, _callback);
        Type localVarReturnType = new TypeToken<AdminListGroupsForUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminListUserAuthEvents
     * @param xAmzTarget  (required)
     * @param adminListUserAuthEventsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminListUserAuthEventsCall(String xAmzTarget, AdminListUserAuthEventsRequest adminListUserAuthEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminListUserAuthEventsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminListUserAuthEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminListUserAuthEventsValidateBeforeCall(String xAmzTarget, AdminListUserAuthEventsRequest adminListUserAuthEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminListUserAuthEvents(Async)");
        }

        // verify the required parameter 'adminListUserAuthEventsRequest' is set
        if (adminListUserAuthEventsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminListUserAuthEventsRequest' when calling adminListUserAuthEvents(Async)");
        }

        return adminListUserAuthEventsCall(xAmzTarget, adminListUserAuthEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;A history of user activity and any risks detected as part of Amazon Cognito advanced security.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminListUserAuthEventsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return AdminListUserAuthEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public AdminListUserAuthEventsResponse adminListUserAuthEvents(String xAmzTarget, AdminListUserAuthEventsRequest adminListUserAuthEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<AdminListUserAuthEventsResponse> localVarResp = adminListUserAuthEventsWithHttpInfo(xAmzTarget, adminListUserAuthEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;A history of user activity and any risks detected as part of Amazon Cognito advanced security.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminListUserAuthEventsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;AdminListUserAuthEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminListUserAuthEventsResponse> adminListUserAuthEventsWithHttpInfo(String xAmzTarget, AdminListUserAuthEventsRequest adminListUserAuthEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = adminListUserAuthEventsValidateBeforeCall(xAmzTarget, adminListUserAuthEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<AdminListUserAuthEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;A history of user activity and any risks detected as part of Amazon Cognito advanced security.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminListUserAuthEventsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminListUserAuthEventsAsync(String xAmzTarget, AdminListUserAuthEventsRequest adminListUserAuthEventsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<AdminListUserAuthEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminListUserAuthEventsValidateBeforeCall(xAmzTarget, adminListUserAuthEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<AdminListUserAuthEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRemoveUserFromGroup
     * @param xAmzTarget  (required)
     * @param adminRemoveUserFromGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRemoveUserFromGroupCall(String xAmzTarget, AdminRemoveUserFromGroupRequest adminRemoveUserFromGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminRemoveUserFromGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminRemoveUserFromGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRemoveUserFromGroupValidateBeforeCall(String xAmzTarget, AdminRemoveUserFromGroupRequest adminRemoveUserFromGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminRemoveUserFromGroup(Async)");
        }

        // verify the required parameter 'adminRemoveUserFromGroupRequest' is set
        if (adminRemoveUserFromGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'adminRemoveUserFromGroupRequest' when calling adminRemoveUserFromGroup(Async)");
        }

        return adminRemoveUserFromGroupCall(xAmzTarget, adminRemoveUserFromGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes the specified user from the specified group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminRemoveUserFromGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void adminRemoveUserFromGroup(String xAmzTarget, AdminRemoveUserFromGroupRequest adminRemoveUserFromGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        adminRemoveUserFromGroupWithHttpInfo(xAmzTarget, adminRemoveUserFromGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Removes the specified user from the specified group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminRemoveUserFromGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRemoveUserFromGroupWithHttpInfo(String xAmzTarget, AdminRemoveUserFromGroupRequest adminRemoveUserFromGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminRemoveUserFromGroupValidateBeforeCall(xAmzTarget, adminRemoveUserFromGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes the specified user from the specified group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminRemoveUserFromGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRemoveUserFromGroupAsync(String xAmzTarget, AdminRemoveUserFromGroupRequest adminRemoveUserFromGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRemoveUserFromGroupValidateBeforeCall(xAmzTarget, adminRemoveUserFromGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminResetUserPassword
     * @param xAmzTarget  (required)
     * @param adminResetUserPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminResetUserPasswordCall(String xAmzTarget, AdminResetUserPasswordRequest adminResetUserPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminResetUserPasswordRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminResetUserPassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminResetUserPasswordValidateBeforeCall(String xAmzTarget, AdminResetUserPasswordRequest adminResetUserPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminResetUserPassword(Async)");
        }

        // verify the required parameter 'adminResetUserPasswordRequest' is set
        if (adminResetUserPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'adminResetUserPasswordRequest' when calling adminResetUserPassword(Async)");
        }

        return adminResetUserPasswordCall(xAmzTarget, adminResetUserPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Resets the specified user&#39;s password in a user pool as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Deactivates a user&#39;s password, requiring them to change it. If a user tries to sign in after the API is called, Amazon Cognito responds with a &lt;code&gt;PasswordResetRequiredException&lt;/code&gt; error. Your app must then perform the actions that reset your user&#39;s password: the forgot-password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminResetUserPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminResetUserPassword(String xAmzTarget, AdminResetUserPasswordRequest adminResetUserPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminResetUserPasswordWithHttpInfo(xAmzTarget, adminResetUserPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Resets the specified user&#39;s password in a user pool as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Deactivates a user&#39;s password, requiring them to change it. If a user tries to sign in after the API is called, Amazon Cognito responds with a &lt;code&gt;PasswordResetRequiredException&lt;/code&gt; error. Your app must then perform the actions that reset your user&#39;s password: the forgot-password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminResetUserPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminResetUserPasswordWithHttpInfo(String xAmzTarget, AdminResetUserPasswordRequest adminResetUserPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminResetUserPasswordValidateBeforeCall(xAmzTarget, adminResetUserPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Resets the specified user&#39;s password in a user pool as an administrator. Works on any user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Deactivates a user&#39;s password, requiring them to change it. If a user tries to sign in after the API is called, Amazon Cognito responds with a &lt;code&gt;PasswordResetRequiredException&lt;/code&gt; error. Your app must then perform the actions that reset your user&#39;s password: the forgot-password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminResetUserPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminResetUserPasswordAsync(String xAmzTarget, AdminResetUserPasswordRequest adminResetUserPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminResetUserPasswordValidateBeforeCall(xAmzTarget, adminResetUserPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRespondToAuthChallenge
     * @param xAmzTarget  (required)
     * @param adminRespondToAuthChallengeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MFAMethodNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRespondToAuthChallengeCall(String xAmzTarget, AdminRespondToAuthChallengeRequest adminRespondToAuthChallengeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminRespondToAuthChallengeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminRespondToAuthChallenge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRespondToAuthChallengeValidateBeforeCall(String xAmzTarget, AdminRespondToAuthChallengeRequest adminRespondToAuthChallengeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminRespondToAuthChallenge(Async)");
        }

        // verify the required parameter 'adminRespondToAuthChallengeRequest' is set
        if (adminRespondToAuthChallengeRequest == null) {
            throw new ApiException("Missing the required parameter 'adminRespondToAuthChallengeRequest' when calling adminRespondToAuthChallenge(Async)");
        }

        return adminRespondToAuthChallengeCall(xAmzTarget, adminRespondToAuthChallengeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Responds to an authentication challenge, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminRespondToAuthChallengeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AdminRespondToAuthChallengeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MFAMethodNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public AdminRespondToAuthChallengeResponse adminRespondToAuthChallenge(String xAmzTarget, AdminRespondToAuthChallengeRequest adminRespondToAuthChallengeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AdminRespondToAuthChallengeResponse> localVarResp = adminRespondToAuthChallengeWithHttpInfo(xAmzTarget, adminRespondToAuthChallengeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Responds to an authentication challenge, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminRespondToAuthChallengeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AdminRespondToAuthChallengeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MFAMethodNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminRespondToAuthChallengeResponse> adminRespondToAuthChallengeWithHttpInfo(String xAmzTarget, AdminRespondToAuthChallengeRequest adminRespondToAuthChallengeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminRespondToAuthChallengeValidateBeforeCall(xAmzTarget, adminRespondToAuthChallengeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AdminRespondToAuthChallengeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Responds to an authentication challenge, as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminRespondToAuthChallengeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> MFAMethodNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRespondToAuthChallengeAsync(String xAmzTarget, AdminRespondToAuthChallengeRequest adminRespondToAuthChallengeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AdminRespondToAuthChallengeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRespondToAuthChallengeValidateBeforeCall(xAmzTarget, adminRespondToAuthChallengeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AdminRespondToAuthChallengeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminSetUserMFAPreference
     * @param xAmzTarget  (required)
     * @param adminSetUserMFAPreferenceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminSetUserMFAPreferenceCall(String xAmzTarget, AdminSetUserMFAPreferenceRequest adminSetUserMFAPreferenceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminSetUserMFAPreferenceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserMFAPreference";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminSetUserMFAPreferenceValidateBeforeCall(String xAmzTarget, AdminSetUserMFAPreferenceRequest adminSetUserMFAPreferenceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminSetUserMFAPreference(Async)");
        }

        // verify the required parameter 'adminSetUserMFAPreferenceRequest' is set
        if (adminSetUserMFAPreferenceRequest == null) {
            throw new ApiException("Missing the required parameter 'adminSetUserMFAPreferenceRequest' when calling adminSetUserMFAPreference(Async)");
        }

        return adminSetUserMFAPreferenceCall(xAmzTarget, adminSetUserMFAPreferenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;The user&#39;s multi-factor authentication (MFA) preference, including which MFA options are activated, and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminSetUserMFAPreferenceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminSetUserMFAPreference(String xAmzTarget, AdminSetUserMFAPreferenceRequest adminSetUserMFAPreferenceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminSetUserMFAPreferenceWithHttpInfo(xAmzTarget, adminSetUserMFAPreferenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The user&#39;s multi-factor authentication (MFA) preference, including which MFA options are activated, and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminSetUserMFAPreferenceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminSetUserMFAPreferenceWithHttpInfo(String xAmzTarget, AdminSetUserMFAPreferenceRequest adminSetUserMFAPreferenceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminSetUserMFAPreferenceValidateBeforeCall(xAmzTarget, adminSetUserMFAPreferenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The user&#39;s multi-factor authentication (MFA) preference, including which MFA options are activated, and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminSetUserMFAPreferenceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminSetUserMFAPreferenceAsync(String xAmzTarget, AdminSetUserMFAPreferenceRequest adminSetUserMFAPreferenceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminSetUserMFAPreferenceValidateBeforeCall(xAmzTarget, adminSetUserMFAPreferenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminSetUserPassword
     * @param xAmzTarget  (required)
     * @param adminSetUserPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminSetUserPasswordCall(String xAmzTarget, AdminSetUserPasswordRequest adminSetUserPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminSetUserPasswordRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserPassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminSetUserPasswordValidateBeforeCall(String xAmzTarget, AdminSetUserPasswordRequest adminSetUserPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminSetUserPassword(Async)");
        }

        // verify the required parameter 'adminSetUserPasswordRequest' is set
        if (adminSetUserPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'adminSetUserPasswordRequest' when calling adminSetUserPassword(Async)");
        }

        return adminSetUserPasswordCall(xAmzTarget, adminSetUserPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the specified user&#39;s password in a user pool as an administrator. Works on any user. &lt;/p&gt; &lt;p&gt;The password can be temporary or permanent. If it is temporary, the user status enters the &lt;code&gt;FORCE_CHANGE_PASSWORD&lt;/code&gt; state. When the user next tries to sign in, the InitiateAuth/AdminInitiateAuth response will contain the &lt;code&gt;NEW_PASSWORD_REQUIRED&lt;/code&gt; challenge. If the user doesn&#39;t sign in before it expires, the user won&#39;t be able to sign in, and an administrator must reset their password. &lt;/p&gt; &lt;p&gt;Once the user has set a new password, or the password is permanent, the user status is set to &lt;code&gt;Confirmed&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AdminSetUserPassword&lt;/code&gt; can set a password for the user profile that Amazon Cognito creates for third-party federated users. When you set a password, the federated user&#39;s status changes from &lt;code&gt;EXTERNAL_PROVIDER&lt;/code&gt; to &lt;code&gt;CONFIRMED&lt;/code&gt;. A user in this state can sign in as a federated user, and initiate authentication flows in the API like a linked native user. They can also modify their password and attributes in token-authenticated API requests like &lt;code&gt;ChangePassword&lt;/code&gt; and &lt;code&gt;UpdateUserAttributes&lt;/code&gt;. As a best security practice and to keep users in sync with your external IdP, don&#39;t set passwords on federated user profiles. To set up a federated user for native sign-in with a linked native user, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\&quot;&gt;Linking federated users to an existing user profile&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminSetUserPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminSetUserPassword(String xAmzTarget, AdminSetUserPasswordRequest adminSetUserPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminSetUserPasswordWithHttpInfo(xAmzTarget, adminSetUserPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sets the specified user&#39;s password in a user pool as an administrator. Works on any user. &lt;/p&gt; &lt;p&gt;The password can be temporary or permanent. If it is temporary, the user status enters the &lt;code&gt;FORCE_CHANGE_PASSWORD&lt;/code&gt; state. When the user next tries to sign in, the InitiateAuth/AdminInitiateAuth response will contain the &lt;code&gt;NEW_PASSWORD_REQUIRED&lt;/code&gt; challenge. If the user doesn&#39;t sign in before it expires, the user won&#39;t be able to sign in, and an administrator must reset their password. &lt;/p&gt; &lt;p&gt;Once the user has set a new password, or the password is permanent, the user status is set to &lt;code&gt;Confirmed&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AdminSetUserPassword&lt;/code&gt; can set a password for the user profile that Amazon Cognito creates for third-party federated users. When you set a password, the federated user&#39;s status changes from &lt;code&gt;EXTERNAL_PROVIDER&lt;/code&gt; to &lt;code&gt;CONFIRMED&lt;/code&gt;. A user in this state can sign in as a federated user, and initiate authentication flows in the API like a linked native user. They can also modify their password and attributes in token-authenticated API requests like &lt;code&gt;ChangePassword&lt;/code&gt; and &lt;code&gt;UpdateUserAttributes&lt;/code&gt;. As a best security practice and to keep users in sync with your external IdP, don&#39;t set passwords on federated user profiles. To set up a federated user for native sign-in with a linked native user, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\&quot;&gt;Linking federated users to an existing user profile&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminSetUserPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminSetUserPasswordWithHttpInfo(String xAmzTarget, AdminSetUserPasswordRequest adminSetUserPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminSetUserPasswordValidateBeforeCall(xAmzTarget, adminSetUserPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the specified user&#39;s password in a user pool as an administrator. Works on any user. &lt;/p&gt; &lt;p&gt;The password can be temporary or permanent. If it is temporary, the user status enters the &lt;code&gt;FORCE_CHANGE_PASSWORD&lt;/code&gt; state. When the user next tries to sign in, the InitiateAuth/AdminInitiateAuth response will contain the &lt;code&gt;NEW_PASSWORD_REQUIRED&lt;/code&gt; challenge. If the user doesn&#39;t sign in before it expires, the user won&#39;t be able to sign in, and an administrator must reset their password. &lt;/p&gt; &lt;p&gt;Once the user has set a new password, or the password is permanent, the user status is set to &lt;code&gt;Confirmed&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AdminSetUserPassword&lt;/code&gt; can set a password for the user profile that Amazon Cognito creates for third-party federated users. When you set a password, the federated user&#39;s status changes from &lt;code&gt;EXTERNAL_PROVIDER&lt;/code&gt; to &lt;code&gt;CONFIRMED&lt;/code&gt;. A user in this state can sign in as a federated user, and initiate authentication flows in the API like a linked native user. They can also modify their password and attributes in token-authenticated API requests like &lt;code&gt;ChangePassword&lt;/code&gt; and &lt;code&gt;UpdateUserAttributes&lt;/code&gt;. As a best security practice and to keep users in sync with your external IdP, don&#39;t set passwords on federated user profiles. To set up a federated user for native sign-in with a linked native user, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\&quot;&gt;Linking federated users to an existing user profile&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminSetUserPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminSetUserPasswordAsync(String xAmzTarget, AdminSetUserPasswordRequest adminSetUserPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminSetUserPasswordValidateBeforeCall(xAmzTarget, adminSetUserPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminSetUserSettings
     * @param xAmzTarget  (required)
     * @param adminSetUserSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminSetUserSettingsCall(String xAmzTarget, AdminSetUserSettingsRequest adminSetUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminSetUserSettingsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminSetUserSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminSetUserSettingsValidateBeforeCall(String xAmzTarget, AdminSetUserSettingsRequest adminSetUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminSetUserSettings(Async)");
        }

        // verify the required parameter 'adminSetUserSettingsRequest' is set
        if (adminSetUserSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminSetUserSettingsRequest' when calling adminSetUserSettings(Async)");
        }

        return adminSetUserSettingsCall(xAmzTarget, adminSetUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; &lt;i&gt;This action is no longer supported.&lt;/i&gt; You can use it to configure only SMS MFA. You can&#39;t use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminSetUserMFAPreference.html\&quot;&gt;AdminSetUserMFAPreference&lt;/a&gt; instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminSetUserSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminSetUserSettings(String xAmzTarget, AdminSetUserSettingsRequest adminSetUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminSetUserSettingsWithHttpInfo(xAmzTarget, adminSetUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; &lt;i&gt;This action is no longer supported.&lt;/i&gt; You can use it to configure only SMS MFA. You can&#39;t use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminSetUserMFAPreference.html\&quot;&gt;AdminSetUserMFAPreference&lt;/a&gt; instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminSetUserSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminSetUserSettingsWithHttpInfo(String xAmzTarget, AdminSetUserSettingsRequest adminSetUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminSetUserSettingsValidateBeforeCall(xAmzTarget, adminSetUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; &lt;i&gt;This action is no longer supported.&lt;/i&gt; You can use it to configure only SMS MFA. You can&#39;t use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminSetUserMFAPreference.html\&quot;&gt;AdminSetUserMFAPreference&lt;/a&gt; instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminSetUserSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminSetUserSettingsAsync(String xAmzTarget, AdminSetUserSettingsRequest adminSetUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminSetUserSettingsValidateBeforeCall(xAmzTarget, adminSetUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUpdateAuthEventFeedback
     * @param xAmzTarget  (required)
     * @param adminUpdateAuthEventFeedbackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminUpdateAuthEventFeedbackCall(String xAmzTarget, AdminUpdateAuthEventFeedbackRequest adminUpdateAuthEventFeedbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminUpdateAuthEventFeedbackRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateAuthEventFeedback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUpdateAuthEventFeedbackValidateBeforeCall(String xAmzTarget, AdminUpdateAuthEventFeedbackRequest adminUpdateAuthEventFeedbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminUpdateAuthEventFeedback(Async)");
        }

        // verify the required parameter 'adminUpdateAuthEventFeedbackRequest' is set
        if (adminUpdateAuthEventFeedbackRequest == null) {
            throw new ApiException("Missing the required parameter 'adminUpdateAuthEventFeedbackRequest' when calling adminUpdateAuthEventFeedback(Async)");
        }

        return adminUpdateAuthEventFeedbackCall(xAmzTarget, adminUpdateAuthEventFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Provides feedback for an authentication event indicating if it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminUpdateAuthEventFeedbackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminUpdateAuthEventFeedback(String xAmzTarget, AdminUpdateAuthEventFeedbackRequest adminUpdateAuthEventFeedbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminUpdateAuthEventFeedbackWithHttpInfo(xAmzTarget, adminUpdateAuthEventFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Provides feedback for an authentication event indicating if it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminUpdateAuthEventFeedbackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminUpdateAuthEventFeedbackWithHttpInfo(String xAmzTarget, AdminUpdateAuthEventFeedbackRequest adminUpdateAuthEventFeedbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminUpdateAuthEventFeedbackValidateBeforeCall(xAmzTarget, adminUpdateAuthEventFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Provides feedback for an authentication event indicating if it was from a valid user. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminUpdateAuthEventFeedbackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminUpdateAuthEventFeedbackAsync(String xAmzTarget, AdminUpdateAuthEventFeedbackRequest adminUpdateAuthEventFeedbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUpdateAuthEventFeedbackValidateBeforeCall(xAmzTarget, adminUpdateAuthEventFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUpdateDeviceStatus
     * @param xAmzTarget  (required)
     * @param adminUpdateDeviceStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminUpdateDeviceStatusCall(String xAmzTarget, AdminUpdateDeviceStatusRequest adminUpdateDeviceStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminUpdateDeviceStatusRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateDeviceStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUpdateDeviceStatusValidateBeforeCall(String xAmzTarget, AdminUpdateDeviceStatusRequest adminUpdateDeviceStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminUpdateDeviceStatus(Async)");
        }

        // verify the required parameter 'adminUpdateDeviceStatusRequest' is set
        if (adminUpdateDeviceStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'adminUpdateDeviceStatusRequest' when calling adminUpdateDeviceStatus(Async)");
        }

        return adminUpdateDeviceStatusCall(xAmzTarget, adminUpdateDeviceStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the device status as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminUpdateDeviceStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminUpdateDeviceStatus(String xAmzTarget, AdminUpdateDeviceStatusRequest adminUpdateDeviceStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminUpdateDeviceStatusWithHttpInfo(xAmzTarget, adminUpdateDeviceStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the device status as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminUpdateDeviceStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminUpdateDeviceStatusWithHttpInfo(String xAmzTarget, AdminUpdateDeviceStatusRequest adminUpdateDeviceStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminUpdateDeviceStatusValidateBeforeCall(xAmzTarget, adminUpdateDeviceStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the device status as an administrator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminUpdateDeviceStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminUpdateDeviceStatusAsync(String xAmzTarget, AdminUpdateDeviceStatusRequest adminUpdateDeviceStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUpdateDeviceStatusValidateBeforeCall(xAmzTarget, adminUpdateDeviceStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUpdateUserAttributes
     * @param xAmzTarget  (required)
     * @param adminUpdateUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminUpdateUserAttributesCall(String xAmzTarget, AdminUpdateUserAttributesRequest adminUpdateUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminUpdateUserAttributesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUpdateUserAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUpdateUserAttributesValidateBeforeCall(String xAmzTarget, AdminUpdateUserAttributesRequest adminUpdateUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminUpdateUserAttributes(Async)");
        }

        // verify the required parameter 'adminUpdateUserAttributesRequest' is set
        if (adminUpdateUserAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'adminUpdateUserAttributesRequest' when calling adminUpdateUserAttributes(Async)");
        }

        return adminUpdateUserAttributesCall(xAmzTarget, adminUpdateUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Updates the specified user&#39;s attributes, including developer attributes, as an administrator. Works on any user.&lt;/p&gt; &lt;p&gt;For custom attributes, you must prepend the &lt;code&gt;custom:&lt;/code&gt; prefix to the attribute name.&lt;/p&gt; &lt;p&gt;In addition to updating user attributes, this API can also be used to mark phone and email as verified.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminUpdateUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminUpdateUserAttributes(String xAmzTarget, AdminUpdateUserAttributesRequest adminUpdateUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminUpdateUserAttributesWithHttpInfo(xAmzTarget, adminUpdateUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Updates the specified user&#39;s attributes, including developer attributes, as an administrator. Works on any user.&lt;/p&gt; &lt;p&gt;For custom attributes, you must prepend the &lt;code&gt;custom:&lt;/code&gt; prefix to the attribute name.&lt;/p&gt; &lt;p&gt;In addition to updating user attributes, this API can also be used to mark phone and email as verified.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminUpdateUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminUpdateUserAttributesWithHttpInfo(String xAmzTarget, AdminUpdateUserAttributesRequest adminUpdateUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminUpdateUserAttributesValidateBeforeCall(xAmzTarget, adminUpdateUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Updates the specified user&#39;s attributes, including developer attributes, as an administrator. Works on any user.&lt;/p&gt; &lt;p&gt;For custom attributes, you must prepend the &lt;code&gt;custom:&lt;/code&gt; prefix to the attribute name.&lt;/p&gt; &lt;p&gt;In addition to updating user attributes, this API can also be used to mark phone and email as verified.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminUpdateUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminUpdateUserAttributesAsync(String xAmzTarget, AdminUpdateUserAttributesRequest adminUpdateUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUpdateUserAttributesValidateBeforeCall(xAmzTarget, adminUpdateUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminUserGlobalSignOut
     * @param xAmzTarget  (required)
     * @param adminUserGlobalSignOutRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminUserGlobalSignOutCall(String xAmzTarget, AdminUserGlobalSignOutRequest adminUserGlobalSignOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminUserGlobalSignOutRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AdminUserGlobalSignOut";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminUserGlobalSignOutValidateBeforeCall(String xAmzTarget, AdminUserGlobalSignOutRequest adminUserGlobalSignOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling adminUserGlobalSignOut(Async)");
        }

        // verify the required parameter 'adminUserGlobalSignOutRequest' is set
        if (adminUserGlobalSignOutRequest == null) {
            throw new ApiException("Missing the required parameter 'adminUserGlobalSignOutRequest' when calling adminUserGlobalSignOut(Async)");
        }

        return adminUserGlobalSignOutCall(xAmzTarget, adminUserGlobalSignOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Signs out a user from all devices. &lt;code&gt;AdminUserGlobalSignOut&lt;/code&gt; invalidates all identity, access and refresh tokens that Amazon Cognito has issued to a user. A user can still use a hosted UI cookie to retrieve new tokens for the duration of the 1-hour cookie validity period.&lt;/p&gt; &lt;p&gt;Your app isn&#39;t aware that a user&#39;s access token is revoked unless it attempts to authorize a user pools API request with an access token that contains the scope &lt;code&gt;aws.cognito.signin.user.admin&lt;/code&gt;. Your app might otherwise accept access tokens until they expire.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminUserGlobalSignOutRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object adminUserGlobalSignOut(String xAmzTarget, AdminUserGlobalSignOutRequest adminUserGlobalSignOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = adminUserGlobalSignOutWithHttpInfo(xAmzTarget, adminUserGlobalSignOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Signs out a user from all devices. &lt;code&gt;AdminUserGlobalSignOut&lt;/code&gt; invalidates all identity, access and refresh tokens that Amazon Cognito has issued to a user. A user can still use a hosted UI cookie to retrieve new tokens for the duration of the 1-hour cookie validity period.&lt;/p&gt; &lt;p&gt;Your app isn&#39;t aware that a user&#39;s access token is revoked unless it attempts to authorize a user pools API request with an access token that contains the scope &lt;code&gt;aws.cognito.signin.user.admin&lt;/code&gt;. Your app might otherwise accept access tokens until they expire.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminUserGlobalSignOutRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> adminUserGlobalSignOutWithHttpInfo(String xAmzTarget, AdminUserGlobalSignOutRequest adminUserGlobalSignOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = adminUserGlobalSignOutValidateBeforeCall(xAmzTarget, adminUserGlobalSignOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Signs out a user from all devices. &lt;code&gt;AdminUserGlobalSignOut&lt;/code&gt; invalidates all identity, access and refresh tokens that Amazon Cognito has issued to a user. A user can still use a hosted UI cookie to retrieve new tokens for the duration of the 1-hour cookie validity period.&lt;/p&gt; &lt;p&gt;Your app isn&#39;t aware that a user&#39;s access token is revoked unless it attempts to authorize a user pools API request with an access token that contains the scope &lt;code&gt;aws.cognito.signin.user.admin&lt;/code&gt;. Your app might otherwise accept access tokens until they expire.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param adminUserGlobalSignOutRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminUserGlobalSignOutAsync(String xAmzTarget, AdminUserGlobalSignOutRequest adminUserGlobalSignOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminUserGlobalSignOutValidateBeforeCall(xAmzTarget, adminUserGlobalSignOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for associateSoftwareToken
     * @param xAmzTarget  (required)
     * @param associateSoftwareTokenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateSoftwareTokenCall(String xAmzTarget, AssociateSoftwareTokenRequest associateSoftwareTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateSoftwareTokenRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.AssociateSoftwareToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateSoftwareTokenValidateBeforeCall(String xAmzTarget, AssociateSoftwareTokenRequest associateSoftwareTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling associateSoftwareToken(Async)");
        }

        // verify the required parameter 'associateSoftwareTokenRequest' is set
        if (associateSoftwareTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'associateSoftwareTokenRequest' when calling associateSoftwareToken(Async)");
        }

        return associateSoftwareTokenCall(xAmzTarget, associateSoftwareTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Begins setup of time-based one-time password (TOTP) multi-factor authentication (MFA) for a user, with a unique private key that Amazon Cognito generates and returns in the API response. You can authorize an &lt;code&gt;AssociateSoftwareToken&lt;/code&gt; request with either the user&#39;s access token, or a session string from a challenge response that you received from Amazon Cognito.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito disassociates an existing software token when you verify the new token in a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerifySoftwareToken.html\&quot;&gt; VerifySoftwareToken&lt;/a&gt; API request. If you don&#39;t verify the software token and your user pool doesn&#39;t require MFA, the user can then authenticate with user name and password credentials alone. If your user pool requires TOTP MFA, Amazon Cognito generates an &lt;code&gt;MFA_SETUP&lt;/code&gt; or &lt;code&gt;SOFTWARE_TOKEN_SETUP&lt;/code&gt; challenge each time your user signs. Complete setup with &lt;code&gt;AssociateSoftwareToken&lt;/code&gt; and &lt;code&gt;VerifySoftwareToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you set up software token MFA for your user, Amazon Cognito generates a &lt;code&gt;SOFTWARE_TOKEN_MFA&lt;/code&gt; challenge when they authenticate. Respond to this challenge with your user&#39;s TOTP.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param associateSoftwareTokenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AssociateSoftwareTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public AssociateSoftwareTokenResponse associateSoftwareToken(String xAmzTarget, AssociateSoftwareTokenRequest associateSoftwareTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AssociateSoftwareTokenResponse> localVarResp = associateSoftwareTokenWithHttpInfo(xAmzTarget, associateSoftwareTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Begins setup of time-based one-time password (TOTP) multi-factor authentication (MFA) for a user, with a unique private key that Amazon Cognito generates and returns in the API response. You can authorize an &lt;code&gt;AssociateSoftwareToken&lt;/code&gt; request with either the user&#39;s access token, or a session string from a challenge response that you received from Amazon Cognito.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito disassociates an existing software token when you verify the new token in a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerifySoftwareToken.html\&quot;&gt; VerifySoftwareToken&lt;/a&gt; API request. If you don&#39;t verify the software token and your user pool doesn&#39;t require MFA, the user can then authenticate with user name and password credentials alone. If your user pool requires TOTP MFA, Amazon Cognito generates an &lt;code&gt;MFA_SETUP&lt;/code&gt; or &lt;code&gt;SOFTWARE_TOKEN_SETUP&lt;/code&gt; challenge each time your user signs. Complete setup with &lt;code&gt;AssociateSoftwareToken&lt;/code&gt; and &lt;code&gt;VerifySoftwareToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you set up software token MFA for your user, Amazon Cognito generates a &lt;code&gt;SOFTWARE_TOKEN_MFA&lt;/code&gt; challenge when they authenticate. Respond to this challenge with your user&#39;s TOTP.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param associateSoftwareTokenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AssociateSoftwareTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociateSoftwareTokenResponse> associateSoftwareTokenWithHttpInfo(String xAmzTarget, AssociateSoftwareTokenRequest associateSoftwareTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateSoftwareTokenValidateBeforeCall(xAmzTarget, associateSoftwareTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AssociateSoftwareTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Begins setup of time-based one-time password (TOTP) multi-factor authentication (MFA) for a user, with a unique private key that Amazon Cognito generates and returns in the API response. You can authorize an &lt;code&gt;AssociateSoftwareToken&lt;/code&gt; request with either the user&#39;s access token, or a session string from a challenge response that you received from Amazon Cognito.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito disassociates an existing software token when you verify the new token in a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerifySoftwareToken.html\&quot;&gt; VerifySoftwareToken&lt;/a&gt; API request. If you don&#39;t verify the software token and your user pool doesn&#39;t require MFA, the user can then authenticate with user name and password credentials alone. If your user pool requires TOTP MFA, Amazon Cognito generates an &lt;code&gt;MFA_SETUP&lt;/code&gt; or &lt;code&gt;SOFTWARE_TOKEN_SETUP&lt;/code&gt; challenge each time your user signs. Complete setup with &lt;code&gt;AssociateSoftwareToken&lt;/code&gt; and &lt;code&gt;VerifySoftwareToken&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you set up software token MFA for your user, Amazon Cognito generates a &lt;code&gt;SOFTWARE_TOKEN_MFA&lt;/code&gt; challenge when they authenticate. Respond to this challenge with your user&#39;s TOTP.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param associateSoftwareTokenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateSoftwareTokenAsync(String xAmzTarget, AssociateSoftwareTokenRequest associateSoftwareTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AssociateSoftwareTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateSoftwareTokenValidateBeforeCall(xAmzTarget, associateSoftwareTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AssociateSoftwareTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for changePassword
     * @param xAmzTarget  (required)
     * @param changePasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordCall(String xAmzTarget, ChangePasswordRequest changePasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changePasswordRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ChangePassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordValidateBeforeCall(String xAmzTarget, ChangePasswordRequest changePasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling changePassword(Async)");
        }

        // verify the required parameter 'changePasswordRequest' is set
        if (changePasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'changePasswordRequest' when calling changePassword(Async)");
        }

        return changePasswordCall(xAmzTarget, changePasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Changes the password for a specified user in a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param changePasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public Object changePassword(String xAmzTarget, ChangePasswordRequest changePasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = changePasswordWithHttpInfo(xAmzTarget, changePasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Changes the password for a specified user in a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param changePasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> changePasswordWithHttpInfo(String xAmzTarget, ChangePasswordRequest changePasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(xAmzTarget, changePasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Changes the password for a specified user in a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param changePasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changePasswordAsync(String xAmzTarget, ChangePasswordRequest changePasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordValidateBeforeCall(xAmzTarget, changePasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmDevice
     * @param xAmzTarget  (required)
     * @param confirmDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UsernameExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmDeviceCall(String xAmzTarget, ConfirmDeviceRequest confirmDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = confirmDeviceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmDevice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmDeviceValidateBeforeCall(String xAmzTarget, ConfirmDeviceRequest confirmDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling confirmDevice(Async)");
        }

        // verify the required parameter 'confirmDeviceRequest' is set
        if (confirmDeviceRequest == null) {
            throw new ApiException("Missing the required parameter 'confirmDeviceRequest' when calling confirmDevice(Async)");
        }

        return confirmDeviceCall(xAmzTarget, confirmDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Confirms tracking of the device. This API call is the call that begins device tracking.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param confirmDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ConfirmDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UsernameExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ConfirmDeviceResponse confirmDevice(String xAmzTarget, ConfirmDeviceRequest confirmDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ConfirmDeviceResponse> localVarResp = confirmDeviceWithHttpInfo(xAmzTarget, confirmDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Confirms tracking of the device. This API call is the call that begins device tracking.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param confirmDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ConfirmDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UsernameExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfirmDeviceResponse> confirmDeviceWithHttpInfo(String xAmzTarget, ConfirmDeviceRequest confirmDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = confirmDeviceValidateBeforeCall(xAmzTarget, confirmDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ConfirmDeviceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Confirms tracking of the device. This API call is the call that begins device tracking.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param confirmDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UsernameExistsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmDeviceAsync(String xAmzTarget, ConfirmDeviceRequest confirmDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ConfirmDeviceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmDeviceValidateBeforeCall(xAmzTarget, confirmDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ConfirmDeviceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmForgotPassword
     * @param xAmzTarget  (required)
     * @param confirmForgotPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyFailedAttemptsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmForgotPasswordCall(String xAmzTarget, ConfirmForgotPasswordRequest confirmForgotPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = confirmForgotPasswordRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmForgotPassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmForgotPasswordValidateBeforeCall(String xAmzTarget, ConfirmForgotPasswordRequest confirmForgotPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling confirmForgotPassword(Async)");
        }

        // verify the required parameter 'confirmForgotPasswordRequest' is set
        if (confirmForgotPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'confirmForgotPasswordRequest' when calling confirmForgotPassword(Async)");
        }

        return confirmForgotPasswordCall(xAmzTarget, confirmForgotPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Allows a user to enter a confirmation code to reset a forgotten password.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param confirmForgotPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyFailedAttemptsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public Object confirmForgotPassword(String xAmzTarget, ConfirmForgotPasswordRequest confirmForgotPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = confirmForgotPasswordWithHttpInfo(xAmzTarget, confirmForgotPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Allows a user to enter a confirmation code to reset a forgotten password.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param confirmForgotPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyFailedAttemptsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> confirmForgotPasswordWithHttpInfo(String xAmzTarget, ConfirmForgotPasswordRequest confirmForgotPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = confirmForgotPasswordValidateBeforeCall(xAmzTarget, confirmForgotPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Allows a user to enter a confirmation code to reset a forgotten password.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param confirmForgotPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyFailedAttemptsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmForgotPasswordAsync(String xAmzTarget, ConfirmForgotPasswordRequest confirmForgotPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmForgotPasswordValidateBeforeCall(xAmzTarget, confirmForgotPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmSignUp
     * @param xAmzTarget  (required)
     * @param confirmSignUpRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFailedAttemptsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmSignUpCall(String xAmzTarget, ConfirmSignUpRequest confirmSignUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = confirmSignUpRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ConfirmSignUp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmSignUpValidateBeforeCall(String xAmzTarget, ConfirmSignUpRequest confirmSignUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling confirmSignUp(Async)");
        }

        // verify the required parameter 'confirmSignUpRequest' is set
        if (confirmSignUpRequest == null) {
            throw new ApiException("Missing the required parameter 'confirmSignUpRequest' when calling confirmSignUp(Async)");
        }

        return confirmSignUpCall(xAmzTarget, confirmSignUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Confirms registration of a new user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param confirmSignUpRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFailedAttemptsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public Object confirmSignUp(String xAmzTarget, ConfirmSignUpRequest confirmSignUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = confirmSignUpWithHttpInfo(xAmzTarget, confirmSignUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Confirms registration of a new user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param confirmSignUpRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFailedAttemptsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> confirmSignUpWithHttpInfo(String xAmzTarget, ConfirmSignUpRequest confirmSignUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = confirmSignUpValidateBeforeCall(xAmzTarget, confirmSignUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Confirms registration of a new user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param confirmSignUpRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyFailedAttemptsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmSignUpAsync(String xAmzTarget, ConfirmSignUpRequest confirmSignUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmSignUpValidateBeforeCall(xAmzTarget, confirmSignUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroup
     * @param xAmzTarget  (required)
     * @param createGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GroupExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupCall(String xAmzTarget, CreateGroupRequest createGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupValidateBeforeCall(String xAmzTarget, CreateGroupRequest createGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createGroup(Async)");
        }

        // verify the required parameter 'createGroupRequest' is set
        if (createGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createGroupRequest' when calling createGroup(Async)");
        }

        return createGroupCall(xAmzTarget, createGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new group in the specified user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GroupExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public CreateGroupResponse createGroup(String xAmzTarget, CreateGroupRequest createGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateGroupResponse> localVarResp = createGroupWithHttpInfo(xAmzTarget, createGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new group in the specified user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GroupExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGroupResponse> createGroupWithHttpInfo(String xAmzTarget, CreateGroupRequest createGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createGroupValidateBeforeCall(xAmzTarget, createGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new group in the specified user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> GroupExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupAsync(String xAmzTarget, CreateGroupRequest createGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupValidateBeforeCall(xAmzTarget, createGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createIdentityProvider
     * @param xAmzTarget  (required)
     * @param createIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateProviderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIdentityProviderCall(String xAmzTarget, CreateIdentityProviderRequest createIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createIdentityProviderRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateIdentityProvider";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIdentityProviderValidateBeforeCall(String xAmzTarget, CreateIdentityProviderRequest createIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createIdentityProvider(Async)");
        }

        // verify the required parameter 'createIdentityProviderRequest' is set
        if (createIdentityProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'createIdentityProviderRequest' when calling createIdentityProvider(Async)");
        }

        return createIdentityProviderCall(xAmzTarget, createIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an IdP for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateIdentityProviderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateProviderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public CreateIdentityProviderResponse createIdentityProvider(String xAmzTarget, CreateIdentityProviderRequest createIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateIdentityProviderResponse> localVarResp = createIdentityProviderWithHttpInfo(xAmzTarget, createIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an IdP for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateIdentityProviderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateProviderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateIdentityProviderResponse> createIdentityProviderWithHttpInfo(String xAmzTarget, CreateIdentityProviderRequest createIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createIdentityProviderValidateBeforeCall(xAmzTarget, createIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateIdentityProviderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an IdP for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateProviderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIdentityProviderAsync(String xAmzTarget, CreateIdentityProviderRequest createIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateIdentityProviderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIdentityProviderValidateBeforeCall(xAmzTarget, createIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateIdentityProviderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createResourceServer
     * @param xAmzTarget  (required)
     * @param createResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResourceServerCall(String xAmzTarget, CreateResourceServerRequest createResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createResourceServerRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateResourceServer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createResourceServerValidateBeforeCall(String xAmzTarget, CreateResourceServerRequest createResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createResourceServer(Async)");
        }

        // verify the required parameter 'createResourceServerRequest' is set
        if (createResourceServerRequest == null) {
            throw new ApiException("Missing the required parameter 'createResourceServerRequest' when calling createResourceServer(Async)");
        }

        return createResourceServerCall(xAmzTarget, createResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new OAuth2.0 resource server and defines custom scopes within it.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateResourceServerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public CreateResourceServerResponse createResourceServer(String xAmzTarget, CreateResourceServerRequest createResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateResourceServerResponse> localVarResp = createResourceServerWithHttpInfo(xAmzTarget, createResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new OAuth2.0 resource server and defines custom scopes within it.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateResourceServerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateResourceServerResponse> createResourceServerWithHttpInfo(String xAmzTarget, CreateResourceServerRequest createResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createResourceServerValidateBeforeCall(xAmzTarget, createResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateResourceServerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new OAuth2.0 resource server and defines custom scopes within it.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResourceServerAsync(String xAmzTarget, CreateResourceServerRequest createResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateResourceServerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createResourceServerValidateBeforeCall(xAmzTarget, createResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateResourceServerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUserImportJob
     * @param xAmzTarget  (required)
     * @param createUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserImportJobCall(String xAmzTarget, CreateUserImportJobRequest createUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserImportJobRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserImportJob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserImportJobValidateBeforeCall(String xAmzTarget, CreateUserImportJobRequest createUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createUserImportJob(Async)");
        }

        // verify the required parameter 'createUserImportJobRequest' is set
        if (createUserImportJobRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserImportJobRequest' when calling createUserImportJob(Async)");
        }

        return createUserImportJobCall(xAmzTarget, createUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a user import job.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateUserImportJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserImportJobResponse createUserImportJob(String xAmzTarget, CreateUserImportJobRequest createUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateUserImportJobResponse> localVarResp = createUserImportJobWithHttpInfo(xAmzTarget, createUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a user import job.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateUserImportJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateUserImportJobResponse> createUserImportJobWithHttpInfo(String xAmzTarget, CreateUserImportJobRequest createUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createUserImportJobValidateBeforeCall(xAmzTarget, createUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateUserImportJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a user import job.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserImportJobAsync(String xAmzTarget, CreateUserImportJobRequest createUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateUserImportJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserImportJobValidateBeforeCall(xAmzTarget, createUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateUserImportJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUserPool
     * @param xAmzTarget  (required)
     * @param createUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserPoolTaggingException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserPoolCall(String xAmzTarget, CreateUserPoolRequest createUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserPoolRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserPoolValidateBeforeCall(String xAmzTarget, CreateUserPoolRequest createUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createUserPool(Async)");
        }

        // verify the required parameter 'createUserPoolRequest' is set
        if (createUserPoolRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserPoolRequest' when calling createUserPool(Async)");
        }

        return createUserPoolCall(xAmzTarget, createUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a new Amazon Cognito user pool and sets the password policy for the pool.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateUserPoolResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserPoolTaggingException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserPoolResponse createUserPool(String xAmzTarget, CreateUserPoolRequest createUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateUserPoolResponse> localVarResp = createUserPoolWithHttpInfo(xAmzTarget, createUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a new Amazon Cognito user pool and sets the password policy for the pool.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateUserPoolResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserPoolTaggingException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateUserPoolResponse> createUserPoolWithHttpInfo(String xAmzTarget, CreateUserPoolRequest createUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createUserPoolValidateBeforeCall(xAmzTarget, createUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateUserPoolResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Creates a new Amazon Cognito user pool and sets the password policy for the pool.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserPoolTaggingException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserPoolAsync(String xAmzTarget, CreateUserPoolRequest createUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateUserPoolResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserPoolValidateBeforeCall(xAmzTarget, createUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateUserPoolResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUserPoolClient
     * @param xAmzTarget  (required)
     * @param createUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ScopeDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidOAuthFlowException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserPoolClientCall(String xAmzTarget, CreateUserPoolClientRequest createUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserPoolClientRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPoolClient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserPoolClientValidateBeforeCall(String xAmzTarget, CreateUserPoolClientRequest createUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createUserPoolClient(Async)");
        }

        // verify the required parameter 'createUserPoolClientRequest' is set
        if (createUserPoolClientRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserPoolClientRequest' when calling createUserPoolClient(Async)");
        }

        return createUserPoolClientCall(xAmzTarget, createUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates the user pool client.&lt;/p&gt; &lt;p&gt;When you create a new user pool client, token revocation is automatically activated. For more information about revoking tokens, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html\&quot;&gt;RevokeToken&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateUserPoolClientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ScopeDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidOAuthFlowException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserPoolClientResponse createUserPoolClient(String xAmzTarget, CreateUserPoolClientRequest createUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateUserPoolClientResponse> localVarResp = createUserPoolClientWithHttpInfo(xAmzTarget, createUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates the user pool client.&lt;/p&gt; &lt;p&gt;When you create a new user pool client, token revocation is automatically activated. For more information about revoking tokens, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html\&quot;&gt;RevokeToken&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateUserPoolClientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ScopeDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidOAuthFlowException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateUserPoolClientResponse> createUserPoolClientWithHttpInfo(String xAmzTarget, CreateUserPoolClientRequest createUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createUserPoolClientValidateBeforeCall(xAmzTarget, createUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateUserPoolClientResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates the user pool client.&lt;/p&gt; &lt;p&gt;When you create a new user pool client, token revocation is automatically activated. For more information about revoking tokens, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html\&quot;&gt;RevokeToken&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ScopeDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidOAuthFlowException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserPoolClientAsync(String xAmzTarget, CreateUserPoolClientRequest createUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateUserPoolClientResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserPoolClientValidateBeforeCall(xAmzTarget, createUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateUserPoolClientResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUserPoolDomain
     * @param xAmzTarget  (required)
     * @param createUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserPoolDomainCall(String xAmzTarget, CreateUserPoolDomainRequest createUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserPoolDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.CreateUserPoolDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserPoolDomainValidateBeforeCall(String xAmzTarget, CreateUserPoolDomainRequest createUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createUserPoolDomain(Async)");
        }

        // verify the required parameter 'createUserPoolDomainRequest' is set
        if (createUserPoolDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserPoolDomainRequest' when calling createUserPoolDomain(Async)");
        }

        return createUserPoolDomainCall(xAmzTarget, createUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new domain for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateUserPoolDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserPoolDomainResponse createUserPoolDomain(String xAmzTarget, CreateUserPoolDomainRequest createUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateUserPoolDomainResponse> localVarResp = createUserPoolDomainWithHttpInfo(xAmzTarget, createUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new domain for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateUserPoolDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateUserPoolDomainResponse> createUserPoolDomainWithHttpInfo(String xAmzTarget, CreateUserPoolDomainRequest createUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createUserPoolDomainValidateBeforeCall(xAmzTarget, createUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateUserPoolDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new domain for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param createUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserPoolDomainAsync(String xAmzTarget, CreateUserPoolDomainRequest createUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateUserPoolDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserPoolDomainValidateBeforeCall(xAmzTarget, createUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateUserPoolDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroup
     * @param xAmzTarget  (required)
     * @param deleteGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupCall(String xAmzTarget, DeleteGroupRequest deleteGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupValidateBeforeCall(String xAmzTarget, DeleteGroupRequest deleteGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteGroup(Async)");
        }

        // verify the required parameter 'deleteGroupRequest' is set
        if (deleteGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteGroupRequest' when calling deleteGroup(Async)");
        }

        return deleteGroupCall(xAmzTarget, deleteGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a group.&lt;/p&gt; &lt;p&gt;Calling this action requires developer credentials.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGroup(String xAmzTarget, DeleteGroupRequest deleteGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteGroupWithHttpInfo(xAmzTarget, deleteGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a group.&lt;/p&gt; &lt;p&gt;Calling this action requires developer credentials.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGroupWithHttpInfo(String xAmzTarget, DeleteGroupRequest deleteGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(xAmzTarget, deleteGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a group.&lt;/p&gt; &lt;p&gt;Calling this action requires developer credentials.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAsync(String xAmzTarget, DeleteGroupRequest deleteGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(xAmzTarget, deleteGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIdentityProvider
     * @param xAmzTarget  (required)
     * @param deleteIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedIdentityProviderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIdentityProviderCall(String xAmzTarget, DeleteIdentityProviderRequest deleteIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteIdentityProviderRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteIdentityProvider";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIdentityProviderValidateBeforeCall(String xAmzTarget, DeleteIdentityProviderRequest deleteIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteIdentityProvider(Async)");
        }

        // verify the required parameter 'deleteIdentityProviderRequest' is set
        if (deleteIdentityProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteIdentityProviderRequest' when calling deleteIdentityProvider(Async)");
        }

        return deleteIdentityProviderCall(xAmzTarget, deleteIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes an IdP for a user pool.
     * @param xAmzTarget  (required)
     * @param deleteIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedIdentityProviderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteIdentityProvider(String xAmzTarget, DeleteIdentityProviderRequest deleteIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteIdentityProviderWithHttpInfo(xAmzTarget, deleteIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes an IdP for a user pool.
     * @param xAmzTarget  (required)
     * @param deleteIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedIdentityProviderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteIdentityProviderWithHttpInfo(String xAmzTarget, DeleteIdentityProviderRequest deleteIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteIdentityProviderValidateBeforeCall(xAmzTarget, deleteIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an IdP for a user pool.
     * @param xAmzTarget  (required)
     * @param deleteIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedIdentityProviderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIdentityProviderAsync(String xAmzTarget, DeleteIdentityProviderRequest deleteIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIdentityProviderValidateBeforeCall(xAmzTarget, deleteIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResourceServer
     * @param xAmzTarget  (required)
     * @param deleteResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceServerCall(String xAmzTarget, DeleteResourceServerRequest deleteResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteResourceServerRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteResourceServer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourceServerValidateBeforeCall(String xAmzTarget, DeleteResourceServerRequest deleteResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteResourceServer(Async)");
        }

        // verify the required parameter 'deleteResourceServerRequest' is set
        if (deleteResourceServerRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteResourceServerRequest' when calling deleteResourceServer(Async)");
        }

        return deleteResourceServerCall(xAmzTarget, deleteResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a resource server.
     * @param xAmzTarget  (required)
     * @param deleteResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteResourceServer(String xAmzTarget, DeleteResourceServerRequest deleteResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteResourceServerWithHttpInfo(xAmzTarget, deleteResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes a resource server.
     * @param xAmzTarget  (required)
     * @param deleteResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteResourceServerWithHttpInfo(String xAmzTarget, DeleteResourceServerRequest deleteResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteResourceServerValidateBeforeCall(xAmzTarget, deleteResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a resource server.
     * @param xAmzTarget  (required)
     * @param deleteResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceServerAsync(String xAmzTarget, DeleteResourceServerRequest deleteResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourceServerValidateBeforeCall(xAmzTarget, deleteResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param xAmzTarget  (required)
     * @param deleteUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(String xAmzTarget, DeleteUserRequest deleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String xAmzTarget, DeleteUserRequest deleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteUser(Async)");
        }

        // verify the required parameter 'deleteUserRequest' is set
        if (deleteUserRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteUserRequest' when calling deleteUser(Async)");
        }

        return deleteUserCall(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Allows a user to delete their own user profile.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param deleteUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUser(String xAmzTarget, DeleteUserRequest deleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteUserWithHttpInfo(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Allows a user to delete their own user profile.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param deleteUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(String xAmzTarget, DeleteUserRequest deleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Allows a user to delete their own user profile.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param deleteUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(String xAmzTarget, DeleteUserRequest deleteUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserAttributes
     * @param xAmzTarget  (required)
     * @param deleteUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAttributesCall(String xAmzTarget, DeleteUserAttributesRequest deleteUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteUserAttributesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserAttributesValidateBeforeCall(String xAmzTarget, DeleteUserAttributesRequest deleteUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteUserAttributes(Async)");
        }

        // verify the required parameter 'deleteUserAttributesRequest' is set
        if (deleteUserAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteUserAttributesRequest' when calling deleteUserAttributes(Async)");
        }

        return deleteUserAttributesCall(xAmzTarget, deleteUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the attributes for a user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param deleteUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteUserAttributes(String xAmzTarget, DeleteUserAttributesRequest deleteUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteUserAttributesWithHttpInfo(xAmzTarget, deleteUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the attributes for a user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param deleteUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteUserAttributesWithHttpInfo(String xAmzTarget, DeleteUserAttributesRequest deleteUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteUserAttributesValidateBeforeCall(xAmzTarget, deleteUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the attributes for a user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param deleteUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAttributesAsync(String xAmzTarget, DeleteUserAttributesRequest deleteUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserAttributesValidateBeforeCall(xAmzTarget, deleteUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserPool
     * @param xAmzTarget  (required)
     * @param deleteUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserImportInProgressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserPoolCall(String xAmzTarget, DeleteUserPoolRequest deleteUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteUserPoolRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserPoolValidateBeforeCall(String xAmzTarget, DeleteUserPoolRequest deleteUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteUserPool(Async)");
        }

        // verify the required parameter 'deleteUserPoolRequest' is set
        if (deleteUserPoolRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteUserPoolRequest' when calling deleteUserPool(Async)");
        }

        return deleteUserPoolCall(xAmzTarget, deleteUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the specified Amazon Cognito user pool.
     * @param xAmzTarget  (required)
     * @param deleteUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserImportInProgressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserPool(String xAmzTarget, DeleteUserPoolRequest deleteUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteUserPoolWithHttpInfo(xAmzTarget, deleteUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes the specified Amazon Cognito user pool.
     * @param xAmzTarget  (required)
     * @param deleteUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserImportInProgressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserPoolWithHttpInfo(String xAmzTarget, DeleteUserPoolRequest deleteUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteUserPoolValidateBeforeCall(xAmzTarget, deleteUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified Amazon Cognito user pool.
     * @param xAmzTarget  (required)
     * @param deleteUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserImportInProgressException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserPoolAsync(String xAmzTarget, DeleteUserPoolRequest deleteUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserPoolValidateBeforeCall(xAmzTarget, deleteUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserPoolClient
     * @param xAmzTarget  (required)
     * @param deleteUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserPoolClientCall(String xAmzTarget, DeleteUserPoolClientRequest deleteUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteUserPoolClientRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPoolClient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserPoolClientValidateBeforeCall(String xAmzTarget, DeleteUserPoolClientRequest deleteUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteUserPoolClient(Async)");
        }

        // verify the required parameter 'deleteUserPoolClientRequest' is set
        if (deleteUserPoolClientRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteUserPoolClientRequest' when calling deleteUserPoolClient(Async)");
        }

        return deleteUserPoolClientCall(xAmzTarget, deleteUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Allows the developer to delete the user pool client.
     * @param xAmzTarget  (required)
     * @param deleteUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserPoolClient(String xAmzTarget, DeleteUserPoolClientRequest deleteUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteUserPoolClientWithHttpInfo(xAmzTarget, deleteUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Allows the developer to delete the user pool client.
     * @param xAmzTarget  (required)
     * @param deleteUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserPoolClientWithHttpInfo(String xAmzTarget, DeleteUserPoolClientRequest deleteUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteUserPoolClientValidateBeforeCall(xAmzTarget, deleteUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Allows the developer to delete the user pool client.
     * @param xAmzTarget  (required)
     * @param deleteUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserPoolClientAsync(String xAmzTarget, DeleteUserPoolClientRequest deleteUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserPoolClientValidateBeforeCall(xAmzTarget, deleteUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserPoolDomain
     * @param xAmzTarget  (required)
     * @param deleteUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserPoolDomainCall(String xAmzTarget, DeleteUserPoolDomainRequest deleteUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteUserPoolDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DeleteUserPoolDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserPoolDomainValidateBeforeCall(String xAmzTarget, DeleteUserPoolDomainRequest deleteUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteUserPoolDomain(Async)");
        }

        // verify the required parameter 'deleteUserPoolDomainRequest' is set
        if (deleteUserPoolDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteUserPoolDomainRequest' when calling deleteUserPoolDomain(Async)");
        }

        return deleteUserPoolDomainCall(xAmzTarget, deleteUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a domain for a user pool.
     * @param xAmzTarget  (required)
     * @param deleteUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteUserPoolDomain(String xAmzTarget, DeleteUserPoolDomainRequest deleteUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteUserPoolDomainWithHttpInfo(xAmzTarget, deleteUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a domain for a user pool.
     * @param xAmzTarget  (required)
     * @param deleteUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteUserPoolDomainWithHttpInfo(String xAmzTarget, DeleteUserPoolDomainRequest deleteUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteUserPoolDomainValidateBeforeCall(xAmzTarget, deleteUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a domain for a user pool.
     * @param xAmzTarget  (required)
     * @param deleteUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserPoolDomainAsync(String xAmzTarget, DeleteUserPoolDomainRequest deleteUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserPoolDomainValidateBeforeCall(xAmzTarget, deleteUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeIdentityProvider
     * @param xAmzTarget  (required)
     * @param describeIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeIdentityProviderCall(String xAmzTarget, DescribeIdentityProviderRequest describeIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeIdentityProviderRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeIdentityProvider";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeIdentityProviderValidateBeforeCall(String xAmzTarget, DescribeIdentityProviderRequest describeIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeIdentityProvider(Async)");
        }

        // verify the required parameter 'describeIdentityProviderRequest' is set
        if (describeIdentityProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'describeIdentityProviderRequest' when calling describeIdentityProvider(Async)");
        }

        return describeIdentityProviderCall(xAmzTarget, describeIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about a specific IdP.
     * @param xAmzTarget  (required)
     * @param describeIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeIdentityProviderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeIdentityProviderResponse describeIdentityProvider(String xAmzTarget, DescribeIdentityProviderRequest describeIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeIdentityProviderResponse> localVarResp = describeIdentityProviderWithHttpInfo(xAmzTarget, describeIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a specific IdP.
     * @param xAmzTarget  (required)
     * @param describeIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeIdentityProviderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeIdentityProviderResponse> describeIdentityProviderWithHttpInfo(String xAmzTarget, DescribeIdentityProviderRequest describeIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeIdentityProviderValidateBeforeCall(xAmzTarget, describeIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeIdentityProviderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a specific IdP.
     * @param xAmzTarget  (required)
     * @param describeIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeIdentityProviderAsync(String xAmzTarget, DescribeIdentityProviderRequest describeIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeIdentityProviderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeIdentityProviderValidateBeforeCall(xAmzTarget, describeIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeIdentityProviderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeResourceServer
     * @param xAmzTarget  (required)
     * @param describeResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeResourceServerCall(String xAmzTarget, DescribeResourceServerRequest describeResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeResourceServerRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeResourceServer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeResourceServerValidateBeforeCall(String xAmzTarget, DescribeResourceServerRequest describeResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeResourceServer(Async)");
        }

        // verify the required parameter 'describeResourceServerRequest' is set
        if (describeResourceServerRequest == null) {
            throw new ApiException("Missing the required parameter 'describeResourceServerRequest' when calling describeResourceServer(Async)");
        }

        return describeResourceServerCall(xAmzTarget, describeResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes a resource server.
     * @param xAmzTarget  (required)
     * @param describeResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeResourceServerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeResourceServerResponse describeResourceServer(String xAmzTarget, DescribeResourceServerRequest describeResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeResourceServerResponse> localVarResp = describeResourceServerWithHttpInfo(xAmzTarget, describeResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes a resource server.
     * @param xAmzTarget  (required)
     * @param describeResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeResourceServerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeResourceServerResponse> describeResourceServerWithHttpInfo(String xAmzTarget, DescribeResourceServerRequest describeResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeResourceServerValidateBeforeCall(xAmzTarget, describeResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeResourceServerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes a resource server.
     * @param xAmzTarget  (required)
     * @param describeResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeResourceServerAsync(String xAmzTarget, DescribeResourceServerRequest describeResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeResourceServerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeResourceServerValidateBeforeCall(xAmzTarget, describeResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeResourceServerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeRiskConfiguration
     * @param xAmzTarget  (required)
     * @param describeRiskConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRiskConfigurationCall(String xAmzTarget, DescribeRiskConfigurationRequest describeRiskConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeRiskConfigurationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeRiskConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeRiskConfigurationValidateBeforeCall(String xAmzTarget, DescribeRiskConfigurationRequest describeRiskConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeRiskConfiguration(Async)");
        }

        // verify the required parameter 'describeRiskConfigurationRequest' is set
        if (describeRiskConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'describeRiskConfigurationRequest' when calling describeRiskConfiguration(Async)");
        }

        return describeRiskConfigurationCall(xAmzTarget, describeRiskConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the risk configuration.
     * @param xAmzTarget  (required)
     * @param describeRiskConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeRiskConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeRiskConfigurationResponse describeRiskConfiguration(String xAmzTarget, DescribeRiskConfigurationRequest describeRiskConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeRiskConfigurationResponse> localVarResp = describeRiskConfigurationWithHttpInfo(xAmzTarget, describeRiskConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the risk configuration.
     * @param xAmzTarget  (required)
     * @param describeRiskConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeRiskConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeRiskConfigurationResponse> describeRiskConfigurationWithHttpInfo(String xAmzTarget, DescribeRiskConfigurationRequest describeRiskConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeRiskConfigurationValidateBeforeCall(xAmzTarget, describeRiskConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeRiskConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the risk configuration.
     * @param xAmzTarget  (required)
     * @param describeRiskConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRiskConfigurationAsync(String xAmzTarget, DescribeRiskConfigurationRequest describeRiskConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeRiskConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeRiskConfigurationValidateBeforeCall(xAmzTarget, describeRiskConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeRiskConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeUserImportJob
     * @param xAmzTarget  (required)
     * @param describeUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeUserImportJobCall(String xAmzTarget, DescribeUserImportJobRequest describeUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeUserImportJobRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserImportJob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeUserImportJobValidateBeforeCall(String xAmzTarget, DescribeUserImportJobRequest describeUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeUserImportJob(Async)");
        }

        // verify the required parameter 'describeUserImportJobRequest' is set
        if (describeUserImportJobRequest == null) {
            throw new ApiException("Missing the required parameter 'describeUserImportJobRequest' when calling describeUserImportJob(Async)");
        }

        return describeUserImportJobCall(xAmzTarget, describeUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the user import job.
     * @param xAmzTarget  (required)
     * @param describeUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeUserImportJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeUserImportJobResponse describeUserImportJob(String xAmzTarget, DescribeUserImportJobRequest describeUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeUserImportJobResponse> localVarResp = describeUserImportJobWithHttpInfo(xAmzTarget, describeUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the user import job.
     * @param xAmzTarget  (required)
     * @param describeUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeUserImportJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeUserImportJobResponse> describeUserImportJobWithHttpInfo(String xAmzTarget, DescribeUserImportJobRequest describeUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeUserImportJobValidateBeforeCall(xAmzTarget, describeUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeUserImportJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the user import job.
     * @param xAmzTarget  (required)
     * @param describeUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeUserImportJobAsync(String xAmzTarget, DescribeUserImportJobRequest describeUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeUserImportJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeUserImportJobValidateBeforeCall(xAmzTarget, describeUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeUserImportJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeUserPool
     * @param xAmzTarget  (required)
     * @param describeUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserPoolTaggingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeUserPoolCall(String xAmzTarget, DescribeUserPoolRequest describeUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeUserPoolRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeUserPoolValidateBeforeCall(String xAmzTarget, DescribeUserPoolRequest describeUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeUserPool(Async)");
        }

        // verify the required parameter 'describeUserPoolRequest' is set
        if (describeUserPoolRequest == null) {
            throw new ApiException("Missing the required parameter 'describeUserPoolRequest' when calling describeUserPool(Async)");
        }

        return describeUserPoolCall(xAmzTarget, describeUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the configuration information and metadata of the specified user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeUserPoolResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserPoolTaggingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeUserPoolResponse describeUserPool(String xAmzTarget, DescribeUserPoolRequest describeUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeUserPoolResponse> localVarResp = describeUserPoolWithHttpInfo(xAmzTarget, describeUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the configuration information and metadata of the specified user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeUserPoolResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserPoolTaggingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeUserPoolResponse> describeUserPoolWithHttpInfo(String xAmzTarget, DescribeUserPoolRequest describeUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeUserPoolValidateBeforeCall(xAmzTarget, describeUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeUserPoolResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the configuration information and metadata of the specified user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserPoolTaggingException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeUserPoolAsync(String xAmzTarget, DescribeUserPoolRequest describeUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeUserPoolResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeUserPoolValidateBeforeCall(xAmzTarget, describeUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeUserPoolResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeUserPoolClient
     * @param xAmzTarget  (required)
     * @param describeUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeUserPoolClientCall(String xAmzTarget, DescribeUserPoolClientRequest describeUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeUserPoolClientRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPoolClient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeUserPoolClientValidateBeforeCall(String xAmzTarget, DescribeUserPoolClientRequest describeUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeUserPoolClient(Async)");
        }

        // verify the required parameter 'describeUserPoolClientRequest' is set
        if (describeUserPoolClientRequest == null) {
            throw new ApiException("Missing the required parameter 'describeUserPoolClientRequest' when calling describeUserPoolClient(Async)");
        }

        return describeUserPoolClientCall(xAmzTarget, describeUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Client method for returning the configuration information and metadata of the specified user pool app client.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeUserPoolClientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeUserPoolClientResponse describeUserPoolClient(String xAmzTarget, DescribeUserPoolClientRequest describeUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeUserPoolClientResponse> localVarResp = describeUserPoolClientWithHttpInfo(xAmzTarget, describeUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Client method for returning the configuration information and metadata of the specified user pool app client.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeUserPoolClientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeUserPoolClientResponse> describeUserPoolClientWithHttpInfo(String xAmzTarget, DescribeUserPoolClientRequest describeUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeUserPoolClientValidateBeforeCall(xAmzTarget, describeUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeUserPoolClientResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Client method for returning the configuration information and metadata of the specified user pool app client.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeUserPoolClientAsync(String xAmzTarget, DescribeUserPoolClientRequest describeUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeUserPoolClientResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeUserPoolClientValidateBeforeCall(xAmzTarget, describeUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeUserPoolClientResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeUserPoolDomain
     * @param xAmzTarget  (required)
     * @param describeUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeUserPoolDomainCall(String xAmzTarget, DescribeUserPoolDomainRequest describeUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeUserPoolDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.DescribeUserPoolDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeUserPoolDomainValidateBeforeCall(String xAmzTarget, DescribeUserPoolDomainRequest describeUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeUserPoolDomain(Async)");
        }

        // verify the required parameter 'describeUserPoolDomainRequest' is set
        if (describeUserPoolDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'describeUserPoolDomainRequest' when calling describeUserPoolDomain(Async)");
        }

        return describeUserPoolDomainCall(xAmzTarget, describeUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets information about a domain.
     * @param xAmzTarget  (required)
     * @param describeUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeUserPoolDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeUserPoolDomainResponse describeUserPoolDomain(String xAmzTarget, DescribeUserPoolDomainRequest describeUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeUserPoolDomainResponse> localVarResp = describeUserPoolDomainWithHttpInfo(xAmzTarget, describeUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a domain.
     * @param xAmzTarget  (required)
     * @param describeUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeUserPoolDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeUserPoolDomainResponse> describeUserPoolDomainWithHttpInfo(String xAmzTarget, DescribeUserPoolDomainRequest describeUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeUserPoolDomainValidateBeforeCall(xAmzTarget, describeUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeUserPoolDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a domain.
     * @param xAmzTarget  (required)
     * @param describeUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeUserPoolDomainAsync(String xAmzTarget, DescribeUserPoolDomainRequest describeUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeUserPoolDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeUserPoolDomainValidateBeforeCall(xAmzTarget, describeUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeUserPoolDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forgetDevice
     * @param xAmzTarget  (required)
     * @param forgetDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forgetDeviceCall(String xAmzTarget, ForgetDeviceRequest forgetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forgetDeviceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ForgetDevice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forgetDeviceValidateBeforeCall(String xAmzTarget, ForgetDeviceRequest forgetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling forgetDevice(Async)");
        }

        // verify the required parameter 'forgetDeviceRequest' is set
        if (forgetDeviceRequest == null) {
            throw new ApiException("Missing the required parameter 'forgetDeviceRequest' when calling forgetDevice(Async)");
        }

        return forgetDeviceCall(xAmzTarget, forgetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Forgets the specified device.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param forgetDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public void forgetDevice(String xAmzTarget, ForgetDeviceRequest forgetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        forgetDeviceWithHttpInfo(xAmzTarget, forgetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Forgets the specified device.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param forgetDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> forgetDeviceWithHttpInfo(String xAmzTarget, ForgetDeviceRequest forgetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = forgetDeviceValidateBeforeCall(xAmzTarget, forgetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Forgets the specified device.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param forgetDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forgetDeviceAsync(String xAmzTarget, ForgetDeviceRequest forgetDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = forgetDeviceValidateBeforeCall(xAmzTarget, forgetDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for forgotPassword
     * @param xAmzTarget  (required)
     * @param forgotPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forgotPasswordCall(String xAmzTarget, ForgotPasswordRequest forgotPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forgotPasswordRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ForgotPassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forgotPasswordValidateBeforeCall(String xAmzTarget, ForgotPasswordRequest forgotPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling forgotPassword(Async)");
        }

        // verify the required parameter 'forgotPasswordRequest' is set
        if (forgotPasswordRequest == null) {
            throw new ApiException("Missing the required parameter 'forgotPasswordRequest' when calling forgotPassword(Async)");
        }

        return forgotPasswordCall(xAmzTarget, forgotPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user&#39;s password. For the &lt;code&gt;Username&lt;/code&gt; parameter, you can use the username or user alias. The method used to send the confirmation code is sent according to the specified AccountRecoverySetting. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-recover-a-user-account.html\&quot;&gt;Recovering User Accounts&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;. To use the confirmation code for resetting the password, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmForgotPassword.html\&quot;&gt;ConfirmForgotPassword&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;If neither a verified phone number nor a verified email exists, this API returns &lt;code&gt;InvalidParameterException&lt;/code&gt;. If your app client has a client secret and you don&#39;t provide a &lt;code&gt;SECRET_HASH&lt;/code&gt; parameter, this API returns &lt;code&gt;NotAuthorizedException&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param forgotPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ForgotPasswordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ForgotPasswordResponse forgotPassword(String xAmzTarget, ForgotPasswordRequest forgotPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ForgotPasswordResponse> localVarResp = forgotPasswordWithHttpInfo(xAmzTarget, forgotPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user&#39;s password. For the &lt;code&gt;Username&lt;/code&gt; parameter, you can use the username or user alias. The method used to send the confirmation code is sent according to the specified AccountRecoverySetting. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-recover-a-user-account.html\&quot;&gt;Recovering User Accounts&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;. To use the confirmation code for resetting the password, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmForgotPassword.html\&quot;&gt;ConfirmForgotPassword&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;If neither a verified phone number nor a verified email exists, this API returns &lt;code&gt;InvalidParameterException&lt;/code&gt;. If your app client has a client secret and you don&#39;t provide a &lt;code&gt;SECRET_HASH&lt;/code&gt; parameter, this API returns &lt;code&gt;NotAuthorizedException&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param forgotPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ForgotPasswordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ForgotPasswordResponse> forgotPasswordWithHttpInfo(String xAmzTarget, ForgotPasswordRequest forgotPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = forgotPasswordValidateBeforeCall(xAmzTarget, forgotPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ForgotPasswordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user&#39;s password. For the &lt;code&gt;Username&lt;/code&gt; parameter, you can use the username or user alias. The method used to send the confirmation code is sent according to the specified AccountRecoverySetting. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-recover-a-user-account.html\&quot;&gt;Recovering User Accounts&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;. To use the confirmation code for resetting the password, call &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ConfirmForgotPassword.html\&quot;&gt;ConfirmForgotPassword&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;If neither a verified phone number nor a verified email exists, this API returns &lt;code&gt;InvalidParameterException&lt;/code&gt;. If your app client has a client secret and you don&#39;t provide a &lt;code&gt;SECRET_HASH&lt;/code&gt; parameter, this API returns &lt;code&gt;NotAuthorizedException&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param forgotPasswordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forgotPasswordAsync(String xAmzTarget, ForgotPasswordRequest forgotPasswordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ForgotPasswordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = forgotPasswordValidateBeforeCall(xAmzTarget, forgotPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ForgotPasswordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCSVHeader
     * @param xAmzTarget  (required)
     * @param getCSVHeaderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCSVHeaderCall(String xAmzTarget, GetCSVHeaderRequest getCSVHeaderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getCSVHeaderRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetCSVHeader";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCSVHeaderValidateBeforeCall(String xAmzTarget, GetCSVHeaderRequest getCSVHeaderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getCSVHeader(Async)");
        }

        // verify the required parameter 'getCSVHeaderRequest' is set
        if (getCSVHeaderRequest == null) {
            throw new ApiException("Missing the required parameter 'getCSVHeaderRequest' when calling getCSVHeader(Async)");
        }

        return getCSVHeaderCall(xAmzTarget, getCSVHeaderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets the header information for the comma-separated value (CSV) file to be used as input for the user import job.
     * @param xAmzTarget  (required)
     * @param getCSVHeaderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetCSVHeaderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public GetCSVHeaderResponse getCSVHeader(String xAmzTarget, GetCSVHeaderRequest getCSVHeaderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetCSVHeaderResponse> localVarResp = getCSVHeaderWithHttpInfo(xAmzTarget, getCSVHeaderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the header information for the comma-separated value (CSV) file to be used as input for the user import job.
     * @param xAmzTarget  (required)
     * @param getCSVHeaderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetCSVHeaderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCSVHeaderResponse> getCSVHeaderWithHttpInfo(String xAmzTarget, GetCSVHeaderRequest getCSVHeaderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getCSVHeaderValidateBeforeCall(xAmzTarget, getCSVHeaderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetCSVHeaderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the header information for the comma-separated value (CSV) file to be used as input for the user import job.
     * @param xAmzTarget  (required)
     * @param getCSVHeaderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCSVHeaderAsync(String xAmzTarget, GetCSVHeaderRequest getCSVHeaderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetCSVHeaderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCSVHeaderValidateBeforeCall(xAmzTarget, getCSVHeaderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetCSVHeaderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDevice
     * @param xAmzTarget  (required)
     * @param getDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceCall(String xAmzTarget, GetDeviceRequest getDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDeviceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetDevice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeviceValidateBeforeCall(String xAmzTarget, GetDeviceRequest getDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getDevice(Async)");
        }

        // verify the required parameter 'getDeviceRequest' is set
        if (getDeviceRequest == null) {
            throw new ApiException("Missing the required parameter 'getDeviceRequest' when calling getDevice(Async)");
        }

        return getDeviceCall(xAmzTarget, getDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the device.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDeviceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public GetDeviceResponse getDevice(String xAmzTarget, GetDeviceRequest getDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDeviceResponse> localVarResp = getDeviceWithHttpInfo(xAmzTarget, getDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the device.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDeviceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDeviceResponse> getDeviceWithHttpInfo(String xAmzTarget, GetDeviceRequest getDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDeviceValidateBeforeCall(xAmzTarget, getDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDeviceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the device.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getDeviceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeviceAsync(String xAmzTarget, GetDeviceRequest getDeviceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDeviceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeviceValidateBeforeCall(xAmzTarget, getDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDeviceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroup
     * @param xAmzTarget  (required)
     * @param getGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCall(String xAmzTarget, GetGroupRequest getGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupValidateBeforeCall(String xAmzTarget, GetGroupRequest getGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getGroup(Async)");
        }

        // verify the required parameter 'getGroupRequest' is set
        if (getGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'getGroupRequest' when calling getGroup(Async)");
        }

        return getGroupCall(xAmzTarget, getGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets a group.&lt;/p&gt; &lt;p&gt;Calling this action requires developer credentials.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupResponse getGroup(String xAmzTarget, GetGroupRequest getGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetGroupResponse> localVarResp = getGroupWithHttpInfo(xAmzTarget, getGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets a group.&lt;/p&gt; &lt;p&gt;Calling this action requires developer credentials.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGroupResponse> getGroupWithHttpInfo(String xAmzTarget, GetGroupRequest getGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getGroupValidateBeforeCall(xAmzTarget, getGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets a group.&lt;/p&gt; &lt;p&gt;Calling this action requires developer credentials.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAsync(String xAmzTarget, GetGroupRequest getGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupValidateBeforeCall(xAmzTarget, getGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIdentityProviderByIdentifier
     * @param xAmzTarget  (required)
     * @param getIdentityProviderByIdentifierRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIdentityProviderByIdentifierCall(String xAmzTarget, GetIdentityProviderByIdentifierRequest getIdentityProviderByIdentifierRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getIdentityProviderByIdentifierRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetIdentityProviderByIdentifier";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIdentityProviderByIdentifierValidateBeforeCall(String xAmzTarget, GetIdentityProviderByIdentifierRequest getIdentityProviderByIdentifierRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getIdentityProviderByIdentifier(Async)");
        }

        // verify the required parameter 'getIdentityProviderByIdentifierRequest' is set
        if (getIdentityProviderByIdentifierRequest == null) {
            throw new ApiException("Missing the required parameter 'getIdentityProviderByIdentifierRequest' when calling getIdentityProviderByIdentifier(Async)");
        }

        return getIdentityProviderByIdentifierCall(xAmzTarget, getIdentityProviderByIdentifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets the specified IdP.
     * @param xAmzTarget  (required)
     * @param getIdentityProviderByIdentifierRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetIdentityProviderByIdentifierResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public GetIdentityProviderByIdentifierResponse getIdentityProviderByIdentifier(String xAmzTarget, GetIdentityProviderByIdentifierRequest getIdentityProviderByIdentifierRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetIdentityProviderByIdentifierResponse> localVarResp = getIdentityProviderByIdentifierWithHttpInfo(xAmzTarget, getIdentityProviderByIdentifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified IdP.
     * @param xAmzTarget  (required)
     * @param getIdentityProviderByIdentifierRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetIdentityProviderByIdentifierResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetIdentityProviderByIdentifierResponse> getIdentityProviderByIdentifierWithHttpInfo(String xAmzTarget, GetIdentityProviderByIdentifierRequest getIdentityProviderByIdentifierRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getIdentityProviderByIdentifierValidateBeforeCall(xAmzTarget, getIdentityProviderByIdentifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetIdentityProviderByIdentifierResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified IdP.
     * @param xAmzTarget  (required)
     * @param getIdentityProviderByIdentifierRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIdentityProviderByIdentifierAsync(String xAmzTarget, GetIdentityProviderByIdentifierRequest getIdentityProviderByIdentifierRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetIdentityProviderByIdentifierResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIdentityProviderByIdentifierValidateBeforeCall(xAmzTarget, getIdentityProviderByIdentifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetIdentityProviderByIdentifierResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLogDeliveryConfiguration
     * @param xAmzTarget  (required)
     * @param getLogDeliveryConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogDeliveryConfigurationCall(String xAmzTarget, GetLogDeliveryConfigurationRequest getLogDeliveryConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLogDeliveryConfigurationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetLogDeliveryConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLogDeliveryConfigurationValidateBeforeCall(String xAmzTarget, GetLogDeliveryConfigurationRequest getLogDeliveryConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getLogDeliveryConfiguration(Async)");
        }

        // verify the required parameter 'getLogDeliveryConfigurationRequest' is set
        if (getLogDeliveryConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'getLogDeliveryConfigurationRequest' when calling getLogDeliveryConfiguration(Async)");
        }

        return getLogDeliveryConfigurationCall(xAmzTarget, getLogDeliveryConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets the detailed activity logging configuration for a user pool.
     * @param xAmzTarget  (required)
     * @param getLogDeliveryConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetLogDeliveryConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetLogDeliveryConfigurationResponse getLogDeliveryConfiguration(String xAmzTarget, GetLogDeliveryConfigurationRequest getLogDeliveryConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetLogDeliveryConfigurationResponse> localVarResp = getLogDeliveryConfigurationWithHttpInfo(xAmzTarget, getLogDeliveryConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the detailed activity logging configuration for a user pool.
     * @param xAmzTarget  (required)
     * @param getLogDeliveryConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetLogDeliveryConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLogDeliveryConfigurationResponse> getLogDeliveryConfigurationWithHttpInfo(String xAmzTarget, GetLogDeliveryConfigurationRequest getLogDeliveryConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getLogDeliveryConfigurationValidateBeforeCall(xAmzTarget, getLogDeliveryConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetLogDeliveryConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the detailed activity logging configuration for a user pool.
     * @param xAmzTarget  (required)
     * @param getLogDeliveryConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogDeliveryConfigurationAsync(String xAmzTarget, GetLogDeliveryConfigurationRequest getLogDeliveryConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetLogDeliveryConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLogDeliveryConfigurationValidateBeforeCall(xAmzTarget, getLogDeliveryConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetLogDeliveryConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSigningCertificate
     * @param xAmzTarget  (required)
     * @param getSigningCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSigningCertificateCall(String xAmzTarget, GetSigningCertificateRequest getSigningCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getSigningCertificateRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetSigningCertificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSigningCertificateValidateBeforeCall(String xAmzTarget, GetSigningCertificateRequest getSigningCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getSigningCertificate(Async)");
        }

        // verify the required parameter 'getSigningCertificateRequest' is set
        if (getSigningCertificateRequest == null) {
            throw new ApiException("Missing the required parameter 'getSigningCertificateRequest' when calling getSigningCertificate(Async)");
        }

        return getSigningCertificateCall(xAmzTarget, getSigningCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This method takes a user pool ID, and returns the signing certificate. The issued certificate is valid for 10 years from the date of issue.&lt;/p&gt; &lt;p&gt;Amazon Cognito issues and assigns a new signing certificate annually. This process returns a new value in the response to &lt;code&gt;GetSigningCertificate&lt;/code&gt;, but doesn&#39;t invalidate the original certificate.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getSigningCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetSigningCertificateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetSigningCertificateResponse getSigningCertificate(String xAmzTarget, GetSigningCertificateRequest getSigningCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetSigningCertificateResponse> localVarResp = getSigningCertificateWithHttpInfo(xAmzTarget, getSigningCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This method takes a user pool ID, and returns the signing certificate. The issued certificate is valid for 10 years from the date of issue.&lt;/p&gt; &lt;p&gt;Amazon Cognito issues and assigns a new signing certificate annually. This process returns a new value in the response to &lt;code&gt;GetSigningCertificate&lt;/code&gt;, but doesn&#39;t invalidate the original certificate.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getSigningCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetSigningCertificateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSigningCertificateResponse> getSigningCertificateWithHttpInfo(String xAmzTarget, GetSigningCertificateRequest getSigningCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getSigningCertificateValidateBeforeCall(xAmzTarget, getSigningCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetSigningCertificateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This method takes a user pool ID, and returns the signing certificate. The issued certificate is valid for 10 years from the date of issue.&lt;/p&gt; &lt;p&gt;Amazon Cognito issues and assigns a new signing certificate annually. This process returns a new value in the response to &lt;code&gt;GetSigningCertificate&lt;/code&gt;, but doesn&#39;t invalidate the original certificate.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getSigningCertificateRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSigningCertificateAsync(String xAmzTarget, GetSigningCertificateRequest getSigningCertificateRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetSigningCertificateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSigningCertificateValidateBeforeCall(xAmzTarget, getSigningCertificateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetSigningCertificateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUICustomization
     * @param xAmzTarget  (required)
     * @param getUICustomizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUICustomizationCall(String xAmzTarget, GetUICustomizationRequest getUICustomizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getUICustomizationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetUICustomization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUICustomizationValidateBeforeCall(String xAmzTarget, GetUICustomizationRequest getUICustomizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getUICustomization(Async)");
        }

        // verify the required parameter 'getUICustomizationRequest' is set
        if (getUICustomizationRequest == null) {
            throw new ApiException("Missing the required parameter 'getUICustomizationRequest' when calling getUICustomization(Async)");
        }

        return getUICustomizationCall(xAmzTarget, getUICustomizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets the user interface (UI) Customization information for a particular app client&#39;s app UI, if any such information exists for the client. If nothing is set for the particular client, but there is an existing pool level customization (the app &lt;code&gt;clientId&lt;/code&gt; is &lt;code&gt;ALL&lt;/code&gt;), then that information is returned. If nothing is present, then an empty shape is returned.
     * @param xAmzTarget  (required)
     * @param getUICustomizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetUICustomizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public GetUICustomizationResponse getUICustomization(String xAmzTarget, GetUICustomizationRequest getUICustomizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetUICustomizationResponse> localVarResp = getUICustomizationWithHttpInfo(xAmzTarget, getUICustomizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the user interface (UI) Customization information for a particular app client&#39;s app UI, if any such information exists for the client. If nothing is set for the particular client, but there is an existing pool level customization (the app &lt;code&gt;clientId&lt;/code&gt; is &lt;code&gt;ALL&lt;/code&gt;), then that information is returned. If nothing is present, then an empty shape is returned.
     * @param xAmzTarget  (required)
     * @param getUICustomizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetUICustomizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUICustomizationResponse> getUICustomizationWithHttpInfo(String xAmzTarget, GetUICustomizationRequest getUICustomizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getUICustomizationValidateBeforeCall(xAmzTarget, getUICustomizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetUICustomizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the user interface (UI) Customization information for a particular app client&#39;s app UI, if any such information exists for the client. If nothing is set for the particular client, but there is an existing pool level customization (the app &lt;code&gt;clientId&lt;/code&gt; is &lt;code&gt;ALL&lt;/code&gt;), then that information is returned. If nothing is present, then an empty shape is returned.
     * @param xAmzTarget  (required)
     * @param getUICustomizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUICustomizationAsync(String xAmzTarget, GetUICustomizationRequest getUICustomizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetUICustomizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUICustomizationValidateBeforeCall(xAmzTarget, getUICustomizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetUICustomizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param xAmzTarget  (required)
     * @param getUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String xAmzTarget, GetUserRequest getUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getUserRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String xAmzTarget, GetUserRequest getUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getUser(Async)");
        }

        // verify the required parameter 'getUserRequest' is set
        if (getUserRequest == null) {
            throw new ApiException("Missing the required parameter 'getUserRequest' when calling getUser(Async)");
        }

        return getUserCall(xAmzTarget, getUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the user attributes and metadata for a user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public GetUserResponse getUser(String xAmzTarget, GetUserRequest getUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetUserResponse> localVarResp = getUserWithHttpInfo(xAmzTarget, getUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the user attributes and metadata for a user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserResponse> getUserWithHttpInfo(String xAmzTarget, GetUserRequest getUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(xAmzTarget, getUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the user attributes and metadata for a user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String xAmzTarget, GetUserRequest getUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(xAmzTarget, getUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserAttributeVerificationCode
     * @param xAmzTarget  (required)
     * @param getUserAttributeVerificationCodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAttributeVerificationCodeCall(String xAmzTarget, GetUserAttributeVerificationCodeRequest getUserAttributeVerificationCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getUserAttributeVerificationCodeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetUserAttributeVerificationCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAttributeVerificationCodeValidateBeforeCall(String xAmzTarget, GetUserAttributeVerificationCodeRequest getUserAttributeVerificationCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getUserAttributeVerificationCode(Async)");
        }

        // verify the required parameter 'getUserAttributeVerificationCodeRequest' is set
        if (getUserAttributeVerificationCodeRequest == null) {
            throw new ApiException("Missing the required parameter 'getUserAttributeVerificationCodeRequest' when calling getUserAttributeVerificationCode(Async)");
        }

        return getUserAttributeVerificationCodeCall(xAmzTarget, getUserAttributeVerificationCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Generates a user attribute verification code for the specified attribute name. Sends a message to a user with a code that they must return in a VerifyUserAttribute request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getUserAttributeVerificationCodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetUserAttributeVerificationCodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public GetUserAttributeVerificationCodeResponse getUserAttributeVerificationCode(String xAmzTarget, GetUserAttributeVerificationCodeRequest getUserAttributeVerificationCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetUserAttributeVerificationCodeResponse> localVarResp = getUserAttributeVerificationCodeWithHttpInfo(xAmzTarget, getUserAttributeVerificationCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Generates a user attribute verification code for the specified attribute name. Sends a message to a user with a code that they must return in a VerifyUserAttribute request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getUserAttributeVerificationCodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetUserAttributeVerificationCodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserAttributeVerificationCodeResponse> getUserAttributeVerificationCodeWithHttpInfo(String xAmzTarget, GetUserAttributeVerificationCodeRequest getUserAttributeVerificationCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getUserAttributeVerificationCodeValidateBeforeCall(xAmzTarget, getUserAttributeVerificationCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetUserAttributeVerificationCodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Generates a user attribute verification code for the specified attribute name. Sends a message to a user with a code that they must return in a VerifyUserAttribute request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param getUserAttributeVerificationCodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAttributeVerificationCodeAsync(String xAmzTarget, GetUserAttributeVerificationCodeRequest getUserAttributeVerificationCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetUserAttributeVerificationCodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAttributeVerificationCodeValidateBeforeCall(xAmzTarget, getUserAttributeVerificationCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetUserAttributeVerificationCodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserPoolMfaConfig
     * @param xAmzTarget  (required)
     * @param getUserPoolMfaConfigRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPoolMfaConfigCall(String xAmzTarget, GetUserPoolMfaConfigRequest getUserPoolMfaConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getUserPoolMfaConfigRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GetUserPoolMfaConfig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPoolMfaConfigValidateBeforeCall(String xAmzTarget, GetUserPoolMfaConfigRequest getUserPoolMfaConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getUserPoolMfaConfig(Async)");
        }

        // verify the required parameter 'getUserPoolMfaConfigRequest' is set
        if (getUserPoolMfaConfigRequest == null) {
            throw new ApiException("Missing the required parameter 'getUserPoolMfaConfigRequest' when calling getUserPoolMfaConfig(Async)");
        }

        return getUserPoolMfaConfigCall(xAmzTarget, getUserPoolMfaConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets the user pool multi-factor authentication (MFA) configuration.
     * @param xAmzTarget  (required)
     * @param getUserPoolMfaConfigRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetUserPoolMfaConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public GetUserPoolMfaConfigResponse getUserPoolMfaConfig(String xAmzTarget, GetUserPoolMfaConfigRequest getUserPoolMfaConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetUserPoolMfaConfigResponse> localVarResp = getUserPoolMfaConfigWithHttpInfo(xAmzTarget, getUserPoolMfaConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the user pool multi-factor authentication (MFA) configuration.
     * @param xAmzTarget  (required)
     * @param getUserPoolMfaConfigRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetUserPoolMfaConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserPoolMfaConfigResponse> getUserPoolMfaConfigWithHttpInfo(String xAmzTarget, GetUserPoolMfaConfigRequest getUserPoolMfaConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getUserPoolMfaConfigValidateBeforeCall(xAmzTarget, getUserPoolMfaConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetUserPoolMfaConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the user pool multi-factor authentication (MFA) configuration.
     * @param xAmzTarget  (required)
     * @param getUserPoolMfaConfigRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserPoolMfaConfigAsync(String xAmzTarget, GetUserPoolMfaConfigRequest getUserPoolMfaConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetUserPoolMfaConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPoolMfaConfigValidateBeforeCall(xAmzTarget, getUserPoolMfaConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetUserPoolMfaConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalSignOut
     * @param xAmzTarget  (required)
     * @param globalSignOutRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalSignOutCall(String xAmzTarget, GlobalSignOutRequest globalSignOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = globalSignOutRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.GlobalSignOut";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalSignOutValidateBeforeCall(String xAmzTarget, GlobalSignOutRequest globalSignOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling globalSignOut(Async)");
        }

        // verify the required parameter 'globalSignOutRequest' is set
        if (globalSignOutRequest == null) {
            throw new ApiException("Missing the required parameter 'globalSignOutRequest' when calling globalSignOut(Async)");
        }

        return globalSignOutCall(xAmzTarget, globalSignOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Signs out a user from all devices. &lt;code&gt;GlobalSignOut&lt;/code&gt; invalidates all identity, access and refresh tokens that Amazon Cognito has issued to a user. A user can still use a hosted UI cookie to retrieve new tokens for the duration of the 1-hour cookie validity period.&lt;/p&gt; &lt;p&gt;Your app isn&#39;t aware that a user&#39;s access token is revoked unless it attempts to authorize a user pools API request with an access token that contains the scope &lt;code&gt;aws.cognito.signin.user.admin&lt;/code&gt;. Your app might otherwise accept access tokens until they expire.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param globalSignOutRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public Object globalSignOut(String xAmzTarget, GlobalSignOutRequest globalSignOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = globalSignOutWithHttpInfo(xAmzTarget, globalSignOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Signs out a user from all devices. &lt;code&gt;GlobalSignOut&lt;/code&gt; invalidates all identity, access and refresh tokens that Amazon Cognito has issued to a user. A user can still use a hosted UI cookie to retrieve new tokens for the duration of the 1-hour cookie validity period.&lt;/p&gt; &lt;p&gt;Your app isn&#39;t aware that a user&#39;s access token is revoked unless it attempts to authorize a user pools API request with an access token that contains the scope &lt;code&gt;aws.cognito.signin.user.admin&lt;/code&gt;. Your app might otherwise accept access tokens until they expire.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param globalSignOutRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> globalSignOutWithHttpInfo(String xAmzTarget, GlobalSignOutRequest globalSignOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = globalSignOutValidateBeforeCall(xAmzTarget, globalSignOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Signs out a user from all devices. &lt;code&gt;GlobalSignOut&lt;/code&gt; invalidates all identity, access and refresh tokens that Amazon Cognito has issued to a user. A user can still use a hosted UI cookie to retrieve new tokens for the duration of the 1-hour cookie validity period.&lt;/p&gt; &lt;p&gt;Your app isn&#39;t aware that a user&#39;s access token is revoked unless it attempts to authorize a user pools API request with an access token that contains the scope &lt;code&gt;aws.cognito.signin.user.admin&lt;/code&gt;. Your app might otherwise accept access tokens until they expire.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param globalSignOutRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalSignOutAsync(String xAmzTarget, GlobalSignOutRequest globalSignOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalSignOutValidateBeforeCall(xAmzTarget, globalSignOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initiateAuth
     * @param xAmzTarget  (required)
     * @param initiateAuthRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateAuthCall(String xAmzTarget, InitiateAuthRequest initiateAuthRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = initiateAuthRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.InitiateAuth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateAuthValidateBeforeCall(String xAmzTarget, InitiateAuthRequest initiateAuthRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling initiateAuth(Async)");
        }

        // verify the required parameter 'initiateAuthRequest' is set
        if (initiateAuthRequest == null) {
            throw new ApiException("Missing the required parameter 'initiateAuthRequest' when calling initiateAuth(Async)");
        }

        return initiateAuthCall(xAmzTarget, initiateAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Initiates sign-in for a user in the Amazon Cognito user directory. You can&#39;t sign in a user with a federated IdP with &lt;code&gt;InitiateAuth&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation.html\&quot;&gt; Adding user pool sign-in through a third party&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param initiateAuthRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return InitiateAuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public InitiateAuthResponse initiateAuth(String xAmzTarget, InitiateAuthRequest initiateAuthRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<InitiateAuthResponse> localVarResp = initiateAuthWithHttpInfo(xAmzTarget, initiateAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Initiates sign-in for a user in the Amazon Cognito user directory. You can&#39;t sign in a user with a federated IdP with &lt;code&gt;InitiateAuth&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation.html\&quot;&gt; Adding user pool sign-in through a third party&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param initiateAuthRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;InitiateAuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InitiateAuthResponse> initiateAuthWithHttpInfo(String xAmzTarget, InitiateAuthRequest initiateAuthRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = initiateAuthValidateBeforeCall(xAmzTarget, initiateAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<InitiateAuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Initiates sign-in for a user in the Amazon Cognito user directory. You can&#39;t sign in a user with a federated IdP with &lt;code&gt;InitiateAuth&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation.html\&quot;&gt; Adding user pool sign-in through a third party&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param initiateAuthRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateAuthAsync(String xAmzTarget, InitiateAuthRequest initiateAuthRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<InitiateAuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateAuthValidateBeforeCall(xAmzTarget, initiateAuthRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<InitiateAuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDevices
     * @param xAmzTarget  (required)
     * @param listDevicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDevicesCall(String xAmzTarget, ListDevicesRequest listDevicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listDevicesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListDevices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDevicesValidateBeforeCall(String xAmzTarget, ListDevicesRequest listDevicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listDevices(Async)");
        }

        // verify the required parameter 'listDevicesRequest' is set
        if (listDevicesRequest == null) {
            throw new ApiException("Missing the required parameter 'listDevicesRequest' when calling listDevices(Async)");
        }

        return listDevicesCall(xAmzTarget, listDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the sign-in devices that Amazon Cognito has registered to the current user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listDevicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListDevicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ListDevicesResponse listDevices(String xAmzTarget, ListDevicesRequest listDevicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListDevicesResponse> localVarResp = listDevicesWithHttpInfo(xAmzTarget, listDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the sign-in devices that Amazon Cognito has registered to the current user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listDevicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListDevicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDevicesResponse> listDevicesWithHttpInfo(String xAmzTarget, ListDevicesRequest listDevicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listDevicesValidateBeforeCall(xAmzTarget, listDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListDevicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the sign-in devices that Amazon Cognito has registered to the current user.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listDevicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDevicesAsync(String xAmzTarget, ListDevicesRequest listDevicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListDevicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDevicesValidateBeforeCall(xAmzTarget, listDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListDevicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listGroups
     * @param xAmzTarget  (required)
     * @param listGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGroupsCall(String xAmzTarget, ListGroupsRequest listGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listGroupsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Limit", limit));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGroupsValidateBeforeCall(String xAmzTarget, ListGroupsRequest listGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listGroups(Async)");
        }

        // verify the required parameter 'listGroupsRequest' is set
        if (listGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'listGroupsRequest' when calling listGroups(Async)");
        }

        return listGroupsCall(xAmzTarget, listGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the groups associated with a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListGroupsResponse listGroups(String xAmzTarget, ListGroupsRequest listGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken) throws ApiException {
        ApiResponse<ListGroupsResponse> localVarResp = listGroupsWithHttpInfo(xAmzTarget, listGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the groups associated with a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListGroupsResponse> listGroupsWithHttpInfo(String xAmzTarget, ListGroupsRequest listGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listGroupsValidateBeforeCall(xAmzTarget, listGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, null);
        Type localVarReturnType = new TypeToken<ListGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the groups associated with a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listGroupsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGroupsAsync(String xAmzTarget, ListGroupsRequest listGroupsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken, final ApiCallback<ListGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGroupsValidateBeforeCall(xAmzTarget, listGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIdentityProviders
     * @param xAmzTarget  (required)
     * @param listIdentityProvidersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIdentityProvidersCall(String xAmzTarget, ListIdentityProvidersRequest listIdentityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listIdentityProvidersRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListIdentityProviders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIdentityProvidersValidateBeforeCall(String xAmzTarget, ListIdentityProvidersRequest listIdentityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listIdentityProviders(Async)");
        }

        // verify the required parameter 'listIdentityProvidersRequest' is set
        if (listIdentityProvidersRequest == null) {
            throw new ApiException("Missing the required parameter 'listIdentityProvidersRequest' when calling listIdentityProviders(Async)");
        }

        return listIdentityProvidersCall(xAmzTarget, listIdentityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists information about all IdPs for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listIdentityProvidersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListIdentityProvidersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListIdentityProvidersResponse listIdentityProviders(String xAmzTarget, ListIdentityProvidersRequest listIdentityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListIdentityProvidersResponse> localVarResp = listIdentityProvidersWithHttpInfo(xAmzTarget, listIdentityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists information about all IdPs for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listIdentityProvidersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListIdentityProvidersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListIdentityProvidersResponse> listIdentityProvidersWithHttpInfo(String xAmzTarget, ListIdentityProvidersRequest listIdentityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listIdentityProvidersValidateBeforeCall(xAmzTarget, listIdentityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListIdentityProvidersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists information about all IdPs for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listIdentityProvidersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIdentityProvidersAsync(String xAmzTarget, ListIdentityProvidersRequest listIdentityProvidersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListIdentityProvidersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIdentityProvidersValidateBeforeCall(xAmzTarget, listIdentityProvidersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListIdentityProvidersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listResourceServers
     * @param xAmzTarget  (required)
     * @param listResourceServersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourceServersCall(String xAmzTarget, ListResourceServersRequest listResourceServersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listResourceServersRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListResourceServers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listResourceServersValidateBeforeCall(String xAmzTarget, ListResourceServersRequest listResourceServersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listResourceServers(Async)");
        }

        // verify the required parameter 'listResourceServersRequest' is set
        if (listResourceServersRequest == null) {
            throw new ApiException("Missing the required parameter 'listResourceServersRequest' when calling listResourceServers(Async)");
        }

        return listResourceServersCall(xAmzTarget, listResourceServersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the resource servers for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listResourceServersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListResourceServersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListResourceServersResponse listResourceServers(String xAmzTarget, ListResourceServersRequest listResourceServersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListResourceServersResponse> localVarResp = listResourceServersWithHttpInfo(xAmzTarget, listResourceServersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the resource servers for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listResourceServersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListResourceServersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResourceServersResponse> listResourceServersWithHttpInfo(String xAmzTarget, ListResourceServersRequest listResourceServersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listResourceServersValidateBeforeCall(xAmzTarget, listResourceServersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListResourceServersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the resource servers for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listResourceServersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourceServersAsync(String xAmzTarget, ListResourceServersRequest listResourceServersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListResourceServersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listResourceServersValidateBeforeCall(xAmzTarget, listResourceServersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListResourceServersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTagsForResource(Async)");
        }

        // verify the required parameter 'listTagsForResourceRequest' is set
        if (listTagsForResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the tags that are assigned to an Amazon Cognito user pool.&lt;/p&gt; &lt;p&gt;A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.&lt;/p&gt; &lt;p&gt;You can use this action up to 10 times per second, per account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse listTagsForResource(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the tags that are assigned to an Amazon Cognito user pool.&lt;/p&gt; &lt;p&gt;A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.&lt;/p&gt; &lt;p&gt;You can use this action up to 10 times per second, per account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the tags that are assigned to an Amazon Cognito user pool.&lt;/p&gt; &lt;p&gt;A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.&lt;/p&gt; &lt;p&gt;You can use this action up to 10 times per second, per account.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUserImportJobs
     * @param xAmzTarget  (required)
     * @param listUserImportJobsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserImportJobsCall(String xAmzTarget, ListUserImportJobsRequest listUserImportJobsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listUserImportJobsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserImportJobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserImportJobsValidateBeforeCall(String xAmzTarget, ListUserImportJobsRequest listUserImportJobsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listUserImportJobs(Async)");
        }

        // verify the required parameter 'listUserImportJobsRequest' is set
        if (listUserImportJobsRequest == null) {
            throw new ApiException("Missing the required parameter 'listUserImportJobsRequest' when calling listUserImportJobs(Async)");
        }

        return listUserImportJobsCall(xAmzTarget, listUserImportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists user import jobs for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUserImportJobsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListUserImportJobsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListUserImportJobsResponse listUserImportJobs(String xAmzTarget, ListUserImportJobsRequest listUserImportJobsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListUserImportJobsResponse> localVarResp = listUserImportJobsWithHttpInfo(xAmzTarget, listUserImportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists user import jobs for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUserImportJobsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListUserImportJobsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUserImportJobsResponse> listUserImportJobsWithHttpInfo(String xAmzTarget, ListUserImportJobsRequest listUserImportJobsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listUserImportJobsValidateBeforeCall(xAmzTarget, listUserImportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListUserImportJobsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists user import jobs for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUserImportJobsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserImportJobsAsync(String xAmzTarget, ListUserImportJobsRequest listUserImportJobsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListUserImportJobsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserImportJobsValidateBeforeCall(xAmzTarget, listUserImportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListUserImportJobsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUserPoolClients
     * @param xAmzTarget  (required)
     * @param listUserPoolClientsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserPoolClientsCall(String xAmzTarget, ListUserPoolClientsRequest listUserPoolClientsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listUserPoolClientsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserPoolClients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserPoolClientsValidateBeforeCall(String xAmzTarget, ListUserPoolClientsRequest listUserPoolClientsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listUserPoolClients(Async)");
        }

        // verify the required parameter 'listUserPoolClientsRequest' is set
        if (listUserPoolClientsRequest == null) {
            throw new ApiException("Missing the required parameter 'listUserPoolClientsRequest' when calling listUserPoolClients(Async)");
        }

        return listUserPoolClientsCall(xAmzTarget, listUserPoolClientsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the clients that have been created for the specified user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUserPoolClientsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListUserPoolClientsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListUserPoolClientsResponse listUserPoolClients(String xAmzTarget, ListUserPoolClientsRequest listUserPoolClientsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListUserPoolClientsResponse> localVarResp = listUserPoolClientsWithHttpInfo(xAmzTarget, listUserPoolClientsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the clients that have been created for the specified user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUserPoolClientsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListUserPoolClientsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUserPoolClientsResponse> listUserPoolClientsWithHttpInfo(String xAmzTarget, ListUserPoolClientsRequest listUserPoolClientsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listUserPoolClientsValidateBeforeCall(xAmzTarget, listUserPoolClientsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListUserPoolClientsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the clients that have been created for the specified user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUserPoolClientsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserPoolClientsAsync(String xAmzTarget, ListUserPoolClientsRequest listUserPoolClientsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListUserPoolClientsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserPoolClientsValidateBeforeCall(xAmzTarget, listUserPoolClientsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListUserPoolClientsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUserPools
     * @param xAmzTarget  (required)
     * @param listUserPoolsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserPoolsCall(String xAmzTarget, ListUserPoolsRequest listUserPoolsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listUserPoolsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUserPools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserPoolsValidateBeforeCall(String xAmzTarget, ListUserPoolsRequest listUserPoolsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listUserPools(Async)");
        }

        // verify the required parameter 'listUserPoolsRequest' is set
        if (listUserPoolsRequest == null) {
            throw new ApiException("Missing the required parameter 'listUserPoolsRequest' when calling listUserPools(Async)");
        }

        return listUserPoolsCall(xAmzTarget, listUserPoolsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the user pools associated with an Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUserPoolsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListUserPoolsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListUserPoolsResponse listUserPools(String xAmzTarget, ListUserPoolsRequest listUserPoolsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListUserPoolsResponse> localVarResp = listUserPoolsWithHttpInfo(xAmzTarget, listUserPoolsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the user pools associated with an Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUserPoolsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListUserPoolsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUserPoolsResponse> listUserPoolsWithHttpInfo(String xAmzTarget, ListUserPoolsRequest listUserPoolsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listUserPoolsValidateBeforeCall(xAmzTarget, listUserPoolsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListUserPoolsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the user pools associated with an Amazon Web Services account.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUserPoolsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserPoolsAsync(String xAmzTarget, ListUserPoolsRequest listUserPoolsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListUserPoolsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserPoolsValidateBeforeCall(xAmzTarget, listUserPoolsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListUserPoolsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsers
     * @param xAmzTarget  (required)
     * @param listUsersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param paginationToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersCall(String xAmzTarget, ListUsersRequest listUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String paginationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listUsersRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Limit", limit));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaginationToken", paginationToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersValidateBeforeCall(String xAmzTarget, ListUsersRequest listUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String paginationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listUsers(Async)");
        }

        // verify the required parameter 'listUsersRequest' is set
        if (listUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'listUsersRequest' when calling listUsers(Async)");
        }

        return listUsersCall(xAmzTarget, listUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, paginationToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists users and their basic details in a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUsersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param paginationToken Pagination token (optional)
     * @return ListUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListUsersResponse listUsers(String xAmzTarget, ListUsersRequest listUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String paginationToken) throws ApiException {
        ApiResponse<ListUsersResponse> localVarResp = listUsersWithHttpInfo(xAmzTarget, listUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists users and their basic details in a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUsersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param paginationToken Pagination token (optional)
     * @return ApiResponse&lt;ListUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUsersResponse> listUsersWithHttpInfo(String xAmzTarget, ListUsersRequest listUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = listUsersValidateBeforeCall(xAmzTarget, listUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, paginationToken, null);
        Type localVarReturnType = new TypeToken<ListUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists users and their basic details in a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUsersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param paginationToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersAsync(String xAmzTarget, ListUsersRequest listUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String paginationToken, final ApiCallback<ListUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersValidateBeforeCall(xAmzTarget, listUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ListUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsersInGroup
     * @param xAmzTarget  (required)
     * @param listUsersInGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersInGroupCall(String xAmzTarget, ListUsersInGroupRequest listUsersInGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listUsersInGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ListUsersInGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Limit", limit));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersInGroupValidateBeforeCall(String xAmzTarget, ListUsersInGroupRequest listUsersInGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listUsersInGroup(Async)");
        }

        // verify the required parameter 'listUsersInGroupRequest' is set
        if (listUsersInGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'listUsersInGroupRequest' when calling listUsersInGroup(Async)");
        }

        return listUsersInGroupCall(xAmzTarget, listUsersInGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the users in the specified group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUsersInGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListUsersInGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListUsersInGroupResponse listUsersInGroup(String xAmzTarget, ListUsersInGroupRequest listUsersInGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken) throws ApiException {
        ApiResponse<ListUsersInGroupResponse> localVarResp = listUsersInGroupWithHttpInfo(xAmzTarget, listUsersInGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the users in the specified group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUsersInGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListUsersInGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUsersInGroupResponse> listUsersInGroupWithHttpInfo(String xAmzTarget, ListUsersInGroupRequest listUsersInGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listUsersInGroupValidateBeforeCall(xAmzTarget, listUsersInGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, null);
        Type localVarReturnType = new TypeToken<ListUsersInGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the users in the specified group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param listUsersInGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersInGroupAsync(String xAmzTarget, ListUsersInGroupRequest listUsersInGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String limit, String nextToken, final ApiCallback<ListUsersInGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersInGroupValidateBeforeCall(xAmzTarget, listUsersInGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListUsersInGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendConfirmationCode
     * @param xAmzTarget  (required)
     * @param resendConfirmationCodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendConfirmationCodeCall(String xAmzTarget, ResendConfirmationCodeRequest resendConfirmationCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resendConfirmationCodeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.ResendConfirmationCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendConfirmationCodeValidateBeforeCall(String xAmzTarget, ResendConfirmationCodeRequest resendConfirmationCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling resendConfirmationCode(Async)");
        }

        // verify the required parameter 'resendConfirmationCodeRequest' is set
        if (resendConfirmationCodeRequest == null) {
            throw new ApiException("Missing the required parameter 'resendConfirmationCodeRequest' when calling resendConfirmationCode(Async)");
        }

        return resendConfirmationCodeCall(xAmzTarget, resendConfirmationCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Resends the confirmation (for confirmation of registration) to a specific user in the user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param resendConfirmationCodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ResendConfirmationCodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ResendConfirmationCodeResponse resendConfirmationCode(String xAmzTarget, ResendConfirmationCodeRequest resendConfirmationCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ResendConfirmationCodeResponse> localVarResp = resendConfirmationCodeWithHttpInfo(xAmzTarget, resendConfirmationCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Resends the confirmation (for confirmation of registration) to a specific user in the user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param resendConfirmationCodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ResendConfirmationCodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResendConfirmationCodeResponse> resendConfirmationCodeWithHttpInfo(String xAmzTarget, ResendConfirmationCodeRequest resendConfirmationCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = resendConfirmationCodeValidateBeforeCall(xAmzTarget, resendConfirmationCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ResendConfirmationCodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Resends the confirmation (for confirmation of registration) to a specific user in the user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param resendConfirmationCodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendConfirmationCodeAsync(String xAmzTarget, ResendConfirmationCodeRequest resendConfirmationCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ResendConfirmationCodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendConfirmationCodeValidateBeforeCall(xAmzTarget, resendConfirmationCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ResendConfirmationCodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for respondToAuthChallenge
     * @param xAmzTarget  (required)
     * @param respondToAuthChallengeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> MFAMethodNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respondToAuthChallengeCall(String xAmzTarget, RespondToAuthChallengeRequest respondToAuthChallengeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = respondToAuthChallengeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.RespondToAuthChallenge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call respondToAuthChallengeValidateBeforeCall(String xAmzTarget, RespondToAuthChallengeRequest respondToAuthChallengeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling respondToAuthChallenge(Async)");
        }

        // verify the required parameter 'respondToAuthChallengeRequest' is set
        if (respondToAuthChallengeRequest == null) {
            throw new ApiException("Missing the required parameter 'respondToAuthChallengeRequest' when calling respondToAuthChallenge(Async)");
        }

        return respondToAuthChallengeCall(xAmzTarget, respondToAuthChallengeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Responds to the authentication challenge.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param respondToAuthChallengeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RespondToAuthChallengeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> MFAMethodNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public RespondToAuthChallengeResponse respondToAuthChallenge(String xAmzTarget, RespondToAuthChallengeRequest respondToAuthChallengeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RespondToAuthChallengeResponse> localVarResp = respondToAuthChallengeWithHttpInfo(xAmzTarget, respondToAuthChallengeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Responds to the authentication challenge.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param respondToAuthChallengeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RespondToAuthChallengeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> MFAMethodNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RespondToAuthChallengeResponse> respondToAuthChallengeWithHttpInfo(String xAmzTarget, RespondToAuthChallengeRequest respondToAuthChallengeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = respondToAuthChallengeValidateBeforeCall(xAmzTarget, respondToAuthChallengeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RespondToAuthChallengeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Responds to the authentication challenge.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param respondToAuthChallengeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> MFAMethodNotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 499 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call respondToAuthChallengeAsync(String xAmzTarget, RespondToAuthChallengeRequest respondToAuthChallengeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RespondToAuthChallengeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = respondToAuthChallengeValidateBeforeCall(xAmzTarget, respondToAuthChallengeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RespondToAuthChallengeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeToken
     * @param xAmzTarget  (required)
     * @param revokeTokenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedTokenTypeException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeTokenCall(String xAmzTarget, RevokeTokenRequest revokeTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = revokeTokenRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.RevokeToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeTokenValidateBeforeCall(String xAmzTarget, RevokeTokenRequest revokeTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling revokeToken(Async)");
        }

        // verify the required parameter 'revokeTokenRequest' is set
        if (revokeTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'revokeTokenRequest' when calling revokeToken(Async)");
        }

        return revokeTokenCall(xAmzTarget, revokeTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Revokes all of the access tokens generated by, and at the same time as, the specified refresh token. After a token is revoked, you can&#39;t use the revoked token to access Amazon Cognito user APIs, or to authorize access to your resource server.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param revokeTokenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedTokenTypeException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public Object revokeToken(String xAmzTarget, RevokeTokenRequest revokeTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = revokeTokenWithHttpInfo(xAmzTarget, revokeTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Revokes all of the access tokens generated by, and at the same time as, the specified refresh token. After a token is revoked, you can&#39;t use the revoked token to access Amazon Cognito user APIs, or to authorize access to your resource server.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param revokeTokenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedTokenTypeException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> revokeTokenWithHttpInfo(String xAmzTarget, RevokeTokenRequest revokeTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = revokeTokenValidateBeforeCall(xAmzTarget, revokeTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Revokes all of the access tokens generated by, and at the same time as, the specified refresh token. After a token is revoked, you can&#39;t use the revoked token to access Amazon Cognito user APIs, or to authorize access to your resource server.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param revokeTokenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedTokenTypeException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeTokenAsync(String xAmzTarget, RevokeTokenRequest revokeTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeTokenValidateBeforeCall(xAmzTarget, revokeTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setLogDeliveryConfiguration
     * @param xAmzTarget  (required)
     * @param setLogDeliveryConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLogDeliveryConfigurationCall(String xAmzTarget, SetLogDeliveryConfigurationRequest setLogDeliveryConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setLogDeliveryConfigurationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetLogDeliveryConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setLogDeliveryConfigurationValidateBeforeCall(String xAmzTarget, SetLogDeliveryConfigurationRequest setLogDeliveryConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling setLogDeliveryConfiguration(Async)");
        }

        // verify the required parameter 'setLogDeliveryConfigurationRequest' is set
        if (setLogDeliveryConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'setLogDeliveryConfigurationRequest' when calling setLogDeliveryConfiguration(Async)");
        }

        return setLogDeliveryConfigurationCall(xAmzTarget, setLogDeliveryConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Sets up or modifies the detailed activity logging configuration of a user pool.
     * @param xAmzTarget  (required)
     * @param setLogDeliveryConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SetLogDeliveryConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public SetLogDeliveryConfigurationResponse setLogDeliveryConfiguration(String xAmzTarget, SetLogDeliveryConfigurationRequest setLogDeliveryConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SetLogDeliveryConfigurationResponse> localVarResp = setLogDeliveryConfigurationWithHttpInfo(xAmzTarget, setLogDeliveryConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets up or modifies the detailed activity logging configuration of a user pool.
     * @param xAmzTarget  (required)
     * @param setLogDeliveryConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SetLogDeliveryConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetLogDeliveryConfigurationResponse> setLogDeliveryConfigurationWithHttpInfo(String xAmzTarget, SetLogDeliveryConfigurationRequest setLogDeliveryConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = setLogDeliveryConfigurationValidateBeforeCall(xAmzTarget, setLogDeliveryConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SetLogDeliveryConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets up or modifies the detailed activity logging configuration of a user pool.
     * @param xAmzTarget  (required)
     * @param setLogDeliveryConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setLogDeliveryConfigurationAsync(String xAmzTarget, SetLogDeliveryConfigurationRequest setLogDeliveryConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SetLogDeliveryConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setLogDeliveryConfigurationValidateBeforeCall(xAmzTarget, setLogDeliveryConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SetLogDeliveryConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setRiskConfiguration
     * @param xAmzTarget  (required)
     * @param setRiskConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRiskConfigurationCall(String xAmzTarget, SetRiskConfigurationRequest setRiskConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setRiskConfigurationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetRiskConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRiskConfigurationValidateBeforeCall(String xAmzTarget, SetRiskConfigurationRequest setRiskConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling setRiskConfiguration(Async)");
        }

        // verify the required parameter 'setRiskConfigurationRequest' is set
        if (setRiskConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'setRiskConfigurationRequest' when calling setRiskConfiguration(Async)");
        }

        return setRiskConfigurationCall(xAmzTarget, setRiskConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Configures actions on detected risks. To delete the risk configuration for &lt;code&gt;UserPoolId&lt;/code&gt; or &lt;code&gt;ClientId&lt;/code&gt;, pass null values for all four configuration types.&lt;/p&gt; &lt;p&gt;To activate Amazon Cognito advanced security features, update the user pool to include the &lt;code&gt;UserPoolAddOns&lt;/code&gt; key&lt;code&gt;AdvancedSecurityMode&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param setRiskConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SetRiskConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public SetRiskConfigurationResponse setRiskConfiguration(String xAmzTarget, SetRiskConfigurationRequest setRiskConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SetRiskConfigurationResponse> localVarResp = setRiskConfigurationWithHttpInfo(xAmzTarget, setRiskConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Configures actions on detected risks. To delete the risk configuration for &lt;code&gt;UserPoolId&lt;/code&gt; or &lt;code&gt;ClientId&lt;/code&gt;, pass null values for all four configuration types.&lt;/p&gt; &lt;p&gt;To activate Amazon Cognito advanced security features, update the user pool to include the &lt;code&gt;UserPoolAddOns&lt;/code&gt; key&lt;code&gt;AdvancedSecurityMode&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param setRiskConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SetRiskConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetRiskConfigurationResponse> setRiskConfigurationWithHttpInfo(String xAmzTarget, SetRiskConfigurationRequest setRiskConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = setRiskConfigurationValidateBeforeCall(xAmzTarget, setRiskConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SetRiskConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Configures actions on detected risks. To delete the risk configuration for &lt;code&gt;UserPoolId&lt;/code&gt; or &lt;code&gt;ClientId&lt;/code&gt;, pass null values for all four configuration types.&lt;/p&gt; &lt;p&gt;To activate Amazon Cognito advanced security features, update the user pool to include the &lt;code&gt;UserPoolAddOns&lt;/code&gt; key&lt;code&gt;AdvancedSecurityMode&lt;/code&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param setRiskConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRiskConfigurationAsync(String xAmzTarget, SetRiskConfigurationRequest setRiskConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SetRiskConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRiskConfigurationValidateBeforeCall(xAmzTarget, setRiskConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SetRiskConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setUICustomization
     * @param xAmzTarget  (required)
     * @param setUICustomizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUICustomizationCall(String xAmzTarget, SetUICustomizationRequest setUICustomizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setUICustomizationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetUICustomization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setUICustomizationValidateBeforeCall(String xAmzTarget, SetUICustomizationRequest setUICustomizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling setUICustomization(Async)");
        }

        // verify the required parameter 'setUICustomizationRequest' is set
        if (setUICustomizationRequest == null) {
            throw new ApiException("Missing the required parameter 'setUICustomizationRequest' when calling setUICustomization(Async)");
        }

        return setUICustomizationCall(xAmzTarget, setUICustomizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the user interface (UI) customization information for a user pool&#39;s built-in app UI.&lt;/p&gt; &lt;p&gt;You can specify app UI customization settings for a single client (with a specific &lt;code&gt;clientId&lt;/code&gt;) or for all clients (by setting the &lt;code&gt;clientId&lt;/code&gt; to &lt;code&gt;ALL&lt;/code&gt;). If you specify &lt;code&gt;ALL&lt;/code&gt;, the default configuration is used for every client that has no previously set UI customization. If you specify UI customization settings for a particular client, it will no longer return to the &lt;code&gt;ALL&lt;/code&gt; configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app&#39;s pages, and the service will throw an error.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param setUICustomizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SetUICustomizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public SetUICustomizationResponse setUICustomization(String xAmzTarget, SetUICustomizationRequest setUICustomizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SetUICustomizationResponse> localVarResp = setUICustomizationWithHttpInfo(xAmzTarget, setUICustomizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sets the user interface (UI) customization information for a user pool&#39;s built-in app UI.&lt;/p&gt; &lt;p&gt;You can specify app UI customization settings for a single client (with a specific &lt;code&gt;clientId&lt;/code&gt;) or for all clients (by setting the &lt;code&gt;clientId&lt;/code&gt; to &lt;code&gt;ALL&lt;/code&gt;). If you specify &lt;code&gt;ALL&lt;/code&gt;, the default configuration is used for every client that has no previously set UI customization. If you specify UI customization settings for a particular client, it will no longer return to the &lt;code&gt;ALL&lt;/code&gt; configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app&#39;s pages, and the service will throw an error.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param setUICustomizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SetUICustomizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetUICustomizationResponse> setUICustomizationWithHttpInfo(String xAmzTarget, SetUICustomizationRequest setUICustomizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = setUICustomizationValidateBeforeCall(xAmzTarget, setUICustomizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SetUICustomizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the user interface (UI) customization information for a user pool&#39;s built-in app UI.&lt;/p&gt; &lt;p&gt;You can specify app UI customization settings for a single client (with a specific &lt;code&gt;clientId&lt;/code&gt;) or for all clients (by setting the &lt;code&gt;clientId&lt;/code&gt; to &lt;code&gt;ALL&lt;/code&gt;). If you specify &lt;code&gt;ALL&lt;/code&gt;, the default configuration is used for every client that has no previously set UI customization. If you specify UI customization settings for a particular client, it will no longer return to the &lt;code&gt;ALL&lt;/code&gt; configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To use this API, your user pool must have a domain associated with it. Otherwise, there is no place to host the app&#39;s pages, and the service will throw an error.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param setUICustomizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUICustomizationAsync(String xAmzTarget, SetUICustomizationRequest setUICustomizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SetUICustomizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setUICustomizationValidateBeforeCall(xAmzTarget, setUICustomizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SetUICustomizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setUserMFAPreference
     * @param xAmzTarget  (required)
     * @param setUserMFAPreferenceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserMFAPreferenceCall(String xAmzTarget, SetUserMFAPreferenceRequest setUserMFAPreferenceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setUserMFAPreferenceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserMFAPreference";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setUserMFAPreferenceValidateBeforeCall(String xAmzTarget, SetUserMFAPreferenceRequest setUserMFAPreferenceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling setUserMFAPreference(Async)");
        }

        // verify the required parameter 'setUserMFAPreferenceRequest' is set
        if (setUserMFAPreferenceRequest == null) {
            throw new ApiException("Missing the required parameter 'setUserMFAPreferenceRequest' when calling setUserMFAPreference(Async)");
        }

        return setUserMFAPreferenceCall(xAmzTarget, setUserMFAPreferenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Set the user&#39;s multi-factor authentication (MFA) method preference, including which MFA factors are activated and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts unless device tracking is turned on and the device has been trusted. If you want MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param setUserMFAPreferenceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public Object setUserMFAPreference(String xAmzTarget, SetUserMFAPreferenceRequest setUserMFAPreferenceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = setUserMFAPreferenceWithHttpInfo(xAmzTarget, setUserMFAPreferenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Set the user&#39;s multi-factor authentication (MFA) method preference, including which MFA factors are activated and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts unless device tracking is turned on and the device has been trusted. If you want MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param setUserMFAPreferenceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> setUserMFAPreferenceWithHttpInfo(String xAmzTarget, SetUserMFAPreferenceRequest setUserMFAPreferenceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = setUserMFAPreferenceValidateBeforeCall(xAmzTarget, setUserMFAPreferenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Set the user&#39;s multi-factor authentication (MFA) method preference, including which MFA factors are activated and if any are preferred. Only one factor can be set as preferred. The preferred MFA factor will be used to authenticate a user if multiple factors are activated. If multiple options are activated and no preference is set, a challenge to choose an MFA option will be returned during sign-in. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts unless device tracking is turned on and the device has been trusted. If you want MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param setUserMFAPreferenceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserMFAPreferenceAsync(String xAmzTarget, SetUserMFAPreferenceRequest setUserMFAPreferenceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setUserMFAPreferenceValidateBeforeCall(xAmzTarget, setUserMFAPreferenceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setUserPoolMfaConfig
     * @param xAmzTarget  (required)
     * @param setUserPoolMfaConfigRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserPoolMfaConfigCall(String xAmzTarget, SetUserPoolMfaConfigRequest setUserPoolMfaConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setUserPoolMfaConfigRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserPoolMfaConfig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setUserPoolMfaConfigValidateBeforeCall(String xAmzTarget, SetUserPoolMfaConfigRequest setUserPoolMfaConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling setUserPoolMfaConfig(Async)");
        }

        // verify the required parameter 'setUserPoolMfaConfigRequest' is set
        if (setUserPoolMfaConfigRequest == null) {
            throw new ApiException("Missing the required parameter 'setUserPoolMfaConfigRequest' when calling setUserPoolMfaConfig(Async)");
        }

        return setUserPoolMfaConfigCall(xAmzTarget, setUserPoolMfaConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the user pool multi-factor authentication (MFA) configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param setUserPoolMfaConfigRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SetUserPoolMfaConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public SetUserPoolMfaConfigResponse setUserPoolMfaConfig(String xAmzTarget, SetUserPoolMfaConfigRequest setUserPoolMfaConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SetUserPoolMfaConfigResponse> localVarResp = setUserPoolMfaConfigWithHttpInfo(xAmzTarget, setUserPoolMfaConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sets the user pool multi-factor authentication (MFA) configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param setUserPoolMfaConfigRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SetUserPoolMfaConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetUserPoolMfaConfigResponse> setUserPoolMfaConfigWithHttpInfo(String xAmzTarget, SetUserPoolMfaConfigRequest setUserPoolMfaConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = setUserPoolMfaConfigValidateBeforeCall(xAmzTarget, setUserPoolMfaConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SetUserPoolMfaConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the user pool multi-factor authentication (MFA) configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param setUserPoolMfaConfigRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserPoolMfaConfigAsync(String xAmzTarget, SetUserPoolMfaConfigRequest setUserPoolMfaConfigRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SetUserPoolMfaConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setUserPoolMfaConfigValidateBeforeCall(xAmzTarget, setUserPoolMfaConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SetUserPoolMfaConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setUserSettings
     * @param xAmzTarget  (required)
     * @param setUserSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserSettingsCall(String xAmzTarget, SetUserSettingsRequest setUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setUserSettingsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SetUserSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setUserSettingsValidateBeforeCall(String xAmzTarget, SetUserSettingsRequest setUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling setUserSettings(Async)");
        }

        // verify the required parameter 'setUserSettingsRequest' is set
        if (setUserSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'setUserSettingsRequest' when calling setUserSettings(Async)");
        }

        return setUserSettingsCall(xAmzTarget, setUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; &lt;i&gt;This action is no longer supported.&lt;/i&gt; You can use it to configure only SMS MFA. You can&#39;t use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserMFAPreference.html\&quot;&gt;SetUserMFAPreference&lt;/a&gt; instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param setUserSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public Object setUserSettings(String xAmzTarget, SetUserSettingsRequest setUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = setUserSettingsWithHttpInfo(xAmzTarget, setUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; &lt;i&gt;This action is no longer supported.&lt;/i&gt; You can use it to configure only SMS MFA. You can&#39;t use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserMFAPreference.html\&quot;&gt;SetUserMFAPreference&lt;/a&gt; instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param setUserSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> setUserSettingsWithHttpInfo(String xAmzTarget, SetUserSettingsRequest setUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = setUserSettingsValidateBeforeCall(xAmzTarget, setUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; &lt;i&gt;This action is no longer supported.&lt;/i&gt; You can use it to configure only SMS MFA. You can&#39;t use it to configure time-based one-time password (TOTP) software token MFA. To configure either type of MFA, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserMFAPreference.html\&quot;&gt;SetUserMFAPreference&lt;/a&gt; instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param setUserSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserSettingsAsync(String xAmzTarget, SetUserSettingsRequest setUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setUserSettingsValidateBeforeCall(xAmzTarget, setUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signUp
     * @param xAmzTarget  (required)
     * @param signUpRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UsernameExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signUpCall(String xAmzTarget, SignUpRequest signUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signUpRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.SignUp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signUpValidateBeforeCall(String xAmzTarget, SignUpRequest signUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling signUp(Async)");
        }

        // verify the required parameter 'signUpRequest' is set
        if (signUpRequest == null) {
            throw new ApiException("Missing the required parameter 'signUpRequest' when calling signUp(Async)");
        }

        return signUpCall(xAmzTarget, signUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Registers the user in the specified user pool and creates a user name, password, and user attributes.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param signUpRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SignUpResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UsernameExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public SignUpResponse signUp(String xAmzTarget, SignUpRequest signUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SignUpResponse> localVarResp = signUpWithHttpInfo(xAmzTarget, signUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Registers the user in the specified user pool and creates a user name, password, and user attributes.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param signUpRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SignUpResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UsernameExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignUpResponse> signUpWithHttpInfo(String xAmzTarget, SignUpRequest signUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = signUpValidateBeforeCall(xAmzTarget, signUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SignUpResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Registers the user in the specified user pool and creates a user name, password, and user attributes.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param signUpRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidPasswordException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UsernameExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signUpAsync(String xAmzTarget, SignUpRequest signUpRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SignUpResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signUpValidateBeforeCall(xAmzTarget, signUpRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SignUpResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startUserImportJob
     * @param xAmzTarget  (required)
     * @param startUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startUserImportJobCall(String xAmzTarget, StartUserImportJobRequest startUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startUserImportJobRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.StartUserImportJob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startUserImportJobValidateBeforeCall(String xAmzTarget, StartUserImportJobRequest startUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling startUserImportJob(Async)");
        }

        // verify the required parameter 'startUserImportJobRequest' is set
        if (startUserImportJobRequest == null) {
            throw new ApiException("Missing the required parameter 'startUserImportJobRequest' when calling startUserImportJob(Async)");
        }

        return startUserImportJobCall(xAmzTarget, startUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Starts the user import.
     * @param xAmzTarget  (required)
     * @param startUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartUserImportJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public StartUserImportJobResponse startUserImportJob(String xAmzTarget, StartUserImportJobRequest startUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartUserImportJobResponse> localVarResp = startUserImportJobWithHttpInfo(xAmzTarget, startUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts the user import.
     * @param xAmzTarget  (required)
     * @param startUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartUserImportJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartUserImportJobResponse> startUserImportJobWithHttpInfo(String xAmzTarget, StartUserImportJobRequest startUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startUserImportJobValidateBeforeCall(xAmzTarget, startUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartUserImportJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts the user import.
     * @param xAmzTarget  (required)
     * @param startUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startUserImportJobAsync(String xAmzTarget, StartUserImportJobRequest startUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartUserImportJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startUserImportJobValidateBeforeCall(xAmzTarget, startUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartUserImportJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopUserImportJob
     * @param xAmzTarget  (required)
     * @param stopUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopUserImportJobCall(String xAmzTarget, StopUserImportJobRequest stopUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopUserImportJobRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.StopUserImportJob";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopUserImportJobValidateBeforeCall(String xAmzTarget, StopUserImportJobRequest stopUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling stopUserImportJob(Async)");
        }

        // verify the required parameter 'stopUserImportJobRequest' is set
        if (stopUserImportJobRequest == null) {
            throw new ApiException("Missing the required parameter 'stopUserImportJobRequest' when calling stopUserImportJob(Async)");
        }

        return stopUserImportJobCall(xAmzTarget, stopUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Stops the user import job.
     * @param xAmzTarget  (required)
     * @param stopUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StopUserImportJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public StopUserImportJobResponse stopUserImportJob(String xAmzTarget, StopUserImportJobRequest stopUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StopUserImportJobResponse> localVarResp = stopUserImportJobWithHttpInfo(xAmzTarget, stopUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Stops the user import job.
     * @param xAmzTarget  (required)
     * @param stopUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StopUserImportJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StopUserImportJobResponse> stopUserImportJobWithHttpInfo(String xAmzTarget, StopUserImportJobRequest stopUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = stopUserImportJobValidateBeforeCall(xAmzTarget, stopUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StopUserImportJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stops the user import job.
     * @param xAmzTarget  (required)
     * @param stopUserImportJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> PreconditionNotMetException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopUserImportJobAsync(String xAmzTarget, StopUserImportJobRequest stopUserImportJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StopUserImportJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopUserImportJobValidateBeforeCall(xAmzTarget, stopUserImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StopUserImportJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of a user pool, one for testing and another for production, you might assign an &lt;code&gt;Environment&lt;/code&gt; tag key to both user pools. The value of this key might be &lt;code&gt;Test&lt;/code&gt; for one user pool, and &lt;code&gt;Production&lt;/code&gt; for the other.&lt;/p&gt; &lt;p&gt;Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your user pools. In an Identity and Access Management policy, you can constrain permissions for user pools based on specific tags or tag values.&lt;/p&gt; &lt;p&gt;You can use this action up to 5 times per second, per account. A user pool can have as many as 50 tags.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object tagResource(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = tagResourceWithHttpInfo(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of a user pool, one for testing and another for production, you might assign an &lt;code&gt;Environment&lt;/code&gt; tag key to both user pools. The value of this key might be &lt;code&gt;Test&lt;/code&gt; for one user pool, and &lt;code&gt;Production&lt;/code&gt; for the other.&lt;/p&gt; &lt;p&gt;Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your user pools. In an Identity and Access Management policy, you can constrain permissions for user pools based on specific tags or tag values.&lt;/p&gt; &lt;p&gt;You can use this action up to 5 times per second, per account. A user pool can have as many as 50 tags.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tagResourceWithHttpInfo(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Assigns a set of tags to an Amazon Cognito user pool. A tag is a label that you can use to categorize and manage user pools in different ways, such as by purpose, owner, environment, or other criteria.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and value, both of which you define. A key is a general category for more specific values. For example, if you have two versions of a user pool, one for testing and another for production, you might assign an &lt;code&gt;Environment&lt;/code&gt; tag key to both user pools. The value of this key might be &lt;code&gt;Test&lt;/code&gt; for one user pool, and &lt;code&gt;Production&lt;/code&gt; for the other.&lt;/p&gt; &lt;p&gt;Tags are useful for cost tracking and access control. You can activate your tags so that they appear on the Billing and Cost Management console, where you can track the costs associated with your user pools. In an Identity and Access Management policy, you can constrain permissions for user pools based on specific tags or tag values.&lt;/p&gt; &lt;p&gt;You can use this action up to 5 times per second, per account. A user pool can have as many as 50 tags.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceRequest' is set
        if (untagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'untagResourceRequest' when calling untagResource(Async)");
        }

        return untagResourceCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5 times per second, per account.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object untagResource(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = untagResourceWithHttpInfo(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5 times per second, per account.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> untagResourceWithHttpInfo(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the specified tags from an Amazon Cognito user pool. You can use this action up to 5 times per second, per account.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthEventFeedback
     * @param xAmzTarget  (required)
     * @param updateAuthEventFeedbackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthEventFeedbackCall(String xAmzTarget, UpdateAuthEventFeedbackRequest updateAuthEventFeedbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAuthEventFeedbackRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateAuthEventFeedback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthEventFeedbackValidateBeforeCall(String xAmzTarget, UpdateAuthEventFeedbackRequest updateAuthEventFeedbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateAuthEventFeedback(Async)");
        }

        // verify the required parameter 'updateAuthEventFeedbackRequest' is set
        if (updateAuthEventFeedbackRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAuthEventFeedbackRequest' when calling updateAuthEventFeedback(Async)");
        }

        return updateAuthEventFeedbackCall(xAmzTarget, updateAuthEventFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Provides the feedback for an authentication event, whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateAuthEventFeedbackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAuthEventFeedback(String xAmzTarget, UpdateAuthEventFeedbackRequest updateAuthEventFeedbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateAuthEventFeedbackWithHttpInfo(xAmzTarget, updateAuthEventFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Provides the feedback for an authentication event, whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateAuthEventFeedbackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAuthEventFeedbackWithHttpInfo(String xAmzTarget, UpdateAuthEventFeedbackRequest updateAuthEventFeedbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateAuthEventFeedbackValidateBeforeCall(xAmzTarget, updateAuthEventFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Provides the feedback for an authentication event, whether it was from a valid user or not. This feedback is used for improving the risk evaluation decision for the user pool as part of Amazon Cognito advanced security.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateAuthEventFeedbackRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserPoolAddOnNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthEventFeedbackAsync(String xAmzTarget, UpdateAuthEventFeedbackRequest updateAuthEventFeedbackRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthEventFeedbackValidateBeforeCall(xAmzTarget, updateAuthEventFeedbackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDeviceStatus
     * @param xAmzTarget  (required)
     * @param updateDeviceStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceStatusCall(String xAmzTarget, UpdateDeviceStatusRequest updateDeviceStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDeviceStatusRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateDeviceStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeviceStatusValidateBeforeCall(String xAmzTarget, UpdateDeviceStatusRequest updateDeviceStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateDeviceStatus(Async)");
        }

        // verify the required parameter 'updateDeviceStatusRequest' is set
        if (updateDeviceStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDeviceStatusRequest' when calling updateDeviceStatus(Async)");
        }

        return updateDeviceStatusCall(xAmzTarget, updateDeviceStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the device status.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateDeviceStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public Object updateDeviceStatus(String xAmzTarget, UpdateDeviceStatusRequest updateDeviceStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateDeviceStatusWithHttpInfo(xAmzTarget, updateDeviceStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the device status.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateDeviceStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateDeviceStatusWithHttpInfo(String xAmzTarget, UpdateDeviceStatusRequest updateDeviceStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateDeviceStatusValidateBeforeCall(xAmzTarget, updateDeviceStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the device status.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateDeviceStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDeviceStatusAsync(String xAmzTarget, UpdateDeviceStatusRequest updateDeviceStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeviceStatusValidateBeforeCall(xAmzTarget, updateDeviceStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroup
     * @param xAmzTarget  (required)
     * @param updateGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupCall(String xAmzTarget, UpdateGroupRequest updateGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGroupRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupValidateBeforeCall(String xAmzTarget, UpdateGroupRequest updateGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateGroup(Async)");
        }

        // verify the required parameter 'updateGroupRequest' is set
        if (updateGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGroupRequest' when calling updateGroup(Async)");
        }

        return updateGroupCall(xAmzTarget, updateGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the specified group with the specified attributes.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGroupResponse updateGroup(String xAmzTarget, UpdateGroupRequest updateGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateGroupResponse> localVarResp = updateGroupWithHttpInfo(xAmzTarget, updateGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the specified group with the specified attributes.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGroupResponse> updateGroupWithHttpInfo(String xAmzTarget, UpdateGroupRequest updateGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(xAmzTarget, updateGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the specified group with the specified attributes.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupAsync(String xAmzTarget, UpdateGroupRequest updateGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupValidateBeforeCall(xAmzTarget, updateGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateIdentityProvider
     * @param xAmzTarget  (required)
     * @param updateIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedIdentityProviderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIdentityProviderCall(String xAmzTarget, UpdateIdentityProviderRequest updateIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateIdentityProviderRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateIdentityProvider";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateIdentityProviderValidateBeforeCall(String xAmzTarget, UpdateIdentityProviderRequest updateIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateIdentityProvider(Async)");
        }

        // verify the required parameter 'updateIdentityProviderRequest' is set
        if (updateIdentityProviderRequest == null) {
            throw new ApiException("Missing the required parameter 'updateIdentityProviderRequest' when calling updateIdentityProvider(Async)");
        }

        return updateIdentityProviderCall(xAmzTarget, updateIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates IdP information for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateIdentityProviderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedIdentityProviderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateIdentityProviderResponse updateIdentityProvider(String xAmzTarget, UpdateIdentityProviderRequest updateIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateIdentityProviderResponse> localVarResp = updateIdentityProviderWithHttpInfo(xAmzTarget, updateIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates IdP information for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateIdentityProviderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedIdentityProviderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateIdentityProviderResponse> updateIdentityProviderWithHttpInfo(String xAmzTarget, UpdateIdentityProviderRequest updateIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateIdentityProviderValidateBeforeCall(xAmzTarget, updateIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateIdentityProviderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates IdP information for a user pool.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateIdentityProviderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedIdentityProviderException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateIdentityProviderAsync(String xAmzTarget, UpdateIdentityProviderRequest updateIdentityProviderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateIdentityProviderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateIdentityProviderValidateBeforeCall(xAmzTarget, updateIdentityProviderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateIdentityProviderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateResourceServer
     * @param xAmzTarget  (required)
     * @param updateResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceServerCall(String xAmzTarget, UpdateResourceServerRequest updateResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateResourceServerRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateResourceServer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateResourceServerValidateBeforeCall(String xAmzTarget, UpdateResourceServerRequest updateResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateResourceServer(Async)");
        }

        // verify the required parameter 'updateResourceServerRequest' is set
        if (updateResourceServerRequest == null) {
            throw new ApiException("Missing the required parameter 'updateResourceServerRequest' when calling updateResourceServer(Async)");
        }

        return updateResourceServerCall(xAmzTarget, updateResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the name and scopes of resource server. All other fields are read-only.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, it is set to the default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateResourceServerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateResourceServerResponse updateResourceServer(String xAmzTarget, UpdateResourceServerRequest updateResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateResourceServerResponse> localVarResp = updateResourceServerWithHttpInfo(xAmzTarget, updateResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the name and scopes of resource server. All other fields are read-only.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, it is set to the default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateResourceServerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateResourceServerResponse> updateResourceServerWithHttpInfo(String xAmzTarget, UpdateResourceServerRequest updateResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateResourceServerValidateBeforeCall(xAmzTarget, updateResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateResourceServerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the name and scopes of resource server. All other fields are read-only.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, it is set to the default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateResourceServerRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceServerAsync(String xAmzTarget, UpdateResourceServerRequest updateResourceServerRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateResourceServerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateResourceServerValidateBeforeCall(xAmzTarget, updateResourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateResourceServerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserAttributes
     * @param xAmzTarget  (required)
     * @param updateUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAttributesCall(String xAmzTarget, UpdateUserAttributesRequest updateUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserAttributesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserAttributesValidateBeforeCall(String xAmzTarget, UpdateUserAttributesRequest updateUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateUserAttributes(Async)");
        }

        // verify the required parameter 'updateUserAttributesRequest' is set
        if (updateUserAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserAttributesRequest' when calling updateUserAttributes(Async)");
        }

        return updateUserAttributesCall(xAmzTarget, updateUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Allows a user to update a specific attribute (one at a time).&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateUserAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserAttributesResponse updateUserAttributes(String xAmzTarget, UpdateUserAttributesRequest updateUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateUserAttributesResponse> localVarResp = updateUserAttributesWithHttpInfo(xAmzTarget, updateUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Allows a user to update a specific attribute (one at a time).&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateUserAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateUserAttributesResponse> updateUserAttributesWithHttpInfo(String xAmzTarget, UpdateUserAttributesRequest updateUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateUserAttributesValidateBeforeCall(xAmzTarget, updateUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateUserAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Allows a user to update a specific attribute (one at a time).&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateUserAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnexpectedLambdaException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserLambdaValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidLambdaResponseException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> CodeDeliveryFailureException </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAttributesAsync(String xAmzTarget, UpdateUserAttributesRequest updateUserAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateUserAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserAttributesValidateBeforeCall(xAmzTarget, updateUserAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateUserAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserPool
     * @param xAmzTarget  (required)
     * @param updateUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserImportInProgressException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserPoolTaggingException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserPoolCall(String xAmzTarget, UpdateUserPoolRequest updateUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserPoolRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserPoolValidateBeforeCall(String xAmzTarget, UpdateUserPoolRequest updateUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateUserPool(Async)");
        }

        // verify the required parameter 'updateUserPoolRequest' is set
        if (updateUserPoolRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserPoolRequest' when calling updateUserPool(Async)");
        }

        return updateUserPoolCall(xAmzTarget, updateUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Updates the specified user pool with the specified attributes. You can get a list of the current user pool settings using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html\&quot;&gt;DescribeUserPool&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserImportInProgressException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserPoolTaggingException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public Object updateUserPool(String xAmzTarget, UpdateUserPoolRequest updateUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateUserPoolWithHttpInfo(xAmzTarget, updateUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Updates the specified user pool with the specified attributes. You can get a list of the current user pool settings using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html\&quot;&gt;DescribeUserPool&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserImportInProgressException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserPoolTaggingException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateUserPoolWithHttpInfo(String xAmzTarget, UpdateUserPoolRequest updateUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateUserPoolValidateBeforeCall(xAmzTarget, updateUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This action might generate an SMS text message. Starting June 1, 2021, US telecom carriers require you to register an origination phone number before you can send SMS messages to US phone numbers. If you use SMS text messages in Amazon Cognito, you must register a phone number with &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/pinpoint/home/\&quot;&gt;Amazon Pinpoint&lt;/a&gt;. Amazon Cognito uses the registered number automatically. Otherwise, Amazon Cognito users who must receive SMS messages might not be able to sign up, activate their accounts, or sign in.&lt;/p&gt; &lt;p&gt;If you have never used SMS text messages with Amazon Cognito or any other Amazon Web Service, Amazon Simple Notification Service might place your account in the SMS sandbox. In &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html\&quot;&gt;sandbox mode&lt;/a&gt; &lt;/i&gt;, you can send messages only to verified phone numbers. After you test your app while in the sandbox environment, you can move out of the sandbox and into production. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-sms-settings.html\&quot;&gt; SMS message settings for Amazon Cognito user pools&lt;/a&gt; in the &lt;i&gt;Amazon Cognito Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Updates the specified user pool with the specified attributes. You can get a list of the current user pool settings using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPool.html\&quot;&gt;DescribeUserPool&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateUserPoolRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserImportInProgressException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidSmsRoleAccessPolicyException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidSmsRoleTrustRelationshipException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserPoolTaggingException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidEmailRoleAccessPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserPoolAsync(String xAmzTarget, UpdateUserPoolRequest updateUserPoolRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserPoolValidateBeforeCall(xAmzTarget, updateUserPoolRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserPoolClient
     * @param xAmzTarget  (required)
     * @param updateUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ScopeDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidOAuthFlowException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserPoolClientCall(String xAmzTarget, UpdateUserPoolClientRequest updateUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserPoolClientRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPoolClient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserPoolClientValidateBeforeCall(String xAmzTarget, UpdateUserPoolClientRequest updateUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateUserPoolClient(Async)");
        }

        // verify the required parameter 'updateUserPoolClientRequest' is set
        if (updateUserPoolClientRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserPoolClientRequest' when calling updateUserPoolClient(Async)");
        }

        return updateUserPoolClientCall(xAmzTarget, updateUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the specified user pool app client with the specified attributes. You can get a list of the current user pool app client settings using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPoolClient.html\&quot;&gt;DescribeUserPoolClient&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can also use this operation to enable token revocation for user pool clients. For more information about revoking tokens, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html\&quot;&gt;RevokeToken&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateUserPoolClientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ScopeDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidOAuthFlowException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserPoolClientResponse updateUserPoolClient(String xAmzTarget, UpdateUserPoolClientRequest updateUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateUserPoolClientResponse> localVarResp = updateUserPoolClientWithHttpInfo(xAmzTarget, updateUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the specified user pool app client with the specified attributes. You can get a list of the current user pool app client settings using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPoolClient.html\&quot;&gt;DescribeUserPoolClient&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can also use this operation to enable token revocation for user pool clients. For more information about revoking tokens, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html\&quot;&gt;RevokeToken&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateUserPoolClientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ScopeDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidOAuthFlowException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateUserPoolClientResponse> updateUserPoolClientWithHttpInfo(String xAmzTarget, UpdateUserPoolClientRequest updateUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateUserPoolClientValidateBeforeCall(xAmzTarget, updateUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateUserPoolClientResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the specified user pool app client with the specified attributes. You can get a list of the current user pool app client settings using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_DescribeUserPoolClient.html\&quot;&gt;DescribeUserPoolClient&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you don&#39;t provide a value for an attribute, Amazon Cognito sets it to its default value.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You can also use this operation to enable token revocation for user pool clients. For more information about revoking tokens, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html\&quot;&gt;RevokeToken&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateUserPoolClientRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConcurrentModificationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ScopeDoesNotExistException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidOAuthFlowException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserPoolClientAsync(String xAmzTarget, UpdateUserPoolClientRequest updateUserPoolClientRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateUserPoolClientResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserPoolClientValidateBeforeCall(xAmzTarget, updateUserPoolClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateUserPoolClientResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserPoolDomain
     * @param xAmzTarget  (required)
     * @param updateUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserPoolDomainCall(String xAmzTarget, UpdateUserPoolDomainRequest updateUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserPoolDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.UpdateUserPoolDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserPoolDomainValidateBeforeCall(String xAmzTarget, UpdateUserPoolDomainRequest updateUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateUserPoolDomain(Async)");
        }

        // verify the required parameter 'updateUserPoolDomainRequest' is set
        if (updateUserPoolDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserPoolDomainRequest' when calling updateUserPoolDomain(Async)");
        }

        return updateUserPoolDomainCall(xAmzTarget, updateUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user pool.&lt;/p&gt; &lt;p&gt;You can use this operation to provide the Amazon Resource Name (ARN) of a new certificate to Amazon Cognito. You can&#39;t use it to change the domain for a user pool.&lt;/p&gt; &lt;p&gt;A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up and sign-in pages for your application. When you set up a custom domain, you provide a certificate that you manage with Certificate Manager (ACM). When necessary, you can use this operation to change the certificate that you applied to your custom domain.&lt;/p&gt; &lt;p&gt;Usually, this is unnecessary following routine certificate renewal with ACM. When you renew your existing certificate in ACM, the ARN for your certificate remains the same, and your custom domain uses the new certificate automatically.&lt;/p&gt; &lt;p&gt;However, if you replace your existing certificate with a new one, ACM gives the new certificate a new ARN. To apply the new certificate to your custom domain, you must provide this ARN to Amazon Cognito.&lt;/p&gt; &lt;p&gt;When you add your new certificate in ACM, you must choose US East (N. Virginia) as the Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new certificate to your custom domain.&lt;/p&gt; &lt;p&gt;For more information about adding a custom domain to your user pool, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html\&quot;&gt;Using Your Own Domain for the Hosted UI&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateUserPoolDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserPoolDomainResponse updateUserPoolDomain(String xAmzTarget, UpdateUserPoolDomainRequest updateUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateUserPoolDomainResponse> localVarResp = updateUserPoolDomainWithHttpInfo(xAmzTarget, updateUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user pool.&lt;/p&gt; &lt;p&gt;You can use this operation to provide the Amazon Resource Name (ARN) of a new certificate to Amazon Cognito. You can&#39;t use it to change the domain for a user pool.&lt;/p&gt; &lt;p&gt;A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up and sign-in pages for your application. When you set up a custom domain, you provide a certificate that you manage with Certificate Manager (ACM). When necessary, you can use this operation to change the certificate that you applied to your custom domain.&lt;/p&gt; &lt;p&gt;Usually, this is unnecessary following routine certificate renewal with ACM. When you renew your existing certificate in ACM, the ARN for your certificate remains the same, and your custom domain uses the new certificate automatically.&lt;/p&gt; &lt;p&gt;However, if you replace your existing certificate with a new one, ACM gives the new certificate a new ARN. To apply the new certificate to your custom domain, you must provide this ARN to Amazon Cognito.&lt;/p&gt; &lt;p&gt;When you add your new certificate in ACM, you must choose US East (N. Virginia) as the Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new certificate to your custom domain.&lt;/p&gt; &lt;p&gt;For more information about adding a custom domain to your user pool, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html\&quot;&gt;Using Your Own Domain for the Hosted UI&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateUserPoolDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateUserPoolDomainResponse> updateUserPoolDomainWithHttpInfo(String xAmzTarget, UpdateUserPoolDomainRequest updateUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateUserPoolDomainValidateBeforeCall(xAmzTarget, updateUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateUserPoolDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the Secure Sockets Layer (SSL) certificate for the custom domain for your user pool.&lt;/p&gt; &lt;p&gt;You can use this operation to provide the Amazon Resource Name (ARN) of a new certificate to Amazon Cognito. You can&#39;t use it to change the domain for a user pool.&lt;/p&gt; &lt;p&gt;A custom domain is used to host the Amazon Cognito hosted UI, which provides sign-up and sign-in pages for your application. When you set up a custom domain, you provide a certificate that you manage with Certificate Manager (ACM). When necessary, you can use this operation to change the certificate that you applied to your custom domain.&lt;/p&gt; &lt;p&gt;Usually, this is unnecessary following routine certificate renewal with ACM. When you renew your existing certificate in ACM, the ARN for your certificate remains the same, and your custom domain uses the new certificate automatically.&lt;/p&gt; &lt;p&gt;However, if you replace your existing certificate with a new one, ACM gives the new certificate a new ARN. To apply the new certificate to your custom domain, you must provide this ARN to Amazon Cognito.&lt;/p&gt; &lt;p&gt;When you add your new certificate in ACM, you must choose US East (N. Virginia) as the Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;After you submit your request, Amazon Cognito requires up to 1 hour to distribute your new certificate to your custom domain.&lt;/p&gt; &lt;p&gt;For more information about adding a custom domain to your user pool, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html\&quot;&gt;Using Your Own Domain for the Hosted UI&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Learn more&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html\&quot;&gt;Signing Amazon Web Services API Requests&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito user pools API and user pool endpoints&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param updateUserPoolDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InternalErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserPoolDomainAsync(String xAmzTarget, UpdateUserPoolDomainRequest updateUserPoolDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateUserPoolDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserPoolDomainValidateBeforeCall(xAmzTarget, updateUserPoolDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateUserPoolDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifySoftwareToken
     * @param xAmzTarget  (required)
     * @param verifySoftwareTokenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EnableSoftwareTokenMFAException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySoftwareTokenCall(String xAmzTarget, VerifySoftwareTokenRequest verifySoftwareTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifySoftwareTokenRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.VerifySoftwareToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifySoftwareTokenValidateBeforeCall(String xAmzTarget, VerifySoftwareTokenRequest verifySoftwareTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling verifySoftwareToken(Async)");
        }

        // verify the required parameter 'verifySoftwareTokenRequest' is set
        if (verifySoftwareTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'verifySoftwareTokenRequest' when calling verifySoftwareToken(Async)");
        }

        return verifySoftwareTokenCall(xAmzTarget, verifySoftwareTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Use this API to register a user&#39;s entered time-based one-time password (TOTP) code and mark the user&#39;s software token MFA status as \&quot;verified\&quot; if successful. The request takes an access token or a session string, but not both.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param verifySoftwareTokenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return VerifySoftwareTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EnableSoftwareTokenMFAException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public VerifySoftwareTokenResponse verifySoftwareToken(String xAmzTarget, VerifySoftwareTokenRequest verifySoftwareTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<VerifySoftwareTokenResponse> localVarResp = verifySoftwareTokenWithHttpInfo(xAmzTarget, verifySoftwareTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Use this API to register a user&#39;s entered time-based one-time password (TOTP) code and mark the user&#39;s software token MFA status as \&quot;verified\&quot; if successful. The request takes an access token or a session string, but not both.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param verifySoftwareTokenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;VerifySoftwareTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EnableSoftwareTokenMFAException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifySoftwareTokenResponse> verifySoftwareTokenWithHttpInfo(String xAmzTarget, VerifySoftwareTokenRequest verifySoftwareTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = verifySoftwareTokenValidateBeforeCall(xAmzTarget, verifySoftwareTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<VerifySoftwareTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Use this API to register a user&#39;s entered time-based one-time password (TOTP) code and mark the user&#39;s software token MFA status as \&quot;verified\&quot; if successful. The request takes an access token or a session string, but not both.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param verifySoftwareTokenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserPoolConfigurationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> EnableSoftwareTokenMFAException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> SoftwareTokenMFANotFoundException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySoftwareTokenAsync(String xAmzTarget, VerifySoftwareTokenRequest verifySoftwareTokenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<VerifySoftwareTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifySoftwareTokenValidateBeforeCall(xAmzTarget, verifySoftwareTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<VerifySoftwareTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyUserAttribute
     * @param xAmzTarget  (required)
     * @param verifyUserAttributeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyUserAttributeCall(String xAmzTarget, VerifyUserAttributeRequest verifyUserAttributeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyUserAttributeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=AWSCognitoIdentityProviderService.VerifyUserAttribute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyUserAttributeValidateBeforeCall(String xAmzTarget, VerifyUserAttributeRequest verifyUserAttributeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling verifyUserAttribute(Async)");
        }

        // verify the required parameter 'verifyUserAttributeRequest' is set
        if (verifyUserAttributeRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyUserAttributeRequest' when calling verifyUserAttribute(Async)");
        }

        return verifyUserAttributeCall(xAmzTarget, verifyUserAttributeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Verifies the specified user attributes in the user pool.&lt;/p&gt; &lt;p&gt; If your user pool requires verification before Amazon Cognito updates the attribute value, VerifyUserAttribute updates the affected attribute to its pending value. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserAttributeUpdateSettingsType.html\&quot;&gt; UserAttributeUpdateSettingsType&lt;/a&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param verifyUserAttributeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public Object verifyUserAttribute(String xAmzTarget, VerifyUserAttributeRequest verifyUserAttributeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = verifyUserAttributeWithHttpInfo(xAmzTarget, verifyUserAttributeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Verifies the specified user attributes in the user pool.&lt;/p&gt; &lt;p&gt; If your user pool requires verification before Amazon Cognito updates the attribute value, VerifyUserAttribute updates the affected attribute to its pending value. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserAttributeUpdateSettingsType.html\&quot;&gt; UserAttributeUpdateSettingsType&lt;/a&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param verifyUserAttributeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> verifyUserAttributeWithHttpInfo(String xAmzTarget, VerifyUserAttributeRequest verifyUserAttributeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = verifyUserAttributeValidateBeforeCall(xAmzTarget, verifyUserAttributeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Verifies the specified user attributes in the user pool.&lt;/p&gt; &lt;p&gt; If your user pool requires verification before Amazon Cognito updates the attribute value, VerifyUserAttribute updates the affected attribute to its pending value. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UserAttributeUpdateSettingsType.html\&quot;&gt; UserAttributeUpdateSettingsType&lt;/a&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Cognito doesn&#39;t evaluate Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you can&#39;t use IAM credentials to authorize requests, and you can&#39;t grant IAM permissions in policies. For more information about authorization models in Amazon Cognito, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\&quot;&gt;Using the Amazon Cognito native and OIDC APIs&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param verifyUserAttributeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CodeMismatchException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ExpiredCodeException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotAuthorizedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> PasswordResetRequiredException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserNotConfirmedException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InternalErrorException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> AliasExistsException </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> ForbiddenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyUserAttributeAsync(String xAmzTarget, VerifyUserAttributeRequest verifyUserAttributeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyUserAttributeValidateBeforeCall(xAmzTarget, verifyUserAttributeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
