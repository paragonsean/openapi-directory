/*
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AttributeDataType;
import org.openapitools.client.model.SchemaAttributeTypeNumberAttributeConstraints;
import org.openapitools.client.model.SchemaAttributeTypeStringAttributeConstraints;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A list of the user attributes and their properties in your user pool. The attribute schema contains standard attributes, custom attributes with a &lt;code&gt;custom:&lt;/code&gt; prefix, and developer attributes with a &lt;code&gt;dev:&lt;/code&gt; prefix. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html\&quot;&gt;User pool attributes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Developer-only attributes are a legacy feature of user pools, are read-only to all app clients. You can create and update developer-only attributes only with IAM-authenticated API operations. Use app client read/write permissions instead.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:34.148435-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SchemaAttributeType {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ATTRIBUTE_DATA_TYPE = "AttributeDataType";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DATA_TYPE)
  private AttributeDataType attributeDataType;

  public static final String SERIALIZED_NAME_DEVELOPER_ONLY_ATTRIBUTE = "DeveloperOnlyAttribute";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ONLY_ATTRIBUTE)
  private Boolean developerOnlyAttribute;

  public static final String SERIALIZED_NAME_MUTABLE = "Mutable";
  @SerializedName(SERIALIZED_NAME_MUTABLE)
  private Boolean mutable;

  public static final String SERIALIZED_NAME_REQUIRED = "Required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_NUMBER_ATTRIBUTE_CONSTRAINTS = "NumberAttributeConstraints";
  @SerializedName(SERIALIZED_NAME_NUMBER_ATTRIBUTE_CONSTRAINTS)
  private SchemaAttributeTypeNumberAttributeConstraints numberAttributeConstraints;

  public static final String SERIALIZED_NAME_STRING_ATTRIBUTE_CONSTRAINTS = "StringAttributeConstraints";
  @SerializedName(SERIALIZED_NAME_STRING_ATTRIBUTE_CONSTRAINTS)
  private SchemaAttributeTypeStringAttributeConstraints stringAttributeConstraints;

  public SchemaAttributeType() {
  }

  public SchemaAttributeType name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SchemaAttributeType attributeDataType(AttributeDataType attributeDataType) {
    this.attributeDataType = attributeDataType;
    return this;
  }

  /**
   * Get attributeDataType
   * @return attributeDataType
   */
  @javax.annotation.Nullable
  public AttributeDataType getAttributeDataType() {
    return attributeDataType;
  }

  public void setAttributeDataType(AttributeDataType attributeDataType) {
    this.attributeDataType = attributeDataType;
  }


  public SchemaAttributeType developerOnlyAttribute(Boolean developerOnlyAttribute) {
    this.developerOnlyAttribute = developerOnlyAttribute;
    return this;
  }

  /**
   * Get developerOnlyAttribute
   * @return developerOnlyAttribute
   */
  @javax.annotation.Nullable
  public Boolean getDeveloperOnlyAttribute() {
    return developerOnlyAttribute;
  }

  public void setDeveloperOnlyAttribute(Boolean developerOnlyAttribute) {
    this.developerOnlyAttribute = developerOnlyAttribute;
  }


  public SchemaAttributeType mutable(Boolean mutable) {
    this.mutable = mutable;
    return this;
  }

  /**
   * Get mutable
   * @return mutable
   */
  @javax.annotation.Nullable
  public Boolean getMutable() {
    return mutable;
  }

  public void setMutable(Boolean mutable) {
    this.mutable = mutable;
  }


  public SchemaAttributeType required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Get required
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public SchemaAttributeType numberAttributeConstraints(SchemaAttributeTypeNumberAttributeConstraints numberAttributeConstraints) {
    this.numberAttributeConstraints = numberAttributeConstraints;
    return this;
  }

  /**
   * Get numberAttributeConstraints
   * @return numberAttributeConstraints
   */
  @javax.annotation.Nullable
  public SchemaAttributeTypeNumberAttributeConstraints getNumberAttributeConstraints() {
    return numberAttributeConstraints;
  }

  public void setNumberAttributeConstraints(SchemaAttributeTypeNumberAttributeConstraints numberAttributeConstraints) {
    this.numberAttributeConstraints = numberAttributeConstraints;
  }


  public SchemaAttributeType stringAttributeConstraints(SchemaAttributeTypeStringAttributeConstraints stringAttributeConstraints) {
    this.stringAttributeConstraints = stringAttributeConstraints;
    return this;
  }

  /**
   * Get stringAttributeConstraints
   * @return stringAttributeConstraints
   */
  @javax.annotation.Nullable
  public SchemaAttributeTypeStringAttributeConstraints getStringAttributeConstraints() {
    return stringAttributeConstraints;
  }

  public void setStringAttributeConstraints(SchemaAttributeTypeStringAttributeConstraints stringAttributeConstraints) {
    this.stringAttributeConstraints = stringAttributeConstraints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemaAttributeType schemaAttributeType = (SchemaAttributeType) o;
    return Objects.equals(this.name, schemaAttributeType.name) &&
        Objects.equals(this.attributeDataType, schemaAttributeType.attributeDataType) &&
        Objects.equals(this.developerOnlyAttribute, schemaAttributeType.developerOnlyAttribute) &&
        Objects.equals(this.mutable, schemaAttributeType.mutable) &&
        Objects.equals(this.required, schemaAttributeType.required) &&
        Objects.equals(this.numberAttributeConstraints, schemaAttributeType.numberAttributeConstraints) &&
        Objects.equals(this.stringAttributeConstraints, schemaAttributeType.stringAttributeConstraints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, attributeDataType, developerOnlyAttribute, mutable, required, numberAttributeConstraints, stringAttributeConstraints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemaAttributeType {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    attributeDataType: ").append(toIndentedString(attributeDataType)).append("\n");
    sb.append("    developerOnlyAttribute: ").append(toIndentedString(developerOnlyAttribute)).append("\n");
    sb.append("    mutable: ").append(toIndentedString(mutable)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    numberAttributeConstraints: ").append(toIndentedString(numberAttributeConstraints)).append("\n");
    sb.append("    stringAttributeConstraints: ").append(toIndentedString(stringAttributeConstraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("AttributeDataType");
    openapiFields.add("DeveloperOnlyAttribute");
    openapiFields.add("Mutable");
    openapiFields.add("Required");
    openapiFields.add("NumberAttributeConstraints");
    openapiFields.add("StringAttributeConstraints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SchemaAttributeType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SchemaAttributeType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchemaAttributeType is not found in the empty JSON string", SchemaAttributeType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SchemaAttributeType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SchemaAttributeType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `AttributeDataType`
      if (jsonObj.get("AttributeDataType") != null && !jsonObj.get("AttributeDataType").isJsonNull()) {
        AttributeDataType.validateJsonElement(jsonObj.get("AttributeDataType"));
      }
      // validate the optional field `DeveloperOnlyAttribute`
      if (jsonObj.get("DeveloperOnlyAttribute") != null && !jsonObj.get("DeveloperOnlyAttribute").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeveloperOnlyAttribute"));
      }
      // validate the optional field `Mutable`
      if (jsonObj.get("Mutable") != null && !jsonObj.get("Mutable").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Mutable"));
      }
      // validate the optional field `Required`
      if (jsonObj.get("Required") != null && !jsonObj.get("Required").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Required"));
      }
      // validate the optional field `NumberAttributeConstraints`
      if (jsonObj.get("NumberAttributeConstraints") != null && !jsonObj.get("NumberAttributeConstraints").isJsonNull()) {
        SchemaAttributeTypeNumberAttributeConstraints.validateJsonElement(jsonObj.get("NumberAttributeConstraints"));
      }
      // validate the optional field `StringAttributeConstraints`
      if (jsonObj.get("StringAttributeConstraints") != null && !jsonObj.get("StringAttributeConstraints").isJsonNull()) {
        SchemaAttributeTypeStringAttributeConstraints.validateJsonElement(jsonObj.get("StringAttributeConstraints"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchemaAttributeType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchemaAttributeType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchemaAttributeType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchemaAttributeType.class));

       return (TypeAdapter<T>) new TypeAdapter<SchemaAttributeType>() {
           @Override
           public void write(JsonWriter out, SchemaAttributeType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SchemaAttributeType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SchemaAttributeType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SchemaAttributeType
   * @throws IOException if the JSON string is invalid with respect to SchemaAttributeType
   */
  public static SchemaAttributeType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchemaAttributeType.class);
  }

  /**
   * Convert an instance of SchemaAttributeType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

