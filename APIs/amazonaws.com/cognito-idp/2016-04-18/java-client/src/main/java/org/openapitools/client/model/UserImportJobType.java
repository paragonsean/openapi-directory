/*
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.UserImportJobStatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The user import job type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:34.148435-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserImportJobType {
  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_USER_POOL_ID = "UserPoolId";
  @SerializedName(SERIALIZED_NAME_USER_POOL_ID)
  private String userPoolId;

  public static final String SERIALIZED_NAME_PRE_SIGNED_URL = "PreSignedUrl";
  @SerializedName(SERIALIZED_NAME_PRE_SIGNED_URL)
  private String preSignedUrl;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_COMPLETION_DATE = "CompletionDate";
  @SerializedName(SERIALIZED_NAME_COMPLETION_DATE)
  private OffsetDateTime completionDate;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private UserImportJobStatusType status;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGS_ROLE_ARN = "CloudWatchLogsRoleArn";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGS_ROLE_ARN)
  private String cloudWatchLogsRoleArn;

  public static final String SERIALIZED_NAME_IMPORTED_USERS = "ImportedUsers";
  @SerializedName(SERIALIZED_NAME_IMPORTED_USERS)
  private Integer importedUsers;

  public static final String SERIALIZED_NAME_SKIPPED_USERS = "SkippedUsers";
  @SerializedName(SERIALIZED_NAME_SKIPPED_USERS)
  private Integer skippedUsers;

  public static final String SERIALIZED_NAME_FAILED_USERS = "FailedUsers";
  @SerializedName(SERIALIZED_NAME_FAILED_USERS)
  private Integer failedUsers;

  public static final String SERIALIZED_NAME_COMPLETION_MESSAGE = "CompletionMessage";
  @SerializedName(SERIALIZED_NAME_COMPLETION_MESSAGE)
  private String completionMessage;

  public UserImportJobType() {
  }

  public UserImportJobType jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public UserImportJobType jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public UserImportJobType userPoolId(String userPoolId) {
    this.userPoolId = userPoolId;
    return this;
  }

  /**
   * Get userPoolId
   * @return userPoolId
   */
  @javax.annotation.Nullable
  public String getUserPoolId() {
    return userPoolId;
  }

  public void setUserPoolId(String userPoolId) {
    this.userPoolId = userPoolId;
  }


  public UserImportJobType preSignedUrl(String preSignedUrl) {
    this.preSignedUrl = preSignedUrl;
    return this;
  }

  /**
   * Get preSignedUrl
   * @return preSignedUrl
   */
  @javax.annotation.Nullable
  public String getPreSignedUrl() {
    return preSignedUrl;
  }

  public void setPreSignedUrl(String preSignedUrl) {
    this.preSignedUrl = preSignedUrl;
  }


  public UserImportJobType creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public UserImportJobType startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public UserImportJobType completionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
    return this;
  }

  /**
   * Get completionDate
   * @return completionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletionDate() {
    return completionDate;
  }

  public void setCompletionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
  }


  public UserImportJobType status(UserImportJobStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public UserImportJobStatusType getStatus() {
    return status;
  }

  public void setStatus(UserImportJobStatusType status) {
    this.status = status;
  }


  public UserImportJobType cloudWatchLogsRoleArn(String cloudWatchLogsRoleArn) {
    this.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn;
    return this;
  }

  /**
   * Get cloudWatchLogsRoleArn
   * @return cloudWatchLogsRoleArn
   */
  @javax.annotation.Nullable
  public String getCloudWatchLogsRoleArn() {
    return cloudWatchLogsRoleArn;
  }

  public void setCloudWatchLogsRoleArn(String cloudWatchLogsRoleArn) {
    this.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn;
  }


  public UserImportJobType importedUsers(Integer importedUsers) {
    this.importedUsers = importedUsers;
    return this;
  }

  /**
   * Get importedUsers
   * @return importedUsers
   */
  @javax.annotation.Nullable
  public Integer getImportedUsers() {
    return importedUsers;
  }

  public void setImportedUsers(Integer importedUsers) {
    this.importedUsers = importedUsers;
  }


  public UserImportJobType skippedUsers(Integer skippedUsers) {
    this.skippedUsers = skippedUsers;
    return this;
  }

  /**
   * Get skippedUsers
   * @return skippedUsers
   */
  @javax.annotation.Nullable
  public Integer getSkippedUsers() {
    return skippedUsers;
  }

  public void setSkippedUsers(Integer skippedUsers) {
    this.skippedUsers = skippedUsers;
  }


  public UserImportJobType failedUsers(Integer failedUsers) {
    this.failedUsers = failedUsers;
    return this;
  }

  /**
   * Get failedUsers
   * @return failedUsers
   */
  @javax.annotation.Nullable
  public Integer getFailedUsers() {
    return failedUsers;
  }

  public void setFailedUsers(Integer failedUsers) {
    this.failedUsers = failedUsers;
  }


  public UserImportJobType completionMessage(String completionMessage) {
    this.completionMessage = completionMessage;
    return this;
  }

  /**
   * Get completionMessage
   * @return completionMessage
   */
  @javax.annotation.Nullable
  public String getCompletionMessage() {
    return completionMessage;
  }

  public void setCompletionMessage(String completionMessage) {
    this.completionMessage = completionMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserImportJobType userImportJobType = (UserImportJobType) o;
    return Objects.equals(this.jobName, userImportJobType.jobName) &&
        Objects.equals(this.jobId, userImportJobType.jobId) &&
        Objects.equals(this.userPoolId, userImportJobType.userPoolId) &&
        Objects.equals(this.preSignedUrl, userImportJobType.preSignedUrl) &&
        Objects.equals(this.creationDate, userImportJobType.creationDate) &&
        Objects.equals(this.startDate, userImportJobType.startDate) &&
        Objects.equals(this.completionDate, userImportJobType.completionDate) &&
        Objects.equals(this.status, userImportJobType.status) &&
        Objects.equals(this.cloudWatchLogsRoleArn, userImportJobType.cloudWatchLogsRoleArn) &&
        Objects.equals(this.importedUsers, userImportJobType.importedUsers) &&
        Objects.equals(this.skippedUsers, userImportJobType.skippedUsers) &&
        Objects.equals(this.failedUsers, userImportJobType.failedUsers) &&
        Objects.equals(this.completionMessage, userImportJobType.completionMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobName, jobId, userPoolId, preSignedUrl, creationDate, startDate, completionDate, status, cloudWatchLogsRoleArn, importedUsers, skippedUsers, failedUsers, completionMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserImportJobType {\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    userPoolId: ").append(toIndentedString(userPoolId)).append("\n");
    sb.append("    preSignedUrl: ").append(toIndentedString(preSignedUrl)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    cloudWatchLogsRoleArn: ").append(toIndentedString(cloudWatchLogsRoleArn)).append("\n");
    sb.append("    importedUsers: ").append(toIndentedString(importedUsers)).append("\n");
    sb.append("    skippedUsers: ").append(toIndentedString(skippedUsers)).append("\n");
    sb.append("    failedUsers: ").append(toIndentedString(failedUsers)).append("\n");
    sb.append("    completionMessage: ").append(toIndentedString(completionMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobName");
    openapiFields.add("JobId");
    openapiFields.add("UserPoolId");
    openapiFields.add("PreSignedUrl");
    openapiFields.add("CreationDate");
    openapiFields.add("StartDate");
    openapiFields.add("CompletionDate");
    openapiFields.add("Status");
    openapiFields.add("CloudWatchLogsRoleArn");
    openapiFields.add("ImportedUsers");
    openapiFields.add("SkippedUsers");
    openapiFields.add("FailedUsers");
    openapiFields.add("CompletionMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserImportJobType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserImportJobType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserImportJobType is not found in the empty JSON string", UserImportJobType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserImportJobType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserImportJobType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the optional field `JobId`
      if (jsonObj.get("JobId") != null && !jsonObj.get("JobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobId"));
      }
      // validate the optional field `UserPoolId`
      if (jsonObj.get("UserPoolId") != null && !jsonObj.get("UserPoolId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UserPoolId"));
      }
      // validate the optional field `PreSignedUrl`
      if (jsonObj.get("PreSignedUrl") != null && !jsonObj.get("PreSignedUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreSignedUrl"));
      }
      // validate the optional field `CreationDate`
      if (jsonObj.get("CreationDate") != null && !jsonObj.get("CreationDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationDate"));
      }
      // validate the optional field `StartDate`
      if (jsonObj.get("StartDate") != null && !jsonObj.get("StartDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartDate"));
      }
      // validate the optional field `CompletionDate`
      if (jsonObj.get("CompletionDate") != null && !jsonObj.get("CompletionDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CompletionDate"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        UserImportJobStatusType.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `CloudWatchLogsRoleArn`
      if (jsonObj.get("CloudWatchLogsRoleArn") != null && !jsonObj.get("CloudWatchLogsRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CloudWatchLogsRoleArn"));
      }
      // validate the optional field `ImportedUsers`
      if (jsonObj.get("ImportedUsers") != null && !jsonObj.get("ImportedUsers").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ImportedUsers"));
      }
      // validate the optional field `SkippedUsers`
      if (jsonObj.get("SkippedUsers") != null && !jsonObj.get("SkippedUsers").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SkippedUsers"));
      }
      // validate the optional field `FailedUsers`
      if (jsonObj.get("FailedUsers") != null && !jsonObj.get("FailedUsers").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailedUsers"));
      }
      // validate the optional field `CompletionMessage`
      if (jsonObj.get("CompletionMessage") != null && !jsonObj.get("CompletionMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CompletionMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserImportJobType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserImportJobType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserImportJobType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserImportJobType.class));

       return (TypeAdapter<T>) new TypeAdapter<UserImportJobType>() {
           @Override
           public void write(JsonWriter out, UserImportJobType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserImportJobType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserImportJobType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserImportJobType
   * @throws IOException if the JSON string is invalid with respect to UserImportJobType
   */
  public static UserImportJobType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserImportJobType.class);
  }

  /**
   * Convert an instance of UserImportJobType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

