/*
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PreventUserExistenceErrorTypes;
import org.openapitools.client.model.UpdateUserPoolClientRequestAnalyticsConfiguration;
import org.openapitools.client.model.UpdateUserPoolClientRequestTokenValidityUnits;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the request to update the user pool client.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:34.148435-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateUserPoolClientRequest {
  public static final String SERIALIZED_NAME_USER_POOL_ID = "UserPoolId";
  @SerializedName(SERIALIZED_NAME_USER_POOL_ID)
  private String userPoolId;

  public static final String SERIALIZED_NAME_CLIENT_ID = "ClientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "ClientName";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_VALIDITY = "RefreshTokenValidity";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_VALIDITY)
  private Integer refreshTokenValidity;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_VALIDITY = "AccessTokenValidity";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_VALIDITY)
  private Integer accessTokenValidity;

  public static final String SERIALIZED_NAME_ID_TOKEN_VALIDITY = "IdTokenValidity";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN_VALIDITY)
  private Integer idTokenValidity;

  public static final String SERIALIZED_NAME_TOKEN_VALIDITY_UNITS = "TokenValidityUnits";
  @SerializedName(SERIALIZED_NAME_TOKEN_VALIDITY_UNITS)
  private UpdateUserPoolClientRequestTokenValidityUnits tokenValidityUnits;

  public static final String SERIALIZED_NAME_READ_ATTRIBUTES = "ReadAttributes";
  @SerializedName(SERIALIZED_NAME_READ_ATTRIBUTES)
  private List readAttributes;

  public static final String SERIALIZED_NAME_WRITE_ATTRIBUTES = "WriteAttributes";
  @SerializedName(SERIALIZED_NAME_WRITE_ATTRIBUTES)
  private List writeAttributes;

  public static final String SERIALIZED_NAME_EXPLICIT_AUTH_FLOWS = "ExplicitAuthFlows";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_AUTH_FLOWS)
  private List explicitAuthFlows;

  public static final String SERIALIZED_NAME_SUPPORTED_IDENTITY_PROVIDERS = "SupportedIdentityProviders";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_IDENTITY_PROVIDERS)
  private List supportedIdentityProviders;

  public static final String SERIALIZED_NAME_CALLBACK_U_R_LS = "CallbackURLs";
  @SerializedName(SERIALIZED_NAME_CALLBACK_U_R_LS)
  private List callbackURLs;

  public static final String SERIALIZED_NAME_LOGOUT_U_R_LS = "LogoutURLs";
  @SerializedName(SERIALIZED_NAME_LOGOUT_U_R_LS)
  private List logoutURLs;

  public static final String SERIALIZED_NAME_DEFAULT_REDIRECT_U_R_I = "DefaultRedirectURI";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REDIRECT_U_R_I)
  private String defaultRedirectURI;

  public static final String SERIALIZED_NAME_ALLOWED_O_AUTH_FLOWS = "AllowedOAuthFlows";
  @SerializedName(SERIALIZED_NAME_ALLOWED_O_AUTH_FLOWS)
  private List allowedOAuthFlows;

  public static final String SERIALIZED_NAME_ALLOWED_O_AUTH_SCOPES = "AllowedOAuthScopes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_O_AUTH_SCOPES)
  private List allowedOAuthScopes;

  public static final String SERIALIZED_NAME_ALLOWED_O_AUTH_FLOWS_USER_POOL_CLIENT = "AllowedOAuthFlowsUserPoolClient";
  @SerializedName(SERIALIZED_NAME_ALLOWED_O_AUTH_FLOWS_USER_POOL_CLIENT)
  private Boolean allowedOAuthFlowsUserPoolClient;

  public static final String SERIALIZED_NAME_ANALYTICS_CONFIGURATION = "AnalyticsConfiguration";
  @SerializedName(SERIALIZED_NAME_ANALYTICS_CONFIGURATION)
  private UpdateUserPoolClientRequestAnalyticsConfiguration analyticsConfiguration;

  public static final String SERIALIZED_NAME_PREVENT_USER_EXISTENCE_ERRORS = "PreventUserExistenceErrors";
  @SerializedName(SERIALIZED_NAME_PREVENT_USER_EXISTENCE_ERRORS)
  private PreventUserExistenceErrorTypes preventUserExistenceErrors;

  public static final String SERIALIZED_NAME_ENABLE_TOKEN_REVOCATION = "EnableTokenRevocation";
  @SerializedName(SERIALIZED_NAME_ENABLE_TOKEN_REVOCATION)
  private Boolean enableTokenRevocation;

  public static final String SERIALIZED_NAME_ENABLE_PROPAGATE_ADDITIONAL_USER_CONTEXT_DATA = "EnablePropagateAdditionalUserContextData";
  @SerializedName(SERIALIZED_NAME_ENABLE_PROPAGATE_ADDITIONAL_USER_CONTEXT_DATA)
  private Boolean enablePropagateAdditionalUserContextData;

  public static final String SERIALIZED_NAME_AUTH_SESSION_VALIDITY = "AuthSessionValidity";
  @SerializedName(SERIALIZED_NAME_AUTH_SESSION_VALIDITY)
  private Integer authSessionValidity;

  public UpdateUserPoolClientRequest() {
  }

  public UpdateUserPoolClientRequest userPoolId(String userPoolId) {
    this.userPoolId = userPoolId;
    return this;
  }

  /**
   * Get userPoolId
   * @return userPoolId
   */
  @javax.annotation.Nonnull
  public String getUserPoolId() {
    return userPoolId;
  }

  public void setUserPoolId(String userPoolId) {
    this.userPoolId = userPoolId;
  }


  public UpdateUserPoolClientRequest clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public UpdateUserPoolClientRequest clientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  /**
   * Get clientName
   * @return clientName
   */
  @javax.annotation.Nullable
  public String getClientName() {
    return clientName;
  }

  public void setClientName(String clientName) {
    this.clientName = clientName;
  }


  public UpdateUserPoolClientRequest refreshTokenValidity(Integer refreshTokenValidity) {
    this.refreshTokenValidity = refreshTokenValidity;
    return this;
  }

  /**
   * Get refreshTokenValidity
   * @return refreshTokenValidity
   */
  @javax.annotation.Nullable
  public Integer getRefreshTokenValidity() {
    return refreshTokenValidity;
  }

  public void setRefreshTokenValidity(Integer refreshTokenValidity) {
    this.refreshTokenValidity = refreshTokenValidity;
  }


  public UpdateUserPoolClientRequest accessTokenValidity(Integer accessTokenValidity) {
    this.accessTokenValidity = accessTokenValidity;
    return this;
  }

  /**
   * Get accessTokenValidity
   * @return accessTokenValidity
   */
  @javax.annotation.Nullable
  public Integer getAccessTokenValidity() {
    return accessTokenValidity;
  }

  public void setAccessTokenValidity(Integer accessTokenValidity) {
    this.accessTokenValidity = accessTokenValidity;
  }


  public UpdateUserPoolClientRequest idTokenValidity(Integer idTokenValidity) {
    this.idTokenValidity = idTokenValidity;
    return this;
  }

  /**
   * Get idTokenValidity
   * @return idTokenValidity
   */
  @javax.annotation.Nullable
  public Integer getIdTokenValidity() {
    return idTokenValidity;
  }

  public void setIdTokenValidity(Integer idTokenValidity) {
    this.idTokenValidity = idTokenValidity;
  }


  public UpdateUserPoolClientRequest tokenValidityUnits(UpdateUserPoolClientRequestTokenValidityUnits tokenValidityUnits) {
    this.tokenValidityUnits = tokenValidityUnits;
    return this;
  }

  /**
   * Get tokenValidityUnits
   * @return tokenValidityUnits
   */
  @javax.annotation.Nullable
  public UpdateUserPoolClientRequestTokenValidityUnits getTokenValidityUnits() {
    return tokenValidityUnits;
  }

  public void setTokenValidityUnits(UpdateUserPoolClientRequestTokenValidityUnits tokenValidityUnits) {
    this.tokenValidityUnits = tokenValidityUnits;
  }


  public UpdateUserPoolClientRequest readAttributes(List readAttributes) {
    this.readAttributes = readAttributes;
    return this;
  }

  /**
   * Get readAttributes
   * @return readAttributes
   */
  @javax.annotation.Nullable
  public List getReadAttributes() {
    return readAttributes;
  }

  public void setReadAttributes(List readAttributes) {
    this.readAttributes = readAttributes;
  }


  public UpdateUserPoolClientRequest writeAttributes(List writeAttributes) {
    this.writeAttributes = writeAttributes;
    return this;
  }

  /**
   * Get writeAttributes
   * @return writeAttributes
   */
  @javax.annotation.Nullable
  public List getWriteAttributes() {
    return writeAttributes;
  }

  public void setWriteAttributes(List writeAttributes) {
    this.writeAttributes = writeAttributes;
  }


  public UpdateUserPoolClientRequest explicitAuthFlows(List explicitAuthFlows) {
    this.explicitAuthFlows = explicitAuthFlows;
    return this;
  }

  /**
   * Get explicitAuthFlows
   * @return explicitAuthFlows
   */
  @javax.annotation.Nullable
  public List getExplicitAuthFlows() {
    return explicitAuthFlows;
  }

  public void setExplicitAuthFlows(List explicitAuthFlows) {
    this.explicitAuthFlows = explicitAuthFlows;
  }


  public UpdateUserPoolClientRequest supportedIdentityProviders(List supportedIdentityProviders) {
    this.supportedIdentityProviders = supportedIdentityProviders;
    return this;
  }

  /**
   * Get supportedIdentityProviders
   * @return supportedIdentityProviders
   */
  @javax.annotation.Nullable
  public List getSupportedIdentityProviders() {
    return supportedIdentityProviders;
  }

  public void setSupportedIdentityProviders(List supportedIdentityProviders) {
    this.supportedIdentityProviders = supportedIdentityProviders;
  }


  public UpdateUserPoolClientRequest callbackURLs(List callbackURLs) {
    this.callbackURLs = callbackURLs;
    return this;
  }

  /**
   * Get callbackURLs
   * @return callbackURLs
   */
  @javax.annotation.Nullable
  public List getCallbackURLs() {
    return callbackURLs;
  }

  public void setCallbackURLs(List callbackURLs) {
    this.callbackURLs = callbackURLs;
  }


  public UpdateUserPoolClientRequest logoutURLs(List logoutURLs) {
    this.logoutURLs = logoutURLs;
    return this;
  }

  /**
   * Get logoutURLs
   * @return logoutURLs
   */
  @javax.annotation.Nullable
  public List getLogoutURLs() {
    return logoutURLs;
  }

  public void setLogoutURLs(List logoutURLs) {
    this.logoutURLs = logoutURLs;
  }


  public UpdateUserPoolClientRequest defaultRedirectURI(String defaultRedirectURI) {
    this.defaultRedirectURI = defaultRedirectURI;
    return this;
  }

  /**
   * Get defaultRedirectURI
   * @return defaultRedirectURI
   */
  @javax.annotation.Nullable
  public String getDefaultRedirectURI() {
    return defaultRedirectURI;
  }

  public void setDefaultRedirectURI(String defaultRedirectURI) {
    this.defaultRedirectURI = defaultRedirectURI;
  }


  public UpdateUserPoolClientRequest allowedOAuthFlows(List allowedOAuthFlows) {
    this.allowedOAuthFlows = allowedOAuthFlows;
    return this;
  }

  /**
   * Get allowedOAuthFlows
   * @return allowedOAuthFlows
   */
  @javax.annotation.Nullable
  public List getAllowedOAuthFlows() {
    return allowedOAuthFlows;
  }

  public void setAllowedOAuthFlows(List allowedOAuthFlows) {
    this.allowedOAuthFlows = allowedOAuthFlows;
  }


  public UpdateUserPoolClientRequest allowedOAuthScopes(List allowedOAuthScopes) {
    this.allowedOAuthScopes = allowedOAuthScopes;
    return this;
  }

  /**
   * Get allowedOAuthScopes
   * @return allowedOAuthScopes
   */
  @javax.annotation.Nullable
  public List getAllowedOAuthScopes() {
    return allowedOAuthScopes;
  }

  public void setAllowedOAuthScopes(List allowedOAuthScopes) {
    this.allowedOAuthScopes = allowedOAuthScopes;
  }


  public UpdateUserPoolClientRequest allowedOAuthFlowsUserPoolClient(Boolean allowedOAuthFlowsUserPoolClient) {
    this.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient;
    return this;
  }

  /**
   * Get allowedOAuthFlowsUserPoolClient
   * @return allowedOAuthFlowsUserPoolClient
   */
  @javax.annotation.Nullable
  public Boolean getAllowedOAuthFlowsUserPoolClient() {
    return allowedOAuthFlowsUserPoolClient;
  }

  public void setAllowedOAuthFlowsUserPoolClient(Boolean allowedOAuthFlowsUserPoolClient) {
    this.allowedOAuthFlowsUserPoolClient = allowedOAuthFlowsUserPoolClient;
  }


  public UpdateUserPoolClientRequest analyticsConfiguration(UpdateUserPoolClientRequestAnalyticsConfiguration analyticsConfiguration) {
    this.analyticsConfiguration = analyticsConfiguration;
    return this;
  }

  /**
   * Get analyticsConfiguration
   * @return analyticsConfiguration
   */
  @javax.annotation.Nullable
  public UpdateUserPoolClientRequestAnalyticsConfiguration getAnalyticsConfiguration() {
    return analyticsConfiguration;
  }

  public void setAnalyticsConfiguration(UpdateUserPoolClientRequestAnalyticsConfiguration analyticsConfiguration) {
    this.analyticsConfiguration = analyticsConfiguration;
  }


  public UpdateUserPoolClientRequest preventUserExistenceErrors(PreventUserExistenceErrorTypes preventUserExistenceErrors) {
    this.preventUserExistenceErrors = preventUserExistenceErrors;
    return this;
  }

  /**
   * Get preventUserExistenceErrors
   * @return preventUserExistenceErrors
   */
  @javax.annotation.Nullable
  public PreventUserExistenceErrorTypes getPreventUserExistenceErrors() {
    return preventUserExistenceErrors;
  }

  public void setPreventUserExistenceErrors(PreventUserExistenceErrorTypes preventUserExistenceErrors) {
    this.preventUserExistenceErrors = preventUserExistenceErrors;
  }


  public UpdateUserPoolClientRequest enableTokenRevocation(Boolean enableTokenRevocation) {
    this.enableTokenRevocation = enableTokenRevocation;
    return this;
  }

  /**
   * Get enableTokenRevocation
   * @return enableTokenRevocation
   */
  @javax.annotation.Nullable
  public Boolean getEnableTokenRevocation() {
    return enableTokenRevocation;
  }

  public void setEnableTokenRevocation(Boolean enableTokenRevocation) {
    this.enableTokenRevocation = enableTokenRevocation;
  }


  public UpdateUserPoolClientRequest enablePropagateAdditionalUserContextData(Boolean enablePropagateAdditionalUserContextData) {
    this.enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData;
    return this;
  }

  /**
   * Get enablePropagateAdditionalUserContextData
   * @return enablePropagateAdditionalUserContextData
   */
  @javax.annotation.Nullable
  public Boolean getEnablePropagateAdditionalUserContextData() {
    return enablePropagateAdditionalUserContextData;
  }

  public void setEnablePropagateAdditionalUserContextData(Boolean enablePropagateAdditionalUserContextData) {
    this.enablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData;
  }


  public UpdateUserPoolClientRequest authSessionValidity(Integer authSessionValidity) {
    this.authSessionValidity = authSessionValidity;
    return this;
  }

  /**
   * Get authSessionValidity
   * @return authSessionValidity
   */
  @javax.annotation.Nullable
  public Integer getAuthSessionValidity() {
    return authSessionValidity;
  }

  public void setAuthSessionValidity(Integer authSessionValidity) {
    this.authSessionValidity = authSessionValidity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateUserPoolClientRequest updateUserPoolClientRequest = (UpdateUserPoolClientRequest) o;
    return Objects.equals(this.userPoolId, updateUserPoolClientRequest.userPoolId) &&
        Objects.equals(this.clientId, updateUserPoolClientRequest.clientId) &&
        Objects.equals(this.clientName, updateUserPoolClientRequest.clientName) &&
        Objects.equals(this.refreshTokenValidity, updateUserPoolClientRequest.refreshTokenValidity) &&
        Objects.equals(this.accessTokenValidity, updateUserPoolClientRequest.accessTokenValidity) &&
        Objects.equals(this.idTokenValidity, updateUserPoolClientRequest.idTokenValidity) &&
        Objects.equals(this.tokenValidityUnits, updateUserPoolClientRequest.tokenValidityUnits) &&
        Objects.equals(this.readAttributes, updateUserPoolClientRequest.readAttributes) &&
        Objects.equals(this.writeAttributes, updateUserPoolClientRequest.writeAttributes) &&
        Objects.equals(this.explicitAuthFlows, updateUserPoolClientRequest.explicitAuthFlows) &&
        Objects.equals(this.supportedIdentityProviders, updateUserPoolClientRequest.supportedIdentityProviders) &&
        Objects.equals(this.callbackURLs, updateUserPoolClientRequest.callbackURLs) &&
        Objects.equals(this.logoutURLs, updateUserPoolClientRequest.logoutURLs) &&
        Objects.equals(this.defaultRedirectURI, updateUserPoolClientRequest.defaultRedirectURI) &&
        Objects.equals(this.allowedOAuthFlows, updateUserPoolClientRequest.allowedOAuthFlows) &&
        Objects.equals(this.allowedOAuthScopes, updateUserPoolClientRequest.allowedOAuthScopes) &&
        Objects.equals(this.allowedOAuthFlowsUserPoolClient, updateUserPoolClientRequest.allowedOAuthFlowsUserPoolClient) &&
        Objects.equals(this.analyticsConfiguration, updateUserPoolClientRequest.analyticsConfiguration) &&
        Objects.equals(this.preventUserExistenceErrors, updateUserPoolClientRequest.preventUserExistenceErrors) &&
        Objects.equals(this.enableTokenRevocation, updateUserPoolClientRequest.enableTokenRevocation) &&
        Objects.equals(this.enablePropagateAdditionalUserContextData, updateUserPoolClientRequest.enablePropagateAdditionalUserContextData) &&
        Objects.equals(this.authSessionValidity, updateUserPoolClientRequest.authSessionValidity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userPoolId, clientId, clientName, refreshTokenValidity, accessTokenValidity, idTokenValidity, tokenValidityUnits, readAttributes, writeAttributes, explicitAuthFlows, supportedIdentityProviders, callbackURLs, logoutURLs, defaultRedirectURI, allowedOAuthFlows, allowedOAuthScopes, allowedOAuthFlowsUserPoolClient, analyticsConfiguration, preventUserExistenceErrors, enableTokenRevocation, enablePropagateAdditionalUserContextData, authSessionValidity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateUserPoolClientRequest {\n");
    sb.append("    userPoolId: ").append(toIndentedString(userPoolId)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    refreshTokenValidity: ").append(toIndentedString(refreshTokenValidity)).append("\n");
    sb.append("    accessTokenValidity: ").append(toIndentedString(accessTokenValidity)).append("\n");
    sb.append("    idTokenValidity: ").append(toIndentedString(idTokenValidity)).append("\n");
    sb.append("    tokenValidityUnits: ").append(toIndentedString(tokenValidityUnits)).append("\n");
    sb.append("    readAttributes: ").append(toIndentedString(readAttributes)).append("\n");
    sb.append("    writeAttributes: ").append(toIndentedString(writeAttributes)).append("\n");
    sb.append("    explicitAuthFlows: ").append(toIndentedString(explicitAuthFlows)).append("\n");
    sb.append("    supportedIdentityProviders: ").append(toIndentedString(supportedIdentityProviders)).append("\n");
    sb.append("    callbackURLs: ").append(toIndentedString(callbackURLs)).append("\n");
    sb.append("    logoutURLs: ").append(toIndentedString(logoutURLs)).append("\n");
    sb.append("    defaultRedirectURI: ").append(toIndentedString(defaultRedirectURI)).append("\n");
    sb.append("    allowedOAuthFlows: ").append(toIndentedString(allowedOAuthFlows)).append("\n");
    sb.append("    allowedOAuthScopes: ").append(toIndentedString(allowedOAuthScopes)).append("\n");
    sb.append("    allowedOAuthFlowsUserPoolClient: ").append(toIndentedString(allowedOAuthFlowsUserPoolClient)).append("\n");
    sb.append("    analyticsConfiguration: ").append(toIndentedString(analyticsConfiguration)).append("\n");
    sb.append("    preventUserExistenceErrors: ").append(toIndentedString(preventUserExistenceErrors)).append("\n");
    sb.append("    enableTokenRevocation: ").append(toIndentedString(enableTokenRevocation)).append("\n");
    sb.append("    enablePropagateAdditionalUserContextData: ").append(toIndentedString(enablePropagateAdditionalUserContextData)).append("\n");
    sb.append("    authSessionValidity: ").append(toIndentedString(authSessionValidity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UserPoolId");
    openapiFields.add("ClientId");
    openapiFields.add("ClientName");
    openapiFields.add("RefreshTokenValidity");
    openapiFields.add("AccessTokenValidity");
    openapiFields.add("IdTokenValidity");
    openapiFields.add("TokenValidityUnits");
    openapiFields.add("ReadAttributes");
    openapiFields.add("WriteAttributes");
    openapiFields.add("ExplicitAuthFlows");
    openapiFields.add("SupportedIdentityProviders");
    openapiFields.add("CallbackURLs");
    openapiFields.add("LogoutURLs");
    openapiFields.add("DefaultRedirectURI");
    openapiFields.add("AllowedOAuthFlows");
    openapiFields.add("AllowedOAuthScopes");
    openapiFields.add("AllowedOAuthFlowsUserPoolClient");
    openapiFields.add("AnalyticsConfiguration");
    openapiFields.add("PreventUserExistenceErrors");
    openapiFields.add("EnableTokenRevocation");
    openapiFields.add("EnablePropagateAdditionalUserContextData");
    openapiFields.add("AuthSessionValidity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("UserPoolId");
    openapiRequiredFields.add("ClientId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateUserPoolClientRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateUserPoolClientRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateUserPoolClientRequest is not found in the empty JSON string", UpdateUserPoolClientRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateUserPoolClientRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateUserPoolClientRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateUserPoolClientRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `UserPoolId`
      String.validateJsonElement(jsonObj.get("UserPoolId"));
      // validate the required field `ClientId`
      String.validateJsonElement(jsonObj.get("ClientId"));
      // validate the optional field `ClientName`
      if (jsonObj.get("ClientName") != null && !jsonObj.get("ClientName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientName"));
      }
      // validate the optional field `RefreshTokenValidity`
      if (jsonObj.get("RefreshTokenValidity") != null && !jsonObj.get("RefreshTokenValidity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RefreshTokenValidity"));
      }
      // validate the optional field `AccessTokenValidity`
      if (jsonObj.get("AccessTokenValidity") != null && !jsonObj.get("AccessTokenValidity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AccessTokenValidity"));
      }
      // validate the optional field `IdTokenValidity`
      if (jsonObj.get("IdTokenValidity") != null && !jsonObj.get("IdTokenValidity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("IdTokenValidity"));
      }
      // validate the optional field `TokenValidityUnits`
      if (jsonObj.get("TokenValidityUnits") != null && !jsonObj.get("TokenValidityUnits").isJsonNull()) {
        UpdateUserPoolClientRequestTokenValidityUnits.validateJsonElement(jsonObj.get("TokenValidityUnits"));
      }
      // validate the optional field `ReadAttributes`
      if (jsonObj.get("ReadAttributes") != null && !jsonObj.get("ReadAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReadAttributes"));
      }
      // validate the optional field `WriteAttributes`
      if (jsonObj.get("WriteAttributes") != null && !jsonObj.get("WriteAttributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("WriteAttributes"));
      }
      // validate the optional field `ExplicitAuthFlows`
      if (jsonObj.get("ExplicitAuthFlows") != null && !jsonObj.get("ExplicitAuthFlows").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExplicitAuthFlows"));
      }
      // validate the optional field `SupportedIdentityProviders`
      if (jsonObj.get("SupportedIdentityProviders") != null && !jsonObj.get("SupportedIdentityProviders").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedIdentityProviders"));
      }
      // validate the optional field `CallbackURLs`
      if (jsonObj.get("CallbackURLs") != null && !jsonObj.get("CallbackURLs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CallbackURLs"));
      }
      // validate the optional field `LogoutURLs`
      if (jsonObj.get("LogoutURLs") != null && !jsonObj.get("LogoutURLs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LogoutURLs"));
      }
      // validate the optional field `DefaultRedirectURI`
      if (jsonObj.get("DefaultRedirectURI") != null && !jsonObj.get("DefaultRedirectURI").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultRedirectURI"));
      }
      // validate the optional field `AllowedOAuthFlows`
      if (jsonObj.get("AllowedOAuthFlows") != null && !jsonObj.get("AllowedOAuthFlows").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AllowedOAuthFlows"));
      }
      // validate the optional field `AllowedOAuthScopes`
      if (jsonObj.get("AllowedOAuthScopes") != null && !jsonObj.get("AllowedOAuthScopes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AllowedOAuthScopes"));
      }
      // validate the optional field `AllowedOAuthFlowsUserPoolClient`
      if (jsonObj.get("AllowedOAuthFlowsUserPoolClient") != null && !jsonObj.get("AllowedOAuthFlowsUserPoolClient").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AllowedOAuthFlowsUserPoolClient"));
      }
      // validate the optional field `AnalyticsConfiguration`
      if (jsonObj.get("AnalyticsConfiguration") != null && !jsonObj.get("AnalyticsConfiguration").isJsonNull()) {
        UpdateUserPoolClientRequestAnalyticsConfiguration.validateJsonElement(jsonObj.get("AnalyticsConfiguration"));
      }
      // validate the optional field `PreventUserExistenceErrors`
      if (jsonObj.get("PreventUserExistenceErrors") != null && !jsonObj.get("PreventUserExistenceErrors").isJsonNull()) {
        PreventUserExistenceErrorTypes.validateJsonElement(jsonObj.get("PreventUserExistenceErrors"));
      }
      // validate the optional field `EnableTokenRevocation`
      if (jsonObj.get("EnableTokenRevocation") != null && !jsonObj.get("EnableTokenRevocation").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableTokenRevocation"));
      }
      // validate the optional field `EnablePropagateAdditionalUserContextData`
      if (jsonObj.get("EnablePropagateAdditionalUserContextData") != null && !jsonObj.get("EnablePropagateAdditionalUserContextData").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnablePropagateAdditionalUserContextData"));
      }
      // validate the optional field `AuthSessionValidity`
      if (jsonObj.get("AuthSessionValidity") != null && !jsonObj.get("AuthSessionValidity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AuthSessionValidity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateUserPoolClientRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateUserPoolClientRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateUserPoolClientRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateUserPoolClientRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateUserPoolClientRequest>() {
           @Override
           public void write(JsonWriter out, UpdateUserPoolClientRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateUserPoolClientRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateUserPoolClientRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateUserPoolClientRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateUserPoolClientRequest
   */
  public static UpdateUserPoolClientRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateUserPoolClientRequest.class);
  }

  /**
   * Convert an instance of UpdateUserPoolClientRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

