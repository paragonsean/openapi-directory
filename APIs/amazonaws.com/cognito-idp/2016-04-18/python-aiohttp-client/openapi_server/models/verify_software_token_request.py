# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VerifySoftwareTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, session: str=None, user_code: str=None, friendly_device_name: str=None):
        """VerifySoftwareTokenRequest - a model defined in OpenAPI

        :param access_token: The access_token of this VerifySoftwareTokenRequest.
        :param session: The session of this VerifySoftwareTokenRequest.
        :param user_code: The user_code of this VerifySoftwareTokenRequest.
        :param friendly_device_name: The friendly_device_name of this VerifySoftwareTokenRequest.
        """
        self.openapi_types = {
            'access_token': str,
            'session': str,
            'user_code': str,
            'friendly_device_name': str
        }

        self.attribute_map = {
            'access_token': 'AccessToken',
            'session': 'Session',
            'user_code': 'UserCode',
            'friendly_device_name': 'FriendlyDeviceName'
        }

        self._access_token = access_token
        self._session = session
        self._user_code = user_code
        self._friendly_device_name = friendly_device_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifySoftwareTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifySoftwareTokenRequest of this VerifySoftwareTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this VerifySoftwareTokenRequest.


        :return: The access_token of this VerifySoftwareTokenRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this VerifySoftwareTokenRequest.


        :param access_token: The access_token of this VerifySoftwareTokenRequest.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def session(self):
        """Gets the session of this VerifySoftwareTokenRequest.


        :return: The session of this VerifySoftwareTokenRequest.
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this VerifySoftwareTokenRequest.


        :param session: The session of this VerifySoftwareTokenRequest.
        :type session: str
        """

        self._session = session

    @property
    def user_code(self):
        """Gets the user_code of this VerifySoftwareTokenRequest.


        :return: The user_code of this VerifySoftwareTokenRequest.
        :rtype: str
        """
        return self._user_code

    @user_code.setter
    def user_code(self, user_code):
        """Sets the user_code of this VerifySoftwareTokenRequest.


        :param user_code: The user_code of this VerifySoftwareTokenRequest.
        :type user_code: str
        """
        if user_code is None:
            raise ValueError("Invalid value for `user_code`, must not be `None`")

        self._user_code = user_code

    @property
    def friendly_device_name(self):
        """Gets the friendly_device_name of this VerifySoftwareTokenRequest.


        :return: The friendly_device_name of this VerifySoftwareTokenRequest.
        :rtype: str
        """
        return self._friendly_device_name

    @friendly_device_name.setter
    def friendly_device_name(self, friendly_device_name):
        """Sets the friendly_device_name of this VerifySoftwareTokenRequest.


        :param friendly_device_name: The friendly_device_name of this VerifySoftwareTokenRequest.
        :type friendly_device_name: str
        """

        self._friendly_device_name = friendly_device_name
