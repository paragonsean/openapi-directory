# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_initiate_auth_request_context_data import AdminInitiateAuthRequestContextData
from openapi_server.models.admin_respond_to_auth_challenge_request_analytics_metadata import AdminRespondToAuthChallengeRequestAnalyticsMetadata
from openapi_server.models.challenge_name_type import ChallengeNameType
from openapi_server import util


class AdminRespondToAuthChallengeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool_id: str=None, client_id: str=None, challenge_name: ChallengeNameType=None, challenge_responses: Dict=None, session: str=None, analytics_metadata: AdminRespondToAuthChallengeRequestAnalyticsMetadata=None, context_data: AdminInitiateAuthRequestContextData=None, client_metadata: Dict=None):
        """AdminRespondToAuthChallengeRequest - a model defined in OpenAPI

        :param user_pool_id: The user_pool_id of this AdminRespondToAuthChallengeRequest.
        :param client_id: The client_id of this AdminRespondToAuthChallengeRequest.
        :param challenge_name: The challenge_name of this AdminRespondToAuthChallengeRequest.
        :param challenge_responses: The challenge_responses of this AdminRespondToAuthChallengeRequest.
        :param session: The session of this AdminRespondToAuthChallengeRequest.
        :param analytics_metadata: The analytics_metadata of this AdminRespondToAuthChallengeRequest.
        :param context_data: The context_data of this AdminRespondToAuthChallengeRequest.
        :param client_metadata: The client_metadata of this AdminRespondToAuthChallengeRequest.
        """
        self.openapi_types = {
            'user_pool_id': str,
            'client_id': str,
            'challenge_name': ChallengeNameType,
            'challenge_responses': Dict,
            'session': str,
            'analytics_metadata': AdminRespondToAuthChallengeRequestAnalyticsMetadata,
            'context_data': AdminInitiateAuthRequestContextData,
            'client_metadata': Dict
        }

        self.attribute_map = {
            'user_pool_id': 'UserPoolId',
            'client_id': 'ClientId',
            'challenge_name': 'ChallengeName',
            'challenge_responses': 'ChallengeResponses',
            'session': 'Session',
            'analytics_metadata': 'AnalyticsMetadata',
            'context_data': 'ContextData',
            'client_metadata': 'ClientMetadata'
        }

        self._user_pool_id = user_pool_id
        self._client_id = client_id
        self._challenge_name = challenge_name
        self._challenge_responses = challenge_responses
        self._session = session
        self._analytics_metadata = analytics_metadata
        self._context_data = context_data
        self._client_metadata = client_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminRespondToAuthChallengeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminRespondToAuthChallengeRequest of this AdminRespondToAuthChallengeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this AdminRespondToAuthChallengeRequest.


        :return: The user_pool_id of this AdminRespondToAuthChallengeRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this AdminRespondToAuthChallengeRequest.


        :param user_pool_id: The user_pool_id of this AdminRespondToAuthChallengeRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def client_id(self):
        """Gets the client_id of this AdminRespondToAuthChallengeRequest.


        :return: The client_id of this AdminRespondToAuthChallengeRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AdminRespondToAuthChallengeRequest.


        :param client_id: The client_id of this AdminRespondToAuthChallengeRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def challenge_name(self):
        """Gets the challenge_name of this AdminRespondToAuthChallengeRequest.


        :return: The challenge_name of this AdminRespondToAuthChallengeRequest.
        :rtype: ChallengeNameType
        """
        return self._challenge_name

    @challenge_name.setter
    def challenge_name(self, challenge_name):
        """Sets the challenge_name of this AdminRespondToAuthChallengeRequest.


        :param challenge_name: The challenge_name of this AdminRespondToAuthChallengeRequest.
        :type challenge_name: ChallengeNameType
        """
        if challenge_name is None:
            raise ValueError("Invalid value for `challenge_name`, must not be `None`")

        self._challenge_name = challenge_name

    @property
    def challenge_responses(self):
        """Gets the challenge_responses of this AdminRespondToAuthChallengeRequest.


        :return: The challenge_responses of this AdminRespondToAuthChallengeRequest.
        :rtype: Dict
        """
        return self._challenge_responses

    @challenge_responses.setter
    def challenge_responses(self, challenge_responses):
        """Sets the challenge_responses of this AdminRespondToAuthChallengeRequest.


        :param challenge_responses: The challenge_responses of this AdminRespondToAuthChallengeRequest.
        :type challenge_responses: Dict
        """

        self._challenge_responses = challenge_responses

    @property
    def session(self):
        """Gets the session of this AdminRespondToAuthChallengeRequest.


        :return: The session of this AdminRespondToAuthChallengeRequest.
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this AdminRespondToAuthChallengeRequest.


        :param session: The session of this AdminRespondToAuthChallengeRequest.
        :type session: str
        """

        self._session = session

    @property
    def analytics_metadata(self):
        """Gets the analytics_metadata of this AdminRespondToAuthChallengeRequest.


        :return: The analytics_metadata of this AdminRespondToAuthChallengeRequest.
        :rtype: AdminRespondToAuthChallengeRequestAnalyticsMetadata
        """
        return self._analytics_metadata

    @analytics_metadata.setter
    def analytics_metadata(self, analytics_metadata):
        """Sets the analytics_metadata of this AdminRespondToAuthChallengeRequest.


        :param analytics_metadata: The analytics_metadata of this AdminRespondToAuthChallengeRequest.
        :type analytics_metadata: AdminRespondToAuthChallengeRequestAnalyticsMetadata
        """

        self._analytics_metadata = analytics_metadata

    @property
    def context_data(self):
        """Gets the context_data of this AdminRespondToAuthChallengeRequest.


        :return: The context_data of this AdminRespondToAuthChallengeRequest.
        :rtype: AdminInitiateAuthRequestContextData
        """
        return self._context_data

    @context_data.setter
    def context_data(self, context_data):
        """Sets the context_data of this AdminRespondToAuthChallengeRequest.


        :param context_data: The context_data of this AdminRespondToAuthChallengeRequest.
        :type context_data: AdminInitiateAuthRequestContextData
        """

        self._context_data = context_data

    @property
    def client_metadata(self):
        """Gets the client_metadata of this AdminRespondToAuthChallengeRequest.


        :return: The client_metadata of this AdminRespondToAuthChallengeRequest.
        :rtype: Dict
        """
        return self._client_metadata

    @client_metadata.setter
    def client_metadata(self, client_metadata):
        """Sets the client_metadata of this AdminRespondToAuthChallengeRequest.


        :param client_metadata: The client_metadata of this AdminRespondToAuthChallengeRequest.
        :type client_metadata: Dict
        """

        self._client_metadata = client_metadata
