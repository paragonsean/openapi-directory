# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.risk_decision_type import RiskDecisionType
from openapi_server.models.risk_level_type import RiskLevelType
from openapi_server import util


class AuthEventTypeEventRisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, risk_decision: RiskDecisionType=None, risk_level: RiskLevelType=None, compromised_credentials_detected: bool=None):
        """AuthEventTypeEventRisk - a model defined in OpenAPI

        :param risk_decision: The risk_decision of this AuthEventTypeEventRisk.
        :param risk_level: The risk_level of this AuthEventTypeEventRisk.
        :param compromised_credentials_detected: The compromised_credentials_detected of this AuthEventTypeEventRisk.
        """
        self.openapi_types = {
            'risk_decision': RiskDecisionType,
            'risk_level': RiskLevelType,
            'compromised_credentials_detected': bool
        }

        self.attribute_map = {
            'risk_decision': 'RiskDecision',
            'risk_level': 'RiskLevel',
            'compromised_credentials_detected': 'CompromisedCredentialsDetected'
        }

        self._risk_decision = risk_decision
        self._risk_level = risk_level
        self._compromised_credentials_detected = compromised_credentials_detected

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthEventTypeEventRisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthEventType_EventRisk of this AuthEventTypeEventRisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def risk_decision(self):
        """Gets the risk_decision of this AuthEventTypeEventRisk.


        :return: The risk_decision of this AuthEventTypeEventRisk.
        :rtype: RiskDecisionType
        """
        return self._risk_decision

    @risk_decision.setter
    def risk_decision(self, risk_decision):
        """Sets the risk_decision of this AuthEventTypeEventRisk.


        :param risk_decision: The risk_decision of this AuthEventTypeEventRisk.
        :type risk_decision: RiskDecisionType
        """

        self._risk_decision = risk_decision

    @property
    def risk_level(self):
        """Gets the risk_level of this AuthEventTypeEventRisk.


        :return: The risk_level of this AuthEventTypeEventRisk.
        :rtype: RiskLevelType
        """
        return self._risk_level

    @risk_level.setter
    def risk_level(self, risk_level):
        """Sets the risk_level of this AuthEventTypeEventRisk.


        :param risk_level: The risk_level of this AuthEventTypeEventRisk.
        :type risk_level: RiskLevelType
        """

        self._risk_level = risk_level

    @property
    def compromised_credentials_detected(self):
        """Gets the compromised_credentials_detected of this AuthEventTypeEventRisk.


        :return: The compromised_credentials_detected of this AuthEventTypeEventRisk.
        :rtype: bool
        """
        return self._compromised_credentials_detected

    @compromised_credentials_detected.setter
    def compromised_credentials_detected(self, compromised_credentials_detected):
        """Sets the compromised_credentials_detected of this AuthEventTypeEventRisk.


        :param compromised_credentials_detected: The compromised_credentials_detected of this AuthEventTypeEventRisk.
        :type compromised_credentials_detected: bool
        """

        self._compromised_credentials_detected = compromised_credentials_detected
