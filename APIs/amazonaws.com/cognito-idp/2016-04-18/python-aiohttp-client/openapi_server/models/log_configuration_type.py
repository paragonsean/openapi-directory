# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_source_name import EventSourceName
from openapi_server.models.log_configuration_type_cloud_watch_logs_configuration import LogConfigurationTypeCloudWatchLogsConfiguration
from openapi_server.models.log_level import LogLevel
from openapi_server import util


class LogConfigurationType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_level: LogLevel=None, event_source: EventSourceName=None, cloud_watch_logs_configuration: LogConfigurationTypeCloudWatchLogsConfiguration=None):
        """LogConfigurationType - a model defined in OpenAPI

        :param log_level: The log_level of this LogConfigurationType.
        :param event_source: The event_source of this LogConfigurationType.
        :param cloud_watch_logs_configuration: The cloud_watch_logs_configuration of this LogConfigurationType.
        """
        self.openapi_types = {
            'log_level': LogLevel,
            'event_source': EventSourceName,
            'cloud_watch_logs_configuration': LogConfigurationTypeCloudWatchLogsConfiguration
        }

        self.attribute_map = {
            'log_level': 'LogLevel',
            'event_source': 'EventSource',
            'cloud_watch_logs_configuration': 'CloudWatchLogsConfiguration'
        }

        self._log_level = log_level
        self._event_source = event_source
        self._cloud_watch_logs_configuration = cloud_watch_logs_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogConfigurationType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogConfigurationType of this LogConfigurationType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_level(self):
        """Gets the log_level of this LogConfigurationType.


        :return: The log_level of this LogConfigurationType.
        :rtype: LogLevel
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this LogConfigurationType.


        :param log_level: The log_level of this LogConfigurationType.
        :type log_level: LogLevel
        """
        if log_level is None:
            raise ValueError("Invalid value for `log_level`, must not be `None`")

        self._log_level = log_level

    @property
    def event_source(self):
        """Gets the event_source of this LogConfigurationType.


        :return: The event_source of this LogConfigurationType.
        :rtype: EventSourceName
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this LogConfigurationType.


        :param event_source: The event_source of this LogConfigurationType.
        :type event_source: EventSourceName
        """
        if event_source is None:
            raise ValueError("Invalid value for `event_source`, must not be `None`")

        self._event_source = event_source

    @property
    def cloud_watch_logs_configuration(self):
        """Gets the cloud_watch_logs_configuration of this LogConfigurationType.


        :return: The cloud_watch_logs_configuration of this LogConfigurationType.
        :rtype: LogConfigurationTypeCloudWatchLogsConfiguration
        """
        return self._cloud_watch_logs_configuration

    @cloud_watch_logs_configuration.setter
    def cloud_watch_logs_configuration(self, cloud_watch_logs_configuration):
        """Sets the cloud_watch_logs_configuration of this LogConfigurationType.


        :param cloud_watch_logs_configuration: The cloud_watch_logs_configuration of this LogConfigurationType.
        :type cloud_watch_logs_configuration: LogConfigurationTypeCloudWatchLogsConfiguration
        """

        self._cloud_watch_logs_configuration = cloud_watch_logs_configuration
