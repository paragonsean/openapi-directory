# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.confirm_forgot_password_request_user_context_data import ConfirmForgotPasswordRequestUserContextData
from openapi_server.models.forgot_password_request_analytics_metadata import ForgotPasswordRequestAnalyticsMetadata
from openapi_server import util


class ForgotPasswordRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, secret_hash: str=None, user_context_data: ConfirmForgotPasswordRequestUserContextData=None, username: str=None, analytics_metadata: ForgotPasswordRequestAnalyticsMetadata=None, client_metadata: Dict=None):
        """ForgotPasswordRequest - a model defined in OpenAPI

        :param client_id: The client_id of this ForgotPasswordRequest.
        :param secret_hash: The secret_hash of this ForgotPasswordRequest.
        :param user_context_data: The user_context_data of this ForgotPasswordRequest.
        :param username: The username of this ForgotPasswordRequest.
        :param analytics_metadata: The analytics_metadata of this ForgotPasswordRequest.
        :param client_metadata: The client_metadata of this ForgotPasswordRequest.
        """
        self.openapi_types = {
            'client_id': str,
            'secret_hash': str,
            'user_context_data': ConfirmForgotPasswordRequestUserContextData,
            'username': str,
            'analytics_metadata': ForgotPasswordRequestAnalyticsMetadata,
            'client_metadata': Dict
        }

        self.attribute_map = {
            'client_id': 'ClientId',
            'secret_hash': 'SecretHash',
            'user_context_data': 'UserContextData',
            'username': 'Username',
            'analytics_metadata': 'AnalyticsMetadata',
            'client_metadata': 'ClientMetadata'
        }

        self._client_id = client_id
        self._secret_hash = secret_hash
        self._user_context_data = user_context_data
        self._username = username
        self._analytics_metadata = analytics_metadata
        self._client_metadata = client_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForgotPasswordRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForgotPasswordRequest of this ForgotPasswordRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this ForgotPasswordRequest.


        :return: The client_id of this ForgotPasswordRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ForgotPasswordRequest.


        :param client_id: The client_id of this ForgotPasswordRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def secret_hash(self):
        """Gets the secret_hash of this ForgotPasswordRequest.


        :return: The secret_hash of this ForgotPasswordRequest.
        :rtype: str
        """
        return self._secret_hash

    @secret_hash.setter
    def secret_hash(self, secret_hash):
        """Sets the secret_hash of this ForgotPasswordRequest.


        :param secret_hash: The secret_hash of this ForgotPasswordRequest.
        :type secret_hash: str
        """

        self._secret_hash = secret_hash

    @property
    def user_context_data(self):
        """Gets the user_context_data of this ForgotPasswordRequest.


        :return: The user_context_data of this ForgotPasswordRequest.
        :rtype: ConfirmForgotPasswordRequestUserContextData
        """
        return self._user_context_data

    @user_context_data.setter
    def user_context_data(self, user_context_data):
        """Sets the user_context_data of this ForgotPasswordRequest.


        :param user_context_data: The user_context_data of this ForgotPasswordRequest.
        :type user_context_data: ConfirmForgotPasswordRequestUserContextData
        """

        self._user_context_data = user_context_data

    @property
    def username(self):
        """Gets the username of this ForgotPasswordRequest.


        :return: The username of this ForgotPasswordRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ForgotPasswordRequest.


        :param username: The username of this ForgotPasswordRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def analytics_metadata(self):
        """Gets the analytics_metadata of this ForgotPasswordRequest.


        :return: The analytics_metadata of this ForgotPasswordRequest.
        :rtype: ForgotPasswordRequestAnalyticsMetadata
        """
        return self._analytics_metadata

    @analytics_metadata.setter
    def analytics_metadata(self, analytics_metadata):
        """Sets the analytics_metadata of this ForgotPasswordRequest.


        :param analytics_metadata: The analytics_metadata of this ForgotPasswordRequest.
        :type analytics_metadata: ForgotPasswordRequestAnalyticsMetadata
        """

        self._analytics_metadata = analytics_metadata

    @property
    def client_metadata(self):
        """Gets the client_metadata of this ForgotPasswordRequest.


        :return: The client_metadata of this ForgotPasswordRequest.
        :rtype: Dict
        """
        return self._client_metadata

    @client_metadata.setter
    def client_metadata(self, client_metadata):
        """Sets the client_metadata of this ForgotPasswordRequest.


        :param client_metadata: The client_metadata of this ForgotPasswordRequest.
        :type client_metadata: Dict
        """

        self._client_metadata = client_metadata
