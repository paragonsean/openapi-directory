# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_identity_provider_response_identity_provider import DescribeIdentityProviderResponseIdentityProvider
from openapi_server import util


class DescribeIdentityProviderResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_provider: DescribeIdentityProviderResponseIdentityProvider=None):
        """DescribeIdentityProviderResponse - a model defined in OpenAPI

        :param identity_provider: The identity_provider of this DescribeIdentityProviderResponse.
        """
        self.openapi_types = {
            'identity_provider': DescribeIdentityProviderResponseIdentityProvider
        }

        self.attribute_map = {
            'identity_provider': 'IdentityProvider'
        }

        self._identity_provider = identity_provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeIdentityProviderResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeIdentityProviderResponse of this DescribeIdentityProviderResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_provider(self):
        """Gets the identity_provider of this DescribeIdentityProviderResponse.


        :return: The identity_provider of this DescribeIdentityProviderResponse.
        :rtype: DescribeIdentityProviderResponseIdentityProvider
        """
        return self._identity_provider

    @identity_provider.setter
    def identity_provider(self, identity_provider):
        """Sets the identity_provider of this DescribeIdentityProviderResponse.


        :param identity_provider: The identity_provider of this DescribeIdentityProviderResponse.
        :type identity_provider: DescribeIdentityProviderResponseIdentityProvider
        """
        if identity_provider is None:
            raise ValueError("Invalid value for `identity_provider`, must not be `None`")

        self._identity_provider = identity_provider
