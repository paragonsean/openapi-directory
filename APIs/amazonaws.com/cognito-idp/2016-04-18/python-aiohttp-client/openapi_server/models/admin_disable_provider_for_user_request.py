# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_disable_provider_for_user_request_user import AdminDisableProviderForUserRequestUser
from openapi_server import util


class AdminDisableProviderForUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool_id: str=None, user: AdminDisableProviderForUserRequestUser=None):
        """AdminDisableProviderForUserRequest - a model defined in OpenAPI

        :param user_pool_id: The user_pool_id of this AdminDisableProviderForUserRequest.
        :param user: The user of this AdminDisableProviderForUserRequest.
        """
        self.openapi_types = {
            'user_pool_id': str,
            'user': AdminDisableProviderForUserRequestUser
        }

        self.attribute_map = {
            'user_pool_id': 'UserPoolId',
            'user': 'User'
        }

        self._user_pool_id = user_pool_id
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminDisableProviderForUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminDisableProviderForUserRequest of this AdminDisableProviderForUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this AdminDisableProviderForUserRequest.


        :return: The user_pool_id of this AdminDisableProviderForUserRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this AdminDisableProviderForUserRequest.


        :param user_pool_id: The user_pool_id of this AdminDisableProviderForUserRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def user(self):
        """Gets the user of this AdminDisableProviderForUserRequest.


        :return: The user of this AdminDisableProviderForUserRequest.
        :rtype: AdminDisableProviderForUserRequestUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AdminDisableProviderForUserRequest.


        :param user: The user of this AdminDisableProviderForUserRequest.
        :type user: AdminDisableProviderForUserRequestUser
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
