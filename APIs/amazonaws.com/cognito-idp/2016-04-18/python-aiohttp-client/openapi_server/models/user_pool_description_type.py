# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status_type import StatusType
from openapi_server.models.user_pool_description_type_lambda_config import UserPoolDescriptionTypeLambdaConfig
from openapi_server import util


class UserPoolDescriptionType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, lambda_config: UserPoolDescriptionTypeLambdaConfig=None, status: StatusType=None, last_modified_date: datetime=None, creation_date: datetime=None):
        """UserPoolDescriptionType - a model defined in OpenAPI

        :param id: The id of this UserPoolDescriptionType.
        :param name: The name of this UserPoolDescriptionType.
        :param lambda_config: The lambda_config of this UserPoolDescriptionType.
        :param status: The status of this UserPoolDescriptionType.
        :param last_modified_date: The last_modified_date of this UserPoolDescriptionType.
        :param creation_date: The creation_date of this UserPoolDescriptionType.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'lambda_config': UserPoolDescriptionTypeLambdaConfig,
            'status': StatusType,
            'last_modified_date': datetime,
            'creation_date': datetime
        }

        self.attribute_map = {
            'id': 'Id',
            'name': 'Name',
            'lambda_config': 'LambdaConfig',
            'status': 'Status',
            'last_modified_date': 'LastModifiedDate',
            'creation_date': 'CreationDate'
        }

        self._id = id
        self._name = name
        self._lambda_config = lambda_config
        self._status = status
        self._last_modified_date = last_modified_date
        self._creation_date = creation_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserPoolDescriptionType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserPoolDescriptionType of this UserPoolDescriptionType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UserPoolDescriptionType.


        :return: The id of this UserPoolDescriptionType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserPoolDescriptionType.


        :param id: The id of this UserPoolDescriptionType.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UserPoolDescriptionType.


        :return: The name of this UserPoolDescriptionType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserPoolDescriptionType.


        :param name: The name of this UserPoolDescriptionType.
        :type name: str
        """

        self._name = name

    @property
    def lambda_config(self):
        """Gets the lambda_config of this UserPoolDescriptionType.


        :return: The lambda_config of this UserPoolDescriptionType.
        :rtype: UserPoolDescriptionTypeLambdaConfig
        """
        return self._lambda_config

    @lambda_config.setter
    def lambda_config(self, lambda_config):
        """Sets the lambda_config of this UserPoolDescriptionType.


        :param lambda_config: The lambda_config of this UserPoolDescriptionType.
        :type lambda_config: UserPoolDescriptionTypeLambdaConfig
        """

        self._lambda_config = lambda_config

    @property
    def status(self):
        """Gets the status of this UserPoolDescriptionType.


        :return: The status of this UserPoolDescriptionType.
        :rtype: StatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserPoolDescriptionType.


        :param status: The status of this UserPoolDescriptionType.
        :type status: StatusType
        """

        self._status = status

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this UserPoolDescriptionType.


        :return: The last_modified_date of this UserPoolDescriptionType.
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this UserPoolDescriptionType.


        :param last_modified_date: The last_modified_date of this UserPoolDescriptionType.
        :type last_modified_date: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def creation_date(self):
        """Gets the creation_date of this UserPoolDescriptionType.


        :return: The creation_date of this UserPoolDescriptionType.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this UserPoolDescriptionType.


        :param creation_date: The creation_date of this UserPoolDescriptionType.
        :type creation_date: datetime
        """

        self._creation_date = creation_date
