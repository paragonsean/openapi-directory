# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_create_user_config_type_invite_message_template import AdminCreateUserConfigTypeInviteMessageTemplate
from openapi_server import util


class CreateUserPoolRequestAdminCreateUserConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_admin_create_user_only: bool=None, unused_account_validity_days: int=None, invite_message_template: AdminCreateUserConfigTypeInviteMessageTemplate=None):
        """CreateUserPoolRequestAdminCreateUserConfig - a model defined in OpenAPI

        :param allow_admin_create_user_only: The allow_admin_create_user_only of this CreateUserPoolRequestAdminCreateUserConfig.
        :param unused_account_validity_days: The unused_account_validity_days of this CreateUserPoolRequestAdminCreateUserConfig.
        :param invite_message_template: The invite_message_template of this CreateUserPoolRequestAdminCreateUserConfig.
        """
        self.openapi_types = {
            'allow_admin_create_user_only': bool,
            'unused_account_validity_days': int,
            'invite_message_template': AdminCreateUserConfigTypeInviteMessageTemplate
        }

        self.attribute_map = {
            'allow_admin_create_user_only': 'AllowAdminCreateUserOnly',
            'unused_account_validity_days': 'UnusedAccountValidityDays',
            'invite_message_template': 'InviteMessageTemplate'
        }

        self._allow_admin_create_user_only = allow_admin_create_user_only
        self._unused_account_validity_days = unused_account_validity_days
        self._invite_message_template = invite_message_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUserPoolRequestAdminCreateUserConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUserPoolRequest_AdminCreateUserConfig of this CreateUserPoolRequestAdminCreateUserConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_admin_create_user_only(self):
        """Gets the allow_admin_create_user_only of this CreateUserPoolRequestAdminCreateUserConfig.


        :return: The allow_admin_create_user_only of this CreateUserPoolRequestAdminCreateUserConfig.
        :rtype: bool
        """
        return self._allow_admin_create_user_only

    @allow_admin_create_user_only.setter
    def allow_admin_create_user_only(self, allow_admin_create_user_only):
        """Sets the allow_admin_create_user_only of this CreateUserPoolRequestAdminCreateUserConfig.


        :param allow_admin_create_user_only: The allow_admin_create_user_only of this CreateUserPoolRequestAdminCreateUserConfig.
        :type allow_admin_create_user_only: bool
        """

        self._allow_admin_create_user_only = allow_admin_create_user_only

    @property
    def unused_account_validity_days(self):
        """Gets the unused_account_validity_days of this CreateUserPoolRequestAdminCreateUserConfig.


        :return: The unused_account_validity_days of this CreateUserPoolRequestAdminCreateUserConfig.
        :rtype: int
        """
        return self._unused_account_validity_days

    @unused_account_validity_days.setter
    def unused_account_validity_days(self, unused_account_validity_days):
        """Sets the unused_account_validity_days of this CreateUserPoolRequestAdminCreateUserConfig.


        :param unused_account_validity_days: The unused_account_validity_days of this CreateUserPoolRequestAdminCreateUserConfig.
        :type unused_account_validity_days: int
        """

        self._unused_account_validity_days = unused_account_validity_days

    @property
    def invite_message_template(self):
        """Gets the invite_message_template of this CreateUserPoolRequestAdminCreateUserConfig.


        :return: The invite_message_template of this CreateUserPoolRequestAdminCreateUserConfig.
        :rtype: AdminCreateUserConfigTypeInviteMessageTemplate
        """
        return self._invite_message_template

    @invite_message_template.setter
    def invite_message_template(self, invite_message_template):
        """Sets the invite_message_template of this CreateUserPoolRequestAdminCreateUserConfig.


        :param invite_message_template: The invite_message_template of this CreateUserPoolRequestAdminCreateUserConfig.
        :type invite_message_template: AdminCreateUserConfigTypeInviteMessageTemplate
        """

        self._invite_message_template = invite_message_template
