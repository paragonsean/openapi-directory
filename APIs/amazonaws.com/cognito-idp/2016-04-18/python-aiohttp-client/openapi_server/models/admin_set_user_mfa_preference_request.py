# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_set_user_mfa_preference_request_sms_mfa_settings import AdminSetUserMFAPreferenceRequestSMSMfaSettings
from openapi_server.models.admin_set_user_mfa_preference_request_software_token_mfa_settings import AdminSetUserMFAPreferenceRequestSoftwareTokenMfaSettings
from openapi_server import util


class AdminSetUserMFAPreferenceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sms_mfa_settings: AdminSetUserMFAPreferenceRequestSMSMfaSettings=None, software_token_mfa_settings: AdminSetUserMFAPreferenceRequestSoftwareTokenMfaSettings=None, username: str=None, user_pool_id: str=None):
        """AdminSetUserMFAPreferenceRequest - a model defined in OpenAPI

        :param sms_mfa_settings: The sms_mfa_settings of this AdminSetUserMFAPreferenceRequest.
        :param software_token_mfa_settings: The software_token_mfa_settings of this AdminSetUserMFAPreferenceRequest.
        :param username: The username of this AdminSetUserMFAPreferenceRequest.
        :param user_pool_id: The user_pool_id of this AdminSetUserMFAPreferenceRequest.
        """
        self.openapi_types = {
            'sms_mfa_settings': AdminSetUserMFAPreferenceRequestSMSMfaSettings,
            'software_token_mfa_settings': AdminSetUserMFAPreferenceRequestSoftwareTokenMfaSettings,
            'username': str,
            'user_pool_id': str
        }

        self.attribute_map = {
            'sms_mfa_settings': 'SMSMfaSettings',
            'software_token_mfa_settings': 'SoftwareTokenMfaSettings',
            'username': 'Username',
            'user_pool_id': 'UserPoolId'
        }

        self._sms_mfa_settings = sms_mfa_settings
        self._software_token_mfa_settings = software_token_mfa_settings
        self._username = username
        self._user_pool_id = user_pool_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminSetUserMFAPreferenceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminSetUserMFAPreferenceRequest of this AdminSetUserMFAPreferenceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sms_mfa_settings(self):
        """Gets the sms_mfa_settings of this AdminSetUserMFAPreferenceRequest.


        :return: The sms_mfa_settings of this AdminSetUserMFAPreferenceRequest.
        :rtype: AdminSetUserMFAPreferenceRequestSMSMfaSettings
        """
        return self._sms_mfa_settings

    @sms_mfa_settings.setter
    def sms_mfa_settings(self, sms_mfa_settings):
        """Sets the sms_mfa_settings of this AdminSetUserMFAPreferenceRequest.


        :param sms_mfa_settings: The sms_mfa_settings of this AdminSetUserMFAPreferenceRequest.
        :type sms_mfa_settings: AdminSetUserMFAPreferenceRequestSMSMfaSettings
        """

        self._sms_mfa_settings = sms_mfa_settings

    @property
    def software_token_mfa_settings(self):
        """Gets the software_token_mfa_settings of this AdminSetUserMFAPreferenceRequest.


        :return: The software_token_mfa_settings of this AdminSetUserMFAPreferenceRequest.
        :rtype: AdminSetUserMFAPreferenceRequestSoftwareTokenMfaSettings
        """
        return self._software_token_mfa_settings

    @software_token_mfa_settings.setter
    def software_token_mfa_settings(self, software_token_mfa_settings):
        """Sets the software_token_mfa_settings of this AdminSetUserMFAPreferenceRequest.


        :param software_token_mfa_settings: The software_token_mfa_settings of this AdminSetUserMFAPreferenceRequest.
        :type software_token_mfa_settings: AdminSetUserMFAPreferenceRequestSoftwareTokenMfaSettings
        """

        self._software_token_mfa_settings = software_token_mfa_settings

    @property
    def username(self):
        """Gets the username of this AdminSetUserMFAPreferenceRequest.


        :return: The username of this AdminSetUserMFAPreferenceRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AdminSetUserMFAPreferenceRequest.


        :param username: The username of this AdminSetUserMFAPreferenceRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this AdminSetUserMFAPreferenceRequest.


        :return: The user_pool_id of this AdminSetUserMFAPreferenceRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this AdminSetUserMFAPreferenceRequest.


        :param user_pool_id: The user_pool_id of this AdminSetUserMFAPreferenceRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id
