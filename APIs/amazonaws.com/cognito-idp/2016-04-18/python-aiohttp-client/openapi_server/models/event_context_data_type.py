# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventContextDataType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, device_name: str=None, timezone: str=None, city: str=None, country: str=None):
        """EventContextDataType - a model defined in OpenAPI

        :param ip_address: The ip_address of this EventContextDataType.
        :param device_name: The device_name of this EventContextDataType.
        :param timezone: The timezone of this EventContextDataType.
        :param city: The city of this EventContextDataType.
        :param country: The country of this EventContextDataType.
        """
        self.openapi_types = {
            'ip_address': str,
            'device_name': str,
            'timezone': str,
            'city': str,
            'country': str
        }

        self.attribute_map = {
            'ip_address': 'IpAddress',
            'device_name': 'DeviceName',
            'timezone': 'Timezone',
            'city': 'City',
            'country': 'Country'
        }

        self._ip_address = ip_address
        self._device_name = device_name
        self._timezone = timezone
        self._city = city
        self._country = country

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventContextDataType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventContextDataType of this EventContextDataType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this EventContextDataType.


        :return: The ip_address of this EventContextDataType.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this EventContextDataType.


        :param ip_address: The ip_address of this EventContextDataType.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def device_name(self):
        """Gets the device_name of this EventContextDataType.


        :return: The device_name of this EventContextDataType.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this EventContextDataType.


        :param device_name: The device_name of this EventContextDataType.
        :type device_name: str
        """

        self._device_name = device_name

    @property
    def timezone(self):
        """Gets the timezone of this EventContextDataType.


        :return: The timezone of this EventContextDataType.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this EventContextDataType.


        :param timezone: The timezone of this EventContextDataType.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def city(self):
        """Gets the city of this EventContextDataType.


        :return: The city of this EventContextDataType.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this EventContextDataType.


        :param city: The city of this EventContextDataType.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this EventContextDataType.


        :return: The country of this EventContextDataType.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EventContextDataType.


        :param country: The country of this EventContextDataType.
        :type country: str
        """

        self._country = country
