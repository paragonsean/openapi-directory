# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateSoftwareTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, session: str=None):
        """AssociateSoftwareTokenRequest - a model defined in OpenAPI

        :param access_token: The access_token of this AssociateSoftwareTokenRequest.
        :param session: The session of this AssociateSoftwareTokenRequest.
        """
        self.openapi_types = {
            'access_token': str,
            'session': str
        }

        self.attribute_map = {
            'access_token': 'AccessToken',
            'session': 'Session'
        }

        self._access_token = access_token
        self._session = session

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateSoftwareTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateSoftwareTokenRequest of this AssociateSoftwareTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this AssociateSoftwareTokenRequest.


        :return: The access_token of this AssociateSoftwareTokenRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AssociateSoftwareTokenRequest.


        :param access_token: The access_token of this AssociateSoftwareTokenRequest.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def session(self):
        """Gets the session of this AssociateSoftwareTokenRequest.


        :return: The session of this AssociateSoftwareTokenRequest.
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this AssociateSoftwareTokenRequest.


        :param session: The session of this AssociateSoftwareTokenRequest.
        :type session: str
        """

        self._session = session
