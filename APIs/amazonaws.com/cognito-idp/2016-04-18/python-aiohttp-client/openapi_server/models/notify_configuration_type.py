# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notify_configuration_type_block_email import NotifyConfigurationTypeBlockEmail
from openapi_server.models.notify_configuration_type_mfa_email import NotifyConfigurationTypeMfaEmail
from openapi_server.models.notify_configuration_type_no_action_email import NotifyConfigurationTypeNoActionEmail
from openapi_server import util


class NotifyConfigurationType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _from: str=None, reply_to: str=None, source_arn: str=None, block_email: NotifyConfigurationTypeBlockEmail=None, no_action_email: NotifyConfigurationTypeNoActionEmail=None, mfa_email: NotifyConfigurationTypeMfaEmail=None):
        """NotifyConfigurationType - a model defined in OpenAPI

        :param _from: The _from of this NotifyConfigurationType.
        :param reply_to: The reply_to of this NotifyConfigurationType.
        :param source_arn: The source_arn of this NotifyConfigurationType.
        :param block_email: The block_email of this NotifyConfigurationType.
        :param no_action_email: The no_action_email of this NotifyConfigurationType.
        :param mfa_email: The mfa_email of this NotifyConfigurationType.
        """
        self.openapi_types = {
            '_from': str,
            'reply_to': str,
            'source_arn': str,
            'block_email': NotifyConfigurationTypeBlockEmail,
            'no_action_email': NotifyConfigurationTypeNoActionEmail,
            'mfa_email': NotifyConfigurationTypeMfaEmail
        }

        self.attribute_map = {
            '_from': 'From',
            'reply_to': 'ReplyTo',
            'source_arn': 'SourceArn',
            'block_email': 'BlockEmail',
            'no_action_email': 'NoActionEmail',
            'mfa_email': 'MfaEmail'
        }

        self.__from = _from
        self._reply_to = reply_to
        self._source_arn = source_arn
        self._block_email = block_email
        self._no_action_email = no_action_email
        self._mfa_email = mfa_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotifyConfigurationType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotifyConfigurationType of this NotifyConfigurationType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self):
        """Gets the _from of this NotifyConfigurationType.


        :return: The _from of this NotifyConfigurationType.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this NotifyConfigurationType.


        :param _from: The _from of this NotifyConfigurationType.
        :type _from: str
        """

        self.__from = _from

    @property
    def reply_to(self):
        """Gets the reply_to of this NotifyConfigurationType.


        :return: The reply_to of this NotifyConfigurationType.
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this NotifyConfigurationType.


        :param reply_to: The reply_to of this NotifyConfigurationType.
        :type reply_to: str
        """

        self._reply_to = reply_to

    @property
    def source_arn(self):
        """Gets the source_arn of this NotifyConfigurationType.


        :return: The source_arn of this NotifyConfigurationType.
        :rtype: str
        """
        return self._source_arn

    @source_arn.setter
    def source_arn(self, source_arn):
        """Sets the source_arn of this NotifyConfigurationType.


        :param source_arn: The source_arn of this NotifyConfigurationType.
        :type source_arn: str
        """
        if source_arn is None:
            raise ValueError("Invalid value for `source_arn`, must not be `None`")

        self._source_arn = source_arn

    @property
    def block_email(self):
        """Gets the block_email of this NotifyConfigurationType.


        :return: The block_email of this NotifyConfigurationType.
        :rtype: NotifyConfigurationTypeBlockEmail
        """
        return self._block_email

    @block_email.setter
    def block_email(self, block_email):
        """Sets the block_email of this NotifyConfigurationType.


        :param block_email: The block_email of this NotifyConfigurationType.
        :type block_email: NotifyConfigurationTypeBlockEmail
        """

        self._block_email = block_email

    @property
    def no_action_email(self):
        """Gets the no_action_email of this NotifyConfigurationType.


        :return: The no_action_email of this NotifyConfigurationType.
        :rtype: NotifyConfigurationTypeNoActionEmail
        """
        return self._no_action_email

    @no_action_email.setter
    def no_action_email(self, no_action_email):
        """Sets the no_action_email of this NotifyConfigurationType.


        :param no_action_email: The no_action_email of this NotifyConfigurationType.
        :type no_action_email: NotifyConfigurationTypeNoActionEmail
        """

        self._no_action_email = no_action_email

    @property
    def mfa_email(self):
        """Gets the mfa_email of this NotifyConfigurationType.


        :return: The mfa_email of this NotifyConfigurationType.
        :rtype: NotifyConfigurationTypeMfaEmail
        """
        return self._mfa_email

    @mfa_email.setter
    def mfa_email(self, mfa_email):
        """Sets the mfa_email of this NotifyConfigurationType.


        :param mfa_email: The mfa_email of this NotifyConfigurationType.
        :type mfa_email: NotifyConfigurationTypeMfaEmail
        """

        self._mfa_email = mfa_email
