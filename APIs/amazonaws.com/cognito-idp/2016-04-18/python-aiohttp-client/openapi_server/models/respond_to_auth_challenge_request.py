# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.challenge_name_type import ChallengeNameType
from openapi_server.models.confirm_forgot_password_request_user_context_data import ConfirmForgotPasswordRequestUserContextData
from openapi_server.models.respond_to_auth_challenge_request_analytics_metadata import RespondToAuthChallengeRequestAnalyticsMetadata
from openapi_server import util


class RespondToAuthChallengeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, challenge_name: ChallengeNameType=None, session: str=None, challenge_responses: Dict=None, analytics_metadata: RespondToAuthChallengeRequestAnalyticsMetadata=None, user_context_data: ConfirmForgotPasswordRequestUserContextData=None, client_metadata: Dict=None):
        """RespondToAuthChallengeRequest - a model defined in OpenAPI

        :param client_id: The client_id of this RespondToAuthChallengeRequest.
        :param challenge_name: The challenge_name of this RespondToAuthChallengeRequest.
        :param session: The session of this RespondToAuthChallengeRequest.
        :param challenge_responses: The challenge_responses of this RespondToAuthChallengeRequest.
        :param analytics_metadata: The analytics_metadata of this RespondToAuthChallengeRequest.
        :param user_context_data: The user_context_data of this RespondToAuthChallengeRequest.
        :param client_metadata: The client_metadata of this RespondToAuthChallengeRequest.
        """
        self.openapi_types = {
            'client_id': str,
            'challenge_name': ChallengeNameType,
            'session': str,
            'challenge_responses': Dict,
            'analytics_metadata': RespondToAuthChallengeRequestAnalyticsMetadata,
            'user_context_data': ConfirmForgotPasswordRequestUserContextData,
            'client_metadata': Dict
        }

        self.attribute_map = {
            'client_id': 'ClientId',
            'challenge_name': 'ChallengeName',
            'session': 'Session',
            'challenge_responses': 'ChallengeResponses',
            'analytics_metadata': 'AnalyticsMetadata',
            'user_context_data': 'UserContextData',
            'client_metadata': 'ClientMetadata'
        }

        self._client_id = client_id
        self._challenge_name = challenge_name
        self._session = session
        self._challenge_responses = challenge_responses
        self._analytics_metadata = analytics_metadata
        self._user_context_data = user_context_data
        self._client_metadata = client_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RespondToAuthChallengeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RespondToAuthChallengeRequest of this RespondToAuthChallengeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this RespondToAuthChallengeRequest.


        :return: The client_id of this RespondToAuthChallengeRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this RespondToAuthChallengeRequest.


        :param client_id: The client_id of this RespondToAuthChallengeRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def challenge_name(self):
        """Gets the challenge_name of this RespondToAuthChallengeRequest.


        :return: The challenge_name of this RespondToAuthChallengeRequest.
        :rtype: ChallengeNameType
        """
        return self._challenge_name

    @challenge_name.setter
    def challenge_name(self, challenge_name):
        """Sets the challenge_name of this RespondToAuthChallengeRequest.


        :param challenge_name: The challenge_name of this RespondToAuthChallengeRequest.
        :type challenge_name: ChallengeNameType
        """
        if challenge_name is None:
            raise ValueError("Invalid value for `challenge_name`, must not be `None`")

        self._challenge_name = challenge_name

    @property
    def session(self):
        """Gets the session of this RespondToAuthChallengeRequest.


        :return: The session of this RespondToAuthChallengeRequest.
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this RespondToAuthChallengeRequest.


        :param session: The session of this RespondToAuthChallengeRequest.
        :type session: str
        """

        self._session = session

    @property
    def challenge_responses(self):
        """Gets the challenge_responses of this RespondToAuthChallengeRequest.


        :return: The challenge_responses of this RespondToAuthChallengeRequest.
        :rtype: Dict
        """
        return self._challenge_responses

    @challenge_responses.setter
    def challenge_responses(self, challenge_responses):
        """Sets the challenge_responses of this RespondToAuthChallengeRequest.


        :param challenge_responses: The challenge_responses of this RespondToAuthChallengeRequest.
        :type challenge_responses: Dict
        """

        self._challenge_responses = challenge_responses

    @property
    def analytics_metadata(self):
        """Gets the analytics_metadata of this RespondToAuthChallengeRequest.


        :return: The analytics_metadata of this RespondToAuthChallengeRequest.
        :rtype: RespondToAuthChallengeRequestAnalyticsMetadata
        """
        return self._analytics_metadata

    @analytics_metadata.setter
    def analytics_metadata(self, analytics_metadata):
        """Sets the analytics_metadata of this RespondToAuthChallengeRequest.


        :param analytics_metadata: The analytics_metadata of this RespondToAuthChallengeRequest.
        :type analytics_metadata: RespondToAuthChallengeRequestAnalyticsMetadata
        """

        self._analytics_metadata = analytics_metadata

    @property
    def user_context_data(self):
        """Gets the user_context_data of this RespondToAuthChallengeRequest.


        :return: The user_context_data of this RespondToAuthChallengeRequest.
        :rtype: ConfirmForgotPasswordRequestUserContextData
        """
        return self._user_context_data

    @user_context_data.setter
    def user_context_data(self, user_context_data):
        """Sets the user_context_data of this RespondToAuthChallengeRequest.


        :param user_context_data: The user_context_data of this RespondToAuthChallengeRequest.
        :type user_context_data: ConfirmForgotPasswordRequestUserContextData
        """

        self._user_context_data = user_context_data

    @property
    def client_metadata(self):
        """Gets the client_metadata of this RespondToAuthChallengeRequest.


        :return: The client_metadata of this RespondToAuthChallengeRequest.
        :rtype: Dict
        """
        return self._client_metadata

    @client_metadata.setter
    def client_metadata(self, client_metadata):
        """Sets the client_metadata of this RespondToAuthChallengeRequest.


        :param client_metadata: The client_metadata of this RespondToAuthChallengeRequest.
        :type client_metadata: Dict
        """

        self._client_metadata = client_metadata
