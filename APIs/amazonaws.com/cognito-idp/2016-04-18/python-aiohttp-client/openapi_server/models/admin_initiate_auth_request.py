# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_initiate_auth_request_analytics_metadata import AdminInitiateAuthRequestAnalyticsMetadata
from openapi_server.models.admin_initiate_auth_request_context_data import AdminInitiateAuthRequestContextData
from openapi_server.models.auth_flow_type import AuthFlowType
from openapi_server import util


class AdminInitiateAuthRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool_id: str=None, client_id: str=None, auth_flow: AuthFlowType=None, auth_parameters: Dict=None, client_metadata: Dict=None, analytics_metadata: AdminInitiateAuthRequestAnalyticsMetadata=None, context_data: AdminInitiateAuthRequestContextData=None):
        """AdminInitiateAuthRequest - a model defined in OpenAPI

        :param user_pool_id: The user_pool_id of this AdminInitiateAuthRequest.
        :param client_id: The client_id of this AdminInitiateAuthRequest.
        :param auth_flow: The auth_flow of this AdminInitiateAuthRequest.
        :param auth_parameters: The auth_parameters of this AdminInitiateAuthRequest.
        :param client_metadata: The client_metadata of this AdminInitiateAuthRequest.
        :param analytics_metadata: The analytics_metadata of this AdminInitiateAuthRequest.
        :param context_data: The context_data of this AdminInitiateAuthRequest.
        """
        self.openapi_types = {
            'user_pool_id': str,
            'client_id': str,
            'auth_flow': AuthFlowType,
            'auth_parameters': Dict,
            'client_metadata': Dict,
            'analytics_metadata': AdminInitiateAuthRequestAnalyticsMetadata,
            'context_data': AdminInitiateAuthRequestContextData
        }

        self.attribute_map = {
            'user_pool_id': 'UserPoolId',
            'client_id': 'ClientId',
            'auth_flow': 'AuthFlow',
            'auth_parameters': 'AuthParameters',
            'client_metadata': 'ClientMetadata',
            'analytics_metadata': 'AnalyticsMetadata',
            'context_data': 'ContextData'
        }

        self._user_pool_id = user_pool_id
        self._client_id = client_id
        self._auth_flow = auth_flow
        self._auth_parameters = auth_parameters
        self._client_metadata = client_metadata
        self._analytics_metadata = analytics_metadata
        self._context_data = context_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminInitiateAuthRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminInitiateAuthRequest of this AdminInitiateAuthRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this AdminInitiateAuthRequest.


        :return: The user_pool_id of this AdminInitiateAuthRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this AdminInitiateAuthRequest.


        :param user_pool_id: The user_pool_id of this AdminInitiateAuthRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def client_id(self):
        """Gets the client_id of this AdminInitiateAuthRequest.


        :return: The client_id of this AdminInitiateAuthRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AdminInitiateAuthRequest.


        :param client_id: The client_id of this AdminInitiateAuthRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def auth_flow(self):
        """Gets the auth_flow of this AdminInitiateAuthRequest.


        :return: The auth_flow of this AdminInitiateAuthRequest.
        :rtype: AuthFlowType
        """
        return self._auth_flow

    @auth_flow.setter
    def auth_flow(self, auth_flow):
        """Sets the auth_flow of this AdminInitiateAuthRequest.


        :param auth_flow: The auth_flow of this AdminInitiateAuthRequest.
        :type auth_flow: AuthFlowType
        """
        if auth_flow is None:
            raise ValueError("Invalid value for `auth_flow`, must not be `None`")

        self._auth_flow = auth_flow

    @property
    def auth_parameters(self):
        """Gets the auth_parameters of this AdminInitiateAuthRequest.


        :return: The auth_parameters of this AdminInitiateAuthRequest.
        :rtype: Dict
        """
        return self._auth_parameters

    @auth_parameters.setter
    def auth_parameters(self, auth_parameters):
        """Sets the auth_parameters of this AdminInitiateAuthRequest.


        :param auth_parameters: The auth_parameters of this AdminInitiateAuthRequest.
        :type auth_parameters: Dict
        """

        self._auth_parameters = auth_parameters

    @property
    def client_metadata(self):
        """Gets the client_metadata of this AdminInitiateAuthRequest.


        :return: The client_metadata of this AdminInitiateAuthRequest.
        :rtype: Dict
        """
        return self._client_metadata

    @client_metadata.setter
    def client_metadata(self, client_metadata):
        """Sets the client_metadata of this AdminInitiateAuthRequest.


        :param client_metadata: The client_metadata of this AdminInitiateAuthRequest.
        :type client_metadata: Dict
        """

        self._client_metadata = client_metadata

    @property
    def analytics_metadata(self):
        """Gets the analytics_metadata of this AdminInitiateAuthRequest.


        :return: The analytics_metadata of this AdminInitiateAuthRequest.
        :rtype: AdminInitiateAuthRequestAnalyticsMetadata
        """
        return self._analytics_metadata

    @analytics_metadata.setter
    def analytics_metadata(self, analytics_metadata):
        """Sets the analytics_metadata of this AdminInitiateAuthRequest.


        :param analytics_metadata: The analytics_metadata of this AdminInitiateAuthRequest.
        :type analytics_metadata: AdminInitiateAuthRequestAnalyticsMetadata
        """

        self._analytics_metadata = analytics_metadata

    @property
    def context_data(self):
        """Gets the context_data of this AdminInitiateAuthRequest.


        :return: The context_data of this AdminInitiateAuthRequest.
        :rtype: AdminInitiateAuthRequestContextData
        """
        return self._context_data

    @context_data.setter
    def context_data(self, context_data):
        """Sets the context_data of this AdminInitiateAuthRequest.


        :param context_data: The context_data of this AdminInitiateAuthRequest.
        :type context_data: AdminInitiateAuthRequestContextData
        """

        self._context_data = context_data
