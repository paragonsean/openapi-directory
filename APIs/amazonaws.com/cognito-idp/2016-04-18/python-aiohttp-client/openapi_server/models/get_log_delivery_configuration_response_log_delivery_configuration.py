# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetLogDeliveryConfigurationResponseLogDeliveryConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool_id: str=None, log_configurations: List=None):
        """GetLogDeliveryConfigurationResponseLogDeliveryConfiguration - a model defined in OpenAPI

        :param user_pool_id: The user_pool_id of this GetLogDeliveryConfigurationResponseLogDeliveryConfiguration.
        :param log_configurations: The log_configurations of this GetLogDeliveryConfigurationResponseLogDeliveryConfiguration.
        """
        self.openapi_types = {
            'user_pool_id': str,
            'log_configurations': List
        }

        self.attribute_map = {
            'user_pool_id': 'UserPoolId',
            'log_configurations': 'LogConfigurations'
        }

        self._user_pool_id = user_pool_id
        self._log_configurations = log_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetLogDeliveryConfigurationResponseLogDeliveryConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetLogDeliveryConfigurationResponse_LogDeliveryConfiguration of this GetLogDeliveryConfigurationResponseLogDeliveryConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this GetLogDeliveryConfigurationResponseLogDeliveryConfiguration.


        :return: The user_pool_id of this GetLogDeliveryConfigurationResponseLogDeliveryConfiguration.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this GetLogDeliveryConfigurationResponseLogDeliveryConfiguration.


        :param user_pool_id: The user_pool_id of this GetLogDeliveryConfigurationResponseLogDeliveryConfiguration.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def log_configurations(self):
        """Gets the log_configurations of this GetLogDeliveryConfigurationResponseLogDeliveryConfiguration.


        :return: The log_configurations of this GetLogDeliveryConfigurationResponseLogDeliveryConfiguration.
        :rtype: List
        """
        return self._log_configurations

    @log_configurations.setter
    def log_configurations(self, log_configurations):
        """Sets the log_configurations of this GetLogDeliveryConfigurationResponseLogDeliveryConfiguration.


        :param log_configurations: The log_configurations of this GetLogDeliveryConfigurationResponseLogDeliveryConfiguration.
        :type log_configurations: List
        """
        if log_configurations is None:
            raise ValueError("Invalid value for `log_configurations`, must not be `None`")

        self._log_configurations = log_configurations
