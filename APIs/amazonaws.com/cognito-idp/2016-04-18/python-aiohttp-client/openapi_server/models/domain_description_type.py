# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain_description_type_custom_domain_config import DomainDescriptionTypeCustomDomainConfig
from openapi_server.models.domain_status_type import DomainStatusType
from openapi_server import util


class DomainDescriptionType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool_id: str=None, aws_account_id: str=None, domain: str=None, s3_bucket: str=None, cloud_front_distribution: str=None, version: str=None, status: DomainStatusType=None, custom_domain_config: DomainDescriptionTypeCustomDomainConfig=None):
        """DomainDescriptionType - a model defined in OpenAPI

        :param user_pool_id: The user_pool_id of this DomainDescriptionType.
        :param aws_account_id: The aws_account_id of this DomainDescriptionType.
        :param domain: The domain of this DomainDescriptionType.
        :param s3_bucket: The s3_bucket of this DomainDescriptionType.
        :param cloud_front_distribution: The cloud_front_distribution of this DomainDescriptionType.
        :param version: The version of this DomainDescriptionType.
        :param status: The status of this DomainDescriptionType.
        :param custom_domain_config: The custom_domain_config of this DomainDescriptionType.
        """
        self.openapi_types = {
            'user_pool_id': str,
            'aws_account_id': str,
            'domain': str,
            's3_bucket': str,
            'cloud_front_distribution': str,
            'version': str,
            'status': DomainStatusType,
            'custom_domain_config': DomainDescriptionTypeCustomDomainConfig
        }

        self.attribute_map = {
            'user_pool_id': 'UserPoolId',
            'aws_account_id': 'AWSAccountId',
            'domain': 'Domain',
            's3_bucket': 'S3Bucket',
            'cloud_front_distribution': 'CloudFrontDistribution',
            'version': 'Version',
            'status': 'Status',
            'custom_domain_config': 'CustomDomainConfig'
        }

        self._user_pool_id = user_pool_id
        self._aws_account_id = aws_account_id
        self._domain = domain
        self._s3_bucket = s3_bucket
        self._cloud_front_distribution = cloud_front_distribution
        self._version = version
        self._status = status
        self._custom_domain_config = custom_domain_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainDescriptionType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainDescriptionType of this DomainDescriptionType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this DomainDescriptionType.


        :return: The user_pool_id of this DomainDescriptionType.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this DomainDescriptionType.


        :param user_pool_id: The user_pool_id of this DomainDescriptionType.
        :type user_pool_id: str
        """

        self._user_pool_id = user_pool_id

    @property
    def aws_account_id(self):
        """Gets the aws_account_id of this DomainDescriptionType.


        :return: The aws_account_id of this DomainDescriptionType.
        :rtype: str
        """
        return self._aws_account_id

    @aws_account_id.setter
    def aws_account_id(self, aws_account_id):
        """Sets the aws_account_id of this DomainDescriptionType.


        :param aws_account_id: The aws_account_id of this DomainDescriptionType.
        :type aws_account_id: str
        """

        self._aws_account_id = aws_account_id

    @property
    def domain(self):
        """Gets the domain of this DomainDescriptionType.


        :return: The domain of this DomainDescriptionType.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DomainDescriptionType.


        :param domain: The domain of this DomainDescriptionType.
        :type domain: str
        """

        self._domain = domain

    @property
    def s3_bucket(self):
        """Gets the s3_bucket of this DomainDescriptionType.


        :return: The s3_bucket of this DomainDescriptionType.
        :rtype: str
        """
        return self._s3_bucket

    @s3_bucket.setter
    def s3_bucket(self, s3_bucket):
        """Sets the s3_bucket of this DomainDescriptionType.


        :param s3_bucket: The s3_bucket of this DomainDescriptionType.
        :type s3_bucket: str
        """

        self._s3_bucket = s3_bucket

    @property
    def cloud_front_distribution(self):
        """Gets the cloud_front_distribution of this DomainDescriptionType.


        :return: The cloud_front_distribution of this DomainDescriptionType.
        :rtype: str
        """
        return self._cloud_front_distribution

    @cloud_front_distribution.setter
    def cloud_front_distribution(self, cloud_front_distribution):
        """Sets the cloud_front_distribution of this DomainDescriptionType.


        :param cloud_front_distribution: The cloud_front_distribution of this DomainDescriptionType.
        :type cloud_front_distribution: str
        """

        self._cloud_front_distribution = cloud_front_distribution

    @property
    def version(self):
        """Gets the version of this DomainDescriptionType.


        :return: The version of this DomainDescriptionType.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DomainDescriptionType.


        :param version: The version of this DomainDescriptionType.
        :type version: str
        """

        self._version = version

    @property
    def status(self):
        """Gets the status of this DomainDescriptionType.


        :return: The status of this DomainDescriptionType.
        :rtype: DomainStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DomainDescriptionType.


        :param status: The status of this DomainDescriptionType.
        :type status: DomainStatusType
        """

        self._status = status

    @property
    def custom_domain_config(self):
        """Gets the custom_domain_config of this DomainDescriptionType.


        :return: The custom_domain_config of this DomainDescriptionType.
        :rtype: DomainDescriptionTypeCustomDomainConfig
        """
        return self._custom_domain_config

    @custom_domain_config.setter
    def custom_domain_config(self, custom_domain_config):
        """Sets the custom_domain_config of this DomainDescriptionType.


        :param custom_domain_config: The custom_domain_config of this DomainDescriptionType.
        :type custom_domain_config: DomainDescriptionTypeCustomDomainConfig
        """

        self._custom_domain_config = custom_domain_config
