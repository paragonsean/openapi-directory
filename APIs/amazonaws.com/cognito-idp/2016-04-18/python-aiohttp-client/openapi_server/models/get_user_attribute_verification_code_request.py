# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetUserAttributeVerificationCodeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, attribute_name: str=None, client_metadata: Dict=None):
        """GetUserAttributeVerificationCodeRequest - a model defined in OpenAPI

        :param access_token: The access_token of this GetUserAttributeVerificationCodeRequest.
        :param attribute_name: The attribute_name of this GetUserAttributeVerificationCodeRequest.
        :param client_metadata: The client_metadata of this GetUserAttributeVerificationCodeRequest.
        """
        self.openapi_types = {
            'access_token': str,
            'attribute_name': str,
            'client_metadata': Dict
        }

        self.attribute_map = {
            'access_token': 'AccessToken',
            'attribute_name': 'AttributeName',
            'client_metadata': 'ClientMetadata'
        }

        self._access_token = access_token
        self._attribute_name = attribute_name
        self._client_metadata = client_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetUserAttributeVerificationCodeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetUserAttributeVerificationCodeRequest of this GetUserAttributeVerificationCodeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this GetUserAttributeVerificationCodeRequest.


        :return: The access_token of this GetUserAttributeVerificationCodeRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this GetUserAttributeVerificationCodeRequest.


        :param access_token: The access_token of this GetUserAttributeVerificationCodeRequest.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def attribute_name(self):
        """Gets the attribute_name of this GetUserAttributeVerificationCodeRequest.


        :return: The attribute_name of this GetUserAttributeVerificationCodeRequest.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this GetUserAttributeVerificationCodeRequest.


        :param attribute_name: The attribute_name of this GetUserAttributeVerificationCodeRequest.
        :type attribute_name: str
        """
        if attribute_name is None:
            raise ValueError("Invalid value for `attribute_name`, must not be `None`")

        self._attribute_name = attribute_name

    @property
    def client_metadata(self):
        """Gets the client_metadata of this GetUserAttributeVerificationCodeRequest.


        :return: The client_metadata of this GetUserAttributeVerificationCodeRequest.
        :rtype: Dict
        """
        return self._client_metadata

    @client_metadata.setter
    def client_metadata(self, client_metadata):
        """Sets the client_metadata of this GetUserAttributeVerificationCodeRequest.


        :param client_metadata: The client_metadata of this GetUserAttributeVerificationCodeRequest.
        :type client_metadata: Dict
        """

        self._client_metadata = client_metadata
