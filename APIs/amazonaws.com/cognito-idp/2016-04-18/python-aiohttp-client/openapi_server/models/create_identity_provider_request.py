# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identity_provider_type_type import IdentityProviderTypeType
from openapi_server import util


class CreateIdentityProviderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool_id: str=None, provider_name: str=None, provider_type: IdentityProviderTypeType=None, provider_details: Dict=None, attribute_mapping: Dict=None, idp_identifiers: List=None):
        """CreateIdentityProviderRequest - a model defined in OpenAPI

        :param user_pool_id: The user_pool_id of this CreateIdentityProviderRequest.
        :param provider_name: The provider_name of this CreateIdentityProviderRequest.
        :param provider_type: The provider_type of this CreateIdentityProviderRequest.
        :param provider_details: The provider_details of this CreateIdentityProviderRequest.
        :param attribute_mapping: The attribute_mapping of this CreateIdentityProviderRequest.
        :param idp_identifiers: The idp_identifiers of this CreateIdentityProviderRequest.
        """
        self.openapi_types = {
            'user_pool_id': str,
            'provider_name': str,
            'provider_type': IdentityProviderTypeType,
            'provider_details': Dict,
            'attribute_mapping': Dict,
            'idp_identifiers': List
        }

        self.attribute_map = {
            'user_pool_id': 'UserPoolId',
            'provider_name': 'ProviderName',
            'provider_type': 'ProviderType',
            'provider_details': 'ProviderDetails',
            'attribute_mapping': 'AttributeMapping',
            'idp_identifiers': 'IdpIdentifiers'
        }

        self._user_pool_id = user_pool_id
        self._provider_name = provider_name
        self._provider_type = provider_type
        self._provider_details = provider_details
        self._attribute_mapping = attribute_mapping
        self._idp_identifiers = idp_identifiers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateIdentityProviderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateIdentityProviderRequest of this CreateIdentityProviderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this CreateIdentityProviderRequest.


        :return: The user_pool_id of this CreateIdentityProviderRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this CreateIdentityProviderRequest.


        :param user_pool_id: The user_pool_id of this CreateIdentityProviderRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def provider_name(self):
        """Gets the provider_name of this CreateIdentityProviderRequest.


        :return: The provider_name of this CreateIdentityProviderRequest.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this CreateIdentityProviderRequest.


        :param provider_name: The provider_name of this CreateIdentityProviderRequest.
        :type provider_name: str
        """
        if provider_name is None:
            raise ValueError("Invalid value for `provider_name`, must not be `None`")

        self._provider_name = provider_name

    @property
    def provider_type(self):
        """Gets the provider_type of this CreateIdentityProviderRequest.


        :return: The provider_type of this CreateIdentityProviderRequest.
        :rtype: IdentityProviderTypeType
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this CreateIdentityProviderRequest.


        :param provider_type: The provider_type of this CreateIdentityProviderRequest.
        :type provider_type: IdentityProviderTypeType
        """
        if provider_type is None:
            raise ValueError("Invalid value for `provider_type`, must not be `None`")

        self._provider_type = provider_type

    @property
    def provider_details(self):
        """Gets the provider_details of this CreateIdentityProviderRequest.


        :return: The provider_details of this CreateIdentityProviderRequest.
        :rtype: Dict
        """
        return self._provider_details

    @provider_details.setter
    def provider_details(self, provider_details):
        """Sets the provider_details of this CreateIdentityProviderRequest.


        :param provider_details: The provider_details of this CreateIdentityProviderRequest.
        :type provider_details: Dict
        """
        if provider_details is None:
            raise ValueError("Invalid value for `provider_details`, must not be `None`")

        self._provider_details = provider_details

    @property
    def attribute_mapping(self):
        """Gets the attribute_mapping of this CreateIdentityProviderRequest.


        :return: The attribute_mapping of this CreateIdentityProviderRequest.
        :rtype: Dict
        """
        return self._attribute_mapping

    @attribute_mapping.setter
    def attribute_mapping(self, attribute_mapping):
        """Sets the attribute_mapping of this CreateIdentityProviderRequest.


        :param attribute_mapping: The attribute_mapping of this CreateIdentityProviderRequest.
        :type attribute_mapping: Dict
        """

        self._attribute_mapping = attribute_mapping

    @property
    def idp_identifiers(self):
        """Gets the idp_identifiers of this CreateIdentityProviderRequest.


        :return: The idp_identifiers of this CreateIdentityProviderRequest.
        :rtype: List
        """
        return self._idp_identifiers

    @idp_identifiers.setter
    def idp_identifiers(self, idp_identifiers):
        """Sets the idp_identifiers of this CreateIdentityProviderRequest.


        :param idp_identifiers: The idp_identifiers of this CreateIdentityProviderRequest.
        :type idp_identifiers: List
        """

        self._idp_identifiers = idp_identifiers
