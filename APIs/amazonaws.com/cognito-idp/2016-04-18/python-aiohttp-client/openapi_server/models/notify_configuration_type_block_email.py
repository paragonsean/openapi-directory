# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotifyConfigurationTypeBlockEmail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subject: str=None, html_body: str=None, text_body: str=None):
        """NotifyConfigurationTypeBlockEmail - a model defined in OpenAPI

        :param subject: The subject of this NotifyConfigurationTypeBlockEmail.
        :param html_body: The html_body of this NotifyConfigurationTypeBlockEmail.
        :param text_body: The text_body of this NotifyConfigurationTypeBlockEmail.
        """
        self.openapi_types = {
            'subject': str,
            'html_body': str,
            'text_body': str
        }

        self.attribute_map = {
            'subject': 'Subject',
            'html_body': 'HtmlBody',
            'text_body': 'TextBody'
        }

        self._subject = subject
        self._html_body = html_body
        self._text_body = text_body

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotifyConfigurationTypeBlockEmail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotifyConfigurationType_BlockEmail of this NotifyConfigurationTypeBlockEmail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject(self):
        """Gets the subject of this NotifyConfigurationTypeBlockEmail.


        :return: The subject of this NotifyConfigurationTypeBlockEmail.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this NotifyConfigurationTypeBlockEmail.


        :param subject: The subject of this NotifyConfigurationTypeBlockEmail.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def html_body(self):
        """Gets the html_body of this NotifyConfigurationTypeBlockEmail.


        :return: The html_body of this NotifyConfigurationTypeBlockEmail.
        :rtype: str
        """
        return self._html_body

    @html_body.setter
    def html_body(self, html_body):
        """Sets the html_body of this NotifyConfigurationTypeBlockEmail.


        :param html_body: The html_body of this NotifyConfigurationTypeBlockEmail.
        :type html_body: str
        """

        self._html_body = html_body

    @property
    def text_body(self):
        """Gets the text_body of this NotifyConfigurationTypeBlockEmail.


        :return: The text_body of this NotifyConfigurationTypeBlockEmail.
        :rtype: str
        """
        return self._text_body

    @text_body.setter
    def text_body(self, text_body):
        """Sets the text_body of this NotifyConfigurationTypeBlockEmail.


        :param text_body: The text_body of this NotifyConfigurationTypeBlockEmail.
        :type text_body: str
        """

        self._text_body = text_body
