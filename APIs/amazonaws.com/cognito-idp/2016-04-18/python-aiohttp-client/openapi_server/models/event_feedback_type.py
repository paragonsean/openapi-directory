# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feedback_value_type import FeedbackValueType
from openapi_server import util


class EventFeedbackType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feedback_value: FeedbackValueType=None, provider: str=None, feedback_date: datetime=None):
        """EventFeedbackType - a model defined in OpenAPI

        :param feedback_value: The feedback_value of this EventFeedbackType.
        :param provider: The provider of this EventFeedbackType.
        :param feedback_date: The feedback_date of this EventFeedbackType.
        """
        self.openapi_types = {
            'feedback_value': FeedbackValueType,
            'provider': str,
            'feedback_date': datetime
        }

        self.attribute_map = {
            'feedback_value': 'FeedbackValue',
            'provider': 'Provider',
            'feedback_date': 'FeedbackDate'
        }

        self._feedback_value = feedback_value
        self._provider = provider
        self._feedback_date = feedback_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventFeedbackType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventFeedbackType of this EventFeedbackType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feedback_value(self):
        """Gets the feedback_value of this EventFeedbackType.


        :return: The feedback_value of this EventFeedbackType.
        :rtype: FeedbackValueType
        """
        return self._feedback_value

    @feedback_value.setter
    def feedback_value(self, feedback_value):
        """Sets the feedback_value of this EventFeedbackType.


        :param feedback_value: The feedback_value of this EventFeedbackType.
        :type feedback_value: FeedbackValueType
        """
        if feedback_value is None:
            raise ValueError("Invalid value for `feedback_value`, must not be `None`")

        self._feedback_value = feedback_value

    @property
    def provider(self):
        """Gets the provider of this EventFeedbackType.


        :return: The provider of this EventFeedbackType.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this EventFeedbackType.


        :param provider: The provider of this EventFeedbackType.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def feedback_date(self):
        """Gets the feedback_date of this EventFeedbackType.


        :return: The feedback_date of this EventFeedbackType.
        :rtype: datetime
        """
        return self._feedback_date

    @feedback_date.setter
    def feedback_date(self, feedback_date):
        """Sets the feedback_date of this EventFeedbackType.


        :param feedback_date: The feedback_date of this EventFeedbackType.
        :type feedback_date: datetime
        """

        self._feedback_date = feedback_date
