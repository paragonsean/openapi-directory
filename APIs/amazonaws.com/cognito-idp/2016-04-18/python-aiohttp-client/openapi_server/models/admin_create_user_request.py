# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_action_type import MessageActionType
from openapi_server import util


class AdminCreateUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool_id: str=None, username: str=None, user_attributes: List=None, validation_data: List=None, temporary_password: str=None, force_alias_creation: bool=None, message_action: MessageActionType=None, desired_delivery_mediums: List=None, client_metadata: Dict=None):
        """AdminCreateUserRequest - a model defined in OpenAPI

        :param user_pool_id: The user_pool_id of this AdminCreateUserRequest.
        :param username: The username of this AdminCreateUserRequest.
        :param user_attributes: The user_attributes of this AdminCreateUserRequest.
        :param validation_data: The validation_data of this AdminCreateUserRequest.
        :param temporary_password: The temporary_password of this AdminCreateUserRequest.
        :param force_alias_creation: The force_alias_creation of this AdminCreateUserRequest.
        :param message_action: The message_action of this AdminCreateUserRequest.
        :param desired_delivery_mediums: The desired_delivery_mediums of this AdminCreateUserRequest.
        :param client_metadata: The client_metadata of this AdminCreateUserRequest.
        """
        self.openapi_types = {
            'user_pool_id': str,
            'username': str,
            'user_attributes': List,
            'validation_data': List,
            'temporary_password': str,
            'force_alias_creation': bool,
            'message_action': MessageActionType,
            'desired_delivery_mediums': List,
            'client_metadata': Dict
        }

        self.attribute_map = {
            'user_pool_id': 'UserPoolId',
            'username': 'Username',
            'user_attributes': 'UserAttributes',
            'validation_data': 'ValidationData',
            'temporary_password': 'TemporaryPassword',
            'force_alias_creation': 'ForceAliasCreation',
            'message_action': 'MessageAction',
            'desired_delivery_mediums': 'DesiredDeliveryMediums',
            'client_metadata': 'ClientMetadata'
        }

        self._user_pool_id = user_pool_id
        self._username = username
        self._user_attributes = user_attributes
        self._validation_data = validation_data
        self._temporary_password = temporary_password
        self._force_alias_creation = force_alias_creation
        self._message_action = message_action
        self._desired_delivery_mediums = desired_delivery_mediums
        self._client_metadata = client_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminCreateUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminCreateUserRequest of this AdminCreateUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this AdminCreateUserRequest.


        :return: The user_pool_id of this AdminCreateUserRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this AdminCreateUserRequest.


        :param user_pool_id: The user_pool_id of this AdminCreateUserRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def username(self):
        """Gets the username of this AdminCreateUserRequest.


        :return: The username of this AdminCreateUserRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AdminCreateUserRequest.


        :param username: The username of this AdminCreateUserRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def user_attributes(self):
        """Gets the user_attributes of this AdminCreateUserRequest.


        :return: The user_attributes of this AdminCreateUserRequest.
        :rtype: List
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this AdminCreateUserRequest.


        :param user_attributes: The user_attributes of this AdminCreateUserRequest.
        :type user_attributes: List
        """

        self._user_attributes = user_attributes

    @property
    def validation_data(self):
        """Gets the validation_data of this AdminCreateUserRequest.


        :return: The validation_data of this AdminCreateUserRequest.
        :rtype: List
        """
        return self._validation_data

    @validation_data.setter
    def validation_data(self, validation_data):
        """Sets the validation_data of this AdminCreateUserRequest.


        :param validation_data: The validation_data of this AdminCreateUserRequest.
        :type validation_data: List
        """

        self._validation_data = validation_data

    @property
    def temporary_password(self):
        """Gets the temporary_password of this AdminCreateUserRequest.


        :return: The temporary_password of this AdminCreateUserRequest.
        :rtype: str
        """
        return self._temporary_password

    @temporary_password.setter
    def temporary_password(self, temporary_password):
        """Sets the temporary_password of this AdminCreateUserRequest.


        :param temporary_password: The temporary_password of this AdminCreateUserRequest.
        :type temporary_password: str
        """

        self._temporary_password = temporary_password

    @property
    def force_alias_creation(self):
        """Gets the force_alias_creation of this AdminCreateUserRequest.


        :return: The force_alias_creation of this AdminCreateUserRequest.
        :rtype: bool
        """
        return self._force_alias_creation

    @force_alias_creation.setter
    def force_alias_creation(self, force_alias_creation):
        """Sets the force_alias_creation of this AdminCreateUserRequest.


        :param force_alias_creation: The force_alias_creation of this AdminCreateUserRequest.
        :type force_alias_creation: bool
        """

        self._force_alias_creation = force_alias_creation

    @property
    def message_action(self):
        """Gets the message_action of this AdminCreateUserRequest.


        :return: The message_action of this AdminCreateUserRequest.
        :rtype: MessageActionType
        """
        return self._message_action

    @message_action.setter
    def message_action(self, message_action):
        """Sets the message_action of this AdminCreateUserRequest.


        :param message_action: The message_action of this AdminCreateUserRequest.
        :type message_action: MessageActionType
        """

        self._message_action = message_action

    @property
    def desired_delivery_mediums(self):
        """Gets the desired_delivery_mediums of this AdminCreateUserRequest.


        :return: The desired_delivery_mediums of this AdminCreateUserRequest.
        :rtype: List
        """
        return self._desired_delivery_mediums

    @desired_delivery_mediums.setter
    def desired_delivery_mediums(self, desired_delivery_mediums):
        """Sets the desired_delivery_mediums of this AdminCreateUserRequest.


        :param desired_delivery_mediums: The desired_delivery_mediums of this AdminCreateUserRequest.
        :type desired_delivery_mediums: List
        """

        self._desired_delivery_mediums = desired_delivery_mediums

    @property
    def client_metadata(self):
        """Gets the client_metadata of this AdminCreateUserRequest.


        :return: The client_metadata of this AdminCreateUserRequest.
        :rtype: Dict
        """
        return self._client_metadata

    @client_metadata.setter
    def client_metadata(self, client_metadata):
        """Sets the client_metadata of this AdminCreateUserRequest.


        :param client_metadata: The client_metadata of this AdminCreateUserRequest.
        :type client_metadata: Dict
        """

        self._client_metadata = client_metadata
