# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_import_job_status_type import UserImportJobStatusType
from openapi_server import util


class UserImportJobType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_name: str=None, job_id: str=None, user_pool_id: str=None, pre_signed_url: str=None, creation_date: datetime=None, start_date: datetime=None, completion_date: datetime=None, status: UserImportJobStatusType=None, cloud_watch_logs_role_arn: str=None, imported_users: int=None, skipped_users: int=None, failed_users: int=None, completion_message: str=None):
        """UserImportJobType - a model defined in OpenAPI

        :param job_name: The job_name of this UserImportJobType.
        :param job_id: The job_id of this UserImportJobType.
        :param user_pool_id: The user_pool_id of this UserImportJobType.
        :param pre_signed_url: The pre_signed_url of this UserImportJobType.
        :param creation_date: The creation_date of this UserImportJobType.
        :param start_date: The start_date of this UserImportJobType.
        :param completion_date: The completion_date of this UserImportJobType.
        :param status: The status of this UserImportJobType.
        :param cloud_watch_logs_role_arn: The cloud_watch_logs_role_arn of this UserImportJobType.
        :param imported_users: The imported_users of this UserImportJobType.
        :param skipped_users: The skipped_users of this UserImportJobType.
        :param failed_users: The failed_users of this UserImportJobType.
        :param completion_message: The completion_message of this UserImportJobType.
        """
        self.openapi_types = {
            'job_name': str,
            'job_id': str,
            'user_pool_id': str,
            'pre_signed_url': str,
            'creation_date': datetime,
            'start_date': datetime,
            'completion_date': datetime,
            'status': UserImportJobStatusType,
            'cloud_watch_logs_role_arn': str,
            'imported_users': int,
            'skipped_users': int,
            'failed_users': int,
            'completion_message': str
        }

        self.attribute_map = {
            'job_name': 'JobName',
            'job_id': 'JobId',
            'user_pool_id': 'UserPoolId',
            'pre_signed_url': 'PreSignedUrl',
            'creation_date': 'CreationDate',
            'start_date': 'StartDate',
            'completion_date': 'CompletionDate',
            'status': 'Status',
            'cloud_watch_logs_role_arn': 'CloudWatchLogsRoleArn',
            'imported_users': 'ImportedUsers',
            'skipped_users': 'SkippedUsers',
            'failed_users': 'FailedUsers',
            'completion_message': 'CompletionMessage'
        }

        self._job_name = job_name
        self._job_id = job_id
        self._user_pool_id = user_pool_id
        self._pre_signed_url = pre_signed_url
        self._creation_date = creation_date
        self._start_date = start_date
        self._completion_date = completion_date
        self._status = status
        self._cloud_watch_logs_role_arn = cloud_watch_logs_role_arn
        self._imported_users = imported_users
        self._skipped_users = skipped_users
        self._failed_users = failed_users
        self._completion_message = completion_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserImportJobType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserImportJobType of this UserImportJobType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_name(self):
        """Gets the job_name of this UserImportJobType.


        :return: The job_name of this UserImportJobType.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this UserImportJobType.


        :param job_name: The job_name of this UserImportJobType.
        :type job_name: str
        """

        self._job_name = job_name

    @property
    def job_id(self):
        """Gets the job_id of this UserImportJobType.


        :return: The job_id of this UserImportJobType.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this UserImportJobType.


        :param job_id: The job_id of this UserImportJobType.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this UserImportJobType.


        :return: The user_pool_id of this UserImportJobType.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this UserImportJobType.


        :param user_pool_id: The user_pool_id of this UserImportJobType.
        :type user_pool_id: str
        """

        self._user_pool_id = user_pool_id

    @property
    def pre_signed_url(self):
        """Gets the pre_signed_url of this UserImportJobType.


        :return: The pre_signed_url of this UserImportJobType.
        :rtype: str
        """
        return self._pre_signed_url

    @pre_signed_url.setter
    def pre_signed_url(self, pre_signed_url):
        """Sets the pre_signed_url of this UserImportJobType.


        :param pre_signed_url: The pre_signed_url of this UserImportJobType.
        :type pre_signed_url: str
        """

        self._pre_signed_url = pre_signed_url

    @property
    def creation_date(self):
        """Gets the creation_date of this UserImportJobType.


        :return: The creation_date of this UserImportJobType.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this UserImportJobType.


        :param creation_date: The creation_date of this UserImportJobType.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def start_date(self):
        """Gets the start_date of this UserImportJobType.


        :return: The start_date of this UserImportJobType.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this UserImportJobType.


        :param start_date: The start_date of this UserImportJobType.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def completion_date(self):
        """Gets the completion_date of this UserImportJobType.


        :return: The completion_date of this UserImportJobType.
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this UserImportJobType.


        :param completion_date: The completion_date of this UserImportJobType.
        :type completion_date: datetime
        """

        self._completion_date = completion_date

    @property
    def status(self):
        """Gets the status of this UserImportJobType.


        :return: The status of this UserImportJobType.
        :rtype: UserImportJobStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserImportJobType.


        :param status: The status of this UserImportJobType.
        :type status: UserImportJobStatusType
        """

        self._status = status

    @property
    def cloud_watch_logs_role_arn(self):
        """Gets the cloud_watch_logs_role_arn of this UserImportJobType.


        :return: The cloud_watch_logs_role_arn of this UserImportJobType.
        :rtype: str
        """
        return self._cloud_watch_logs_role_arn

    @cloud_watch_logs_role_arn.setter
    def cloud_watch_logs_role_arn(self, cloud_watch_logs_role_arn):
        """Sets the cloud_watch_logs_role_arn of this UserImportJobType.


        :param cloud_watch_logs_role_arn: The cloud_watch_logs_role_arn of this UserImportJobType.
        :type cloud_watch_logs_role_arn: str
        """

        self._cloud_watch_logs_role_arn = cloud_watch_logs_role_arn

    @property
    def imported_users(self):
        """Gets the imported_users of this UserImportJobType.


        :return: The imported_users of this UserImportJobType.
        :rtype: int
        """
        return self._imported_users

    @imported_users.setter
    def imported_users(self, imported_users):
        """Sets the imported_users of this UserImportJobType.


        :param imported_users: The imported_users of this UserImportJobType.
        :type imported_users: int
        """

        self._imported_users = imported_users

    @property
    def skipped_users(self):
        """Gets the skipped_users of this UserImportJobType.


        :return: The skipped_users of this UserImportJobType.
        :rtype: int
        """
        return self._skipped_users

    @skipped_users.setter
    def skipped_users(self, skipped_users):
        """Sets the skipped_users of this UserImportJobType.


        :param skipped_users: The skipped_users of this UserImportJobType.
        :type skipped_users: int
        """

        self._skipped_users = skipped_users

    @property
    def failed_users(self):
        """Gets the failed_users of this UserImportJobType.


        :return: The failed_users of this UserImportJobType.
        :rtype: int
        """
        return self._failed_users

    @failed_users.setter
    def failed_users(self, failed_users):
        """Sets the failed_users of this UserImportJobType.


        :param failed_users: The failed_users of this UserImportJobType.
        :type failed_users: int
        """

        self._failed_users = failed_users

    @property
    def completion_message(self):
        """Gets the completion_message of this UserImportJobType.


        :return: The completion_message of this UserImportJobType.
        :rtype: str
        """
        return self._completion_message

    @completion_message.setter
    def completion_message(self, completion_message):
        """Sets the completion_message of this UserImportJobType.


        :param completion_message: The completion_message of this UserImportJobType.
        :type completion_message: str
        """

        self._completion_message = completion_message
