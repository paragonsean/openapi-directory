# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdminGetUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool_id: str=None, username: str=None):
        """AdminGetUserRequest - a model defined in OpenAPI

        :param user_pool_id: The user_pool_id of this AdminGetUserRequest.
        :param username: The username of this AdminGetUserRequest.
        """
        self.openapi_types = {
            'user_pool_id': str,
            'username': str
        }

        self.attribute_map = {
            'user_pool_id': 'UserPoolId',
            'username': 'Username'
        }

        self._user_pool_id = user_pool_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminGetUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminGetUserRequest of this AdminGetUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this AdminGetUserRequest.


        :return: The user_pool_id of this AdminGetUserRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this AdminGetUserRequest.


        :param user_pool_id: The user_pool_id of this AdminGetUserRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def username(self):
        """Gets the username of this AdminGetUserRequest.


        :return: The username of this AdminGetUserRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AdminGetUserRequest.


        :param username: The username of this AdminGetUserRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
