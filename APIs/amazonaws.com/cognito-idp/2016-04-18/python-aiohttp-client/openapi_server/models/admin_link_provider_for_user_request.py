# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_link_provider_for_user_request_destination_user import AdminLinkProviderForUserRequestDestinationUser
from openapi_server.models.admin_link_provider_for_user_request_source_user import AdminLinkProviderForUserRequestSourceUser
from openapi_server import util


class AdminLinkProviderForUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool_id: str=None, destination_user: AdminLinkProviderForUserRequestDestinationUser=None, source_user: AdminLinkProviderForUserRequestSourceUser=None):
        """AdminLinkProviderForUserRequest - a model defined in OpenAPI

        :param user_pool_id: The user_pool_id of this AdminLinkProviderForUserRequest.
        :param destination_user: The destination_user of this AdminLinkProviderForUserRequest.
        :param source_user: The source_user of this AdminLinkProviderForUserRequest.
        """
        self.openapi_types = {
            'user_pool_id': str,
            'destination_user': AdminLinkProviderForUserRequestDestinationUser,
            'source_user': AdminLinkProviderForUserRequestSourceUser
        }

        self.attribute_map = {
            'user_pool_id': 'UserPoolId',
            'destination_user': 'DestinationUser',
            'source_user': 'SourceUser'
        }

        self._user_pool_id = user_pool_id
        self._destination_user = destination_user
        self._source_user = source_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminLinkProviderForUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminLinkProviderForUserRequest of this AdminLinkProviderForUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this AdminLinkProviderForUserRequest.


        :return: The user_pool_id of this AdminLinkProviderForUserRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this AdminLinkProviderForUserRequest.


        :param user_pool_id: The user_pool_id of this AdminLinkProviderForUserRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def destination_user(self):
        """Gets the destination_user of this AdminLinkProviderForUserRequest.


        :return: The destination_user of this AdminLinkProviderForUserRequest.
        :rtype: AdminLinkProviderForUserRequestDestinationUser
        """
        return self._destination_user

    @destination_user.setter
    def destination_user(self, destination_user):
        """Sets the destination_user of this AdminLinkProviderForUserRequest.


        :param destination_user: The destination_user of this AdminLinkProviderForUserRequest.
        :type destination_user: AdminLinkProviderForUserRequestDestinationUser
        """
        if destination_user is None:
            raise ValueError("Invalid value for `destination_user`, must not be `None`")

        self._destination_user = destination_user

    @property
    def source_user(self):
        """Gets the source_user of this AdminLinkProviderForUserRequest.


        :return: The source_user of this AdminLinkProviderForUserRequest.
        :rtype: AdminLinkProviderForUserRequestSourceUser
        """
        return self._source_user

    @source_user.setter
    def source_user(self, source_user):
        """Sets the source_user of this AdminLinkProviderForUserRequest.


        :param source_user: The source_user of this AdminLinkProviderForUserRequest.
        :type source_user: AdminLinkProviderForUserRequestSourceUser
        """
        if source_user is None:
            raise ValueError("Invalid value for `source_user`, must not be `None`")

        self._source_user = source_user
