# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceServerScopeType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope_name: str=None, scope_description: str=None):
        """ResourceServerScopeType - a model defined in OpenAPI

        :param scope_name: The scope_name of this ResourceServerScopeType.
        :param scope_description: The scope_description of this ResourceServerScopeType.
        """
        self.openapi_types = {
            'scope_name': str,
            'scope_description': str
        }

        self.attribute_map = {
            'scope_name': 'ScopeName',
            'scope_description': 'ScopeDescription'
        }

        self._scope_name = scope_name
        self._scope_description = scope_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceServerScopeType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceServerScopeType of this ResourceServerScopeType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope_name(self):
        """Gets the scope_name of this ResourceServerScopeType.


        :return: The scope_name of this ResourceServerScopeType.
        :rtype: str
        """
        return self._scope_name

    @scope_name.setter
    def scope_name(self, scope_name):
        """Sets the scope_name of this ResourceServerScopeType.


        :param scope_name: The scope_name of this ResourceServerScopeType.
        :type scope_name: str
        """
        if scope_name is None:
            raise ValueError("Invalid value for `scope_name`, must not be `None`")

        self._scope_name = scope_name

    @property
    def scope_description(self):
        """Gets the scope_description of this ResourceServerScopeType.


        :return: The scope_description of this ResourceServerScopeType.
        :rtype: str
        """
        return self._scope_description

    @scope_description.setter
    def scope_description(self, scope_description):
        """Sets the scope_description of this ResourceServerScopeType.


        :param scope_description: The scope_description of this ResourceServerScopeType.
        :type scope_description: str
        """
        if scope_description is None:
            raise ValueError("Invalid value for `scope_description`, must not be `None`")

        self._scope_description = scope_description
