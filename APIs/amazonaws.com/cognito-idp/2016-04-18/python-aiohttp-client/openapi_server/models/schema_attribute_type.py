# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_data_type import AttributeDataType
from openapi_server.models.schema_attribute_type_number_attribute_constraints import SchemaAttributeTypeNumberAttributeConstraints
from openapi_server.models.schema_attribute_type_string_attribute_constraints import SchemaAttributeTypeStringAttributeConstraints
from openapi_server import util


class SchemaAttributeType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, attribute_data_type: AttributeDataType=None, developer_only_attribute: bool=None, mutable: bool=None, required: bool=None, number_attribute_constraints: SchemaAttributeTypeNumberAttributeConstraints=None, string_attribute_constraints: SchemaAttributeTypeStringAttributeConstraints=None):
        """SchemaAttributeType - a model defined in OpenAPI

        :param name: The name of this SchemaAttributeType.
        :param attribute_data_type: The attribute_data_type of this SchemaAttributeType.
        :param developer_only_attribute: The developer_only_attribute of this SchemaAttributeType.
        :param mutable: The mutable of this SchemaAttributeType.
        :param required: The required of this SchemaAttributeType.
        :param number_attribute_constraints: The number_attribute_constraints of this SchemaAttributeType.
        :param string_attribute_constraints: The string_attribute_constraints of this SchemaAttributeType.
        """
        self.openapi_types = {
            'name': str,
            'attribute_data_type': AttributeDataType,
            'developer_only_attribute': bool,
            'mutable': bool,
            'required': bool,
            'number_attribute_constraints': SchemaAttributeTypeNumberAttributeConstraints,
            'string_attribute_constraints': SchemaAttributeTypeStringAttributeConstraints
        }

        self.attribute_map = {
            'name': 'Name',
            'attribute_data_type': 'AttributeDataType',
            'developer_only_attribute': 'DeveloperOnlyAttribute',
            'mutable': 'Mutable',
            'required': 'Required',
            'number_attribute_constraints': 'NumberAttributeConstraints',
            'string_attribute_constraints': 'StringAttributeConstraints'
        }

        self._name = name
        self._attribute_data_type = attribute_data_type
        self._developer_only_attribute = developer_only_attribute
        self._mutable = mutable
        self._required = required
        self._number_attribute_constraints = number_attribute_constraints
        self._string_attribute_constraints = string_attribute_constraints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SchemaAttributeType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SchemaAttributeType of this SchemaAttributeType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SchemaAttributeType.


        :return: The name of this SchemaAttributeType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SchemaAttributeType.


        :param name: The name of this SchemaAttributeType.
        :type name: str
        """

        self._name = name

    @property
    def attribute_data_type(self):
        """Gets the attribute_data_type of this SchemaAttributeType.


        :return: The attribute_data_type of this SchemaAttributeType.
        :rtype: AttributeDataType
        """
        return self._attribute_data_type

    @attribute_data_type.setter
    def attribute_data_type(self, attribute_data_type):
        """Sets the attribute_data_type of this SchemaAttributeType.


        :param attribute_data_type: The attribute_data_type of this SchemaAttributeType.
        :type attribute_data_type: AttributeDataType
        """

        self._attribute_data_type = attribute_data_type

    @property
    def developer_only_attribute(self):
        """Gets the developer_only_attribute of this SchemaAttributeType.


        :return: The developer_only_attribute of this SchemaAttributeType.
        :rtype: bool
        """
        return self._developer_only_attribute

    @developer_only_attribute.setter
    def developer_only_attribute(self, developer_only_attribute):
        """Sets the developer_only_attribute of this SchemaAttributeType.


        :param developer_only_attribute: The developer_only_attribute of this SchemaAttributeType.
        :type developer_only_attribute: bool
        """

        self._developer_only_attribute = developer_only_attribute

    @property
    def mutable(self):
        """Gets the mutable of this SchemaAttributeType.


        :return: The mutable of this SchemaAttributeType.
        :rtype: bool
        """
        return self._mutable

    @mutable.setter
    def mutable(self, mutable):
        """Sets the mutable of this SchemaAttributeType.


        :param mutable: The mutable of this SchemaAttributeType.
        :type mutable: bool
        """

        self._mutable = mutable

    @property
    def required(self):
        """Gets the required of this SchemaAttributeType.


        :return: The required of this SchemaAttributeType.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this SchemaAttributeType.


        :param required: The required of this SchemaAttributeType.
        :type required: bool
        """

        self._required = required

    @property
    def number_attribute_constraints(self):
        """Gets the number_attribute_constraints of this SchemaAttributeType.


        :return: The number_attribute_constraints of this SchemaAttributeType.
        :rtype: SchemaAttributeTypeNumberAttributeConstraints
        """
        return self._number_attribute_constraints

    @number_attribute_constraints.setter
    def number_attribute_constraints(self, number_attribute_constraints):
        """Sets the number_attribute_constraints of this SchemaAttributeType.


        :param number_attribute_constraints: The number_attribute_constraints of this SchemaAttributeType.
        :type number_attribute_constraints: SchemaAttributeTypeNumberAttributeConstraints
        """

        self._number_attribute_constraints = number_attribute_constraints

    @property
    def string_attribute_constraints(self):
        """Gets the string_attribute_constraints of this SchemaAttributeType.


        :return: The string_attribute_constraints of this SchemaAttributeType.
        :rtype: SchemaAttributeTypeStringAttributeConstraints
        """
        return self._string_attribute_constraints

    @string_attribute_constraints.setter
    def string_attribute_constraints(self, string_attribute_constraints):
        """Sets the string_attribute_constraints of this SchemaAttributeType.


        :param string_attribute_constraints: The string_attribute_constraints of this SchemaAttributeType.
        :type string_attribute_constraints: SchemaAttributeTypeStringAttributeConstraints
        """

        self._string_attribute_constraints = string_attribute_constraints
