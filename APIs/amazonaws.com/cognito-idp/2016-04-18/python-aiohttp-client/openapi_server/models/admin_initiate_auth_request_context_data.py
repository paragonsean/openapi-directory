# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdminInitiateAuthRequestContextData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, server_name: str=None, server_path: str=None, http_headers: List=None, encoded_data: str=None):
        """AdminInitiateAuthRequestContextData - a model defined in OpenAPI

        :param ip_address: The ip_address of this AdminInitiateAuthRequestContextData.
        :param server_name: The server_name of this AdminInitiateAuthRequestContextData.
        :param server_path: The server_path of this AdminInitiateAuthRequestContextData.
        :param http_headers: The http_headers of this AdminInitiateAuthRequestContextData.
        :param encoded_data: The encoded_data of this AdminInitiateAuthRequestContextData.
        """
        self.openapi_types = {
            'ip_address': str,
            'server_name': str,
            'server_path': str,
            'http_headers': List,
            'encoded_data': str
        }

        self.attribute_map = {
            'ip_address': 'IpAddress',
            'server_name': 'ServerName',
            'server_path': 'ServerPath',
            'http_headers': 'HttpHeaders',
            'encoded_data': 'EncodedData'
        }

        self._ip_address = ip_address
        self._server_name = server_name
        self._server_path = server_path
        self._http_headers = http_headers
        self._encoded_data = encoded_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminInitiateAuthRequestContextData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminInitiateAuthRequest_ContextData of this AdminInitiateAuthRequestContextData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this AdminInitiateAuthRequestContextData.


        :return: The ip_address of this AdminInitiateAuthRequestContextData.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this AdminInitiateAuthRequestContextData.


        :param ip_address: The ip_address of this AdminInitiateAuthRequestContextData.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address

    @property
    def server_name(self):
        """Gets the server_name of this AdminInitiateAuthRequestContextData.


        :return: The server_name of this AdminInitiateAuthRequestContextData.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this AdminInitiateAuthRequestContextData.


        :param server_name: The server_name of this AdminInitiateAuthRequestContextData.
        :type server_name: str
        """
        if server_name is None:
            raise ValueError("Invalid value for `server_name`, must not be `None`")

        self._server_name = server_name

    @property
    def server_path(self):
        """Gets the server_path of this AdminInitiateAuthRequestContextData.


        :return: The server_path of this AdminInitiateAuthRequestContextData.
        :rtype: str
        """
        return self._server_path

    @server_path.setter
    def server_path(self, server_path):
        """Sets the server_path of this AdminInitiateAuthRequestContextData.


        :param server_path: The server_path of this AdminInitiateAuthRequestContextData.
        :type server_path: str
        """
        if server_path is None:
            raise ValueError("Invalid value for `server_path`, must not be `None`")

        self._server_path = server_path

    @property
    def http_headers(self):
        """Gets the http_headers of this AdminInitiateAuthRequestContextData.


        :return: The http_headers of this AdminInitiateAuthRequestContextData.
        :rtype: List
        """
        return self._http_headers

    @http_headers.setter
    def http_headers(self, http_headers):
        """Sets the http_headers of this AdminInitiateAuthRequestContextData.


        :param http_headers: The http_headers of this AdminInitiateAuthRequestContextData.
        :type http_headers: List
        """
        if http_headers is None:
            raise ValueError("Invalid value for `http_headers`, must not be `None`")

        self._http_headers = http_headers

    @property
    def encoded_data(self):
        """Gets the encoded_data of this AdminInitiateAuthRequestContextData.


        :return: The encoded_data of this AdminInitiateAuthRequestContextData.
        :rtype: str
        """
        return self._encoded_data

    @encoded_data.setter
    def encoded_data(self, encoded_data):
        """Sets the encoded_data of this AdminInitiateAuthRequestContextData.


        :param encoded_data: The encoded_data of this AdminInitiateAuthRequestContextData.
        :type encoded_data: str
        """

        self._encoded_data = encoded_data
