# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteUserAttributesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_attribute_names: List=None, access_token: str=None):
        """DeleteUserAttributesRequest - a model defined in OpenAPI

        :param user_attribute_names: The user_attribute_names of this DeleteUserAttributesRequest.
        :param access_token: The access_token of this DeleteUserAttributesRequest.
        """
        self.openapi_types = {
            'user_attribute_names': List,
            'access_token': str
        }

        self.attribute_map = {
            'user_attribute_names': 'UserAttributeNames',
            'access_token': 'AccessToken'
        }

        self._user_attribute_names = user_attribute_names
        self._access_token = access_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteUserAttributesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteUserAttributesRequest of this DeleteUserAttributesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_attribute_names(self):
        """Gets the user_attribute_names of this DeleteUserAttributesRequest.


        :return: The user_attribute_names of this DeleteUserAttributesRequest.
        :rtype: List
        """
        return self._user_attribute_names

    @user_attribute_names.setter
    def user_attribute_names(self, user_attribute_names):
        """Sets the user_attribute_names of this DeleteUserAttributesRequest.


        :param user_attribute_names: The user_attribute_names of this DeleteUserAttributesRequest.
        :type user_attribute_names: List
        """
        if user_attribute_names is None:
            raise ValueError("Invalid value for `user_attribute_names`, must not be `None`")

        self._user_attribute_names = user_attribute_names

    @property
    def access_token(self):
        """Gets the access_token of this DeleteUserAttributesRequest.


        :return: The access_token of this DeleteUserAttributesRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this DeleteUserAttributesRequest.


        :param access_token: The access_token of this DeleteUserAttributesRequest.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token
