# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_takeover_risk_configuration_type_actions import AccountTakeoverRiskConfigurationTypeActions
from openapi_server.models.account_takeover_risk_configuration_type_notify_configuration import AccountTakeoverRiskConfigurationTypeNotifyConfiguration
from openapi_server import util


class AccountTakeoverRiskConfigurationType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notify_configuration: AccountTakeoverRiskConfigurationTypeNotifyConfiguration=None, actions: AccountTakeoverRiskConfigurationTypeActions=None):
        """AccountTakeoverRiskConfigurationType - a model defined in OpenAPI

        :param notify_configuration: The notify_configuration of this AccountTakeoverRiskConfigurationType.
        :param actions: The actions of this AccountTakeoverRiskConfigurationType.
        """
        self.openapi_types = {
            'notify_configuration': AccountTakeoverRiskConfigurationTypeNotifyConfiguration,
            'actions': AccountTakeoverRiskConfigurationTypeActions
        }

        self.attribute_map = {
            'notify_configuration': 'NotifyConfiguration',
            'actions': 'Actions'
        }

        self._notify_configuration = notify_configuration
        self._actions = actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountTakeoverRiskConfigurationType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountTakeoverRiskConfigurationType of this AccountTakeoverRiskConfigurationType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notify_configuration(self):
        """Gets the notify_configuration of this AccountTakeoverRiskConfigurationType.


        :return: The notify_configuration of this AccountTakeoverRiskConfigurationType.
        :rtype: AccountTakeoverRiskConfigurationTypeNotifyConfiguration
        """
        return self._notify_configuration

    @notify_configuration.setter
    def notify_configuration(self, notify_configuration):
        """Sets the notify_configuration of this AccountTakeoverRiskConfigurationType.


        :param notify_configuration: The notify_configuration of this AccountTakeoverRiskConfigurationType.
        :type notify_configuration: AccountTakeoverRiskConfigurationTypeNotifyConfiguration
        """

        self._notify_configuration = notify_configuration

    @property
    def actions(self):
        """Gets the actions of this AccountTakeoverRiskConfigurationType.


        :return: The actions of this AccountTakeoverRiskConfigurationType.
        :rtype: AccountTakeoverRiskConfigurationTypeActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AccountTakeoverRiskConfigurationType.


        :param actions: The actions of this AccountTakeoverRiskConfigurationType.
        :type actions: AccountTakeoverRiskConfigurationTypeActions
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions
