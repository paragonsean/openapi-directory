# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_user_pool_domain_request_custom_domain_config import CreateUserPoolDomainRequestCustomDomainConfig
from openapi_server import util


class CreateUserPoolDomainRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, user_pool_id: str=None, custom_domain_config: CreateUserPoolDomainRequestCustomDomainConfig=None):
        """CreateUserPoolDomainRequest - a model defined in OpenAPI

        :param domain: The domain of this CreateUserPoolDomainRequest.
        :param user_pool_id: The user_pool_id of this CreateUserPoolDomainRequest.
        :param custom_domain_config: The custom_domain_config of this CreateUserPoolDomainRequest.
        """
        self.openapi_types = {
            'domain': str,
            'user_pool_id': str,
            'custom_domain_config': CreateUserPoolDomainRequestCustomDomainConfig
        }

        self.attribute_map = {
            'domain': 'Domain',
            'user_pool_id': 'UserPoolId',
            'custom_domain_config': 'CustomDomainConfig'
        }

        self._domain = domain
        self._user_pool_id = user_pool_id
        self._custom_domain_config = custom_domain_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUserPoolDomainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUserPoolDomainRequest of this CreateUserPoolDomainRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this CreateUserPoolDomainRequest.


        :return: The domain of this CreateUserPoolDomainRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CreateUserPoolDomainRequest.


        :param domain: The domain of this CreateUserPoolDomainRequest.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this CreateUserPoolDomainRequest.


        :return: The user_pool_id of this CreateUserPoolDomainRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this CreateUserPoolDomainRequest.


        :param user_pool_id: The user_pool_id of this CreateUserPoolDomainRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def custom_domain_config(self):
        """Gets the custom_domain_config of this CreateUserPoolDomainRequest.


        :return: The custom_domain_config of this CreateUserPoolDomainRequest.
        :rtype: CreateUserPoolDomainRequestCustomDomainConfig
        """
        return self._custom_domain_config

    @custom_domain_config.setter
    def custom_domain_config(self, custom_domain_config):
        """Sets the custom_domain_config of this CreateUserPoolDomainRequest.


        :param custom_domain_config: The custom_domain_config of this CreateUserPoolDomainRequest.
        :type custom_domain_config: CreateUserPoolDomainRequestCustomDomainConfig
        """

        self._custom_domain_config = custom_domain_config
