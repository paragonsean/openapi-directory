# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.set_user_pool_mfa_config_response_sms_mfa_configuration import SetUserPoolMfaConfigResponseSmsMfaConfiguration
from openapi_server.models.set_user_pool_mfa_config_response_software_token_mfa_configuration import SetUserPoolMfaConfigResponseSoftwareTokenMfaConfiguration
from openapi_server.models.user_pool_mfa_type import UserPoolMfaType
from openapi_server import util


class SetUserPoolMfaConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool_id: str=None, sms_mfa_configuration: SetUserPoolMfaConfigResponseSmsMfaConfiguration=None, software_token_mfa_configuration: SetUserPoolMfaConfigResponseSoftwareTokenMfaConfiguration=None, mfa_configuration: UserPoolMfaType=None):
        """SetUserPoolMfaConfigRequest - a model defined in OpenAPI

        :param user_pool_id: The user_pool_id of this SetUserPoolMfaConfigRequest.
        :param sms_mfa_configuration: The sms_mfa_configuration of this SetUserPoolMfaConfigRequest.
        :param software_token_mfa_configuration: The software_token_mfa_configuration of this SetUserPoolMfaConfigRequest.
        :param mfa_configuration: The mfa_configuration of this SetUserPoolMfaConfigRequest.
        """
        self.openapi_types = {
            'user_pool_id': str,
            'sms_mfa_configuration': SetUserPoolMfaConfigResponseSmsMfaConfiguration,
            'software_token_mfa_configuration': SetUserPoolMfaConfigResponseSoftwareTokenMfaConfiguration,
            'mfa_configuration': UserPoolMfaType
        }

        self.attribute_map = {
            'user_pool_id': 'UserPoolId',
            'sms_mfa_configuration': 'SmsMfaConfiguration',
            'software_token_mfa_configuration': 'SoftwareTokenMfaConfiguration',
            'mfa_configuration': 'MfaConfiguration'
        }

        self._user_pool_id = user_pool_id
        self._sms_mfa_configuration = sms_mfa_configuration
        self._software_token_mfa_configuration = software_token_mfa_configuration
        self._mfa_configuration = mfa_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetUserPoolMfaConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetUserPoolMfaConfigRequest of this SetUserPoolMfaConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this SetUserPoolMfaConfigRequest.


        :return: The user_pool_id of this SetUserPoolMfaConfigRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this SetUserPoolMfaConfigRequest.


        :param user_pool_id: The user_pool_id of this SetUserPoolMfaConfigRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def sms_mfa_configuration(self):
        """Gets the sms_mfa_configuration of this SetUserPoolMfaConfigRequest.


        :return: The sms_mfa_configuration of this SetUserPoolMfaConfigRequest.
        :rtype: SetUserPoolMfaConfigResponseSmsMfaConfiguration
        """
        return self._sms_mfa_configuration

    @sms_mfa_configuration.setter
    def sms_mfa_configuration(self, sms_mfa_configuration):
        """Sets the sms_mfa_configuration of this SetUserPoolMfaConfigRequest.


        :param sms_mfa_configuration: The sms_mfa_configuration of this SetUserPoolMfaConfigRequest.
        :type sms_mfa_configuration: SetUserPoolMfaConfigResponseSmsMfaConfiguration
        """

        self._sms_mfa_configuration = sms_mfa_configuration

    @property
    def software_token_mfa_configuration(self):
        """Gets the software_token_mfa_configuration of this SetUserPoolMfaConfigRequest.


        :return: The software_token_mfa_configuration of this SetUserPoolMfaConfigRequest.
        :rtype: SetUserPoolMfaConfigResponseSoftwareTokenMfaConfiguration
        """
        return self._software_token_mfa_configuration

    @software_token_mfa_configuration.setter
    def software_token_mfa_configuration(self, software_token_mfa_configuration):
        """Sets the software_token_mfa_configuration of this SetUserPoolMfaConfigRequest.


        :param software_token_mfa_configuration: The software_token_mfa_configuration of this SetUserPoolMfaConfigRequest.
        :type software_token_mfa_configuration: SetUserPoolMfaConfigResponseSoftwareTokenMfaConfiguration
        """

        self._software_token_mfa_configuration = software_token_mfa_configuration

    @property
    def mfa_configuration(self):
        """Gets the mfa_configuration of this SetUserPoolMfaConfigRequest.


        :return: The mfa_configuration of this SetUserPoolMfaConfigRequest.
        :rtype: UserPoolMfaType
        """
        return self._mfa_configuration

    @mfa_configuration.setter
    def mfa_configuration(self, mfa_configuration):
        """Sets the mfa_configuration of this SetUserPoolMfaConfigRequest.


        :param mfa_configuration: The mfa_configuration of this SetUserPoolMfaConfigRequest.
        :type mfa_configuration: UserPoolMfaType
        """

        self._mfa_configuration = mfa_configuration
