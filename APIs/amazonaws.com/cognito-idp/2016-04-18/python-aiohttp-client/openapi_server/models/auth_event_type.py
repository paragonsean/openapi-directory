# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_event_type_event_context_data import AuthEventTypeEventContextData
from openapi_server.models.auth_event_type_event_feedback import AuthEventTypeEventFeedback
from openapi_server.models.auth_event_type_event_risk import AuthEventTypeEventRisk
from openapi_server.models.event_response_type import EventResponseType
from openapi_server.models.event_type import EventType
from openapi_server import util


class AuthEventType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_id: str=None, event_type: EventType=None, creation_date: datetime=None, event_response: EventResponseType=None, event_risk: AuthEventTypeEventRisk=None, challenge_responses: List=None, event_context_data: AuthEventTypeEventContextData=None, event_feedback: AuthEventTypeEventFeedback=None):
        """AuthEventType - a model defined in OpenAPI

        :param event_id: The event_id of this AuthEventType.
        :param event_type: The event_type of this AuthEventType.
        :param creation_date: The creation_date of this AuthEventType.
        :param event_response: The event_response of this AuthEventType.
        :param event_risk: The event_risk of this AuthEventType.
        :param challenge_responses: The challenge_responses of this AuthEventType.
        :param event_context_data: The event_context_data of this AuthEventType.
        :param event_feedback: The event_feedback of this AuthEventType.
        """
        self.openapi_types = {
            'event_id': str,
            'event_type': EventType,
            'creation_date': datetime,
            'event_response': EventResponseType,
            'event_risk': AuthEventTypeEventRisk,
            'challenge_responses': List,
            'event_context_data': AuthEventTypeEventContextData,
            'event_feedback': AuthEventTypeEventFeedback
        }

        self.attribute_map = {
            'event_id': 'EventId',
            'event_type': 'EventType',
            'creation_date': 'CreationDate',
            'event_response': 'EventResponse',
            'event_risk': 'EventRisk',
            'challenge_responses': 'ChallengeResponses',
            'event_context_data': 'EventContextData',
            'event_feedback': 'EventFeedback'
        }

        self._event_id = event_id
        self._event_type = event_type
        self._creation_date = creation_date
        self._event_response = event_response
        self._event_risk = event_risk
        self._challenge_responses = challenge_responses
        self._event_context_data = event_context_data
        self._event_feedback = event_feedback

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthEventType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthEventType of this AuthEventType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_id(self):
        """Gets the event_id of this AuthEventType.


        :return: The event_id of this AuthEventType.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this AuthEventType.


        :param event_id: The event_id of this AuthEventType.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def event_type(self):
        """Gets the event_type of this AuthEventType.


        :return: The event_type of this AuthEventType.
        :rtype: EventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this AuthEventType.


        :param event_type: The event_type of this AuthEventType.
        :type event_type: EventType
        """

        self._event_type = event_type

    @property
    def creation_date(self):
        """Gets the creation_date of this AuthEventType.


        :return: The creation_date of this AuthEventType.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AuthEventType.


        :param creation_date: The creation_date of this AuthEventType.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def event_response(self):
        """Gets the event_response of this AuthEventType.


        :return: The event_response of this AuthEventType.
        :rtype: EventResponseType
        """
        return self._event_response

    @event_response.setter
    def event_response(self, event_response):
        """Sets the event_response of this AuthEventType.


        :param event_response: The event_response of this AuthEventType.
        :type event_response: EventResponseType
        """

        self._event_response = event_response

    @property
    def event_risk(self):
        """Gets the event_risk of this AuthEventType.


        :return: The event_risk of this AuthEventType.
        :rtype: AuthEventTypeEventRisk
        """
        return self._event_risk

    @event_risk.setter
    def event_risk(self, event_risk):
        """Sets the event_risk of this AuthEventType.


        :param event_risk: The event_risk of this AuthEventType.
        :type event_risk: AuthEventTypeEventRisk
        """

        self._event_risk = event_risk

    @property
    def challenge_responses(self):
        """Gets the challenge_responses of this AuthEventType.


        :return: The challenge_responses of this AuthEventType.
        :rtype: List
        """
        return self._challenge_responses

    @challenge_responses.setter
    def challenge_responses(self, challenge_responses):
        """Sets the challenge_responses of this AuthEventType.


        :param challenge_responses: The challenge_responses of this AuthEventType.
        :type challenge_responses: List
        """

        self._challenge_responses = challenge_responses

    @property
    def event_context_data(self):
        """Gets the event_context_data of this AuthEventType.


        :return: The event_context_data of this AuthEventType.
        :rtype: AuthEventTypeEventContextData
        """
        return self._event_context_data

    @event_context_data.setter
    def event_context_data(self, event_context_data):
        """Sets the event_context_data of this AuthEventType.


        :param event_context_data: The event_context_data of this AuthEventType.
        :type event_context_data: AuthEventTypeEventContextData
        """

        self._event_context_data = event_context_data

    @property
    def event_feedback(self):
        """Gets the event_feedback of this AuthEventType.


        :return: The event_feedback of this AuthEventType.
        :rtype: AuthEventTypeEventFeedback
        """
        return self._event_feedback

    @event_feedback.setter
    def event_feedback(self, event_feedback):
        """Sets the event_feedback of this AuthEventType.


        :param event_feedback: The event_feedback of this AuthEventType.
        :type event_feedback: AuthEventTypeEventFeedback
        """

        self._event_feedback = event_feedback
