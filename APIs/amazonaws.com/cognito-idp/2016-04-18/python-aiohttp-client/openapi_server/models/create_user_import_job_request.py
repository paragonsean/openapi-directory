# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateUserImportJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_name: str=None, user_pool_id: str=None, cloud_watch_logs_role_arn: str=None):
        """CreateUserImportJobRequest - a model defined in OpenAPI

        :param job_name: The job_name of this CreateUserImportJobRequest.
        :param user_pool_id: The user_pool_id of this CreateUserImportJobRequest.
        :param cloud_watch_logs_role_arn: The cloud_watch_logs_role_arn of this CreateUserImportJobRequest.
        """
        self.openapi_types = {
            'job_name': str,
            'user_pool_id': str,
            'cloud_watch_logs_role_arn': str
        }

        self.attribute_map = {
            'job_name': 'JobName',
            'user_pool_id': 'UserPoolId',
            'cloud_watch_logs_role_arn': 'CloudWatchLogsRoleArn'
        }

        self._job_name = job_name
        self._user_pool_id = user_pool_id
        self._cloud_watch_logs_role_arn = cloud_watch_logs_role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUserImportJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUserImportJobRequest of this CreateUserImportJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_name(self):
        """Gets the job_name of this CreateUserImportJobRequest.


        :return: The job_name of this CreateUserImportJobRequest.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this CreateUserImportJobRequest.


        :param job_name: The job_name of this CreateUserImportJobRequest.
        :type job_name: str
        """
        if job_name is None:
            raise ValueError("Invalid value for `job_name`, must not be `None`")

        self._job_name = job_name

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this CreateUserImportJobRequest.


        :return: The user_pool_id of this CreateUserImportJobRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this CreateUserImportJobRequest.


        :param user_pool_id: The user_pool_id of this CreateUserImportJobRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def cloud_watch_logs_role_arn(self):
        """Gets the cloud_watch_logs_role_arn of this CreateUserImportJobRequest.


        :return: The cloud_watch_logs_role_arn of this CreateUserImportJobRequest.
        :rtype: str
        """
        return self._cloud_watch_logs_role_arn

    @cloud_watch_logs_role_arn.setter
    def cloud_watch_logs_role_arn(self, cloud_watch_logs_role_arn):
        """Sets the cloud_watch_logs_role_arn of this CreateUserImportJobRequest.


        :param cloud_watch_logs_role_arn: The cloud_watch_logs_role_arn of this CreateUserImportJobRequest.
        :type cloud_watch_logs_role_arn: str
        """
        if cloud_watch_logs_role_arn is None:
            raise ValueError("Invalid value for `cloud_watch_logs_role_arn`, must not be `None`")

        self._cloud_watch_logs_role_arn = cloud_watch_logs_role_arn
