# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdminUpdateUserAttributesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_pool_id: str=None, username: str=None, user_attributes: List=None, client_metadata: Dict=None):
        """AdminUpdateUserAttributesRequest - a model defined in OpenAPI

        :param user_pool_id: The user_pool_id of this AdminUpdateUserAttributesRequest.
        :param username: The username of this AdminUpdateUserAttributesRequest.
        :param user_attributes: The user_attributes of this AdminUpdateUserAttributesRequest.
        :param client_metadata: The client_metadata of this AdminUpdateUserAttributesRequest.
        """
        self.openapi_types = {
            'user_pool_id': str,
            'username': str,
            'user_attributes': List,
            'client_metadata': Dict
        }

        self.attribute_map = {
            'user_pool_id': 'UserPoolId',
            'username': 'Username',
            'user_attributes': 'UserAttributes',
            'client_metadata': 'ClientMetadata'
        }

        self._user_pool_id = user_pool_id
        self._username = username
        self._user_attributes = user_attributes
        self._client_metadata = client_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminUpdateUserAttributesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminUpdateUserAttributesRequest of this AdminUpdateUserAttributesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_pool_id(self):
        """Gets the user_pool_id of this AdminUpdateUserAttributesRequest.


        :return: The user_pool_id of this AdminUpdateUserAttributesRequest.
        :rtype: str
        """
        return self._user_pool_id

    @user_pool_id.setter
    def user_pool_id(self, user_pool_id):
        """Sets the user_pool_id of this AdminUpdateUserAttributesRequest.


        :param user_pool_id: The user_pool_id of this AdminUpdateUserAttributesRequest.
        :type user_pool_id: str
        """
        if user_pool_id is None:
            raise ValueError("Invalid value for `user_pool_id`, must not be `None`")

        self._user_pool_id = user_pool_id

    @property
    def username(self):
        """Gets the username of this AdminUpdateUserAttributesRequest.


        :return: The username of this AdminUpdateUserAttributesRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AdminUpdateUserAttributesRequest.


        :param username: The username of this AdminUpdateUserAttributesRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def user_attributes(self):
        """Gets the user_attributes of this AdminUpdateUserAttributesRequest.


        :return: The user_attributes of this AdminUpdateUserAttributesRequest.
        :rtype: List
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this AdminUpdateUserAttributesRequest.


        :param user_attributes: The user_attributes of this AdminUpdateUserAttributesRequest.
        :type user_attributes: List
        """
        if user_attributes is None:
            raise ValueError("Invalid value for `user_attributes`, must not be `None`")

        self._user_attributes = user_attributes

    @property
    def client_metadata(self):
        """Gets the client_metadata of this AdminUpdateUserAttributesRequest.


        :return: The client_metadata of this AdminUpdateUserAttributesRequest.
        :rtype: Dict
        """
        return self._client_metadata

    @client_metadata.setter
    def client_metadata(self, client_metadata):
        """Sets the client_metadata of this AdminUpdateUserAttributesRequest.


        :param client_metadata: The client_metadata of this AdminUpdateUserAttributesRequest.
        :type client_metadata: Dict
        """

        self._client_metadata = client_metadata
