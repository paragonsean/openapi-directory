# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compromised_credentials_risk_configuration_type_actions import CompromisedCredentialsRiskConfigurationTypeActions
from openapi_server import util


class RiskConfigurationTypeCompromisedCredentialsRiskConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_filter: List=None, actions: CompromisedCredentialsRiskConfigurationTypeActions=None):
        """RiskConfigurationTypeCompromisedCredentialsRiskConfiguration - a model defined in OpenAPI

        :param event_filter: The event_filter of this RiskConfigurationTypeCompromisedCredentialsRiskConfiguration.
        :param actions: The actions of this RiskConfigurationTypeCompromisedCredentialsRiskConfiguration.
        """
        self.openapi_types = {
            'event_filter': List,
            'actions': CompromisedCredentialsRiskConfigurationTypeActions
        }

        self.attribute_map = {
            'event_filter': 'EventFilter',
            'actions': 'Actions'
        }

        self._event_filter = event_filter
        self._actions = actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RiskConfigurationTypeCompromisedCredentialsRiskConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RiskConfigurationType_CompromisedCredentialsRiskConfiguration of this RiskConfigurationTypeCompromisedCredentialsRiskConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_filter(self):
        """Gets the event_filter of this RiskConfigurationTypeCompromisedCredentialsRiskConfiguration.


        :return: The event_filter of this RiskConfigurationTypeCompromisedCredentialsRiskConfiguration.
        :rtype: List
        """
        return self._event_filter

    @event_filter.setter
    def event_filter(self, event_filter):
        """Sets the event_filter of this RiskConfigurationTypeCompromisedCredentialsRiskConfiguration.


        :param event_filter: The event_filter of this RiskConfigurationTypeCompromisedCredentialsRiskConfiguration.
        :type event_filter: List
        """

        self._event_filter = event_filter

    @property
    def actions(self):
        """Gets the actions of this RiskConfigurationTypeCompromisedCredentialsRiskConfiguration.


        :return: The actions of this RiskConfigurationTypeCompromisedCredentialsRiskConfiguration.
        :rtype: CompromisedCredentialsRiskConfigurationTypeActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this RiskConfigurationTypeCompromisedCredentialsRiskConfiguration.


        :param actions: The actions of this RiskConfigurationTypeCompromisedCredentialsRiskConfiguration.
        :type actions: CompromisedCredentialsRiskConfigurationTypeActions
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions
