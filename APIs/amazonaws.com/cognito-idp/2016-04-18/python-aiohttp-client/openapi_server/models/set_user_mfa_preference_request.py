# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.set_user_mfa_preference_request_sms_mfa_settings import SetUserMFAPreferenceRequestSMSMfaSettings
from openapi_server.models.set_user_mfa_preference_request_software_token_mfa_settings import SetUserMFAPreferenceRequestSoftwareTokenMfaSettings
from openapi_server import util


class SetUserMFAPreferenceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sms_mfa_settings: SetUserMFAPreferenceRequestSMSMfaSettings=None, software_token_mfa_settings: SetUserMFAPreferenceRequestSoftwareTokenMfaSettings=None, access_token: str=None):
        """SetUserMFAPreferenceRequest - a model defined in OpenAPI

        :param sms_mfa_settings: The sms_mfa_settings of this SetUserMFAPreferenceRequest.
        :param software_token_mfa_settings: The software_token_mfa_settings of this SetUserMFAPreferenceRequest.
        :param access_token: The access_token of this SetUserMFAPreferenceRequest.
        """
        self.openapi_types = {
            'sms_mfa_settings': SetUserMFAPreferenceRequestSMSMfaSettings,
            'software_token_mfa_settings': SetUserMFAPreferenceRequestSoftwareTokenMfaSettings,
            'access_token': str
        }

        self.attribute_map = {
            'sms_mfa_settings': 'SMSMfaSettings',
            'software_token_mfa_settings': 'SoftwareTokenMfaSettings',
            'access_token': 'AccessToken'
        }

        self._sms_mfa_settings = sms_mfa_settings
        self._software_token_mfa_settings = software_token_mfa_settings
        self._access_token = access_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetUserMFAPreferenceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetUserMFAPreferenceRequest of this SetUserMFAPreferenceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sms_mfa_settings(self):
        """Gets the sms_mfa_settings of this SetUserMFAPreferenceRequest.


        :return: The sms_mfa_settings of this SetUserMFAPreferenceRequest.
        :rtype: SetUserMFAPreferenceRequestSMSMfaSettings
        """
        return self._sms_mfa_settings

    @sms_mfa_settings.setter
    def sms_mfa_settings(self, sms_mfa_settings):
        """Sets the sms_mfa_settings of this SetUserMFAPreferenceRequest.


        :param sms_mfa_settings: The sms_mfa_settings of this SetUserMFAPreferenceRequest.
        :type sms_mfa_settings: SetUserMFAPreferenceRequestSMSMfaSettings
        """

        self._sms_mfa_settings = sms_mfa_settings

    @property
    def software_token_mfa_settings(self):
        """Gets the software_token_mfa_settings of this SetUserMFAPreferenceRequest.


        :return: The software_token_mfa_settings of this SetUserMFAPreferenceRequest.
        :rtype: SetUserMFAPreferenceRequestSoftwareTokenMfaSettings
        """
        return self._software_token_mfa_settings

    @software_token_mfa_settings.setter
    def software_token_mfa_settings(self, software_token_mfa_settings):
        """Sets the software_token_mfa_settings of this SetUserMFAPreferenceRequest.


        :param software_token_mfa_settings: The software_token_mfa_settings of this SetUserMFAPreferenceRequest.
        :type software_token_mfa_settings: SetUserMFAPreferenceRequestSoftwareTokenMfaSettings
        """

        self._software_token_mfa_settings = software_token_mfa_settings

    @property
    def access_token(self):
        """Gets the access_token of this SetUserMFAPreferenceRequest.


        :return: The access_token of this SetUserMFAPreferenceRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this SetUserMFAPreferenceRequest.


        :param access_token: The access_token of this SetUserMFAPreferenceRequest.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token
