# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sign_up_response_code_delivery_details import SignUpResponseCodeDeliveryDetails
from openapi_server import util


class SignUpResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_confirmed: bool=None, code_delivery_details: SignUpResponseCodeDeliveryDetails=None, user_sub: str=None):
        """SignUpResponse - a model defined in OpenAPI

        :param user_confirmed: The user_confirmed of this SignUpResponse.
        :param code_delivery_details: The code_delivery_details of this SignUpResponse.
        :param user_sub: The user_sub of this SignUpResponse.
        """
        self.openapi_types = {
            'user_confirmed': bool,
            'code_delivery_details': SignUpResponseCodeDeliveryDetails,
            'user_sub': str
        }

        self.attribute_map = {
            'user_confirmed': 'UserConfirmed',
            'code_delivery_details': 'CodeDeliveryDetails',
            'user_sub': 'UserSub'
        }

        self._user_confirmed = user_confirmed
        self._code_delivery_details = code_delivery_details
        self._user_sub = user_sub

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignUpResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignUpResponse of this SignUpResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_confirmed(self):
        """Gets the user_confirmed of this SignUpResponse.


        :return: The user_confirmed of this SignUpResponse.
        :rtype: bool
        """
        return self._user_confirmed

    @user_confirmed.setter
    def user_confirmed(self, user_confirmed):
        """Sets the user_confirmed of this SignUpResponse.


        :param user_confirmed: The user_confirmed of this SignUpResponse.
        :type user_confirmed: bool
        """
        if user_confirmed is None:
            raise ValueError("Invalid value for `user_confirmed`, must not be `None`")

        self._user_confirmed = user_confirmed

    @property
    def code_delivery_details(self):
        """Gets the code_delivery_details of this SignUpResponse.


        :return: The code_delivery_details of this SignUpResponse.
        :rtype: SignUpResponseCodeDeliveryDetails
        """
        return self._code_delivery_details

    @code_delivery_details.setter
    def code_delivery_details(self, code_delivery_details):
        """Sets the code_delivery_details of this SignUpResponse.


        :param code_delivery_details: The code_delivery_details of this SignUpResponse.
        :type code_delivery_details: SignUpResponseCodeDeliveryDetails
        """

        self._code_delivery_details = code_delivery_details

    @property
    def user_sub(self):
        """Gets the user_sub of this SignUpResponse.


        :return: The user_sub of this SignUpResponse.
        :rtype: str
        """
        return self._user_sub

    @user_sub.setter
    def user_sub(self, user_sub):
        """Sets the user_sub of this SignUpResponse.


        :param user_sub: The user_sub of this SignUpResponse.
        :type user_sub: str
        """
        if user_sub is None:
            raise ValueError("Invalid value for `user_sub`, must not be `None`")

        self._user_sub = user_sub
