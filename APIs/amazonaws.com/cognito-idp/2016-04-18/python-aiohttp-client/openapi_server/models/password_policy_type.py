# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PasswordPolicyType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, minimum_length: int=None, require_uppercase: bool=None, require_lowercase: bool=None, require_numbers: bool=None, require_symbols: bool=None, temporary_password_validity_days: int=None):
        """PasswordPolicyType - a model defined in OpenAPI

        :param minimum_length: The minimum_length of this PasswordPolicyType.
        :param require_uppercase: The require_uppercase of this PasswordPolicyType.
        :param require_lowercase: The require_lowercase of this PasswordPolicyType.
        :param require_numbers: The require_numbers of this PasswordPolicyType.
        :param require_symbols: The require_symbols of this PasswordPolicyType.
        :param temporary_password_validity_days: The temporary_password_validity_days of this PasswordPolicyType.
        """
        self.openapi_types = {
            'minimum_length': int,
            'require_uppercase': bool,
            'require_lowercase': bool,
            'require_numbers': bool,
            'require_symbols': bool,
            'temporary_password_validity_days': int
        }

        self.attribute_map = {
            'minimum_length': 'MinimumLength',
            'require_uppercase': 'RequireUppercase',
            'require_lowercase': 'RequireLowercase',
            'require_numbers': 'RequireNumbers',
            'require_symbols': 'RequireSymbols',
            'temporary_password_validity_days': 'TemporaryPasswordValidityDays'
        }

        self._minimum_length = minimum_length
        self._require_uppercase = require_uppercase
        self._require_lowercase = require_lowercase
        self._require_numbers = require_numbers
        self._require_symbols = require_symbols
        self._temporary_password_validity_days = temporary_password_validity_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PasswordPolicyType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PasswordPolicyType of this PasswordPolicyType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def minimum_length(self):
        """Gets the minimum_length of this PasswordPolicyType.


        :return: The minimum_length of this PasswordPolicyType.
        :rtype: int
        """
        return self._minimum_length

    @minimum_length.setter
    def minimum_length(self, minimum_length):
        """Sets the minimum_length of this PasswordPolicyType.


        :param minimum_length: The minimum_length of this PasswordPolicyType.
        :type minimum_length: int
        """

        self._minimum_length = minimum_length

    @property
    def require_uppercase(self):
        """Gets the require_uppercase of this PasswordPolicyType.


        :return: The require_uppercase of this PasswordPolicyType.
        :rtype: bool
        """
        return self._require_uppercase

    @require_uppercase.setter
    def require_uppercase(self, require_uppercase):
        """Sets the require_uppercase of this PasswordPolicyType.


        :param require_uppercase: The require_uppercase of this PasswordPolicyType.
        :type require_uppercase: bool
        """

        self._require_uppercase = require_uppercase

    @property
    def require_lowercase(self):
        """Gets the require_lowercase of this PasswordPolicyType.


        :return: The require_lowercase of this PasswordPolicyType.
        :rtype: bool
        """
        return self._require_lowercase

    @require_lowercase.setter
    def require_lowercase(self, require_lowercase):
        """Sets the require_lowercase of this PasswordPolicyType.


        :param require_lowercase: The require_lowercase of this PasswordPolicyType.
        :type require_lowercase: bool
        """

        self._require_lowercase = require_lowercase

    @property
    def require_numbers(self):
        """Gets the require_numbers of this PasswordPolicyType.


        :return: The require_numbers of this PasswordPolicyType.
        :rtype: bool
        """
        return self._require_numbers

    @require_numbers.setter
    def require_numbers(self, require_numbers):
        """Sets the require_numbers of this PasswordPolicyType.


        :param require_numbers: The require_numbers of this PasswordPolicyType.
        :type require_numbers: bool
        """

        self._require_numbers = require_numbers

    @property
    def require_symbols(self):
        """Gets the require_symbols of this PasswordPolicyType.


        :return: The require_symbols of this PasswordPolicyType.
        :rtype: bool
        """
        return self._require_symbols

    @require_symbols.setter
    def require_symbols(self, require_symbols):
        """Sets the require_symbols of this PasswordPolicyType.


        :param require_symbols: The require_symbols of this PasswordPolicyType.
        :type require_symbols: bool
        """

        self._require_symbols = require_symbols

    @property
    def temporary_password_validity_days(self):
        """Gets the temporary_password_validity_days of this PasswordPolicyType.


        :return: The temporary_password_validity_days of this PasswordPolicyType.
        :rtype: int
        """
        return self._temporary_password_validity_days

    @temporary_password_validity_days.setter
    def temporary_password_validity_days(self, temporary_password_validity_days):
        """Sets the temporary_password_validity_days of this PasswordPolicyType.


        :param temporary_password_validity_days: The temporary_password_validity_days of this PasswordPolicyType.
        :type temporary_password_validity_days: int
        """

        self._temporary_password_validity_days = temporary_password_validity_days
