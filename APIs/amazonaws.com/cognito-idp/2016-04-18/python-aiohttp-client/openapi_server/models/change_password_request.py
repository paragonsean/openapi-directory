# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChangePasswordRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, previous_password: str=None, proposed_password: str=None, access_token: str=None):
        """ChangePasswordRequest - a model defined in OpenAPI

        :param previous_password: The previous_password of this ChangePasswordRequest.
        :param proposed_password: The proposed_password of this ChangePasswordRequest.
        :param access_token: The access_token of this ChangePasswordRequest.
        """
        self.openapi_types = {
            'previous_password': str,
            'proposed_password': str,
            'access_token': str
        }

        self.attribute_map = {
            'previous_password': 'PreviousPassword',
            'proposed_password': 'ProposedPassword',
            'access_token': 'AccessToken'
        }

        self._previous_password = previous_password
        self._proposed_password = proposed_password
        self._access_token = access_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangePasswordRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangePasswordRequest of this ChangePasswordRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def previous_password(self):
        """Gets the previous_password of this ChangePasswordRequest.


        :return: The previous_password of this ChangePasswordRequest.
        :rtype: str
        """
        return self._previous_password

    @previous_password.setter
    def previous_password(self, previous_password):
        """Sets the previous_password of this ChangePasswordRequest.


        :param previous_password: The previous_password of this ChangePasswordRequest.
        :type previous_password: str
        """
        if previous_password is None:
            raise ValueError("Invalid value for `previous_password`, must not be `None`")

        self._previous_password = previous_password

    @property
    def proposed_password(self):
        """Gets the proposed_password of this ChangePasswordRequest.


        :return: The proposed_password of this ChangePasswordRequest.
        :rtype: str
        """
        return self._proposed_password

    @proposed_password.setter
    def proposed_password(self, proposed_password):
        """Sets the proposed_password of this ChangePasswordRequest.


        :param proposed_password: The proposed_password of this ChangePasswordRequest.
        :type proposed_password: str
        """
        if proposed_password is None:
            raise ValueError("Invalid value for `proposed_password`, must not be `None`")

        self._proposed_password = proposed_password

    @property
    def access_token(self):
        """Gets the access_token of this ChangePasswordRequest.


        :return: The access_token of this ChangePasswordRequest.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this ChangePasswordRequest.


        :param access_token: The access_token of this ChangePasswordRequest.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token
