/**
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserImportJobType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserImportJobType::OAIUserImportJobType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserImportJobType::OAIUserImportJobType() {
    this->initializeModel();
}

OAIUserImportJobType::~OAIUserImportJobType() {}

void OAIUserImportJobType::initializeModel() {

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_user_pool_id_isSet = false;
    m_user_pool_id_isValid = false;

    m_pre_signed_url_isSet = false;
    m_pre_signed_url_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_completion_date_isSet = false;
    m_completion_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_cloud_watch_logs_role_arn_isSet = false;
    m_cloud_watch_logs_role_arn_isValid = false;

    m_imported_users_isSet = false;
    m_imported_users_isValid = false;

    m_skipped_users_isSet = false;
    m_skipped_users_isValid = false;

    m_failed_users_isSet = false;
    m_failed_users_isValid = false;

    m_completion_message_isSet = false;
    m_completion_message_isValid = false;
}

void OAIUserImportJobType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserImportJobType::fromJsonObject(QJsonObject json) {

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_user_pool_id_isValid = ::OpenAPI::fromJsonValue(m_user_pool_id, json[QString("UserPoolId")]);
    m_user_pool_id_isSet = !json[QString("UserPoolId")].isNull() && m_user_pool_id_isValid;

    m_pre_signed_url_isValid = ::OpenAPI::fromJsonValue(m_pre_signed_url, json[QString("PreSignedUrl")]);
    m_pre_signed_url_isSet = !json[QString("PreSignedUrl")].isNull() && m_pre_signed_url_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_completion_date_isValid = ::OpenAPI::fromJsonValue(m_completion_date, json[QString("CompletionDate")]);
    m_completion_date_isSet = !json[QString("CompletionDate")].isNull() && m_completion_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_cloud_watch_logs_role_arn_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logs_role_arn, json[QString("CloudWatchLogsRoleArn")]);
    m_cloud_watch_logs_role_arn_isSet = !json[QString("CloudWatchLogsRoleArn")].isNull() && m_cloud_watch_logs_role_arn_isValid;

    m_imported_users_isValid = ::OpenAPI::fromJsonValue(m_imported_users, json[QString("ImportedUsers")]);
    m_imported_users_isSet = !json[QString("ImportedUsers")].isNull() && m_imported_users_isValid;

    m_skipped_users_isValid = ::OpenAPI::fromJsonValue(m_skipped_users, json[QString("SkippedUsers")]);
    m_skipped_users_isSet = !json[QString("SkippedUsers")].isNull() && m_skipped_users_isValid;

    m_failed_users_isValid = ::OpenAPI::fromJsonValue(m_failed_users, json[QString("FailedUsers")]);
    m_failed_users_isSet = !json[QString("FailedUsers")].isNull() && m_failed_users_isValid;

    m_completion_message_isValid = ::OpenAPI::fromJsonValue(m_completion_message, json[QString("CompletionMessage")]);
    m_completion_message_isSet = !json[QString("CompletionMessage")].isNull() && m_completion_message_isValid;
}

QString OAIUserImportJobType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserImportJobType::asJsonObject() const {
    QJsonObject obj;
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_user_pool_id_isSet) {
        obj.insert(QString("UserPoolId"), ::OpenAPI::toJsonValue(m_user_pool_id));
    }
    if (m_pre_signed_url_isSet) {
        obj.insert(QString("PreSignedUrl"), ::OpenAPI::toJsonValue(m_pre_signed_url));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_completion_date_isSet) {
        obj.insert(QString("CompletionDate"), ::OpenAPI::toJsonValue(m_completion_date));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_cloud_watch_logs_role_arn_isSet) {
        obj.insert(QString("CloudWatchLogsRoleArn"), ::OpenAPI::toJsonValue(m_cloud_watch_logs_role_arn));
    }
    if (m_imported_users_isSet) {
        obj.insert(QString("ImportedUsers"), ::OpenAPI::toJsonValue(m_imported_users));
    }
    if (m_skipped_users_isSet) {
        obj.insert(QString("SkippedUsers"), ::OpenAPI::toJsonValue(m_skipped_users));
    }
    if (m_failed_users_isSet) {
        obj.insert(QString("FailedUsers"), ::OpenAPI::toJsonValue(m_failed_users));
    }
    if (m_completion_message_isSet) {
        obj.insert(QString("CompletionMessage"), ::OpenAPI::toJsonValue(m_completion_message));
    }
    return obj;
}

QString OAIUserImportJobType::getJobName() const {
    return m_job_name;
}
void OAIUserImportJobType::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIUserImportJobType::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIUserImportJobType::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QString OAIUserImportJobType::getJobId() const {
    return m_job_id;
}
void OAIUserImportJobType::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIUserImportJobType::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIUserImportJobType::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIUserImportJobType::getUserPoolId() const {
    return m_user_pool_id;
}
void OAIUserImportJobType::setUserPoolId(const QString &user_pool_id) {
    m_user_pool_id = user_pool_id;
    m_user_pool_id_isSet = true;
}

bool OAIUserImportJobType::is_user_pool_id_Set() const{
    return m_user_pool_id_isSet;
}

bool OAIUserImportJobType::is_user_pool_id_Valid() const{
    return m_user_pool_id_isValid;
}

QString OAIUserImportJobType::getPreSignedUrl() const {
    return m_pre_signed_url;
}
void OAIUserImportJobType::setPreSignedUrl(const QString &pre_signed_url) {
    m_pre_signed_url = pre_signed_url;
    m_pre_signed_url_isSet = true;
}

bool OAIUserImportJobType::is_pre_signed_url_Set() const{
    return m_pre_signed_url_isSet;
}

bool OAIUserImportJobType::is_pre_signed_url_Valid() const{
    return m_pre_signed_url_isValid;
}

QDateTime OAIUserImportJobType::getCreationDate() const {
    return m_creation_date;
}
void OAIUserImportJobType::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIUserImportJobType::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIUserImportJobType::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIUserImportJobType::getStartDate() const {
    return m_start_date;
}
void OAIUserImportJobType::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIUserImportJobType::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIUserImportJobType::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QDateTime OAIUserImportJobType::getCompletionDate() const {
    return m_completion_date;
}
void OAIUserImportJobType::setCompletionDate(const QDateTime &completion_date) {
    m_completion_date = completion_date;
    m_completion_date_isSet = true;
}

bool OAIUserImportJobType::is_completion_date_Set() const{
    return m_completion_date_isSet;
}

bool OAIUserImportJobType::is_completion_date_Valid() const{
    return m_completion_date_isValid;
}

OAIUserImportJobStatusType OAIUserImportJobType::getStatus() const {
    return m_status;
}
void OAIUserImportJobType::setStatus(const OAIUserImportJobStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUserImportJobType::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUserImportJobType::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUserImportJobType::getCloudWatchLogsRoleArn() const {
    return m_cloud_watch_logs_role_arn;
}
void OAIUserImportJobType::setCloudWatchLogsRoleArn(const QString &cloud_watch_logs_role_arn) {
    m_cloud_watch_logs_role_arn = cloud_watch_logs_role_arn;
    m_cloud_watch_logs_role_arn_isSet = true;
}

bool OAIUserImportJobType::is_cloud_watch_logs_role_arn_Set() const{
    return m_cloud_watch_logs_role_arn_isSet;
}

bool OAIUserImportJobType::is_cloud_watch_logs_role_arn_Valid() const{
    return m_cloud_watch_logs_role_arn_isValid;
}

qint32 OAIUserImportJobType::getImportedUsers() const {
    return m_imported_users;
}
void OAIUserImportJobType::setImportedUsers(const qint32 &imported_users) {
    m_imported_users = imported_users;
    m_imported_users_isSet = true;
}

bool OAIUserImportJobType::is_imported_users_Set() const{
    return m_imported_users_isSet;
}

bool OAIUserImportJobType::is_imported_users_Valid() const{
    return m_imported_users_isValid;
}

qint32 OAIUserImportJobType::getSkippedUsers() const {
    return m_skipped_users;
}
void OAIUserImportJobType::setSkippedUsers(const qint32 &skipped_users) {
    m_skipped_users = skipped_users;
    m_skipped_users_isSet = true;
}

bool OAIUserImportJobType::is_skipped_users_Set() const{
    return m_skipped_users_isSet;
}

bool OAIUserImportJobType::is_skipped_users_Valid() const{
    return m_skipped_users_isValid;
}

qint32 OAIUserImportJobType::getFailedUsers() const {
    return m_failed_users;
}
void OAIUserImportJobType::setFailedUsers(const qint32 &failed_users) {
    m_failed_users = failed_users;
    m_failed_users_isSet = true;
}

bool OAIUserImportJobType::is_failed_users_Set() const{
    return m_failed_users_isSet;
}

bool OAIUserImportJobType::is_failed_users_Valid() const{
    return m_failed_users_isValid;
}

QString OAIUserImportJobType::getCompletionMessage() const {
    return m_completion_message;
}
void OAIUserImportJobType::setCompletionMessage(const QString &completion_message) {
    m_completion_message = completion_message;
    m_completion_message_isSet = true;
}

bool OAIUserImportJobType::is_completion_message_Set() const{
    return m_completion_message_isSet;
}

bool OAIUserImportJobType::is_completion_message_Valid() const{
    return m_completion_message_isValid;
}

bool OAIUserImportJobType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_signed_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logs_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserImportJobType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
