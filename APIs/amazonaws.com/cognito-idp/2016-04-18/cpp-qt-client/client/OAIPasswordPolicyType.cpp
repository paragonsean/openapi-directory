/**
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPasswordPolicyType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPasswordPolicyType::OAIPasswordPolicyType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPasswordPolicyType::OAIPasswordPolicyType() {
    this->initializeModel();
}

OAIPasswordPolicyType::~OAIPasswordPolicyType() {}

void OAIPasswordPolicyType::initializeModel() {

    m_minimum_length_isSet = false;
    m_minimum_length_isValid = false;

    m_require_uppercase_isSet = false;
    m_require_uppercase_isValid = false;

    m_require_lowercase_isSet = false;
    m_require_lowercase_isValid = false;

    m_require_numbers_isSet = false;
    m_require_numbers_isValid = false;

    m_require_symbols_isSet = false;
    m_require_symbols_isValid = false;

    m_temporary_password_validity_days_isSet = false;
    m_temporary_password_validity_days_isValid = false;
}

void OAIPasswordPolicyType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPasswordPolicyType::fromJsonObject(QJsonObject json) {

    m_minimum_length_isValid = ::OpenAPI::fromJsonValue(m_minimum_length, json[QString("MinimumLength")]);
    m_minimum_length_isSet = !json[QString("MinimumLength")].isNull() && m_minimum_length_isValid;

    m_require_uppercase_isValid = ::OpenAPI::fromJsonValue(m_require_uppercase, json[QString("RequireUppercase")]);
    m_require_uppercase_isSet = !json[QString("RequireUppercase")].isNull() && m_require_uppercase_isValid;

    m_require_lowercase_isValid = ::OpenAPI::fromJsonValue(m_require_lowercase, json[QString("RequireLowercase")]);
    m_require_lowercase_isSet = !json[QString("RequireLowercase")].isNull() && m_require_lowercase_isValid;

    m_require_numbers_isValid = ::OpenAPI::fromJsonValue(m_require_numbers, json[QString("RequireNumbers")]);
    m_require_numbers_isSet = !json[QString("RequireNumbers")].isNull() && m_require_numbers_isValid;

    m_require_symbols_isValid = ::OpenAPI::fromJsonValue(m_require_symbols, json[QString("RequireSymbols")]);
    m_require_symbols_isSet = !json[QString("RequireSymbols")].isNull() && m_require_symbols_isValid;

    m_temporary_password_validity_days_isValid = ::OpenAPI::fromJsonValue(m_temporary_password_validity_days, json[QString("TemporaryPasswordValidityDays")]);
    m_temporary_password_validity_days_isSet = !json[QString("TemporaryPasswordValidityDays")].isNull() && m_temporary_password_validity_days_isValid;
}

QString OAIPasswordPolicyType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPasswordPolicyType::asJsonObject() const {
    QJsonObject obj;
    if (m_minimum_length_isSet) {
        obj.insert(QString("MinimumLength"), ::OpenAPI::toJsonValue(m_minimum_length));
    }
    if (m_require_uppercase_isSet) {
        obj.insert(QString("RequireUppercase"), ::OpenAPI::toJsonValue(m_require_uppercase));
    }
    if (m_require_lowercase_isSet) {
        obj.insert(QString("RequireLowercase"), ::OpenAPI::toJsonValue(m_require_lowercase));
    }
    if (m_require_numbers_isSet) {
        obj.insert(QString("RequireNumbers"), ::OpenAPI::toJsonValue(m_require_numbers));
    }
    if (m_require_symbols_isSet) {
        obj.insert(QString("RequireSymbols"), ::OpenAPI::toJsonValue(m_require_symbols));
    }
    if (m_temporary_password_validity_days_isSet) {
        obj.insert(QString("TemporaryPasswordValidityDays"), ::OpenAPI::toJsonValue(m_temporary_password_validity_days));
    }
    return obj;
}

qint32 OAIPasswordPolicyType::getMinimumLength() const {
    return m_minimum_length;
}
void OAIPasswordPolicyType::setMinimumLength(const qint32 &minimum_length) {
    m_minimum_length = minimum_length;
    m_minimum_length_isSet = true;
}

bool OAIPasswordPolicyType::is_minimum_length_Set() const{
    return m_minimum_length_isSet;
}

bool OAIPasswordPolicyType::is_minimum_length_Valid() const{
    return m_minimum_length_isValid;
}

bool OAIPasswordPolicyType::getRequireUppercase() const {
    return m_require_uppercase;
}
void OAIPasswordPolicyType::setRequireUppercase(const bool &require_uppercase) {
    m_require_uppercase = require_uppercase;
    m_require_uppercase_isSet = true;
}

bool OAIPasswordPolicyType::is_require_uppercase_Set() const{
    return m_require_uppercase_isSet;
}

bool OAIPasswordPolicyType::is_require_uppercase_Valid() const{
    return m_require_uppercase_isValid;
}

bool OAIPasswordPolicyType::getRequireLowercase() const {
    return m_require_lowercase;
}
void OAIPasswordPolicyType::setRequireLowercase(const bool &require_lowercase) {
    m_require_lowercase = require_lowercase;
    m_require_lowercase_isSet = true;
}

bool OAIPasswordPolicyType::is_require_lowercase_Set() const{
    return m_require_lowercase_isSet;
}

bool OAIPasswordPolicyType::is_require_lowercase_Valid() const{
    return m_require_lowercase_isValid;
}

bool OAIPasswordPolicyType::getRequireNumbers() const {
    return m_require_numbers;
}
void OAIPasswordPolicyType::setRequireNumbers(const bool &require_numbers) {
    m_require_numbers = require_numbers;
    m_require_numbers_isSet = true;
}

bool OAIPasswordPolicyType::is_require_numbers_Set() const{
    return m_require_numbers_isSet;
}

bool OAIPasswordPolicyType::is_require_numbers_Valid() const{
    return m_require_numbers_isValid;
}

bool OAIPasswordPolicyType::getRequireSymbols() const {
    return m_require_symbols;
}
void OAIPasswordPolicyType::setRequireSymbols(const bool &require_symbols) {
    m_require_symbols = require_symbols;
    m_require_symbols_isSet = true;
}

bool OAIPasswordPolicyType::is_require_symbols_Set() const{
    return m_require_symbols_isSet;
}

bool OAIPasswordPolicyType::is_require_symbols_Valid() const{
    return m_require_symbols_isValid;
}

qint32 OAIPasswordPolicyType::getTemporaryPasswordValidityDays() const {
    return m_temporary_password_validity_days;
}
void OAIPasswordPolicyType::setTemporaryPasswordValidityDays(const qint32 &temporary_password_validity_days) {
    m_temporary_password_validity_days = temporary_password_validity_days;
    m_temporary_password_validity_days_isSet = true;
}

bool OAIPasswordPolicyType::is_temporary_password_validity_days_Set() const{
    return m_temporary_password_validity_days_isSet;
}

bool OAIPasswordPolicyType::is_temporary_password_validity_days_Valid() const{
    return m_temporary_password_validity_days_isValid;
}

bool OAIPasswordPolicyType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_minimum_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_uppercase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_lowercase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_numbers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_symbols_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporary_password_validity_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPasswordPolicyType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
