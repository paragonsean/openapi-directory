/**
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserPoolType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserPoolType::OAIUserPoolType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserPoolType::OAIUserPoolType() {
    this->initializeModel();
}

OAIUserPoolType::~OAIUserPoolType() {}

void OAIUserPoolType::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_deletion_protection_isSet = false;
    m_deletion_protection_isValid = false;

    m_lambda_config_isSet = false;
    m_lambda_config_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_schema_attributes_isSet = false;
    m_schema_attributes_isValid = false;

    m_auto_verified_attributes_isSet = false;
    m_auto_verified_attributes_isValid = false;

    m_alias_attributes_isSet = false;
    m_alias_attributes_isValid = false;

    m_username_attributes_isSet = false;
    m_username_attributes_isValid = false;

    m_sms_verification_message_isSet = false;
    m_sms_verification_message_isValid = false;

    m_email_verification_message_isSet = false;
    m_email_verification_message_isValid = false;

    m_email_verification_subject_isSet = false;
    m_email_verification_subject_isValid = false;

    m_verification_message_template_isSet = false;
    m_verification_message_template_isValid = false;

    m_sms_authentication_message_isSet = false;
    m_sms_authentication_message_isValid = false;

    m_user_attribute_update_settings_isSet = false;
    m_user_attribute_update_settings_isValid = false;

    m_mfa_configuration_isSet = false;
    m_mfa_configuration_isValid = false;

    m_device_configuration_isSet = false;
    m_device_configuration_isValid = false;

    m_estimated_number_of_users_isSet = false;
    m_estimated_number_of_users_isValid = false;

    m_email_configuration_isSet = false;
    m_email_configuration_isValid = false;

    m_sms_configuration_isSet = false;
    m_sms_configuration_isValid = false;

    m_user_pool_tags_isSet = false;
    m_user_pool_tags_isValid = false;

    m_sms_configuration_failure_isSet = false;
    m_sms_configuration_failure_isValid = false;

    m_email_configuration_failure_isSet = false;
    m_email_configuration_failure_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_custom_domain_isSet = false;
    m_custom_domain_isValid = false;

    m_admin_create_user_config_isSet = false;
    m_admin_create_user_config_isValid = false;

    m_user_pool_add_ons_isSet = false;
    m_user_pool_add_ons_isValid = false;

    m_username_configuration_isSet = false;
    m_username_configuration_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_account_recovery_setting_isSet = false;
    m_account_recovery_setting_isValid = false;
}

void OAIUserPoolType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserPoolType::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("Policies")]);
    m_policies_isSet = !json[QString("Policies")].isNull() && m_policies_isValid;

    m_deletion_protection_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection, json[QString("DeletionProtection")]);
    m_deletion_protection_isSet = !json[QString("DeletionProtection")].isNull() && m_deletion_protection_isValid;

    m_lambda_config_isValid = ::OpenAPI::fromJsonValue(m_lambda_config, json[QString("LambdaConfig")]);
    m_lambda_config_isSet = !json[QString("LambdaConfig")].isNull() && m_lambda_config_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_schema_attributes_isValid = ::OpenAPI::fromJsonValue(m_schema_attributes, json[QString("SchemaAttributes")]);
    m_schema_attributes_isSet = !json[QString("SchemaAttributes")].isNull() && m_schema_attributes_isValid;

    m_auto_verified_attributes_isValid = ::OpenAPI::fromJsonValue(m_auto_verified_attributes, json[QString("AutoVerifiedAttributes")]);
    m_auto_verified_attributes_isSet = !json[QString("AutoVerifiedAttributes")].isNull() && m_auto_verified_attributes_isValid;

    m_alias_attributes_isValid = ::OpenAPI::fromJsonValue(m_alias_attributes, json[QString("AliasAttributes")]);
    m_alias_attributes_isSet = !json[QString("AliasAttributes")].isNull() && m_alias_attributes_isValid;

    m_username_attributes_isValid = ::OpenAPI::fromJsonValue(m_username_attributes, json[QString("UsernameAttributes")]);
    m_username_attributes_isSet = !json[QString("UsernameAttributes")].isNull() && m_username_attributes_isValid;

    m_sms_verification_message_isValid = ::OpenAPI::fromJsonValue(m_sms_verification_message, json[QString("SmsVerificationMessage")]);
    m_sms_verification_message_isSet = !json[QString("SmsVerificationMessage")].isNull() && m_sms_verification_message_isValid;

    m_email_verification_message_isValid = ::OpenAPI::fromJsonValue(m_email_verification_message, json[QString("EmailVerificationMessage")]);
    m_email_verification_message_isSet = !json[QString("EmailVerificationMessage")].isNull() && m_email_verification_message_isValid;

    m_email_verification_subject_isValid = ::OpenAPI::fromJsonValue(m_email_verification_subject, json[QString("EmailVerificationSubject")]);
    m_email_verification_subject_isSet = !json[QString("EmailVerificationSubject")].isNull() && m_email_verification_subject_isValid;

    m_verification_message_template_isValid = ::OpenAPI::fromJsonValue(m_verification_message_template, json[QString("VerificationMessageTemplate")]);
    m_verification_message_template_isSet = !json[QString("VerificationMessageTemplate")].isNull() && m_verification_message_template_isValid;

    m_sms_authentication_message_isValid = ::OpenAPI::fromJsonValue(m_sms_authentication_message, json[QString("SmsAuthenticationMessage")]);
    m_sms_authentication_message_isSet = !json[QString("SmsAuthenticationMessage")].isNull() && m_sms_authentication_message_isValid;

    m_user_attribute_update_settings_isValid = ::OpenAPI::fromJsonValue(m_user_attribute_update_settings, json[QString("UserAttributeUpdateSettings")]);
    m_user_attribute_update_settings_isSet = !json[QString("UserAttributeUpdateSettings")].isNull() && m_user_attribute_update_settings_isValid;

    m_mfa_configuration_isValid = ::OpenAPI::fromJsonValue(m_mfa_configuration, json[QString("MfaConfiguration")]);
    m_mfa_configuration_isSet = !json[QString("MfaConfiguration")].isNull() && m_mfa_configuration_isValid;

    m_device_configuration_isValid = ::OpenAPI::fromJsonValue(m_device_configuration, json[QString("DeviceConfiguration")]);
    m_device_configuration_isSet = !json[QString("DeviceConfiguration")].isNull() && m_device_configuration_isValid;

    m_estimated_number_of_users_isValid = ::OpenAPI::fromJsonValue(m_estimated_number_of_users, json[QString("EstimatedNumberOfUsers")]);
    m_estimated_number_of_users_isSet = !json[QString("EstimatedNumberOfUsers")].isNull() && m_estimated_number_of_users_isValid;

    m_email_configuration_isValid = ::OpenAPI::fromJsonValue(m_email_configuration, json[QString("EmailConfiguration")]);
    m_email_configuration_isSet = !json[QString("EmailConfiguration")].isNull() && m_email_configuration_isValid;

    m_sms_configuration_isValid = ::OpenAPI::fromJsonValue(m_sms_configuration, json[QString("SmsConfiguration")]);
    m_sms_configuration_isSet = !json[QString("SmsConfiguration")].isNull() && m_sms_configuration_isValid;

    m_user_pool_tags_isValid = ::OpenAPI::fromJsonValue(m_user_pool_tags, json[QString("UserPoolTags")]);
    m_user_pool_tags_isSet = !json[QString("UserPoolTags")].isNull() && m_user_pool_tags_isValid;

    m_sms_configuration_failure_isValid = ::OpenAPI::fromJsonValue(m_sms_configuration_failure, json[QString("SmsConfigurationFailure")]);
    m_sms_configuration_failure_isSet = !json[QString("SmsConfigurationFailure")].isNull() && m_sms_configuration_failure_isValid;

    m_email_configuration_failure_isValid = ::OpenAPI::fromJsonValue(m_email_configuration_failure, json[QString("EmailConfigurationFailure")]);
    m_email_configuration_failure_isSet = !json[QString("EmailConfigurationFailure")].isNull() && m_email_configuration_failure_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_custom_domain, json[QString("CustomDomain")]);
    m_custom_domain_isSet = !json[QString("CustomDomain")].isNull() && m_custom_domain_isValid;

    m_admin_create_user_config_isValid = ::OpenAPI::fromJsonValue(m_admin_create_user_config, json[QString("AdminCreateUserConfig")]);
    m_admin_create_user_config_isSet = !json[QString("AdminCreateUserConfig")].isNull() && m_admin_create_user_config_isValid;

    m_user_pool_add_ons_isValid = ::OpenAPI::fromJsonValue(m_user_pool_add_ons, json[QString("UserPoolAddOns")]);
    m_user_pool_add_ons_isSet = !json[QString("UserPoolAddOns")].isNull() && m_user_pool_add_ons_isValid;

    m_username_configuration_isValid = ::OpenAPI::fromJsonValue(m_username_configuration, json[QString("UsernameConfiguration")]);
    m_username_configuration_isSet = !json[QString("UsernameConfiguration")].isNull() && m_username_configuration_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_account_recovery_setting_isValid = ::OpenAPI::fromJsonValue(m_account_recovery_setting, json[QString("AccountRecoverySetting")]);
    m_account_recovery_setting_isSet = !json[QString("AccountRecoverySetting")].isNull() && m_account_recovery_setting_isValid;
}

QString OAIUserPoolType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserPoolType::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policies.isSet()) {
        obj.insert(QString("Policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_deletion_protection.isSet()) {
        obj.insert(QString("DeletionProtection"), ::OpenAPI::toJsonValue(m_deletion_protection));
    }
    if (m_lambda_config.isSet()) {
        obj.insert(QString("LambdaConfig"), ::OpenAPI::toJsonValue(m_lambda_config));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_schema_attributes.isSet()) {
        obj.insert(QString("SchemaAttributes"), ::OpenAPI::toJsonValue(m_schema_attributes));
    }
    if (m_auto_verified_attributes.isSet()) {
        obj.insert(QString("AutoVerifiedAttributes"), ::OpenAPI::toJsonValue(m_auto_verified_attributes));
    }
    if (m_alias_attributes.isSet()) {
        obj.insert(QString("AliasAttributes"), ::OpenAPI::toJsonValue(m_alias_attributes));
    }
    if (m_username_attributes.isSet()) {
        obj.insert(QString("UsernameAttributes"), ::OpenAPI::toJsonValue(m_username_attributes));
    }
    if (m_sms_verification_message_isSet) {
        obj.insert(QString("SmsVerificationMessage"), ::OpenAPI::toJsonValue(m_sms_verification_message));
    }
    if (m_email_verification_message_isSet) {
        obj.insert(QString("EmailVerificationMessage"), ::OpenAPI::toJsonValue(m_email_verification_message));
    }
    if (m_email_verification_subject_isSet) {
        obj.insert(QString("EmailVerificationSubject"), ::OpenAPI::toJsonValue(m_email_verification_subject));
    }
    if (m_verification_message_template.isSet()) {
        obj.insert(QString("VerificationMessageTemplate"), ::OpenAPI::toJsonValue(m_verification_message_template));
    }
    if (m_sms_authentication_message_isSet) {
        obj.insert(QString("SmsAuthenticationMessage"), ::OpenAPI::toJsonValue(m_sms_authentication_message));
    }
    if (m_user_attribute_update_settings.isSet()) {
        obj.insert(QString("UserAttributeUpdateSettings"), ::OpenAPI::toJsonValue(m_user_attribute_update_settings));
    }
    if (m_mfa_configuration.isSet()) {
        obj.insert(QString("MfaConfiguration"), ::OpenAPI::toJsonValue(m_mfa_configuration));
    }
    if (m_device_configuration.isSet()) {
        obj.insert(QString("DeviceConfiguration"), ::OpenAPI::toJsonValue(m_device_configuration));
    }
    if (m_estimated_number_of_users_isSet) {
        obj.insert(QString("EstimatedNumberOfUsers"), ::OpenAPI::toJsonValue(m_estimated_number_of_users));
    }
    if (m_email_configuration.isSet()) {
        obj.insert(QString("EmailConfiguration"), ::OpenAPI::toJsonValue(m_email_configuration));
    }
    if (m_sms_configuration.isSet()) {
        obj.insert(QString("SmsConfiguration"), ::OpenAPI::toJsonValue(m_sms_configuration));
    }
    if (m_user_pool_tags.isSet()) {
        obj.insert(QString("UserPoolTags"), ::OpenAPI::toJsonValue(m_user_pool_tags));
    }
    if (m_sms_configuration_failure_isSet) {
        obj.insert(QString("SmsConfigurationFailure"), ::OpenAPI::toJsonValue(m_sms_configuration_failure));
    }
    if (m_email_configuration_failure_isSet) {
        obj.insert(QString("EmailConfigurationFailure"), ::OpenAPI::toJsonValue(m_email_configuration_failure));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_custom_domain_isSet) {
        obj.insert(QString("CustomDomain"), ::OpenAPI::toJsonValue(m_custom_domain));
    }
    if (m_admin_create_user_config.isSet()) {
        obj.insert(QString("AdminCreateUserConfig"), ::OpenAPI::toJsonValue(m_admin_create_user_config));
    }
    if (m_user_pool_add_ons.isSet()) {
        obj.insert(QString("UserPoolAddOns"), ::OpenAPI::toJsonValue(m_user_pool_add_ons));
    }
    if (m_username_configuration.isSet()) {
        obj.insert(QString("UsernameConfiguration"), ::OpenAPI::toJsonValue(m_username_configuration));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_account_recovery_setting.isSet()) {
        obj.insert(QString("AccountRecoverySetting"), ::OpenAPI::toJsonValue(m_account_recovery_setting));
    }
    return obj;
}

QString OAIUserPoolType::getId() const {
    return m_id;
}
void OAIUserPoolType::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserPoolType::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserPoolType::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserPoolType::getName() const {
    return m_name;
}
void OAIUserPoolType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserPoolType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserPoolType::is_name_Valid() const{
    return m_name_isValid;
}

OAIUserPoolType_Policies OAIUserPoolType::getPolicies() const {
    return m_policies;
}
void OAIUserPoolType::setPolicies(const OAIUserPoolType_Policies &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIUserPoolType::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIUserPoolType::is_policies_Valid() const{
    return m_policies_isValid;
}

OAIDeletionProtectionType OAIUserPoolType::getDeletionProtection() const {
    return m_deletion_protection;
}
void OAIUserPoolType::setDeletionProtection(const OAIDeletionProtectionType &deletion_protection) {
    m_deletion_protection = deletion_protection;
    m_deletion_protection_isSet = true;
}

bool OAIUserPoolType::is_deletion_protection_Set() const{
    return m_deletion_protection_isSet;
}

bool OAIUserPoolType::is_deletion_protection_Valid() const{
    return m_deletion_protection_isValid;
}

OAIUserPoolType_LambdaConfig OAIUserPoolType::getLambdaConfig() const {
    return m_lambda_config;
}
void OAIUserPoolType::setLambdaConfig(const OAIUserPoolType_LambdaConfig &lambda_config) {
    m_lambda_config = lambda_config;
    m_lambda_config_isSet = true;
}

bool OAIUserPoolType::is_lambda_config_Set() const{
    return m_lambda_config_isSet;
}

bool OAIUserPoolType::is_lambda_config_Valid() const{
    return m_lambda_config_isValid;
}

OAIStatusType OAIUserPoolType::getStatus() const {
    return m_status;
}
void OAIUserPoolType::setStatus(const OAIStatusType &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUserPoolType::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUserPoolType::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIUserPoolType::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIUserPoolType::setLastModifiedDate(const QDateTime &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIUserPoolType::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIUserPoolType::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QDateTime OAIUserPoolType::getCreationDate() const {
    return m_creation_date;
}
void OAIUserPoolType::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIUserPoolType::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIUserPoolType::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QList OAIUserPoolType::getSchemaAttributes() const {
    return m_schema_attributes;
}
void OAIUserPoolType::setSchemaAttributes(const QList &schema_attributes) {
    m_schema_attributes = schema_attributes;
    m_schema_attributes_isSet = true;
}

bool OAIUserPoolType::is_schema_attributes_Set() const{
    return m_schema_attributes_isSet;
}

bool OAIUserPoolType::is_schema_attributes_Valid() const{
    return m_schema_attributes_isValid;
}

QList OAIUserPoolType::getAutoVerifiedAttributes() const {
    return m_auto_verified_attributes;
}
void OAIUserPoolType::setAutoVerifiedAttributes(const QList &auto_verified_attributes) {
    m_auto_verified_attributes = auto_verified_attributes;
    m_auto_verified_attributes_isSet = true;
}

bool OAIUserPoolType::is_auto_verified_attributes_Set() const{
    return m_auto_verified_attributes_isSet;
}

bool OAIUserPoolType::is_auto_verified_attributes_Valid() const{
    return m_auto_verified_attributes_isValid;
}

QList OAIUserPoolType::getAliasAttributes() const {
    return m_alias_attributes;
}
void OAIUserPoolType::setAliasAttributes(const QList &alias_attributes) {
    m_alias_attributes = alias_attributes;
    m_alias_attributes_isSet = true;
}

bool OAIUserPoolType::is_alias_attributes_Set() const{
    return m_alias_attributes_isSet;
}

bool OAIUserPoolType::is_alias_attributes_Valid() const{
    return m_alias_attributes_isValid;
}

QList OAIUserPoolType::getUsernameAttributes() const {
    return m_username_attributes;
}
void OAIUserPoolType::setUsernameAttributes(const QList &username_attributes) {
    m_username_attributes = username_attributes;
    m_username_attributes_isSet = true;
}

bool OAIUserPoolType::is_username_attributes_Set() const{
    return m_username_attributes_isSet;
}

bool OAIUserPoolType::is_username_attributes_Valid() const{
    return m_username_attributes_isValid;
}

QString OAIUserPoolType::getSmsVerificationMessage() const {
    return m_sms_verification_message;
}
void OAIUserPoolType::setSmsVerificationMessage(const QString &sms_verification_message) {
    m_sms_verification_message = sms_verification_message;
    m_sms_verification_message_isSet = true;
}

bool OAIUserPoolType::is_sms_verification_message_Set() const{
    return m_sms_verification_message_isSet;
}

bool OAIUserPoolType::is_sms_verification_message_Valid() const{
    return m_sms_verification_message_isValid;
}

QString OAIUserPoolType::getEmailVerificationMessage() const {
    return m_email_verification_message;
}
void OAIUserPoolType::setEmailVerificationMessage(const QString &email_verification_message) {
    m_email_verification_message = email_verification_message;
    m_email_verification_message_isSet = true;
}

bool OAIUserPoolType::is_email_verification_message_Set() const{
    return m_email_verification_message_isSet;
}

bool OAIUserPoolType::is_email_verification_message_Valid() const{
    return m_email_verification_message_isValid;
}

QString OAIUserPoolType::getEmailVerificationSubject() const {
    return m_email_verification_subject;
}
void OAIUserPoolType::setEmailVerificationSubject(const QString &email_verification_subject) {
    m_email_verification_subject = email_verification_subject;
    m_email_verification_subject_isSet = true;
}

bool OAIUserPoolType::is_email_verification_subject_Set() const{
    return m_email_verification_subject_isSet;
}

bool OAIUserPoolType::is_email_verification_subject_Valid() const{
    return m_email_verification_subject_isValid;
}

OAIUpdateUserPoolRequest_VerificationMessageTemplate OAIUserPoolType::getVerificationMessageTemplate() const {
    return m_verification_message_template;
}
void OAIUserPoolType::setVerificationMessageTemplate(const OAIUpdateUserPoolRequest_VerificationMessageTemplate &verification_message_template) {
    m_verification_message_template = verification_message_template;
    m_verification_message_template_isSet = true;
}

bool OAIUserPoolType::is_verification_message_template_Set() const{
    return m_verification_message_template_isSet;
}

bool OAIUserPoolType::is_verification_message_template_Valid() const{
    return m_verification_message_template_isValid;
}

QString OAIUserPoolType::getSmsAuthenticationMessage() const {
    return m_sms_authentication_message;
}
void OAIUserPoolType::setSmsAuthenticationMessage(const QString &sms_authentication_message) {
    m_sms_authentication_message = sms_authentication_message;
    m_sms_authentication_message_isSet = true;
}

bool OAIUserPoolType::is_sms_authentication_message_Set() const{
    return m_sms_authentication_message_isSet;
}

bool OAIUserPoolType::is_sms_authentication_message_Valid() const{
    return m_sms_authentication_message_isValid;
}

OAICreateUserPoolRequest_UserAttributeUpdateSettings OAIUserPoolType::getUserAttributeUpdateSettings() const {
    return m_user_attribute_update_settings;
}
void OAIUserPoolType::setUserAttributeUpdateSettings(const OAICreateUserPoolRequest_UserAttributeUpdateSettings &user_attribute_update_settings) {
    m_user_attribute_update_settings = user_attribute_update_settings;
    m_user_attribute_update_settings_isSet = true;
}

bool OAIUserPoolType::is_user_attribute_update_settings_Set() const{
    return m_user_attribute_update_settings_isSet;
}

bool OAIUserPoolType::is_user_attribute_update_settings_Valid() const{
    return m_user_attribute_update_settings_isValid;
}

OAIUserPoolMfaType OAIUserPoolType::getMfaConfiguration() const {
    return m_mfa_configuration;
}
void OAIUserPoolType::setMfaConfiguration(const OAIUserPoolMfaType &mfa_configuration) {
    m_mfa_configuration = mfa_configuration;
    m_mfa_configuration_isSet = true;
}

bool OAIUserPoolType::is_mfa_configuration_Set() const{
    return m_mfa_configuration_isSet;
}

bool OAIUserPoolType::is_mfa_configuration_Valid() const{
    return m_mfa_configuration_isValid;
}

OAICreateUserPoolRequest_DeviceConfiguration OAIUserPoolType::getDeviceConfiguration() const {
    return m_device_configuration;
}
void OAIUserPoolType::setDeviceConfiguration(const OAICreateUserPoolRequest_DeviceConfiguration &device_configuration) {
    m_device_configuration = device_configuration;
    m_device_configuration_isSet = true;
}

bool OAIUserPoolType::is_device_configuration_Set() const{
    return m_device_configuration_isSet;
}

bool OAIUserPoolType::is_device_configuration_Valid() const{
    return m_device_configuration_isValid;
}

qint32 OAIUserPoolType::getEstimatedNumberOfUsers() const {
    return m_estimated_number_of_users;
}
void OAIUserPoolType::setEstimatedNumberOfUsers(const qint32 &estimated_number_of_users) {
    m_estimated_number_of_users = estimated_number_of_users;
    m_estimated_number_of_users_isSet = true;
}

bool OAIUserPoolType::is_estimated_number_of_users_Set() const{
    return m_estimated_number_of_users_isSet;
}

bool OAIUserPoolType::is_estimated_number_of_users_Valid() const{
    return m_estimated_number_of_users_isValid;
}

OAICreateUserPoolRequest_EmailConfiguration OAIUserPoolType::getEmailConfiguration() const {
    return m_email_configuration;
}
void OAIUserPoolType::setEmailConfiguration(const OAICreateUserPoolRequest_EmailConfiguration &email_configuration) {
    m_email_configuration = email_configuration;
    m_email_configuration_isSet = true;
}

bool OAIUserPoolType::is_email_configuration_Set() const{
    return m_email_configuration_isSet;
}

bool OAIUserPoolType::is_email_configuration_Valid() const{
    return m_email_configuration_isValid;
}

OAICreateUserPoolRequest_SmsConfiguration OAIUserPoolType::getSmsConfiguration() const {
    return m_sms_configuration;
}
void OAIUserPoolType::setSmsConfiguration(const OAICreateUserPoolRequest_SmsConfiguration &sms_configuration) {
    m_sms_configuration = sms_configuration;
    m_sms_configuration_isSet = true;
}

bool OAIUserPoolType::is_sms_configuration_Set() const{
    return m_sms_configuration_isSet;
}

bool OAIUserPoolType::is_sms_configuration_Valid() const{
    return m_sms_configuration_isValid;
}

QMap OAIUserPoolType::getUserPoolTags() const {
    return m_user_pool_tags;
}
void OAIUserPoolType::setUserPoolTags(const QMap &user_pool_tags) {
    m_user_pool_tags = user_pool_tags;
    m_user_pool_tags_isSet = true;
}

bool OAIUserPoolType::is_user_pool_tags_Set() const{
    return m_user_pool_tags_isSet;
}

bool OAIUserPoolType::is_user_pool_tags_Valid() const{
    return m_user_pool_tags_isValid;
}

QString OAIUserPoolType::getSmsConfigurationFailure() const {
    return m_sms_configuration_failure;
}
void OAIUserPoolType::setSmsConfigurationFailure(const QString &sms_configuration_failure) {
    m_sms_configuration_failure = sms_configuration_failure;
    m_sms_configuration_failure_isSet = true;
}

bool OAIUserPoolType::is_sms_configuration_failure_Set() const{
    return m_sms_configuration_failure_isSet;
}

bool OAIUserPoolType::is_sms_configuration_failure_Valid() const{
    return m_sms_configuration_failure_isValid;
}

QString OAIUserPoolType::getEmailConfigurationFailure() const {
    return m_email_configuration_failure;
}
void OAIUserPoolType::setEmailConfigurationFailure(const QString &email_configuration_failure) {
    m_email_configuration_failure = email_configuration_failure;
    m_email_configuration_failure_isSet = true;
}

bool OAIUserPoolType::is_email_configuration_failure_Set() const{
    return m_email_configuration_failure_isSet;
}

bool OAIUserPoolType::is_email_configuration_failure_Valid() const{
    return m_email_configuration_failure_isValid;
}

QString OAIUserPoolType::getDomain() const {
    return m_domain;
}
void OAIUserPoolType::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIUserPoolType::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIUserPoolType::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIUserPoolType::getCustomDomain() const {
    return m_custom_domain;
}
void OAIUserPoolType::setCustomDomain(const QString &custom_domain) {
    m_custom_domain = custom_domain;
    m_custom_domain_isSet = true;
}

bool OAIUserPoolType::is_custom_domain_Set() const{
    return m_custom_domain_isSet;
}

bool OAIUserPoolType::is_custom_domain_Valid() const{
    return m_custom_domain_isValid;
}

OAICreateUserPoolRequest_AdminCreateUserConfig OAIUserPoolType::getAdminCreateUserConfig() const {
    return m_admin_create_user_config;
}
void OAIUserPoolType::setAdminCreateUserConfig(const OAICreateUserPoolRequest_AdminCreateUserConfig &admin_create_user_config) {
    m_admin_create_user_config = admin_create_user_config;
    m_admin_create_user_config_isSet = true;
}

bool OAIUserPoolType::is_admin_create_user_config_Set() const{
    return m_admin_create_user_config_isSet;
}

bool OAIUserPoolType::is_admin_create_user_config_Valid() const{
    return m_admin_create_user_config_isValid;
}

OAICreateUserPoolRequest_UserPoolAddOns OAIUserPoolType::getUserPoolAddOns() const {
    return m_user_pool_add_ons;
}
void OAIUserPoolType::setUserPoolAddOns(const OAICreateUserPoolRequest_UserPoolAddOns &user_pool_add_ons) {
    m_user_pool_add_ons = user_pool_add_ons;
    m_user_pool_add_ons_isSet = true;
}

bool OAIUserPoolType::is_user_pool_add_ons_Set() const{
    return m_user_pool_add_ons_isSet;
}

bool OAIUserPoolType::is_user_pool_add_ons_Valid() const{
    return m_user_pool_add_ons_isValid;
}

OAIUserPoolType_UsernameConfiguration OAIUserPoolType::getUsernameConfiguration() const {
    return m_username_configuration;
}
void OAIUserPoolType::setUsernameConfiguration(const OAIUserPoolType_UsernameConfiguration &username_configuration) {
    m_username_configuration = username_configuration;
    m_username_configuration_isSet = true;
}

bool OAIUserPoolType::is_username_configuration_Set() const{
    return m_username_configuration_isSet;
}

bool OAIUserPoolType::is_username_configuration_Valid() const{
    return m_username_configuration_isValid;
}

QString OAIUserPoolType::getArn() const {
    return m_arn;
}
void OAIUserPoolType::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUserPoolType::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUserPoolType::is_arn_Valid() const{
    return m_arn_isValid;
}

OAICreateUserPoolRequest_AccountRecoverySetting OAIUserPoolType::getAccountRecoverySetting() const {
    return m_account_recovery_setting;
}
void OAIUserPoolType::setAccountRecoverySetting(const OAICreateUserPoolRequest_AccountRecoverySetting &account_recovery_setting) {
    m_account_recovery_setting = account_recovery_setting;
    m_account_recovery_setting_isSet = true;
}

bool OAIUserPoolType::is_account_recovery_setting_Set() const{
    return m_account_recovery_setting_isSet;
}

bool OAIUserPoolType::is_account_recovery_setting_Valid() const{
    return m_account_recovery_setting_isValid;
}

bool OAIUserPoolType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_verified_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_verification_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verification_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verification_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_message_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_authentication_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_attribute_update_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfa_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_number_of_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_pool_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_configuration_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_configuration_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_create_user_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_pool_add_ons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_recovery_setting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserPoolType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
