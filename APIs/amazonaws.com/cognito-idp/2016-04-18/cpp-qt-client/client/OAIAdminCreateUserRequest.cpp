/**
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminCreateUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminCreateUserRequest::OAIAdminCreateUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminCreateUserRequest::OAIAdminCreateUserRequest() {
    this->initializeModel();
}

OAIAdminCreateUserRequest::~OAIAdminCreateUserRequest() {}

void OAIAdminCreateUserRequest::initializeModel() {

    m_user_pool_id_isSet = false;
    m_user_pool_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_user_attributes_isSet = false;
    m_user_attributes_isValid = false;

    m_validation_data_isSet = false;
    m_validation_data_isValid = false;

    m_temporary_password_isSet = false;
    m_temporary_password_isValid = false;

    m_force_alias_creation_isSet = false;
    m_force_alias_creation_isValid = false;

    m_message_action_isSet = false;
    m_message_action_isValid = false;

    m_desired_delivery_mediums_isSet = false;
    m_desired_delivery_mediums_isValid = false;

    m_client_metadata_isSet = false;
    m_client_metadata_isValid = false;
}

void OAIAdminCreateUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminCreateUserRequest::fromJsonObject(QJsonObject json) {

    m_user_pool_id_isValid = ::OpenAPI::fromJsonValue(m_user_pool_id, json[QString("UserPoolId")]);
    m_user_pool_id_isSet = !json[QString("UserPoolId")].isNull() && m_user_pool_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;

    m_user_attributes_isValid = ::OpenAPI::fromJsonValue(m_user_attributes, json[QString("UserAttributes")]);
    m_user_attributes_isSet = !json[QString("UserAttributes")].isNull() && m_user_attributes_isValid;

    m_validation_data_isValid = ::OpenAPI::fromJsonValue(m_validation_data, json[QString("ValidationData")]);
    m_validation_data_isSet = !json[QString("ValidationData")].isNull() && m_validation_data_isValid;

    m_temporary_password_isValid = ::OpenAPI::fromJsonValue(m_temporary_password, json[QString("TemporaryPassword")]);
    m_temporary_password_isSet = !json[QString("TemporaryPassword")].isNull() && m_temporary_password_isValid;

    m_force_alias_creation_isValid = ::OpenAPI::fromJsonValue(m_force_alias_creation, json[QString("ForceAliasCreation")]);
    m_force_alias_creation_isSet = !json[QString("ForceAliasCreation")].isNull() && m_force_alias_creation_isValid;

    m_message_action_isValid = ::OpenAPI::fromJsonValue(m_message_action, json[QString("MessageAction")]);
    m_message_action_isSet = !json[QString("MessageAction")].isNull() && m_message_action_isValid;

    m_desired_delivery_mediums_isValid = ::OpenAPI::fromJsonValue(m_desired_delivery_mediums, json[QString("DesiredDeliveryMediums")]);
    m_desired_delivery_mediums_isSet = !json[QString("DesiredDeliveryMediums")].isNull() && m_desired_delivery_mediums_isValid;

    m_client_metadata_isValid = ::OpenAPI::fromJsonValue(m_client_metadata, json[QString("ClientMetadata")]);
    m_client_metadata_isSet = !json[QString("ClientMetadata")].isNull() && m_client_metadata_isValid;
}

QString OAIAdminCreateUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminCreateUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_user_pool_id_isSet) {
        obj.insert(QString("UserPoolId"), ::OpenAPI::toJsonValue(m_user_pool_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_user_attributes.isSet()) {
        obj.insert(QString("UserAttributes"), ::OpenAPI::toJsonValue(m_user_attributes));
    }
    if (m_validation_data.isSet()) {
        obj.insert(QString("ValidationData"), ::OpenAPI::toJsonValue(m_validation_data));
    }
    if (m_temporary_password_isSet) {
        obj.insert(QString("TemporaryPassword"), ::OpenAPI::toJsonValue(m_temporary_password));
    }
    if (m_force_alias_creation_isSet) {
        obj.insert(QString("ForceAliasCreation"), ::OpenAPI::toJsonValue(m_force_alias_creation));
    }
    if (m_message_action.isSet()) {
        obj.insert(QString("MessageAction"), ::OpenAPI::toJsonValue(m_message_action));
    }
    if (m_desired_delivery_mediums.isSet()) {
        obj.insert(QString("DesiredDeliveryMediums"), ::OpenAPI::toJsonValue(m_desired_delivery_mediums));
    }
    if (m_client_metadata.isSet()) {
        obj.insert(QString("ClientMetadata"), ::OpenAPI::toJsonValue(m_client_metadata));
    }
    return obj;
}

QString OAIAdminCreateUserRequest::getUserPoolId() const {
    return m_user_pool_id;
}
void OAIAdminCreateUserRequest::setUserPoolId(const QString &user_pool_id) {
    m_user_pool_id = user_pool_id;
    m_user_pool_id_isSet = true;
}

bool OAIAdminCreateUserRequest::is_user_pool_id_Set() const{
    return m_user_pool_id_isSet;
}

bool OAIAdminCreateUserRequest::is_user_pool_id_Valid() const{
    return m_user_pool_id_isValid;
}

QString OAIAdminCreateUserRequest::getUsername() const {
    return m_username;
}
void OAIAdminCreateUserRequest::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIAdminCreateUserRequest::is_username_Set() const{
    return m_username_isSet;
}

bool OAIAdminCreateUserRequest::is_username_Valid() const{
    return m_username_isValid;
}

QList OAIAdminCreateUserRequest::getUserAttributes() const {
    return m_user_attributes;
}
void OAIAdminCreateUserRequest::setUserAttributes(const QList &user_attributes) {
    m_user_attributes = user_attributes;
    m_user_attributes_isSet = true;
}

bool OAIAdminCreateUserRequest::is_user_attributes_Set() const{
    return m_user_attributes_isSet;
}

bool OAIAdminCreateUserRequest::is_user_attributes_Valid() const{
    return m_user_attributes_isValid;
}

QList OAIAdminCreateUserRequest::getValidationData() const {
    return m_validation_data;
}
void OAIAdminCreateUserRequest::setValidationData(const QList &validation_data) {
    m_validation_data = validation_data;
    m_validation_data_isSet = true;
}

bool OAIAdminCreateUserRequest::is_validation_data_Set() const{
    return m_validation_data_isSet;
}

bool OAIAdminCreateUserRequest::is_validation_data_Valid() const{
    return m_validation_data_isValid;
}

QString OAIAdminCreateUserRequest::getTemporaryPassword() const {
    return m_temporary_password;
}
void OAIAdminCreateUserRequest::setTemporaryPassword(const QString &temporary_password) {
    m_temporary_password = temporary_password;
    m_temporary_password_isSet = true;
}

bool OAIAdminCreateUserRequest::is_temporary_password_Set() const{
    return m_temporary_password_isSet;
}

bool OAIAdminCreateUserRequest::is_temporary_password_Valid() const{
    return m_temporary_password_isValid;
}

bool OAIAdminCreateUserRequest::getForceAliasCreation() const {
    return m_force_alias_creation;
}
void OAIAdminCreateUserRequest::setForceAliasCreation(const bool &force_alias_creation) {
    m_force_alias_creation = force_alias_creation;
    m_force_alias_creation_isSet = true;
}

bool OAIAdminCreateUserRequest::is_force_alias_creation_Set() const{
    return m_force_alias_creation_isSet;
}

bool OAIAdminCreateUserRequest::is_force_alias_creation_Valid() const{
    return m_force_alias_creation_isValid;
}

OAIMessageActionType OAIAdminCreateUserRequest::getMessageAction() const {
    return m_message_action;
}
void OAIAdminCreateUserRequest::setMessageAction(const OAIMessageActionType &message_action) {
    m_message_action = message_action;
    m_message_action_isSet = true;
}

bool OAIAdminCreateUserRequest::is_message_action_Set() const{
    return m_message_action_isSet;
}

bool OAIAdminCreateUserRequest::is_message_action_Valid() const{
    return m_message_action_isValid;
}

QList OAIAdminCreateUserRequest::getDesiredDeliveryMediums() const {
    return m_desired_delivery_mediums;
}
void OAIAdminCreateUserRequest::setDesiredDeliveryMediums(const QList &desired_delivery_mediums) {
    m_desired_delivery_mediums = desired_delivery_mediums;
    m_desired_delivery_mediums_isSet = true;
}

bool OAIAdminCreateUserRequest::is_desired_delivery_mediums_Set() const{
    return m_desired_delivery_mediums_isSet;
}

bool OAIAdminCreateUserRequest::is_desired_delivery_mediums_Valid() const{
    return m_desired_delivery_mediums_isValid;
}

QMap OAIAdminCreateUserRequest::getClientMetadata() const {
    return m_client_metadata;
}
void OAIAdminCreateUserRequest::setClientMetadata(const QMap &client_metadata) {
    m_client_metadata = client_metadata;
    m_client_metadata_isSet = true;
}

bool OAIAdminCreateUserRequest::is_client_metadata_Set() const{
    return m_client_metadata_isSet;
}

bool OAIAdminCreateUserRequest::is_client_metadata_Valid() const{
    return m_client_metadata_isValid;
}

bool OAIAdminCreateUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporary_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_alias_creation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_delivery_mediums.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminCreateUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_pool_id_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
