/**
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthEventType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthEventType::OAIAuthEventType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthEventType::OAIAuthEventType() {
    this->initializeModel();
}

OAIAuthEventType::~OAIAuthEventType() {}

void OAIAuthEventType::initializeModel() {

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_event_response_isSet = false;
    m_event_response_isValid = false;

    m_event_risk_isSet = false;
    m_event_risk_isValid = false;

    m_challenge_responses_isSet = false;
    m_challenge_responses_isValid = false;

    m_event_context_data_isSet = false;
    m_event_context_data_isValid = false;

    m_event_feedback_isSet = false;
    m_event_feedback_isValid = false;
}

void OAIAuthEventType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthEventType::fromJsonObject(QJsonObject json) {

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("EventId")]);
    m_event_id_isSet = !json[QString("EventId")].isNull() && m_event_id_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("EventType")]);
    m_event_type_isSet = !json[QString("EventType")].isNull() && m_event_type_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_event_response_isValid = ::OpenAPI::fromJsonValue(m_event_response, json[QString("EventResponse")]);
    m_event_response_isSet = !json[QString("EventResponse")].isNull() && m_event_response_isValid;

    m_event_risk_isValid = ::OpenAPI::fromJsonValue(m_event_risk, json[QString("EventRisk")]);
    m_event_risk_isSet = !json[QString("EventRisk")].isNull() && m_event_risk_isValid;

    m_challenge_responses_isValid = ::OpenAPI::fromJsonValue(m_challenge_responses, json[QString("ChallengeResponses")]);
    m_challenge_responses_isSet = !json[QString("ChallengeResponses")].isNull() && m_challenge_responses_isValid;

    m_event_context_data_isValid = ::OpenAPI::fromJsonValue(m_event_context_data, json[QString("EventContextData")]);
    m_event_context_data_isSet = !json[QString("EventContextData")].isNull() && m_event_context_data_isValid;

    m_event_feedback_isValid = ::OpenAPI::fromJsonValue(m_event_feedback, json[QString("EventFeedback")]);
    m_event_feedback_isSet = !json[QString("EventFeedback")].isNull() && m_event_feedback_isValid;
}

QString OAIAuthEventType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthEventType::asJsonObject() const {
    QJsonObject obj;
    if (m_event_id_isSet) {
        obj.insert(QString("EventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_type.isSet()) {
        obj.insert(QString("EventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_event_response.isSet()) {
        obj.insert(QString("EventResponse"), ::OpenAPI::toJsonValue(m_event_response));
    }
    if (m_event_risk.isSet()) {
        obj.insert(QString("EventRisk"), ::OpenAPI::toJsonValue(m_event_risk));
    }
    if (m_challenge_responses.isSet()) {
        obj.insert(QString("ChallengeResponses"), ::OpenAPI::toJsonValue(m_challenge_responses));
    }
    if (m_event_context_data.isSet()) {
        obj.insert(QString("EventContextData"), ::OpenAPI::toJsonValue(m_event_context_data));
    }
    if (m_event_feedback.isSet()) {
        obj.insert(QString("EventFeedback"), ::OpenAPI::toJsonValue(m_event_feedback));
    }
    return obj;
}

QString OAIAuthEventType::getEventId() const {
    return m_event_id;
}
void OAIAuthEventType::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIAuthEventType::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIAuthEventType::is_event_id_Valid() const{
    return m_event_id_isValid;
}

OAIEventType OAIAuthEventType::getEventType() const {
    return m_event_type;
}
void OAIAuthEventType::setEventType(const OAIEventType &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIAuthEventType::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIAuthEventType::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QDateTime OAIAuthEventType::getCreationDate() const {
    return m_creation_date;
}
void OAIAuthEventType::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIAuthEventType::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIAuthEventType::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAIEventResponseType OAIAuthEventType::getEventResponse() const {
    return m_event_response;
}
void OAIAuthEventType::setEventResponse(const OAIEventResponseType &event_response) {
    m_event_response = event_response;
    m_event_response_isSet = true;
}

bool OAIAuthEventType::is_event_response_Set() const{
    return m_event_response_isSet;
}

bool OAIAuthEventType::is_event_response_Valid() const{
    return m_event_response_isValid;
}

OAIAuthEventType_EventRisk OAIAuthEventType::getEventRisk() const {
    return m_event_risk;
}
void OAIAuthEventType::setEventRisk(const OAIAuthEventType_EventRisk &event_risk) {
    m_event_risk = event_risk;
    m_event_risk_isSet = true;
}

bool OAIAuthEventType::is_event_risk_Set() const{
    return m_event_risk_isSet;
}

bool OAIAuthEventType::is_event_risk_Valid() const{
    return m_event_risk_isValid;
}

QList OAIAuthEventType::getChallengeResponses() const {
    return m_challenge_responses;
}
void OAIAuthEventType::setChallengeResponses(const QList &challenge_responses) {
    m_challenge_responses = challenge_responses;
    m_challenge_responses_isSet = true;
}

bool OAIAuthEventType::is_challenge_responses_Set() const{
    return m_challenge_responses_isSet;
}

bool OAIAuthEventType::is_challenge_responses_Valid() const{
    return m_challenge_responses_isValid;
}

OAIAuthEventType_EventContextData OAIAuthEventType::getEventContextData() const {
    return m_event_context_data;
}
void OAIAuthEventType::setEventContextData(const OAIAuthEventType_EventContextData &event_context_data) {
    m_event_context_data = event_context_data;
    m_event_context_data_isSet = true;
}

bool OAIAuthEventType::is_event_context_data_Set() const{
    return m_event_context_data_isSet;
}

bool OAIAuthEventType::is_event_context_data_Valid() const{
    return m_event_context_data_isValid;
}

OAIAuthEventType_EventFeedback OAIAuthEventType::getEventFeedback() const {
    return m_event_feedback;
}
void OAIAuthEventType::setEventFeedback(const OAIAuthEventType_EventFeedback &event_feedback) {
    m_event_feedback = event_feedback;
    m_event_feedback_isSet = true;
}

bool OAIAuthEventType::is_event_feedback_Set() const{
    return m_event_feedback_isSet;
}

bool OAIAuthEventType::is_event_feedback_Valid() const{
    return m_event_feedback_isValid;
}

bool OAIAuthEventType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_risk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenge_responses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_context_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_feedback.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
