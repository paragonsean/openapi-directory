/**
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUserPoolClientRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUserPoolClientRequest::OAIUpdateUserPoolClientRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUserPoolClientRequest::OAIUpdateUserPoolClientRequest() {
    this->initializeModel();
}

OAIUpdateUserPoolClientRequest::~OAIUpdateUserPoolClientRequest() {}

void OAIUpdateUserPoolClientRequest::initializeModel() {

    m_user_pool_id_isSet = false;
    m_user_pool_id_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_refresh_token_validity_isSet = false;
    m_refresh_token_validity_isValid = false;

    m_access_token_validity_isSet = false;
    m_access_token_validity_isValid = false;

    m_id_token_validity_isSet = false;
    m_id_token_validity_isValid = false;

    m_token_validity_units_isSet = false;
    m_token_validity_units_isValid = false;

    m_read_attributes_isSet = false;
    m_read_attributes_isValid = false;

    m_write_attributes_isSet = false;
    m_write_attributes_isValid = false;

    m_explicit_auth_flows_isSet = false;
    m_explicit_auth_flows_isValid = false;

    m_supported_identity_providers_isSet = false;
    m_supported_identity_providers_isValid = false;

    m_callback_urls_isSet = false;
    m_callback_urls_isValid = false;

    m_logout_urls_isSet = false;
    m_logout_urls_isValid = false;

    m_default_redirect_uri_isSet = false;
    m_default_redirect_uri_isValid = false;

    m_allowed_o_auth_flows_isSet = false;
    m_allowed_o_auth_flows_isValid = false;

    m_allowed_o_auth_scopes_isSet = false;
    m_allowed_o_auth_scopes_isValid = false;

    m_allowed_o_auth_flows_user_pool_client_isSet = false;
    m_allowed_o_auth_flows_user_pool_client_isValid = false;

    m_analytics_configuration_isSet = false;
    m_analytics_configuration_isValid = false;

    m_prevent_user_existence_errors_isSet = false;
    m_prevent_user_existence_errors_isValid = false;

    m_enable_token_revocation_isSet = false;
    m_enable_token_revocation_isValid = false;

    m_enable_propagate_additional_user_context_data_isSet = false;
    m_enable_propagate_additional_user_context_data_isValid = false;

    m_auth_session_validity_isSet = false;
    m_auth_session_validity_isValid = false;
}

void OAIUpdateUserPoolClientRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUserPoolClientRequest::fromJsonObject(QJsonObject json) {

    m_user_pool_id_isValid = ::OpenAPI::fromJsonValue(m_user_pool_id, json[QString("UserPoolId")]);
    m_user_pool_id_isSet = !json[QString("UserPoolId")].isNull() && m_user_pool_id_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("ClientId")]);
    m_client_id_isSet = !json[QString("ClientId")].isNull() && m_client_id_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("ClientName")]);
    m_client_name_isSet = !json[QString("ClientName")].isNull() && m_client_name_isValid;

    m_refresh_token_validity_isValid = ::OpenAPI::fromJsonValue(m_refresh_token_validity, json[QString("RefreshTokenValidity")]);
    m_refresh_token_validity_isSet = !json[QString("RefreshTokenValidity")].isNull() && m_refresh_token_validity_isValid;

    m_access_token_validity_isValid = ::OpenAPI::fromJsonValue(m_access_token_validity, json[QString("AccessTokenValidity")]);
    m_access_token_validity_isSet = !json[QString("AccessTokenValidity")].isNull() && m_access_token_validity_isValid;

    m_id_token_validity_isValid = ::OpenAPI::fromJsonValue(m_id_token_validity, json[QString("IdTokenValidity")]);
    m_id_token_validity_isSet = !json[QString("IdTokenValidity")].isNull() && m_id_token_validity_isValid;

    m_token_validity_units_isValid = ::OpenAPI::fromJsonValue(m_token_validity_units, json[QString("TokenValidityUnits")]);
    m_token_validity_units_isSet = !json[QString("TokenValidityUnits")].isNull() && m_token_validity_units_isValid;

    m_read_attributes_isValid = ::OpenAPI::fromJsonValue(m_read_attributes, json[QString("ReadAttributes")]);
    m_read_attributes_isSet = !json[QString("ReadAttributes")].isNull() && m_read_attributes_isValid;

    m_write_attributes_isValid = ::OpenAPI::fromJsonValue(m_write_attributes, json[QString("WriteAttributes")]);
    m_write_attributes_isSet = !json[QString("WriteAttributes")].isNull() && m_write_attributes_isValid;

    m_explicit_auth_flows_isValid = ::OpenAPI::fromJsonValue(m_explicit_auth_flows, json[QString("ExplicitAuthFlows")]);
    m_explicit_auth_flows_isSet = !json[QString("ExplicitAuthFlows")].isNull() && m_explicit_auth_flows_isValid;

    m_supported_identity_providers_isValid = ::OpenAPI::fromJsonValue(m_supported_identity_providers, json[QString("SupportedIdentityProviders")]);
    m_supported_identity_providers_isSet = !json[QString("SupportedIdentityProviders")].isNull() && m_supported_identity_providers_isValid;

    m_callback_urls_isValid = ::OpenAPI::fromJsonValue(m_callback_urls, json[QString("CallbackURLs")]);
    m_callback_urls_isSet = !json[QString("CallbackURLs")].isNull() && m_callback_urls_isValid;

    m_logout_urls_isValid = ::OpenAPI::fromJsonValue(m_logout_urls, json[QString("LogoutURLs")]);
    m_logout_urls_isSet = !json[QString("LogoutURLs")].isNull() && m_logout_urls_isValid;

    m_default_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_default_redirect_uri, json[QString("DefaultRedirectURI")]);
    m_default_redirect_uri_isSet = !json[QString("DefaultRedirectURI")].isNull() && m_default_redirect_uri_isValid;

    m_allowed_o_auth_flows_isValid = ::OpenAPI::fromJsonValue(m_allowed_o_auth_flows, json[QString("AllowedOAuthFlows")]);
    m_allowed_o_auth_flows_isSet = !json[QString("AllowedOAuthFlows")].isNull() && m_allowed_o_auth_flows_isValid;

    m_allowed_o_auth_scopes_isValid = ::OpenAPI::fromJsonValue(m_allowed_o_auth_scopes, json[QString("AllowedOAuthScopes")]);
    m_allowed_o_auth_scopes_isSet = !json[QString("AllowedOAuthScopes")].isNull() && m_allowed_o_auth_scopes_isValid;

    m_allowed_o_auth_flows_user_pool_client_isValid = ::OpenAPI::fromJsonValue(m_allowed_o_auth_flows_user_pool_client, json[QString("AllowedOAuthFlowsUserPoolClient")]);
    m_allowed_o_auth_flows_user_pool_client_isSet = !json[QString("AllowedOAuthFlowsUserPoolClient")].isNull() && m_allowed_o_auth_flows_user_pool_client_isValid;

    m_analytics_configuration_isValid = ::OpenAPI::fromJsonValue(m_analytics_configuration, json[QString("AnalyticsConfiguration")]);
    m_analytics_configuration_isSet = !json[QString("AnalyticsConfiguration")].isNull() && m_analytics_configuration_isValid;

    m_prevent_user_existence_errors_isValid = ::OpenAPI::fromJsonValue(m_prevent_user_existence_errors, json[QString("PreventUserExistenceErrors")]);
    m_prevent_user_existence_errors_isSet = !json[QString("PreventUserExistenceErrors")].isNull() && m_prevent_user_existence_errors_isValid;

    m_enable_token_revocation_isValid = ::OpenAPI::fromJsonValue(m_enable_token_revocation, json[QString("EnableTokenRevocation")]);
    m_enable_token_revocation_isSet = !json[QString("EnableTokenRevocation")].isNull() && m_enable_token_revocation_isValid;

    m_enable_propagate_additional_user_context_data_isValid = ::OpenAPI::fromJsonValue(m_enable_propagate_additional_user_context_data, json[QString("EnablePropagateAdditionalUserContextData")]);
    m_enable_propagate_additional_user_context_data_isSet = !json[QString("EnablePropagateAdditionalUserContextData")].isNull() && m_enable_propagate_additional_user_context_data_isValid;

    m_auth_session_validity_isValid = ::OpenAPI::fromJsonValue(m_auth_session_validity, json[QString("AuthSessionValidity")]);
    m_auth_session_validity_isSet = !json[QString("AuthSessionValidity")].isNull() && m_auth_session_validity_isValid;
}

QString OAIUpdateUserPoolClientRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUserPoolClientRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_user_pool_id_isSet) {
        obj.insert(QString("UserPoolId"), ::OpenAPI::toJsonValue(m_user_pool_id));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("ClientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("ClientName"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_refresh_token_validity_isSet) {
        obj.insert(QString("RefreshTokenValidity"), ::OpenAPI::toJsonValue(m_refresh_token_validity));
    }
    if (m_access_token_validity_isSet) {
        obj.insert(QString("AccessTokenValidity"), ::OpenAPI::toJsonValue(m_access_token_validity));
    }
    if (m_id_token_validity_isSet) {
        obj.insert(QString("IdTokenValidity"), ::OpenAPI::toJsonValue(m_id_token_validity));
    }
    if (m_token_validity_units.isSet()) {
        obj.insert(QString("TokenValidityUnits"), ::OpenAPI::toJsonValue(m_token_validity_units));
    }
    if (m_read_attributes.isSet()) {
        obj.insert(QString("ReadAttributes"), ::OpenAPI::toJsonValue(m_read_attributes));
    }
    if (m_write_attributes.isSet()) {
        obj.insert(QString("WriteAttributes"), ::OpenAPI::toJsonValue(m_write_attributes));
    }
    if (m_explicit_auth_flows.isSet()) {
        obj.insert(QString("ExplicitAuthFlows"), ::OpenAPI::toJsonValue(m_explicit_auth_flows));
    }
    if (m_supported_identity_providers.isSet()) {
        obj.insert(QString("SupportedIdentityProviders"), ::OpenAPI::toJsonValue(m_supported_identity_providers));
    }
    if (m_callback_urls.isSet()) {
        obj.insert(QString("CallbackURLs"), ::OpenAPI::toJsonValue(m_callback_urls));
    }
    if (m_logout_urls.isSet()) {
        obj.insert(QString("LogoutURLs"), ::OpenAPI::toJsonValue(m_logout_urls));
    }
    if (m_default_redirect_uri_isSet) {
        obj.insert(QString("DefaultRedirectURI"), ::OpenAPI::toJsonValue(m_default_redirect_uri));
    }
    if (m_allowed_o_auth_flows.isSet()) {
        obj.insert(QString("AllowedOAuthFlows"), ::OpenAPI::toJsonValue(m_allowed_o_auth_flows));
    }
    if (m_allowed_o_auth_scopes.isSet()) {
        obj.insert(QString("AllowedOAuthScopes"), ::OpenAPI::toJsonValue(m_allowed_o_auth_scopes));
    }
    if (m_allowed_o_auth_flows_user_pool_client_isSet) {
        obj.insert(QString("AllowedOAuthFlowsUserPoolClient"), ::OpenAPI::toJsonValue(m_allowed_o_auth_flows_user_pool_client));
    }
    if (m_analytics_configuration.isSet()) {
        obj.insert(QString("AnalyticsConfiguration"), ::OpenAPI::toJsonValue(m_analytics_configuration));
    }
    if (m_prevent_user_existence_errors.isSet()) {
        obj.insert(QString("PreventUserExistenceErrors"), ::OpenAPI::toJsonValue(m_prevent_user_existence_errors));
    }
    if (m_enable_token_revocation_isSet) {
        obj.insert(QString("EnableTokenRevocation"), ::OpenAPI::toJsonValue(m_enable_token_revocation));
    }
    if (m_enable_propagate_additional_user_context_data_isSet) {
        obj.insert(QString("EnablePropagateAdditionalUserContextData"), ::OpenAPI::toJsonValue(m_enable_propagate_additional_user_context_data));
    }
    if (m_auth_session_validity_isSet) {
        obj.insert(QString("AuthSessionValidity"), ::OpenAPI::toJsonValue(m_auth_session_validity));
    }
    return obj;
}

QString OAIUpdateUserPoolClientRequest::getUserPoolId() const {
    return m_user_pool_id;
}
void OAIUpdateUserPoolClientRequest::setUserPoolId(const QString &user_pool_id) {
    m_user_pool_id = user_pool_id;
    m_user_pool_id_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_user_pool_id_Set() const{
    return m_user_pool_id_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_user_pool_id_Valid() const{
    return m_user_pool_id_isValid;
}

QString OAIUpdateUserPoolClientRequest::getClientId() const {
    return m_client_id;
}
void OAIUpdateUserPoolClientRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIUpdateUserPoolClientRequest::getClientName() const {
    return m_client_name;
}
void OAIUpdateUserPoolClientRequest::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_client_name_Valid() const{
    return m_client_name_isValid;
}

qint32 OAIUpdateUserPoolClientRequest::getRefreshTokenValidity() const {
    return m_refresh_token_validity;
}
void OAIUpdateUserPoolClientRequest::setRefreshTokenValidity(const qint32 &refresh_token_validity) {
    m_refresh_token_validity = refresh_token_validity;
    m_refresh_token_validity_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_refresh_token_validity_Set() const{
    return m_refresh_token_validity_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_refresh_token_validity_Valid() const{
    return m_refresh_token_validity_isValid;
}

qint32 OAIUpdateUserPoolClientRequest::getAccessTokenValidity() const {
    return m_access_token_validity;
}
void OAIUpdateUserPoolClientRequest::setAccessTokenValidity(const qint32 &access_token_validity) {
    m_access_token_validity = access_token_validity;
    m_access_token_validity_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_access_token_validity_Set() const{
    return m_access_token_validity_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_access_token_validity_Valid() const{
    return m_access_token_validity_isValid;
}

qint32 OAIUpdateUserPoolClientRequest::getIdTokenValidity() const {
    return m_id_token_validity;
}
void OAIUpdateUserPoolClientRequest::setIdTokenValidity(const qint32 &id_token_validity) {
    m_id_token_validity = id_token_validity;
    m_id_token_validity_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_id_token_validity_Set() const{
    return m_id_token_validity_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_id_token_validity_Valid() const{
    return m_id_token_validity_isValid;
}

OAIUpdateUserPoolClientRequest_TokenValidityUnits OAIUpdateUserPoolClientRequest::getTokenValidityUnits() const {
    return m_token_validity_units;
}
void OAIUpdateUserPoolClientRequest::setTokenValidityUnits(const OAIUpdateUserPoolClientRequest_TokenValidityUnits &token_validity_units) {
    m_token_validity_units = token_validity_units;
    m_token_validity_units_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_token_validity_units_Set() const{
    return m_token_validity_units_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_token_validity_units_Valid() const{
    return m_token_validity_units_isValid;
}

QList OAIUpdateUserPoolClientRequest::getReadAttributes() const {
    return m_read_attributes;
}
void OAIUpdateUserPoolClientRequest::setReadAttributes(const QList &read_attributes) {
    m_read_attributes = read_attributes;
    m_read_attributes_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_read_attributes_Set() const{
    return m_read_attributes_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_read_attributes_Valid() const{
    return m_read_attributes_isValid;
}

QList OAIUpdateUserPoolClientRequest::getWriteAttributes() const {
    return m_write_attributes;
}
void OAIUpdateUserPoolClientRequest::setWriteAttributes(const QList &write_attributes) {
    m_write_attributes = write_attributes;
    m_write_attributes_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_write_attributes_Set() const{
    return m_write_attributes_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_write_attributes_Valid() const{
    return m_write_attributes_isValid;
}

QList OAIUpdateUserPoolClientRequest::getExplicitAuthFlows() const {
    return m_explicit_auth_flows;
}
void OAIUpdateUserPoolClientRequest::setExplicitAuthFlows(const QList &explicit_auth_flows) {
    m_explicit_auth_flows = explicit_auth_flows;
    m_explicit_auth_flows_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_explicit_auth_flows_Set() const{
    return m_explicit_auth_flows_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_explicit_auth_flows_Valid() const{
    return m_explicit_auth_flows_isValid;
}

QList OAIUpdateUserPoolClientRequest::getSupportedIdentityProviders() const {
    return m_supported_identity_providers;
}
void OAIUpdateUserPoolClientRequest::setSupportedIdentityProviders(const QList &supported_identity_providers) {
    m_supported_identity_providers = supported_identity_providers;
    m_supported_identity_providers_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_supported_identity_providers_Set() const{
    return m_supported_identity_providers_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_supported_identity_providers_Valid() const{
    return m_supported_identity_providers_isValid;
}

QList OAIUpdateUserPoolClientRequest::getCallbackUrls() const {
    return m_callback_urls;
}
void OAIUpdateUserPoolClientRequest::setCallbackUrls(const QList &callback_urls) {
    m_callback_urls = callback_urls;
    m_callback_urls_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_callback_urls_Set() const{
    return m_callback_urls_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_callback_urls_Valid() const{
    return m_callback_urls_isValid;
}

QList OAIUpdateUserPoolClientRequest::getLogoutUrls() const {
    return m_logout_urls;
}
void OAIUpdateUserPoolClientRequest::setLogoutUrls(const QList &logout_urls) {
    m_logout_urls = logout_urls;
    m_logout_urls_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_logout_urls_Set() const{
    return m_logout_urls_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_logout_urls_Valid() const{
    return m_logout_urls_isValid;
}

QString OAIUpdateUserPoolClientRequest::getDefaultRedirectUri() const {
    return m_default_redirect_uri;
}
void OAIUpdateUserPoolClientRequest::setDefaultRedirectUri(const QString &default_redirect_uri) {
    m_default_redirect_uri = default_redirect_uri;
    m_default_redirect_uri_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_default_redirect_uri_Set() const{
    return m_default_redirect_uri_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_default_redirect_uri_Valid() const{
    return m_default_redirect_uri_isValid;
}

QList OAIUpdateUserPoolClientRequest::getAllowedOAuthFlows() const {
    return m_allowed_o_auth_flows;
}
void OAIUpdateUserPoolClientRequest::setAllowedOAuthFlows(const QList &allowed_o_auth_flows) {
    m_allowed_o_auth_flows = allowed_o_auth_flows;
    m_allowed_o_auth_flows_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_allowed_o_auth_flows_Set() const{
    return m_allowed_o_auth_flows_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_allowed_o_auth_flows_Valid() const{
    return m_allowed_o_auth_flows_isValid;
}

QList OAIUpdateUserPoolClientRequest::getAllowedOAuthScopes() const {
    return m_allowed_o_auth_scopes;
}
void OAIUpdateUserPoolClientRequest::setAllowedOAuthScopes(const QList &allowed_o_auth_scopes) {
    m_allowed_o_auth_scopes = allowed_o_auth_scopes;
    m_allowed_o_auth_scopes_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_allowed_o_auth_scopes_Set() const{
    return m_allowed_o_auth_scopes_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_allowed_o_auth_scopes_Valid() const{
    return m_allowed_o_auth_scopes_isValid;
}

bool OAIUpdateUserPoolClientRequest::getAllowedOAuthFlowsUserPoolClient() const {
    return m_allowed_o_auth_flows_user_pool_client;
}
void OAIUpdateUserPoolClientRequest::setAllowedOAuthFlowsUserPoolClient(const bool &allowed_o_auth_flows_user_pool_client) {
    m_allowed_o_auth_flows_user_pool_client = allowed_o_auth_flows_user_pool_client;
    m_allowed_o_auth_flows_user_pool_client_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_allowed_o_auth_flows_user_pool_client_Set() const{
    return m_allowed_o_auth_flows_user_pool_client_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_allowed_o_auth_flows_user_pool_client_Valid() const{
    return m_allowed_o_auth_flows_user_pool_client_isValid;
}

OAIUpdateUserPoolClientRequest_AnalyticsConfiguration OAIUpdateUserPoolClientRequest::getAnalyticsConfiguration() const {
    return m_analytics_configuration;
}
void OAIUpdateUserPoolClientRequest::setAnalyticsConfiguration(const OAIUpdateUserPoolClientRequest_AnalyticsConfiguration &analytics_configuration) {
    m_analytics_configuration = analytics_configuration;
    m_analytics_configuration_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_analytics_configuration_Set() const{
    return m_analytics_configuration_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_analytics_configuration_Valid() const{
    return m_analytics_configuration_isValid;
}

OAIPreventUserExistenceErrorTypes OAIUpdateUserPoolClientRequest::getPreventUserExistenceErrors() const {
    return m_prevent_user_existence_errors;
}
void OAIUpdateUserPoolClientRequest::setPreventUserExistenceErrors(const OAIPreventUserExistenceErrorTypes &prevent_user_existence_errors) {
    m_prevent_user_existence_errors = prevent_user_existence_errors;
    m_prevent_user_existence_errors_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_prevent_user_existence_errors_Set() const{
    return m_prevent_user_existence_errors_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_prevent_user_existence_errors_Valid() const{
    return m_prevent_user_existence_errors_isValid;
}

bool OAIUpdateUserPoolClientRequest::getEnableTokenRevocation() const {
    return m_enable_token_revocation;
}
void OAIUpdateUserPoolClientRequest::setEnableTokenRevocation(const bool &enable_token_revocation) {
    m_enable_token_revocation = enable_token_revocation;
    m_enable_token_revocation_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_enable_token_revocation_Set() const{
    return m_enable_token_revocation_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_enable_token_revocation_Valid() const{
    return m_enable_token_revocation_isValid;
}

bool OAIUpdateUserPoolClientRequest::getEnablePropagateAdditionalUserContextData() const {
    return m_enable_propagate_additional_user_context_data;
}
void OAIUpdateUserPoolClientRequest::setEnablePropagateAdditionalUserContextData(const bool &enable_propagate_additional_user_context_data) {
    m_enable_propagate_additional_user_context_data = enable_propagate_additional_user_context_data;
    m_enable_propagate_additional_user_context_data_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_enable_propagate_additional_user_context_data_Set() const{
    return m_enable_propagate_additional_user_context_data_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_enable_propagate_additional_user_context_data_Valid() const{
    return m_enable_propagate_additional_user_context_data_isValid;
}

qint32 OAIUpdateUserPoolClientRequest::getAuthSessionValidity() const {
    return m_auth_session_validity;
}
void OAIUpdateUserPoolClientRequest::setAuthSessionValidity(const qint32 &auth_session_validity) {
    m_auth_session_validity = auth_session_validity;
    m_auth_session_validity_isSet = true;
}

bool OAIUpdateUserPoolClientRequest::is_auth_session_validity_Set() const{
    return m_auth_session_validity_isSet;
}

bool OAIUpdateUserPoolClientRequest::is_auth_session_validity_Valid() const{
    return m_auth_session_validity_isValid;
}

bool OAIUpdateUserPoolClientRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_validity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_token_validity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_validity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_validity_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_explicit_auth_flows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_identity_providers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logout_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_o_auth_flows.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_o_auth_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_o_auth_flows_user_pool_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analytics_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prevent_user_existence_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_token_revocation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_propagate_additional_user_context_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_session_validity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUserPoolClientRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_pool_id_isValid && m_client_id_isValid && true;
}

} // namespace OpenAPI
