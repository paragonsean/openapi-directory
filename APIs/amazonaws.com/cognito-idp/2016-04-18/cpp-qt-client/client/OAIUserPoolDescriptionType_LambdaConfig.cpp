/**
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserPoolDescriptionType_LambdaConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserPoolDescriptionType_LambdaConfig::OAIUserPoolDescriptionType_LambdaConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserPoolDescriptionType_LambdaConfig::OAIUserPoolDescriptionType_LambdaConfig() {
    this->initializeModel();
}

OAIUserPoolDescriptionType_LambdaConfig::~OAIUserPoolDescriptionType_LambdaConfig() {}

void OAIUserPoolDescriptionType_LambdaConfig::initializeModel() {

    m_pre_sign_up_isSet = false;
    m_pre_sign_up_isValid = false;

    m_custom_message_isSet = false;
    m_custom_message_isValid = false;

    m_post_confirmation_isSet = false;
    m_post_confirmation_isValid = false;

    m_pre_authentication_isSet = false;
    m_pre_authentication_isValid = false;

    m_post_authentication_isSet = false;
    m_post_authentication_isValid = false;

    m_define_auth_challenge_isSet = false;
    m_define_auth_challenge_isValid = false;

    m_create_auth_challenge_isSet = false;
    m_create_auth_challenge_isValid = false;

    m_verify_auth_challenge_response_isSet = false;
    m_verify_auth_challenge_response_isValid = false;

    m_pre_token_generation_isSet = false;
    m_pre_token_generation_isValid = false;

    m_user_migration_isSet = false;
    m_user_migration_isValid = false;

    m_custom_sms_sender_isSet = false;
    m_custom_sms_sender_isValid = false;

    m_custom_email_sender_isSet = false;
    m_custom_email_sender_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;
}

void OAIUserPoolDescriptionType_LambdaConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserPoolDescriptionType_LambdaConfig::fromJsonObject(QJsonObject json) {

    m_pre_sign_up_isValid = ::OpenAPI::fromJsonValue(m_pre_sign_up, json[QString("PreSignUp")]);
    m_pre_sign_up_isSet = !json[QString("PreSignUp")].isNull() && m_pre_sign_up_isValid;

    m_custom_message_isValid = ::OpenAPI::fromJsonValue(m_custom_message, json[QString("CustomMessage")]);
    m_custom_message_isSet = !json[QString("CustomMessage")].isNull() && m_custom_message_isValid;

    m_post_confirmation_isValid = ::OpenAPI::fromJsonValue(m_post_confirmation, json[QString("PostConfirmation")]);
    m_post_confirmation_isSet = !json[QString("PostConfirmation")].isNull() && m_post_confirmation_isValid;

    m_pre_authentication_isValid = ::OpenAPI::fromJsonValue(m_pre_authentication, json[QString("PreAuthentication")]);
    m_pre_authentication_isSet = !json[QString("PreAuthentication")].isNull() && m_pre_authentication_isValid;

    m_post_authentication_isValid = ::OpenAPI::fromJsonValue(m_post_authentication, json[QString("PostAuthentication")]);
    m_post_authentication_isSet = !json[QString("PostAuthentication")].isNull() && m_post_authentication_isValid;

    m_define_auth_challenge_isValid = ::OpenAPI::fromJsonValue(m_define_auth_challenge, json[QString("DefineAuthChallenge")]);
    m_define_auth_challenge_isSet = !json[QString("DefineAuthChallenge")].isNull() && m_define_auth_challenge_isValid;

    m_create_auth_challenge_isValid = ::OpenAPI::fromJsonValue(m_create_auth_challenge, json[QString("CreateAuthChallenge")]);
    m_create_auth_challenge_isSet = !json[QString("CreateAuthChallenge")].isNull() && m_create_auth_challenge_isValid;

    m_verify_auth_challenge_response_isValid = ::OpenAPI::fromJsonValue(m_verify_auth_challenge_response, json[QString("VerifyAuthChallengeResponse")]);
    m_verify_auth_challenge_response_isSet = !json[QString("VerifyAuthChallengeResponse")].isNull() && m_verify_auth_challenge_response_isValid;

    m_pre_token_generation_isValid = ::OpenAPI::fromJsonValue(m_pre_token_generation, json[QString("PreTokenGeneration")]);
    m_pre_token_generation_isSet = !json[QString("PreTokenGeneration")].isNull() && m_pre_token_generation_isValid;

    m_user_migration_isValid = ::OpenAPI::fromJsonValue(m_user_migration, json[QString("UserMigration")]);
    m_user_migration_isSet = !json[QString("UserMigration")].isNull() && m_user_migration_isValid;

    m_custom_sms_sender_isValid = ::OpenAPI::fromJsonValue(m_custom_sms_sender, json[QString("CustomSMSSender")]);
    m_custom_sms_sender_isSet = !json[QString("CustomSMSSender")].isNull() && m_custom_sms_sender_isValid;

    m_custom_email_sender_isValid = ::OpenAPI::fromJsonValue(m_custom_email_sender, json[QString("CustomEmailSender")]);
    m_custom_email_sender_isSet = !json[QString("CustomEmailSender")].isNull() && m_custom_email_sender_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KMSKeyID")]);
    m_kms_key_id_isSet = !json[QString("KMSKeyID")].isNull() && m_kms_key_id_isValid;
}

QString OAIUserPoolDescriptionType_LambdaConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserPoolDescriptionType_LambdaConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_pre_sign_up_isSet) {
        obj.insert(QString("PreSignUp"), ::OpenAPI::toJsonValue(m_pre_sign_up));
    }
    if (m_custom_message_isSet) {
        obj.insert(QString("CustomMessage"), ::OpenAPI::toJsonValue(m_custom_message));
    }
    if (m_post_confirmation_isSet) {
        obj.insert(QString("PostConfirmation"), ::OpenAPI::toJsonValue(m_post_confirmation));
    }
    if (m_pre_authentication_isSet) {
        obj.insert(QString("PreAuthentication"), ::OpenAPI::toJsonValue(m_pre_authentication));
    }
    if (m_post_authentication_isSet) {
        obj.insert(QString("PostAuthentication"), ::OpenAPI::toJsonValue(m_post_authentication));
    }
    if (m_define_auth_challenge_isSet) {
        obj.insert(QString("DefineAuthChallenge"), ::OpenAPI::toJsonValue(m_define_auth_challenge));
    }
    if (m_create_auth_challenge_isSet) {
        obj.insert(QString("CreateAuthChallenge"), ::OpenAPI::toJsonValue(m_create_auth_challenge));
    }
    if (m_verify_auth_challenge_response_isSet) {
        obj.insert(QString("VerifyAuthChallengeResponse"), ::OpenAPI::toJsonValue(m_verify_auth_challenge_response));
    }
    if (m_pre_token_generation_isSet) {
        obj.insert(QString("PreTokenGeneration"), ::OpenAPI::toJsonValue(m_pre_token_generation));
    }
    if (m_user_migration_isSet) {
        obj.insert(QString("UserMigration"), ::OpenAPI::toJsonValue(m_user_migration));
    }
    if (m_custom_sms_sender.isSet()) {
        obj.insert(QString("CustomSMSSender"), ::OpenAPI::toJsonValue(m_custom_sms_sender));
    }
    if (m_custom_email_sender.isSet()) {
        obj.insert(QString("CustomEmailSender"), ::OpenAPI::toJsonValue(m_custom_email_sender));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KMSKeyID"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    return obj;
}

QString OAIUserPoolDescriptionType_LambdaConfig::getPreSignUp() const {
    return m_pre_sign_up;
}
void OAIUserPoolDescriptionType_LambdaConfig::setPreSignUp(const QString &pre_sign_up) {
    m_pre_sign_up = pre_sign_up;
    m_pre_sign_up_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_pre_sign_up_Set() const{
    return m_pre_sign_up_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_pre_sign_up_Valid() const{
    return m_pre_sign_up_isValid;
}

QString OAIUserPoolDescriptionType_LambdaConfig::getCustomMessage() const {
    return m_custom_message;
}
void OAIUserPoolDescriptionType_LambdaConfig::setCustomMessage(const QString &custom_message) {
    m_custom_message = custom_message;
    m_custom_message_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_custom_message_Set() const{
    return m_custom_message_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_custom_message_Valid() const{
    return m_custom_message_isValid;
}

QString OAIUserPoolDescriptionType_LambdaConfig::getPostConfirmation() const {
    return m_post_confirmation;
}
void OAIUserPoolDescriptionType_LambdaConfig::setPostConfirmation(const QString &post_confirmation) {
    m_post_confirmation = post_confirmation;
    m_post_confirmation_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_post_confirmation_Set() const{
    return m_post_confirmation_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_post_confirmation_Valid() const{
    return m_post_confirmation_isValid;
}

QString OAIUserPoolDescriptionType_LambdaConfig::getPreAuthentication() const {
    return m_pre_authentication;
}
void OAIUserPoolDescriptionType_LambdaConfig::setPreAuthentication(const QString &pre_authentication) {
    m_pre_authentication = pre_authentication;
    m_pre_authentication_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_pre_authentication_Set() const{
    return m_pre_authentication_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_pre_authentication_Valid() const{
    return m_pre_authentication_isValid;
}

QString OAIUserPoolDescriptionType_LambdaConfig::getPostAuthentication() const {
    return m_post_authentication;
}
void OAIUserPoolDescriptionType_LambdaConfig::setPostAuthentication(const QString &post_authentication) {
    m_post_authentication = post_authentication;
    m_post_authentication_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_post_authentication_Set() const{
    return m_post_authentication_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_post_authentication_Valid() const{
    return m_post_authentication_isValid;
}

QString OAIUserPoolDescriptionType_LambdaConfig::getDefineAuthChallenge() const {
    return m_define_auth_challenge;
}
void OAIUserPoolDescriptionType_LambdaConfig::setDefineAuthChallenge(const QString &define_auth_challenge) {
    m_define_auth_challenge = define_auth_challenge;
    m_define_auth_challenge_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_define_auth_challenge_Set() const{
    return m_define_auth_challenge_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_define_auth_challenge_Valid() const{
    return m_define_auth_challenge_isValid;
}

QString OAIUserPoolDescriptionType_LambdaConfig::getCreateAuthChallenge() const {
    return m_create_auth_challenge;
}
void OAIUserPoolDescriptionType_LambdaConfig::setCreateAuthChallenge(const QString &create_auth_challenge) {
    m_create_auth_challenge = create_auth_challenge;
    m_create_auth_challenge_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_create_auth_challenge_Set() const{
    return m_create_auth_challenge_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_create_auth_challenge_Valid() const{
    return m_create_auth_challenge_isValid;
}

QString OAIUserPoolDescriptionType_LambdaConfig::getVerifyAuthChallengeResponse() const {
    return m_verify_auth_challenge_response;
}
void OAIUserPoolDescriptionType_LambdaConfig::setVerifyAuthChallengeResponse(const QString &verify_auth_challenge_response) {
    m_verify_auth_challenge_response = verify_auth_challenge_response;
    m_verify_auth_challenge_response_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_verify_auth_challenge_response_Set() const{
    return m_verify_auth_challenge_response_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_verify_auth_challenge_response_Valid() const{
    return m_verify_auth_challenge_response_isValid;
}

QString OAIUserPoolDescriptionType_LambdaConfig::getPreTokenGeneration() const {
    return m_pre_token_generation;
}
void OAIUserPoolDescriptionType_LambdaConfig::setPreTokenGeneration(const QString &pre_token_generation) {
    m_pre_token_generation = pre_token_generation;
    m_pre_token_generation_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_pre_token_generation_Set() const{
    return m_pre_token_generation_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_pre_token_generation_Valid() const{
    return m_pre_token_generation_isValid;
}

QString OAIUserPoolDescriptionType_LambdaConfig::getUserMigration() const {
    return m_user_migration;
}
void OAIUserPoolDescriptionType_LambdaConfig::setUserMigration(const QString &user_migration) {
    m_user_migration = user_migration;
    m_user_migration_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_user_migration_Set() const{
    return m_user_migration_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_user_migration_Valid() const{
    return m_user_migration_isValid;
}

OAILambdaConfigType_CustomSMSSender OAIUserPoolDescriptionType_LambdaConfig::getCustomSmsSender() const {
    return m_custom_sms_sender;
}
void OAIUserPoolDescriptionType_LambdaConfig::setCustomSmsSender(const OAILambdaConfigType_CustomSMSSender &custom_sms_sender) {
    m_custom_sms_sender = custom_sms_sender;
    m_custom_sms_sender_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_custom_sms_sender_Set() const{
    return m_custom_sms_sender_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_custom_sms_sender_Valid() const{
    return m_custom_sms_sender_isValid;
}

OAILambdaConfigType_CustomEmailSender OAIUserPoolDescriptionType_LambdaConfig::getCustomEmailSender() const {
    return m_custom_email_sender;
}
void OAIUserPoolDescriptionType_LambdaConfig::setCustomEmailSender(const OAILambdaConfigType_CustomEmailSender &custom_email_sender) {
    m_custom_email_sender = custom_email_sender;
    m_custom_email_sender_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_custom_email_sender_Set() const{
    return m_custom_email_sender_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_custom_email_sender_Valid() const{
    return m_custom_email_sender_isValid;
}

QString OAIUserPoolDescriptionType_LambdaConfig::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIUserPoolDescriptionType_LambdaConfig::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIUserPoolDescriptionType_LambdaConfig::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIUserPoolDescriptionType_LambdaConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pre_sign_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_confirmation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_authentication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_define_auth_challenge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_auth_challenge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_auth_challenge_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_token_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_migration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_sms_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_email_sender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserPoolDescriptionType_LambdaConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
