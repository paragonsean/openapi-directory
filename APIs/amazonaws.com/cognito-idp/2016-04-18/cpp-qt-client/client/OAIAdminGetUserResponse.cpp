/**
 * Amazon Cognito Identity Provider
 * <p>With the Amazon Cognito user pools API, you can set up user pools and app clients, and authenticate users. To authenticate users from third-party identity providers (IdPs) in this API, you can <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-identity-federation-consolidate-users.html\">link IdP users to native user profiles</a>. Learn more about the authentication and authorization of federated users in the <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-userpools-server-contract-reference.html\">Using the Amazon Cognito user pools API and user pool endpoints</a>.</p> <p>This API reference provides detailed information about API operations and object types in Amazon Cognito. At the bottom of the page for each API operation and object, under <i>See Also</i>, you can learn how to use it in an Amazon Web Services SDK in the language of your choice.</p> <p>Along with resource management operations, the Amazon Cognito user pools API includes classes of operations and authorization models for client-side and server-side user operations. For more information, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html\">Using the Amazon Cognito native and OIDC APIs</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <p>You can also start reading about the <code>CognitoIdentityProvider</code> client in the following SDK guides.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cognito-idp/index.html#cli-aws-cognito-idp\">Amazon Web Services Command Line Interface</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/v3/apidocs/items/CognitoIdentityProvider/TCognitoIdentityProviderClient.html\">Amazon Web Services SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/cpp/api/LATEST/aws-cpp-sdk-cognito-idp/html/class_aws_1_1_cognito_identity_provider_1_1_cognito_identity_provider_client.html\">Amazon Web Services SDK for C++</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/#CognitoIdentityProvider\">Amazon Web Services SDK for Go</a> </p> </li> <li> <p> <a href=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/cognitoidentityprovider/CognitoIdentityProviderClient.html\">Amazon Web Services SDK for Java V2</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityServiceProvider.html\">Amazon Web Services SDK for JavaScript</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php/v3/api/api-cognito-idp-2016-04-18.html\">Amazon Web Services SDK for PHP V3</a> </p> </li> <li> <p> <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html\">Amazon Web Services SDK for Python</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/CognitoIdentityProvider/Client.html\">Amazon Web Services SDK for Ruby V3</a> </p> </li> </ul> <p>To get started with an Amazon Web Services SDK, see <a href=\"http://aws.amazon.com/developer/tools/\">Tools to Build on Amazon Web Services</a>. For example actions and scenarios, see <a href=\"https://docs.aws.amazon.com/cognito/latest/developerguide/service_code_examples_cognito-identity-provider.html\">Code examples for Amazon Cognito Identity Provider using Amazon Web Services SDKs</a>.</p>
 *
 * The version of the OpenAPI document: 2016-04-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdminGetUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdminGetUserResponse::OAIAdminGetUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdminGetUserResponse::OAIAdminGetUserResponse() {
    this->initializeModel();
}

OAIAdminGetUserResponse::~OAIAdminGetUserResponse() {}

void OAIAdminGetUserResponse::initializeModel() {

    m_username_isSet = false;
    m_username_isValid = false;

    m_user_attributes_isSet = false;
    m_user_attributes_isValid = false;

    m_user_create_date_isSet = false;
    m_user_create_date_isValid = false;

    m_user_last_modified_date_isSet = false;
    m_user_last_modified_date_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_user_status_isSet = false;
    m_user_status_isValid = false;

    m_mfa_options_isSet = false;
    m_mfa_options_isValid = false;

    m_preferred_mfa_setting_isSet = false;
    m_preferred_mfa_setting_isValid = false;

    m_user_mfa_setting_list_isSet = false;
    m_user_mfa_setting_list_isValid = false;
}

void OAIAdminGetUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdminGetUserResponse::fromJsonObject(QJsonObject json) {

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;

    m_user_attributes_isValid = ::OpenAPI::fromJsonValue(m_user_attributes, json[QString("UserAttributes")]);
    m_user_attributes_isSet = !json[QString("UserAttributes")].isNull() && m_user_attributes_isValid;

    m_user_create_date_isValid = ::OpenAPI::fromJsonValue(m_user_create_date, json[QString("UserCreateDate")]);
    m_user_create_date_isSet = !json[QString("UserCreateDate")].isNull() && m_user_create_date_isValid;

    m_user_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_user_last_modified_date, json[QString("UserLastModifiedDate")]);
    m_user_last_modified_date_isSet = !json[QString("UserLastModifiedDate")].isNull() && m_user_last_modified_date_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_user_status_isValid = ::OpenAPI::fromJsonValue(m_user_status, json[QString("UserStatus")]);
    m_user_status_isSet = !json[QString("UserStatus")].isNull() && m_user_status_isValid;

    m_mfa_options_isValid = ::OpenAPI::fromJsonValue(m_mfa_options, json[QString("MFAOptions")]);
    m_mfa_options_isSet = !json[QString("MFAOptions")].isNull() && m_mfa_options_isValid;

    m_preferred_mfa_setting_isValid = ::OpenAPI::fromJsonValue(m_preferred_mfa_setting, json[QString("PreferredMfaSetting")]);
    m_preferred_mfa_setting_isSet = !json[QString("PreferredMfaSetting")].isNull() && m_preferred_mfa_setting_isValid;

    m_user_mfa_setting_list_isValid = ::OpenAPI::fromJsonValue(m_user_mfa_setting_list, json[QString("UserMFASettingList")]);
    m_user_mfa_setting_list_isSet = !json[QString("UserMFASettingList")].isNull() && m_user_mfa_setting_list_isValid;
}

QString OAIAdminGetUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdminGetUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_user_attributes.isSet()) {
        obj.insert(QString("UserAttributes"), ::OpenAPI::toJsonValue(m_user_attributes));
    }
    if (m_user_create_date_isSet) {
        obj.insert(QString("UserCreateDate"), ::OpenAPI::toJsonValue(m_user_create_date));
    }
    if (m_user_last_modified_date_isSet) {
        obj.insert(QString("UserLastModifiedDate"), ::OpenAPI::toJsonValue(m_user_last_modified_date));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_user_status.isSet()) {
        obj.insert(QString("UserStatus"), ::OpenAPI::toJsonValue(m_user_status));
    }
    if (m_mfa_options.isSet()) {
        obj.insert(QString("MFAOptions"), ::OpenAPI::toJsonValue(m_mfa_options));
    }
    if (m_preferred_mfa_setting_isSet) {
        obj.insert(QString("PreferredMfaSetting"), ::OpenAPI::toJsonValue(m_preferred_mfa_setting));
    }
    if (m_user_mfa_setting_list.isSet()) {
        obj.insert(QString("UserMFASettingList"), ::OpenAPI::toJsonValue(m_user_mfa_setting_list));
    }
    return obj;
}

QString OAIAdminGetUserResponse::getUsername() const {
    return m_username;
}
void OAIAdminGetUserResponse::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIAdminGetUserResponse::is_username_Set() const{
    return m_username_isSet;
}

bool OAIAdminGetUserResponse::is_username_Valid() const{
    return m_username_isValid;
}

QList OAIAdminGetUserResponse::getUserAttributes() const {
    return m_user_attributes;
}
void OAIAdminGetUserResponse::setUserAttributes(const QList &user_attributes) {
    m_user_attributes = user_attributes;
    m_user_attributes_isSet = true;
}

bool OAIAdminGetUserResponse::is_user_attributes_Set() const{
    return m_user_attributes_isSet;
}

bool OAIAdminGetUserResponse::is_user_attributes_Valid() const{
    return m_user_attributes_isValid;
}

QDateTime OAIAdminGetUserResponse::getUserCreateDate() const {
    return m_user_create_date;
}
void OAIAdminGetUserResponse::setUserCreateDate(const QDateTime &user_create_date) {
    m_user_create_date = user_create_date;
    m_user_create_date_isSet = true;
}

bool OAIAdminGetUserResponse::is_user_create_date_Set() const{
    return m_user_create_date_isSet;
}

bool OAIAdminGetUserResponse::is_user_create_date_Valid() const{
    return m_user_create_date_isValid;
}

QDateTime OAIAdminGetUserResponse::getUserLastModifiedDate() const {
    return m_user_last_modified_date;
}
void OAIAdminGetUserResponse::setUserLastModifiedDate(const QDateTime &user_last_modified_date) {
    m_user_last_modified_date = user_last_modified_date;
    m_user_last_modified_date_isSet = true;
}

bool OAIAdminGetUserResponse::is_user_last_modified_date_Set() const{
    return m_user_last_modified_date_isSet;
}

bool OAIAdminGetUserResponse::is_user_last_modified_date_Valid() const{
    return m_user_last_modified_date_isValid;
}

bool OAIAdminGetUserResponse::getEnabled() const {
    return m_enabled;
}
void OAIAdminGetUserResponse::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAdminGetUserResponse::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAdminGetUserResponse::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIUserStatusType OAIAdminGetUserResponse::getUserStatus() const {
    return m_user_status;
}
void OAIAdminGetUserResponse::setUserStatus(const OAIUserStatusType &user_status) {
    m_user_status = user_status;
    m_user_status_isSet = true;
}

bool OAIAdminGetUserResponse::is_user_status_Set() const{
    return m_user_status_isSet;
}

bool OAIAdminGetUserResponse::is_user_status_Valid() const{
    return m_user_status_isValid;
}

QList OAIAdminGetUserResponse::getMfaOptions() const {
    return m_mfa_options;
}
void OAIAdminGetUserResponse::setMfaOptions(const QList &mfa_options) {
    m_mfa_options = mfa_options;
    m_mfa_options_isSet = true;
}

bool OAIAdminGetUserResponse::is_mfa_options_Set() const{
    return m_mfa_options_isSet;
}

bool OAIAdminGetUserResponse::is_mfa_options_Valid() const{
    return m_mfa_options_isValid;
}

QString OAIAdminGetUserResponse::getPreferredMfaSetting() const {
    return m_preferred_mfa_setting;
}
void OAIAdminGetUserResponse::setPreferredMfaSetting(const QString &preferred_mfa_setting) {
    m_preferred_mfa_setting = preferred_mfa_setting;
    m_preferred_mfa_setting_isSet = true;
}

bool OAIAdminGetUserResponse::is_preferred_mfa_setting_Set() const{
    return m_preferred_mfa_setting_isSet;
}

bool OAIAdminGetUserResponse::is_preferred_mfa_setting_Valid() const{
    return m_preferred_mfa_setting_isValid;
}

QList OAIAdminGetUserResponse::getUserMfaSettingList() const {
    return m_user_mfa_setting_list;
}
void OAIAdminGetUserResponse::setUserMfaSettingList(const QList &user_mfa_setting_list) {
    m_user_mfa_setting_list = user_mfa_setting_list;
    m_user_mfa_setting_list_isSet = true;
}

bool OAIAdminGetUserResponse::is_user_mfa_setting_list_Set() const{
    return m_user_mfa_setting_list_isSet;
}

bool OAIAdminGetUserResponse::is_user_mfa_setting_list_Valid() const{
    return m_user_mfa_setting_list_isValid;
}

bool OAIAdminGetUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfa_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_mfa_setting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_mfa_setting_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdminGetUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_username_isValid && true;
}

} // namespace OpenAPI
