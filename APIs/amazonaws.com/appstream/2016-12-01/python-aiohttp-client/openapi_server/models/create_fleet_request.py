# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_fleet_request_compute_capacity import CreateFleetRequestComputeCapacity
from openapi_server.models.create_fleet_request_domain_join_info import CreateFleetRequestDomainJoinInfo
from openapi_server.models.create_fleet_request_session_script_s3_location import CreateFleetRequestSessionScriptS3Location
from openapi_server.models.create_fleet_request_vpc_config import CreateFleetRequestVpcConfig
from openapi_server.models.fleet_type import FleetType
from openapi_server.models.platform_type import PlatformType
from openapi_server.models.stream_view import StreamView
from openapi_server import util


class CreateFleetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, image_name: str=None, image_arn: str=None, instance_type: str=None, fleet_type: FleetType=None, compute_capacity: CreateFleetRequestComputeCapacity=None, vpc_config: CreateFleetRequestVpcConfig=None, max_user_duration_in_seconds: int=None, disconnect_timeout_in_seconds: int=None, description: str=None, display_name: str=None, enable_default_internet_access: bool=None, domain_join_info: CreateFleetRequestDomainJoinInfo=None, tags: Dict=None, idle_disconnect_timeout_in_seconds: int=None, iam_role_arn: str=None, stream_view: StreamView=None, platform: PlatformType=None, max_concurrent_sessions: int=None, usb_device_filter_strings: List=None, session_script_s3_location: CreateFleetRequestSessionScriptS3Location=None):
        """CreateFleetRequest - a model defined in OpenAPI

        :param name: The name of this CreateFleetRequest.
        :param image_name: The image_name of this CreateFleetRequest.
        :param image_arn: The image_arn of this CreateFleetRequest.
        :param instance_type: The instance_type of this CreateFleetRequest.
        :param fleet_type: The fleet_type of this CreateFleetRequest.
        :param compute_capacity: The compute_capacity of this CreateFleetRequest.
        :param vpc_config: The vpc_config of this CreateFleetRequest.
        :param max_user_duration_in_seconds: The max_user_duration_in_seconds of this CreateFleetRequest.
        :param disconnect_timeout_in_seconds: The disconnect_timeout_in_seconds of this CreateFleetRequest.
        :param description: The description of this CreateFleetRequest.
        :param display_name: The display_name of this CreateFleetRequest.
        :param enable_default_internet_access: The enable_default_internet_access of this CreateFleetRequest.
        :param domain_join_info: The domain_join_info of this CreateFleetRequest.
        :param tags: The tags of this CreateFleetRequest.
        :param idle_disconnect_timeout_in_seconds: The idle_disconnect_timeout_in_seconds of this CreateFleetRequest.
        :param iam_role_arn: The iam_role_arn of this CreateFleetRequest.
        :param stream_view: The stream_view of this CreateFleetRequest.
        :param platform: The platform of this CreateFleetRequest.
        :param max_concurrent_sessions: The max_concurrent_sessions of this CreateFleetRequest.
        :param usb_device_filter_strings: The usb_device_filter_strings of this CreateFleetRequest.
        :param session_script_s3_location: The session_script_s3_location of this CreateFleetRequest.
        """
        self.openapi_types = {
            'name': str,
            'image_name': str,
            'image_arn': str,
            'instance_type': str,
            'fleet_type': FleetType,
            'compute_capacity': CreateFleetRequestComputeCapacity,
            'vpc_config': CreateFleetRequestVpcConfig,
            'max_user_duration_in_seconds': int,
            'disconnect_timeout_in_seconds': int,
            'description': str,
            'display_name': str,
            'enable_default_internet_access': bool,
            'domain_join_info': CreateFleetRequestDomainJoinInfo,
            'tags': Dict,
            'idle_disconnect_timeout_in_seconds': int,
            'iam_role_arn': str,
            'stream_view': StreamView,
            'platform': PlatformType,
            'max_concurrent_sessions': int,
            'usb_device_filter_strings': List,
            'session_script_s3_location': CreateFleetRequestSessionScriptS3Location
        }

        self.attribute_map = {
            'name': 'Name',
            'image_name': 'ImageName',
            'image_arn': 'ImageArn',
            'instance_type': 'InstanceType',
            'fleet_type': 'FleetType',
            'compute_capacity': 'ComputeCapacity',
            'vpc_config': 'VpcConfig',
            'max_user_duration_in_seconds': 'MaxUserDurationInSeconds',
            'disconnect_timeout_in_seconds': 'DisconnectTimeoutInSeconds',
            'description': 'Description',
            'display_name': 'DisplayName',
            'enable_default_internet_access': 'EnableDefaultInternetAccess',
            'domain_join_info': 'DomainJoinInfo',
            'tags': 'Tags',
            'idle_disconnect_timeout_in_seconds': 'IdleDisconnectTimeoutInSeconds',
            'iam_role_arn': 'IamRoleArn',
            'stream_view': 'StreamView',
            'platform': 'Platform',
            'max_concurrent_sessions': 'MaxConcurrentSessions',
            'usb_device_filter_strings': 'UsbDeviceFilterStrings',
            'session_script_s3_location': 'SessionScriptS3Location'
        }

        self._name = name
        self._image_name = image_name
        self._image_arn = image_arn
        self._instance_type = instance_type
        self._fleet_type = fleet_type
        self._compute_capacity = compute_capacity
        self._vpc_config = vpc_config
        self._max_user_duration_in_seconds = max_user_duration_in_seconds
        self._disconnect_timeout_in_seconds = disconnect_timeout_in_seconds
        self._description = description
        self._display_name = display_name
        self._enable_default_internet_access = enable_default_internet_access
        self._domain_join_info = domain_join_info
        self._tags = tags
        self._idle_disconnect_timeout_in_seconds = idle_disconnect_timeout_in_seconds
        self._iam_role_arn = iam_role_arn
        self._stream_view = stream_view
        self._platform = platform
        self._max_concurrent_sessions = max_concurrent_sessions
        self._usb_device_filter_strings = usb_device_filter_strings
        self._session_script_s3_location = session_script_s3_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFleetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFleetRequest of this CreateFleetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateFleetRequest.


        :return: The name of this CreateFleetRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFleetRequest.


        :param name: The name of this CreateFleetRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def image_name(self):
        """Gets the image_name of this CreateFleetRequest.


        :return: The image_name of this CreateFleetRequest.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this CreateFleetRequest.


        :param image_name: The image_name of this CreateFleetRequest.
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def image_arn(self):
        """Gets the image_arn of this CreateFleetRequest.


        :return: The image_arn of this CreateFleetRequest.
        :rtype: str
        """
        return self._image_arn

    @image_arn.setter
    def image_arn(self, image_arn):
        """Sets the image_arn of this CreateFleetRequest.


        :param image_arn: The image_arn of this CreateFleetRequest.
        :type image_arn: str
        """

        self._image_arn = image_arn

    @property
    def instance_type(self):
        """Gets the instance_type of this CreateFleetRequest.


        :return: The instance_type of this CreateFleetRequest.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this CreateFleetRequest.


        :param instance_type: The instance_type of this CreateFleetRequest.
        :type instance_type: str
        """
        if instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")

        self._instance_type = instance_type

    @property
    def fleet_type(self):
        """Gets the fleet_type of this CreateFleetRequest.


        :return: The fleet_type of this CreateFleetRequest.
        :rtype: FleetType
        """
        return self._fleet_type

    @fleet_type.setter
    def fleet_type(self, fleet_type):
        """Sets the fleet_type of this CreateFleetRequest.


        :param fleet_type: The fleet_type of this CreateFleetRequest.
        :type fleet_type: FleetType
        """

        self._fleet_type = fleet_type

    @property
    def compute_capacity(self):
        """Gets the compute_capacity of this CreateFleetRequest.


        :return: The compute_capacity of this CreateFleetRequest.
        :rtype: CreateFleetRequestComputeCapacity
        """
        return self._compute_capacity

    @compute_capacity.setter
    def compute_capacity(self, compute_capacity):
        """Sets the compute_capacity of this CreateFleetRequest.


        :param compute_capacity: The compute_capacity of this CreateFleetRequest.
        :type compute_capacity: CreateFleetRequestComputeCapacity
        """

        self._compute_capacity = compute_capacity

    @property
    def vpc_config(self):
        """Gets the vpc_config of this CreateFleetRequest.


        :return: The vpc_config of this CreateFleetRequest.
        :rtype: CreateFleetRequestVpcConfig
        """
        return self._vpc_config

    @vpc_config.setter
    def vpc_config(self, vpc_config):
        """Sets the vpc_config of this CreateFleetRequest.


        :param vpc_config: The vpc_config of this CreateFleetRequest.
        :type vpc_config: CreateFleetRequestVpcConfig
        """

        self._vpc_config = vpc_config

    @property
    def max_user_duration_in_seconds(self):
        """Gets the max_user_duration_in_seconds of this CreateFleetRequest.


        :return: The max_user_duration_in_seconds of this CreateFleetRequest.
        :rtype: int
        """
        return self._max_user_duration_in_seconds

    @max_user_duration_in_seconds.setter
    def max_user_duration_in_seconds(self, max_user_duration_in_seconds):
        """Sets the max_user_duration_in_seconds of this CreateFleetRequest.


        :param max_user_duration_in_seconds: The max_user_duration_in_seconds of this CreateFleetRequest.
        :type max_user_duration_in_seconds: int
        """

        self._max_user_duration_in_seconds = max_user_duration_in_seconds

    @property
    def disconnect_timeout_in_seconds(self):
        """Gets the disconnect_timeout_in_seconds of this CreateFleetRequest.


        :return: The disconnect_timeout_in_seconds of this CreateFleetRequest.
        :rtype: int
        """
        return self._disconnect_timeout_in_seconds

    @disconnect_timeout_in_seconds.setter
    def disconnect_timeout_in_seconds(self, disconnect_timeout_in_seconds):
        """Sets the disconnect_timeout_in_seconds of this CreateFleetRequest.


        :param disconnect_timeout_in_seconds: The disconnect_timeout_in_seconds of this CreateFleetRequest.
        :type disconnect_timeout_in_seconds: int
        """

        self._disconnect_timeout_in_seconds = disconnect_timeout_in_seconds

    @property
    def description(self):
        """Gets the description of this CreateFleetRequest.


        :return: The description of this CreateFleetRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateFleetRequest.


        :param description: The description of this CreateFleetRequest.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this CreateFleetRequest.


        :return: The display_name of this CreateFleetRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateFleetRequest.


        :param display_name: The display_name of this CreateFleetRequest.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enable_default_internet_access(self):
        """Gets the enable_default_internet_access of this CreateFleetRequest.


        :return: The enable_default_internet_access of this CreateFleetRequest.
        :rtype: bool
        """
        return self._enable_default_internet_access

    @enable_default_internet_access.setter
    def enable_default_internet_access(self, enable_default_internet_access):
        """Sets the enable_default_internet_access of this CreateFleetRequest.


        :param enable_default_internet_access: The enable_default_internet_access of this CreateFleetRequest.
        :type enable_default_internet_access: bool
        """

        self._enable_default_internet_access = enable_default_internet_access

    @property
    def domain_join_info(self):
        """Gets the domain_join_info of this CreateFleetRequest.


        :return: The domain_join_info of this CreateFleetRequest.
        :rtype: CreateFleetRequestDomainJoinInfo
        """
        return self._domain_join_info

    @domain_join_info.setter
    def domain_join_info(self, domain_join_info):
        """Sets the domain_join_info of this CreateFleetRequest.


        :param domain_join_info: The domain_join_info of this CreateFleetRequest.
        :type domain_join_info: CreateFleetRequestDomainJoinInfo
        """

        self._domain_join_info = domain_join_info

    @property
    def tags(self):
        """Gets the tags of this CreateFleetRequest.


        :return: The tags of this CreateFleetRequest.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFleetRequest.


        :param tags: The tags of this CreateFleetRequest.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def idle_disconnect_timeout_in_seconds(self):
        """Gets the idle_disconnect_timeout_in_seconds of this CreateFleetRequest.


        :return: The idle_disconnect_timeout_in_seconds of this CreateFleetRequest.
        :rtype: int
        """
        return self._idle_disconnect_timeout_in_seconds

    @idle_disconnect_timeout_in_seconds.setter
    def idle_disconnect_timeout_in_seconds(self, idle_disconnect_timeout_in_seconds):
        """Sets the idle_disconnect_timeout_in_seconds of this CreateFleetRequest.


        :param idle_disconnect_timeout_in_seconds: The idle_disconnect_timeout_in_seconds of this CreateFleetRequest.
        :type idle_disconnect_timeout_in_seconds: int
        """

        self._idle_disconnect_timeout_in_seconds = idle_disconnect_timeout_in_seconds

    @property
    def iam_role_arn(self):
        """Gets the iam_role_arn of this CreateFleetRequest.


        :return: The iam_role_arn of this CreateFleetRequest.
        :rtype: str
        """
        return self._iam_role_arn

    @iam_role_arn.setter
    def iam_role_arn(self, iam_role_arn):
        """Sets the iam_role_arn of this CreateFleetRequest.


        :param iam_role_arn: The iam_role_arn of this CreateFleetRequest.
        :type iam_role_arn: str
        """

        self._iam_role_arn = iam_role_arn

    @property
    def stream_view(self):
        """Gets the stream_view of this CreateFleetRequest.


        :return: The stream_view of this CreateFleetRequest.
        :rtype: StreamView
        """
        return self._stream_view

    @stream_view.setter
    def stream_view(self, stream_view):
        """Sets the stream_view of this CreateFleetRequest.


        :param stream_view: The stream_view of this CreateFleetRequest.
        :type stream_view: StreamView
        """

        self._stream_view = stream_view

    @property
    def platform(self):
        """Gets the platform of this CreateFleetRequest.


        :return: The platform of this CreateFleetRequest.
        :rtype: PlatformType
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this CreateFleetRequest.


        :param platform: The platform of this CreateFleetRequest.
        :type platform: PlatformType
        """

        self._platform = platform

    @property
    def max_concurrent_sessions(self):
        """Gets the max_concurrent_sessions of this CreateFleetRequest.


        :return: The max_concurrent_sessions of this CreateFleetRequest.
        :rtype: int
        """
        return self._max_concurrent_sessions

    @max_concurrent_sessions.setter
    def max_concurrent_sessions(self, max_concurrent_sessions):
        """Sets the max_concurrent_sessions of this CreateFleetRequest.


        :param max_concurrent_sessions: The max_concurrent_sessions of this CreateFleetRequest.
        :type max_concurrent_sessions: int
        """

        self._max_concurrent_sessions = max_concurrent_sessions

    @property
    def usb_device_filter_strings(self):
        """Gets the usb_device_filter_strings of this CreateFleetRequest.


        :return: The usb_device_filter_strings of this CreateFleetRequest.
        :rtype: List
        """
        return self._usb_device_filter_strings

    @usb_device_filter_strings.setter
    def usb_device_filter_strings(self, usb_device_filter_strings):
        """Sets the usb_device_filter_strings of this CreateFleetRequest.


        :param usb_device_filter_strings: The usb_device_filter_strings of this CreateFleetRequest.
        :type usb_device_filter_strings: List
        """

        self._usb_device_filter_strings = usb_device_filter_strings

    @property
    def session_script_s3_location(self):
        """Gets the session_script_s3_location of this CreateFleetRequest.


        :return: The session_script_s3_location of this CreateFleetRequest.
        :rtype: CreateFleetRequestSessionScriptS3Location
        """
        return self._session_script_s3_location

    @session_script_s3_location.setter
    def session_script_s3_location(self, session_script_s3_location):
        """Sets the session_script_s3_location of this CreateFleetRequest.


        :param session_script_s3_location: The session_script_s3_location of this CreateFleetRequest.
        :type session_script_s3_location: CreateFleetRequestSessionScriptS3Location
        """

        self._session_script_s3_location = session_script_s3_location
