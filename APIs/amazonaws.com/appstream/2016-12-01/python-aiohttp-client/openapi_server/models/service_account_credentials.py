# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceAccountCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, account_password: str=None):
        """ServiceAccountCredentials - a model defined in OpenAPI

        :param account_name: The account_name of this ServiceAccountCredentials.
        :param account_password: The account_password of this ServiceAccountCredentials.
        """
        self.openapi_types = {
            'account_name': str,
            'account_password': str
        }

        self.attribute_map = {
            'account_name': 'AccountName',
            'account_password': 'AccountPassword'
        }

        self._account_name = account_name
        self._account_password = account_password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceAccountCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceAccountCredentials of this ServiceAccountCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this ServiceAccountCredentials.


        :return: The account_name of this ServiceAccountCredentials.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this ServiceAccountCredentials.


        :param account_name: The account_name of this ServiceAccountCredentials.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")

        self._account_name = account_name

    @property
    def account_password(self):
        """Gets the account_password of this ServiceAccountCredentials.


        :return: The account_password of this ServiceAccountCredentials.
        :rtype: str
        """
        return self._account_password

    @account_password.setter
    def account_password(self, account_password):
        """Sets the account_password of this ServiceAccountCredentials.


        :param account_password: The account_password of this ServiceAccountCredentials.
        :type account_password: str
        """
        if account_password is None:
            raise ValueError("Invalid value for `account_password`, must not be `None`")

        self._account_password = account_password
