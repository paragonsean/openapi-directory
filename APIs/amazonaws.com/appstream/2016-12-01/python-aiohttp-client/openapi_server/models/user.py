# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_type import AuthenticationType
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, user_name: str=None, enabled: bool=None, status: str=None, first_name: str=None, last_name: str=None, created_time: datetime=None, authentication_type: AuthenticationType=None):
        """User - a model defined in OpenAPI

        :param arn: The arn of this User.
        :param user_name: The user_name of this User.
        :param enabled: The enabled of this User.
        :param status: The status of this User.
        :param first_name: The first_name of this User.
        :param last_name: The last_name of this User.
        :param created_time: The created_time of this User.
        :param authentication_type: The authentication_type of this User.
        """
        self.openapi_types = {
            'arn': str,
            'user_name': str,
            'enabled': bool,
            'status': str,
            'first_name': str,
            'last_name': str,
            'created_time': datetime,
            'authentication_type': AuthenticationType
        }

        self.attribute_map = {
            'arn': 'Arn',
            'user_name': 'UserName',
            'enabled': 'Enabled',
            'status': 'Status',
            'first_name': 'FirstName',
            'last_name': 'LastName',
            'created_time': 'CreatedTime',
            'authentication_type': 'AuthenticationType'
        }

        self._arn = arn
        self._user_name = user_name
        self._enabled = enabled
        self._status = status
        self._first_name = first_name
        self._last_name = last_name
        self._created_time = created_time
        self._authentication_type = authentication_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this User.


        :return: The arn of this User.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this User.


        :param arn: The arn of this User.
        :type arn: str
        """

        self._arn = arn

    @property
    def user_name(self):
        """Gets the user_name of this User.


        :return: The user_name of this User.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this User.


        :param user_name: The user_name of this User.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def enabled(self):
        """Gets the enabled of this User.


        :return: The enabled of this User.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this User.


        :param enabled: The enabled of this User.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def status(self):
        """Gets the status of this User.


        :return: The status of this User.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.


        :param status: The status of this User.
        :type status: str
        """

        self._status = status

    @property
    def first_name(self):
        """Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def created_time(self):
        """Gets the created_time of this User.


        :return: The created_time of this User.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this User.


        :param created_time: The created_time of this User.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def authentication_type(self):
        """Gets the authentication_type of this User.


        :return: The authentication_type of this User.
        :rtype: AuthenticationType
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this User.


        :param authentication_type: The authentication_type of this User.
        :type authentication_type: AuthenticationType
        """
        if authentication_type is None:
            raise ValueError("Invalid value for `authentication_type`, must not be `None`")

        self._authentication_type = authentication_type
