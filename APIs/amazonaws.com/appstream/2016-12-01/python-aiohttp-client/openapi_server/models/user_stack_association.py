# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_type import AuthenticationType
from openapi_server import util


class UserStackAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_name: str=None, user_name: str=None, authentication_type: AuthenticationType=None, send_email_notification: bool=None):
        """UserStackAssociation - a model defined in OpenAPI

        :param stack_name: The stack_name of this UserStackAssociation.
        :param user_name: The user_name of this UserStackAssociation.
        :param authentication_type: The authentication_type of this UserStackAssociation.
        :param send_email_notification: The send_email_notification of this UserStackAssociation.
        """
        self.openapi_types = {
            'stack_name': str,
            'user_name': str,
            'authentication_type': AuthenticationType,
            'send_email_notification': bool
        }

        self.attribute_map = {
            'stack_name': 'StackName',
            'user_name': 'UserName',
            'authentication_type': 'AuthenticationType',
            'send_email_notification': 'SendEmailNotification'
        }

        self._stack_name = stack_name
        self._user_name = user_name
        self._authentication_type = authentication_type
        self._send_email_notification = send_email_notification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserStackAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserStackAssociation of this UserStackAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_name(self):
        """Gets the stack_name of this UserStackAssociation.


        :return: The stack_name of this UserStackAssociation.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this UserStackAssociation.


        :param stack_name: The stack_name of this UserStackAssociation.
        :type stack_name: str
        """
        if stack_name is None:
            raise ValueError("Invalid value for `stack_name`, must not be `None`")

        self._stack_name = stack_name

    @property
    def user_name(self):
        """Gets the user_name of this UserStackAssociation.


        :return: The user_name of this UserStackAssociation.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserStackAssociation.


        :param user_name: The user_name of this UserStackAssociation.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name

    @property
    def authentication_type(self):
        """Gets the authentication_type of this UserStackAssociation.


        :return: The authentication_type of this UserStackAssociation.
        :rtype: AuthenticationType
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this UserStackAssociation.


        :param authentication_type: The authentication_type of this UserStackAssociation.
        :type authentication_type: AuthenticationType
        """
        if authentication_type is None:
            raise ValueError("Invalid value for `authentication_type`, must not be `None`")

        self._authentication_type = authentication_type

    @property
    def send_email_notification(self):
        """Gets the send_email_notification of this UserStackAssociation.


        :return: The send_email_notification of this UserStackAssociation.
        :rtype: bool
        """
        return self._send_email_notification

    @send_email_notification.setter
    def send_email_notification(self, send_email_notification):
        """Sets the send_email_notification of this UserStackAssociation.


        :param send_email_notification: The send_email_notification of this UserStackAssociation.
        :type send_email_notification: bool
        """

        self._send_email_notification = send_email_notification
