# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AppBlockBuilderAppBlockAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_block_arn: str=None, app_block_builder_name: str=None):
        """AppBlockBuilderAppBlockAssociation - a model defined in OpenAPI

        :param app_block_arn: The app_block_arn of this AppBlockBuilderAppBlockAssociation.
        :param app_block_builder_name: The app_block_builder_name of this AppBlockBuilderAppBlockAssociation.
        """
        self.openapi_types = {
            'app_block_arn': str,
            'app_block_builder_name': str
        }

        self.attribute_map = {
            'app_block_arn': 'AppBlockArn',
            'app_block_builder_name': 'AppBlockBuilderName'
        }

        self._app_block_arn = app_block_arn
        self._app_block_builder_name = app_block_builder_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppBlockBuilderAppBlockAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppBlockBuilderAppBlockAssociation of this AppBlockBuilderAppBlockAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_block_arn(self):
        """Gets the app_block_arn of this AppBlockBuilderAppBlockAssociation.


        :return: The app_block_arn of this AppBlockBuilderAppBlockAssociation.
        :rtype: str
        """
        return self._app_block_arn

    @app_block_arn.setter
    def app_block_arn(self, app_block_arn):
        """Sets the app_block_arn of this AppBlockBuilderAppBlockAssociation.


        :param app_block_arn: The app_block_arn of this AppBlockBuilderAppBlockAssociation.
        :type app_block_arn: str
        """
        if app_block_arn is None:
            raise ValueError("Invalid value for `app_block_arn`, must not be `None`")

        self._app_block_arn = app_block_arn

    @property
    def app_block_builder_name(self):
        """Gets the app_block_builder_name of this AppBlockBuilderAppBlockAssociation.


        :return: The app_block_builder_name of this AppBlockBuilderAppBlockAssociation.
        :rtype: str
        """
        return self._app_block_builder_name

    @app_block_builder_name.setter
    def app_block_builder_name(self, app_block_builder_name):
        """Sets the app_block_builder_name of this AppBlockBuilderAppBlockAssociation.


        :param app_block_builder_name: The app_block_builder_name of this AppBlockBuilderAppBlockAssociation.
        :type app_block_builder_name: str
        """
        if app_block_builder_name is None:
            raise ValueError("Invalid value for `app_block_builder_name`, must not be `None`")

        self._app_block_builder_name = app_block_builder_name
