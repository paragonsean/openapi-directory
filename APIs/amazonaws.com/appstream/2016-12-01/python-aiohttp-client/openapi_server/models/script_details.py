# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.script_details_script_s3_location import ScriptDetailsScriptS3Location
from openapi_server import util


class ScriptDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, script_s3_location: ScriptDetailsScriptS3Location=None, executable_path: str=None, executable_parameters: str=None, timeout_in_seconds: int=None):
        """ScriptDetails - a model defined in OpenAPI

        :param script_s3_location: The script_s3_location of this ScriptDetails.
        :param executable_path: The executable_path of this ScriptDetails.
        :param executable_parameters: The executable_parameters of this ScriptDetails.
        :param timeout_in_seconds: The timeout_in_seconds of this ScriptDetails.
        """
        self.openapi_types = {
            'script_s3_location': ScriptDetailsScriptS3Location,
            'executable_path': str,
            'executable_parameters': str,
            'timeout_in_seconds': int
        }

        self.attribute_map = {
            'script_s3_location': 'ScriptS3Location',
            'executable_path': 'ExecutablePath',
            'executable_parameters': 'ExecutableParameters',
            'timeout_in_seconds': 'TimeoutInSeconds'
        }

        self._script_s3_location = script_s3_location
        self._executable_path = executable_path
        self._executable_parameters = executable_parameters
        self._timeout_in_seconds = timeout_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScriptDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScriptDetails of this ScriptDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def script_s3_location(self):
        """Gets the script_s3_location of this ScriptDetails.


        :return: The script_s3_location of this ScriptDetails.
        :rtype: ScriptDetailsScriptS3Location
        """
        return self._script_s3_location

    @script_s3_location.setter
    def script_s3_location(self, script_s3_location):
        """Sets the script_s3_location of this ScriptDetails.


        :param script_s3_location: The script_s3_location of this ScriptDetails.
        :type script_s3_location: ScriptDetailsScriptS3Location
        """
        if script_s3_location is None:
            raise ValueError("Invalid value for `script_s3_location`, must not be `None`")

        self._script_s3_location = script_s3_location

    @property
    def executable_path(self):
        """Gets the executable_path of this ScriptDetails.


        :return: The executable_path of this ScriptDetails.
        :rtype: str
        """
        return self._executable_path

    @executable_path.setter
    def executable_path(self, executable_path):
        """Sets the executable_path of this ScriptDetails.


        :param executable_path: The executable_path of this ScriptDetails.
        :type executable_path: str
        """
        if executable_path is None:
            raise ValueError("Invalid value for `executable_path`, must not be `None`")

        self._executable_path = executable_path

    @property
    def executable_parameters(self):
        """Gets the executable_parameters of this ScriptDetails.


        :return: The executable_parameters of this ScriptDetails.
        :rtype: str
        """
        return self._executable_parameters

    @executable_parameters.setter
    def executable_parameters(self, executable_parameters):
        """Sets the executable_parameters of this ScriptDetails.


        :param executable_parameters: The executable_parameters of this ScriptDetails.
        :type executable_parameters: str
        """

        self._executable_parameters = executable_parameters

    @property
    def timeout_in_seconds(self):
        """Gets the timeout_in_seconds of this ScriptDetails.


        :return: The timeout_in_seconds of this ScriptDetails.
        :rtype: int
        """
        return self._timeout_in_seconds

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, timeout_in_seconds):
        """Sets the timeout_in_seconds of this ScriptDetails.


        :param timeout_in_seconds: The timeout_in_seconds of this ScriptDetails.
        :type timeout_in_seconds: int
        """
        if timeout_in_seconds is None:
            raise ValueError("Invalid value for `timeout_in_seconds`, must not be `None`")

        self._timeout_in_seconds = timeout_in_seconds
