# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateApplicationToEntitlementRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_name: str=None, entitlement_name: str=None, application_identifier: str=None):
        """AssociateApplicationToEntitlementRequest - a model defined in OpenAPI

        :param stack_name: The stack_name of this AssociateApplicationToEntitlementRequest.
        :param entitlement_name: The entitlement_name of this AssociateApplicationToEntitlementRequest.
        :param application_identifier: The application_identifier of this AssociateApplicationToEntitlementRequest.
        """
        self.openapi_types = {
            'stack_name': str,
            'entitlement_name': str,
            'application_identifier': str
        }

        self.attribute_map = {
            'stack_name': 'StackName',
            'entitlement_name': 'EntitlementName',
            'application_identifier': 'ApplicationIdentifier'
        }

        self._stack_name = stack_name
        self._entitlement_name = entitlement_name
        self._application_identifier = application_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateApplicationToEntitlementRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateApplicationToEntitlementRequest of this AssociateApplicationToEntitlementRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_name(self):
        """Gets the stack_name of this AssociateApplicationToEntitlementRequest.


        :return: The stack_name of this AssociateApplicationToEntitlementRequest.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this AssociateApplicationToEntitlementRequest.


        :param stack_name: The stack_name of this AssociateApplicationToEntitlementRequest.
        :type stack_name: str
        """
        if stack_name is None:
            raise ValueError("Invalid value for `stack_name`, must not be `None`")

        self._stack_name = stack_name

    @property
    def entitlement_name(self):
        """Gets the entitlement_name of this AssociateApplicationToEntitlementRequest.


        :return: The entitlement_name of this AssociateApplicationToEntitlementRequest.
        :rtype: str
        """
        return self._entitlement_name

    @entitlement_name.setter
    def entitlement_name(self, entitlement_name):
        """Sets the entitlement_name of this AssociateApplicationToEntitlementRequest.


        :param entitlement_name: The entitlement_name of this AssociateApplicationToEntitlementRequest.
        :type entitlement_name: str
        """
        if entitlement_name is None:
            raise ValueError("Invalid value for `entitlement_name`, must not be `None`")

        self._entitlement_name = entitlement_name

    @property
    def application_identifier(self):
        """Gets the application_identifier of this AssociateApplicationToEntitlementRequest.


        :return: The application_identifier of this AssociateApplicationToEntitlementRequest.
        :rtype: str
        """
        return self._application_identifier

    @application_identifier.setter
    def application_identifier(self, application_identifier):
        """Sets the application_identifier of this AssociateApplicationToEntitlementRequest.


        :param application_identifier: The application_identifier of this AssociateApplicationToEntitlementRequest.
        :type application_identifier: str
        """
        if application_identifier is None:
            raise ValueError("Invalid value for `application_identifier`, must not be `None`")

        self._application_identifier = application_identifier
