# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_type import AuthenticationType
from openapi_server.models.session_connection_state import SessionConnectionState
from openapi_server.models.session_network_access_configuration import SessionNetworkAccessConfiguration
from openapi_server.models.session_state import SessionState
from openapi_server import util


class Session(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, user_id: str=None, stack_name: str=None, fleet_name: str=None, state: SessionState=None, connection_state: SessionConnectionState=None, start_time: datetime=None, max_expiration_time: datetime=None, authentication_type: AuthenticationType=None, network_access_configuration: SessionNetworkAccessConfiguration=None):
        """Session - a model defined in OpenAPI

        :param id: The id of this Session.
        :param user_id: The user_id of this Session.
        :param stack_name: The stack_name of this Session.
        :param fleet_name: The fleet_name of this Session.
        :param state: The state of this Session.
        :param connection_state: The connection_state of this Session.
        :param start_time: The start_time of this Session.
        :param max_expiration_time: The max_expiration_time of this Session.
        :param authentication_type: The authentication_type of this Session.
        :param network_access_configuration: The network_access_configuration of this Session.
        """
        self.openapi_types = {
            'id': str,
            'user_id': str,
            'stack_name': str,
            'fleet_name': str,
            'state': SessionState,
            'connection_state': SessionConnectionState,
            'start_time': datetime,
            'max_expiration_time': datetime,
            'authentication_type': AuthenticationType,
            'network_access_configuration': SessionNetworkAccessConfiguration
        }

        self.attribute_map = {
            'id': 'Id',
            'user_id': 'UserId',
            'stack_name': 'StackName',
            'fleet_name': 'FleetName',
            'state': 'State',
            'connection_state': 'ConnectionState',
            'start_time': 'StartTime',
            'max_expiration_time': 'MaxExpirationTime',
            'authentication_type': 'AuthenticationType',
            'network_access_configuration': 'NetworkAccessConfiguration'
        }

        self._id = id
        self._user_id = user_id
        self._stack_name = stack_name
        self._fleet_name = fleet_name
        self._state = state
        self._connection_state = connection_state
        self._start_time = start_time
        self._max_expiration_time = max_expiration_time
        self._authentication_type = authentication_type
        self._network_access_configuration = network_access_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Session':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Session of this Session.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Session.


        :return: The id of this Session.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Session.


        :param id: The id of this Session.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this Session.


        :return: The user_id of this Session.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Session.


        :param user_id: The user_id of this Session.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def stack_name(self):
        """Gets the stack_name of this Session.


        :return: The stack_name of this Session.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this Session.


        :param stack_name: The stack_name of this Session.
        :type stack_name: str
        """
        if stack_name is None:
            raise ValueError("Invalid value for `stack_name`, must not be `None`")

        self._stack_name = stack_name

    @property
    def fleet_name(self):
        """Gets the fleet_name of this Session.


        :return: The fleet_name of this Session.
        :rtype: str
        """
        return self._fleet_name

    @fleet_name.setter
    def fleet_name(self, fleet_name):
        """Sets the fleet_name of this Session.


        :param fleet_name: The fleet_name of this Session.
        :type fleet_name: str
        """
        if fleet_name is None:
            raise ValueError("Invalid value for `fleet_name`, must not be `None`")

        self._fleet_name = fleet_name

    @property
    def state(self):
        """Gets the state of this Session.


        :return: The state of this Session.
        :rtype: SessionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Session.


        :param state: The state of this Session.
        :type state: SessionState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def connection_state(self):
        """Gets the connection_state of this Session.


        :return: The connection_state of this Session.
        :rtype: SessionConnectionState
        """
        return self._connection_state

    @connection_state.setter
    def connection_state(self, connection_state):
        """Sets the connection_state of this Session.


        :param connection_state: The connection_state of this Session.
        :type connection_state: SessionConnectionState
        """

        self._connection_state = connection_state

    @property
    def start_time(self):
        """Gets the start_time of this Session.


        :return: The start_time of this Session.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Session.


        :param start_time: The start_time of this Session.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def max_expiration_time(self):
        """Gets the max_expiration_time of this Session.


        :return: The max_expiration_time of this Session.
        :rtype: datetime
        """
        return self._max_expiration_time

    @max_expiration_time.setter
    def max_expiration_time(self, max_expiration_time):
        """Sets the max_expiration_time of this Session.


        :param max_expiration_time: The max_expiration_time of this Session.
        :type max_expiration_time: datetime
        """

        self._max_expiration_time = max_expiration_time

    @property
    def authentication_type(self):
        """Gets the authentication_type of this Session.


        :return: The authentication_type of this Session.
        :rtype: AuthenticationType
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this Session.


        :param authentication_type: The authentication_type of this Session.
        :type authentication_type: AuthenticationType
        """

        self._authentication_type = authentication_type

    @property
    def network_access_configuration(self):
        """Gets the network_access_configuration of this Session.


        :return: The network_access_configuration of this Session.
        :rtype: SessionNetworkAccessConfiguration
        """
        return self._network_access_configuration

    @network_access_configuration.setter
    def network_access_configuration(self, network_access_configuration):
        """Sets the network_access_configuration of this Session.


        :param network_access_configuration: The network_access_configuration of this Session.
        :type network_access_configuration: SessionNetworkAccessConfiguration
        """

        self._network_access_configuration = network_access_configuration
