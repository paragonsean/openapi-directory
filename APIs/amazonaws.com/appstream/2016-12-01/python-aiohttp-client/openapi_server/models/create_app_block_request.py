# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_app_block_request_post_setup_script_details import CreateAppBlockRequestPostSetupScriptDetails
from openapi_server.models.create_app_block_request_setup_script_details import CreateAppBlockRequestSetupScriptDetails
from openapi_server.models.create_app_block_request_source_s3_location import CreateAppBlockRequestSourceS3Location
from openapi_server.models.packaging_type import PackagingType
from openapi_server import util


class CreateAppBlockRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, display_name: str=None, source_s3_location: CreateAppBlockRequestSourceS3Location=None, setup_script_details: CreateAppBlockRequestSetupScriptDetails=None, tags: Dict=None, post_setup_script_details: CreateAppBlockRequestPostSetupScriptDetails=None, packaging_type: PackagingType=None):
        """CreateAppBlockRequest - a model defined in OpenAPI

        :param name: The name of this CreateAppBlockRequest.
        :param description: The description of this CreateAppBlockRequest.
        :param display_name: The display_name of this CreateAppBlockRequest.
        :param source_s3_location: The source_s3_location of this CreateAppBlockRequest.
        :param setup_script_details: The setup_script_details of this CreateAppBlockRequest.
        :param tags: The tags of this CreateAppBlockRequest.
        :param post_setup_script_details: The post_setup_script_details of this CreateAppBlockRequest.
        :param packaging_type: The packaging_type of this CreateAppBlockRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'display_name': str,
            'source_s3_location': CreateAppBlockRequestSourceS3Location,
            'setup_script_details': CreateAppBlockRequestSetupScriptDetails,
            'tags': Dict,
            'post_setup_script_details': CreateAppBlockRequestPostSetupScriptDetails,
            'packaging_type': PackagingType
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'display_name': 'DisplayName',
            'source_s3_location': 'SourceS3Location',
            'setup_script_details': 'SetupScriptDetails',
            'tags': 'Tags',
            'post_setup_script_details': 'PostSetupScriptDetails',
            'packaging_type': 'PackagingType'
        }

        self._name = name
        self._description = description
        self._display_name = display_name
        self._source_s3_location = source_s3_location
        self._setup_script_details = setup_script_details
        self._tags = tags
        self._post_setup_script_details = post_setup_script_details
        self._packaging_type = packaging_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAppBlockRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAppBlockRequest of this CreateAppBlockRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateAppBlockRequest.


        :return: The name of this CreateAppBlockRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAppBlockRequest.


        :param name: The name of this CreateAppBlockRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateAppBlockRequest.


        :return: The description of this CreateAppBlockRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAppBlockRequest.


        :param description: The description of this CreateAppBlockRequest.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this CreateAppBlockRequest.


        :return: The display_name of this CreateAppBlockRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateAppBlockRequest.


        :param display_name: The display_name of this CreateAppBlockRequest.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def source_s3_location(self):
        """Gets the source_s3_location of this CreateAppBlockRequest.


        :return: The source_s3_location of this CreateAppBlockRequest.
        :rtype: CreateAppBlockRequestSourceS3Location
        """
        return self._source_s3_location

    @source_s3_location.setter
    def source_s3_location(self, source_s3_location):
        """Sets the source_s3_location of this CreateAppBlockRequest.


        :param source_s3_location: The source_s3_location of this CreateAppBlockRequest.
        :type source_s3_location: CreateAppBlockRequestSourceS3Location
        """
        if source_s3_location is None:
            raise ValueError("Invalid value for `source_s3_location`, must not be `None`")

        self._source_s3_location = source_s3_location

    @property
    def setup_script_details(self):
        """Gets the setup_script_details of this CreateAppBlockRequest.


        :return: The setup_script_details of this CreateAppBlockRequest.
        :rtype: CreateAppBlockRequestSetupScriptDetails
        """
        return self._setup_script_details

    @setup_script_details.setter
    def setup_script_details(self, setup_script_details):
        """Sets the setup_script_details of this CreateAppBlockRequest.


        :param setup_script_details: The setup_script_details of this CreateAppBlockRequest.
        :type setup_script_details: CreateAppBlockRequestSetupScriptDetails
        """

        self._setup_script_details = setup_script_details

    @property
    def tags(self):
        """Gets the tags of this CreateAppBlockRequest.


        :return: The tags of this CreateAppBlockRequest.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAppBlockRequest.


        :param tags: The tags of this CreateAppBlockRequest.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def post_setup_script_details(self):
        """Gets the post_setup_script_details of this CreateAppBlockRequest.


        :return: The post_setup_script_details of this CreateAppBlockRequest.
        :rtype: CreateAppBlockRequestPostSetupScriptDetails
        """
        return self._post_setup_script_details

    @post_setup_script_details.setter
    def post_setup_script_details(self, post_setup_script_details):
        """Sets the post_setup_script_details of this CreateAppBlockRequest.


        :param post_setup_script_details: The post_setup_script_details of this CreateAppBlockRequest.
        :type post_setup_script_details: CreateAppBlockRequestPostSetupScriptDetails
        """

        self._post_setup_script_details = post_setup_script_details

    @property
    def packaging_type(self):
        """Gets the packaging_type of this CreateAppBlockRequest.


        :return: The packaging_type of this CreateAppBlockRequest.
        :rtype: PackagingType
        """
        return self._packaging_type

    @packaging_type.setter
    def packaging_type(self, packaging_type):
        """Sets the packaging_type of this CreateAppBlockRequest.


        :param packaging_type: The packaging_type of this CreateAppBlockRequest.
        :type packaging_type: PackagingType
        """

        self._packaging_type = packaging_type
