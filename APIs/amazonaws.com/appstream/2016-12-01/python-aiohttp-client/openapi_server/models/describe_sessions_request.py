# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_type import AuthenticationType
from openapi_server import util


class DescribeSessionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_name: str=None, fleet_name: str=None, user_id: str=None, next_token: str=None, limit: int=None, authentication_type: AuthenticationType=None):
        """DescribeSessionsRequest - a model defined in OpenAPI

        :param stack_name: The stack_name of this DescribeSessionsRequest.
        :param fleet_name: The fleet_name of this DescribeSessionsRequest.
        :param user_id: The user_id of this DescribeSessionsRequest.
        :param next_token: The next_token of this DescribeSessionsRequest.
        :param limit: The limit of this DescribeSessionsRequest.
        :param authentication_type: The authentication_type of this DescribeSessionsRequest.
        """
        self.openapi_types = {
            'stack_name': str,
            'fleet_name': str,
            'user_id': str,
            'next_token': str,
            'limit': int,
            'authentication_type': AuthenticationType
        }

        self.attribute_map = {
            'stack_name': 'StackName',
            'fleet_name': 'FleetName',
            'user_id': 'UserId',
            'next_token': 'NextToken',
            'limit': 'Limit',
            'authentication_type': 'AuthenticationType'
        }

        self._stack_name = stack_name
        self._fleet_name = fleet_name
        self._user_id = user_id
        self._next_token = next_token
        self._limit = limit
        self._authentication_type = authentication_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeSessionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeSessionsRequest of this DescribeSessionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_name(self):
        """Gets the stack_name of this DescribeSessionsRequest.


        :return: The stack_name of this DescribeSessionsRequest.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this DescribeSessionsRequest.


        :param stack_name: The stack_name of this DescribeSessionsRequest.
        :type stack_name: str
        """
        if stack_name is None:
            raise ValueError("Invalid value for `stack_name`, must not be `None`")

        self._stack_name = stack_name

    @property
    def fleet_name(self):
        """Gets the fleet_name of this DescribeSessionsRequest.


        :return: The fleet_name of this DescribeSessionsRequest.
        :rtype: str
        """
        return self._fleet_name

    @fleet_name.setter
    def fleet_name(self, fleet_name):
        """Sets the fleet_name of this DescribeSessionsRequest.


        :param fleet_name: The fleet_name of this DescribeSessionsRequest.
        :type fleet_name: str
        """
        if fleet_name is None:
            raise ValueError("Invalid value for `fleet_name`, must not be `None`")

        self._fleet_name = fleet_name

    @property
    def user_id(self):
        """Gets the user_id of this DescribeSessionsRequest.


        :return: The user_id of this DescribeSessionsRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DescribeSessionsRequest.


        :param user_id: The user_id of this DescribeSessionsRequest.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def next_token(self):
        """Gets the next_token of this DescribeSessionsRequest.


        :return: The next_token of this DescribeSessionsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeSessionsRequest.


        :param next_token: The next_token of this DescribeSessionsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def limit(self):
        """Gets the limit of this DescribeSessionsRequest.


        :return: The limit of this DescribeSessionsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this DescribeSessionsRequest.


        :param limit: The limit of this DescribeSessionsRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def authentication_type(self):
        """Gets the authentication_type of this DescribeSessionsRequest.


        :return: The authentication_type of this DescribeSessionsRequest.
        :rtype: AuthenticationType
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this DescribeSessionsRequest.


        :param authentication_type: The authentication_type of this DescribeSessionsRequest.
        :type authentication_type: AuthenticationType
        """

        self._authentication_type = authentication_type
