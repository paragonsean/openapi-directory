# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shared_image_permissions_image_permissions import SharedImagePermissionsImagePermissions
from openapi_server import util


class SharedImagePermissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shared_account_id: str=None, image_permissions: SharedImagePermissionsImagePermissions=None):
        """SharedImagePermissions - a model defined in OpenAPI

        :param shared_account_id: The shared_account_id of this SharedImagePermissions.
        :param image_permissions: The image_permissions of this SharedImagePermissions.
        """
        self.openapi_types = {
            'shared_account_id': str,
            'image_permissions': SharedImagePermissionsImagePermissions
        }

        self.attribute_map = {
            'shared_account_id': 'sharedAccountId',
            'image_permissions': 'imagePermissions'
        }

        self._shared_account_id = shared_account_id
        self._image_permissions = image_permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SharedImagePermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SharedImagePermissions of this SharedImagePermissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shared_account_id(self):
        """Gets the shared_account_id of this SharedImagePermissions.


        :return: The shared_account_id of this SharedImagePermissions.
        :rtype: str
        """
        return self._shared_account_id

    @shared_account_id.setter
    def shared_account_id(self, shared_account_id):
        """Sets the shared_account_id of this SharedImagePermissions.


        :param shared_account_id: The shared_account_id of this SharedImagePermissions.
        :type shared_account_id: str
        """
        if shared_account_id is None:
            raise ValueError("Invalid value for `shared_account_id`, must not be `None`")

        self._shared_account_id = shared_account_id

    @property
    def image_permissions(self):
        """Gets the image_permissions of this SharedImagePermissions.


        :return: The image_permissions of this SharedImagePermissions.
        :rtype: SharedImagePermissionsImagePermissions
        """
        return self._image_permissions

    @image_permissions.setter
    def image_permissions(self, image_permissions):
        """Sets the image_permissions of this SharedImagePermissions.


        :param image_permissions: The image_permissions of this SharedImagePermissions.
        :type image_permissions: SharedImagePermissionsImagePermissions
        """
        if image_permissions is None:
            raise ValueError("Invalid value for `image_permissions`, must not be `None`")

        self._image_permissions = image_permissions
