# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateStreamingURLRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_name: str=None, fleet_name: str=None, user_id: str=None, application_id: str=None, validity: int=None, session_context: str=None):
        """CreateStreamingURLRequest - a model defined in OpenAPI

        :param stack_name: The stack_name of this CreateStreamingURLRequest.
        :param fleet_name: The fleet_name of this CreateStreamingURLRequest.
        :param user_id: The user_id of this CreateStreamingURLRequest.
        :param application_id: The application_id of this CreateStreamingURLRequest.
        :param validity: The validity of this CreateStreamingURLRequest.
        :param session_context: The session_context of this CreateStreamingURLRequest.
        """
        self.openapi_types = {
            'stack_name': str,
            'fleet_name': str,
            'user_id': str,
            'application_id': str,
            'validity': int,
            'session_context': str
        }

        self.attribute_map = {
            'stack_name': 'StackName',
            'fleet_name': 'FleetName',
            'user_id': 'UserId',
            'application_id': 'ApplicationId',
            'validity': 'Validity',
            'session_context': 'SessionContext'
        }

        self._stack_name = stack_name
        self._fleet_name = fleet_name
        self._user_id = user_id
        self._application_id = application_id
        self._validity = validity
        self._session_context = session_context

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStreamingURLRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStreamingURLRequest of this CreateStreamingURLRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_name(self):
        """Gets the stack_name of this CreateStreamingURLRequest.


        :return: The stack_name of this CreateStreamingURLRequest.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this CreateStreamingURLRequest.


        :param stack_name: The stack_name of this CreateStreamingURLRequest.
        :type stack_name: str
        """
        if stack_name is None:
            raise ValueError("Invalid value for `stack_name`, must not be `None`")

        self._stack_name = stack_name

    @property
    def fleet_name(self):
        """Gets the fleet_name of this CreateStreamingURLRequest.


        :return: The fleet_name of this CreateStreamingURLRequest.
        :rtype: str
        """
        return self._fleet_name

    @fleet_name.setter
    def fleet_name(self, fleet_name):
        """Sets the fleet_name of this CreateStreamingURLRequest.


        :param fleet_name: The fleet_name of this CreateStreamingURLRequest.
        :type fleet_name: str
        """
        if fleet_name is None:
            raise ValueError("Invalid value for `fleet_name`, must not be `None`")

        self._fleet_name = fleet_name

    @property
    def user_id(self):
        """Gets the user_id of this CreateStreamingURLRequest.


        :return: The user_id of this CreateStreamingURLRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CreateStreamingURLRequest.


        :param user_id: The user_id of this CreateStreamingURLRequest.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def application_id(self):
        """Gets the application_id of this CreateStreamingURLRequest.


        :return: The application_id of this CreateStreamingURLRequest.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this CreateStreamingURLRequest.


        :param application_id: The application_id of this CreateStreamingURLRequest.
        :type application_id: str
        """

        self._application_id = application_id

    @property
    def validity(self):
        """Gets the validity of this CreateStreamingURLRequest.


        :return: The validity of this CreateStreamingURLRequest.
        :rtype: int
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this CreateStreamingURLRequest.


        :param validity: The validity of this CreateStreamingURLRequest.
        :type validity: int
        """

        self._validity = validity

    @property
    def session_context(self):
        """Gets the session_context of this CreateStreamingURLRequest.


        :return: The session_context of this CreateStreamingURLRequest.
        :rtype: str
        """
        return self._session_context

    @session_context.setter
    def session_context(self, session_context):
        """Sets the session_context of this CreateStreamingURLRequest.


        :param session_context: The session_context of this CreateStreamingURLRequest.
        :type session_context: str
        """

        self._session_context = session_context
