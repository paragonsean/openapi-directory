# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.storage_connector_type import StorageConnectorType
from openapi_server import util


class StorageConnector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_type: StorageConnectorType=None, resource_identifier: str=None, domains: List=None):
        """StorageConnector - a model defined in OpenAPI

        :param connector_type: The connector_type of this StorageConnector.
        :param resource_identifier: The resource_identifier of this StorageConnector.
        :param domains: The domains of this StorageConnector.
        """
        self.openapi_types = {
            'connector_type': StorageConnectorType,
            'resource_identifier': str,
            'domains': List
        }

        self.attribute_map = {
            'connector_type': 'ConnectorType',
            'resource_identifier': 'ResourceIdentifier',
            'domains': 'Domains'
        }

        self._connector_type = connector_type
        self._resource_identifier = resource_identifier
        self._domains = domains

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageConnector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageConnector of this StorageConnector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_type(self):
        """Gets the connector_type of this StorageConnector.


        :return: The connector_type of this StorageConnector.
        :rtype: StorageConnectorType
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this StorageConnector.


        :param connector_type: The connector_type of this StorageConnector.
        :type connector_type: StorageConnectorType
        """
        if connector_type is None:
            raise ValueError("Invalid value for `connector_type`, must not be `None`")

        self._connector_type = connector_type

    @property
    def resource_identifier(self):
        """Gets the resource_identifier of this StorageConnector.


        :return: The resource_identifier of this StorageConnector.
        :rtype: str
        """
        return self._resource_identifier

    @resource_identifier.setter
    def resource_identifier(self, resource_identifier):
        """Sets the resource_identifier of this StorageConnector.


        :param resource_identifier: The resource_identifier of this StorageConnector.
        :type resource_identifier: str
        """

        self._resource_identifier = resource_identifier

    @property
    def domains(self):
        """Gets the domains of this StorageConnector.


        :return: The domains of this StorageConnector.
        :rtype: List
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this StorageConnector.


        :param domains: The domains of this StorageConnector.
        :type domains: List
        """

        self._domains = domains
