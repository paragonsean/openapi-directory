# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication_type import AuthenticationType
from openapi_server import util


class EnableUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_name: str=None, authentication_type: AuthenticationType=None):
        """EnableUserRequest - a model defined in OpenAPI

        :param user_name: The user_name of this EnableUserRequest.
        :param authentication_type: The authentication_type of this EnableUserRequest.
        """
        self.openapi_types = {
            'user_name': str,
            'authentication_type': AuthenticationType
        }

        self.attribute_map = {
            'user_name': 'UserName',
            'authentication_type': 'AuthenticationType'
        }

        self._user_name = user_name
        self._authentication_type = authentication_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnableUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnableUserRequest of this EnableUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self):
        """Gets the user_name of this EnableUserRequest.


        :return: The user_name of this EnableUserRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this EnableUserRequest.


        :param user_name: The user_name of this EnableUserRequest.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name

    @property
    def authentication_type(self):
        """Gets the authentication_type of this EnableUserRequest.


        :return: The authentication_type of this EnableUserRequest.
        :rtype: AuthenticationType
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this EnableUserRequest.


        :param authentication_type: The authentication_type of this EnableUserRequest.
        :type authentication_type: AuthenticationType
        """
        if authentication_type is None:
            raise ValueError("Invalid value for `authentication_type`, must not be `None`")

        self._authentication_type = authentication_type
