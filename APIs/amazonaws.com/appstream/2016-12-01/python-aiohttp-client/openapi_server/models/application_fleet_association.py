# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationFleetAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fleet_name: str=None, application_arn: str=None):
        """ApplicationFleetAssociation - a model defined in OpenAPI

        :param fleet_name: The fleet_name of this ApplicationFleetAssociation.
        :param application_arn: The application_arn of this ApplicationFleetAssociation.
        """
        self.openapi_types = {
            'fleet_name': str,
            'application_arn': str
        }

        self.attribute_map = {
            'fleet_name': 'FleetName',
            'application_arn': 'ApplicationArn'
        }

        self._fleet_name = fleet_name
        self._application_arn = application_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationFleetAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationFleetAssociation of this ApplicationFleetAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fleet_name(self):
        """Gets the fleet_name of this ApplicationFleetAssociation.


        :return: The fleet_name of this ApplicationFleetAssociation.
        :rtype: str
        """
        return self._fleet_name

    @fleet_name.setter
    def fleet_name(self, fleet_name):
        """Sets the fleet_name of this ApplicationFleetAssociation.


        :param fleet_name: The fleet_name of this ApplicationFleetAssociation.
        :type fleet_name: str
        """
        if fleet_name is None:
            raise ValueError("Invalid value for `fleet_name`, must not be `None`")

        self._fleet_name = fleet_name

    @property
    def application_arn(self):
        """Gets the application_arn of this ApplicationFleetAssociation.


        :return: The application_arn of this ApplicationFleetAssociation.
        :rtype: str
        """
        return self._application_arn

    @application_arn.setter
    def application_arn(self, application_arn):
        """Sets the application_arn of this ApplicationFleetAssociation.


        :param application_arn: The application_arn of this ApplicationFleetAssociation.
        :type application_arn: str
        """
        if application_arn is None:
            raise ValueError("Invalid value for `application_arn`, must not be `None`")

        self._application_arn = application_arn
