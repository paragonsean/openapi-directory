# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage_report_schedule import UsageReportSchedule
from openapi_server import util


class UsageReportSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_bucket_name: str=None, schedule: UsageReportSchedule=None, last_generated_report_date: datetime=None, subscription_errors: List=None):
        """UsageReportSubscription - a model defined in OpenAPI

        :param s3_bucket_name: The s3_bucket_name of this UsageReportSubscription.
        :param schedule: The schedule of this UsageReportSubscription.
        :param last_generated_report_date: The last_generated_report_date of this UsageReportSubscription.
        :param subscription_errors: The subscription_errors of this UsageReportSubscription.
        """
        self.openapi_types = {
            's3_bucket_name': str,
            'schedule': UsageReportSchedule,
            'last_generated_report_date': datetime,
            'subscription_errors': List
        }

        self.attribute_map = {
            's3_bucket_name': 'S3BucketName',
            'schedule': 'Schedule',
            'last_generated_report_date': 'LastGeneratedReportDate',
            'subscription_errors': 'SubscriptionErrors'
        }

        self._s3_bucket_name = s3_bucket_name
        self._schedule = schedule
        self._last_generated_report_date = last_generated_report_date
        self._subscription_errors = subscription_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageReportSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageReportSubscription of this UsageReportSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_bucket_name(self):
        """Gets the s3_bucket_name of this UsageReportSubscription.


        :return: The s3_bucket_name of this UsageReportSubscription.
        :rtype: str
        """
        return self._s3_bucket_name

    @s3_bucket_name.setter
    def s3_bucket_name(self, s3_bucket_name):
        """Sets the s3_bucket_name of this UsageReportSubscription.


        :param s3_bucket_name: The s3_bucket_name of this UsageReportSubscription.
        :type s3_bucket_name: str
        """

        self._s3_bucket_name = s3_bucket_name

    @property
    def schedule(self):
        """Gets the schedule of this UsageReportSubscription.


        :return: The schedule of this UsageReportSubscription.
        :rtype: UsageReportSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this UsageReportSubscription.


        :param schedule: The schedule of this UsageReportSubscription.
        :type schedule: UsageReportSchedule
        """

        self._schedule = schedule

    @property
    def last_generated_report_date(self):
        """Gets the last_generated_report_date of this UsageReportSubscription.


        :return: The last_generated_report_date of this UsageReportSubscription.
        :rtype: datetime
        """
        return self._last_generated_report_date

    @last_generated_report_date.setter
    def last_generated_report_date(self, last_generated_report_date):
        """Sets the last_generated_report_date of this UsageReportSubscription.


        :param last_generated_report_date: The last_generated_report_date of this UsageReportSubscription.
        :type last_generated_report_date: datetime
        """

        self._last_generated_report_date = last_generated_report_date

    @property
    def subscription_errors(self):
        """Gets the subscription_errors of this UsageReportSubscription.


        :return: The subscription_errors of this UsageReportSubscription.
        :rtype: List
        """
        return self._subscription_errors

    @subscription_errors.setter
    def subscription_errors(self, subscription_errors):
        """Sets the subscription_errors of this UsageReportSubscription.


        :param subscription_errors: The subscription_errors of this UsageReportSubscription.
        :type subscription_errors: List
        """

        self._subscription_errors = subscription_errors
