# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComputeCapacityStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, desired: int=None, running: int=None, in_use: int=None, available: int=None):
        """ComputeCapacityStatus - a model defined in OpenAPI

        :param desired: The desired of this ComputeCapacityStatus.
        :param running: The running of this ComputeCapacityStatus.
        :param in_use: The in_use of this ComputeCapacityStatus.
        :param available: The available of this ComputeCapacityStatus.
        """
        self.openapi_types = {
            'desired': int,
            'running': int,
            'in_use': int,
            'available': int
        }

        self.attribute_map = {
            'desired': 'Desired',
            'running': 'Running',
            'in_use': 'InUse',
            'available': 'Available'
        }

        self._desired = desired
        self._running = running
        self._in_use = in_use
        self._available = available

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeCapacityStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComputeCapacityStatus of this ComputeCapacityStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def desired(self):
        """Gets the desired of this ComputeCapacityStatus.


        :return: The desired of this ComputeCapacityStatus.
        :rtype: int
        """
        return self._desired

    @desired.setter
    def desired(self, desired):
        """Sets the desired of this ComputeCapacityStatus.


        :param desired: The desired of this ComputeCapacityStatus.
        :type desired: int
        """
        if desired is None:
            raise ValueError("Invalid value for `desired`, must not be `None`")

        self._desired = desired

    @property
    def running(self):
        """Gets the running of this ComputeCapacityStatus.


        :return: The running of this ComputeCapacityStatus.
        :rtype: int
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this ComputeCapacityStatus.


        :param running: The running of this ComputeCapacityStatus.
        :type running: int
        """

        self._running = running

    @property
    def in_use(self):
        """Gets the in_use of this ComputeCapacityStatus.


        :return: The in_use of this ComputeCapacityStatus.
        :rtype: int
        """
        return self._in_use

    @in_use.setter
    def in_use(self, in_use):
        """Sets the in_use of this ComputeCapacityStatus.


        :param in_use: The in_use of this ComputeCapacityStatus.
        :type in_use: int
        """

        self._in_use = in_use

    @property
    def available(self):
        """Gets the available of this ComputeCapacityStatus.


        :return: The available of this ComputeCapacityStatus.
        :rtype: int
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this ComputeCapacityStatus.


        :param available: The available of this ComputeCapacityStatus.
        :type available: int
        """

        self._available = available
