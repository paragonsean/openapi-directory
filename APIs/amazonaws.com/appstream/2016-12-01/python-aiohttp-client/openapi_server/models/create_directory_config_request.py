# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_directory_config_request_certificate_based_auth_properties import CreateDirectoryConfigRequestCertificateBasedAuthProperties
from openapi_server.models.create_directory_config_request_service_account_credentials import CreateDirectoryConfigRequestServiceAccountCredentials
from openapi_server import util


class CreateDirectoryConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, directory_name: str=None, organizational_unit_distinguished_names: List=None, service_account_credentials: CreateDirectoryConfigRequestServiceAccountCredentials=None, certificate_based_auth_properties: CreateDirectoryConfigRequestCertificateBasedAuthProperties=None):
        """CreateDirectoryConfigRequest - a model defined in OpenAPI

        :param directory_name: The directory_name of this CreateDirectoryConfigRequest.
        :param organizational_unit_distinguished_names: The organizational_unit_distinguished_names of this CreateDirectoryConfigRequest.
        :param service_account_credentials: The service_account_credentials of this CreateDirectoryConfigRequest.
        :param certificate_based_auth_properties: The certificate_based_auth_properties of this CreateDirectoryConfigRequest.
        """
        self.openapi_types = {
            'directory_name': str,
            'organizational_unit_distinguished_names': List,
            'service_account_credentials': CreateDirectoryConfigRequestServiceAccountCredentials,
            'certificate_based_auth_properties': CreateDirectoryConfigRequestCertificateBasedAuthProperties
        }

        self.attribute_map = {
            'directory_name': 'DirectoryName',
            'organizational_unit_distinguished_names': 'OrganizationalUnitDistinguishedNames',
            'service_account_credentials': 'ServiceAccountCredentials',
            'certificate_based_auth_properties': 'CertificateBasedAuthProperties'
        }

        self._directory_name = directory_name
        self._organizational_unit_distinguished_names = organizational_unit_distinguished_names
        self._service_account_credentials = service_account_credentials
        self._certificate_based_auth_properties = certificate_based_auth_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDirectoryConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDirectoryConfigRequest of this CreateDirectoryConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def directory_name(self):
        """Gets the directory_name of this CreateDirectoryConfigRequest.


        :return: The directory_name of this CreateDirectoryConfigRequest.
        :rtype: str
        """
        return self._directory_name

    @directory_name.setter
    def directory_name(self, directory_name):
        """Sets the directory_name of this CreateDirectoryConfigRequest.


        :param directory_name: The directory_name of this CreateDirectoryConfigRequest.
        :type directory_name: str
        """
        if directory_name is None:
            raise ValueError("Invalid value for `directory_name`, must not be `None`")

        self._directory_name = directory_name

    @property
    def organizational_unit_distinguished_names(self):
        """Gets the organizational_unit_distinguished_names of this CreateDirectoryConfigRequest.


        :return: The organizational_unit_distinguished_names of this CreateDirectoryConfigRequest.
        :rtype: List
        """
        return self._organizational_unit_distinguished_names

    @organizational_unit_distinguished_names.setter
    def organizational_unit_distinguished_names(self, organizational_unit_distinguished_names):
        """Sets the organizational_unit_distinguished_names of this CreateDirectoryConfigRequest.


        :param organizational_unit_distinguished_names: The organizational_unit_distinguished_names of this CreateDirectoryConfigRequest.
        :type organizational_unit_distinguished_names: List
        """
        if organizational_unit_distinguished_names is None:
            raise ValueError("Invalid value for `organizational_unit_distinguished_names`, must not be `None`")

        self._organizational_unit_distinguished_names = organizational_unit_distinguished_names

    @property
    def service_account_credentials(self):
        """Gets the service_account_credentials of this CreateDirectoryConfigRequest.


        :return: The service_account_credentials of this CreateDirectoryConfigRequest.
        :rtype: CreateDirectoryConfigRequestServiceAccountCredentials
        """
        return self._service_account_credentials

    @service_account_credentials.setter
    def service_account_credentials(self, service_account_credentials):
        """Sets the service_account_credentials of this CreateDirectoryConfigRequest.


        :param service_account_credentials: The service_account_credentials of this CreateDirectoryConfigRequest.
        :type service_account_credentials: CreateDirectoryConfigRequestServiceAccountCredentials
        """

        self._service_account_credentials = service_account_credentials

    @property
    def certificate_based_auth_properties(self):
        """Gets the certificate_based_auth_properties of this CreateDirectoryConfigRequest.


        :return: The certificate_based_auth_properties of this CreateDirectoryConfigRequest.
        :rtype: CreateDirectoryConfigRequestCertificateBasedAuthProperties
        """
        return self._certificate_based_auth_properties

    @certificate_based_auth_properties.setter
    def certificate_based_auth_properties(self, certificate_based_auth_properties):
        """Sets the certificate_based_auth_properties of this CreateDirectoryConfigRequest.


        :param certificate_based_auth_properties: The certificate_based_auth_properties of this CreateDirectoryConfigRequest.
        :type certificate_based_auth_properties: CreateDirectoryConfigRequestCertificateBasedAuthProperties
        """

        self._certificate_based_auth_properties = certificate_based_auth_properties
