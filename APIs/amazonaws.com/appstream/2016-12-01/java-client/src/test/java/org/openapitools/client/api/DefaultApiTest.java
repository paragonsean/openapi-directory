/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateAppBlockBuilderAppBlockRequest;
import org.openapitools.client.model.AssociateAppBlockBuilderAppBlockResult;
import org.openapitools.client.model.AssociateApplicationFleetRequest;
import org.openapitools.client.model.AssociateApplicationFleetResult;
import org.openapitools.client.model.AssociateApplicationToEntitlementRequest;
import org.openapitools.client.model.AssociateFleetRequest;
import org.openapitools.client.model.BatchAssociateUserStackRequest;
import org.openapitools.client.model.BatchAssociateUserStackResult;
import org.openapitools.client.model.BatchDisassociateUserStackRequest;
import org.openapitools.client.model.BatchDisassociateUserStackResult;
import org.openapitools.client.model.CopyImageRequest;
import org.openapitools.client.model.CopyImageResponse;
import org.openapitools.client.model.CreateAppBlockBuilderRequest;
import org.openapitools.client.model.CreateAppBlockBuilderResult;
import org.openapitools.client.model.CreateAppBlockBuilderStreamingURLRequest;
import org.openapitools.client.model.CreateAppBlockBuilderStreamingURLResult;
import org.openapitools.client.model.CreateAppBlockRequest;
import org.openapitools.client.model.CreateAppBlockResult;
import org.openapitools.client.model.CreateApplicationRequest;
import org.openapitools.client.model.CreateApplicationResult;
import org.openapitools.client.model.CreateDirectoryConfigRequest;
import org.openapitools.client.model.CreateDirectoryConfigResult;
import org.openapitools.client.model.CreateEntitlementRequest;
import org.openapitools.client.model.CreateEntitlementResult;
import org.openapitools.client.model.CreateFleetRequest;
import org.openapitools.client.model.CreateFleetResult;
import org.openapitools.client.model.CreateImageBuilderRequest;
import org.openapitools.client.model.CreateImageBuilderResult;
import org.openapitools.client.model.CreateImageBuilderStreamingURLRequest;
import org.openapitools.client.model.CreateImageBuilderStreamingURLResult;
import org.openapitools.client.model.CreateStackRequest;
import org.openapitools.client.model.CreateStackResult;
import org.openapitools.client.model.CreateStreamingURLRequest;
import org.openapitools.client.model.CreateStreamingURLResult;
import org.openapitools.client.model.CreateUpdatedImageRequest;
import org.openapitools.client.model.CreateUpdatedImageResult;
import org.openapitools.client.model.CreateUsageReportSubscriptionResult;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.DeleteAppBlockBuilderRequest;
import org.openapitools.client.model.DeleteAppBlockRequest;
import org.openapitools.client.model.DeleteApplicationRequest;
import org.openapitools.client.model.DeleteDirectoryConfigRequest;
import org.openapitools.client.model.DeleteEntitlementRequest;
import org.openapitools.client.model.DeleteFleetRequest;
import org.openapitools.client.model.DeleteImageBuilderRequest;
import org.openapitools.client.model.DeleteImageBuilderResult;
import org.openapitools.client.model.DeleteImagePermissionsRequest;
import org.openapitools.client.model.DeleteImageRequest;
import org.openapitools.client.model.DeleteImageResult;
import org.openapitools.client.model.DeleteStackRequest;
import org.openapitools.client.model.DeleteUserRequest;
import org.openapitools.client.model.DescribeAppBlockBuilderAppBlockAssociationsRequest;
import org.openapitools.client.model.DescribeAppBlockBuilderAppBlockAssociationsResult;
import org.openapitools.client.model.DescribeAppBlockBuildersRequest;
import org.openapitools.client.model.DescribeAppBlockBuildersResult;
import org.openapitools.client.model.DescribeAppBlocksRequest;
import org.openapitools.client.model.DescribeAppBlocksResult;
import org.openapitools.client.model.DescribeApplicationFleetAssociationsRequest;
import org.openapitools.client.model.DescribeApplicationFleetAssociationsResult;
import org.openapitools.client.model.DescribeApplicationsRequest;
import org.openapitools.client.model.DescribeApplicationsResult;
import org.openapitools.client.model.DescribeDirectoryConfigsRequest;
import org.openapitools.client.model.DescribeDirectoryConfigsResult;
import org.openapitools.client.model.DescribeEntitlementsRequest;
import org.openapitools.client.model.DescribeEntitlementsResult;
import org.openapitools.client.model.DescribeFleetsRequest;
import org.openapitools.client.model.DescribeFleetsResult;
import org.openapitools.client.model.DescribeImageBuildersRequest;
import org.openapitools.client.model.DescribeImageBuildersResult;
import org.openapitools.client.model.DescribeImagePermissionsRequest;
import org.openapitools.client.model.DescribeImagePermissionsResult;
import org.openapitools.client.model.DescribeImagesRequest;
import org.openapitools.client.model.DescribeImagesResult;
import org.openapitools.client.model.DescribeSessionsRequest;
import org.openapitools.client.model.DescribeSessionsResult;
import org.openapitools.client.model.DescribeStacksRequest;
import org.openapitools.client.model.DescribeStacksResult;
import org.openapitools.client.model.DescribeUsageReportSubscriptionsRequest;
import org.openapitools.client.model.DescribeUsageReportSubscriptionsResult;
import org.openapitools.client.model.DescribeUserStackAssociationsRequest;
import org.openapitools.client.model.DescribeUserStackAssociationsResult;
import org.openapitools.client.model.DescribeUsersRequest;
import org.openapitools.client.model.DescribeUsersResult;
import org.openapitools.client.model.DisableUserRequest;
import org.openapitools.client.model.DisassociateAppBlockBuilderAppBlockRequest;
import org.openapitools.client.model.DisassociateApplicationFleetRequest;
import org.openapitools.client.model.DisassociateApplicationFromEntitlementRequest;
import org.openapitools.client.model.DisassociateFleetRequest;
import org.openapitools.client.model.EnableUserRequest;
import org.openapitools.client.model.ExpireSessionRequest;
import org.openapitools.client.model.ListAssociatedFleetsRequest;
import org.openapitools.client.model.ListAssociatedFleetsResult;
import org.openapitools.client.model.ListAssociatedStacksRequest;
import org.openapitools.client.model.ListAssociatedStacksResult;
import org.openapitools.client.model.ListEntitledApplicationsRequest;
import org.openapitools.client.model.ListEntitledApplicationsResult;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.StartAppBlockBuilderRequest;
import org.openapitools.client.model.StartAppBlockBuilderResult;
import org.openapitools.client.model.StartFleetRequest;
import org.openapitools.client.model.StartImageBuilderRequest;
import org.openapitools.client.model.StartImageBuilderResult;
import org.openapitools.client.model.StopAppBlockBuilderRequest;
import org.openapitools.client.model.StopAppBlockBuilderResult;
import org.openapitools.client.model.StopFleetRequest;
import org.openapitools.client.model.StopImageBuilderRequest;
import org.openapitools.client.model.StopImageBuilderResult;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateAppBlockBuilderRequest;
import org.openapitools.client.model.UpdateAppBlockBuilderResult;
import org.openapitools.client.model.UpdateApplicationRequest;
import org.openapitools.client.model.UpdateApplicationResult;
import org.openapitools.client.model.UpdateDirectoryConfigRequest;
import org.openapitools.client.model.UpdateDirectoryConfigResult;
import org.openapitools.client.model.UpdateEntitlementRequest;
import org.openapitools.client.model.UpdateEntitlementResult;
import org.openapitools.client.model.UpdateFleetRequest;
import org.openapitools.client.model.UpdateFleetResult;
import org.openapitools.client.model.UpdateImagePermissionsRequest;
import org.openapitools.client.model.UpdateStackRequest;
import org.openapitools.client.model.UpdateStackResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Associates the specified app block builder with the specified app block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateAppBlockBuilderAppBlockTest() throws ApiException {
        String xAmzTarget = null;
        AssociateAppBlockBuilderAppBlockRequest associateAppBlockBuilderAppBlockRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateAppBlockBuilderAppBlockResult response = api.associateAppBlockBuilderAppBlock(xAmzTarget, associateAppBlockBuilderAppBlockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates the specified application with the specified fleet. This is only supported for Elastic fleets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateApplicationFleetTest() throws ApiException {
        String xAmzTarget = null;
        AssociateApplicationFleetRequest associateApplicationFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateApplicationFleetResult response = api.associateApplicationFleet(xAmzTarget, associateApplicationFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates an application to entitle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateApplicationToEntitlementTest() throws ApiException {
        String xAmzTarget = null;
        AssociateApplicationToEntitlementRequest associateApplicationToEntitlementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateApplicationToEntitlement(xAmzTarget, associateApplicationToEntitlementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates the specified fleet with the specified stack.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateFleetTest() throws ApiException {
        String xAmzTarget = null;
        AssociateFleetRequest associateFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateFleet(xAmzTarget, associateFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates the specified users with the specified stacks. Users in a user pool cannot be assigned to stacks with fleets that are joined to an Active Directory domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchAssociateUserStackTest() throws ApiException {
        String xAmzTarget = null;
        BatchAssociateUserStackRequest batchAssociateUserStackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchAssociateUserStackResult response = api.batchAssociateUserStack(xAmzTarget, batchAssociateUserStackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates the specified users from the specified stacks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDisassociateUserStackTest() throws ApiException {
        String xAmzTarget = null;
        BatchDisassociateUserStackRequest batchDisassociateUserStackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDisassociateUserStackResult response = api.batchDisassociateUserStack(xAmzTarget, batchDisassociateUserStackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Copies the image within the same region or to a new region within the same AWS account. Note that any tags you added to the image will not be copied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyImageTest() throws ApiException {
        String xAmzTarget = null;
        CopyImageRequest copyImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CopyImageResponse response = api.copyImage(xAmzTarget, copyImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an app block.&lt;/p&gt; &lt;p&gt;App blocks are an Amazon AppStream 2.0 resource that stores the details about the virtual hard disk in an S3 bucket. It also stores the setup script with details about how to mount the virtual hard disk. The virtual hard disk includes the application binaries and other files necessary to launch your applications. Multiple applications can be assigned to a single app block.&lt;/p&gt; &lt;p&gt;This is only supported for Elastic fleets.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAppBlockTest() throws ApiException {
        String xAmzTarget = null;
        CreateAppBlockRequest createAppBlockRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAppBlockResult response = api.createAppBlock(xAmzTarget, createAppBlockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an app block builder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAppBlockBuilderTest() throws ApiException {
        String xAmzTarget = null;
        CreateAppBlockBuilderRequest createAppBlockBuilderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAppBlockBuilderResult response = api.createAppBlockBuilder(xAmzTarget, createAppBlockBuilderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a URL to start a create app block builder streaming session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAppBlockBuilderStreamingURLTest() throws ApiException {
        String xAmzTarget = null;
        CreateAppBlockBuilderStreamingURLRequest createAppBlockBuilderStreamingURLRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAppBlockBuilderStreamingURLResult response = api.createAppBlockBuilderStreamingURL(xAmzTarget, createAppBlockBuilderStreamingURLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an application.&lt;/p&gt; &lt;p&gt;Applications are an Amazon AppStream 2.0 resource that stores the details about how to launch applications on Elastic fleet streaming instances. An application consists of the launch details, icon, and display name. Applications are associated with an app block that contains the application binaries and other files. The applications assigned to an Elastic fleet are the applications users can launch. &lt;/p&gt; &lt;p&gt;This is only supported for Elastic fleets.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationTest() throws ApiException {
        String xAmzTarget = null;
        CreateApplicationRequest createApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateApplicationResult response = api.createApplication(xAmzTarget, createApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDirectoryConfigTest() throws ApiException {
        String xAmzTarget = null;
        CreateDirectoryConfigRequest createDirectoryConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDirectoryConfigResult response = api.createDirectoryConfig(xAmzTarget, createDirectoryConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new entitlement. Entitlements control access to specific applications within a stack, based on user attributes. Entitlements apply to SAML 2.0 federated user identities. Amazon AppStream 2.0 user pool and streaming URL users are entitled to all applications in a stack. Entitlements don&#39;t apply to the desktop stream view application, or to applications managed by a dynamic app provider using the Dynamic Application Framework.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEntitlementTest() throws ApiException {
        String xAmzTarget = null;
        CreateEntitlementRequest createEntitlementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEntitlementResult response = api.createEntitlement(xAmzTarget, createEntitlementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a fleet. A fleet consists of streaming instances that your users access for their applications and desktops.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFleetTest() throws ApiException {
        String xAmzTarget = null;
        CreateFleetRequest createFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFleetResult response = api.createFleet(xAmzTarget, createFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an image builder. An image builder is a virtual machine that is used to create an image.&lt;/p&gt; &lt;p&gt;The initial state of the builder is &lt;code&gt;PENDING&lt;/code&gt;. When it is ready, the state is &lt;code&gt;RUNNING&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImageBuilderTest() throws ApiException {
        String xAmzTarget = null;
        CreateImageBuilderRequest createImageBuilderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateImageBuilderResult response = api.createImageBuilder(xAmzTarget, createImageBuilderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a URL to start an image builder streaming session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImageBuilderStreamingURLTest() throws ApiException {
        String xAmzTarget = null;
        CreateImageBuilderStreamingURLRequest createImageBuilderStreamingURLRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateImageBuilderStreamingURLResult response = api.createImageBuilderStreamingURL(xAmzTarget, createImageBuilderStreamingURLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a stack to start streaming applications to users. A stack consists of an associated fleet, user access policies, and storage configurations. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStackTest() throws ApiException {
        String xAmzTarget = null;
        CreateStackRequest createStackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStackResult response = api.createStack(xAmzTarget, createStackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a temporary URL to start an AppStream 2.0 streaming session for the specified user. A streaming URL enables application streaming to be tested without user setup. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStreamingURLTest() throws ApiException {
        String xAmzTarget = null;
        CreateStreamingURLRequest createStreamingURLRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStreamingURLResult response = api.createStreamingURL(xAmzTarget, createStreamingURLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new image with the latest Windows operating system updates, driver updates, and AppStream 2.0 agent software.&lt;/p&gt; &lt;p&gt;For more information, see the \&quot;Update an Image by Using Managed AppStream 2.0 Image Updates\&quot; section in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appstream2/latest/developerguide/administer-images.html\&quot;&gt;Administer Your AppStream 2.0 Images&lt;/a&gt;, in the &lt;i&gt;Amazon AppStream 2.0 Administration Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUpdatedImageTest() throws ApiException {
        String xAmzTarget = null;
        CreateUpdatedImageRequest createUpdatedImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUpdatedImageResult response = api.createUpdatedImage(xAmzTarget, createUpdatedImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a usage report subscription. Usage reports are generated daily.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUsageReportSubscriptionTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUsageReportSubscriptionResult response = api.createUsageReportSubscription(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new user in the user pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String xAmzTarget = null;
        CreateUserRequest createUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createUser(xAmzTarget, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an app block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppBlockTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAppBlockRequest deleteAppBlockRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAppBlock(xAmzTarget, deleteAppBlockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an app block builder.&lt;/p&gt; &lt;p&gt;An app block builder can only be deleted when it has no association with an app block.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppBlockBuilderTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAppBlockBuilderRequest deleteAppBlockBuilderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAppBlockBuilder(xAmzTarget, deleteAppBlockBuilderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteApplicationRequest deleteApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteApplication(xAmzTarget, deleteApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified Directory Config object from AppStream 2.0. This object includes the information required to join streaming instances to an Active Directory domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDirectoryConfigTest() throws ApiException {
        String xAmzTarget = null;
        DeleteDirectoryConfigRequest deleteDirectoryConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDirectoryConfig(xAmzTarget, deleteDirectoryConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified entitlement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEntitlementTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEntitlementRequest deleteEntitlementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteEntitlement(xAmzTarget, deleteEntitlementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFleetTest() throws ApiException {
        String xAmzTarget = null;
        DeleteFleetRequest deleteFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteFleet(xAmzTarget, deleteFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified image. You cannot delete an image when it is in use. After you delete an image, you cannot provision new capacity using the image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImageTest() throws ApiException {
        String xAmzTarget = null;
        DeleteImageRequest deleteImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteImageResult response = api.deleteImage(xAmzTarget, deleteImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified image builder and releases the capacity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImageBuilderTest() throws ApiException {
        String xAmzTarget = null;
        DeleteImageBuilderRequest deleteImageBuilderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteImageBuilderResult response = api.deleteImageBuilder(xAmzTarget, deleteImageBuilderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes permissions for the specified private image. After you delete permissions for an image, AWS accounts to which you previously granted these permissions can no longer use the image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImagePermissionsTest() throws ApiException {
        String xAmzTarget = null;
        DeleteImagePermissionsRequest deleteImagePermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteImagePermissions(xAmzTarget, deleteImagePermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified stack. After the stack is deleted, the application streaming environment provided by the stack is no longer available to users. Also, any reservations made for application streaming sessions for the stack are released.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStackTest() throws ApiException {
        String xAmzTarget = null;
        DeleteStackRequest deleteStackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteStack(xAmzTarget, deleteStackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables usage report generation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsageReportSubscriptionTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteUsageReportSubscription(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a user from the user pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUserRequest deleteUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteUser(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more app block builder associations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAppBlockBuilderAppBlockAssociationsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAppBlockBuilderAppBlockAssociationsRequest describeAppBlockBuilderAppBlockAssociationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeAppBlockBuilderAppBlockAssociationsResult response = api.describeAppBlockBuilderAppBlockAssociations(xAmzTarget, describeAppBlockBuilderAppBlockAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more app block builders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAppBlockBuildersTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAppBlockBuildersRequest describeAppBlockBuildersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeAppBlockBuildersResult response = api.describeAppBlockBuilders(xAmzTarget, describeAppBlockBuildersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more app blocks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAppBlocksTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAppBlocksRequest describeAppBlocksRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAppBlocksResult response = api.describeAppBlocks(xAmzTarget, describeAppBlocksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more application fleet associations. Either ApplicationArn or FleetName must be specified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeApplicationFleetAssociationsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeApplicationFleetAssociationsRequest describeApplicationFleetAssociationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeApplicationFleetAssociationsResult response = api.describeApplicationFleetAssociations(xAmzTarget, describeApplicationFleetAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more applications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeApplicationsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeApplicationsRequest describeApplicationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeApplicationsResult response = api.describeApplications(xAmzTarget, describeApplicationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a list that describes one or more specified Directory Config objects for AppStream 2.0, if the names for these objects are provided. Otherwise, all Directory Config objects in the account are described. These objects include the configuration information required to join fleets and image builders to Microsoft Active Directory domains. &lt;/p&gt; &lt;p&gt;Although the response syntax in this topic includes the account password, this password is not returned in the actual response.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDirectoryConfigsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeDirectoryConfigsRequest describeDirectoryConfigsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDirectoryConfigsResult response = api.describeDirectoryConfigs(xAmzTarget, describeDirectoryConfigsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one of more entitlements.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEntitlementsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEntitlementsRequest describeEntitlementsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEntitlementsResult response = api.describeEntitlements(xAmzTarget, describeEntitlementsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more specified fleets, if the fleet names are provided. Otherwise, all fleets in the account are described.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFleetsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFleetsRequest describeFleetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFleetsResult response = api.describeFleets(xAmzTarget, describeFleetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more specified image builders, if the image builder names are provided. Otherwise, all image builders in the account are described.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImageBuildersTest() throws ApiException {
        String xAmzTarget = null;
        DescribeImageBuildersRequest describeImageBuildersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeImageBuildersResult response = api.describeImageBuilders(xAmzTarget, describeImageBuildersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes the permissions for shared AWS account IDs on a private image that you own. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImagePermissionsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeImagePermissionsRequest describeImagePermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeImagePermissionsResult response = api.describeImagePermissions(xAmzTarget, describeImagePermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more specified images, if the image names or image ARNs are provided. Otherwise, all images in the account are described.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImagesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeImagesRequest describeImagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeImagesResult response = api.describeImages(xAmzTarget, describeImagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes the streaming sessions for a specified stack and fleet. If a UserId is provided for the stack and fleet, only streaming sessions for that user are described. If an authentication type is not provided, the default is to authenticate users using a streaming URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSessionsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeSessionsRequest describeSessionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSessionsResult response = api.describeSessions(xAmzTarget, describeSessionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more specified stacks, if the stack names are provided. Otherwise, all stacks in the account are described.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeStacksTest() throws ApiException {
        String xAmzTarget = null;
        DescribeStacksRequest describeStacksRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeStacksResult response = api.describeStacks(xAmzTarget, describeStacksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more usage report subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUsageReportSubscriptionsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeUsageReportSubscriptionsRequest describeUsageReportSubscriptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUsageReportSubscriptionsResult response = api.describeUsageReportSubscriptions(xAmzTarget, describeUsageReportSubscriptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a list that describes the UserStackAssociation objects. You must specify either or both of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The stack name&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The user name (email address of the user associated with the stack) and the authentication type for the user&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUserStackAssociationsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeUserStackAssociationsRequest describeUserStackAssociationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUserStackAssociationsResult response = api.describeUserStackAssociations(xAmzTarget, describeUserStackAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list that describes one or more specified users in the user pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUsersTest() throws ApiException {
        String xAmzTarget = null;
        DescribeUsersRequest describeUsersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUsersResult response = api.describeUsers(xAmzTarget, describeUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the specified user in the user pool. Users can&#39;t sign in to AppStream 2.0 until they are re-enabled. This action does not delete the user. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableUserTest() throws ApiException {
        String xAmzTarget = null;
        DisableUserRequest disableUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disableUser(xAmzTarget, disableUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a specified app block builder from a specified app block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateAppBlockBuilderAppBlockTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateAppBlockBuilderAppBlockRequest disassociateAppBlockBuilderAppBlockRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateAppBlockBuilderAppBlock(xAmzTarget, disassociateAppBlockBuilderAppBlockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates the specified application from the fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateApplicationFleetTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateApplicationFleetRequest disassociateApplicationFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateApplicationFleet(xAmzTarget, disassociateApplicationFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified application from the specified entitlement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateApplicationFromEntitlementTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateApplicationFromEntitlementRequest disassociateApplicationFromEntitlementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateApplicationFromEntitlement(xAmzTarget, disassociateApplicationFromEntitlementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates the specified fleet from the specified stack.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateFleetTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateFleetRequest disassociateFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateFleet(xAmzTarget, disassociateFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables a user in the user pool. After being enabled, users can sign in to AppStream 2.0 and open applications from the stacks to which they are assigned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableUserTest() throws ApiException {
        String xAmzTarget = null;
        EnableUserRequest enableUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.enableUser(xAmzTarget, enableUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Immediately stops the specified streaming session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expireSessionTest() throws ApiException {
        String xAmzTarget = null;
        ExpireSessionRequest expireSessionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.expireSession(xAmzTarget, expireSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the name of the fleet that is associated with the specified stack.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssociatedFleetsTest() throws ApiException {
        String xAmzTarget = null;
        ListAssociatedFleetsRequest listAssociatedFleetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListAssociatedFleetsResult response = api.listAssociatedFleets(xAmzTarget, listAssociatedFleetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the name of the stack with which the specified fleet is associated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssociatedStacksTest() throws ApiException {
        String xAmzTarget = null;
        ListAssociatedStacksRequest listAssociatedStacksRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListAssociatedStacksResult response = api.listAssociatedStacks(xAmzTarget, listAssociatedStacksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a list of entitled applications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEntitledApplicationsTest() throws ApiException {
        String xAmzTarget = null;
        ListEntitledApplicationsRequest listEntitledApplicationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListEntitledApplicationsResult response = api.listEntitledApplications(xAmzTarget, listEntitledApplicationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a list of all tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks.&lt;/p&gt; &lt;p&gt;For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon AppStream 2.0 Administration Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts an app block builder.&lt;/p&gt; &lt;p&gt;An app block builder can only be started when it&#39;s associated with an app block.&lt;/p&gt; &lt;p&gt;Starting an app block builder starts a new instance, which is equivalent to an elastic fleet instance with application builder assistance functionality.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startAppBlockBuilderTest() throws ApiException {
        String xAmzTarget = null;
        StartAppBlockBuilderRequest startAppBlockBuilderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartAppBlockBuilderResult response = api.startAppBlockBuilder(xAmzTarget, startAppBlockBuilderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts the specified fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startFleetTest() throws ApiException {
        String xAmzTarget = null;
        StartFleetRequest startFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startFleet(xAmzTarget, startFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts the specified image builder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startImageBuilderTest() throws ApiException {
        String xAmzTarget = null;
        StartImageBuilderRequest startImageBuilderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartImageBuilderResult response = api.startImageBuilder(xAmzTarget, startImageBuilderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Stops an app block builder.&lt;/p&gt; &lt;p&gt;Stopping an app block builder terminates the instance, and the instance state is not persisted.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopAppBlockBuilderTest() throws ApiException {
        String xAmzTarget = null;
        StopAppBlockBuilderRequest stopAppBlockBuilderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopAppBlockBuilderResult response = api.stopAppBlockBuilder(xAmzTarget, stopAppBlockBuilderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops the specified fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopFleetTest() throws ApiException {
        String xAmzTarget = null;
        StopFleetRequest stopFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopFleet(xAmzTarget, stopFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops the specified image builder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopImageBuilderTest() throws ApiException {
        String xAmzTarget = null;
        StopImageBuilderRequest stopImageBuilderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopImageBuilderResult response = api.stopImageBuilder(xAmzTarget, stopImageBuilderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds or overwrites one or more tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks.&lt;/p&gt; &lt;p&gt;Each tag consists of a key and an optional value. If a resource already has a tag with the same key, this operation updates its value.&lt;/p&gt; &lt;p&gt;To list the current tags for your resources, use &lt;a&gt;ListTagsForResource&lt;/a&gt;. To disassociate tags from your resources, use &lt;a&gt;UntagResource&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon AppStream 2.0 Administration Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disassociates one or more specified tags from the specified AppStream 2.0 resource.&lt;/p&gt; &lt;p&gt;To list the current tags for your resources, use &lt;a&gt;ListTagsForResource&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon AppStream 2.0 Administration Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an app block builder.&lt;/p&gt; &lt;p&gt;If the app block builder is in the &lt;code&gt;STARTING&lt;/code&gt; or &lt;code&gt;STOPPING&lt;/code&gt; state, you can&#39;t update it. If the app block builder is in the &lt;code&gt;RUNNING&lt;/code&gt; state, you can only update the DisplayName and Description. If the app block builder is in the &lt;code&gt;STOPPED&lt;/code&gt; state, you can update any attribute except the Name.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAppBlockBuilderTest() throws ApiException {
        String xAmzTarget = null;
        UpdateAppBlockBuilderRequest updateAppBlockBuilderRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAppBlockBuilderResult response = api.updateAppBlockBuilder(xAmzTarget, updateAppBlockBuilderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateApplicationRequest updateApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApplicationResult response = api.updateApplication(xAmzTarget, updateApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDirectoryConfigTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDirectoryConfigRequest updateDirectoryConfigRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDirectoryConfigResult response = api.updateDirectoryConfig(xAmzTarget, updateDirectoryConfigRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified entitlement.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEntitlementTest() throws ApiException {
        String xAmzTarget = null;
        UpdateEntitlementRequest updateEntitlementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateEntitlementResult response = api.updateEntitlement(xAmzTarget, updateEntitlementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the specified fleet.&lt;/p&gt; &lt;p&gt;If the fleet is in the &lt;code&gt;STOPPED&lt;/code&gt; state, you can update any attribute except the fleet name.&lt;/p&gt; &lt;p&gt;If the fleet is in the &lt;code&gt;RUNNING&lt;/code&gt; state, you can update the following based on the fleet type:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Always-On and On-Demand fleet types&lt;/p&gt; &lt;p&gt;You can update the &lt;code&gt;DisplayName&lt;/code&gt;, &lt;code&gt;ComputeCapacity&lt;/code&gt;, &lt;code&gt;ImageARN&lt;/code&gt;, &lt;code&gt;ImageName&lt;/code&gt;, &lt;code&gt;IdleDisconnectTimeoutInSeconds&lt;/code&gt;, and &lt;code&gt;DisconnectTimeoutInSeconds&lt;/code&gt; attributes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Elastic fleet type&lt;/p&gt; &lt;p&gt;You can update the &lt;code&gt;DisplayName&lt;/code&gt;, &lt;code&gt;IdleDisconnectTimeoutInSeconds&lt;/code&gt;, &lt;code&gt;DisconnectTimeoutInSeconds&lt;/code&gt;, &lt;code&gt;MaxConcurrentSessions&lt;/code&gt;, &lt;code&gt;SessionScriptS3Location&lt;/code&gt; and &lt;code&gt;UsbDeviceFilterStrings&lt;/code&gt; attributes.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the fleet is in the &lt;code&gt;STARTING&lt;/code&gt; or &lt;code&gt;STOPPED&lt;/code&gt; state, you can&#39;t update it.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFleetTest() throws ApiException {
        String xAmzTarget = null;
        UpdateFleetRequest updateFleetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFleetResult response = api.updateFleet(xAmzTarget, updateFleetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds or updates permissions for the specified private image. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateImagePermissionsTest() throws ApiException {
        String xAmzTarget = null;
        UpdateImagePermissionsRequest updateImagePermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateImagePermissions(xAmzTarget, updateImagePermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified fields for the specified stack.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStackTest() throws ApiException {
        String xAmzTarget = null;
        UpdateStackRequest updateStackRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateStackResult response = api.updateStack(xAmzTarget, updateStackRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
