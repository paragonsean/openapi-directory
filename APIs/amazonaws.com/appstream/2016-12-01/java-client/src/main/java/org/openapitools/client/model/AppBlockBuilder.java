/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppBlockBuilderPlatformType;
import org.openapitools.client.model.AppBlockBuilderState;
import org.openapitools.client.model.AppBlockBuilderStateChangeReason;
import org.openapitools.client.model.AppBlockBuilderVpcConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an app block builder.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:46.976213-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppBlockBuilder {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PLATFORM = "Platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private AppBlockBuilderPlatformType platform;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "InstanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_ENABLE_DEFAULT_INTERNET_ACCESS = "EnableDefaultInternetAccess";
  @SerializedName(SERIALIZED_NAME_ENABLE_DEFAULT_INTERNET_ACCESS)
  private Boolean enableDefaultInternetAccess;

  public static final String SERIALIZED_NAME_IAM_ROLE_ARN = "IamRoleArn";
  @SerializedName(SERIALIZED_NAME_IAM_ROLE_ARN)
  private String iamRoleArn;

  public static final String SERIALIZED_NAME_VPC_CONFIG = "VpcConfig";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIG)
  private AppBlockBuilderVpcConfig vpcConfig;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private AppBlockBuilderState state;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_APP_BLOCK_BUILDER_ERRORS = "AppBlockBuilderErrors";
  @SerializedName(SERIALIZED_NAME_APP_BLOCK_BUILDER_ERRORS)
  private List appBlockBuilderErrors;

  public static final String SERIALIZED_NAME_STATE_CHANGE_REASON = "StateChangeReason";
  @SerializedName(SERIALIZED_NAME_STATE_CHANGE_REASON)
  private AppBlockBuilderStateChangeReason stateChangeReason;

  public static final String SERIALIZED_NAME_ACCESS_ENDPOINTS = "AccessEndpoints";
  @SerializedName(SERIALIZED_NAME_ACCESS_ENDPOINTS)
  private List accessEndpoints;

  public AppBlockBuilder() {
  }

  public AppBlockBuilder arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public AppBlockBuilder name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AppBlockBuilder displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AppBlockBuilder description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AppBlockBuilder platform(AppBlockBuilderPlatformType platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nonnull
  public AppBlockBuilderPlatformType getPlatform() {
    return platform;
  }

  public void setPlatform(AppBlockBuilderPlatformType platform) {
    this.platform = platform;
  }


  public AppBlockBuilder instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nonnull
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public AppBlockBuilder enableDefaultInternetAccess(Boolean enableDefaultInternetAccess) {
    this.enableDefaultInternetAccess = enableDefaultInternetAccess;
    return this;
  }

  /**
   * Get enableDefaultInternetAccess
   * @return enableDefaultInternetAccess
   */
  @javax.annotation.Nullable
  public Boolean getEnableDefaultInternetAccess() {
    return enableDefaultInternetAccess;
  }

  public void setEnableDefaultInternetAccess(Boolean enableDefaultInternetAccess) {
    this.enableDefaultInternetAccess = enableDefaultInternetAccess;
  }


  public AppBlockBuilder iamRoleArn(String iamRoleArn) {
    this.iamRoleArn = iamRoleArn;
    return this;
  }

  /**
   * Get iamRoleArn
   * @return iamRoleArn
   */
  @javax.annotation.Nullable
  public String getIamRoleArn() {
    return iamRoleArn;
  }

  public void setIamRoleArn(String iamRoleArn) {
    this.iamRoleArn = iamRoleArn;
  }


  public AppBlockBuilder vpcConfig(AppBlockBuilderVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
    return this;
  }

  /**
   * Get vpcConfig
   * @return vpcConfig
   */
  @javax.annotation.Nonnull
  public AppBlockBuilderVpcConfig getVpcConfig() {
    return vpcConfig;
  }

  public void setVpcConfig(AppBlockBuilderVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
  }


  public AppBlockBuilder state(AppBlockBuilderState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public AppBlockBuilderState getState() {
    return state;
  }

  public void setState(AppBlockBuilderState state) {
    this.state = state;
  }


  public AppBlockBuilder createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public AppBlockBuilder appBlockBuilderErrors(List appBlockBuilderErrors) {
    this.appBlockBuilderErrors = appBlockBuilderErrors;
    return this;
  }

  /**
   * Get appBlockBuilderErrors
   * @return appBlockBuilderErrors
   */
  @javax.annotation.Nullable
  public List getAppBlockBuilderErrors() {
    return appBlockBuilderErrors;
  }

  public void setAppBlockBuilderErrors(List appBlockBuilderErrors) {
    this.appBlockBuilderErrors = appBlockBuilderErrors;
  }


  public AppBlockBuilder stateChangeReason(AppBlockBuilderStateChangeReason stateChangeReason) {
    this.stateChangeReason = stateChangeReason;
    return this;
  }

  /**
   * Get stateChangeReason
   * @return stateChangeReason
   */
  @javax.annotation.Nullable
  public AppBlockBuilderStateChangeReason getStateChangeReason() {
    return stateChangeReason;
  }

  public void setStateChangeReason(AppBlockBuilderStateChangeReason stateChangeReason) {
    this.stateChangeReason = stateChangeReason;
  }


  public AppBlockBuilder accessEndpoints(List accessEndpoints) {
    this.accessEndpoints = accessEndpoints;
    return this;
  }

  /**
   * Get accessEndpoints
   * @return accessEndpoints
   */
  @javax.annotation.Nullable
  public List getAccessEndpoints() {
    return accessEndpoints;
  }

  public void setAccessEndpoints(List accessEndpoints) {
    this.accessEndpoints = accessEndpoints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppBlockBuilder appBlockBuilder = (AppBlockBuilder) o;
    return Objects.equals(this.arn, appBlockBuilder.arn) &&
        Objects.equals(this.name, appBlockBuilder.name) &&
        Objects.equals(this.displayName, appBlockBuilder.displayName) &&
        Objects.equals(this.description, appBlockBuilder.description) &&
        Objects.equals(this.platform, appBlockBuilder.platform) &&
        Objects.equals(this.instanceType, appBlockBuilder.instanceType) &&
        Objects.equals(this.enableDefaultInternetAccess, appBlockBuilder.enableDefaultInternetAccess) &&
        Objects.equals(this.iamRoleArn, appBlockBuilder.iamRoleArn) &&
        Objects.equals(this.vpcConfig, appBlockBuilder.vpcConfig) &&
        Objects.equals(this.state, appBlockBuilder.state) &&
        Objects.equals(this.createdTime, appBlockBuilder.createdTime) &&
        Objects.equals(this.appBlockBuilderErrors, appBlockBuilder.appBlockBuilderErrors) &&
        Objects.equals(this.stateChangeReason, appBlockBuilder.stateChangeReason) &&
        Objects.equals(this.accessEndpoints, appBlockBuilder.accessEndpoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, name, displayName, description, platform, instanceType, enableDefaultInternetAccess, iamRoleArn, vpcConfig, state, createdTime, appBlockBuilderErrors, stateChangeReason, accessEndpoints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppBlockBuilder {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    enableDefaultInternetAccess: ").append(toIndentedString(enableDefaultInternetAccess)).append("\n");
    sb.append("    iamRoleArn: ").append(toIndentedString(iamRoleArn)).append("\n");
    sb.append("    vpcConfig: ").append(toIndentedString(vpcConfig)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    appBlockBuilderErrors: ").append(toIndentedString(appBlockBuilderErrors)).append("\n");
    sb.append("    stateChangeReason: ").append(toIndentedString(stateChangeReason)).append("\n");
    sb.append("    accessEndpoints: ").append(toIndentedString(accessEndpoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("Name");
    openapiFields.add("DisplayName");
    openapiFields.add("Description");
    openapiFields.add("Platform");
    openapiFields.add("InstanceType");
    openapiFields.add("EnableDefaultInternetAccess");
    openapiFields.add("IamRoleArn");
    openapiFields.add("VpcConfig");
    openapiFields.add("State");
    openapiFields.add("CreatedTime");
    openapiFields.add("AppBlockBuilderErrors");
    openapiFields.add("StateChangeReason");
    openapiFields.add("AccessEndpoints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Arn");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Platform");
    openapiRequiredFields.add("InstanceType");
    openapiRequiredFields.add("VpcConfig");
    openapiRequiredFields.add("State");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppBlockBuilder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppBlockBuilder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppBlockBuilder is not found in the empty JSON string", AppBlockBuilder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppBlockBuilder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppBlockBuilder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppBlockBuilder.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Arn`
      String.validateJsonElement(jsonObj.get("Arn"));
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `DisplayName`
      if (jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DisplayName"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the required field `Platform`
      AppBlockBuilderPlatformType.validateJsonElement(jsonObj.get("Platform"));
      // validate the required field `InstanceType`
      String.validateJsonElement(jsonObj.get("InstanceType"));
      // validate the optional field `EnableDefaultInternetAccess`
      if (jsonObj.get("EnableDefaultInternetAccess") != null && !jsonObj.get("EnableDefaultInternetAccess").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableDefaultInternetAccess"));
      }
      // validate the optional field `IamRoleArn`
      if (jsonObj.get("IamRoleArn") != null && !jsonObj.get("IamRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IamRoleArn"));
      }
      // validate the required field `VpcConfig`
      AppBlockBuilderVpcConfig.validateJsonElement(jsonObj.get("VpcConfig"));
      // validate the required field `State`
      AppBlockBuilderState.validateJsonElement(jsonObj.get("State"));
      // validate the optional field `CreatedTime`
      if (jsonObj.get("CreatedTime") != null && !jsonObj.get("CreatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      }
      // validate the optional field `AppBlockBuilderErrors`
      if (jsonObj.get("AppBlockBuilderErrors") != null && !jsonObj.get("AppBlockBuilderErrors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AppBlockBuilderErrors"));
      }
      // validate the optional field `StateChangeReason`
      if (jsonObj.get("StateChangeReason") != null && !jsonObj.get("StateChangeReason").isJsonNull()) {
        AppBlockBuilderStateChangeReason.validateJsonElement(jsonObj.get("StateChangeReason"));
      }
      // validate the optional field `AccessEndpoints`
      if (jsonObj.get("AccessEndpoints") != null && !jsonObj.get("AccessEndpoints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AccessEndpoints"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppBlockBuilder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppBlockBuilder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppBlockBuilder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppBlockBuilder.class));

       return (TypeAdapter<T>) new TypeAdapter<AppBlockBuilder>() {
           @Override
           public void write(JsonWriter out, AppBlockBuilder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppBlockBuilder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppBlockBuilder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppBlockBuilder
   * @throws IOException if the JSON string is invalid with respect to AppBlockBuilder
   */
  public static AppBlockBuilder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppBlockBuilder.class);
  }

  /**
   * Convert an instance of AppBlockBuilder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

