/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociateApplicationToEntitlementRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:46.976213-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociateApplicationToEntitlementRequest {
  public static final String SERIALIZED_NAME_STACK_NAME = "StackName";
  @SerializedName(SERIALIZED_NAME_STACK_NAME)
  private String stackName;

  public static final String SERIALIZED_NAME_ENTITLEMENT_NAME = "EntitlementName";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_NAME)
  private String entitlementName;

  public static final String SERIALIZED_NAME_APPLICATION_IDENTIFIER = "ApplicationIdentifier";
  @SerializedName(SERIALIZED_NAME_APPLICATION_IDENTIFIER)
  private String applicationIdentifier;

  public AssociateApplicationToEntitlementRequest() {
  }

  public AssociateApplicationToEntitlementRequest stackName(String stackName) {
    this.stackName = stackName;
    return this;
  }

  /**
   * Get stackName
   * @return stackName
   */
  @javax.annotation.Nonnull
  public String getStackName() {
    return stackName;
  }

  public void setStackName(String stackName) {
    this.stackName = stackName;
  }


  public AssociateApplicationToEntitlementRequest entitlementName(String entitlementName) {
    this.entitlementName = entitlementName;
    return this;
  }

  /**
   * Get entitlementName
   * @return entitlementName
   */
  @javax.annotation.Nonnull
  public String getEntitlementName() {
    return entitlementName;
  }

  public void setEntitlementName(String entitlementName) {
    this.entitlementName = entitlementName;
  }


  public AssociateApplicationToEntitlementRequest applicationIdentifier(String applicationIdentifier) {
    this.applicationIdentifier = applicationIdentifier;
    return this;
  }

  /**
   * Get applicationIdentifier
   * @return applicationIdentifier
   */
  @javax.annotation.Nonnull
  public String getApplicationIdentifier() {
    return applicationIdentifier;
  }

  public void setApplicationIdentifier(String applicationIdentifier) {
    this.applicationIdentifier = applicationIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateApplicationToEntitlementRequest associateApplicationToEntitlementRequest = (AssociateApplicationToEntitlementRequest) o;
    return Objects.equals(this.stackName, associateApplicationToEntitlementRequest.stackName) &&
        Objects.equals(this.entitlementName, associateApplicationToEntitlementRequest.entitlementName) &&
        Objects.equals(this.applicationIdentifier, associateApplicationToEntitlementRequest.applicationIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackName, entitlementName, applicationIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateApplicationToEntitlementRequest {\n");
    sb.append("    stackName: ").append(toIndentedString(stackName)).append("\n");
    sb.append("    entitlementName: ").append(toIndentedString(entitlementName)).append("\n");
    sb.append("    applicationIdentifier: ").append(toIndentedString(applicationIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackName");
    openapiFields.add("EntitlementName");
    openapiFields.add("ApplicationIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StackName");
    openapiRequiredFields.add("EntitlementName");
    openapiRequiredFields.add("ApplicationIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociateApplicationToEntitlementRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociateApplicationToEntitlementRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociateApplicationToEntitlementRequest is not found in the empty JSON string", AssociateApplicationToEntitlementRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociateApplicationToEntitlementRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociateApplicationToEntitlementRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssociateApplicationToEntitlementRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `StackName`
      String.validateJsonElement(jsonObj.get("StackName"));
      // validate the required field `EntitlementName`
      String.validateJsonElement(jsonObj.get("EntitlementName"));
      // validate the required field `ApplicationIdentifier`
      String.validateJsonElement(jsonObj.get("ApplicationIdentifier"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociateApplicationToEntitlementRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociateApplicationToEntitlementRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociateApplicationToEntitlementRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociateApplicationToEntitlementRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociateApplicationToEntitlementRequest>() {
           @Override
           public void write(JsonWriter out, AssociateApplicationToEntitlementRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociateApplicationToEntitlementRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociateApplicationToEntitlementRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociateApplicationToEntitlementRequest
   * @throws IOException if the JSON string is invalid with respect to AssociateApplicationToEntitlementRequest
   */
  public static AssociateApplicationToEntitlementRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociateApplicationToEntitlementRequest.class);
  }

  /**
   * Convert an instance of AssociateApplicationToEntitlementRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

