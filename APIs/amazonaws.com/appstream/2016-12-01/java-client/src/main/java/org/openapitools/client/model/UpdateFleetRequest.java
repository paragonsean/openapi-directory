/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PlatformType;
import org.openapitools.client.model.StreamView;
import org.openapitools.client.model.UpdateFleetRequestComputeCapacity;
import org.openapitools.client.model.UpdateFleetRequestDomainJoinInfo;
import org.openapitools.client.model.UpdateFleetRequestSessionScriptS3Location;
import org.openapitools.client.model.UpdateFleetRequestVpcConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateFleetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:46.976213-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFleetRequest {
  public static final String SERIALIZED_NAME_IMAGE_NAME = "ImageName";
  @SerializedName(SERIALIZED_NAME_IMAGE_NAME)
  private String imageName;

  public static final String SERIALIZED_NAME_IMAGE_ARN = "ImageArn";
  @SerializedName(SERIALIZED_NAME_IMAGE_ARN)
  private String imageArn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "InstanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_COMPUTE_CAPACITY = "ComputeCapacity";
  @SerializedName(SERIALIZED_NAME_COMPUTE_CAPACITY)
  private UpdateFleetRequestComputeCapacity computeCapacity;

  public static final String SERIALIZED_NAME_VPC_CONFIG = "VpcConfig";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIG)
  private UpdateFleetRequestVpcConfig vpcConfig;

  public static final String SERIALIZED_NAME_MAX_USER_DURATION_IN_SECONDS = "MaxUserDurationInSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_USER_DURATION_IN_SECONDS)
  private Integer maxUserDurationInSeconds;

  public static final String SERIALIZED_NAME_DISCONNECT_TIMEOUT_IN_SECONDS = "DisconnectTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_DISCONNECT_TIMEOUT_IN_SECONDS)
  private Integer disconnectTimeoutInSeconds;

  public static final String SERIALIZED_NAME_DELETE_VPC_CONFIG = "DeleteVpcConfig";
  @SerializedName(SERIALIZED_NAME_DELETE_VPC_CONFIG)
  private Boolean deleteVpcConfig;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLE_DEFAULT_INTERNET_ACCESS = "EnableDefaultInternetAccess";
  @SerializedName(SERIALIZED_NAME_ENABLE_DEFAULT_INTERNET_ACCESS)
  private Boolean enableDefaultInternetAccess;

  public static final String SERIALIZED_NAME_DOMAIN_JOIN_INFO = "DomainJoinInfo";
  @SerializedName(SERIALIZED_NAME_DOMAIN_JOIN_INFO)
  private UpdateFleetRequestDomainJoinInfo domainJoinInfo;

  public static final String SERIALIZED_NAME_IDLE_DISCONNECT_TIMEOUT_IN_SECONDS = "IdleDisconnectTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_IDLE_DISCONNECT_TIMEOUT_IN_SECONDS)
  private Integer idleDisconnectTimeoutInSeconds;

  public static final String SERIALIZED_NAME_ATTRIBUTES_TO_DELETE = "AttributesToDelete";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES_TO_DELETE)
  private List attributesToDelete;

  public static final String SERIALIZED_NAME_IAM_ROLE_ARN = "IamRoleArn";
  @SerializedName(SERIALIZED_NAME_IAM_ROLE_ARN)
  private String iamRoleArn;

  public static final String SERIALIZED_NAME_STREAM_VIEW = "StreamView";
  @SerializedName(SERIALIZED_NAME_STREAM_VIEW)
  private StreamView streamView;

  public static final String SERIALIZED_NAME_PLATFORM = "Platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformType platform;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_SESSIONS = "MaxConcurrentSessions";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_SESSIONS)
  private Integer maxConcurrentSessions;

  public static final String SERIALIZED_NAME_USB_DEVICE_FILTER_STRINGS = "UsbDeviceFilterStrings";
  @SerializedName(SERIALIZED_NAME_USB_DEVICE_FILTER_STRINGS)
  private List usbDeviceFilterStrings;

  public static final String SERIALIZED_NAME_SESSION_SCRIPT_S3_LOCATION = "SessionScriptS3Location";
  @SerializedName(SERIALIZED_NAME_SESSION_SCRIPT_S3_LOCATION)
  private UpdateFleetRequestSessionScriptS3Location sessionScriptS3Location;

  public UpdateFleetRequest() {
  }

  public UpdateFleetRequest imageName(String imageName) {
    this.imageName = imageName;
    return this;
  }

  /**
   * Get imageName
   * @return imageName
   */
  @javax.annotation.Nullable
  public String getImageName() {
    return imageName;
  }

  public void setImageName(String imageName) {
    this.imageName = imageName;
  }


  public UpdateFleetRequest imageArn(String imageArn) {
    this.imageArn = imageArn;
    return this;
  }

  /**
   * Get imageArn
   * @return imageArn
   */
  @javax.annotation.Nullable
  public String getImageArn() {
    return imageArn;
  }

  public void setImageArn(String imageArn) {
    this.imageArn = imageArn;
  }


  public UpdateFleetRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateFleetRequest instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public UpdateFleetRequest computeCapacity(UpdateFleetRequestComputeCapacity computeCapacity) {
    this.computeCapacity = computeCapacity;
    return this;
  }

  /**
   * Get computeCapacity
   * @return computeCapacity
   */
  @javax.annotation.Nullable
  public UpdateFleetRequestComputeCapacity getComputeCapacity() {
    return computeCapacity;
  }

  public void setComputeCapacity(UpdateFleetRequestComputeCapacity computeCapacity) {
    this.computeCapacity = computeCapacity;
  }


  public UpdateFleetRequest vpcConfig(UpdateFleetRequestVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
    return this;
  }

  /**
   * Get vpcConfig
   * @return vpcConfig
   */
  @javax.annotation.Nullable
  public UpdateFleetRequestVpcConfig getVpcConfig() {
    return vpcConfig;
  }

  public void setVpcConfig(UpdateFleetRequestVpcConfig vpcConfig) {
    this.vpcConfig = vpcConfig;
  }


  public UpdateFleetRequest maxUserDurationInSeconds(Integer maxUserDurationInSeconds) {
    this.maxUserDurationInSeconds = maxUserDurationInSeconds;
    return this;
  }

  /**
   * Get maxUserDurationInSeconds
   * @return maxUserDurationInSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaxUserDurationInSeconds() {
    return maxUserDurationInSeconds;
  }

  public void setMaxUserDurationInSeconds(Integer maxUserDurationInSeconds) {
    this.maxUserDurationInSeconds = maxUserDurationInSeconds;
  }


  public UpdateFleetRequest disconnectTimeoutInSeconds(Integer disconnectTimeoutInSeconds) {
    this.disconnectTimeoutInSeconds = disconnectTimeoutInSeconds;
    return this;
  }

  /**
   * Get disconnectTimeoutInSeconds
   * @return disconnectTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Integer getDisconnectTimeoutInSeconds() {
    return disconnectTimeoutInSeconds;
  }

  public void setDisconnectTimeoutInSeconds(Integer disconnectTimeoutInSeconds) {
    this.disconnectTimeoutInSeconds = disconnectTimeoutInSeconds;
  }


  public UpdateFleetRequest deleteVpcConfig(Boolean deleteVpcConfig) {
    this.deleteVpcConfig = deleteVpcConfig;
    return this;
  }

  /**
   * Get deleteVpcConfig
   * @return deleteVpcConfig
   */
  @javax.annotation.Nullable
  public Boolean getDeleteVpcConfig() {
    return deleteVpcConfig;
  }

  public void setDeleteVpcConfig(Boolean deleteVpcConfig) {
    this.deleteVpcConfig = deleteVpcConfig;
  }


  public UpdateFleetRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateFleetRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public UpdateFleetRequest enableDefaultInternetAccess(Boolean enableDefaultInternetAccess) {
    this.enableDefaultInternetAccess = enableDefaultInternetAccess;
    return this;
  }

  /**
   * Get enableDefaultInternetAccess
   * @return enableDefaultInternetAccess
   */
  @javax.annotation.Nullable
  public Boolean getEnableDefaultInternetAccess() {
    return enableDefaultInternetAccess;
  }

  public void setEnableDefaultInternetAccess(Boolean enableDefaultInternetAccess) {
    this.enableDefaultInternetAccess = enableDefaultInternetAccess;
  }


  public UpdateFleetRequest domainJoinInfo(UpdateFleetRequestDomainJoinInfo domainJoinInfo) {
    this.domainJoinInfo = domainJoinInfo;
    return this;
  }

  /**
   * Get domainJoinInfo
   * @return domainJoinInfo
   */
  @javax.annotation.Nullable
  public UpdateFleetRequestDomainJoinInfo getDomainJoinInfo() {
    return domainJoinInfo;
  }

  public void setDomainJoinInfo(UpdateFleetRequestDomainJoinInfo domainJoinInfo) {
    this.domainJoinInfo = domainJoinInfo;
  }


  public UpdateFleetRequest idleDisconnectTimeoutInSeconds(Integer idleDisconnectTimeoutInSeconds) {
    this.idleDisconnectTimeoutInSeconds = idleDisconnectTimeoutInSeconds;
    return this;
  }

  /**
   * Get idleDisconnectTimeoutInSeconds
   * @return idleDisconnectTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Integer getIdleDisconnectTimeoutInSeconds() {
    return idleDisconnectTimeoutInSeconds;
  }

  public void setIdleDisconnectTimeoutInSeconds(Integer idleDisconnectTimeoutInSeconds) {
    this.idleDisconnectTimeoutInSeconds = idleDisconnectTimeoutInSeconds;
  }


  public UpdateFleetRequest attributesToDelete(List attributesToDelete) {
    this.attributesToDelete = attributesToDelete;
    return this;
  }

  /**
   * Get attributesToDelete
   * @return attributesToDelete
   */
  @javax.annotation.Nullable
  public List getAttributesToDelete() {
    return attributesToDelete;
  }

  public void setAttributesToDelete(List attributesToDelete) {
    this.attributesToDelete = attributesToDelete;
  }


  public UpdateFleetRequest iamRoleArn(String iamRoleArn) {
    this.iamRoleArn = iamRoleArn;
    return this;
  }

  /**
   * Get iamRoleArn
   * @return iamRoleArn
   */
  @javax.annotation.Nullable
  public String getIamRoleArn() {
    return iamRoleArn;
  }

  public void setIamRoleArn(String iamRoleArn) {
    this.iamRoleArn = iamRoleArn;
  }


  public UpdateFleetRequest streamView(StreamView streamView) {
    this.streamView = streamView;
    return this;
  }

  /**
   * Get streamView
   * @return streamView
   */
  @javax.annotation.Nullable
  public StreamView getStreamView() {
    return streamView;
  }

  public void setStreamView(StreamView streamView) {
    this.streamView = streamView;
  }


  public UpdateFleetRequest platform(PlatformType platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public PlatformType getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformType platform) {
    this.platform = platform;
  }


  public UpdateFleetRequest maxConcurrentSessions(Integer maxConcurrentSessions) {
    this.maxConcurrentSessions = maxConcurrentSessions;
    return this;
  }

  /**
   * Get maxConcurrentSessions
   * @return maxConcurrentSessions
   */
  @javax.annotation.Nullable
  public Integer getMaxConcurrentSessions() {
    return maxConcurrentSessions;
  }

  public void setMaxConcurrentSessions(Integer maxConcurrentSessions) {
    this.maxConcurrentSessions = maxConcurrentSessions;
  }


  public UpdateFleetRequest usbDeviceFilterStrings(List usbDeviceFilterStrings) {
    this.usbDeviceFilterStrings = usbDeviceFilterStrings;
    return this;
  }

  /**
   * Get usbDeviceFilterStrings
   * @return usbDeviceFilterStrings
   */
  @javax.annotation.Nullable
  public List getUsbDeviceFilterStrings() {
    return usbDeviceFilterStrings;
  }

  public void setUsbDeviceFilterStrings(List usbDeviceFilterStrings) {
    this.usbDeviceFilterStrings = usbDeviceFilterStrings;
  }


  public UpdateFleetRequest sessionScriptS3Location(UpdateFleetRequestSessionScriptS3Location sessionScriptS3Location) {
    this.sessionScriptS3Location = sessionScriptS3Location;
    return this;
  }

  /**
   * Get sessionScriptS3Location
   * @return sessionScriptS3Location
   */
  @javax.annotation.Nullable
  public UpdateFleetRequestSessionScriptS3Location getSessionScriptS3Location() {
    return sessionScriptS3Location;
  }

  public void setSessionScriptS3Location(UpdateFleetRequestSessionScriptS3Location sessionScriptS3Location) {
    this.sessionScriptS3Location = sessionScriptS3Location;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFleetRequest updateFleetRequest = (UpdateFleetRequest) o;
    return Objects.equals(this.imageName, updateFleetRequest.imageName) &&
        Objects.equals(this.imageArn, updateFleetRequest.imageArn) &&
        Objects.equals(this.name, updateFleetRequest.name) &&
        Objects.equals(this.instanceType, updateFleetRequest.instanceType) &&
        Objects.equals(this.computeCapacity, updateFleetRequest.computeCapacity) &&
        Objects.equals(this.vpcConfig, updateFleetRequest.vpcConfig) &&
        Objects.equals(this.maxUserDurationInSeconds, updateFleetRequest.maxUserDurationInSeconds) &&
        Objects.equals(this.disconnectTimeoutInSeconds, updateFleetRequest.disconnectTimeoutInSeconds) &&
        Objects.equals(this.deleteVpcConfig, updateFleetRequest.deleteVpcConfig) &&
        Objects.equals(this.description, updateFleetRequest.description) &&
        Objects.equals(this.displayName, updateFleetRequest.displayName) &&
        Objects.equals(this.enableDefaultInternetAccess, updateFleetRequest.enableDefaultInternetAccess) &&
        Objects.equals(this.domainJoinInfo, updateFleetRequest.domainJoinInfo) &&
        Objects.equals(this.idleDisconnectTimeoutInSeconds, updateFleetRequest.idleDisconnectTimeoutInSeconds) &&
        Objects.equals(this.attributesToDelete, updateFleetRequest.attributesToDelete) &&
        Objects.equals(this.iamRoleArn, updateFleetRequest.iamRoleArn) &&
        Objects.equals(this.streamView, updateFleetRequest.streamView) &&
        Objects.equals(this.platform, updateFleetRequest.platform) &&
        Objects.equals(this.maxConcurrentSessions, updateFleetRequest.maxConcurrentSessions) &&
        Objects.equals(this.usbDeviceFilterStrings, updateFleetRequest.usbDeviceFilterStrings) &&
        Objects.equals(this.sessionScriptS3Location, updateFleetRequest.sessionScriptS3Location);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageName, imageArn, name, instanceType, computeCapacity, vpcConfig, maxUserDurationInSeconds, disconnectTimeoutInSeconds, deleteVpcConfig, description, displayName, enableDefaultInternetAccess, domainJoinInfo, idleDisconnectTimeoutInSeconds, attributesToDelete, iamRoleArn, streamView, platform, maxConcurrentSessions, usbDeviceFilterStrings, sessionScriptS3Location);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFleetRequest {\n");
    sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
    sb.append("    imageArn: ").append(toIndentedString(imageArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    computeCapacity: ").append(toIndentedString(computeCapacity)).append("\n");
    sb.append("    vpcConfig: ").append(toIndentedString(vpcConfig)).append("\n");
    sb.append("    maxUserDurationInSeconds: ").append(toIndentedString(maxUserDurationInSeconds)).append("\n");
    sb.append("    disconnectTimeoutInSeconds: ").append(toIndentedString(disconnectTimeoutInSeconds)).append("\n");
    sb.append("    deleteVpcConfig: ").append(toIndentedString(deleteVpcConfig)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enableDefaultInternetAccess: ").append(toIndentedString(enableDefaultInternetAccess)).append("\n");
    sb.append("    domainJoinInfo: ").append(toIndentedString(domainJoinInfo)).append("\n");
    sb.append("    idleDisconnectTimeoutInSeconds: ").append(toIndentedString(idleDisconnectTimeoutInSeconds)).append("\n");
    sb.append("    attributesToDelete: ").append(toIndentedString(attributesToDelete)).append("\n");
    sb.append("    iamRoleArn: ").append(toIndentedString(iamRoleArn)).append("\n");
    sb.append("    streamView: ").append(toIndentedString(streamView)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    maxConcurrentSessions: ").append(toIndentedString(maxConcurrentSessions)).append("\n");
    sb.append("    usbDeviceFilterStrings: ").append(toIndentedString(usbDeviceFilterStrings)).append("\n");
    sb.append("    sessionScriptS3Location: ").append(toIndentedString(sessionScriptS3Location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ImageName");
    openapiFields.add("ImageArn");
    openapiFields.add("Name");
    openapiFields.add("InstanceType");
    openapiFields.add("ComputeCapacity");
    openapiFields.add("VpcConfig");
    openapiFields.add("MaxUserDurationInSeconds");
    openapiFields.add("DisconnectTimeoutInSeconds");
    openapiFields.add("DeleteVpcConfig");
    openapiFields.add("Description");
    openapiFields.add("DisplayName");
    openapiFields.add("EnableDefaultInternetAccess");
    openapiFields.add("DomainJoinInfo");
    openapiFields.add("IdleDisconnectTimeoutInSeconds");
    openapiFields.add("AttributesToDelete");
    openapiFields.add("IamRoleArn");
    openapiFields.add("StreamView");
    openapiFields.add("Platform");
    openapiFields.add("MaxConcurrentSessions");
    openapiFields.add("UsbDeviceFilterStrings");
    openapiFields.add("SessionScriptS3Location");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFleetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFleetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFleetRequest is not found in the empty JSON string", UpdateFleetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFleetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFleetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ImageName`
      if (jsonObj.get("ImageName") != null && !jsonObj.get("ImageName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImageName"));
      }
      // validate the optional field `ImageArn`
      if (jsonObj.get("ImageArn") != null && !jsonObj.get("ImageArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImageArn"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `InstanceType`
      if (jsonObj.get("InstanceType") != null && !jsonObj.get("InstanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceType"));
      }
      // validate the optional field `ComputeCapacity`
      if (jsonObj.get("ComputeCapacity") != null && !jsonObj.get("ComputeCapacity").isJsonNull()) {
        UpdateFleetRequestComputeCapacity.validateJsonElement(jsonObj.get("ComputeCapacity"));
      }
      // validate the optional field `VpcConfig`
      if (jsonObj.get("VpcConfig") != null && !jsonObj.get("VpcConfig").isJsonNull()) {
        UpdateFleetRequestVpcConfig.validateJsonElement(jsonObj.get("VpcConfig"));
      }
      // validate the optional field `MaxUserDurationInSeconds`
      if (jsonObj.get("MaxUserDurationInSeconds") != null && !jsonObj.get("MaxUserDurationInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxUserDurationInSeconds"));
      }
      // validate the optional field `DisconnectTimeoutInSeconds`
      if (jsonObj.get("DisconnectTimeoutInSeconds") != null && !jsonObj.get("DisconnectTimeoutInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DisconnectTimeoutInSeconds"));
      }
      // validate the optional field `DeleteVpcConfig`
      if (jsonObj.get("DeleteVpcConfig") != null && !jsonObj.get("DeleteVpcConfig").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeleteVpcConfig"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `DisplayName`
      if (jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DisplayName"));
      }
      // validate the optional field `EnableDefaultInternetAccess`
      if (jsonObj.get("EnableDefaultInternetAccess") != null && !jsonObj.get("EnableDefaultInternetAccess").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableDefaultInternetAccess"));
      }
      // validate the optional field `DomainJoinInfo`
      if (jsonObj.get("DomainJoinInfo") != null && !jsonObj.get("DomainJoinInfo").isJsonNull()) {
        UpdateFleetRequestDomainJoinInfo.validateJsonElement(jsonObj.get("DomainJoinInfo"));
      }
      // validate the optional field `IdleDisconnectTimeoutInSeconds`
      if (jsonObj.get("IdleDisconnectTimeoutInSeconds") != null && !jsonObj.get("IdleDisconnectTimeoutInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("IdleDisconnectTimeoutInSeconds"));
      }
      // validate the optional field `AttributesToDelete`
      if (jsonObj.get("AttributesToDelete") != null && !jsonObj.get("AttributesToDelete").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AttributesToDelete"));
      }
      // validate the optional field `IamRoleArn`
      if (jsonObj.get("IamRoleArn") != null && !jsonObj.get("IamRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IamRoleArn"));
      }
      // validate the optional field `StreamView`
      if (jsonObj.get("StreamView") != null && !jsonObj.get("StreamView").isJsonNull()) {
        StreamView.validateJsonElement(jsonObj.get("StreamView"));
      }
      // validate the optional field `Platform`
      if (jsonObj.get("Platform") != null && !jsonObj.get("Platform").isJsonNull()) {
        PlatformType.validateJsonElement(jsonObj.get("Platform"));
      }
      // validate the optional field `MaxConcurrentSessions`
      if (jsonObj.get("MaxConcurrentSessions") != null && !jsonObj.get("MaxConcurrentSessions").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxConcurrentSessions"));
      }
      // validate the optional field `UsbDeviceFilterStrings`
      if (jsonObj.get("UsbDeviceFilterStrings") != null && !jsonObj.get("UsbDeviceFilterStrings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("UsbDeviceFilterStrings"));
      }
      // validate the optional field `SessionScriptS3Location`
      if (jsonObj.get("SessionScriptS3Location") != null && !jsonObj.get("SessionScriptS3Location").isJsonNull()) {
        UpdateFleetRequestSessionScriptS3Location.validateJsonElement(jsonObj.get("SessionScriptS3Location"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFleetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFleetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFleetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFleetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFleetRequest>() {
           @Override
           public void write(JsonWriter out, UpdateFleetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFleetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFleetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFleetRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateFleetRequest
   */
  public static UpdateFleetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFleetRequest.class);
  }

  /**
   * Convert an instance of UpdateFleetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

