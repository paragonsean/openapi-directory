/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateApplicationRequestIconS3Location;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateApplicationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:46.976213-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateApplicationRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ICON_S3_LOCATION = "IconS3Location";
  @SerializedName(SERIALIZED_NAME_ICON_S3_LOCATION)
  private UpdateApplicationRequestIconS3Location iconS3Location;

  public static final String SERIALIZED_NAME_LAUNCH_PATH = "LaunchPath";
  @SerializedName(SERIALIZED_NAME_LAUNCH_PATH)
  private String launchPath;

  public static final String SERIALIZED_NAME_WORKING_DIRECTORY = "WorkingDirectory";
  @SerializedName(SERIALIZED_NAME_WORKING_DIRECTORY)
  private String workingDirectory;

  public static final String SERIALIZED_NAME_LAUNCH_PARAMETERS = "LaunchParameters";
  @SerializedName(SERIALIZED_NAME_LAUNCH_PARAMETERS)
  private String launchParameters;

  public static final String SERIALIZED_NAME_APP_BLOCK_ARN = "AppBlockArn";
  @SerializedName(SERIALIZED_NAME_APP_BLOCK_ARN)
  private String appBlockArn;

  public static final String SERIALIZED_NAME_ATTRIBUTES_TO_DELETE = "AttributesToDelete";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES_TO_DELETE)
  private List attributesToDelete;

  public UpdateApplicationRequest() {
  }

  public UpdateApplicationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateApplicationRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public UpdateApplicationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateApplicationRequest iconS3Location(UpdateApplicationRequestIconS3Location iconS3Location) {
    this.iconS3Location = iconS3Location;
    return this;
  }

  /**
   * Get iconS3Location
   * @return iconS3Location
   */
  @javax.annotation.Nullable
  public UpdateApplicationRequestIconS3Location getIconS3Location() {
    return iconS3Location;
  }

  public void setIconS3Location(UpdateApplicationRequestIconS3Location iconS3Location) {
    this.iconS3Location = iconS3Location;
  }


  public UpdateApplicationRequest launchPath(String launchPath) {
    this.launchPath = launchPath;
    return this;
  }

  /**
   * Get launchPath
   * @return launchPath
   */
  @javax.annotation.Nullable
  public String getLaunchPath() {
    return launchPath;
  }

  public void setLaunchPath(String launchPath) {
    this.launchPath = launchPath;
  }


  public UpdateApplicationRequest workingDirectory(String workingDirectory) {
    this.workingDirectory = workingDirectory;
    return this;
  }

  /**
   * Get workingDirectory
   * @return workingDirectory
   */
  @javax.annotation.Nullable
  public String getWorkingDirectory() {
    return workingDirectory;
  }

  public void setWorkingDirectory(String workingDirectory) {
    this.workingDirectory = workingDirectory;
  }


  public UpdateApplicationRequest launchParameters(String launchParameters) {
    this.launchParameters = launchParameters;
    return this;
  }

  /**
   * Get launchParameters
   * @return launchParameters
   */
  @javax.annotation.Nullable
  public String getLaunchParameters() {
    return launchParameters;
  }

  public void setLaunchParameters(String launchParameters) {
    this.launchParameters = launchParameters;
  }


  public UpdateApplicationRequest appBlockArn(String appBlockArn) {
    this.appBlockArn = appBlockArn;
    return this;
  }

  /**
   * Get appBlockArn
   * @return appBlockArn
   */
  @javax.annotation.Nullable
  public String getAppBlockArn() {
    return appBlockArn;
  }

  public void setAppBlockArn(String appBlockArn) {
    this.appBlockArn = appBlockArn;
  }


  public UpdateApplicationRequest attributesToDelete(List attributesToDelete) {
    this.attributesToDelete = attributesToDelete;
    return this;
  }

  /**
   * Get attributesToDelete
   * @return attributesToDelete
   */
  @javax.annotation.Nullable
  public List getAttributesToDelete() {
    return attributesToDelete;
  }

  public void setAttributesToDelete(List attributesToDelete) {
    this.attributesToDelete = attributesToDelete;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateApplicationRequest updateApplicationRequest = (UpdateApplicationRequest) o;
    return Objects.equals(this.name, updateApplicationRequest.name) &&
        Objects.equals(this.displayName, updateApplicationRequest.displayName) &&
        Objects.equals(this.description, updateApplicationRequest.description) &&
        Objects.equals(this.iconS3Location, updateApplicationRequest.iconS3Location) &&
        Objects.equals(this.launchPath, updateApplicationRequest.launchPath) &&
        Objects.equals(this.workingDirectory, updateApplicationRequest.workingDirectory) &&
        Objects.equals(this.launchParameters, updateApplicationRequest.launchParameters) &&
        Objects.equals(this.appBlockArn, updateApplicationRequest.appBlockArn) &&
        Objects.equals(this.attributesToDelete, updateApplicationRequest.attributesToDelete);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, displayName, description, iconS3Location, launchPath, workingDirectory, launchParameters, appBlockArn, attributesToDelete);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateApplicationRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    iconS3Location: ").append(toIndentedString(iconS3Location)).append("\n");
    sb.append("    launchPath: ").append(toIndentedString(launchPath)).append("\n");
    sb.append("    workingDirectory: ").append(toIndentedString(workingDirectory)).append("\n");
    sb.append("    launchParameters: ").append(toIndentedString(launchParameters)).append("\n");
    sb.append("    appBlockArn: ").append(toIndentedString(appBlockArn)).append("\n");
    sb.append("    attributesToDelete: ").append(toIndentedString(attributesToDelete)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("DisplayName");
    openapiFields.add("Description");
    openapiFields.add("IconS3Location");
    openapiFields.add("LaunchPath");
    openapiFields.add("WorkingDirectory");
    openapiFields.add("LaunchParameters");
    openapiFields.add("AppBlockArn");
    openapiFields.add("AttributesToDelete");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateApplicationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateApplicationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateApplicationRequest is not found in the empty JSON string", UpdateApplicationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateApplicationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateApplicationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateApplicationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `DisplayName`
      if (jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DisplayName"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `IconS3Location`
      if (jsonObj.get("IconS3Location") != null && !jsonObj.get("IconS3Location").isJsonNull()) {
        UpdateApplicationRequestIconS3Location.validateJsonElement(jsonObj.get("IconS3Location"));
      }
      // validate the optional field `LaunchPath`
      if (jsonObj.get("LaunchPath") != null && !jsonObj.get("LaunchPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LaunchPath"));
      }
      // validate the optional field `WorkingDirectory`
      if (jsonObj.get("WorkingDirectory") != null && !jsonObj.get("WorkingDirectory").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WorkingDirectory"));
      }
      // validate the optional field `LaunchParameters`
      if (jsonObj.get("LaunchParameters") != null && !jsonObj.get("LaunchParameters").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LaunchParameters"));
      }
      // validate the optional field `AppBlockArn`
      if (jsonObj.get("AppBlockArn") != null && !jsonObj.get("AppBlockArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppBlockArn"));
      }
      // validate the optional field `AttributesToDelete`
      if (jsonObj.get("AttributesToDelete") != null && !jsonObj.get("AttributesToDelete").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AttributesToDelete"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateApplicationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateApplicationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateApplicationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateApplicationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateApplicationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateApplicationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateApplicationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateApplicationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateApplicationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateApplicationRequest
   */
  public static UpdateApplicationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateApplicationRequest.class);
  }

  /**
   * Convert an instance of UpdateApplicationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

