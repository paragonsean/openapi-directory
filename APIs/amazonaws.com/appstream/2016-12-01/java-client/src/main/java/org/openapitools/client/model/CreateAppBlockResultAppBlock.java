/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppBlockPostSetupScriptDetails;
import org.openapitools.client.model.AppBlockSetupScriptDetails;
import org.openapitools.client.model.AppBlockState;
import org.openapitools.client.model.CreateAppBlockRequestSourceS3Location;
import org.openapitools.client.model.PackagingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAppBlockResultAppBlock
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:46.976213-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAppBlockResultAppBlock {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_SOURCE_S3_LOCATION = "SourceS3Location";
  @SerializedName(SERIALIZED_NAME_SOURCE_S3_LOCATION)
  private CreateAppBlockRequestSourceS3Location sourceS3Location;

  public static final String SERIALIZED_NAME_SETUP_SCRIPT_DETAILS = "SetupScriptDetails";
  @SerializedName(SERIALIZED_NAME_SETUP_SCRIPT_DETAILS)
  private AppBlockSetupScriptDetails setupScriptDetails;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_POST_SETUP_SCRIPT_DETAILS = "PostSetupScriptDetails";
  @SerializedName(SERIALIZED_NAME_POST_SETUP_SCRIPT_DETAILS)
  private AppBlockPostSetupScriptDetails postSetupScriptDetails;

  public static final String SERIALIZED_NAME_PACKAGING_TYPE = "PackagingType";
  @SerializedName(SERIALIZED_NAME_PACKAGING_TYPE)
  private PackagingType packagingType;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private AppBlockState state;

  public static final String SERIALIZED_NAME_APP_BLOCK_ERRORS = "AppBlockErrors";
  @SerializedName(SERIALIZED_NAME_APP_BLOCK_ERRORS)
  private List appBlockErrors;

  public CreateAppBlockResultAppBlock() {
  }

  public CreateAppBlockResultAppBlock name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateAppBlockResultAppBlock arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public CreateAppBlockResultAppBlock description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateAppBlockResultAppBlock displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateAppBlockResultAppBlock sourceS3Location(CreateAppBlockRequestSourceS3Location sourceS3Location) {
    this.sourceS3Location = sourceS3Location;
    return this;
  }

  /**
   * Get sourceS3Location
   * @return sourceS3Location
   */
  @javax.annotation.Nullable
  public CreateAppBlockRequestSourceS3Location getSourceS3Location() {
    return sourceS3Location;
  }

  public void setSourceS3Location(CreateAppBlockRequestSourceS3Location sourceS3Location) {
    this.sourceS3Location = sourceS3Location;
  }


  public CreateAppBlockResultAppBlock setupScriptDetails(AppBlockSetupScriptDetails setupScriptDetails) {
    this.setupScriptDetails = setupScriptDetails;
    return this;
  }

  /**
   * Get setupScriptDetails
   * @return setupScriptDetails
   */
  @javax.annotation.Nullable
  public AppBlockSetupScriptDetails getSetupScriptDetails() {
    return setupScriptDetails;
  }

  public void setSetupScriptDetails(AppBlockSetupScriptDetails setupScriptDetails) {
    this.setupScriptDetails = setupScriptDetails;
  }


  public CreateAppBlockResultAppBlock createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public CreateAppBlockResultAppBlock postSetupScriptDetails(AppBlockPostSetupScriptDetails postSetupScriptDetails) {
    this.postSetupScriptDetails = postSetupScriptDetails;
    return this;
  }

  /**
   * Get postSetupScriptDetails
   * @return postSetupScriptDetails
   */
  @javax.annotation.Nullable
  public AppBlockPostSetupScriptDetails getPostSetupScriptDetails() {
    return postSetupScriptDetails;
  }

  public void setPostSetupScriptDetails(AppBlockPostSetupScriptDetails postSetupScriptDetails) {
    this.postSetupScriptDetails = postSetupScriptDetails;
  }


  public CreateAppBlockResultAppBlock packagingType(PackagingType packagingType) {
    this.packagingType = packagingType;
    return this;
  }

  /**
   * Get packagingType
   * @return packagingType
   */
  @javax.annotation.Nullable
  public PackagingType getPackagingType() {
    return packagingType;
  }

  public void setPackagingType(PackagingType packagingType) {
    this.packagingType = packagingType;
  }


  public CreateAppBlockResultAppBlock state(AppBlockState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public AppBlockState getState() {
    return state;
  }

  public void setState(AppBlockState state) {
    this.state = state;
  }


  public CreateAppBlockResultAppBlock appBlockErrors(List appBlockErrors) {
    this.appBlockErrors = appBlockErrors;
    return this;
  }

  /**
   * Get appBlockErrors
   * @return appBlockErrors
   */
  @javax.annotation.Nullable
  public List getAppBlockErrors() {
    return appBlockErrors;
  }

  public void setAppBlockErrors(List appBlockErrors) {
    this.appBlockErrors = appBlockErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAppBlockResultAppBlock createAppBlockResultAppBlock = (CreateAppBlockResultAppBlock) o;
    return Objects.equals(this.name, createAppBlockResultAppBlock.name) &&
        Objects.equals(this.arn, createAppBlockResultAppBlock.arn) &&
        Objects.equals(this.description, createAppBlockResultAppBlock.description) &&
        Objects.equals(this.displayName, createAppBlockResultAppBlock.displayName) &&
        Objects.equals(this.sourceS3Location, createAppBlockResultAppBlock.sourceS3Location) &&
        Objects.equals(this.setupScriptDetails, createAppBlockResultAppBlock.setupScriptDetails) &&
        Objects.equals(this.createdTime, createAppBlockResultAppBlock.createdTime) &&
        Objects.equals(this.postSetupScriptDetails, createAppBlockResultAppBlock.postSetupScriptDetails) &&
        Objects.equals(this.packagingType, createAppBlockResultAppBlock.packagingType) &&
        Objects.equals(this.state, createAppBlockResultAppBlock.state) &&
        Objects.equals(this.appBlockErrors, createAppBlockResultAppBlock.appBlockErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, arn, description, displayName, sourceS3Location, setupScriptDetails, createdTime, postSetupScriptDetails, packagingType, state, appBlockErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAppBlockResultAppBlock {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    sourceS3Location: ").append(toIndentedString(sourceS3Location)).append("\n");
    sb.append("    setupScriptDetails: ").append(toIndentedString(setupScriptDetails)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    postSetupScriptDetails: ").append(toIndentedString(postSetupScriptDetails)).append("\n");
    sb.append("    packagingType: ").append(toIndentedString(packagingType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    appBlockErrors: ").append(toIndentedString(appBlockErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Arn");
    openapiFields.add("Description");
    openapiFields.add("DisplayName");
    openapiFields.add("SourceS3Location");
    openapiFields.add("SetupScriptDetails");
    openapiFields.add("CreatedTime");
    openapiFields.add("PostSetupScriptDetails");
    openapiFields.add("PackagingType");
    openapiFields.add("State");
    openapiFields.add("AppBlockErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Arn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAppBlockResultAppBlock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAppBlockResultAppBlock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAppBlockResultAppBlock is not found in the empty JSON string", CreateAppBlockResultAppBlock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAppBlockResultAppBlock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAppBlockResultAppBlock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAppBlockResultAppBlock.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `Arn`
      String.validateJsonElement(jsonObj.get("Arn"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `DisplayName`
      if (jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DisplayName"));
      }
      // validate the optional field `SourceS3Location`
      if (jsonObj.get("SourceS3Location") != null && !jsonObj.get("SourceS3Location").isJsonNull()) {
        CreateAppBlockRequestSourceS3Location.validateJsonElement(jsonObj.get("SourceS3Location"));
      }
      // validate the optional field `SetupScriptDetails`
      if (jsonObj.get("SetupScriptDetails") != null && !jsonObj.get("SetupScriptDetails").isJsonNull()) {
        AppBlockSetupScriptDetails.validateJsonElement(jsonObj.get("SetupScriptDetails"));
      }
      // validate the optional field `CreatedTime`
      if (jsonObj.get("CreatedTime") != null && !jsonObj.get("CreatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      }
      // validate the optional field `PostSetupScriptDetails`
      if (jsonObj.get("PostSetupScriptDetails") != null && !jsonObj.get("PostSetupScriptDetails").isJsonNull()) {
        AppBlockPostSetupScriptDetails.validateJsonElement(jsonObj.get("PostSetupScriptDetails"));
      }
      // validate the optional field `PackagingType`
      if (jsonObj.get("PackagingType") != null && !jsonObj.get("PackagingType").isJsonNull()) {
        PackagingType.validateJsonElement(jsonObj.get("PackagingType"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        AppBlockState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `AppBlockErrors`
      if (jsonObj.get("AppBlockErrors") != null && !jsonObj.get("AppBlockErrors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AppBlockErrors"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAppBlockResultAppBlock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAppBlockResultAppBlock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAppBlockResultAppBlock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAppBlockResultAppBlock.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAppBlockResultAppBlock>() {
           @Override
           public void write(JsonWriter out, CreateAppBlockResultAppBlock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAppBlockResultAppBlock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAppBlockResultAppBlock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAppBlockResultAppBlock
   * @throws IOException if the JSON string is invalid with respect to CreateAppBlockResultAppBlock
   */
  public static CreateAppBlockResultAppBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAppBlockResultAppBlock.class);
  }

  /**
   * Convert an instance of CreateAppBlockResultAppBlock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

