/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateStackRequestStreamingExperienceSettings;
import org.openapitools.client.model.StackApplicationSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateStackResultStack
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:46.976213-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateStackResultStack {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_STORAGE_CONNECTORS = "StorageConnectors";
  @SerializedName(SERIALIZED_NAME_STORAGE_CONNECTORS)
  private List storageConnectors;

  public static final String SERIALIZED_NAME_REDIRECT_U_R_L = "RedirectURL";
  @SerializedName(SERIALIZED_NAME_REDIRECT_U_R_L)
  private String redirectURL;

  public static final String SERIALIZED_NAME_FEEDBACK_U_R_L = "FeedbackURL";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_U_R_L)
  private String feedbackURL;

  public static final String SERIALIZED_NAME_STACK_ERRORS = "StackErrors";
  @SerializedName(SERIALIZED_NAME_STACK_ERRORS)
  private List stackErrors;

  public static final String SERIALIZED_NAME_USER_SETTINGS = "UserSettings";
  @SerializedName(SERIALIZED_NAME_USER_SETTINGS)
  private List userSettings;

  public static final String SERIALIZED_NAME_APPLICATION_SETTINGS = "ApplicationSettings";
  @SerializedName(SERIALIZED_NAME_APPLICATION_SETTINGS)
  private StackApplicationSettings applicationSettings;

  public static final String SERIALIZED_NAME_ACCESS_ENDPOINTS = "AccessEndpoints";
  @SerializedName(SERIALIZED_NAME_ACCESS_ENDPOINTS)
  private List accessEndpoints;

  public static final String SERIALIZED_NAME_EMBED_HOST_DOMAINS = "EmbedHostDomains";
  @SerializedName(SERIALIZED_NAME_EMBED_HOST_DOMAINS)
  private List embedHostDomains;

  public static final String SERIALIZED_NAME_STREAMING_EXPERIENCE_SETTINGS = "StreamingExperienceSettings";
  @SerializedName(SERIALIZED_NAME_STREAMING_EXPERIENCE_SETTINGS)
  private CreateStackRequestStreamingExperienceSettings streamingExperienceSettings;

  public CreateStackResultStack() {
  }

  public CreateStackResultStack arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public CreateStackResultStack name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateStackResultStack description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateStackResultStack displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateStackResultStack createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public CreateStackResultStack storageConnectors(List storageConnectors) {
    this.storageConnectors = storageConnectors;
    return this;
  }

  /**
   * Get storageConnectors
   * @return storageConnectors
   */
  @javax.annotation.Nullable
  public List getStorageConnectors() {
    return storageConnectors;
  }

  public void setStorageConnectors(List storageConnectors) {
    this.storageConnectors = storageConnectors;
  }


  public CreateStackResultStack redirectURL(String redirectURL) {
    this.redirectURL = redirectURL;
    return this;
  }

  /**
   * Get redirectURL
   * @return redirectURL
   */
  @javax.annotation.Nullable
  public String getRedirectURL() {
    return redirectURL;
  }

  public void setRedirectURL(String redirectURL) {
    this.redirectURL = redirectURL;
  }


  public CreateStackResultStack feedbackURL(String feedbackURL) {
    this.feedbackURL = feedbackURL;
    return this;
  }

  /**
   * Get feedbackURL
   * @return feedbackURL
   */
  @javax.annotation.Nullable
  public String getFeedbackURL() {
    return feedbackURL;
  }

  public void setFeedbackURL(String feedbackURL) {
    this.feedbackURL = feedbackURL;
  }


  public CreateStackResultStack stackErrors(List stackErrors) {
    this.stackErrors = stackErrors;
    return this;
  }

  /**
   * Get stackErrors
   * @return stackErrors
   */
  @javax.annotation.Nullable
  public List getStackErrors() {
    return stackErrors;
  }

  public void setStackErrors(List stackErrors) {
    this.stackErrors = stackErrors;
  }


  public CreateStackResultStack userSettings(List userSettings) {
    this.userSettings = userSettings;
    return this;
  }

  /**
   * Get userSettings
   * @return userSettings
   */
  @javax.annotation.Nullable
  public List getUserSettings() {
    return userSettings;
  }

  public void setUserSettings(List userSettings) {
    this.userSettings = userSettings;
  }


  public CreateStackResultStack applicationSettings(StackApplicationSettings applicationSettings) {
    this.applicationSettings = applicationSettings;
    return this;
  }

  /**
   * Get applicationSettings
   * @return applicationSettings
   */
  @javax.annotation.Nullable
  public StackApplicationSettings getApplicationSettings() {
    return applicationSettings;
  }

  public void setApplicationSettings(StackApplicationSettings applicationSettings) {
    this.applicationSettings = applicationSettings;
  }


  public CreateStackResultStack accessEndpoints(List accessEndpoints) {
    this.accessEndpoints = accessEndpoints;
    return this;
  }

  /**
   * Get accessEndpoints
   * @return accessEndpoints
   */
  @javax.annotation.Nullable
  public List getAccessEndpoints() {
    return accessEndpoints;
  }

  public void setAccessEndpoints(List accessEndpoints) {
    this.accessEndpoints = accessEndpoints;
  }


  public CreateStackResultStack embedHostDomains(List embedHostDomains) {
    this.embedHostDomains = embedHostDomains;
    return this;
  }

  /**
   * Get embedHostDomains
   * @return embedHostDomains
   */
  @javax.annotation.Nullable
  public List getEmbedHostDomains() {
    return embedHostDomains;
  }

  public void setEmbedHostDomains(List embedHostDomains) {
    this.embedHostDomains = embedHostDomains;
  }


  public CreateStackResultStack streamingExperienceSettings(CreateStackRequestStreamingExperienceSettings streamingExperienceSettings) {
    this.streamingExperienceSettings = streamingExperienceSettings;
    return this;
  }

  /**
   * Get streamingExperienceSettings
   * @return streamingExperienceSettings
   */
  @javax.annotation.Nullable
  public CreateStackRequestStreamingExperienceSettings getStreamingExperienceSettings() {
    return streamingExperienceSettings;
  }

  public void setStreamingExperienceSettings(CreateStackRequestStreamingExperienceSettings streamingExperienceSettings) {
    this.streamingExperienceSettings = streamingExperienceSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateStackResultStack createStackResultStack = (CreateStackResultStack) o;
    return Objects.equals(this.arn, createStackResultStack.arn) &&
        Objects.equals(this.name, createStackResultStack.name) &&
        Objects.equals(this.description, createStackResultStack.description) &&
        Objects.equals(this.displayName, createStackResultStack.displayName) &&
        Objects.equals(this.createdTime, createStackResultStack.createdTime) &&
        Objects.equals(this.storageConnectors, createStackResultStack.storageConnectors) &&
        Objects.equals(this.redirectURL, createStackResultStack.redirectURL) &&
        Objects.equals(this.feedbackURL, createStackResultStack.feedbackURL) &&
        Objects.equals(this.stackErrors, createStackResultStack.stackErrors) &&
        Objects.equals(this.userSettings, createStackResultStack.userSettings) &&
        Objects.equals(this.applicationSettings, createStackResultStack.applicationSettings) &&
        Objects.equals(this.accessEndpoints, createStackResultStack.accessEndpoints) &&
        Objects.equals(this.embedHostDomains, createStackResultStack.embedHostDomains) &&
        Objects.equals(this.streamingExperienceSettings, createStackResultStack.streamingExperienceSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, name, description, displayName, createdTime, storageConnectors, redirectURL, feedbackURL, stackErrors, userSettings, applicationSettings, accessEndpoints, embedHostDomains, streamingExperienceSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateStackResultStack {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    storageConnectors: ").append(toIndentedString(storageConnectors)).append("\n");
    sb.append("    redirectURL: ").append(toIndentedString(redirectURL)).append("\n");
    sb.append("    feedbackURL: ").append(toIndentedString(feedbackURL)).append("\n");
    sb.append("    stackErrors: ").append(toIndentedString(stackErrors)).append("\n");
    sb.append("    userSettings: ").append(toIndentedString(userSettings)).append("\n");
    sb.append("    applicationSettings: ").append(toIndentedString(applicationSettings)).append("\n");
    sb.append("    accessEndpoints: ").append(toIndentedString(accessEndpoints)).append("\n");
    sb.append("    embedHostDomains: ").append(toIndentedString(embedHostDomains)).append("\n");
    sb.append("    streamingExperienceSettings: ").append(toIndentedString(streamingExperienceSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("DisplayName");
    openapiFields.add("CreatedTime");
    openapiFields.add("StorageConnectors");
    openapiFields.add("RedirectURL");
    openapiFields.add("FeedbackURL");
    openapiFields.add("StackErrors");
    openapiFields.add("UserSettings");
    openapiFields.add("ApplicationSettings");
    openapiFields.add("AccessEndpoints");
    openapiFields.add("EmbedHostDomains");
    openapiFields.add("StreamingExperienceSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateStackResultStack
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateStackResultStack.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateStackResultStack is not found in the empty JSON string", CreateStackResultStack.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateStackResultStack.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateStackResultStack` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateStackResultStack.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `DisplayName`
      if (jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DisplayName"));
      }
      // validate the optional field `CreatedTime`
      if (jsonObj.get("CreatedTime") != null && !jsonObj.get("CreatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      }
      // validate the optional field `StorageConnectors`
      if (jsonObj.get("StorageConnectors") != null && !jsonObj.get("StorageConnectors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StorageConnectors"));
      }
      // validate the optional field `RedirectURL`
      if (jsonObj.get("RedirectURL") != null && !jsonObj.get("RedirectURL").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RedirectURL"));
      }
      // validate the optional field `FeedbackURL`
      if (jsonObj.get("FeedbackURL") != null && !jsonObj.get("FeedbackURL").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FeedbackURL"));
      }
      // validate the optional field `StackErrors`
      if (jsonObj.get("StackErrors") != null && !jsonObj.get("StackErrors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StackErrors"));
      }
      // validate the optional field `UserSettings`
      if (jsonObj.get("UserSettings") != null && !jsonObj.get("UserSettings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("UserSettings"));
      }
      // validate the optional field `ApplicationSettings`
      if (jsonObj.get("ApplicationSettings") != null && !jsonObj.get("ApplicationSettings").isJsonNull()) {
        StackApplicationSettings.validateJsonElement(jsonObj.get("ApplicationSettings"));
      }
      // validate the optional field `AccessEndpoints`
      if (jsonObj.get("AccessEndpoints") != null && !jsonObj.get("AccessEndpoints").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AccessEndpoints"));
      }
      // validate the optional field `EmbedHostDomains`
      if (jsonObj.get("EmbedHostDomains") != null && !jsonObj.get("EmbedHostDomains").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EmbedHostDomains"));
      }
      // validate the optional field `StreamingExperienceSettings`
      if (jsonObj.get("StreamingExperienceSettings") != null && !jsonObj.get("StreamingExperienceSettings").isJsonNull()) {
        CreateStackRequestStreamingExperienceSettings.validateJsonElement(jsonObj.get("StreamingExperienceSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateStackResultStack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateStackResultStack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateStackResultStack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateStackResultStack.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateStackResultStack>() {
           @Override
           public void write(JsonWriter out, CreateStackResultStack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateStackResultStack read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateStackResultStack given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateStackResultStack
   * @throws IOException if the JSON string is invalid with respect to CreateStackResultStack
   */
  public static CreateStackResultStack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateStackResultStack.class);
  }

  /**
   * Convert an instance of CreateStackResultStack to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

