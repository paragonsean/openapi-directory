/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ScriptDetailsScriptS3Location;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAppBlockRequestPostSetupScriptDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:46.976213-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAppBlockRequestPostSetupScriptDetails {
  public static final String SERIALIZED_NAME_SCRIPT_S3_LOCATION = "ScriptS3Location";
  @SerializedName(SERIALIZED_NAME_SCRIPT_S3_LOCATION)
  private ScriptDetailsScriptS3Location scriptS3Location;

  public static final String SERIALIZED_NAME_EXECUTABLE_PATH = "ExecutablePath";
  @SerializedName(SERIALIZED_NAME_EXECUTABLE_PATH)
  private String executablePath;

  public static final String SERIALIZED_NAME_EXECUTABLE_PARAMETERS = "ExecutableParameters";
  @SerializedName(SERIALIZED_NAME_EXECUTABLE_PARAMETERS)
  private String executableParameters;

  public static final String SERIALIZED_NAME_TIMEOUT_IN_SECONDS = "TimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_IN_SECONDS)
  private Integer timeoutInSeconds;

  public CreateAppBlockRequestPostSetupScriptDetails() {
  }

  public CreateAppBlockRequestPostSetupScriptDetails scriptS3Location(ScriptDetailsScriptS3Location scriptS3Location) {
    this.scriptS3Location = scriptS3Location;
    return this;
  }

  /**
   * Get scriptS3Location
   * @return scriptS3Location
   */
  @javax.annotation.Nonnull
  public ScriptDetailsScriptS3Location getScriptS3Location() {
    return scriptS3Location;
  }

  public void setScriptS3Location(ScriptDetailsScriptS3Location scriptS3Location) {
    this.scriptS3Location = scriptS3Location;
  }


  public CreateAppBlockRequestPostSetupScriptDetails executablePath(String executablePath) {
    this.executablePath = executablePath;
    return this;
  }

  /**
   * Get executablePath
   * @return executablePath
   */
  @javax.annotation.Nonnull
  public String getExecutablePath() {
    return executablePath;
  }

  public void setExecutablePath(String executablePath) {
    this.executablePath = executablePath;
  }


  public CreateAppBlockRequestPostSetupScriptDetails executableParameters(String executableParameters) {
    this.executableParameters = executableParameters;
    return this;
  }

  /**
   * Get executableParameters
   * @return executableParameters
   */
  @javax.annotation.Nullable
  public String getExecutableParameters() {
    return executableParameters;
  }

  public void setExecutableParameters(String executableParameters) {
    this.executableParameters = executableParameters;
  }


  public CreateAppBlockRequestPostSetupScriptDetails timeoutInSeconds(Integer timeoutInSeconds) {
    this.timeoutInSeconds = timeoutInSeconds;
    return this;
  }

  /**
   * Get timeoutInSeconds
   * @return timeoutInSeconds
   */
  @javax.annotation.Nonnull
  public Integer getTimeoutInSeconds() {
    return timeoutInSeconds;
  }

  public void setTimeoutInSeconds(Integer timeoutInSeconds) {
    this.timeoutInSeconds = timeoutInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAppBlockRequestPostSetupScriptDetails createAppBlockRequestPostSetupScriptDetails = (CreateAppBlockRequestPostSetupScriptDetails) o;
    return Objects.equals(this.scriptS3Location, createAppBlockRequestPostSetupScriptDetails.scriptS3Location) &&
        Objects.equals(this.executablePath, createAppBlockRequestPostSetupScriptDetails.executablePath) &&
        Objects.equals(this.executableParameters, createAppBlockRequestPostSetupScriptDetails.executableParameters) &&
        Objects.equals(this.timeoutInSeconds, createAppBlockRequestPostSetupScriptDetails.timeoutInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scriptS3Location, executablePath, executableParameters, timeoutInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAppBlockRequestPostSetupScriptDetails {\n");
    sb.append("    scriptS3Location: ").append(toIndentedString(scriptS3Location)).append("\n");
    sb.append("    executablePath: ").append(toIndentedString(executablePath)).append("\n");
    sb.append("    executableParameters: ").append(toIndentedString(executableParameters)).append("\n");
    sb.append("    timeoutInSeconds: ").append(toIndentedString(timeoutInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ScriptS3Location");
    openapiFields.add("ExecutablePath");
    openapiFields.add("ExecutableParameters");
    openapiFields.add("TimeoutInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ScriptS3Location");
    openapiRequiredFields.add("ExecutablePath");
    openapiRequiredFields.add("TimeoutInSeconds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAppBlockRequestPostSetupScriptDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAppBlockRequestPostSetupScriptDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAppBlockRequestPostSetupScriptDetails is not found in the empty JSON string", CreateAppBlockRequestPostSetupScriptDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAppBlockRequestPostSetupScriptDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAppBlockRequestPostSetupScriptDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAppBlockRequestPostSetupScriptDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ScriptS3Location`
      ScriptDetailsScriptS3Location.validateJsonElement(jsonObj.get("ScriptS3Location"));
      // validate the required field `ExecutablePath`
      String.validateJsonElement(jsonObj.get("ExecutablePath"));
      // validate the optional field `ExecutableParameters`
      if (jsonObj.get("ExecutableParameters") != null && !jsonObj.get("ExecutableParameters").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExecutableParameters"));
      }
      // validate the required field `TimeoutInSeconds`
      Integer.validateJsonElement(jsonObj.get("TimeoutInSeconds"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAppBlockRequestPostSetupScriptDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAppBlockRequestPostSetupScriptDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAppBlockRequestPostSetupScriptDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAppBlockRequestPostSetupScriptDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAppBlockRequestPostSetupScriptDetails>() {
           @Override
           public void write(JsonWriter out, CreateAppBlockRequestPostSetupScriptDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAppBlockRequestPostSetupScriptDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAppBlockRequestPostSetupScriptDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAppBlockRequestPostSetupScriptDetails
   * @throws IOException if the JSON string is invalid with respect to CreateAppBlockRequestPostSetupScriptDetails
   */
  public static CreateAppBlockRequestPostSetupScriptDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAppBlockRequestPostSetupScriptDetails.class);
  }

  /**
   * Convert an instance of CreateAppBlockRequestPostSetupScriptDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

