/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the network details of the fleet or image builder instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:46.976213-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkAccessConfiguration {
  public static final String SERIALIZED_NAME_ENI_PRIVATE_IP_ADDRESS = "EniPrivateIpAddress";
  @SerializedName(SERIALIZED_NAME_ENI_PRIVATE_IP_ADDRESS)
  private String eniPrivateIpAddress;

  public static final String SERIALIZED_NAME_ENI_ID = "EniId";
  @SerializedName(SERIALIZED_NAME_ENI_ID)
  private String eniId;

  public NetworkAccessConfiguration() {
  }

  public NetworkAccessConfiguration eniPrivateIpAddress(String eniPrivateIpAddress) {
    this.eniPrivateIpAddress = eniPrivateIpAddress;
    return this;
  }

  /**
   * Get eniPrivateIpAddress
   * @return eniPrivateIpAddress
   */
  @javax.annotation.Nullable
  public String getEniPrivateIpAddress() {
    return eniPrivateIpAddress;
  }

  public void setEniPrivateIpAddress(String eniPrivateIpAddress) {
    this.eniPrivateIpAddress = eniPrivateIpAddress;
  }


  public NetworkAccessConfiguration eniId(String eniId) {
    this.eniId = eniId;
    return this;
  }

  /**
   * Get eniId
   * @return eniId
   */
  @javax.annotation.Nullable
  public String getEniId() {
    return eniId;
  }

  public void setEniId(String eniId) {
    this.eniId = eniId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkAccessConfiguration networkAccessConfiguration = (NetworkAccessConfiguration) o;
    return Objects.equals(this.eniPrivateIpAddress, networkAccessConfiguration.eniPrivateIpAddress) &&
        Objects.equals(this.eniId, networkAccessConfiguration.eniId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eniPrivateIpAddress, eniId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkAccessConfiguration {\n");
    sb.append("    eniPrivateIpAddress: ").append(toIndentedString(eniPrivateIpAddress)).append("\n");
    sb.append("    eniId: ").append(toIndentedString(eniId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EniPrivateIpAddress");
    openapiFields.add("EniId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkAccessConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkAccessConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkAccessConfiguration is not found in the empty JSON string", NetworkAccessConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkAccessConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkAccessConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EniPrivateIpAddress`
      if (jsonObj.get("EniPrivateIpAddress") != null && !jsonObj.get("EniPrivateIpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EniPrivateIpAddress"));
      }
      // validate the optional field `EniId`
      if (jsonObj.get("EniId") != null && !jsonObj.get("EniId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EniId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkAccessConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkAccessConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkAccessConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkAccessConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkAccessConfiguration>() {
           @Override
           public void write(JsonWriter out, NetworkAccessConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkAccessConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkAccessConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkAccessConfiguration
   * @throws IOException if the JSON string is invalid with respect to NetworkAccessConfiguration
   */
  public static NetworkAccessConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkAccessConfiguration.class);
  }

  /**
   * Convert an instance of NetworkAccessConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

