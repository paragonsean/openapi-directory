/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateDirectoryConfigRequestCertificateBasedAuthProperties;
import org.openapitools.client.model.CreateDirectoryConfigRequestServiceAccountCredentials;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDirectoryConfigResultDirectoryConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:46.976213-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDirectoryConfigResultDirectoryConfig {
  public static final String SERIALIZED_NAME_DIRECTORY_NAME = "DirectoryName";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_NAME)
  private String directoryName;

  public static final String SERIALIZED_NAME_ORGANIZATIONAL_UNIT_DISTINGUISHED_NAMES = "OrganizationalUnitDistinguishedNames";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONAL_UNIT_DISTINGUISHED_NAMES)
  private List organizationalUnitDistinguishedNames;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_CREDENTIALS = "ServiceAccountCredentials";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_CREDENTIALS)
  private CreateDirectoryConfigRequestServiceAccountCredentials serviceAccountCredentials;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_CERTIFICATE_BASED_AUTH_PROPERTIES = "CertificateBasedAuthProperties";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_BASED_AUTH_PROPERTIES)
  private CreateDirectoryConfigRequestCertificateBasedAuthProperties certificateBasedAuthProperties;

  public CreateDirectoryConfigResultDirectoryConfig() {
  }

  public CreateDirectoryConfigResultDirectoryConfig directoryName(String directoryName) {
    this.directoryName = directoryName;
    return this;
  }

  /**
   * Get directoryName
   * @return directoryName
   */
  @javax.annotation.Nonnull
  public String getDirectoryName() {
    return directoryName;
  }

  public void setDirectoryName(String directoryName) {
    this.directoryName = directoryName;
  }


  public CreateDirectoryConfigResultDirectoryConfig organizationalUnitDistinguishedNames(List organizationalUnitDistinguishedNames) {
    this.organizationalUnitDistinguishedNames = organizationalUnitDistinguishedNames;
    return this;
  }

  /**
   * Get organizationalUnitDistinguishedNames
   * @return organizationalUnitDistinguishedNames
   */
  @javax.annotation.Nullable
  public List getOrganizationalUnitDistinguishedNames() {
    return organizationalUnitDistinguishedNames;
  }

  public void setOrganizationalUnitDistinguishedNames(List organizationalUnitDistinguishedNames) {
    this.organizationalUnitDistinguishedNames = organizationalUnitDistinguishedNames;
  }


  public CreateDirectoryConfigResultDirectoryConfig serviceAccountCredentials(CreateDirectoryConfigRequestServiceAccountCredentials serviceAccountCredentials) {
    this.serviceAccountCredentials = serviceAccountCredentials;
    return this;
  }

  /**
   * Get serviceAccountCredentials
   * @return serviceAccountCredentials
   */
  @javax.annotation.Nullable
  public CreateDirectoryConfigRequestServiceAccountCredentials getServiceAccountCredentials() {
    return serviceAccountCredentials;
  }

  public void setServiceAccountCredentials(CreateDirectoryConfigRequestServiceAccountCredentials serviceAccountCredentials) {
    this.serviceAccountCredentials = serviceAccountCredentials;
  }


  public CreateDirectoryConfigResultDirectoryConfig createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public CreateDirectoryConfigResultDirectoryConfig certificateBasedAuthProperties(CreateDirectoryConfigRequestCertificateBasedAuthProperties certificateBasedAuthProperties) {
    this.certificateBasedAuthProperties = certificateBasedAuthProperties;
    return this;
  }

  /**
   * Get certificateBasedAuthProperties
   * @return certificateBasedAuthProperties
   */
  @javax.annotation.Nullable
  public CreateDirectoryConfigRequestCertificateBasedAuthProperties getCertificateBasedAuthProperties() {
    return certificateBasedAuthProperties;
  }

  public void setCertificateBasedAuthProperties(CreateDirectoryConfigRequestCertificateBasedAuthProperties certificateBasedAuthProperties) {
    this.certificateBasedAuthProperties = certificateBasedAuthProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDirectoryConfigResultDirectoryConfig createDirectoryConfigResultDirectoryConfig = (CreateDirectoryConfigResultDirectoryConfig) o;
    return Objects.equals(this.directoryName, createDirectoryConfigResultDirectoryConfig.directoryName) &&
        Objects.equals(this.organizationalUnitDistinguishedNames, createDirectoryConfigResultDirectoryConfig.organizationalUnitDistinguishedNames) &&
        Objects.equals(this.serviceAccountCredentials, createDirectoryConfigResultDirectoryConfig.serviceAccountCredentials) &&
        Objects.equals(this.createdTime, createDirectoryConfigResultDirectoryConfig.createdTime) &&
        Objects.equals(this.certificateBasedAuthProperties, createDirectoryConfigResultDirectoryConfig.certificateBasedAuthProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directoryName, organizationalUnitDistinguishedNames, serviceAccountCredentials, createdTime, certificateBasedAuthProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDirectoryConfigResultDirectoryConfig {\n");
    sb.append("    directoryName: ").append(toIndentedString(directoryName)).append("\n");
    sb.append("    organizationalUnitDistinguishedNames: ").append(toIndentedString(organizationalUnitDistinguishedNames)).append("\n");
    sb.append("    serviceAccountCredentials: ").append(toIndentedString(serviceAccountCredentials)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    certificateBasedAuthProperties: ").append(toIndentedString(certificateBasedAuthProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DirectoryName");
    openapiFields.add("OrganizationalUnitDistinguishedNames");
    openapiFields.add("ServiceAccountCredentials");
    openapiFields.add("CreatedTime");
    openapiFields.add("CertificateBasedAuthProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DirectoryName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDirectoryConfigResultDirectoryConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDirectoryConfigResultDirectoryConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDirectoryConfigResultDirectoryConfig is not found in the empty JSON string", CreateDirectoryConfigResultDirectoryConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDirectoryConfigResultDirectoryConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDirectoryConfigResultDirectoryConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDirectoryConfigResultDirectoryConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DirectoryName`
      String.validateJsonElement(jsonObj.get("DirectoryName"));
      // validate the optional field `OrganizationalUnitDistinguishedNames`
      if (jsonObj.get("OrganizationalUnitDistinguishedNames") != null && !jsonObj.get("OrganizationalUnitDistinguishedNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OrganizationalUnitDistinguishedNames"));
      }
      // validate the optional field `ServiceAccountCredentials`
      if (jsonObj.get("ServiceAccountCredentials") != null && !jsonObj.get("ServiceAccountCredentials").isJsonNull()) {
        CreateDirectoryConfigRequestServiceAccountCredentials.validateJsonElement(jsonObj.get("ServiceAccountCredentials"));
      }
      // validate the optional field `CreatedTime`
      if (jsonObj.get("CreatedTime") != null && !jsonObj.get("CreatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      }
      // validate the optional field `CertificateBasedAuthProperties`
      if (jsonObj.get("CertificateBasedAuthProperties") != null && !jsonObj.get("CertificateBasedAuthProperties").isJsonNull()) {
        CreateDirectoryConfigRequestCertificateBasedAuthProperties.validateJsonElement(jsonObj.get("CertificateBasedAuthProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDirectoryConfigResultDirectoryConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDirectoryConfigResultDirectoryConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDirectoryConfigResultDirectoryConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDirectoryConfigResultDirectoryConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDirectoryConfigResultDirectoryConfig>() {
           @Override
           public void write(JsonWriter out, CreateDirectoryConfigResultDirectoryConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDirectoryConfigResultDirectoryConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDirectoryConfigResultDirectoryConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDirectoryConfigResultDirectoryConfig
   * @throws IOException if the JSON string is invalid with respect to CreateDirectoryConfigResultDirectoryConfig
   */
  public static CreateDirectoryConfigResultDirectoryConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDirectoryConfigResultDirectoryConfig.class);
  }

  /**
   * Convert an instance of CreateDirectoryConfigResultDirectoryConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

