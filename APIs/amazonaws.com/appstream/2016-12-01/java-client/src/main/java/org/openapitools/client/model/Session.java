/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AuthenticationType;
import org.openapitools.client.model.SessionConnectionState;
import org.openapitools.client.model.SessionNetworkAccessConfiguration;
import org.openapitools.client.model.SessionState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a streaming session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:46.976213-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Session {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_STACK_NAME = "StackName";
  @SerializedName(SERIALIZED_NAME_STACK_NAME)
  private String stackName;

  public static final String SERIALIZED_NAME_FLEET_NAME = "FleetName";
  @SerializedName(SERIALIZED_NAME_FLEET_NAME)
  private String fleetName;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private SessionState state;

  public static final String SERIALIZED_NAME_CONNECTION_STATE = "ConnectionState";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATE)
  private SessionConnectionState connectionState;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_MAX_EXPIRATION_TIME = "MaxExpirationTime";
  @SerializedName(SERIALIZED_NAME_MAX_EXPIRATION_TIME)
  private OffsetDateTime maxExpirationTime;

  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPE = "AuthenticationType";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPE)
  private AuthenticationType authenticationType;

  public static final String SERIALIZED_NAME_NETWORK_ACCESS_CONFIGURATION = "NetworkAccessConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_ACCESS_CONFIGURATION)
  private SessionNetworkAccessConfiguration networkAccessConfiguration;

  public Session() {
  }

  public Session id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Session userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public Session stackName(String stackName) {
    this.stackName = stackName;
    return this;
  }

  /**
   * Get stackName
   * @return stackName
   */
  @javax.annotation.Nonnull
  public String getStackName() {
    return stackName;
  }

  public void setStackName(String stackName) {
    this.stackName = stackName;
  }


  public Session fleetName(String fleetName) {
    this.fleetName = fleetName;
    return this;
  }

  /**
   * Get fleetName
   * @return fleetName
   */
  @javax.annotation.Nonnull
  public String getFleetName() {
    return fleetName;
  }

  public void setFleetName(String fleetName) {
    this.fleetName = fleetName;
  }


  public Session state(SessionState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public SessionState getState() {
    return state;
  }

  public void setState(SessionState state) {
    this.state = state;
  }


  public Session connectionState(SessionConnectionState connectionState) {
    this.connectionState = connectionState;
    return this;
  }

  /**
   * Get connectionState
   * @return connectionState
   */
  @javax.annotation.Nullable
  public SessionConnectionState getConnectionState() {
    return connectionState;
  }

  public void setConnectionState(SessionConnectionState connectionState) {
    this.connectionState = connectionState;
  }


  public Session startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Session maxExpirationTime(OffsetDateTime maxExpirationTime) {
    this.maxExpirationTime = maxExpirationTime;
    return this;
  }

  /**
   * Get maxExpirationTime
   * @return maxExpirationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMaxExpirationTime() {
    return maxExpirationTime;
  }

  public void setMaxExpirationTime(OffsetDateTime maxExpirationTime) {
    this.maxExpirationTime = maxExpirationTime;
  }


  public Session authenticationType(AuthenticationType authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

  /**
   * Get authenticationType
   * @return authenticationType
   */
  @javax.annotation.Nullable
  public AuthenticationType getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(AuthenticationType authenticationType) {
    this.authenticationType = authenticationType;
  }


  public Session networkAccessConfiguration(SessionNetworkAccessConfiguration networkAccessConfiguration) {
    this.networkAccessConfiguration = networkAccessConfiguration;
    return this;
  }

  /**
   * Get networkAccessConfiguration
   * @return networkAccessConfiguration
   */
  @javax.annotation.Nullable
  public SessionNetworkAccessConfiguration getNetworkAccessConfiguration() {
    return networkAccessConfiguration;
  }

  public void setNetworkAccessConfiguration(SessionNetworkAccessConfiguration networkAccessConfiguration) {
    this.networkAccessConfiguration = networkAccessConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Session session = (Session) o;
    return Objects.equals(this.id, session.id) &&
        Objects.equals(this.userId, session.userId) &&
        Objects.equals(this.stackName, session.stackName) &&
        Objects.equals(this.fleetName, session.fleetName) &&
        Objects.equals(this.state, session.state) &&
        Objects.equals(this.connectionState, session.connectionState) &&
        Objects.equals(this.startTime, session.startTime) &&
        Objects.equals(this.maxExpirationTime, session.maxExpirationTime) &&
        Objects.equals(this.authenticationType, session.authenticationType) &&
        Objects.equals(this.networkAccessConfiguration, session.networkAccessConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, stackName, fleetName, state, connectionState, startTime, maxExpirationTime, authenticationType, networkAccessConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Session {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    stackName: ").append(toIndentedString(stackName)).append("\n");
    sb.append("    fleetName: ").append(toIndentedString(fleetName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    connectionState: ").append(toIndentedString(connectionState)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    maxExpirationTime: ").append(toIndentedString(maxExpirationTime)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    networkAccessConfiguration: ").append(toIndentedString(networkAccessConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("UserId");
    openapiFields.add("StackName");
    openapiFields.add("FleetName");
    openapiFields.add("State");
    openapiFields.add("ConnectionState");
    openapiFields.add("StartTime");
    openapiFields.add("MaxExpirationTime");
    openapiFields.add("AuthenticationType");
    openapiFields.add("NetworkAccessConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("UserId");
    openapiRequiredFields.add("StackName");
    openapiRequiredFields.add("FleetName");
    openapiRequiredFields.add("State");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Session
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Session.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Session is not found in the empty JSON string", Session.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Session.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Session` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Session.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the required field `UserId`
      String.validateJsonElement(jsonObj.get("UserId"));
      // validate the required field `StackName`
      String.validateJsonElement(jsonObj.get("StackName"));
      // validate the required field `FleetName`
      String.validateJsonElement(jsonObj.get("FleetName"));
      // validate the required field `State`
      SessionState.validateJsonElement(jsonObj.get("State"));
      // validate the optional field `ConnectionState`
      if (jsonObj.get("ConnectionState") != null && !jsonObj.get("ConnectionState").isJsonNull()) {
        SessionConnectionState.validateJsonElement(jsonObj.get("ConnectionState"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `MaxExpirationTime`
      if (jsonObj.get("MaxExpirationTime") != null && !jsonObj.get("MaxExpirationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("MaxExpirationTime"));
      }
      // validate the optional field `AuthenticationType`
      if (jsonObj.get("AuthenticationType") != null && !jsonObj.get("AuthenticationType").isJsonNull()) {
        AuthenticationType.validateJsonElement(jsonObj.get("AuthenticationType"));
      }
      // validate the optional field `NetworkAccessConfiguration`
      if (jsonObj.get("NetworkAccessConfiguration") != null && !jsonObj.get("NetworkAccessConfiguration").isJsonNull()) {
        SessionNetworkAccessConfiguration.validateJsonElement(jsonObj.get("NetworkAccessConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Session.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Session' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Session> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Session.class));

       return (TypeAdapter<T>) new TypeAdapter<Session>() {
           @Override
           public void write(JsonWriter out, Session value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Session read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Session given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Session
   * @throws IOException if the JSON string is invalid with respect to Session
   */
  public static Session fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Session.class);
  }

  /**
   * Convert an instance of Session to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

