/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ImageImagePermissions;
import org.openapitools.client.model.ImageState;
import org.openapitools.client.model.ImageStateChangeReason;
import org.openapitools.client.model.PlatformType;
import org.openapitools.client.model.VisibilityType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:46.976213-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Image {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_BASE_IMAGE_ARN = "BaseImageArn";
  @SerializedName(SERIALIZED_NAME_BASE_IMAGE_ARN)
  private String baseImageArn;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ImageState state;

  public static final String SERIALIZED_NAME_VISIBILITY = "Visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private VisibilityType visibility;

  public static final String SERIALIZED_NAME_IMAGE_BUILDER_SUPPORTED = "ImageBuilderSupported";
  @SerializedName(SERIALIZED_NAME_IMAGE_BUILDER_SUPPORTED)
  private Boolean imageBuilderSupported;

  public static final String SERIALIZED_NAME_IMAGE_BUILDER_NAME = "ImageBuilderName";
  @SerializedName(SERIALIZED_NAME_IMAGE_BUILDER_NAME)
  private String imageBuilderName;

  public static final String SERIALIZED_NAME_PLATFORM = "Platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformType platform;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STATE_CHANGE_REASON = "StateChangeReason";
  @SerializedName(SERIALIZED_NAME_STATE_CHANGE_REASON)
  private ImageStateChangeReason stateChangeReason;

  public static final String SERIALIZED_NAME_APPLICATIONS = "Applications";
  @SerializedName(SERIALIZED_NAME_APPLICATIONS)
  private List applications;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_PUBLIC_BASE_IMAGE_RELEASED_DATE = "PublicBaseImageReleasedDate";
  @SerializedName(SERIALIZED_NAME_PUBLIC_BASE_IMAGE_RELEASED_DATE)
  private OffsetDateTime publicBaseImageReleasedDate;

  public static final String SERIALIZED_NAME_APPSTREAM_AGENT_VERSION = "AppstreamAgentVersion";
  @SerializedName(SERIALIZED_NAME_APPSTREAM_AGENT_VERSION)
  private String appstreamAgentVersion;

  public static final String SERIALIZED_NAME_IMAGE_PERMISSIONS = "ImagePermissions";
  @SerializedName(SERIALIZED_NAME_IMAGE_PERMISSIONS)
  private ImageImagePermissions imagePermissions;

  public static final String SERIALIZED_NAME_IMAGE_ERRORS = "ImageErrors";
  @SerializedName(SERIALIZED_NAME_IMAGE_ERRORS)
  private List imageErrors;

  public Image() {
  }

  public Image name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Image arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public Image baseImageArn(String baseImageArn) {
    this.baseImageArn = baseImageArn;
    return this;
  }

  /**
   * Get baseImageArn
   * @return baseImageArn
   */
  @javax.annotation.Nullable
  public String getBaseImageArn() {
    return baseImageArn;
  }

  public void setBaseImageArn(String baseImageArn) {
    this.baseImageArn = baseImageArn;
  }


  public Image displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Image state(ImageState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public ImageState getState() {
    return state;
  }

  public void setState(ImageState state) {
    this.state = state;
  }


  public Image visibility(VisibilityType visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nullable
  public VisibilityType getVisibility() {
    return visibility;
  }

  public void setVisibility(VisibilityType visibility) {
    this.visibility = visibility;
  }


  public Image imageBuilderSupported(Boolean imageBuilderSupported) {
    this.imageBuilderSupported = imageBuilderSupported;
    return this;
  }

  /**
   * Get imageBuilderSupported
   * @return imageBuilderSupported
   */
  @javax.annotation.Nullable
  public Boolean getImageBuilderSupported() {
    return imageBuilderSupported;
  }

  public void setImageBuilderSupported(Boolean imageBuilderSupported) {
    this.imageBuilderSupported = imageBuilderSupported;
  }


  public Image imageBuilderName(String imageBuilderName) {
    this.imageBuilderName = imageBuilderName;
    return this;
  }

  /**
   * Get imageBuilderName
   * @return imageBuilderName
   */
  @javax.annotation.Nullable
  public String getImageBuilderName() {
    return imageBuilderName;
  }

  public void setImageBuilderName(String imageBuilderName) {
    this.imageBuilderName = imageBuilderName;
  }


  public Image platform(PlatformType platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public PlatformType getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformType platform) {
    this.platform = platform;
  }


  public Image description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Image stateChangeReason(ImageStateChangeReason stateChangeReason) {
    this.stateChangeReason = stateChangeReason;
    return this;
  }

  /**
   * Get stateChangeReason
   * @return stateChangeReason
   */
  @javax.annotation.Nullable
  public ImageStateChangeReason getStateChangeReason() {
    return stateChangeReason;
  }

  public void setStateChangeReason(ImageStateChangeReason stateChangeReason) {
    this.stateChangeReason = stateChangeReason;
  }


  public Image applications(List applications) {
    this.applications = applications;
    return this;
  }

  /**
   * Get applications
   * @return applications
   */
  @javax.annotation.Nullable
  public List getApplications() {
    return applications;
  }

  public void setApplications(List applications) {
    this.applications = applications;
  }


  public Image createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public Image publicBaseImageReleasedDate(OffsetDateTime publicBaseImageReleasedDate) {
    this.publicBaseImageReleasedDate = publicBaseImageReleasedDate;
    return this;
  }

  /**
   * Get publicBaseImageReleasedDate
   * @return publicBaseImageReleasedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPublicBaseImageReleasedDate() {
    return publicBaseImageReleasedDate;
  }

  public void setPublicBaseImageReleasedDate(OffsetDateTime publicBaseImageReleasedDate) {
    this.publicBaseImageReleasedDate = publicBaseImageReleasedDate;
  }


  public Image appstreamAgentVersion(String appstreamAgentVersion) {
    this.appstreamAgentVersion = appstreamAgentVersion;
    return this;
  }

  /**
   * Get appstreamAgentVersion
   * @return appstreamAgentVersion
   */
  @javax.annotation.Nullable
  public String getAppstreamAgentVersion() {
    return appstreamAgentVersion;
  }

  public void setAppstreamAgentVersion(String appstreamAgentVersion) {
    this.appstreamAgentVersion = appstreamAgentVersion;
  }


  public Image imagePermissions(ImageImagePermissions imagePermissions) {
    this.imagePermissions = imagePermissions;
    return this;
  }

  /**
   * Get imagePermissions
   * @return imagePermissions
   */
  @javax.annotation.Nullable
  public ImageImagePermissions getImagePermissions() {
    return imagePermissions;
  }

  public void setImagePermissions(ImageImagePermissions imagePermissions) {
    this.imagePermissions = imagePermissions;
  }


  public Image imageErrors(List imageErrors) {
    this.imageErrors = imageErrors;
    return this;
  }

  /**
   * Get imageErrors
   * @return imageErrors
   */
  @javax.annotation.Nullable
  public List getImageErrors() {
    return imageErrors;
  }

  public void setImageErrors(List imageErrors) {
    this.imageErrors = imageErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Image image = (Image) o;
    return Objects.equals(this.name, image.name) &&
        Objects.equals(this.arn, image.arn) &&
        Objects.equals(this.baseImageArn, image.baseImageArn) &&
        Objects.equals(this.displayName, image.displayName) &&
        Objects.equals(this.state, image.state) &&
        Objects.equals(this.visibility, image.visibility) &&
        Objects.equals(this.imageBuilderSupported, image.imageBuilderSupported) &&
        Objects.equals(this.imageBuilderName, image.imageBuilderName) &&
        Objects.equals(this.platform, image.platform) &&
        Objects.equals(this.description, image.description) &&
        Objects.equals(this.stateChangeReason, image.stateChangeReason) &&
        Objects.equals(this.applications, image.applications) &&
        Objects.equals(this.createdTime, image.createdTime) &&
        Objects.equals(this.publicBaseImageReleasedDate, image.publicBaseImageReleasedDate) &&
        Objects.equals(this.appstreamAgentVersion, image.appstreamAgentVersion) &&
        Objects.equals(this.imagePermissions, image.imagePermissions) &&
        Objects.equals(this.imageErrors, image.imageErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, arn, baseImageArn, displayName, state, visibility, imageBuilderSupported, imageBuilderName, platform, description, stateChangeReason, applications, createdTime, publicBaseImageReleasedDate, appstreamAgentVersion, imagePermissions, imageErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Image {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    baseImageArn: ").append(toIndentedString(baseImageArn)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    imageBuilderSupported: ").append(toIndentedString(imageBuilderSupported)).append("\n");
    sb.append("    imageBuilderName: ").append(toIndentedString(imageBuilderName)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    stateChangeReason: ").append(toIndentedString(stateChangeReason)).append("\n");
    sb.append("    applications: ").append(toIndentedString(applications)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    publicBaseImageReleasedDate: ").append(toIndentedString(publicBaseImageReleasedDate)).append("\n");
    sb.append("    appstreamAgentVersion: ").append(toIndentedString(appstreamAgentVersion)).append("\n");
    sb.append("    imagePermissions: ").append(toIndentedString(imagePermissions)).append("\n");
    sb.append("    imageErrors: ").append(toIndentedString(imageErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Arn");
    openapiFields.add("BaseImageArn");
    openapiFields.add("DisplayName");
    openapiFields.add("State");
    openapiFields.add("Visibility");
    openapiFields.add("ImageBuilderSupported");
    openapiFields.add("ImageBuilderName");
    openapiFields.add("Platform");
    openapiFields.add("Description");
    openapiFields.add("StateChangeReason");
    openapiFields.add("Applications");
    openapiFields.add("CreatedTime");
    openapiFields.add("PublicBaseImageReleasedDate");
    openapiFields.add("AppstreamAgentVersion");
    openapiFields.add("ImagePermissions");
    openapiFields.add("ImageErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Image
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Image.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Image is not found in the empty JSON string", Image.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Image.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Image` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Image.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `BaseImageArn`
      if (jsonObj.get("BaseImageArn") != null && !jsonObj.get("BaseImageArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BaseImageArn"));
      }
      // validate the optional field `DisplayName`
      if (jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DisplayName"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        ImageState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `Visibility`
      if (jsonObj.get("Visibility") != null && !jsonObj.get("Visibility").isJsonNull()) {
        VisibilityType.validateJsonElement(jsonObj.get("Visibility"));
      }
      // validate the optional field `ImageBuilderSupported`
      if (jsonObj.get("ImageBuilderSupported") != null && !jsonObj.get("ImageBuilderSupported").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ImageBuilderSupported"));
      }
      // validate the optional field `ImageBuilderName`
      if (jsonObj.get("ImageBuilderName") != null && !jsonObj.get("ImageBuilderName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImageBuilderName"));
      }
      // validate the optional field `Platform`
      if (jsonObj.get("Platform") != null && !jsonObj.get("Platform").isJsonNull()) {
        PlatformType.validateJsonElement(jsonObj.get("Platform"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `StateChangeReason`
      if (jsonObj.get("StateChangeReason") != null && !jsonObj.get("StateChangeReason").isJsonNull()) {
        ImageStateChangeReason.validateJsonElement(jsonObj.get("StateChangeReason"));
      }
      // validate the optional field `Applications`
      if (jsonObj.get("Applications") != null && !jsonObj.get("Applications").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Applications"));
      }
      // validate the optional field `CreatedTime`
      if (jsonObj.get("CreatedTime") != null && !jsonObj.get("CreatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      }
      // validate the optional field `PublicBaseImageReleasedDate`
      if (jsonObj.get("PublicBaseImageReleasedDate") != null && !jsonObj.get("PublicBaseImageReleasedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("PublicBaseImageReleasedDate"));
      }
      // validate the optional field `AppstreamAgentVersion`
      if (jsonObj.get("AppstreamAgentVersion") != null && !jsonObj.get("AppstreamAgentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppstreamAgentVersion"));
      }
      // validate the optional field `ImagePermissions`
      if (jsonObj.get("ImagePermissions") != null && !jsonObj.get("ImagePermissions").isJsonNull()) {
        ImageImagePermissions.validateJsonElement(jsonObj.get("ImagePermissions"));
      }
      // validate the optional field `ImageErrors`
      if (jsonObj.get("ImageErrors") != null && !jsonObj.get("ImageErrors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ImageErrors"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Image.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Image' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Image> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Image.class));

       return (TypeAdapter<T>) new TypeAdapter<Image>() {
           @Override
           public void write(JsonWriter out, Image value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Image read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Image given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Image
   * @throws IOException if the JSON string is invalid with respect to Image
   */
  public static Image fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Image.class);
  }

  /**
   * Convert an instance of Image to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

