/*
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateUpdatedImageRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:46.976213-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateUpdatedImageRequest {
  public static final String SERIALIZED_NAME_EXISTING_IMAGE_NAME = "existingImageName";
  @SerializedName(SERIALIZED_NAME_EXISTING_IMAGE_NAME)
  private String existingImageName;

  public static final String SERIALIZED_NAME_NEW_IMAGE_NAME = "newImageName";
  @SerializedName(SERIALIZED_NAME_NEW_IMAGE_NAME)
  private String newImageName;

  public static final String SERIALIZED_NAME_NEW_IMAGE_DESCRIPTION = "newImageDescription";
  @SerializedName(SERIALIZED_NAME_NEW_IMAGE_DESCRIPTION)
  private String newImageDescription;

  public static final String SERIALIZED_NAME_NEW_IMAGE_DISPLAY_NAME = "newImageDisplayName";
  @SerializedName(SERIALIZED_NAME_NEW_IMAGE_DISPLAY_NAME)
  private String newImageDisplayName;

  public static final String SERIALIZED_NAME_NEW_IMAGE_TAGS = "newImageTags";
  @SerializedName(SERIALIZED_NAME_NEW_IMAGE_TAGS)
  private Map newImageTags;

  public static final String SERIALIZED_NAME_DRY_RUN = "dryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public CreateUpdatedImageRequest() {
  }

  public CreateUpdatedImageRequest existingImageName(String existingImageName) {
    this.existingImageName = existingImageName;
    return this;
  }

  /**
   * Get existingImageName
   * @return existingImageName
   */
  @javax.annotation.Nonnull
  public String getExistingImageName() {
    return existingImageName;
  }

  public void setExistingImageName(String existingImageName) {
    this.existingImageName = existingImageName;
  }


  public CreateUpdatedImageRequest newImageName(String newImageName) {
    this.newImageName = newImageName;
    return this;
  }

  /**
   * Get newImageName
   * @return newImageName
   */
  @javax.annotation.Nonnull
  public String getNewImageName() {
    return newImageName;
  }

  public void setNewImageName(String newImageName) {
    this.newImageName = newImageName;
  }


  public CreateUpdatedImageRequest newImageDescription(String newImageDescription) {
    this.newImageDescription = newImageDescription;
    return this;
  }

  /**
   * Get newImageDescription
   * @return newImageDescription
   */
  @javax.annotation.Nullable
  public String getNewImageDescription() {
    return newImageDescription;
  }

  public void setNewImageDescription(String newImageDescription) {
    this.newImageDescription = newImageDescription;
  }


  public CreateUpdatedImageRequest newImageDisplayName(String newImageDisplayName) {
    this.newImageDisplayName = newImageDisplayName;
    return this;
  }

  /**
   * Get newImageDisplayName
   * @return newImageDisplayName
   */
  @javax.annotation.Nullable
  public String getNewImageDisplayName() {
    return newImageDisplayName;
  }

  public void setNewImageDisplayName(String newImageDisplayName) {
    this.newImageDisplayName = newImageDisplayName;
  }


  public CreateUpdatedImageRequest newImageTags(Map newImageTags) {
    this.newImageTags = newImageTags;
    return this;
  }

  /**
   * Get newImageTags
   * @return newImageTags
   */
  @javax.annotation.Nullable
  public Map getNewImageTags() {
    return newImageTags;
  }

  public void setNewImageTags(Map newImageTags) {
    this.newImageTags = newImageTags;
  }


  public CreateUpdatedImageRequest dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

  /**
   * Get dryRun
   * @return dryRun
   */
  @javax.annotation.Nullable
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUpdatedImageRequest createUpdatedImageRequest = (CreateUpdatedImageRequest) o;
    return Objects.equals(this.existingImageName, createUpdatedImageRequest.existingImageName) &&
        Objects.equals(this.newImageName, createUpdatedImageRequest.newImageName) &&
        Objects.equals(this.newImageDescription, createUpdatedImageRequest.newImageDescription) &&
        Objects.equals(this.newImageDisplayName, createUpdatedImageRequest.newImageDisplayName) &&
        Objects.equals(this.newImageTags, createUpdatedImageRequest.newImageTags) &&
        Objects.equals(this.dryRun, createUpdatedImageRequest.dryRun);
  }

  @Override
  public int hashCode() {
    return Objects.hash(existingImageName, newImageName, newImageDescription, newImageDisplayName, newImageTags, dryRun);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUpdatedImageRequest {\n");
    sb.append("    existingImageName: ").append(toIndentedString(existingImageName)).append("\n");
    sb.append("    newImageName: ").append(toIndentedString(newImageName)).append("\n");
    sb.append("    newImageDescription: ").append(toIndentedString(newImageDescription)).append("\n");
    sb.append("    newImageDisplayName: ").append(toIndentedString(newImageDisplayName)).append("\n");
    sb.append("    newImageTags: ").append(toIndentedString(newImageTags)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("existingImageName");
    openapiFields.add("newImageName");
    openapiFields.add("newImageDescription");
    openapiFields.add("newImageDisplayName");
    openapiFields.add("newImageTags");
    openapiFields.add("dryRun");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("existingImageName");
    openapiRequiredFields.add("newImageName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateUpdatedImageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUpdatedImageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUpdatedImageRequest is not found in the empty JSON string", CreateUpdatedImageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateUpdatedImageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateUpdatedImageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUpdatedImageRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `existingImageName`
      String.validateJsonElement(jsonObj.get("existingImageName"));
      // validate the required field `newImageName`
      String.validateJsonElement(jsonObj.get("newImageName"));
      // validate the optional field `newImageDescription`
      if (jsonObj.get("newImageDescription") != null && !jsonObj.get("newImageDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("newImageDescription"));
      }
      // validate the optional field `newImageDisplayName`
      if (jsonObj.get("newImageDisplayName") != null && !jsonObj.get("newImageDisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("newImageDisplayName"));
      }
      // validate the optional field `newImageTags`
      if (jsonObj.get("newImageTags") != null && !jsonObj.get("newImageTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("newImageTags"));
      }
      // validate the optional field `dryRun`
      if (jsonObj.get("dryRun") != null && !jsonObj.get("dryRun").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("dryRun"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUpdatedImageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUpdatedImageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUpdatedImageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUpdatedImageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUpdatedImageRequest>() {
           @Override
           public void write(JsonWriter out, CreateUpdatedImageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUpdatedImageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateUpdatedImageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateUpdatedImageRequest
   * @throws IOException if the JSON string is invalid with respect to CreateUpdatedImageRequest
   */
  public static CreateUpdatedImageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUpdatedImageRequest.class);
  }

  /**
   * Convert an instance of CreateUpdatedImageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

