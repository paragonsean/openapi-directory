/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateAppBlockBuilderAppBlockRequest from '../model/AssociateAppBlockBuilderAppBlockRequest';
import AssociateAppBlockBuilderAppBlockResult from '../model/AssociateAppBlockBuilderAppBlockResult';
import AssociateApplicationFleetRequest from '../model/AssociateApplicationFleetRequest';
import AssociateApplicationFleetResult from '../model/AssociateApplicationFleetResult';
import AssociateApplicationToEntitlementRequest from '../model/AssociateApplicationToEntitlementRequest';
import AssociateFleetRequest from '../model/AssociateFleetRequest';
import BatchAssociateUserStackRequest from '../model/BatchAssociateUserStackRequest';
import BatchAssociateUserStackResult from '../model/BatchAssociateUserStackResult';
import BatchDisassociateUserStackRequest from '../model/BatchDisassociateUserStackRequest';
import BatchDisassociateUserStackResult from '../model/BatchDisassociateUserStackResult';
import CopyImageRequest from '../model/CopyImageRequest';
import CopyImageResponse from '../model/CopyImageResponse';
import CreateAppBlockBuilderRequest from '../model/CreateAppBlockBuilderRequest';
import CreateAppBlockBuilderResult from '../model/CreateAppBlockBuilderResult';
import CreateAppBlockBuilderStreamingURLRequest from '../model/CreateAppBlockBuilderStreamingURLRequest';
import CreateAppBlockBuilderStreamingURLResult from '../model/CreateAppBlockBuilderStreamingURLResult';
import CreateAppBlockRequest from '../model/CreateAppBlockRequest';
import CreateAppBlockResult from '../model/CreateAppBlockResult';
import CreateApplicationRequest from '../model/CreateApplicationRequest';
import CreateApplicationResult from '../model/CreateApplicationResult';
import CreateDirectoryConfigRequest from '../model/CreateDirectoryConfigRequest';
import CreateDirectoryConfigResult from '../model/CreateDirectoryConfigResult';
import CreateEntitlementRequest from '../model/CreateEntitlementRequest';
import CreateEntitlementResult from '../model/CreateEntitlementResult';
import CreateFleetRequest from '../model/CreateFleetRequest';
import CreateFleetResult from '../model/CreateFleetResult';
import CreateImageBuilderRequest from '../model/CreateImageBuilderRequest';
import CreateImageBuilderResult from '../model/CreateImageBuilderResult';
import CreateImageBuilderStreamingURLRequest from '../model/CreateImageBuilderStreamingURLRequest';
import CreateImageBuilderStreamingURLResult from '../model/CreateImageBuilderStreamingURLResult';
import CreateStackRequest from '../model/CreateStackRequest';
import CreateStackResult from '../model/CreateStackResult';
import CreateStreamingURLRequest from '../model/CreateStreamingURLRequest';
import CreateStreamingURLResult from '../model/CreateStreamingURLResult';
import CreateUpdatedImageRequest from '../model/CreateUpdatedImageRequest';
import CreateUpdatedImageResult from '../model/CreateUpdatedImageResult';
import CreateUsageReportSubscriptionResult from '../model/CreateUsageReportSubscriptionResult';
import CreateUserRequest from '../model/CreateUserRequest';
import DeleteAppBlockBuilderRequest from '../model/DeleteAppBlockBuilderRequest';
import DeleteAppBlockRequest from '../model/DeleteAppBlockRequest';
import DeleteApplicationRequest from '../model/DeleteApplicationRequest';
import DeleteDirectoryConfigRequest from '../model/DeleteDirectoryConfigRequest';
import DeleteEntitlementRequest from '../model/DeleteEntitlementRequest';
import DeleteFleetRequest from '../model/DeleteFleetRequest';
import DeleteImageBuilderRequest from '../model/DeleteImageBuilderRequest';
import DeleteImageBuilderResult from '../model/DeleteImageBuilderResult';
import DeleteImagePermissionsRequest from '../model/DeleteImagePermissionsRequest';
import DeleteImageRequest from '../model/DeleteImageRequest';
import DeleteImageResult from '../model/DeleteImageResult';
import DeleteStackRequest from '../model/DeleteStackRequest';
import DeleteUserRequest from '../model/DeleteUserRequest';
import DescribeAppBlockBuilderAppBlockAssociationsRequest from '../model/DescribeAppBlockBuilderAppBlockAssociationsRequest';
import DescribeAppBlockBuilderAppBlockAssociationsResult from '../model/DescribeAppBlockBuilderAppBlockAssociationsResult';
import DescribeAppBlockBuildersRequest from '../model/DescribeAppBlockBuildersRequest';
import DescribeAppBlockBuildersResult from '../model/DescribeAppBlockBuildersResult';
import DescribeAppBlocksRequest from '../model/DescribeAppBlocksRequest';
import DescribeAppBlocksResult from '../model/DescribeAppBlocksResult';
import DescribeApplicationFleetAssociationsRequest from '../model/DescribeApplicationFleetAssociationsRequest';
import DescribeApplicationFleetAssociationsResult from '../model/DescribeApplicationFleetAssociationsResult';
import DescribeApplicationsRequest from '../model/DescribeApplicationsRequest';
import DescribeApplicationsResult from '../model/DescribeApplicationsResult';
import DescribeDirectoryConfigsRequest from '../model/DescribeDirectoryConfigsRequest';
import DescribeDirectoryConfigsResult from '../model/DescribeDirectoryConfigsResult';
import DescribeEntitlementsRequest from '../model/DescribeEntitlementsRequest';
import DescribeEntitlementsResult from '../model/DescribeEntitlementsResult';
import DescribeFleetsRequest from '../model/DescribeFleetsRequest';
import DescribeFleetsResult from '../model/DescribeFleetsResult';
import DescribeImageBuildersRequest from '../model/DescribeImageBuildersRequest';
import DescribeImageBuildersResult from '../model/DescribeImageBuildersResult';
import DescribeImagePermissionsRequest from '../model/DescribeImagePermissionsRequest';
import DescribeImagePermissionsResult from '../model/DescribeImagePermissionsResult';
import DescribeImagesRequest from '../model/DescribeImagesRequest';
import DescribeImagesResult from '../model/DescribeImagesResult';
import DescribeSessionsRequest from '../model/DescribeSessionsRequest';
import DescribeSessionsResult from '../model/DescribeSessionsResult';
import DescribeStacksRequest from '../model/DescribeStacksRequest';
import DescribeStacksResult from '../model/DescribeStacksResult';
import DescribeUsageReportSubscriptionsRequest from '../model/DescribeUsageReportSubscriptionsRequest';
import DescribeUsageReportSubscriptionsResult from '../model/DescribeUsageReportSubscriptionsResult';
import DescribeUserStackAssociationsRequest from '../model/DescribeUserStackAssociationsRequest';
import DescribeUserStackAssociationsResult from '../model/DescribeUserStackAssociationsResult';
import DescribeUsersRequest from '../model/DescribeUsersRequest';
import DescribeUsersResult from '../model/DescribeUsersResult';
import DisableUserRequest from '../model/DisableUserRequest';
import DisassociateAppBlockBuilderAppBlockRequest from '../model/DisassociateAppBlockBuilderAppBlockRequest';
import DisassociateApplicationFleetRequest from '../model/DisassociateApplicationFleetRequest';
import DisassociateApplicationFromEntitlementRequest from '../model/DisassociateApplicationFromEntitlementRequest';
import DisassociateFleetRequest from '../model/DisassociateFleetRequest';
import EnableUserRequest from '../model/EnableUserRequest';
import ExpireSessionRequest from '../model/ExpireSessionRequest';
import ListAssociatedFleetsRequest from '../model/ListAssociatedFleetsRequest';
import ListAssociatedFleetsResult from '../model/ListAssociatedFleetsResult';
import ListAssociatedStacksRequest from '../model/ListAssociatedStacksRequest';
import ListAssociatedStacksResult from '../model/ListAssociatedStacksResult';
import ListEntitledApplicationsRequest from '../model/ListEntitledApplicationsRequest';
import ListEntitledApplicationsResult from '../model/ListEntitledApplicationsResult';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import StartAppBlockBuilderRequest from '../model/StartAppBlockBuilderRequest';
import StartAppBlockBuilderResult from '../model/StartAppBlockBuilderResult';
import StartFleetRequest from '../model/StartFleetRequest';
import StartImageBuilderRequest from '../model/StartImageBuilderRequest';
import StartImageBuilderResult from '../model/StartImageBuilderResult';
import StopAppBlockBuilderRequest from '../model/StopAppBlockBuilderRequest';
import StopAppBlockBuilderResult from '../model/StopAppBlockBuilderResult';
import StopFleetRequest from '../model/StopFleetRequest';
import StopImageBuilderRequest from '../model/StopImageBuilderRequest';
import StopImageBuilderResult from '../model/StopImageBuilderResult';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateAppBlockBuilderRequest from '../model/UpdateAppBlockBuilderRequest';
import UpdateAppBlockBuilderResult from '../model/UpdateAppBlockBuilderResult';
import UpdateApplicationRequest from '../model/UpdateApplicationRequest';
import UpdateApplicationResult from '../model/UpdateApplicationResult';
import UpdateDirectoryConfigRequest from '../model/UpdateDirectoryConfigRequest';
import UpdateDirectoryConfigResult from '../model/UpdateDirectoryConfigResult';
import UpdateEntitlementRequest from '../model/UpdateEntitlementRequest';
import UpdateEntitlementResult from '../model/UpdateEntitlementResult';
import UpdateFleetRequest from '../model/UpdateFleetRequest';
import UpdateFleetResult from '../model/UpdateFleetResult';
import UpdateImagePermissionsRequest from '../model/UpdateImagePermissionsRequest';
import UpdateStackRequest from '../model/UpdateStackRequest';
import UpdateStackResult from '../model/UpdateStackResult';

/**
* Default service.
* @module api/DefaultApi
* @version 2016-12-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateAppBlockBuilderAppBlock operation.
     * @callback module:api/DefaultApi~associateAppBlockBuilderAppBlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateAppBlockBuilderAppBlockResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the specified app block builder with the specified app block.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateAppBlockBuilderAppBlockRequest} associateAppBlockBuilderAppBlockRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateAppBlockBuilderAppBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateAppBlockBuilderAppBlockResult}
     */
    associateAppBlockBuilderAppBlock(xAmzTarget, associateAppBlockBuilderAppBlockRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateAppBlockBuilderAppBlockRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateAppBlockBuilderAppBlock");
      }
      // verify the required parameter 'associateAppBlockBuilderAppBlockRequest' is set
      if (associateAppBlockBuilderAppBlockRequest === undefined || associateAppBlockBuilderAppBlockRequest === null) {
        throw new Error("Missing the required parameter 'associateAppBlockBuilderAppBlockRequest' when calling associateAppBlockBuilderAppBlock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateAppBlockBuilderAppBlockResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.AssociateAppBlockBuilderAppBlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateApplicationFleet operation.
     * @callback module:api/DefaultApi~associateApplicationFleetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateApplicationFleetResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the specified application with the specified fleet. This is only supported for Elastic fleets.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateApplicationFleetRequest} associateApplicationFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateApplicationFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateApplicationFleetResult}
     */
    associateApplicationFleet(xAmzTarget, associateApplicationFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateApplicationFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateApplicationFleet");
      }
      // verify the required parameter 'associateApplicationFleetRequest' is set
      if (associateApplicationFleetRequest === undefined || associateApplicationFleetRequest === null) {
        throw new Error("Missing the required parameter 'associateApplicationFleetRequest' when calling associateApplicationFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateApplicationFleetResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.AssociateApplicationFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateApplicationToEntitlement operation.
     * @callback module:api/DefaultApi~associateApplicationToEntitlementCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates an application to entitle.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateApplicationToEntitlementRequest} associateApplicationToEntitlementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateApplicationToEntitlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateApplicationToEntitlement(xAmzTarget, associateApplicationToEntitlementRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateApplicationToEntitlementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateApplicationToEntitlement");
      }
      // verify the required parameter 'associateApplicationToEntitlementRequest' is set
      if (associateApplicationToEntitlementRequest === undefined || associateApplicationToEntitlementRequest === null) {
        throw new Error("Missing the required parameter 'associateApplicationToEntitlementRequest' when calling associateApplicationToEntitlement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.AssociateApplicationToEntitlement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateFleet operation.
     * @callback module:api/DefaultApi~associateFleetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the specified fleet with the specified stack.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateFleetRequest} associateFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateFleet(xAmzTarget, associateFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateFleet");
      }
      // verify the required parameter 'associateFleetRequest' is set
      if (associateFleetRequest === undefined || associateFleetRequest === null) {
        throw new Error("Missing the required parameter 'associateFleetRequest' when calling associateFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.AssociateFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchAssociateUserStack operation.
     * @callback module:api/DefaultApi~batchAssociateUserStackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchAssociateUserStackResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the specified users with the specified stacks. Users in a user pool cannot be assigned to stacks with fleets that are joined to an Active Directory domain.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchAssociateUserStackRequest} batchAssociateUserStackRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchAssociateUserStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchAssociateUserStackResult}
     */
    batchAssociateUserStack(xAmzTarget, batchAssociateUserStackRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchAssociateUserStackRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchAssociateUserStack");
      }
      // verify the required parameter 'batchAssociateUserStackRequest' is set
      if (batchAssociateUserStackRequest === undefined || batchAssociateUserStackRequest === null) {
        throw new Error("Missing the required parameter 'batchAssociateUserStackRequest' when calling batchAssociateUserStack");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchAssociateUserStackResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.BatchAssociateUserStack', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDisassociateUserStack operation.
     * @callback module:api/DefaultApi~batchDisassociateUserStackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDisassociateUserStackResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates the specified users from the specified stacks.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchDisassociateUserStackRequest} batchDisassociateUserStackRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDisassociateUserStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDisassociateUserStackResult}
     */
    batchDisassociateUserStack(xAmzTarget, batchDisassociateUserStackRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDisassociateUserStackRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchDisassociateUserStack");
      }
      // verify the required parameter 'batchDisassociateUserStackRequest' is set
      if (batchDisassociateUserStackRequest === undefined || batchDisassociateUserStackRequest === null) {
        throw new Error("Missing the required parameter 'batchDisassociateUserStackRequest' when calling batchDisassociateUserStack");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDisassociateUserStackResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.BatchDisassociateUserStack', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyImage operation.
     * @callback module:api/DefaultApi~copyImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copies the image within the same region or to a new region within the same AWS account. Note that any tags you added to the image will not be copied.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CopyImageRequest} copyImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~copyImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyImageResponse}
     */
    copyImage(xAmzTarget, copyImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = copyImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling copyImage");
      }
      // verify the required parameter 'copyImageRequest' is set
      if (copyImageRequest === undefined || copyImageRequest === null) {
        throw new Error("Missing the required parameter 'copyImageRequest' when calling copyImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CopyImageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CopyImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppBlock operation.
     * @callback module:api/DefaultApi~createAppBlockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAppBlockResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an app block.</p> <p>App blocks are an Amazon AppStream 2.0 resource that stores the details about the virtual hard disk in an S3 bucket. It also stores the setup script with details about how to mount the virtual hard disk. The virtual hard disk includes the application binaries and other files necessary to launch your applications. Multiple applications can be assigned to a single app block.</p> <p>This is only supported for Elastic fleets.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAppBlockRequest} createAppBlockRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAppBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAppBlockResult}
     */
    createAppBlock(xAmzTarget, createAppBlockRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAppBlockRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAppBlock");
      }
      // verify the required parameter 'createAppBlockRequest' is set
      if (createAppBlockRequest === undefined || createAppBlockRequest === null) {
        throw new Error("Missing the required parameter 'createAppBlockRequest' when calling createAppBlock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAppBlockResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateAppBlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppBlockBuilder operation.
     * @callback module:api/DefaultApi~createAppBlockBuilderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAppBlockBuilderResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an app block builder.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAppBlockBuilderRequest} createAppBlockBuilderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAppBlockBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAppBlockBuilderResult}
     */
    createAppBlockBuilder(xAmzTarget, createAppBlockBuilderRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAppBlockBuilderRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAppBlockBuilder");
      }
      // verify the required parameter 'createAppBlockBuilderRequest' is set
      if (createAppBlockBuilderRequest === undefined || createAppBlockBuilderRequest === null) {
        throw new Error("Missing the required parameter 'createAppBlockBuilderRequest' when calling createAppBlockBuilder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAppBlockBuilderResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateAppBlockBuilder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppBlockBuilderStreamingURL operation.
     * @callback module:api/DefaultApi~createAppBlockBuilderStreamingURLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAppBlockBuilderStreamingURLResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a URL to start a create app block builder streaming session.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAppBlockBuilderStreamingURLRequest} createAppBlockBuilderStreamingURLRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAppBlockBuilderStreamingURLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAppBlockBuilderStreamingURLResult}
     */
    createAppBlockBuilderStreamingURL(xAmzTarget, createAppBlockBuilderStreamingURLRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAppBlockBuilderStreamingURLRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAppBlockBuilderStreamingURL");
      }
      // verify the required parameter 'createAppBlockBuilderStreamingURLRequest' is set
      if (createAppBlockBuilderStreamingURLRequest === undefined || createAppBlockBuilderStreamingURLRequest === null) {
        throw new Error("Missing the required parameter 'createAppBlockBuilderStreamingURLRequest' when calling createAppBlockBuilderStreamingURL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAppBlockBuilderStreamingURLResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateAppBlockBuilderStreamingURL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApplication operation.
     * @callback module:api/DefaultApi~createApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateApplicationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an application.</p> <p>Applications are an Amazon AppStream 2.0 resource that stores the details about how to launch applications on Elastic fleet streaming instances. An application consists of the launch details, icon, and display name. Applications are associated with an app block that contains the application binaries and other files. The applications assigned to an Elastic fleet are the applications users can launch. </p> <p>This is only supported for Elastic fleets.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateApplicationRequest} createApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateApplicationResult}
     */
    createApplication(xAmzTarget, createApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createApplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createApplication");
      }
      // verify the required parameter 'createApplicationRequest' is set
      if (createApplicationRequest === undefined || createApplicationRequest === null) {
        throw new Error("Missing the required parameter 'createApplicationRequest' when calling createApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApplicationResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDirectoryConfig operation.
     * @callback module:api/DefaultApi~createDirectoryConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDirectoryConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDirectoryConfigRequest} createDirectoryConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDirectoryConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDirectoryConfigResult}
     */
    createDirectoryConfig(xAmzTarget, createDirectoryConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDirectoryConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDirectoryConfig");
      }
      // verify the required parameter 'createDirectoryConfigRequest' is set
      if (createDirectoryConfigRequest === undefined || createDirectoryConfigRequest === null) {
        throw new Error("Missing the required parameter 'createDirectoryConfigRequest' when calling createDirectoryConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDirectoryConfigResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateDirectoryConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEntitlement operation.
     * @callback module:api/DefaultApi~createEntitlementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEntitlementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new entitlement. Entitlements control access to specific applications within a stack, based on user attributes. Entitlements apply to SAML 2.0 federated user identities. Amazon AppStream 2.0 user pool and streaming URL users are entitled to all applications in a stack. Entitlements don't apply to the desktop stream view application, or to applications managed by a dynamic app provider using the Dynamic Application Framework.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateEntitlementRequest} createEntitlementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEntitlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEntitlementResult}
     */
    createEntitlement(xAmzTarget, createEntitlementRequest, opts, callback) {
      opts = opts || {};
      let postBody = createEntitlementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createEntitlement");
      }
      // verify the required parameter 'createEntitlementRequest' is set
      if (createEntitlementRequest === undefined || createEntitlementRequest === null) {
        throw new Error("Missing the required parameter 'createEntitlementRequest' when calling createEntitlement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEntitlementResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateEntitlement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFleet operation.
     * @callback module:api/DefaultApi~createFleetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFleetResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a fleet. A fleet consists of streaming instances that your users access for their applications and desktops.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateFleetRequest} createFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFleetResult}
     */
    createFleet(xAmzTarget, createFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createFleet");
      }
      // verify the required parameter 'createFleetRequest' is set
      if (createFleetRequest === undefined || createFleetRequest === null) {
        throw new Error("Missing the required parameter 'createFleetRequest' when calling createFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFleetResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageBuilder operation.
     * @callback module:api/DefaultApi~createImageBuilderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateImageBuilderResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an image builder. An image builder is a virtual machine that is used to create an image.</p> <p>The initial state of the builder is <code>PENDING</code>. When it is ready, the state is <code>RUNNING</code>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateImageBuilderRequest} createImageBuilderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createImageBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateImageBuilderResult}
     */
    createImageBuilder(xAmzTarget, createImageBuilderRequest, opts, callback) {
      opts = opts || {};
      let postBody = createImageBuilderRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createImageBuilder");
      }
      // verify the required parameter 'createImageBuilderRequest' is set
      if (createImageBuilderRequest === undefined || createImageBuilderRequest === null) {
        throw new Error("Missing the required parameter 'createImageBuilderRequest' when calling createImageBuilder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateImageBuilderResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateImageBuilder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageBuilderStreamingURL operation.
     * @callback module:api/DefaultApi~createImageBuilderStreamingURLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateImageBuilderStreamingURLResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a URL to start an image builder streaming session.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateImageBuilderStreamingURLRequest} createImageBuilderStreamingURLRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createImageBuilderStreamingURLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateImageBuilderStreamingURLResult}
     */
    createImageBuilderStreamingURL(xAmzTarget, createImageBuilderStreamingURLRequest, opts, callback) {
      opts = opts || {};
      let postBody = createImageBuilderStreamingURLRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createImageBuilderStreamingURL");
      }
      // verify the required parameter 'createImageBuilderStreamingURLRequest' is set
      if (createImageBuilderStreamingURLRequest === undefined || createImageBuilderStreamingURLRequest === null) {
        throw new Error("Missing the required parameter 'createImageBuilderStreamingURLRequest' when calling createImageBuilderStreamingURL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateImageBuilderStreamingURLResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateImageBuilderStreamingURL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStack operation.
     * @callback module:api/DefaultApi~createStackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStackResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a stack to start streaming applications to users. A stack consists of an associated fleet, user access policies, and storage configurations. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateStackRequest} createStackRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStackResult}
     */
    createStack(xAmzTarget, createStackRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStackRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createStack");
      }
      // verify the required parameter 'createStackRequest' is set
      if (createStackRequest === undefined || createStackRequest === null) {
        throw new Error("Missing the required parameter 'createStackRequest' when calling createStack");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStackResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateStack', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStreamingURL operation.
     * @callback module:api/DefaultApi~createStreamingURLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStreamingURLResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a temporary URL to start an AppStream 2.0 streaming session for the specified user. A streaming URL enables application streaming to be tested without user setup. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateStreamingURLRequest} createStreamingURLRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createStreamingURLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStreamingURLResult}
     */
    createStreamingURL(xAmzTarget, createStreamingURLRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStreamingURLRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createStreamingURL");
      }
      // verify the required parameter 'createStreamingURLRequest' is set
      if (createStreamingURLRequest === undefined || createStreamingURLRequest === null) {
        throw new Error("Missing the required parameter 'createStreamingURLRequest' when calling createStreamingURL");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStreamingURLResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateStreamingURL', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUpdatedImage operation.
     * @callback module:api/DefaultApi~createUpdatedImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUpdatedImageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new image with the latest Windows operating system updates, driver updates, and AppStream 2.0 agent software.</p> <p>For more information, see the \"Update an Image by Using Managed AppStream 2.0 Image Updates\" section in <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/administer-images.html\">Administer Your AppStream 2.0 Images</a>, in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateUpdatedImageRequest} createUpdatedImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUpdatedImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUpdatedImageResult}
     */
    createUpdatedImage(xAmzTarget, createUpdatedImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUpdatedImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createUpdatedImage");
      }
      // verify the required parameter 'createUpdatedImageRequest' is set
      if (createUpdatedImageRequest === undefined || createUpdatedImageRequest === null) {
        throw new Error("Missing the required parameter 'createUpdatedImageRequest' when calling createUpdatedImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUpdatedImageResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateUpdatedImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUsageReportSubscription operation.
     * @callback module:api/DefaultApi~createUsageReportSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateUsageReportSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a usage report subscription. Usage reports are generated daily.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUsageReportSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateUsageReportSubscriptionResult}
     */
    createUsageReportSubscription(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createUsageReportSubscription");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUsageReportSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateUsageReportSubscriptionResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateUsageReportSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/DefaultApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new user in the user pool.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateUserRequest} createUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createUser(xAmzTarget, createUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUserRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createUser");
      }
      // verify the required parameter 'createUserRequest' is set
      if (createUserRequest === undefined || createUserRequest === null) {
        throw new Error("Missing the required parameter 'createUserRequest' when calling createUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.CreateUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppBlock operation.
     * @callback module:api/DefaultApi~deleteAppBlockCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an app block.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAppBlockRequest} deleteAppBlockRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAppBlock(xAmzTarget, deleteAppBlockRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAppBlockRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAppBlock");
      }
      // verify the required parameter 'deleteAppBlockRequest' is set
      if (deleteAppBlockRequest === undefined || deleteAppBlockRequest === null) {
        throw new Error("Missing the required parameter 'deleteAppBlockRequest' when calling deleteAppBlock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DeleteAppBlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppBlockBuilder operation.
     * @callback module:api/DefaultApi~deleteAppBlockBuilderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an app block builder.</p> <p>An app block builder can only be deleted when it has no association with an app block.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAppBlockBuilderRequest} deleteAppBlockBuilderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppBlockBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAppBlockBuilder(xAmzTarget, deleteAppBlockBuilderRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAppBlockBuilderRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAppBlockBuilder");
      }
      // verify the required parameter 'deleteAppBlockBuilderRequest' is set
      if (deleteAppBlockBuilderRequest === undefined || deleteAppBlockBuilderRequest === null) {
        throw new Error("Missing the required parameter 'deleteAppBlockBuilderRequest' when calling deleteAppBlockBuilder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DeleteAppBlockBuilder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplication operation.
     * @callback module:api/DefaultApi~deleteApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteApplicationRequest} deleteApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteApplication(xAmzTarget, deleteApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteApplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteApplication");
      }
      // verify the required parameter 'deleteApplicationRequest' is set
      if (deleteApplicationRequest === undefined || deleteApplicationRequest === null) {
        throw new Error("Missing the required parameter 'deleteApplicationRequest' when calling deleteApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DeleteApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDirectoryConfig operation.
     * @callback module:api/DefaultApi~deleteDirectoryConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Directory Config object from AppStream 2.0. This object includes the information required to join streaming instances to an Active Directory domain.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDirectoryConfigRequest} deleteDirectoryConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDirectoryConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteDirectoryConfig(xAmzTarget, deleteDirectoryConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDirectoryConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDirectoryConfig");
      }
      // verify the required parameter 'deleteDirectoryConfigRequest' is set
      if (deleteDirectoryConfigRequest === undefined || deleteDirectoryConfigRequest === null) {
        throw new Error("Missing the required parameter 'deleteDirectoryConfigRequest' when calling deleteDirectoryConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DeleteDirectoryConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntitlement operation.
     * @callback module:api/DefaultApi~deleteEntitlementCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified entitlement.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteEntitlementRequest} deleteEntitlementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEntitlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteEntitlement(xAmzTarget, deleteEntitlementRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteEntitlementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteEntitlement");
      }
      // verify the required parameter 'deleteEntitlementRequest' is set
      if (deleteEntitlementRequest === undefined || deleteEntitlementRequest === null) {
        throw new Error("Missing the required parameter 'deleteEntitlementRequest' when calling deleteEntitlement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DeleteEntitlement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFleet operation.
     * @callback module:api/DefaultApi~deleteFleetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified fleet.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteFleetRequest} deleteFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteFleet(xAmzTarget, deleteFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteFleet");
      }
      // verify the required parameter 'deleteFleetRequest' is set
      if (deleteFleetRequest === undefined || deleteFleetRequest === null) {
        throw new Error("Missing the required parameter 'deleteFleetRequest' when calling deleteFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DeleteFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImage operation.
     * @callback module:api/DefaultApi~deleteImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteImageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified image. You cannot delete an image when it is in use. After you delete an image, you cannot provision new capacity using the image.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteImageRequest} deleteImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteImageResult}
     */
    deleteImage(xAmzTarget, deleteImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteImage");
      }
      // verify the required parameter 'deleteImageRequest' is set
      if (deleteImageRequest === undefined || deleteImageRequest === null) {
        throw new Error("Missing the required parameter 'deleteImageRequest' when calling deleteImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteImageResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DeleteImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageBuilder operation.
     * @callback module:api/DefaultApi~deleteImageBuilderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteImageBuilderResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified image builder and releases the capacity.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteImageBuilderRequest} deleteImageBuilderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteImageBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteImageBuilderResult}
     */
    deleteImageBuilder(xAmzTarget, deleteImageBuilderRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteImageBuilderRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteImageBuilder");
      }
      // verify the required parameter 'deleteImageBuilderRequest' is set
      if (deleteImageBuilderRequest === undefined || deleteImageBuilderRequest === null) {
        throw new Error("Missing the required parameter 'deleteImageBuilderRequest' when calling deleteImageBuilder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteImageBuilderResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DeleteImageBuilder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImagePermissions operation.
     * @callback module:api/DefaultApi~deleteImagePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes permissions for the specified private image. After you delete permissions for an image, AWS accounts to which you previously granted these permissions can no longer use the image.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteImagePermissionsRequest} deleteImagePermissionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteImagePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteImagePermissions(xAmzTarget, deleteImagePermissionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteImagePermissionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteImagePermissions");
      }
      // verify the required parameter 'deleteImagePermissionsRequest' is set
      if (deleteImagePermissionsRequest === undefined || deleteImagePermissionsRequest === null) {
        throw new Error("Missing the required parameter 'deleteImagePermissionsRequest' when calling deleteImagePermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DeleteImagePermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStack operation.
     * @callback module:api/DefaultApi~deleteStackCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified stack. After the stack is deleted, the application streaming environment provided by the stack is no longer available to users. Also, any reservations made for application streaming sessions for the stack are released.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteStackRequest} deleteStackRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteStack(xAmzTarget, deleteStackRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteStackRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteStack");
      }
      // verify the required parameter 'deleteStackRequest' is set
      if (deleteStackRequest === undefined || deleteStackRequest === null) {
        throw new Error("Missing the required parameter 'deleteStackRequest' when calling deleteStack");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DeleteStack', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsageReportSubscription operation.
     * @callback module:api/DefaultApi~deleteUsageReportSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables usage report generation.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUsageReportSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteUsageReportSubscription(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteUsageReportSubscription");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteUsageReportSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DeleteUsageReportSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/DefaultApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user from the user pool.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteUserRequest} deleteUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteUser(xAmzTarget, deleteUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteUserRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteUser");
      }
      // verify the required parameter 'deleteUserRequest' is set
      if (deleteUserRequest === undefined || deleteUserRequest === null) {
        throw new Error("Missing the required parameter 'deleteUserRequest' when calling deleteUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DeleteUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAppBlockBuilderAppBlockAssociations operation.
     * @callback module:api/DefaultApi~describeAppBlockBuilderAppBlockAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAppBlockBuilderAppBlockAssociationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more app block builder associations.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAppBlockBuilderAppBlockAssociationsRequest} describeAppBlockBuilderAppBlockAssociationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeAppBlockBuilderAppBlockAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAppBlockBuilderAppBlockAssociationsResult}
     */
    describeAppBlockBuilderAppBlockAssociations(xAmzTarget, describeAppBlockBuilderAppBlockAssociationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAppBlockBuilderAppBlockAssociationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAppBlockBuilderAppBlockAssociations");
      }
      // verify the required parameter 'describeAppBlockBuilderAppBlockAssociationsRequest' is set
      if (describeAppBlockBuilderAppBlockAssociationsRequest === undefined || describeAppBlockBuilderAppBlockAssociationsRequest === null) {
        throw new Error("Missing the required parameter 'describeAppBlockBuilderAppBlockAssociationsRequest' when calling describeAppBlockBuilderAppBlockAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAppBlockBuilderAppBlockAssociationsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeAppBlockBuilderAppBlockAssociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAppBlockBuilders operation.
     * @callback module:api/DefaultApi~describeAppBlockBuildersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAppBlockBuildersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more app block builders.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAppBlockBuildersRequest} describeAppBlockBuildersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeAppBlockBuildersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAppBlockBuildersResult}
     */
    describeAppBlockBuilders(xAmzTarget, describeAppBlockBuildersRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAppBlockBuildersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAppBlockBuilders");
      }
      // verify the required parameter 'describeAppBlockBuildersRequest' is set
      if (describeAppBlockBuildersRequest === undefined || describeAppBlockBuildersRequest === null) {
        throw new Error("Missing the required parameter 'describeAppBlockBuildersRequest' when calling describeAppBlockBuilders");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAppBlockBuildersResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeAppBlockBuilders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAppBlocks operation.
     * @callback module:api/DefaultApi~describeAppBlocksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAppBlocksResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more app blocks.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAppBlocksRequest} describeAppBlocksRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAppBlocksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAppBlocksResult}
     */
    describeAppBlocks(xAmzTarget, describeAppBlocksRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAppBlocksRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAppBlocks");
      }
      // verify the required parameter 'describeAppBlocksRequest' is set
      if (describeAppBlocksRequest === undefined || describeAppBlocksRequest === null) {
        throw new Error("Missing the required parameter 'describeAppBlocksRequest' when calling describeAppBlocks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAppBlocksResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeAppBlocks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeApplicationFleetAssociations operation.
     * @callback module:api/DefaultApi~describeApplicationFleetAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeApplicationFleetAssociationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more application fleet associations. Either ApplicationArn or FleetName must be specified.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeApplicationFleetAssociationsRequest} describeApplicationFleetAssociationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeApplicationFleetAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeApplicationFleetAssociationsResult}
     */
    describeApplicationFleetAssociations(xAmzTarget, describeApplicationFleetAssociationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeApplicationFleetAssociationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeApplicationFleetAssociations");
      }
      // verify the required parameter 'describeApplicationFleetAssociationsRequest' is set
      if (describeApplicationFleetAssociationsRequest === undefined || describeApplicationFleetAssociationsRequest === null) {
        throw new Error("Missing the required parameter 'describeApplicationFleetAssociationsRequest' when calling describeApplicationFleetAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeApplicationFleetAssociationsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeApplicationFleetAssociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeApplications operation.
     * @callback module:api/DefaultApi~describeApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeApplicationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more applications.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeApplicationsRequest} describeApplicationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeApplicationsResult}
     */
    describeApplications(xAmzTarget, describeApplicationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeApplicationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeApplications");
      }
      // verify the required parameter 'describeApplicationsRequest' is set
      if (describeApplicationsRequest === undefined || describeApplicationsRequest === null) {
        throw new Error("Missing the required parameter 'describeApplicationsRequest' when calling describeApplications");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeApplicationsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeApplications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDirectoryConfigs operation.
     * @callback module:api/DefaultApi~describeDirectoryConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDirectoryConfigsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves a list that describes one or more specified Directory Config objects for AppStream 2.0, if the names for these objects are provided. Otherwise, all Directory Config objects in the account are described. These objects include the configuration information required to join fleets and image builders to Microsoft Active Directory domains. </p> <p>Although the response syntax in this topic includes the account password, this password is not returned in the actual response.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDirectoryConfigsRequest} describeDirectoryConfigsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDirectoryConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDirectoryConfigsResult}
     */
    describeDirectoryConfigs(xAmzTarget, describeDirectoryConfigsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDirectoryConfigsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDirectoryConfigs");
      }
      // verify the required parameter 'describeDirectoryConfigsRequest' is set
      if (describeDirectoryConfigsRequest === undefined || describeDirectoryConfigsRequest === null) {
        throw new Error("Missing the required parameter 'describeDirectoryConfigsRequest' when calling describeDirectoryConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDirectoryConfigsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeDirectoryConfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeEntitlements operation.
     * @callback module:api/DefaultApi~describeEntitlementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEntitlementsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one of more entitlements.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeEntitlementsRequest} describeEntitlementsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeEntitlementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEntitlementsResult}
     */
    describeEntitlements(xAmzTarget, describeEntitlementsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeEntitlementsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeEntitlements");
      }
      // verify the required parameter 'describeEntitlementsRequest' is set
      if (describeEntitlementsRequest === undefined || describeEntitlementsRequest === null) {
        throw new Error("Missing the required parameter 'describeEntitlementsRequest' when calling describeEntitlements");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeEntitlementsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeEntitlements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFleets operation.
     * @callback module:api/DefaultApi~describeFleetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFleetsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more specified fleets, if the fleet names are provided. Otherwise, all fleets in the account are described.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFleetsRequest} describeFleetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFleetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFleetsResult}
     */
    describeFleets(xAmzTarget, describeFleetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFleetsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFleets");
      }
      // verify the required parameter 'describeFleetsRequest' is set
      if (describeFleetsRequest === undefined || describeFleetsRequest === null) {
        throw new Error("Missing the required parameter 'describeFleetsRequest' when calling describeFleets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFleetsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeFleets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeImageBuilders operation.
     * @callback module:api/DefaultApi~describeImageBuildersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeImageBuildersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more specified image builders, if the image builder names are provided. Otherwise, all image builders in the account are described.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeImageBuildersRequest} describeImageBuildersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeImageBuildersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeImageBuildersResult}
     */
    describeImageBuilders(xAmzTarget, describeImageBuildersRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeImageBuildersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeImageBuilders");
      }
      // verify the required parameter 'describeImageBuildersRequest' is set
      if (describeImageBuildersRequest === undefined || describeImageBuildersRequest === null) {
        throw new Error("Missing the required parameter 'describeImageBuildersRequest' when calling describeImageBuilders");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeImageBuildersResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeImageBuilders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeImagePermissions operation.
     * @callback module:api/DefaultApi~describeImagePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeImagePermissionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes the permissions for shared AWS account IDs on a private image that you own. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeImagePermissionsRequest} describeImagePermissionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeImagePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeImagePermissionsResult}
     */
    describeImagePermissions(xAmzTarget, describeImagePermissionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeImagePermissionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeImagePermissions");
      }
      // verify the required parameter 'describeImagePermissionsRequest' is set
      if (describeImagePermissionsRequest === undefined || describeImagePermissionsRequest === null) {
        throw new Error("Missing the required parameter 'describeImagePermissionsRequest' when calling describeImagePermissions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeImagePermissionsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeImagePermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeImages operation.
     * @callback module:api/DefaultApi~describeImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeImagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more specified images, if the image names or image ARNs are provided. Otherwise, all images in the account are described.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeImagesRequest} describeImagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeImagesResult}
     */
    describeImages(xAmzTarget, describeImagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeImagesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeImages");
      }
      // verify the required parameter 'describeImagesRequest' is set
      if (describeImagesRequest === undefined || describeImagesRequest === null) {
        throw new Error("Missing the required parameter 'describeImagesRequest' when calling describeImages");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeImagesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeImages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSessions operation.
     * @callback module:api/DefaultApi~describeSessionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSessionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes the streaming sessions for a specified stack and fleet. If a UserId is provided for the stack and fleet, only streaming sessions for that user are described. If an authentication type is not provided, the default is to authenticate users using a streaming URL.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeSessionsRequest} describeSessionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSessionsResult}
     */
    describeSessions(xAmzTarget, describeSessionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSessionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeSessions");
      }
      // verify the required parameter 'describeSessionsRequest' is set
      if (describeSessionsRequest === undefined || describeSessionsRequest === null) {
        throw new Error("Missing the required parameter 'describeSessionsRequest' when calling describeSessions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSessionsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeSessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeStacks operation.
     * @callback module:api/DefaultApi~describeStacksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeStacksResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more specified stacks, if the stack names are provided. Otherwise, all stacks in the account are described.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeStacksRequest} describeStacksRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeStacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeStacksResult}
     */
    describeStacks(xAmzTarget, describeStacksRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeStacksRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeStacks");
      }
      // verify the required parameter 'describeStacksRequest' is set
      if (describeStacksRequest === undefined || describeStacksRequest === null) {
        throw new Error("Missing the required parameter 'describeStacksRequest' when calling describeStacks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeStacksResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeStacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeUsageReportSubscriptions operation.
     * @callback module:api/DefaultApi~describeUsageReportSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeUsageReportSubscriptionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more usage report subscriptions.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeUsageReportSubscriptionsRequest} describeUsageReportSubscriptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeUsageReportSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeUsageReportSubscriptionsResult}
     */
    describeUsageReportSubscriptions(xAmzTarget, describeUsageReportSubscriptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeUsageReportSubscriptionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeUsageReportSubscriptions");
      }
      // verify the required parameter 'describeUsageReportSubscriptionsRequest' is set
      if (describeUsageReportSubscriptionsRequest === undefined || describeUsageReportSubscriptionsRequest === null) {
        throw new Error("Missing the required parameter 'describeUsageReportSubscriptionsRequest' when calling describeUsageReportSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeUsageReportSubscriptionsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeUsageReportSubscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeUserStackAssociations operation.
     * @callback module:api/DefaultApi~describeUserStackAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeUserStackAssociationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves a list that describes the UserStackAssociation objects. You must specify either or both of the following:</p> <ul> <li> <p>The stack name</p> </li> <li> <p>The user name (email address of the user associated with the stack) and the authentication type for the user</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeUserStackAssociationsRequest} describeUserStackAssociationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeUserStackAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeUserStackAssociationsResult}
     */
    describeUserStackAssociations(xAmzTarget, describeUserStackAssociationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeUserStackAssociationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeUserStackAssociations");
      }
      // verify the required parameter 'describeUserStackAssociationsRequest' is set
      if (describeUserStackAssociationsRequest === undefined || describeUserStackAssociationsRequest === null) {
        throw new Error("Missing the required parameter 'describeUserStackAssociationsRequest' when calling describeUserStackAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeUserStackAssociationsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeUserStackAssociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeUsers operation.
     * @callback module:api/DefaultApi~describeUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeUsersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list that describes one or more specified users in the user pool.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeUsersRequest} describeUsersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeUsersResult}
     */
    describeUsers(xAmzTarget, describeUsersRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeUsersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeUsers");
      }
      // verify the required parameter 'describeUsersRequest' is set
      if (describeUsersRequest === undefined || describeUsersRequest === null) {
        throw new Error("Missing the required parameter 'describeUsersRequest' when calling describeUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeUsersResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DescribeUsers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableUser operation.
     * @callback module:api/DefaultApi~disableUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the specified user in the user pool. Users can't sign in to AppStream 2.0 until they are re-enabled. This action does not delete the user. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisableUserRequest} disableUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disableUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disableUser(xAmzTarget, disableUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = disableUserRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disableUser");
      }
      // verify the required parameter 'disableUserRequest' is set
      if (disableUserRequest === undefined || disableUserRequest === null) {
        throw new Error("Missing the required parameter 'disableUserRequest' when calling disableUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DisableUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateAppBlockBuilderAppBlock operation.
     * @callback module:api/DefaultApi~disassociateAppBlockBuilderAppBlockCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates a specified app block builder from a specified app block.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateAppBlockBuilderAppBlockRequest} disassociateAppBlockBuilderAppBlockRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateAppBlockBuilderAppBlockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateAppBlockBuilderAppBlock(xAmzTarget, disassociateAppBlockBuilderAppBlockRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateAppBlockBuilderAppBlockRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateAppBlockBuilderAppBlock");
      }
      // verify the required parameter 'disassociateAppBlockBuilderAppBlockRequest' is set
      if (disassociateAppBlockBuilderAppBlockRequest === undefined || disassociateAppBlockBuilderAppBlockRequest === null) {
        throw new Error("Missing the required parameter 'disassociateAppBlockBuilderAppBlockRequest' when calling disassociateAppBlockBuilderAppBlock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DisassociateAppBlockBuilderAppBlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateApplicationFleet operation.
     * @callback module:api/DefaultApi~disassociateApplicationFleetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates the specified application from the fleet.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateApplicationFleetRequest} disassociateApplicationFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateApplicationFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateApplicationFleet(xAmzTarget, disassociateApplicationFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateApplicationFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateApplicationFleet");
      }
      // verify the required parameter 'disassociateApplicationFleetRequest' is set
      if (disassociateApplicationFleetRequest === undefined || disassociateApplicationFleetRequest === null) {
        throw new Error("Missing the required parameter 'disassociateApplicationFleetRequest' when calling disassociateApplicationFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DisassociateApplicationFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateApplicationFromEntitlement operation.
     * @callback module:api/DefaultApi~disassociateApplicationFromEntitlementCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified application from the specified entitlement.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateApplicationFromEntitlementRequest} disassociateApplicationFromEntitlementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateApplicationFromEntitlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateApplicationFromEntitlement(xAmzTarget, disassociateApplicationFromEntitlementRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateApplicationFromEntitlementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateApplicationFromEntitlement");
      }
      // verify the required parameter 'disassociateApplicationFromEntitlementRequest' is set
      if (disassociateApplicationFromEntitlementRequest === undefined || disassociateApplicationFromEntitlementRequest === null) {
        throw new Error("Missing the required parameter 'disassociateApplicationFromEntitlementRequest' when calling disassociateApplicationFromEntitlement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DisassociateApplicationFromEntitlement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateFleet operation.
     * @callback module:api/DefaultApi~disassociateFleetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates the specified fleet from the specified stack.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateFleetRequest} disassociateFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateFleet(xAmzTarget, disassociateFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateFleet");
      }
      // verify the required parameter 'disassociateFleetRequest' is set
      if (disassociateFleetRequest === undefined || disassociateFleetRequest === null) {
        throw new Error("Missing the required parameter 'disassociateFleetRequest' when calling disassociateFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.DisassociateFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableUser operation.
     * @callback module:api/DefaultApi~enableUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables a user in the user pool. After being enabled, users can sign in to AppStream 2.0 and open applications from the stacks to which they are assigned.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/EnableUserRequest} enableUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~enableUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    enableUser(xAmzTarget, enableUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = enableUserRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling enableUser");
      }
      // verify the required parameter 'enableUserRequest' is set
      if (enableUserRequest === undefined || enableUserRequest === null) {
        throw new Error("Missing the required parameter 'enableUserRequest' when calling enableUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.EnableUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expireSession operation.
     * @callback module:api/DefaultApi~expireSessionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Immediately stops the specified streaming session.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ExpireSessionRequest} expireSessionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~expireSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    expireSession(xAmzTarget, expireSessionRequest, opts, callback) {
      opts = opts || {};
      let postBody = expireSessionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling expireSession");
      }
      // verify the required parameter 'expireSessionRequest' is set
      if (expireSessionRequest === undefined || expireSessionRequest === null) {
        throw new Error("Missing the required parameter 'expireSessionRequest' when calling expireSession");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.ExpireSession', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssociatedFleets operation.
     * @callback module:api/DefaultApi~listAssociatedFleetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssociatedFleetsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the name of the fleet that is associated with the specified stack.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAssociatedFleetsRequest} listAssociatedFleetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listAssociatedFleetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssociatedFleetsResult}
     */
    listAssociatedFleets(xAmzTarget, listAssociatedFleetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAssociatedFleetsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAssociatedFleets");
      }
      // verify the required parameter 'listAssociatedFleetsRequest' is set
      if (listAssociatedFleetsRequest === undefined || listAssociatedFleetsRequest === null) {
        throw new Error("Missing the required parameter 'listAssociatedFleetsRequest' when calling listAssociatedFleets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAssociatedFleetsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.ListAssociatedFleets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssociatedStacks operation.
     * @callback module:api/DefaultApi~listAssociatedStacksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssociatedStacksResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the name of the stack with which the specified fleet is associated.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAssociatedStacksRequest} listAssociatedStacksRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listAssociatedStacksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssociatedStacksResult}
     */
    listAssociatedStacks(xAmzTarget, listAssociatedStacksRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAssociatedStacksRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAssociatedStacks");
      }
      // verify the required parameter 'listAssociatedStacksRequest' is set
      if (listAssociatedStacksRequest === undefined || listAssociatedStacksRequest === null) {
        throw new Error("Missing the required parameter 'listAssociatedStacksRequest' when calling listAssociatedStacks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAssociatedStacksResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.ListAssociatedStacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEntitledApplications operation.
     * @callback module:api/DefaultApi~listEntitledApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEntitledApplicationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of entitled applications.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListEntitledApplicationsRequest} listEntitledApplicationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listEntitledApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEntitledApplicationsResult}
     */
    listEntitledApplications(xAmzTarget, listEntitledApplicationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listEntitledApplicationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listEntitledApplications");
      }
      // verify the required parameter 'listEntitledApplicationsRequest' is set
      if (listEntitledApplicationsRequest === undefined || listEntitledApplicationsRequest === null) {
        throw new Error("Missing the required parameter 'listEntitledApplicationsRequest' when calling listEntitledApplications");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListEntitledApplicationsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.ListEntitledApplications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves a list of all tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startAppBlockBuilder operation.
     * @callback module:api/DefaultApi~startAppBlockBuilderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartAppBlockBuilderResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts an app block builder.</p> <p>An app block builder can only be started when it's associated with an app block.</p> <p>Starting an app block builder starts a new instance, which is equivalent to an elastic fleet instance with application builder assistance functionality.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartAppBlockBuilderRequest} startAppBlockBuilderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startAppBlockBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartAppBlockBuilderResult}
     */
    startAppBlockBuilder(xAmzTarget, startAppBlockBuilderRequest, opts, callback) {
      opts = opts || {};
      let postBody = startAppBlockBuilderRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startAppBlockBuilder");
      }
      // verify the required parameter 'startAppBlockBuilderRequest' is set
      if (startAppBlockBuilderRequest === undefined || startAppBlockBuilderRequest === null) {
        throw new Error("Missing the required parameter 'startAppBlockBuilderRequest' when calling startAppBlockBuilder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartAppBlockBuilderResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.StartAppBlockBuilder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startFleet operation.
     * @callback module:api/DefaultApi~startFleetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts the specified fleet.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartFleetRequest} startFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startFleet(xAmzTarget, startFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = startFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startFleet");
      }
      // verify the required parameter 'startFleetRequest' is set
      if (startFleetRequest === undefined || startFleetRequest === null) {
        throw new Error("Missing the required parameter 'startFleetRequest' when calling startFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.StartFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startImageBuilder operation.
     * @callback module:api/DefaultApi~startImageBuilderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartImageBuilderResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts the specified image builder.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartImageBuilderRequest} startImageBuilderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startImageBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartImageBuilderResult}
     */
    startImageBuilder(xAmzTarget, startImageBuilderRequest, opts, callback) {
      opts = opts || {};
      let postBody = startImageBuilderRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startImageBuilder");
      }
      // verify the required parameter 'startImageBuilderRequest' is set
      if (startImageBuilderRequest === undefined || startImageBuilderRequest === null) {
        throw new Error("Missing the required parameter 'startImageBuilderRequest' when calling startImageBuilder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartImageBuilderResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.StartImageBuilder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopAppBlockBuilder operation.
     * @callback module:api/DefaultApi~stopAppBlockBuilderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopAppBlockBuilderResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops an app block builder.</p> <p>Stopping an app block builder terminates the instance, and the instance state is not persisted.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopAppBlockBuilderRequest} stopAppBlockBuilderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopAppBlockBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopAppBlockBuilderResult}
     */
    stopAppBlockBuilder(xAmzTarget, stopAppBlockBuilderRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopAppBlockBuilderRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopAppBlockBuilder");
      }
      // verify the required parameter 'stopAppBlockBuilderRequest' is set
      if (stopAppBlockBuilderRequest === undefined || stopAppBlockBuilderRequest === null) {
        throw new Error("Missing the required parameter 'stopAppBlockBuilderRequest' when calling stopAppBlockBuilder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopAppBlockBuilderResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.StopAppBlockBuilder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopFleet operation.
     * @callback module:api/DefaultApi~stopFleetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops the specified fleet.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopFleetRequest} stopFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopFleet(xAmzTarget, stopFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopFleet");
      }
      // verify the required parameter 'stopFleetRequest' is set
      if (stopFleetRequest === undefined || stopFleetRequest === null) {
        throw new Error("Missing the required parameter 'stopFleetRequest' when calling stopFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.StopFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopImageBuilder operation.
     * @callback module:api/DefaultApi~stopImageBuilderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopImageBuilderResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops the specified image builder.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopImageBuilderRequest} stopImageBuilderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopImageBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopImageBuilderResult}
     */
    stopImageBuilder(xAmzTarget, stopImageBuilderRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopImageBuilderRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopImageBuilder");
      }
      // verify the required parameter 'stopImageBuilderRequest' is set
      if (stopImageBuilderRequest === undefined || stopImageBuilderRequest === null) {
        throw new Error("Missing the required parameter 'stopImageBuilderRequest' when calling stopImageBuilder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopImageBuilderResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.StopImageBuilder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds or overwrites one or more tags for the specified AppStream 2.0 resource. You can tag AppStream 2.0 image builders, images, fleets, and stacks.</p> <p>Each tag consists of a key and an optional value. If a resource already has a tag with the same key, this operation updates its value.</p> <p>To list the current tags for your resources, use <a>ListTagsForResource</a>. To disassociate tags from your resources, use <a>UntagResource</a>.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disassociates one or more specified tags from the specified AppStream 2.0 resource.</p> <p>To list the current tags for your resources, use <a>ListTagsForResource</a>.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/tagging-basic.html\">Tagging Your Resources</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppBlockBuilder operation.
     * @callback module:api/DefaultApi~updateAppBlockBuilderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAppBlockBuilderResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates an app block builder.</p> <p>If the app block builder is in the <code>STARTING</code> or <code>STOPPING</code> state, you can't update it. If the app block builder is in the <code>RUNNING</code> state, you can only update the DisplayName and Description. If the app block builder is in the <code>STOPPED</code> state, you can update any attribute except the Name.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateAppBlockBuilderRequest} updateAppBlockBuilderRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAppBlockBuilderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAppBlockBuilderResult}
     */
    updateAppBlockBuilder(xAmzTarget, updateAppBlockBuilderRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAppBlockBuilderRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateAppBlockBuilder");
      }
      // verify the required parameter 'updateAppBlockBuilderRequest' is set
      if (updateAppBlockBuilderRequest === undefined || updateAppBlockBuilderRequest === null) {
        throw new Error("Missing the required parameter 'updateAppBlockBuilderRequest' when calling updateAppBlockBuilder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAppBlockBuilderResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.UpdateAppBlockBuilder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplication operation.
     * @callback module:api/DefaultApi~updateApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApplicationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateApplicationRequest} updateApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApplicationResult}
     */
    updateApplication(xAmzTarget, updateApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateApplication");
      }
      // verify the required parameter 'updateApplicationRequest' is set
      if (updateApplicationRequest === undefined || updateApplicationRequest === null) {
        throw new Error("Missing the required parameter 'updateApplicationRequest' when calling updateApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApplicationResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.UpdateApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDirectoryConfig operation.
     * @callback module:api/DefaultApi~updateDirectoryConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDirectoryConfigResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDirectoryConfigRequest} updateDirectoryConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDirectoryConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDirectoryConfigResult}
     */
    updateDirectoryConfig(xAmzTarget, updateDirectoryConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDirectoryConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDirectoryConfig");
      }
      // verify the required parameter 'updateDirectoryConfigRequest' is set
      if (updateDirectoryConfigRequest === undefined || updateDirectoryConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateDirectoryConfigRequest' when calling updateDirectoryConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDirectoryConfigResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.UpdateDirectoryConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntitlement operation.
     * @callback module:api/DefaultApi~updateEntitlementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEntitlementResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified entitlement.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateEntitlementRequest} updateEntitlementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEntitlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEntitlementResult}
     */
    updateEntitlement(xAmzTarget, updateEntitlementRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEntitlementRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateEntitlement");
      }
      // verify the required parameter 'updateEntitlementRequest' is set
      if (updateEntitlementRequest === undefined || updateEntitlementRequest === null) {
        throw new Error("Missing the required parameter 'updateEntitlementRequest' when calling updateEntitlement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEntitlementResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.UpdateEntitlement', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFleet operation.
     * @callback module:api/DefaultApi~updateFleetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFleetResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the specified fleet.</p> <p>If the fleet is in the <code>STOPPED</code> state, you can update any attribute except the fleet name.</p> <p>If the fleet is in the <code>RUNNING</code> state, you can update the following based on the fleet type:</p> <ul> <li> <p>Always-On and On-Demand fleet types</p> <p>You can update the <code>DisplayName</code>, <code>ComputeCapacity</code>, <code>ImageARN</code>, <code>ImageName</code>, <code>IdleDisconnectTimeoutInSeconds</code>, and <code>DisconnectTimeoutInSeconds</code> attributes.</p> </li> <li> <p>Elastic fleet type</p> <p>You can update the <code>DisplayName</code>, <code>IdleDisconnectTimeoutInSeconds</code>, <code>DisconnectTimeoutInSeconds</code>, <code>MaxConcurrentSessions</code>, <code>SessionScriptS3Location</code> and <code>UsbDeviceFilterStrings</code> attributes.</p> </li> </ul> <p>If the fleet is in the <code>STARTING</code> or <code>STOPPED</code> state, you can't update it.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateFleetRequest} updateFleetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFleetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFleetResult}
     */
    updateFleet(xAmzTarget, updateFleetRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFleetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateFleet");
      }
      // verify the required parameter 'updateFleetRequest' is set
      if (updateFleetRequest === undefined || updateFleetRequest === null) {
        throw new Error("Missing the required parameter 'updateFleetRequest' when calling updateFleet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFleetResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.UpdateFleet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateImagePermissions operation.
     * @callback module:api/DefaultApi~updateImagePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds or updates permissions for the specified private image. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateImagePermissionsRequest} updateImagePermissionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateImagePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateImagePermissions(xAmzTarget, updateImagePermissionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateImagePermissionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateImagePermissions");
      }
      // verify the required parameter 'updateImagePermissionsRequest' is set
      if (updateImagePermissionsRequest === undefined || updateImagePermissionsRequest === null) {
        throw new Error("Missing the required parameter 'updateImagePermissionsRequest' when calling updateImagePermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.UpdateImagePermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStack operation.
     * @callback module:api/DefaultApi~updateStackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStackResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified fields for the specified stack.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateStackRequest} updateStackRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateStackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStackResult}
     */
    updateStack(xAmzTarget, updateStackRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateStackRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateStack");
      }
      // verify the required parameter 'updateStackRequest' is set
      if (updateStackRequest === undefined || updateStackRequest === null) {
        throw new Error("Missing the required parameter 'updateStackRequest' when calling updateStack");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateStackResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=PhotonAdminProxyService.UpdateStack', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
