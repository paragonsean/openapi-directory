/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserStackAssociationError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserStackAssociationError::OAIUserStackAssociationError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserStackAssociationError::OAIUserStackAssociationError() {
    this->initializeModel();
}

OAIUserStackAssociationError::~OAIUserStackAssociationError() {}

void OAIUserStackAssociationError::initializeModel() {

    m_user_stack_association_isSet = false;
    m_user_stack_association_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;
}

void OAIUserStackAssociationError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserStackAssociationError::fromJsonObject(QJsonObject json) {

    m_user_stack_association_isValid = ::OpenAPI::fromJsonValue(m_user_stack_association, json[QString("UserStackAssociation")]);
    m_user_stack_association_isSet = !json[QString("UserStackAssociation")].isNull() && m_user_stack_association_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;
}

QString OAIUserStackAssociationError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserStackAssociationError::asJsonObject() const {
    QJsonObject obj;
    if (m_user_stack_association.isSet()) {
        obj.insert(QString("UserStackAssociation"), ::OpenAPI::toJsonValue(m_user_stack_association));
    }
    if (m_error_code.isSet()) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    return obj;
}

OAIUserStackAssociationError_UserStackAssociation OAIUserStackAssociationError::getUserStackAssociation() const {
    return m_user_stack_association;
}
void OAIUserStackAssociationError::setUserStackAssociation(const OAIUserStackAssociationError_UserStackAssociation &user_stack_association) {
    m_user_stack_association = user_stack_association;
    m_user_stack_association_isSet = true;
}

bool OAIUserStackAssociationError::is_user_stack_association_Set() const{
    return m_user_stack_association_isSet;
}

bool OAIUserStackAssociationError::is_user_stack_association_Valid() const{
    return m_user_stack_association_isValid;
}

OAIUserStackAssociationErrorCode OAIUserStackAssociationError::getErrorCode() const {
    return m_error_code;
}
void OAIUserStackAssociationError::setErrorCode(const OAIUserStackAssociationErrorCode &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIUserStackAssociationError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIUserStackAssociationError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIUserStackAssociationError::getErrorMessage() const {
    return m_error_message;
}
void OAIUserStackAssociationError::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIUserStackAssociationError::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIUserStackAssociationError::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAIUserStackAssociationError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_stack_association.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserStackAssociationError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
