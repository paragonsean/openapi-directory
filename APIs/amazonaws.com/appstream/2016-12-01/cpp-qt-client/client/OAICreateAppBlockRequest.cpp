/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAppBlockRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAppBlockRequest::OAICreateAppBlockRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAppBlockRequest::OAICreateAppBlockRequest() {
    this->initializeModel();
}

OAICreateAppBlockRequest::~OAICreateAppBlockRequest() {}

void OAICreateAppBlockRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_source_s3_location_isSet = false;
    m_source_s3_location_isValid = false;

    m_setup_script_details_isSet = false;
    m_setup_script_details_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_post_setup_script_details_isSet = false;
    m_post_setup_script_details_isValid = false;

    m_packaging_type_isSet = false;
    m_packaging_type_isValid = false;
}

void OAICreateAppBlockRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAppBlockRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_source_s3_location_isValid = ::OpenAPI::fromJsonValue(m_source_s3_location, json[QString("SourceS3Location")]);
    m_source_s3_location_isSet = !json[QString("SourceS3Location")].isNull() && m_source_s3_location_isValid;

    m_setup_script_details_isValid = ::OpenAPI::fromJsonValue(m_setup_script_details, json[QString("SetupScriptDetails")]);
    m_setup_script_details_isSet = !json[QString("SetupScriptDetails")].isNull() && m_setup_script_details_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_post_setup_script_details_isValid = ::OpenAPI::fromJsonValue(m_post_setup_script_details, json[QString("PostSetupScriptDetails")]);
    m_post_setup_script_details_isSet = !json[QString("PostSetupScriptDetails")].isNull() && m_post_setup_script_details_isValid;

    m_packaging_type_isValid = ::OpenAPI::fromJsonValue(m_packaging_type, json[QString("PackagingType")]);
    m_packaging_type_isSet = !json[QString("PackagingType")].isNull() && m_packaging_type_isValid;
}

QString OAICreateAppBlockRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAppBlockRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_source_s3_location.isSet()) {
        obj.insert(QString("SourceS3Location"), ::OpenAPI::toJsonValue(m_source_s3_location));
    }
    if (m_setup_script_details.isSet()) {
        obj.insert(QString("SetupScriptDetails"), ::OpenAPI::toJsonValue(m_setup_script_details));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_post_setup_script_details.isSet()) {
        obj.insert(QString("PostSetupScriptDetails"), ::OpenAPI::toJsonValue(m_post_setup_script_details));
    }
    if (m_packaging_type.isSet()) {
        obj.insert(QString("PackagingType"), ::OpenAPI::toJsonValue(m_packaging_type));
    }
    return obj;
}

QString OAICreateAppBlockRequest::getName() const {
    return m_name;
}
void OAICreateAppBlockRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAppBlockRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAppBlockRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateAppBlockRequest::getDescription() const {
    return m_description;
}
void OAICreateAppBlockRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAppBlockRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAppBlockRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateAppBlockRequest::getDisplayName() const {
    return m_display_name;
}
void OAICreateAppBlockRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICreateAppBlockRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICreateAppBlockRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAICreateAppBlockRequest_SourceS3Location OAICreateAppBlockRequest::getSourceS3Location() const {
    return m_source_s3_location;
}
void OAICreateAppBlockRequest::setSourceS3Location(const OAICreateAppBlockRequest_SourceS3Location &source_s3_location) {
    m_source_s3_location = source_s3_location;
    m_source_s3_location_isSet = true;
}

bool OAICreateAppBlockRequest::is_source_s3_location_Set() const{
    return m_source_s3_location_isSet;
}

bool OAICreateAppBlockRequest::is_source_s3_location_Valid() const{
    return m_source_s3_location_isValid;
}

OAICreateAppBlockRequest_SetupScriptDetails OAICreateAppBlockRequest::getSetupScriptDetails() const {
    return m_setup_script_details;
}
void OAICreateAppBlockRequest::setSetupScriptDetails(const OAICreateAppBlockRequest_SetupScriptDetails &setup_script_details) {
    m_setup_script_details = setup_script_details;
    m_setup_script_details_isSet = true;
}

bool OAICreateAppBlockRequest::is_setup_script_details_Set() const{
    return m_setup_script_details_isSet;
}

bool OAICreateAppBlockRequest::is_setup_script_details_Valid() const{
    return m_setup_script_details_isValid;
}

QMap OAICreateAppBlockRequest::getTags() const {
    return m_tags;
}
void OAICreateAppBlockRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAppBlockRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAppBlockRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateAppBlockRequest_PostSetupScriptDetails OAICreateAppBlockRequest::getPostSetupScriptDetails() const {
    return m_post_setup_script_details;
}
void OAICreateAppBlockRequest::setPostSetupScriptDetails(const OAICreateAppBlockRequest_PostSetupScriptDetails &post_setup_script_details) {
    m_post_setup_script_details = post_setup_script_details;
    m_post_setup_script_details_isSet = true;
}

bool OAICreateAppBlockRequest::is_post_setup_script_details_Set() const{
    return m_post_setup_script_details_isSet;
}

bool OAICreateAppBlockRequest::is_post_setup_script_details_Valid() const{
    return m_post_setup_script_details_isValid;
}

OAIPackagingType OAICreateAppBlockRequest::getPackagingType() const {
    return m_packaging_type;
}
void OAICreateAppBlockRequest::setPackagingType(const OAIPackagingType &packaging_type) {
    m_packaging_type = packaging_type;
    m_packaging_type_isSet = true;
}

bool OAICreateAppBlockRequest::is_packaging_type_Set() const{
    return m_packaging_type_isSet;
}

bool OAICreateAppBlockRequest::is_packaging_type_Valid() const{
    return m_packaging_type_isValid;
}

bool OAICreateAppBlockRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_script_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_setup_script_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_packaging_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAppBlockRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_source_s3_location_isValid && true;
}

} // namespace OpenAPI
