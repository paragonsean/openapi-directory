/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_fleet_name_isSet = false;
    m_fleet_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_connection_state_isSet = false;
    m_connection_state_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_max_expiration_time_isSet = false;
    m_max_expiration_time_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_network_access_configuration_isSet = false;
    m_network_access_configuration_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_fleet_name_isValid = ::OpenAPI::fromJsonValue(m_fleet_name, json[QString("FleetName")]);
    m_fleet_name_isSet = !json[QString("FleetName")].isNull() && m_fleet_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_connection_state_isValid = ::OpenAPI::fromJsonValue(m_connection_state, json[QString("ConnectionState")]);
    m_connection_state_isSet = !json[QString("ConnectionState")].isNull() && m_connection_state_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_max_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_max_expiration_time, json[QString("MaxExpirationTime")]);
    m_max_expiration_time_isSet = !json[QString("MaxExpirationTime")].isNull() && m_max_expiration_time_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("AuthenticationType")]);
    m_authentication_type_isSet = !json[QString("AuthenticationType")].isNull() && m_authentication_type_isValid;

    m_network_access_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_access_configuration, json[QString("NetworkAccessConfiguration")]);
    m_network_access_configuration_isSet = !json[QString("NetworkAccessConfiguration")].isNull() && m_network_access_configuration_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_fleet_name_isSet) {
        obj.insert(QString("FleetName"), ::OpenAPI::toJsonValue(m_fleet_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_connection_state.isSet()) {
        obj.insert(QString("ConnectionState"), ::OpenAPI::toJsonValue(m_connection_state));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_max_expiration_time_isSet) {
        obj.insert(QString("MaxExpirationTime"), ::OpenAPI::toJsonValue(m_max_expiration_time));
    }
    if (m_authentication_type.isSet()) {
        obj.insert(QString("AuthenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_network_access_configuration.isSet()) {
        obj.insert(QString("NetworkAccessConfiguration"), ::OpenAPI::toJsonValue(m_network_access_configuration));
    }
    return obj;
}

QString OAISession::getId() const {
    return m_id;
}
void OAISession::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISession::is_id_Set() const{
    return m_id_isSet;
}

bool OAISession::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISession::getUserId() const {
    return m_user_id;
}
void OAISession::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAISession::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAISession::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAISession::getStackName() const {
    return m_stack_name;
}
void OAISession::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAISession::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAISession::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAISession::getFleetName() const {
    return m_fleet_name;
}
void OAISession::setFleetName(const QString &fleet_name) {
    m_fleet_name = fleet_name;
    m_fleet_name_isSet = true;
}

bool OAISession::is_fleet_name_Set() const{
    return m_fleet_name_isSet;
}

bool OAISession::is_fleet_name_Valid() const{
    return m_fleet_name_isValid;
}

OAISessionState OAISession::getState() const {
    return m_state;
}
void OAISession::setState(const OAISessionState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISession::is_state_Set() const{
    return m_state_isSet;
}

bool OAISession::is_state_Valid() const{
    return m_state_isValid;
}

OAISessionConnectionState OAISession::getConnectionState() const {
    return m_connection_state;
}
void OAISession::setConnectionState(const OAISessionConnectionState &connection_state) {
    m_connection_state = connection_state;
    m_connection_state_isSet = true;
}

bool OAISession::is_connection_state_Set() const{
    return m_connection_state_isSet;
}

bool OAISession::is_connection_state_Valid() const{
    return m_connection_state_isValid;
}

QDateTime OAISession::getStartTime() const {
    return m_start_time;
}
void OAISession::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAISession::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAISession::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAISession::getMaxExpirationTime() const {
    return m_max_expiration_time;
}
void OAISession::setMaxExpirationTime(const QDateTime &max_expiration_time) {
    m_max_expiration_time = max_expiration_time;
    m_max_expiration_time_isSet = true;
}

bool OAISession::is_max_expiration_time_Set() const{
    return m_max_expiration_time_isSet;
}

bool OAISession::is_max_expiration_time_Valid() const{
    return m_max_expiration_time_isValid;
}

OAIAuthenticationType OAISession::getAuthenticationType() const {
    return m_authentication_type;
}
void OAISession::setAuthenticationType(const OAIAuthenticationType &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAISession::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAISession::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

OAISession_NetworkAccessConfiguration OAISession::getNetworkAccessConfiguration() const {
    return m_network_access_configuration;
}
void OAISession::setNetworkAccessConfiguration(const OAISession_NetworkAccessConfiguration &network_access_configuration) {
    m_network_access_configuration = network_access_configuration;
    m_network_access_configuration_isSet = true;
}

bool OAISession::is_network_access_configuration_Set() const{
    return m_network_access_configuration_isSet;
}

bool OAISession::is_network_access_configuration_Valid() const{
    return m_network_access_configuration_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_access_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_user_id_isValid && m_stack_name_isValid && m_fleet_name_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
