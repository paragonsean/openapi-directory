/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateImageBuilderRequest_DomainJoinInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateImageBuilderRequest_DomainJoinInfo::OAICreateImageBuilderRequest_DomainJoinInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateImageBuilderRequest_DomainJoinInfo::OAICreateImageBuilderRequest_DomainJoinInfo() {
    this->initializeModel();
}

OAICreateImageBuilderRequest_DomainJoinInfo::~OAICreateImageBuilderRequest_DomainJoinInfo() {}

void OAICreateImageBuilderRequest_DomainJoinInfo::initializeModel() {

    m_directory_name_isSet = false;
    m_directory_name_isValid = false;

    m_organizational_unit_distinguished_name_isSet = false;
    m_organizational_unit_distinguished_name_isValid = false;
}

void OAICreateImageBuilderRequest_DomainJoinInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateImageBuilderRequest_DomainJoinInfo::fromJsonObject(QJsonObject json) {

    m_directory_name_isValid = ::OpenAPI::fromJsonValue(m_directory_name, json[QString("DirectoryName")]);
    m_directory_name_isSet = !json[QString("DirectoryName")].isNull() && m_directory_name_isValid;

    m_organizational_unit_distinguished_name_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_distinguished_name, json[QString("OrganizationalUnitDistinguishedName")]);
    m_organizational_unit_distinguished_name_isSet = !json[QString("OrganizationalUnitDistinguishedName")].isNull() && m_organizational_unit_distinguished_name_isValid;
}

QString OAICreateImageBuilderRequest_DomainJoinInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateImageBuilderRequest_DomainJoinInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_directory_name_isSet) {
        obj.insert(QString("DirectoryName"), ::OpenAPI::toJsonValue(m_directory_name));
    }
    if (m_organizational_unit_distinguished_name_isSet) {
        obj.insert(QString("OrganizationalUnitDistinguishedName"), ::OpenAPI::toJsonValue(m_organizational_unit_distinguished_name));
    }
    return obj;
}

QString OAICreateImageBuilderRequest_DomainJoinInfo::getDirectoryName() const {
    return m_directory_name;
}
void OAICreateImageBuilderRequest_DomainJoinInfo::setDirectoryName(const QString &directory_name) {
    m_directory_name = directory_name;
    m_directory_name_isSet = true;
}

bool OAICreateImageBuilderRequest_DomainJoinInfo::is_directory_name_Set() const{
    return m_directory_name_isSet;
}

bool OAICreateImageBuilderRequest_DomainJoinInfo::is_directory_name_Valid() const{
    return m_directory_name_isValid;
}

QString OAICreateImageBuilderRequest_DomainJoinInfo::getOrganizationalUnitDistinguishedName() const {
    return m_organizational_unit_distinguished_name;
}
void OAICreateImageBuilderRequest_DomainJoinInfo::setOrganizationalUnitDistinguishedName(const QString &organizational_unit_distinguished_name) {
    m_organizational_unit_distinguished_name = organizational_unit_distinguished_name;
    m_organizational_unit_distinguished_name_isSet = true;
}

bool OAICreateImageBuilderRequest_DomainJoinInfo::is_organizational_unit_distinguished_name_Set() const{
    return m_organizational_unit_distinguished_name_isSet;
}

bool OAICreateImageBuilderRequest_DomainJoinInfo::is_organizational_unit_distinguished_name_Valid() const{
    return m_organizational_unit_distinguished_name_isValid;
}

bool OAICreateImageBuilderRequest_DomainJoinInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_directory_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_distinguished_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateImageBuilderRequest_DomainJoinInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
