/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplication::OAIApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplication::OAIApplication() {
    this->initializeModel();
}

OAIApplication::~OAIApplication() {}

void OAIApplication::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_launch_path_isSet = false;
    m_launch_path_isValid = false;

    m_launch_parameters_isSet = false;
    m_launch_parameters_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_working_directory_isSet = false;
    m_working_directory_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_app_block_arn_isSet = false;
    m_app_block_arn_isValid = false;

    m_icon_s3_location_isSet = false;
    m_icon_s3_location_isValid = false;

    m_platforms_isSet = false;
    m_platforms_isValid = false;

    m_instance_families_isSet = false;
    m_instance_families_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;
}

void OAIApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplication::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("IconURL")]);
    m_icon_url_isSet = !json[QString("IconURL")].isNull() && m_icon_url_isValid;

    m_launch_path_isValid = ::OpenAPI::fromJsonValue(m_launch_path, json[QString("LaunchPath")]);
    m_launch_path_isSet = !json[QString("LaunchPath")].isNull() && m_launch_path_isValid;

    m_launch_parameters_isValid = ::OpenAPI::fromJsonValue(m_launch_parameters, json[QString("LaunchParameters")]);
    m_launch_parameters_isSet = !json[QString("LaunchParameters")].isNull() && m_launch_parameters_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_working_directory_isValid = ::OpenAPI::fromJsonValue(m_working_directory, json[QString("WorkingDirectory")]);
    m_working_directory_isSet = !json[QString("WorkingDirectory")].isNull() && m_working_directory_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_app_block_arn_isValid = ::OpenAPI::fromJsonValue(m_app_block_arn, json[QString("AppBlockArn")]);
    m_app_block_arn_isSet = !json[QString("AppBlockArn")].isNull() && m_app_block_arn_isValid;

    m_icon_s3_location_isValid = ::OpenAPI::fromJsonValue(m_icon_s3_location, json[QString("IconS3Location")]);
    m_icon_s3_location_isSet = !json[QString("IconS3Location")].isNull() && m_icon_s3_location_isValid;

    m_platforms_isValid = ::OpenAPI::fromJsonValue(m_platforms, json[QString("Platforms")]);
    m_platforms_isSet = !json[QString("Platforms")].isNull() && m_platforms_isValid;

    m_instance_families_isValid = ::OpenAPI::fromJsonValue(m_instance_families, json[QString("InstanceFamilies")]);
    m_instance_families_isSet = !json[QString("InstanceFamilies")].isNull() && m_instance_families_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;
}

QString OAIApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("IconURL"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_launch_path_isSet) {
        obj.insert(QString("LaunchPath"), ::OpenAPI::toJsonValue(m_launch_path));
    }
    if (m_launch_parameters_isSet) {
        obj.insert(QString("LaunchParameters"), ::OpenAPI::toJsonValue(m_launch_parameters));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_working_directory_isSet) {
        obj.insert(QString("WorkingDirectory"), ::OpenAPI::toJsonValue(m_working_directory));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_app_block_arn_isSet) {
        obj.insert(QString("AppBlockArn"), ::OpenAPI::toJsonValue(m_app_block_arn));
    }
    if (m_icon_s3_location.isSet()) {
        obj.insert(QString("IconS3Location"), ::OpenAPI::toJsonValue(m_icon_s3_location));
    }
    if (m_platforms.isSet()) {
        obj.insert(QString("Platforms"), ::OpenAPI::toJsonValue(m_platforms));
    }
    if (m_instance_families.isSet()) {
        obj.insert(QString("InstanceFamilies"), ::OpenAPI::toJsonValue(m_instance_families));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    return obj;
}

QString OAIApplication::getName() const {
    return m_name;
}
void OAIApplication::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplication::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplication::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplication::getDisplayName() const {
    return m_display_name;
}
void OAIApplication::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIApplication::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIApplication::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIApplication::getIconUrl() const {
    return m_icon_url;
}
void OAIApplication::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIApplication::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIApplication::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAIApplication::getLaunchPath() const {
    return m_launch_path;
}
void OAIApplication::setLaunchPath(const QString &launch_path) {
    m_launch_path = launch_path;
    m_launch_path_isSet = true;
}

bool OAIApplication::is_launch_path_Set() const{
    return m_launch_path_isSet;
}

bool OAIApplication::is_launch_path_Valid() const{
    return m_launch_path_isValid;
}

QString OAIApplication::getLaunchParameters() const {
    return m_launch_parameters;
}
void OAIApplication::setLaunchParameters(const QString &launch_parameters) {
    m_launch_parameters = launch_parameters;
    m_launch_parameters_isSet = true;
}

bool OAIApplication::is_launch_parameters_Set() const{
    return m_launch_parameters_isSet;
}

bool OAIApplication::is_launch_parameters_Valid() const{
    return m_launch_parameters_isValid;
}

bool OAIApplication::getEnabled() const {
    return m_enabled;
}
void OAIApplication::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIApplication::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIApplication::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QMap OAIApplication::getMetadata() const {
    return m_metadata;
}
void OAIApplication::setMetadata(const QMap &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIApplication::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIApplication::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIApplication::getWorkingDirectory() const {
    return m_working_directory;
}
void OAIApplication::setWorkingDirectory(const QString &working_directory) {
    m_working_directory = working_directory;
    m_working_directory_isSet = true;
}

bool OAIApplication::is_working_directory_Set() const{
    return m_working_directory_isSet;
}

bool OAIApplication::is_working_directory_Valid() const{
    return m_working_directory_isValid;
}

QString OAIApplication::getDescription() const {
    return m_description;
}
void OAIApplication::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplication::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplication::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApplication::getArn() const {
    return m_arn;
}
void OAIApplication::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIApplication::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIApplication::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIApplication::getAppBlockArn() const {
    return m_app_block_arn;
}
void OAIApplication::setAppBlockArn(const QString &app_block_arn) {
    m_app_block_arn = app_block_arn;
    m_app_block_arn_isSet = true;
}

bool OAIApplication::is_app_block_arn_Set() const{
    return m_app_block_arn_isSet;
}

bool OAIApplication::is_app_block_arn_Valid() const{
    return m_app_block_arn_isValid;
}

OAIApplication_IconS3Location OAIApplication::getIconS3Location() const {
    return m_icon_s3_location;
}
void OAIApplication::setIconS3Location(const OAIApplication_IconS3Location &icon_s3_location) {
    m_icon_s3_location = icon_s3_location;
    m_icon_s3_location_isSet = true;
}

bool OAIApplication::is_icon_s3_location_Set() const{
    return m_icon_s3_location_isSet;
}

bool OAIApplication::is_icon_s3_location_Valid() const{
    return m_icon_s3_location_isValid;
}

QList OAIApplication::getPlatforms() const {
    return m_platforms;
}
void OAIApplication::setPlatforms(const QList &platforms) {
    m_platforms = platforms;
    m_platforms_isSet = true;
}

bool OAIApplication::is_platforms_Set() const{
    return m_platforms_isSet;
}

bool OAIApplication::is_platforms_Valid() const{
    return m_platforms_isValid;
}

QList OAIApplication::getInstanceFamilies() const {
    return m_instance_families;
}
void OAIApplication::setInstanceFamilies(const QList &instance_families) {
    m_instance_families = instance_families;
    m_instance_families_isSet = true;
}

bool OAIApplication::is_instance_families_Set() const{
    return m_instance_families_isSet;
}

bool OAIApplication::is_instance_families_Valid() const{
    return m_instance_families_isValid;
}

QDateTime OAIApplication::getCreatedTime() const {
    return m_created_time;
}
void OAIApplication::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIApplication::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIApplication::is_created_time_Valid() const{
    return m_created_time_isValid;
}

bool OAIApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_block_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platforms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_families.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
