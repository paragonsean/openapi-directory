/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateEntitlementRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateEntitlementRequest::OAIUpdateEntitlementRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateEntitlementRequest::OAIUpdateEntitlementRequest() {
    this->initializeModel();
}

OAIUpdateEntitlementRequest::~OAIUpdateEntitlementRequest() {}

void OAIUpdateEntitlementRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_app_visibility_isSet = false;
    m_app_visibility_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAIUpdateEntitlementRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateEntitlementRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_app_visibility_isValid = ::OpenAPI::fromJsonValue(m_app_visibility, json[QString("AppVisibility")]);
    m_app_visibility_isSet = !json[QString("AppVisibility")].isNull() && m_app_visibility_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;
}

QString OAIUpdateEntitlementRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateEntitlementRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_app_visibility.isSet()) {
        obj.insert(QString("AppVisibility"), ::OpenAPI::toJsonValue(m_app_visibility));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

QString OAIUpdateEntitlementRequest::getName() const {
    return m_name;
}
void OAIUpdateEntitlementRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateEntitlementRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateEntitlementRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateEntitlementRequest::getStackName() const {
    return m_stack_name;
}
void OAIUpdateEntitlementRequest::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAIUpdateEntitlementRequest::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAIUpdateEntitlementRequest::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAIUpdateEntitlementRequest::getDescription() const {
    return m_description;
}
void OAIUpdateEntitlementRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateEntitlementRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateEntitlementRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIAppVisibility OAIUpdateEntitlementRequest::getAppVisibility() const {
    return m_app_visibility;
}
void OAIUpdateEntitlementRequest::setAppVisibility(const OAIAppVisibility &app_visibility) {
    m_app_visibility = app_visibility;
    m_app_visibility_isSet = true;
}

bool OAIUpdateEntitlementRequest::is_app_visibility_Set() const{
    return m_app_visibility_isSet;
}

bool OAIUpdateEntitlementRequest::is_app_visibility_Valid() const{
    return m_app_visibility_isValid;
}

QList OAIUpdateEntitlementRequest::getAttributes() const {
    return m_attributes;
}
void OAIUpdateEntitlementRequest::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIUpdateEntitlementRequest::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIUpdateEntitlementRequest::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIUpdateEntitlementRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateEntitlementRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_stack_name_isValid && true;
}

} // namespace OpenAPI
