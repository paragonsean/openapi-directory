/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAppBlocksRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAppBlocksRequest::OAIDescribeAppBlocksRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAppBlocksRequest::OAIDescribeAppBlocksRequest() {
    this->initializeModel();
}

OAIDescribeAppBlocksRequest::~OAIDescribeAppBlocksRequest() {}

void OAIDescribeAppBlocksRequest::initializeModel() {

    m_arns_isSet = false;
    m_arns_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIDescribeAppBlocksRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAppBlocksRequest::fromJsonObject(QJsonObject json) {

    m_arns_isValid = ::OpenAPI::fromJsonValue(m_arns, json[QString("Arns")]);
    m_arns_isSet = !json[QString("Arns")].isNull() && m_arns_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIDescribeAppBlocksRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAppBlocksRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_arns.isSet()) {
        obj.insert(QString("Arns"), ::OpenAPI::toJsonValue(m_arns));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QList OAIDescribeAppBlocksRequest::getArns() const {
    return m_arns;
}
void OAIDescribeAppBlocksRequest::setArns(const QList &arns) {
    m_arns = arns;
    m_arns_isSet = true;
}

bool OAIDescribeAppBlocksRequest::is_arns_Set() const{
    return m_arns_isSet;
}

bool OAIDescribeAppBlocksRequest::is_arns_Valid() const{
    return m_arns_isValid;
}

QString OAIDescribeAppBlocksRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeAppBlocksRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeAppBlocksRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeAppBlocksRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeAppBlocksRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeAppBlocksRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeAppBlocksRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeAppBlocksRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIDescribeAppBlocksRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAppBlocksRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
