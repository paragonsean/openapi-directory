/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAppBlockBuilderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAppBlockBuilderRequest::OAIUpdateAppBlockBuilderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAppBlockBuilderRequest::OAIUpdateAppBlockBuilderRequest() {
    this->initializeModel();
}

OAIUpdateAppBlockBuilderRequest::~OAIUpdateAppBlockBuilderRequest() {}

void OAIUpdateAppBlockBuilderRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_enable_default_internet_access_isSet = false;
    m_enable_default_internet_access_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_access_endpoints_isSet = false;
    m_access_endpoints_isValid = false;

    m_attributes_to_delete_isSet = false;
    m_attributes_to_delete_isValid = false;
}

void OAIUpdateAppBlockBuilderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAppBlockBuilderRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("Platform")]);
    m_platform_isSet = !json[QString("Platform")].isNull() && m_platform_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("VpcConfig")]);
    m_vpc_config_isSet = !json[QString("VpcConfig")].isNull() && m_vpc_config_isValid;

    m_enable_default_internet_access_isValid = ::OpenAPI::fromJsonValue(m_enable_default_internet_access, json[QString("EnableDefaultInternetAccess")]);
    m_enable_default_internet_access_isSet = !json[QString("EnableDefaultInternetAccess")].isNull() && m_enable_default_internet_access_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_access_endpoints_isValid = ::OpenAPI::fromJsonValue(m_access_endpoints, json[QString("AccessEndpoints")]);
    m_access_endpoints_isSet = !json[QString("AccessEndpoints")].isNull() && m_access_endpoints_isValid;

    m_attributes_to_delete_isValid = ::OpenAPI::fromJsonValue(m_attributes_to_delete, json[QString("AttributesToDelete")]);
    m_attributes_to_delete_isSet = !json[QString("AttributesToDelete")].isNull() && m_attributes_to_delete_isValid;
}

QString OAIUpdateAppBlockBuilderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAppBlockBuilderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("Platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("VpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_enable_default_internet_access_isSet) {
        obj.insert(QString("EnableDefaultInternetAccess"), ::OpenAPI::toJsonValue(m_enable_default_internet_access));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_access_endpoints.isSet()) {
        obj.insert(QString("AccessEndpoints"), ::OpenAPI::toJsonValue(m_access_endpoints));
    }
    if (m_attributes_to_delete.isSet()) {
        obj.insert(QString("AttributesToDelete"), ::OpenAPI::toJsonValue(m_attributes_to_delete));
    }
    return obj;
}

QString OAIUpdateAppBlockBuilderRequest::getName() const {
    return m_name;
}
void OAIUpdateAppBlockBuilderRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateAppBlockBuilderRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateAppBlockBuilderRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateAppBlockBuilderRequest::getDescription() const {
    return m_description;
}
void OAIUpdateAppBlockBuilderRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateAppBlockBuilderRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateAppBlockBuilderRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateAppBlockBuilderRequest::getDisplayName() const {
    return m_display_name;
}
void OAIUpdateAppBlockBuilderRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUpdateAppBlockBuilderRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUpdateAppBlockBuilderRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIPlatformType OAIUpdateAppBlockBuilderRequest::getPlatform() const {
    return m_platform;
}
void OAIUpdateAppBlockBuilderRequest::setPlatform(const OAIPlatformType &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIUpdateAppBlockBuilderRequest::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIUpdateAppBlockBuilderRequest::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIUpdateAppBlockBuilderRequest::getInstanceType() const {
    return m_instance_type;
}
void OAIUpdateAppBlockBuilderRequest::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIUpdateAppBlockBuilderRequest::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIUpdateAppBlockBuilderRequest::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

OAICreateAppBlockBuilderRequest_VpcConfig OAIUpdateAppBlockBuilderRequest::getVpcConfig() const {
    return m_vpc_config;
}
void OAIUpdateAppBlockBuilderRequest::setVpcConfig(const OAICreateAppBlockBuilderRequest_VpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIUpdateAppBlockBuilderRequest::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIUpdateAppBlockBuilderRequest::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

bool OAIUpdateAppBlockBuilderRequest::getEnableDefaultInternetAccess() const {
    return m_enable_default_internet_access;
}
void OAIUpdateAppBlockBuilderRequest::setEnableDefaultInternetAccess(const bool &enable_default_internet_access) {
    m_enable_default_internet_access = enable_default_internet_access;
    m_enable_default_internet_access_isSet = true;
}

bool OAIUpdateAppBlockBuilderRequest::is_enable_default_internet_access_Set() const{
    return m_enable_default_internet_access_isSet;
}

bool OAIUpdateAppBlockBuilderRequest::is_enable_default_internet_access_Valid() const{
    return m_enable_default_internet_access_isValid;
}

QString OAIUpdateAppBlockBuilderRequest::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIUpdateAppBlockBuilderRequest::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIUpdateAppBlockBuilderRequest::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIUpdateAppBlockBuilderRequest::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

QList OAIUpdateAppBlockBuilderRequest::getAccessEndpoints() const {
    return m_access_endpoints;
}
void OAIUpdateAppBlockBuilderRequest::setAccessEndpoints(const QList &access_endpoints) {
    m_access_endpoints = access_endpoints;
    m_access_endpoints_isSet = true;
}

bool OAIUpdateAppBlockBuilderRequest::is_access_endpoints_Set() const{
    return m_access_endpoints_isSet;
}

bool OAIUpdateAppBlockBuilderRequest::is_access_endpoints_Valid() const{
    return m_access_endpoints_isValid;
}

QList OAIUpdateAppBlockBuilderRequest::getAttributesToDelete() const {
    return m_attributes_to_delete;
}
void OAIUpdateAppBlockBuilderRequest::setAttributesToDelete(const QList &attributes_to_delete) {
    m_attributes_to_delete = attributes_to_delete;
    m_attributes_to_delete_isSet = true;
}

bool OAIUpdateAppBlockBuilderRequest::is_attributes_to_delete_Set() const{
    return m_attributes_to_delete_isSet;
}

bool OAIUpdateAppBlockBuilderRequest::is_attributes_to_delete_Valid() const{
    return m_attributes_to_delete_isValid;
}

bool OAIUpdateAppBlockBuilderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_default_internet_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_to_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAppBlockBuilderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
