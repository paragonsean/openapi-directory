/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFleet_ComputeCapacityStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFleet_ComputeCapacityStatus::OAIFleet_ComputeCapacityStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFleet_ComputeCapacityStatus::OAIFleet_ComputeCapacityStatus() {
    this->initializeModel();
}

OAIFleet_ComputeCapacityStatus::~OAIFleet_ComputeCapacityStatus() {}

void OAIFleet_ComputeCapacityStatus::initializeModel() {

    m_desired_isSet = false;
    m_desired_isValid = false;

    m_running_isSet = false;
    m_running_isValid = false;

    m_in_use_isSet = false;
    m_in_use_isValid = false;

    m_available_isSet = false;
    m_available_isValid = false;
}

void OAIFleet_ComputeCapacityStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFleet_ComputeCapacityStatus::fromJsonObject(QJsonObject json) {

    m_desired_isValid = ::OpenAPI::fromJsonValue(m_desired, json[QString("Desired")]);
    m_desired_isSet = !json[QString("Desired")].isNull() && m_desired_isValid;

    m_running_isValid = ::OpenAPI::fromJsonValue(m_running, json[QString("Running")]);
    m_running_isSet = !json[QString("Running")].isNull() && m_running_isValid;

    m_in_use_isValid = ::OpenAPI::fromJsonValue(m_in_use, json[QString("InUse")]);
    m_in_use_isSet = !json[QString("InUse")].isNull() && m_in_use_isValid;

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("Available")]);
    m_available_isSet = !json[QString("Available")].isNull() && m_available_isValid;
}

QString OAIFleet_ComputeCapacityStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFleet_ComputeCapacityStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_desired_isSet) {
        obj.insert(QString("Desired"), ::OpenAPI::toJsonValue(m_desired));
    }
    if (m_running_isSet) {
        obj.insert(QString("Running"), ::OpenAPI::toJsonValue(m_running));
    }
    if (m_in_use_isSet) {
        obj.insert(QString("InUse"), ::OpenAPI::toJsonValue(m_in_use));
    }
    if (m_available_isSet) {
        obj.insert(QString("Available"), ::OpenAPI::toJsonValue(m_available));
    }
    return obj;
}

qint32 OAIFleet_ComputeCapacityStatus::getDesired() const {
    return m_desired;
}
void OAIFleet_ComputeCapacityStatus::setDesired(const qint32 &desired) {
    m_desired = desired;
    m_desired_isSet = true;
}

bool OAIFleet_ComputeCapacityStatus::is_desired_Set() const{
    return m_desired_isSet;
}

bool OAIFleet_ComputeCapacityStatus::is_desired_Valid() const{
    return m_desired_isValid;
}

qint32 OAIFleet_ComputeCapacityStatus::getRunning() const {
    return m_running;
}
void OAIFleet_ComputeCapacityStatus::setRunning(const qint32 &running) {
    m_running = running;
    m_running_isSet = true;
}

bool OAIFleet_ComputeCapacityStatus::is_running_Set() const{
    return m_running_isSet;
}

bool OAIFleet_ComputeCapacityStatus::is_running_Valid() const{
    return m_running_isValid;
}

qint32 OAIFleet_ComputeCapacityStatus::getInUse() const {
    return m_in_use;
}
void OAIFleet_ComputeCapacityStatus::setInUse(const qint32 &in_use) {
    m_in_use = in_use;
    m_in_use_isSet = true;
}

bool OAIFleet_ComputeCapacityStatus::is_in_use_Set() const{
    return m_in_use_isSet;
}

bool OAIFleet_ComputeCapacityStatus::is_in_use_Valid() const{
    return m_in_use_isValid;
}

qint32 OAIFleet_ComputeCapacityStatus::getAvailable() const {
    return m_available;
}
void OAIFleet_ComputeCapacityStatus::setAvailable(const qint32 &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAIFleet_ComputeCapacityStatus::is_available_Set() const{
    return m_available_isSet;
}

bool OAIFleet_ComputeCapacityStatus::is_available_Valid() const{
    return m_available_isValid;
}

bool OAIFleet_ComputeCapacityStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_desired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFleet_ComputeCapacityStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_desired_isValid && true;
}

} // namespace OpenAPI
