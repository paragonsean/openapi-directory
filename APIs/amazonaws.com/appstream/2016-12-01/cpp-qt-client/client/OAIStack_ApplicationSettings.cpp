/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStack_ApplicationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStack_ApplicationSettings::OAIStack_ApplicationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStack_ApplicationSettings::OAIStack_ApplicationSettings() {
    this->initializeModel();
}

OAIStack_ApplicationSettings::~OAIStack_ApplicationSettings() {}

void OAIStack_ApplicationSettings::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_settings_group_isSet = false;
    m_settings_group_isValid = false;

    m_s3_bucket_name_isSet = false;
    m_s3_bucket_name_isValid = false;
}

void OAIStack_ApplicationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStack_ApplicationSettings::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_settings_group_isValid = ::OpenAPI::fromJsonValue(m_settings_group, json[QString("SettingsGroup")]);
    m_settings_group_isSet = !json[QString("SettingsGroup")].isNull() && m_settings_group_isValid;

    m_s3_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_name, json[QString("S3BucketName")]);
    m_s3_bucket_name_isSet = !json[QString("S3BucketName")].isNull() && m_s3_bucket_name_isValid;
}

QString OAIStack_ApplicationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStack_ApplicationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_settings_group_isSet) {
        obj.insert(QString("SettingsGroup"), ::OpenAPI::toJsonValue(m_settings_group));
    }
    if (m_s3_bucket_name_isSet) {
        obj.insert(QString("S3BucketName"), ::OpenAPI::toJsonValue(m_s3_bucket_name));
    }
    return obj;
}

bool OAIStack_ApplicationSettings::getEnabled() const {
    return m_enabled;
}
void OAIStack_ApplicationSettings::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIStack_ApplicationSettings::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIStack_ApplicationSettings::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIStack_ApplicationSettings::getSettingsGroup() const {
    return m_settings_group;
}
void OAIStack_ApplicationSettings::setSettingsGroup(const QString &settings_group) {
    m_settings_group = settings_group;
    m_settings_group_isSet = true;
}

bool OAIStack_ApplicationSettings::is_settings_group_Set() const{
    return m_settings_group_isSet;
}

bool OAIStack_ApplicationSettings::is_settings_group_Valid() const{
    return m_settings_group_isValid;
}

QString OAIStack_ApplicationSettings::getS3BucketName() const {
    return m_s3_bucket_name;
}
void OAIStack_ApplicationSettings::setS3BucketName(const QString &s3_bucket_name) {
    m_s3_bucket_name = s3_bucket_name;
    m_s3_bucket_name_isSet = true;
}

bool OAIStack_ApplicationSettings::is_s3_bucket_name_Set() const{
    return m_s3_bucket_name_isSet;
}

bool OAIStack_ApplicationSettings::is_s3_bucket_name_Valid() const{
    return m_s3_bucket_name_isValid;
}

bool OAIStack_ApplicationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStack_ApplicationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
