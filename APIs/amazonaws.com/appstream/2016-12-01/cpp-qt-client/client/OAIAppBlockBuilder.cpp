/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppBlockBuilder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppBlockBuilder::OAIAppBlockBuilder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppBlockBuilder::OAIAppBlockBuilder() {
    this->initializeModel();
}

OAIAppBlockBuilder::~OAIAppBlockBuilder() {}

void OAIAppBlockBuilder::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_enable_default_internet_access_isSet = false;
    m_enable_default_internet_access_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_app_block_builder_errors_isSet = false;
    m_app_block_builder_errors_isValid = false;

    m_state_change_reason_isSet = false;
    m_state_change_reason_isValid = false;

    m_access_endpoints_isSet = false;
    m_access_endpoints_isValid = false;
}

void OAIAppBlockBuilder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppBlockBuilder::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("Platform")]);
    m_platform_isSet = !json[QString("Platform")].isNull() && m_platform_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_enable_default_internet_access_isValid = ::OpenAPI::fromJsonValue(m_enable_default_internet_access, json[QString("EnableDefaultInternetAccess")]);
    m_enable_default_internet_access_isSet = !json[QString("EnableDefaultInternetAccess")].isNull() && m_enable_default_internet_access_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("VpcConfig")]);
    m_vpc_config_isSet = !json[QString("VpcConfig")].isNull() && m_vpc_config_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_app_block_builder_errors_isValid = ::OpenAPI::fromJsonValue(m_app_block_builder_errors, json[QString("AppBlockBuilderErrors")]);
    m_app_block_builder_errors_isSet = !json[QString("AppBlockBuilderErrors")].isNull() && m_app_block_builder_errors_isValid;

    m_state_change_reason_isValid = ::OpenAPI::fromJsonValue(m_state_change_reason, json[QString("StateChangeReason")]);
    m_state_change_reason_isSet = !json[QString("StateChangeReason")].isNull() && m_state_change_reason_isValid;

    m_access_endpoints_isValid = ::OpenAPI::fromJsonValue(m_access_endpoints, json[QString("AccessEndpoints")]);
    m_access_endpoints_isSet = !json[QString("AccessEndpoints")].isNull() && m_access_endpoints_isValid;
}

QString OAIAppBlockBuilder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppBlockBuilder::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("Platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_enable_default_internet_access_isSet) {
        obj.insert(QString("EnableDefaultInternetAccess"), ::OpenAPI::toJsonValue(m_enable_default_internet_access));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("VpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_app_block_builder_errors.isSet()) {
        obj.insert(QString("AppBlockBuilderErrors"), ::OpenAPI::toJsonValue(m_app_block_builder_errors));
    }
    if (m_state_change_reason.isSet()) {
        obj.insert(QString("StateChangeReason"), ::OpenAPI::toJsonValue(m_state_change_reason));
    }
    if (m_access_endpoints.isSet()) {
        obj.insert(QString("AccessEndpoints"), ::OpenAPI::toJsonValue(m_access_endpoints));
    }
    return obj;
}

QString OAIAppBlockBuilder::getArn() const {
    return m_arn;
}
void OAIAppBlockBuilder::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAppBlockBuilder::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAppBlockBuilder::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIAppBlockBuilder::getName() const {
    return m_name;
}
void OAIAppBlockBuilder::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAppBlockBuilder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAppBlockBuilder::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAppBlockBuilder::getDisplayName() const {
    return m_display_name;
}
void OAIAppBlockBuilder::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAppBlockBuilder::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAppBlockBuilder::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAppBlockBuilder::getDescription() const {
    return m_description;
}
void OAIAppBlockBuilder::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAppBlockBuilder::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAppBlockBuilder::is_description_Valid() const{
    return m_description_isValid;
}

OAIAppBlockBuilderPlatformType OAIAppBlockBuilder::getPlatform() const {
    return m_platform;
}
void OAIAppBlockBuilder::setPlatform(const OAIAppBlockBuilderPlatformType &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIAppBlockBuilder::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIAppBlockBuilder::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIAppBlockBuilder::getInstanceType() const {
    return m_instance_type;
}
void OAIAppBlockBuilder::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIAppBlockBuilder::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIAppBlockBuilder::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIAppBlockBuilder::getEnableDefaultInternetAccess() const {
    return m_enable_default_internet_access;
}
void OAIAppBlockBuilder::setEnableDefaultInternetAccess(const bool &enable_default_internet_access) {
    m_enable_default_internet_access = enable_default_internet_access;
    m_enable_default_internet_access_isSet = true;
}

bool OAIAppBlockBuilder::is_enable_default_internet_access_Set() const{
    return m_enable_default_internet_access_isSet;
}

bool OAIAppBlockBuilder::is_enable_default_internet_access_Valid() const{
    return m_enable_default_internet_access_isValid;
}

QString OAIAppBlockBuilder::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIAppBlockBuilder::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIAppBlockBuilder::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIAppBlockBuilder::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

OAIAppBlockBuilder_VpcConfig OAIAppBlockBuilder::getVpcConfig() const {
    return m_vpc_config;
}
void OAIAppBlockBuilder::setVpcConfig(const OAIAppBlockBuilder_VpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIAppBlockBuilder::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIAppBlockBuilder::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

OAIAppBlockBuilderState OAIAppBlockBuilder::getState() const {
    return m_state;
}
void OAIAppBlockBuilder::setState(const OAIAppBlockBuilderState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAppBlockBuilder::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAppBlockBuilder::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIAppBlockBuilder::getCreatedTime() const {
    return m_created_time;
}
void OAIAppBlockBuilder::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIAppBlockBuilder::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIAppBlockBuilder::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QList OAIAppBlockBuilder::getAppBlockBuilderErrors() const {
    return m_app_block_builder_errors;
}
void OAIAppBlockBuilder::setAppBlockBuilderErrors(const QList &app_block_builder_errors) {
    m_app_block_builder_errors = app_block_builder_errors;
    m_app_block_builder_errors_isSet = true;
}

bool OAIAppBlockBuilder::is_app_block_builder_errors_Set() const{
    return m_app_block_builder_errors_isSet;
}

bool OAIAppBlockBuilder::is_app_block_builder_errors_Valid() const{
    return m_app_block_builder_errors_isValid;
}

OAIAppBlockBuilder_StateChangeReason OAIAppBlockBuilder::getStateChangeReason() const {
    return m_state_change_reason;
}
void OAIAppBlockBuilder::setStateChangeReason(const OAIAppBlockBuilder_StateChangeReason &state_change_reason) {
    m_state_change_reason = state_change_reason;
    m_state_change_reason_isSet = true;
}

bool OAIAppBlockBuilder::is_state_change_reason_Set() const{
    return m_state_change_reason_isSet;
}

bool OAIAppBlockBuilder::is_state_change_reason_Valid() const{
    return m_state_change_reason_isValid;
}

QList OAIAppBlockBuilder::getAccessEndpoints() const {
    return m_access_endpoints;
}
void OAIAppBlockBuilder::setAccessEndpoints(const QList &access_endpoints) {
    m_access_endpoints = access_endpoints;
    m_access_endpoints_isSet = true;
}

bool OAIAppBlockBuilder::is_access_endpoints_Set() const{
    return m_access_endpoints_isSet;
}

bool OAIAppBlockBuilder::is_access_endpoints_Valid() const{
    return m_access_endpoints_isValid;
}

bool OAIAppBlockBuilder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_default_internet_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_block_builder_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_change_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppBlockBuilder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_name_isValid && m_platform_isValid && m_instance_type_isValid && m_vpc_config_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
