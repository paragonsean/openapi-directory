/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplicationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplicationRequest::OAIUpdateApplicationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplicationRequest::OAIUpdateApplicationRequest() {
    this->initializeModel();
}

OAIUpdateApplicationRequest::~OAIUpdateApplicationRequest() {}

void OAIUpdateApplicationRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_icon_s3_location_isSet = false;
    m_icon_s3_location_isValid = false;

    m_launch_path_isSet = false;
    m_launch_path_isValid = false;

    m_working_directory_isSet = false;
    m_working_directory_isValid = false;

    m_launch_parameters_isSet = false;
    m_launch_parameters_isValid = false;

    m_app_block_arn_isSet = false;
    m_app_block_arn_isValid = false;

    m_attributes_to_delete_isSet = false;
    m_attributes_to_delete_isValid = false;
}

void OAIUpdateApplicationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplicationRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_icon_s3_location_isValid = ::OpenAPI::fromJsonValue(m_icon_s3_location, json[QString("IconS3Location")]);
    m_icon_s3_location_isSet = !json[QString("IconS3Location")].isNull() && m_icon_s3_location_isValid;

    m_launch_path_isValid = ::OpenAPI::fromJsonValue(m_launch_path, json[QString("LaunchPath")]);
    m_launch_path_isSet = !json[QString("LaunchPath")].isNull() && m_launch_path_isValid;

    m_working_directory_isValid = ::OpenAPI::fromJsonValue(m_working_directory, json[QString("WorkingDirectory")]);
    m_working_directory_isSet = !json[QString("WorkingDirectory")].isNull() && m_working_directory_isValid;

    m_launch_parameters_isValid = ::OpenAPI::fromJsonValue(m_launch_parameters, json[QString("LaunchParameters")]);
    m_launch_parameters_isSet = !json[QString("LaunchParameters")].isNull() && m_launch_parameters_isValid;

    m_app_block_arn_isValid = ::OpenAPI::fromJsonValue(m_app_block_arn, json[QString("AppBlockArn")]);
    m_app_block_arn_isSet = !json[QString("AppBlockArn")].isNull() && m_app_block_arn_isValid;

    m_attributes_to_delete_isValid = ::OpenAPI::fromJsonValue(m_attributes_to_delete, json[QString("AttributesToDelete")]);
    m_attributes_to_delete_isSet = !json[QString("AttributesToDelete")].isNull() && m_attributes_to_delete_isValid;
}

QString OAIUpdateApplicationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplicationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_icon_s3_location.isSet()) {
        obj.insert(QString("IconS3Location"), ::OpenAPI::toJsonValue(m_icon_s3_location));
    }
    if (m_launch_path_isSet) {
        obj.insert(QString("LaunchPath"), ::OpenAPI::toJsonValue(m_launch_path));
    }
    if (m_working_directory_isSet) {
        obj.insert(QString("WorkingDirectory"), ::OpenAPI::toJsonValue(m_working_directory));
    }
    if (m_launch_parameters_isSet) {
        obj.insert(QString("LaunchParameters"), ::OpenAPI::toJsonValue(m_launch_parameters));
    }
    if (m_app_block_arn_isSet) {
        obj.insert(QString("AppBlockArn"), ::OpenAPI::toJsonValue(m_app_block_arn));
    }
    if (m_attributes_to_delete.isSet()) {
        obj.insert(QString("AttributesToDelete"), ::OpenAPI::toJsonValue(m_attributes_to_delete));
    }
    return obj;
}

QString OAIUpdateApplicationRequest::getName() const {
    return m_name;
}
void OAIUpdateApplicationRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateApplicationRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateApplicationRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateApplicationRequest::getDisplayName() const {
    return m_display_name;
}
void OAIUpdateApplicationRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUpdateApplicationRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUpdateApplicationRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUpdateApplicationRequest::getDescription() const {
    return m_description;
}
void OAIUpdateApplicationRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateApplicationRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateApplicationRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIUpdateApplicationRequest_IconS3Location OAIUpdateApplicationRequest::getIconS3Location() const {
    return m_icon_s3_location;
}
void OAIUpdateApplicationRequest::setIconS3Location(const OAIUpdateApplicationRequest_IconS3Location &icon_s3_location) {
    m_icon_s3_location = icon_s3_location;
    m_icon_s3_location_isSet = true;
}

bool OAIUpdateApplicationRequest::is_icon_s3_location_Set() const{
    return m_icon_s3_location_isSet;
}

bool OAIUpdateApplicationRequest::is_icon_s3_location_Valid() const{
    return m_icon_s3_location_isValid;
}

QString OAIUpdateApplicationRequest::getLaunchPath() const {
    return m_launch_path;
}
void OAIUpdateApplicationRequest::setLaunchPath(const QString &launch_path) {
    m_launch_path = launch_path;
    m_launch_path_isSet = true;
}

bool OAIUpdateApplicationRequest::is_launch_path_Set() const{
    return m_launch_path_isSet;
}

bool OAIUpdateApplicationRequest::is_launch_path_Valid() const{
    return m_launch_path_isValid;
}

QString OAIUpdateApplicationRequest::getWorkingDirectory() const {
    return m_working_directory;
}
void OAIUpdateApplicationRequest::setWorkingDirectory(const QString &working_directory) {
    m_working_directory = working_directory;
    m_working_directory_isSet = true;
}

bool OAIUpdateApplicationRequest::is_working_directory_Set() const{
    return m_working_directory_isSet;
}

bool OAIUpdateApplicationRequest::is_working_directory_Valid() const{
    return m_working_directory_isValid;
}

QString OAIUpdateApplicationRequest::getLaunchParameters() const {
    return m_launch_parameters;
}
void OAIUpdateApplicationRequest::setLaunchParameters(const QString &launch_parameters) {
    m_launch_parameters = launch_parameters;
    m_launch_parameters_isSet = true;
}

bool OAIUpdateApplicationRequest::is_launch_parameters_Set() const{
    return m_launch_parameters_isSet;
}

bool OAIUpdateApplicationRequest::is_launch_parameters_Valid() const{
    return m_launch_parameters_isValid;
}

QString OAIUpdateApplicationRequest::getAppBlockArn() const {
    return m_app_block_arn;
}
void OAIUpdateApplicationRequest::setAppBlockArn(const QString &app_block_arn) {
    m_app_block_arn = app_block_arn;
    m_app_block_arn_isSet = true;
}

bool OAIUpdateApplicationRequest::is_app_block_arn_Set() const{
    return m_app_block_arn_isSet;
}

bool OAIUpdateApplicationRequest::is_app_block_arn_Valid() const{
    return m_app_block_arn_isValid;
}

QList OAIUpdateApplicationRequest::getAttributesToDelete() const {
    return m_attributes_to_delete;
}
void OAIUpdateApplicationRequest::setAttributesToDelete(const QList &attributes_to_delete) {
    m_attributes_to_delete = attributes_to_delete;
    m_attributes_to_delete_isSet = true;
}

bool OAIUpdateApplicationRequest::is_attributes_to_delete_Set() const{
    return m_attributes_to_delete_isSet;
}

bool OAIUpdateApplicationRequest::is_attributes_to_delete_Valid() const{
    return m_attributes_to_delete_isValid;
}

bool OAIUpdateApplicationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_block_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_to_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplicationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
