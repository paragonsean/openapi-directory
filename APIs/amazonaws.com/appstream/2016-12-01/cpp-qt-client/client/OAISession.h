/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISession.h
 *
 * Describes a streaming session.
 */

#ifndef OAISession_H
#define OAISession_H

#include <QJsonObject>

#include "OAIAuthenticationType.h"
#include "OAISessionConnectionState.h"
#include "OAISessionState.h"
#include "OAISession_NetworkAccessConfiguration.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISession_NetworkAccessConfiguration;

class OAISession : public OAIObject {
public:
    OAISession();
    OAISession(QString json);
    ~OAISession() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getStackName() const;
    void setStackName(const QString &stack_name);
    bool is_stack_name_Set() const;
    bool is_stack_name_Valid() const;

    QString getFleetName() const;
    void setFleetName(const QString &fleet_name);
    bool is_fleet_name_Set() const;
    bool is_fleet_name_Valid() const;

    OAISessionState getState() const;
    void setState(const OAISessionState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAISessionConnectionState getConnectionState() const;
    void setConnectionState(const OAISessionConnectionState &connection_state);
    bool is_connection_state_Set() const;
    bool is_connection_state_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getMaxExpirationTime() const;
    void setMaxExpirationTime(const QDateTime &max_expiration_time);
    bool is_max_expiration_time_Set() const;
    bool is_max_expiration_time_Valid() const;

    OAIAuthenticationType getAuthenticationType() const;
    void setAuthenticationType(const OAIAuthenticationType &authentication_type);
    bool is_authentication_type_Set() const;
    bool is_authentication_type_Valid() const;

    OAISession_NetworkAccessConfiguration getNetworkAccessConfiguration() const;
    void setNetworkAccessConfiguration(const OAISession_NetworkAccessConfiguration &network_access_configuration);
    bool is_network_access_configuration_Set() const;
    bool is_network_access_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_stack_name;
    bool m_stack_name_isSet;
    bool m_stack_name_isValid;

    QString m_fleet_name;
    bool m_fleet_name_isSet;
    bool m_fleet_name_isValid;

    OAISessionState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAISessionConnectionState m_connection_state;
    bool m_connection_state_isSet;
    bool m_connection_state_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_max_expiration_time;
    bool m_max_expiration_time_isSet;
    bool m_max_expiration_time_isValid;

    OAIAuthenticationType m_authentication_type;
    bool m_authentication_type_isSet;
    bool m_authentication_type_isValid;

    OAISession_NetworkAccessConfiguration m_network_access_configuration;
    bool m_network_access_configuration_isSet;
    bool m_network_access_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISession)

#endif // OAISession_H
