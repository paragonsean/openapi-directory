/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartImageBuilderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartImageBuilderRequest::OAIStartImageBuilderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartImageBuilderRequest::OAIStartImageBuilderRequest() {
    this->initializeModel();
}

OAIStartImageBuilderRequest::~OAIStartImageBuilderRequest() {}

void OAIStartImageBuilderRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_appstream_agent_version_isSet = false;
    m_appstream_agent_version_isValid = false;
}

void OAIStartImageBuilderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartImageBuilderRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_appstream_agent_version_isValid = ::OpenAPI::fromJsonValue(m_appstream_agent_version, json[QString("AppstreamAgentVersion")]);
    m_appstream_agent_version_isSet = !json[QString("AppstreamAgentVersion")].isNull() && m_appstream_agent_version_isValid;
}

QString OAIStartImageBuilderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartImageBuilderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_appstream_agent_version_isSet) {
        obj.insert(QString("AppstreamAgentVersion"), ::OpenAPI::toJsonValue(m_appstream_agent_version));
    }
    return obj;
}

QString OAIStartImageBuilderRequest::getName() const {
    return m_name;
}
void OAIStartImageBuilderRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStartImageBuilderRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStartImageBuilderRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStartImageBuilderRequest::getAppstreamAgentVersion() const {
    return m_appstream_agent_version;
}
void OAIStartImageBuilderRequest::setAppstreamAgentVersion(const QString &appstream_agent_version) {
    m_appstream_agent_version = appstream_agent_version;
    m_appstream_agent_version_isSet = true;
}

bool OAIStartImageBuilderRequest::is_appstream_agent_version_Set() const{
    return m_appstream_agent_version_isSet;
}

bool OAIStartImageBuilderRequest::is_appstream_agent_version_Valid() const{
    return m_appstream_agent_version_isValid;
}

bool OAIStartImageBuilderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_appstream_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartImageBuilderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
