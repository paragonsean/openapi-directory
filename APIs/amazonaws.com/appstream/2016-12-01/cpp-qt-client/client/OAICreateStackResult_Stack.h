/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateStackResult_Stack.h
 *
 * 
 */

#ifndef OAICreateStackResult_Stack_H
#define OAICreateStackResult_Stack_H

#include <QJsonObject>

#include "OAICreateStackRequest_StreamingExperienceSettings.h"
#include "OAIStack_ApplicationSettings.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStack_ApplicationSettings;
class OAICreateStackRequest_StreamingExperienceSettings;

class OAICreateStackResult_Stack : public OAIObject {
public:
    OAICreateStackResult_Stack();
    OAICreateStackResult_Stack(QString json);
    ~OAICreateStackResult_Stack() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QList getStorageConnectors() const;
    void setStorageConnectors(const QList &storage_connectors);
    bool is_storage_connectors_Set() const;
    bool is_storage_connectors_Valid() const;

    QString getRedirectUrl() const;
    void setRedirectUrl(const QString &redirect_url);
    bool is_redirect_url_Set() const;
    bool is_redirect_url_Valid() const;

    QString getFeedbackUrl() const;
    void setFeedbackUrl(const QString &feedback_url);
    bool is_feedback_url_Set() const;
    bool is_feedback_url_Valid() const;

    QList getStackErrors() const;
    void setStackErrors(const QList &stack_errors);
    bool is_stack_errors_Set() const;
    bool is_stack_errors_Valid() const;

    QList getUserSettings() const;
    void setUserSettings(const QList &user_settings);
    bool is_user_settings_Set() const;
    bool is_user_settings_Valid() const;

    OAIStack_ApplicationSettings getApplicationSettings() const;
    void setApplicationSettings(const OAIStack_ApplicationSettings &application_settings);
    bool is_application_settings_Set() const;
    bool is_application_settings_Valid() const;

    QList getAccessEndpoints() const;
    void setAccessEndpoints(const QList &access_endpoints);
    bool is_access_endpoints_Set() const;
    bool is_access_endpoints_Valid() const;

    QList getEmbedHostDomains() const;
    void setEmbedHostDomains(const QList &embed_host_domains);
    bool is_embed_host_domains_Set() const;
    bool is_embed_host_domains_Valid() const;

    OAICreateStackRequest_StreamingExperienceSettings getStreamingExperienceSettings() const;
    void setStreamingExperienceSettings(const OAICreateStackRequest_StreamingExperienceSettings &streaming_experience_settings);
    bool is_streaming_experience_settings_Set() const;
    bool is_streaming_experience_settings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QList m_storage_connectors;
    bool m_storage_connectors_isSet;
    bool m_storage_connectors_isValid;

    QString m_redirect_url;
    bool m_redirect_url_isSet;
    bool m_redirect_url_isValid;

    QString m_feedback_url;
    bool m_feedback_url_isSet;
    bool m_feedback_url_isValid;

    QList m_stack_errors;
    bool m_stack_errors_isSet;
    bool m_stack_errors_isValid;

    QList m_user_settings;
    bool m_user_settings_isSet;
    bool m_user_settings_isValid;

    OAIStack_ApplicationSettings m_application_settings;
    bool m_application_settings_isSet;
    bool m_application_settings_isValid;

    QList m_access_endpoints;
    bool m_access_endpoints_isSet;
    bool m_access_endpoints_isValid;

    QList m_embed_host_domains;
    bool m_embed_host_domains_isSet;
    bool m_embed_host_domains_isValid;

    OAICreateStackRequest_StreamingExperienceSettings m_streaming_experience_settings;
    bool m_streaming_experience_settings_isSet;
    bool m_streaming_experience_settings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateStackResult_Stack)

#endif // OAICreateStackResult_Stack_H
