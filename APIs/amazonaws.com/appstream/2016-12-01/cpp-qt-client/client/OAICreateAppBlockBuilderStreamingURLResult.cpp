/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAppBlockBuilderStreamingURLResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAppBlockBuilderStreamingURLResult::OAICreateAppBlockBuilderStreamingURLResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAppBlockBuilderStreamingURLResult::OAICreateAppBlockBuilderStreamingURLResult() {
    this->initializeModel();
}

OAICreateAppBlockBuilderStreamingURLResult::~OAICreateAppBlockBuilderStreamingURLResult() {}

void OAICreateAppBlockBuilderStreamingURLResult::initializeModel() {

    m_streaming_url_isSet = false;
    m_streaming_url_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;
}

void OAICreateAppBlockBuilderStreamingURLResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAppBlockBuilderStreamingURLResult::fromJsonObject(QJsonObject json) {

    m_streaming_url_isValid = ::OpenAPI::fromJsonValue(m_streaming_url, json[QString("StreamingURL")]);
    m_streaming_url_isSet = !json[QString("StreamingURL")].isNull() && m_streaming_url_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("Expires")]);
    m_expires_isSet = !json[QString("Expires")].isNull() && m_expires_isValid;
}

QString OAICreateAppBlockBuilderStreamingURLResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAppBlockBuilderStreamingURLResult::asJsonObject() const {
    QJsonObject obj;
    if (m_streaming_url_isSet) {
        obj.insert(QString("StreamingURL"), ::OpenAPI::toJsonValue(m_streaming_url));
    }
    if (m_expires_isSet) {
        obj.insert(QString("Expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    return obj;
}

QString OAICreateAppBlockBuilderStreamingURLResult::getStreamingUrl() const {
    return m_streaming_url;
}
void OAICreateAppBlockBuilderStreamingURLResult::setStreamingUrl(const QString &streaming_url) {
    m_streaming_url = streaming_url;
    m_streaming_url_isSet = true;
}

bool OAICreateAppBlockBuilderStreamingURLResult::is_streaming_url_Set() const{
    return m_streaming_url_isSet;
}

bool OAICreateAppBlockBuilderStreamingURLResult::is_streaming_url_Valid() const{
    return m_streaming_url_isValid;
}

QDateTime OAICreateAppBlockBuilderStreamingURLResult::getExpires() const {
    return m_expires;
}
void OAICreateAppBlockBuilderStreamingURLResult::setExpires(const QDateTime &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAICreateAppBlockBuilderStreamingURLResult::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAICreateAppBlockBuilderStreamingURLResult::is_expires_Valid() const{
    return m_expires_isValid;
}

bool OAICreateAppBlockBuilderStreamingURLResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_streaming_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAppBlockBuilderStreamingURLResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
