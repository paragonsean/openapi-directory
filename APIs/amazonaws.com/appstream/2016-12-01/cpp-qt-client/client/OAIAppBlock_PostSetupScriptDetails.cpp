/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppBlock_PostSetupScriptDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppBlock_PostSetupScriptDetails::OAIAppBlock_PostSetupScriptDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppBlock_PostSetupScriptDetails::OAIAppBlock_PostSetupScriptDetails() {
    this->initializeModel();
}

OAIAppBlock_PostSetupScriptDetails::~OAIAppBlock_PostSetupScriptDetails() {}

void OAIAppBlock_PostSetupScriptDetails::initializeModel() {

    m_script_s3_location_isSet = false;
    m_script_s3_location_isValid = false;

    m_executable_path_isSet = false;
    m_executable_path_isValid = false;

    m_executable_parameters_isSet = false;
    m_executable_parameters_isValid = false;

    m_timeout_in_seconds_isSet = false;
    m_timeout_in_seconds_isValid = false;
}

void OAIAppBlock_PostSetupScriptDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppBlock_PostSetupScriptDetails::fromJsonObject(QJsonObject json) {

    m_script_s3_location_isValid = ::OpenAPI::fromJsonValue(m_script_s3_location, json[QString("ScriptS3Location")]);
    m_script_s3_location_isSet = !json[QString("ScriptS3Location")].isNull() && m_script_s3_location_isValid;

    m_executable_path_isValid = ::OpenAPI::fromJsonValue(m_executable_path, json[QString("ExecutablePath")]);
    m_executable_path_isSet = !json[QString("ExecutablePath")].isNull() && m_executable_path_isValid;

    m_executable_parameters_isValid = ::OpenAPI::fromJsonValue(m_executable_parameters, json[QString("ExecutableParameters")]);
    m_executable_parameters_isSet = !json[QString("ExecutableParameters")].isNull() && m_executable_parameters_isValid;

    m_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_seconds, json[QString("TimeoutInSeconds")]);
    m_timeout_in_seconds_isSet = !json[QString("TimeoutInSeconds")].isNull() && m_timeout_in_seconds_isValid;
}

QString OAIAppBlock_PostSetupScriptDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppBlock_PostSetupScriptDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_script_s3_location.isSet()) {
        obj.insert(QString("ScriptS3Location"), ::OpenAPI::toJsonValue(m_script_s3_location));
    }
    if (m_executable_path_isSet) {
        obj.insert(QString("ExecutablePath"), ::OpenAPI::toJsonValue(m_executable_path));
    }
    if (m_executable_parameters_isSet) {
        obj.insert(QString("ExecutableParameters"), ::OpenAPI::toJsonValue(m_executable_parameters));
    }
    if (m_timeout_in_seconds_isSet) {
        obj.insert(QString("TimeoutInSeconds"), ::OpenAPI::toJsonValue(m_timeout_in_seconds));
    }
    return obj;
}

OAIScriptDetails_ScriptS3Location OAIAppBlock_PostSetupScriptDetails::getScriptS3Location() const {
    return m_script_s3_location;
}
void OAIAppBlock_PostSetupScriptDetails::setScriptS3Location(const OAIScriptDetails_ScriptS3Location &script_s3_location) {
    m_script_s3_location = script_s3_location;
    m_script_s3_location_isSet = true;
}

bool OAIAppBlock_PostSetupScriptDetails::is_script_s3_location_Set() const{
    return m_script_s3_location_isSet;
}

bool OAIAppBlock_PostSetupScriptDetails::is_script_s3_location_Valid() const{
    return m_script_s3_location_isValid;
}

QString OAIAppBlock_PostSetupScriptDetails::getExecutablePath() const {
    return m_executable_path;
}
void OAIAppBlock_PostSetupScriptDetails::setExecutablePath(const QString &executable_path) {
    m_executable_path = executable_path;
    m_executable_path_isSet = true;
}

bool OAIAppBlock_PostSetupScriptDetails::is_executable_path_Set() const{
    return m_executable_path_isSet;
}

bool OAIAppBlock_PostSetupScriptDetails::is_executable_path_Valid() const{
    return m_executable_path_isValid;
}

QString OAIAppBlock_PostSetupScriptDetails::getExecutableParameters() const {
    return m_executable_parameters;
}
void OAIAppBlock_PostSetupScriptDetails::setExecutableParameters(const QString &executable_parameters) {
    m_executable_parameters = executable_parameters;
    m_executable_parameters_isSet = true;
}

bool OAIAppBlock_PostSetupScriptDetails::is_executable_parameters_Set() const{
    return m_executable_parameters_isSet;
}

bool OAIAppBlock_PostSetupScriptDetails::is_executable_parameters_Valid() const{
    return m_executable_parameters_isValid;
}

qint32 OAIAppBlock_PostSetupScriptDetails::getTimeoutInSeconds() const {
    return m_timeout_in_seconds;
}
void OAIAppBlock_PostSetupScriptDetails::setTimeoutInSeconds(const qint32 &timeout_in_seconds) {
    m_timeout_in_seconds = timeout_in_seconds;
    m_timeout_in_seconds_isSet = true;
}

bool OAIAppBlock_PostSetupScriptDetails::is_timeout_in_seconds_Set() const{
    return m_timeout_in_seconds_isSet;
}

bool OAIAppBlock_PostSetupScriptDetails::is_timeout_in_seconds_Valid() const{
    return m_timeout_in_seconds_isValid;
}

bool OAIAppBlock_PostSetupScriptDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_script_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_executable_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_executable_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppBlock_PostSetupScriptDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_script_s3_location_isValid && m_executable_path_isValid && m_timeout_in_seconds_isValid && true;
}

} // namespace OpenAPI
