/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateApplicationRequest.h
 *
 * 
 */

#ifndef OAICreateApplicationRequest_H
#define OAICreateApplicationRequest_H

#include <QJsonObject>

#include "OAICreateApplicationRequest_IconS3Location.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateApplicationRequest_IconS3Location;

class OAICreateApplicationRequest : public OAIObject {
public:
    OAICreateApplicationRequest();
    OAICreateApplicationRequest(QString json);
    ~OAICreateApplicationRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAICreateApplicationRequest_IconS3Location getIconS3Location() const;
    void setIconS3Location(const OAICreateApplicationRequest_IconS3Location &icon_s3_location);
    bool is_icon_s3_location_Set() const;
    bool is_icon_s3_location_Valid() const;

    QString getLaunchPath() const;
    void setLaunchPath(const QString &launch_path);
    bool is_launch_path_Set() const;
    bool is_launch_path_Valid() const;

    QString getWorkingDirectory() const;
    void setWorkingDirectory(const QString &working_directory);
    bool is_working_directory_Set() const;
    bool is_working_directory_Valid() const;

    QString getLaunchParameters() const;
    void setLaunchParameters(const QString &launch_parameters);
    bool is_launch_parameters_Set() const;
    bool is_launch_parameters_Valid() const;

    QList getPlatforms() const;
    void setPlatforms(const QList &platforms);
    bool is_platforms_Set() const;
    bool is_platforms_Valid() const;

    QList getInstanceFamilies() const;
    void setInstanceFamilies(const QList &instance_families);
    bool is_instance_families_Set() const;
    bool is_instance_families_Valid() const;

    QString getAppBlockArn() const;
    void setAppBlockArn(const QString &app_block_arn);
    bool is_app_block_arn_Set() const;
    bool is_app_block_arn_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAICreateApplicationRequest_IconS3Location m_icon_s3_location;
    bool m_icon_s3_location_isSet;
    bool m_icon_s3_location_isValid;

    QString m_launch_path;
    bool m_launch_path_isSet;
    bool m_launch_path_isValid;

    QString m_working_directory;
    bool m_working_directory_isSet;
    bool m_working_directory_isValid;

    QString m_launch_parameters;
    bool m_launch_parameters_isSet;
    bool m_launch_parameters_isValid;

    QList m_platforms;
    bool m_platforms_isSet;
    bool m_platforms_isValid;

    QList m_instance_families;
    bool m_instance_families_isSet;
    bool m_instance_families_isValid;

    QString m_app_block_arn;
    bool m_app_block_arn_isSet;
    bool m_app_block_arn_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateApplicationRequest)

#endif // OAICreateApplicationRequest_H
