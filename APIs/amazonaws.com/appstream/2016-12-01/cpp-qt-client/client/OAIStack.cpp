/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStack::OAIStack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStack::OAIStack() {
    this->initializeModel();
}

OAIStack::~OAIStack() {}

void OAIStack::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_storage_connectors_isSet = false;
    m_storage_connectors_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_feedback_url_isSet = false;
    m_feedback_url_isValid = false;

    m_stack_errors_isSet = false;
    m_stack_errors_isValid = false;

    m_user_settings_isSet = false;
    m_user_settings_isValid = false;

    m_application_settings_isSet = false;
    m_application_settings_isValid = false;

    m_access_endpoints_isSet = false;
    m_access_endpoints_isValid = false;

    m_embed_host_domains_isSet = false;
    m_embed_host_domains_isValid = false;

    m_streaming_experience_settings_isSet = false;
    m_streaming_experience_settings_isValid = false;
}

void OAIStack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStack::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_storage_connectors_isValid = ::OpenAPI::fromJsonValue(m_storage_connectors, json[QString("StorageConnectors")]);
    m_storage_connectors_isSet = !json[QString("StorageConnectors")].isNull() && m_storage_connectors_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("RedirectURL")]);
    m_redirect_url_isSet = !json[QString("RedirectURL")].isNull() && m_redirect_url_isValid;

    m_feedback_url_isValid = ::OpenAPI::fromJsonValue(m_feedback_url, json[QString("FeedbackURL")]);
    m_feedback_url_isSet = !json[QString("FeedbackURL")].isNull() && m_feedback_url_isValid;

    m_stack_errors_isValid = ::OpenAPI::fromJsonValue(m_stack_errors, json[QString("StackErrors")]);
    m_stack_errors_isSet = !json[QString("StackErrors")].isNull() && m_stack_errors_isValid;

    m_user_settings_isValid = ::OpenAPI::fromJsonValue(m_user_settings, json[QString("UserSettings")]);
    m_user_settings_isSet = !json[QString("UserSettings")].isNull() && m_user_settings_isValid;

    m_application_settings_isValid = ::OpenAPI::fromJsonValue(m_application_settings, json[QString("ApplicationSettings")]);
    m_application_settings_isSet = !json[QString("ApplicationSettings")].isNull() && m_application_settings_isValid;

    m_access_endpoints_isValid = ::OpenAPI::fromJsonValue(m_access_endpoints, json[QString("AccessEndpoints")]);
    m_access_endpoints_isSet = !json[QString("AccessEndpoints")].isNull() && m_access_endpoints_isValid;

    m_embed_host_domains_isValid = ::OpenAPI::fromJsonValue(m_embed_host_domains, json[QString("EmbedHostDomains")]);
    m_embed_host_domains_isSet = !json[QString("EmbedHostDomains")].isNull() && m_embed_host_domains_isValid;

    m_streaming_experience_settings_isValid = ::OpenAPI::fromJsonValue(m_streaming_experience_settings, json[QString("StreamingExperienceSettings")]);
    m_streaming_experience_settings_isSet = !json[QString("StreamingExperienceSettings")].isNull() && m_streaming_experience_settings_isValid;
}

QString OAIStack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStack::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_storage_connectors.isSet()) {
        obj.insert(QString("StorageConnectors"), ::OpenAPI::toJsonValue(m_storage_connectors));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("RedirectURL"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_feedback_url_isSet) {
        obj.insert(QString("FeedbackURL"), ::OpenAPI::toJsonValue(m_feedback_url));
    }
    if (m_stack_errors.isSet()) {
        obj.insert(QString("StackErrors"), ::OpenAPI::toJsonValue(m_stack_errors));
    }
    if (m_user_settings.isSet()) {
        obj.insert(QString("UserSettings"), ::OpenAPI::toJsonValue(m_user_settings));
    }
    if (m_application_settings.isSet()) {
        obj.insert(QString("ApplicationSettings"), ::OpenAPI::toJsonValue(m_application_settings));
    }
    if (m_access_endpoints.isSet()) {
        obj.insert(QString("AccessEndpoints"), ::OpenAPI::toJsonValue(m_access_endpoints));
    }
    if (m_embed_host_domains.isSet()) {
        obj.insert(QString("EmbedHostDomains"), ::OpenAPI::toJsonValue(m_embed_host_domains));
    }
    if (m_streaming_experience_settings.isSet()) {
        obj.insert(QString("StreamingExperienceSettings"), ::OpenAPI::toJsonValue(m_streaming_experience_settings));
    }
    return obj;
}

QString OAIStack::getArn() const {
    return m_arn;
}
void OAIStack::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIStack::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIStack::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIStack::getName() const {
    return m_name;
}
void OAIStack::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStack::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStack::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStack::getDescription() const {
    return m_description;
}
void OAIStack::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStack::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStack::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStack::getDisplayName() const {
    return m_display_name;
}
void OAIStack::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIStack::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIStack::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QDateTime OAIStack::getCreatedTime() const {
    return m_created_time;
}
void OAIStack::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIStack::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIStack::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QList OAIStack::getStorageConnectors() const {
    return m_storage_connectors;
}
void OAIStack::setStorageConnectors(const QList &storage_connectors) {
    m_storage_connectors = storage_connectors;
    m_storage_connectors_isSet = true;
}

bool OAIStack::is_storage_connectors_Set() const{
    return m_storage_connectors_isSet;
}

bool OAIStack::is_storage_connectors_Valid() const{
    return m_storage_connectors_isValid;
}

QString OAIStack::getRedirectUrl() const {
    return m_redirect_url;
}
void OAIStack::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAIStack::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIStack::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

QString OAIStack::getFeedbackUrl() const {
    return m_feedback_url;
}
void OAIStack::setFeedbackUrl(const QString &feedback_url) {
    m_feedback_url = feedback_url;
    m_feedback_url_isSet = true;
}

bool OAIStack::is_feedback_url_Set() const{
    return m_feedback_url_isSet;
}

bool OAIStack::is_feedback_url_Valid() const{
    return m_feedback_url_isValid;
}

QList OAIStack::getStackErrors() const {
    return m_stack_errors;
}
void OAIStack::setStackErrors(const QList &stack_errors) {
    m_stack_errors = stack_errors;
    m_stack_errors_isSet = true;
}

bool OAIStack::is_stack_errors_Set() const{
    return m_stack_errors_isSet;
}

bool OAIStack::is_stack_errors_Valid() const{
    return m_stack_errors_isValid;
}

QList OAIStack::getUserSettings() const {
    return m_user_settings;
}
void OAIStack::setUserSettings(const QList &user_settings) {
    m_user_settings = user_settings;
    m_user_settings_isSet = true;
}

bool OAIStack::is_user_settings_Set() const{
    return m_user_settings_isSet;
}

bool OAIStack::is_user_settings_Valid() const{
    return m_user_settings_isValid;
}

OAIStack_ApplicationSettings OAIStack::getApplicationSettings() const {
    return m_application_settings;
}
void OAIStack::setApplicationSettings(const OAIStack_ApplicationSettings &application_settings) {
    m_application_settings = application_settings;
    m_application_settings_isSet = true;
}

bool OAIStack::is_application_settings_Set() const{
    return m_application_settings_isSet;
}

bool OAIStack::is_application_settings_Valid() const{
    return m_application_settings_isValid;
}

QList OAIStack::getAccessEndpoints() const {
    return m_access_endpoints;
}
void OAIStack::setAccessEndpoints(const QList &access_endpoints) {
    m_access_endpoints = access_endpoints;
    m_access_endpoints_isSet = true;
}

bool OAIStack::is_access_endpoints_Set() const{
    return m_access_endpoints_isSet;
}

bool OAIStack::is_access_endpoints_Valid() const{
    return m_access_endpoints_isValid;
}

QList OAIStack::getEmbedHostDomains() const {
    return m_embed_host_domains;
}
void OAIStack::setEmbedHostDomains(const QList &embed_host_domains) {
    m_embed_host_domains = embed_host_domains;
    m_embed_host_domains_isSet = true;
}

bool OAIStack::is_embed_host_domains_Set() const{
    return m_embed_host_domains_isSet;
}

bool OAIStack::is_embed_host_domains_Valid() const{
    return m_embed_host_domains_isValid;
}

OAICreateStackRequest_StreamingExperienceSettings OAIStack::getStreamingExperienceSettings() const {
    return m_streaming_experience_settings;
}
void OAIStack::setStreamingExperienceSettings(const OAICreateStackRequest_StreamingExperienceSettings &streaming_experience_settings) {
    m_streaming_experience_settings = streaming_experience_settings;
    m_streaming_experience_settings_isSet = true;
}

bool OAIStack::is_streaming_experience_settings_Set() const{
    return m_streaming_experience_settings_isSet;
}

bool OAIStack::is_streaming_experience_settings_Valid() const{
    return m_streaming_experience_settings_isValid;
}

bool OAIStack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_connectors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_embed_host_domains.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_experience_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStack::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
