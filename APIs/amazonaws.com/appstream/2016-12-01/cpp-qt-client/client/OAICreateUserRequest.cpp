/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUserRequest::OAICreateUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUserRequest::OAICreateUserRequest() {
    this->initializeModel();
}

OAICreateUserRequest::~OAICreateUserRequest() {}

void OAICreateUserRequest::initializeModel() {

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_message_action_isSet = false;
    m_message_action_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;
}

void OAICreateUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUserRequest::fromJsonObject(QJsonObject json) {

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;

    m_message_action_isValid = ::OpenAPI::fromJsonValue(m_message_action, json[QString("MessageAction")]);
    m_message_action_isSet = !json[QString("MessageAction")].isNull() && m_message_action_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("AuthenticationType")]);
    m_authentication_type_isSet = !json[QString("AuthenticationType")].isNull() && m_authentication_type_isValid;
}

QString OAICreateUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_message_action.isSet()) {
        obj.insert(QString("MessageAction"), ::OpenAPI::toJsonValue(m_message_action));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_authentication_type.isSet()) {
        obj.insert(QString("AuthenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    return obj;
}

QString OAICreateUserRequest::getUserName() const {
    return m_user_name;
}
void OAICreateUserRequest::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAICreateUserRequest::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAICreateUserRequest::is_user_name_Valid() const{
    return m_user_name_isValid;
}

OAIMessageAction OAICreateUserRequest::getMessageAction() const {
    return m_message_action;
}
void OAICreateUserRequest::setMessageAction(const OAIMessageAction &message_action) {
    m_message_action = message_action;
    m_message_action_isSet = true;
}

bool OAICreateUserRequest::is_message_action_Set() const{
    return m_message_action_isSet;
}

bool OAICreateUserRequest::is_message_action_Valid() const{
    return m_message_action_isValid;
}

QString OAICreateUserRequest::getFirstName() const {
    return m_first_name;
}
void OAICreateUserRequest::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAICreateUserRequest::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAICreateUserRequest::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAICreateUserRequest::getLastName() const {
    return m_last_name;
}
void OAICreateUserRequest::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAICreateUserRequest::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAICreateUserRequest::is_last_name_Valid() const{
    return m_last_name_isValid;
}

OAIAuthenticationType OAICreateUserRequest::getAuthenticationType() const {
    return m_authentication_type;
}
void OAICreateUserRequest::setAuthenticationType(const OAIAuthenticationType &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAICreateUserRequest::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAICreateUserRequest::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

bool OAICreateUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_name_isValid && m_authentication_type_isValid && true;
}

} // namespace OpenAPI
