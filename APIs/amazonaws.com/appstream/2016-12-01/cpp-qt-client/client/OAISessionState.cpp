/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionState::OAISessionState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionState::OAISessionState() {
    this->initializeModel();
}

OAISessionState::~OAISessionState() {}

void OAISessionState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISessionState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISessionState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISessionState::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAISessionState::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAISessionState::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISessionState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISessionState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISessionState::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAISessionState::PENDING:
            val = "PENDING";
            break;
        case eOAISessionState::EXPIRED:
            val = "EXPIRED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISessionState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISessionState::eOAISessionState OAISessionState::getValue() const {
    return m_value;
}

void OAISessionState::setValue(const OAISessionState::eOAISessionState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISessionState::isSet() const {
    
    return m_value_isSet;
}

bool OAISessionState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
