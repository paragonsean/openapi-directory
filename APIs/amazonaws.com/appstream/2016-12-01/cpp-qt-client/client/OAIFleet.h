/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFleet.h
 *
 * Describes a fleet.
 */

#ifndef OAIFleet_H
#define OAIFleet_H

#include <QJsonObject>

#include "OAICreateFleetRequest_SessionScriptS3Location.h"
#include "OAIFleetState.h"
#include "OAIFleetType.h"
#include "OAIFleet_ComputeCapacityStatus.h"
#include "OAIFleet_VpcConfig.h"
#include "OAIPlatformType.h"
#include "OAIStreamView.h"
#include "OAIUpdateFleetRequest_DomainJoinInfo.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFleet_ComputeCapacityStatus;
class OAIFleet_VpcConfig;
class OAIUpdateFleetRequest_DomainJoinInfo;
class OAICreateFleetRequest_SessionScriptS3Location;

class OAIFleet : public OAIObject {
public:
    OAIFleet();
    OAIFleet(QString json);
    ~OAIFleet() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getImageName() const;
    void setImageName(const QString &image_name);
    bool is_image_name_Set() const;
    bool is_image_name_Valid() const;

    QString getImageArn() const;
    void setImageArn(const QString &image_arn);
    bool is_image_arn_Set() const;
    bool is_image_arn_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    OAIFleetType getFleetType() const;
    void setFleetType(const OAIFleetType &fleet_type);
    bool is_fleet_type_Set() const;
    bool is_fleet_type_Valid() const;

    OAIFleet_ComputeCapacityStatus getComputeCapacityStatus() const;
    void setComputeCapacityStatus(const OAIFleet_ComputeCapacityStatus &compute_capacity_status);
    bool is_compute_capacity_status_Set() const;
    bool is_compute_capacity_status_Valid() const;

    qint32 getMaxUserDurationInSeconds() const;
    void setMaxUserDurationInSeconds(const qint32 &max_user_duration_in_seconds);
    bool is_max_user_duration_in_seconds_Set() const;
    bool is_max_user_duration_in_seconds_Valid() const;

    qint32 getDisconnectTimeoutInSeconds() const;
    void setDisconnectTimeoutInSeconds(const qint32 &disconnect_timeout_in_seconds);
    bool is_disconnect_timeout_in_seconds_Set() const;
    bool is_disconnect_timeout_in_seconds_Valid() const;

    OAIFleetState getState() const;
    void setState(const OAIFleetState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIFleet_VpcConfig getVpcConfig() const;
    void setVpcConfig(const OAIFleet_VpcConfig &vpc_config);
    bool is_vpc_config_Set() const;
    bool is_vpc_config_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QList getFleetErrors() const;
    void setFleetErrors(const QList &fleet_errors);
    bool is_fleet_errors_Set() const;
    bool is_fleet_errors_Valid() const;

    bool getEnableDefaultInternetAccess() const;
    void setEnableDefaultInternetAccess(const bool &enable_default_internet_access);
    bool is_enable_default_internet_access_Set() const;
    bool is_enable_default_internet_access_Valid() const;

    OAIUpdateFleetRequest_DomainJoinInfo getDomainJoinInfo() const;
    void setDomainJoinInfo(const OAIUpdateFleetRequest_DomainJoinInfo &domain_join_info);
    bool is_domain_join_info_Set() const;
    bool is_domain_join_info_Valid() const;

    qint32 getIdleDisconnectTimeoutInSeconds() const;
    void setIdleDisconnectTimeoutInSeconds(const qint32 &idle_disconnect_timeout_in_seconds);
    bool is_idle_disconnect_timeout_in_seconds_Set() const;
    bool is_idle_disconnect_timeout_in_seconds_Valid() const;

    QString getIamRoleArn() const;
    void setIamRoleArn(const QString &iam_role_arn);
    bool is_iam_role_arn_Set() const;
    bool is_iam_role_arn_Valid() const;

    OAIStreamView getStreamView() const;
    void setStreamView(const OAIStreamView &stream_view);
    bool is_stream_view_Set() const;
    bool is_stream_view_Valid() const;

    OAIPlatformType getPlatform() const;
    void setPlatform(const OAIPlatformType &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    qint32 getMaxConcurrentSessions() const;
    void setMaxConcurrentSessions(const qint32 &max_concurrent_sessions);
    bool is_max_concurrent_sessions_Set() const;
    bool is_max_concurrent_sessions_Valid() const;

    QList getUsbDeviceFilterStrings() const;
    void setUsbDeviceFilterStrings(const QList &usb_device_filter_strings);
    bool is_usb_device_filter_strings_Set() const;
    bool is_usb_device_filter_strings_Valid() const;

    OAICreateFleetRequest_SessionScriptS3Location getSessionScriptS3Location() const;
    void setSessionScriptS3Location(const OAICreateFleetRequest_SessionScriptS3Location &session_script_s3_location);
    bool is_session_script_s3_location_Set() const;
    bool is_session_script_s3_location_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_image_name;
    bool m_image_name_isSet;
    bool m_image_name_isValid;

    QString m_image_arn;
    bool m_image_arn_isSet;
    bool m_image_arn_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    OAIFleetType m_fleet_type;
    bool m_fleet_type_isSet;
    bool m_fleet_type_isValid;

    OAIFleet_ComputeCapacityStatus m_compute_capacity_status;
    bool m_compute_capacity_status_isSet;
    bool m_compute_capacity_status_isValid;

    qint32 m_max_user_duration_in_seconds;
    bool m_max_user_duration_in_seconds_isSet;
    bool m_max_user_duration_in_seconds_isValid;

    qint32 m_disconnect_timeout_in_seconds;
    bool m_disconnect_timeout_in_seconds_isSet;
    bool m_disconnect_timeout_in_seconds_isValid;

    OAIFleetState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIFleet_VpcConfig m_vpc_config;
    bool m_vpc_config_isSet;
    bool m_vpc_config_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QList m_fleet_errors;
    bool m_fleet_errors_isSet;
    bool m_fleet_errors_isValid;

    bool m_enable_default_internet_access;
    bool m_enable_default_internet_access_isSet;
    bool m_enable_default_internet_access_isValid;

    OAIUpdateFleetRequest_DomainJoinInfo m_domain_join_info;
    bool m_domain_join_info_isSet;
    bool m_domain_join_info_isValid;

    qint32 m_idle_disconnect_timeout_in_seconds;
    bool m_idle_disconnect_timeout_in_seconds_isSet;
    bool m_idle_disconnect_timeout_in_seconds_isValid;

    QString m_iam_role_arn;
    bool m_iam_role_arn_isSet;
    bool m_iam_role_arn_isValid;

    OAIStreamView m_stream_view;
    bool m_stream_view_isSet;
    bool m_stream_view_isValid;

    OAIPlatformType m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    qint32 m_max_concurrent_sessions;
    bool m_max_concurrent_sessions_isSet;
    bool m_max_concurrent_sessions_isValid;

    QList m_usb_device_filter_strings;
    bool m_usb_device_filter_strings_isSet;
    bool m_usb_device_filter_strings_isValid;

    OAICreateFleetRequest_SessionScriptS3Location m_session_script_s3_location;
    bool m_session_script_s3_location_isSet;
    bool m_session_script_s3_location_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFleet)

#endif // OAIFleet_H
