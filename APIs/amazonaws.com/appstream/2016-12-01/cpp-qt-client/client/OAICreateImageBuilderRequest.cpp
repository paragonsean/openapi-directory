/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateImageBuilderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateImageBuilderRequest::OAICreateImageBuilderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateImageBuilderRequest::OAICreateImageBuilderRequest() {
    this->initializeModel();
}

OAICreateImageBuilderRequest::~OAICreateImageBuilderRequest() {}

void OAICreateImageBuilderRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_image_arn_isSet = false;
    m_image_arn_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_enable_default_internet_access_isSet = false;
    m_enable_default_internet_access_isValid = false;

    m_domain_join_info_isSet = false;
    m_domain_join_info_isValid = false;

    m_appstream_agent_version_isSet = false;
    m_appstream_agent_version_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_access_endpoints_isSet = false;
    m_access_endpoints_isValid = false;
}

void OAICreateImageBuilderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateImageBuilderRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("ImageName")]);
    m_image_name_isSet = !json[QString("ImageName")].isNull() && m_image_name_isValid;

    m_image_arn_isValid = ::OpenAPI::fromJsonValue(m_image_arn, json[QString("ImageArn")]);
    m_image_arn_isSet = !json[QString("ImageArn")].isNull() && m_image_arn_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("VpcConfig")]);
    m_vpc_config_isSet = !json[QString("VpcConfig")].isNull() && m_vpc_config_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_enable_default_internet_access_isValid = ::OpenAPI::fromJsonValue(m_enable_default_internet_access, json[QString("EnableDefaultInternetAccess")]);
    m_enable_default_internet_access_isSet = !json[QString("EnableDefaultInternetAccess")].isNull() && m_enable_default_internet_access_isValid;

    m_domain_join_info_isValid = ::OpenAPI::fromJsonValue(m_domain_join_info, json[QString("DomainJoinInfo")]);
    m_domain_join_info_isSet = !json[QString("DomainJoinInfo")].isNull() && m_domain_join_info_isValid;

    m_appstream_agent_version_isValid = ::OpenAPI::fromJsonValue(m_appstream_agent_version, json[QString("AppstreamAgentVersion")]);
    m_appstream_agent_version_isSet = !json[QString("AppstreamAgentVersion")].isNull() && m_appstream_agent_version_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_access_endpoints_isValid = ::OpenAPI::fromJsonValue(m_access_endpoints, json[QString("AccessEndpoints")]);
    m_access_endpoints_isSet = !json[QString("AccessEndpoints")].isNull() && m_access_endpoints_isValid;
}

QString OAICreateImageBuilderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateImageBuilderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_image_name_isSet) {
        obj.insert(QString("ImageName"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_image_arn_isSet) {
        obj.insert(QString("ImageArn"), ::OpenAPI::toJsonValue(m_image_arn));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("VpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_enable_default_internet_access_isSet) {
        obj.insert(QString("EnableDefaultInternetAccess"), ::OpenAPI::toJsonValue(m_enable_default_internet_access));
    }
    if (m_domain_join_info.isSet()) {
        obj.insert(QString("DomainJoinInfo"), ::OpenAPI::toJsonValue(m_domain_join_info));
    }
    if (m_appstream_agent_version_isSet) {
        obj.insert(QString("AppstreamAgentVersion"), ::OpenAPI::toJsonValue(m_appstream_agent_version));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_access_endpoints.isSet()) {
        obj.insert(QString("AccessEndpoints"), ::OpenAPI::toJsonValue(m_access_endpoints));
    }
    return obj;
}

QString OAICreateImageBuilderRequest::getName() const {
    return m_name;
}
void OAICreateImageBuilderRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateImageBuilderRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateImageBuilderRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateImageBuilderRequest::getImageName() const {
    return m_image_name;
}
void OAICreateImageBuilderRequest::setImageName(const QString &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAICreateImageBuilderRequest::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAICreateImageBuilderRequest::is_image_name_Valid() const{
    return m_image_name_isValid;
}

QString OAICreateImageBuilderRequest::getImageArn() const {
    return m_image_arn;
}
void OAICreateImageBuilderRequest::setImageArn(const QString &image_arn) {
    m_image_arn = image_arn;
    m_image_arn_isSet = true;
}

bool OAICreateImageBuilderRequest::is_image_arn_Set() const{
    return m_image_arn_isSet;
}

bool OAICreateImageBuilderRequest::is_image_arn_Valid() const{
    return m_image_arn_isValid;
}

QString OAICreateImageBuilderRequest::getInstanceType() const {
    return m_instance_type;
}
void OAICreateImageBuilderRequest::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAICreateImageBuilderRequest::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAICreateImageBuilderRequest::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAICreateImageBuilderRequest::getDescription() const {
    return m_description;
}
void OAICreateImageBuilderRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateImageBuilderRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateImageBuilderRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateImageBuilderRequest::getDisplayName() const {
    return m_display_name;
}
void OAICreateImageBuilderRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICreateImageBuilderRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICreateImageBuilderRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAICreateImageBuilderRequest_VpcConfig OAICreateImageBuilderRequest::getVpcConfig() const {
    return m_vpc_config;
}
void OAICreateImageBuilderRequest::setVpcConfig(const OAICreateImageBuilderRequest_VpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAICreateImageBuilderRequest::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAICreateImageBuilderRequest::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

QString OAICreateImageBuilderRequest::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAICreateImageBuilderRequest::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAICreateImageBuilderRequest::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAICreateImageBuilderRequest::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

bool OAICreateImageBuilderRequest::getEnableDefaultInternetAccess() const {
    return m_enable_default_internet_access;
}
void OAICreateImageBuilderRequest::setEnableDefaultInternetAccess(const bool &enable_default_internet_access) {
    m_enable_default_internet_access = enable_default_internet_access;
    m_enable_default_internet_access_isSet = true;
}

bool OAICreateImageBuilderRequest::is_enable_default_internet_access_Set() const{
    return m_enable_default_internet_access_isSet;
}

bool OAICreateImageBuilderRequest::is_enable_default_internet_access_Valid() const{
    return m_enable_default_internet_access_isValid;
}

OAICreateImageBuilderRequest_DomainJoinInfo OAICreateImageBuilderRequest::getDomainJoinInfo() const {
    return m_domain_join_info;
}
void OAICreateImageBuilderRequest::setDomainJoinInfo(const OAICreateImageBuilderRequest_DomainJoinInfo &domain_join_info) {
    m_domain_join_info = domain_join_info;
    m_domain_join_info_isSet = true;
}

bool OAICreateImageBuilderRequest::is_domain_join_info_Set() const{
    return m_domain_join_info_isSet;
}

bool OAICreateImageBuilderRequest::is_domain_join_info_Valid() const{
    return m_domain_join_info_isValid;
}

QString OAICreateImageBuilderRequest::getAppstreamAgentVersion() const {
    return m_appstream_agent_version;
}
void OAICreateImageBuilderRequest::setAppstreamAgentVersion(const QString &appstream_agent_version) {
    m_appstream_agent_version = appstream_agent_version;
    m_appstream_agent_version_isSet = true;
}

bool OAICreateImageBuilderRequest::is_appstream_agent_version_Set() const{
    return m_appstream_agent_version_isSet;
}

bool OAICreateImageBuilderRequest::is_appstream_agent_version_Valid() const{
    return m_appstream_agent_version_isValid;
}

QMap OAICreateImageBuilderRequest::getTags() const {
    return m_tags;
}
void OAICreateImageBuilderRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateImageBuilderRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateImageBuilderRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAICreateImageBuilderRequest::getAccessEndpoints() const {
    return m_access_endpoints;
}
void OAICreateImageBuilderRequest::setAccessEndpoints(const QList &access_endpoints) {
    m_access_endpoints = access_endpoints;
    m_access_endpoints_isSet = true;
}

bool OAICreateImageBuilderRequest::is_access_endpoints_Set() const{
    return m_access_endpoints_isSet;
}

bool OAICreateImageBuilderRequest::is_access_endpoints_Valid() const{
    return m_access_endpoints_isValid;
}

bool OAICreateImageBuilderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_default_internet_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_join_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_appstream_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateImageBuilderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_instance_type_isValid && true;
}

} // namespace OpenAPI
