/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageBuilder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageBuilder::OAIImageBuilder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageBuilder::OAIImageBuilder() {
    this->initializeModel();
}

OAIImageBuilder::~OAIImageBuilder() {}

void OAIImageBuilder::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_image_arn_isSet = false;
    m_image_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_change_reason_isSet = false;
    m_state_change_reason_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_enable_default_internet_access_isSet = false;
    m_enable_default_internet_access_isValid = false;

    m_domain_join_info_isSet = false;
    m_domain_join_info_isValid = false;

    m_network_access_configuration_isSet = false;
    m_network_access_configuration_isValid = false;

    m_image_builder_errors_isSet = false;
    m_image_builder_errors_isValid = false;

    m_appstream_agent_version_isSet = false;
    m_appstream_agent_version_isValid = false;

    m_access_endpoints_isSet = false;
    m_access_endpoints_isValid = false;
}

void OAIImageBuilder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageBuilder::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_image_arn_isValid = ::OpenAPI::fromJsonValue(m_image_arn, json[QString("ImageArn")]);
    m_image_arn_isSet = !json[QString("ImageArn")].isNull() && m_image_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("VpcConfig")]);
    m_vpc_config_isSet = !json[QString("VpcConfig")].isNull() && m_vpc_config_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("Platform")]);
    m_platform_isSet = !json[QString("Platform")].isNull() && m_platform_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_state_change_reason_isValid = ::OpenAPI::fromJsonValue(m_state_change_reason, json[QString("StateChangeReason")]);
    m_state_change_reason_isSet = !json[QString("StateChangeReason")].isNull() && m_state_change_reason_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_enable_default_internet_access_isValid = ::OpenAPI::fromJsonValue(m_enable_default_internet_access, json[QString("EnableDefaultInternetAccess")]);
    m_enable_default_internet_access_isSet = !json[QString("EnableDefaultInternetAccess")].isNull() && m_enable_default_internet_access_isValid;

    m_domain_join_info_isValid = ::OpenAPI::fromJsonValue(m_domain_join_info, json[QString("DomainJoinInfo")]);
    m_domain_join_info_isSet = !json[QString("DomainJoinInfo")].isNull() && m_domain_join_info_isValid;

    m_network_access_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_access_configuration, json[QString("NetworkAccessConfiguration")]);
    m_network_access_configuration_isSet = !json[QString("NetworkAccessConfiguration")].isNull() && m_network_access_configuration_isValid;

    m_image_builder_errors_isValid = ::OpenAPI::fromJsonValue(m_image_builder_errors, json[QString("ImageBuilderErrors")]);
    m_image_builder_errors_isSet = !json[QString("ImageBuilderErrors")].isNull() && m_image_builder_errors_isValid;

    m_appstream_agent_version_isValid = ::OpenAPI::fromJsonValue(m_appstream_agent_version, json[QString("AppstreamAgentVersion")]);
    m_appstream_agent_version_isSet = !json[QString("AppstreamAgentVersion")].isNull() && m_appstream_agent_version_isValid;

    m_access_endpoints_isValid = ::OpenAPI::fromJsonValue(m_access_endpoints, json[QString("AccessEndpoints")]);
    m_access_endpoints_isSet = !json[QString("AccessEndpoints")].isNull() && m_access_endpoints_isValid;
}

QString OAIImageBuilder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageBuilder::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_image_arn_isSet) {
        obj.insert(QString("ImageArn"), ::OpenAPI::toJsonValue(m_image_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("VpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("Platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_change_reason.isSet()) {
        obj.insert(QString("StateChangeReason"), ::OpenAPI::toJsonValue(m_state_change_reason));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_enable_default_internet_access_isSet) {
        obj.insert(QString("EnableDefaultInternetAccess"), ::OpenAPI::toJsonValue(m_enable_default_internet_access));
    }
    if (m_domain_join_info.isSet()) {
        obj.insert(QString("DomainJoinInfo"), ::OpenAPI::toJsonValue(m_domain_join_info));
    }
    if (m_network_access_configuration.isSet()) {
        obj.insert(QString("NetworkAccessConfiguration"), ::OpenAPI::toJsonValue(m_network_access_configuration));
    }
    if (m_image_builder_errors.isSet()) {
        obj.insert(QString("ImageBuilderErrors"), ::OpenAPI::toJsonValue(m_image_builder_errors));
    }
    if (m_appstream_agent_version_isSet) {
        obj.insert(QString("AppstreamAgentVersion"), ::OpenAPI::toJsonValue(m_appstream_agent_version));
    }
    if (m_access_endpoints.isSet()) {
        obj.insert(QString("AccessEndpoints"), ::OpenAPI::toJsonValue(m_access_endpoints));
    }
    return obj;
}

QString OAIImageBuilder::getName() const {
    return m_name;
}
void OAIImageBuilder::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageBuilder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageBuilder::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImageBuilder::getArn() const {
    return m_arn;
}
void OAIImageBuilder::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIImageBuilder::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIImageBuilder::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIImageBuilder::getImageArn() const {
    return m_image_arn;
}
void OAIImageBuilder::setImageArn(const QString &image_arn) {
    m_image_arn = image_arn;
    m_image_arn_isSet = true;
}

bool OAIImageBuilder::is_image_arn_Set() const{
    return m_image_arn_isSet;
}

bool OAIImageBuilder::is_image_arn_Valid() const{
    return m_image_arn_isValid;
}

QString OAIImageBuilder::getDescription() const {
    return m_description;
}
void OAIImageBuilder::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImageBuilder::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImageBuilder::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIImageBuilder::getDisplayName() const {
    return m_display_name;
}
void OAIImageBuilder::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIImageBuilder::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIImageBuilder::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIImageBuilder_VpcConfig OAIImageBuilder::getVpcConfig() const {
    return m_vpc_config;
}
void OAIImageBuilder::setVpcConfig(const OAIImageBuilder_VpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIImageBuilder::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIImageBuilder::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

QString OAIImageBuilder::getInstanceType() const {
    return m_instance_type;
}
void OAIImageBuilder::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIImageBuilder::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIImageBuilder::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

OAIPlatformType OAIImageBuilder::getPlatform() const {
    return m_platform;
}
void OAIImageBuilder::setPlatform(const OAIPlatformType &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIImageBuilder::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIImageBuilder::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIImageBuilder::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIImageBuilder::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIImageBuilder::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIImageBuilder::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

OAIImageBuilderState OAIImageBuilder::getState() const {
    return m_state;
}
void OAIImageBuilder::setState(const OAIImageBuilderState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIImageBuilder::is_state_Set() const{
    return m_state_isSet;
}

bool OAIImageBuilder::is_state_Valid() const{
    return m_state_isValid;
}

OAIImageBuilder_StateChangeReason OAIImageBuilder::getStateChangeReason() const {
    return m_state_change_reason;
}
void OAIImageBuilder::setStateChangeReason(const OAIImageBuilder_StateChangeReason &state_change_reason) {
    m_state_change_reason = state_change_reason;
    m_state_change_reason_isSet = true;
}

bool OAIImageBuilder::is_state_change_reason_Set() const{
    return m_state_change_reason_isSet;
}

bool OAIImageBuilder::is_state_change_reason_Valid() const{
    return m_state_change_reason_isValid;
}

QDateTime OAIImageBuilder::getCreatedTime() const {
    return m_created_time;
}
void OAIImageBuilder::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIImageBuilder::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIImageBuilder::is_created_time_Valid() const{
    return m_created_time_isValid;
}

bool OAIImageBuilder::getEnableDefaultInternetAccess() const {
    return m_enable_default_internet_access;
}
void OAIImageBuilder::setEnableDefaultInternetAccess(const bool &enable_default_internet_access) {
    m_enable_default_internet_access = enable_default_internet_access;
    m_enable_default_internet_access_isSet = true;
}

bool OAIImageBuilder::is_enable_default_internet_access_Set() const{
    return m_enable_default_internet_access_isSet;
}

bool OAIImageBuilder::is_enable_default_internet_access_Valid() const{
    return m_enable_default_internet_access_isValid;
}

OAICreateImageBuilderRequest_DomainJoinInfo OAIImageBuilder::getDomainJoinInfo() const {
    return m_domain_join_info;
}
void OAIImageBuilder::setDomainJoinInfo(const OAICreateImageBuilderRequest_DomainJoinInfo &domain_join_info) {
    m_domain_join_info = domain_join_info;
    m_domain_join_info_isSet = true;
}

bool OAIImageBuilder::is_domain_join_info_Set() const{
    return m_domain_join_info_isSet;
}

bool OAIImageBuilder::is_domain_join_info_Valid() const{
    return m_domain_join_info_isValid;
}

OAINetworkAccessConfiguration OAIImageBuilder::getNetworkAccessConfiguration() const {
    return m_network_access_configuration;
}
void OAIImageBuilder::setNetworkAccessConfiguration(const OAINetworkAccessConfiguration &network_access_configuration) {
    m_network_access_configuration = network_access_configuration;
    m_network_access_configuration_isSet = true;
}

bool OAIImageBuilder::is_network_access_configuration_Set() const{
    return m_network_access_configuration_isSet;
}

bool OAIImageBuilder::is_network_access_configuration_Valid() const{
    return m_network_access_configuration_isValid;
}

QList OAIImageBuilder::getImageBuilderErrors() const {
    return m_image_builder_errors;
}
void OAIImageBuilder::setImageBuilderErrors(const QList &image_builder_errors) {
    m_image_builder_errors = image_builder_errors;
    m_image_builder_errors_isSet = true;
}

bool OAIImageBuilder::is_image_builder_errors_Set() const{
    return m_image_builder_errors_isSet;
}

bool OAIImageBuilder::is_image_builder_errors_Valid() const{
    return m_image_builder_errors_isValid;
}

QString OAIImageBuilder::getAppstreamAgentVersion() const {
    return m_appstream_agent_version;
}
void OAIImageBuilder::setAppstreamAgentVersion(const QString &appstream_agent_version) {
    m_appstream_agent_version = appstream_agent_version;
    m_appstream_agent_version_isSet = true;
}

bool OAIImageBuilder::is_appstream_agent_version_Set() const{
    return m_appstream_agent_version_isSet;
}

bool OAIImageBuilder::is_appstream_agent_version_Valid() const{
    return m_appstream_agent_version_isValid;
}

QList OAIImageBuilder::getAccessEndpoints() const {
    return m_access_endpoints;
}
void OAIImageBuilder::setAccessEndpoints(const QList &access_endpoints) {
    m_access_endpoints = access_endpoints;
    m_access_endpoints_isSet = true;
}

bool OAIImageBuilder::is_access_endpoints_Set() const{
    return m_access_endpoints_isSet;
}

bool OAIImageBuilder::is_access_endpoints_Valid() const{
    return m_access_endpoints_isValid;
}

bool OAIImageBuilder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_change_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_default_internet_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_join_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_access_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_builder_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_appstream_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageBuilder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
