/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICopyImageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICopyImageRequest::OAICopyImageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICopyImageRequest::OAICopyImageRequest() {
    this->initializeModel();
}

OAICopyImageRequest::~OAICopyImageRequest() {}

void OAICopyImageRequest::initializeModel() {

    m_source_image_name_isSet = false;
    m_source_image_name_isValid = false;

    m_destination_image_name_isSet = false;
    m_destination_image_name_isValid = false;

    m_destination_region_isSet = false;
    m_destination_region_isValid = false;

    m_destination_image_description_isSet = false;
    m_destination_image_description_isValid = false;
}

void OAICopyImageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICopyImageRequest::fromJsonObject(QJsonObject json) {

    m_source_image_name_isValid = ::OpenAPI::fromJsonValue(m_source_image_name, json[QString("SourceImageName")]);
    m_source_image_name_isSet = !json[QString("SourceImageName")].isNull() && m_source_image_name_isValid;

    m_destination_image_name_isValid = ::OpenAPI::fromJsonValue(m_destination_image_name, json[QString("DestinationImageName")]);
    m_destination_image_name_isSet = !json[QString("DestinationImageName")].isNull() && m_destination_image_name_isValid;

    m_destination_region_isValid = ::OpenAPI::fromJsonValue(m_destination_region, json[QString("DestinationRegion")]);
    m_destination_region_isSet = !json[QString("DestinationRegion")].isNull() && m_destination_region_isValid;

    m_destination_image_description_isValid = ::OpenAPI::fromJsonValue(m_destination_image_description, json[QString("DestinationImageDescription")]);
    m_destination_image_description_isSet = !json[QString("DestinationImageDescription")].isNull() && m_destination_image_description_isValid;
}

QString OAICopyImageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICopyImageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_source_image_name_isSet) {
        obj.insert(QString("SourceImageName"), ::OpenAPI::toJsonValue(m_source_image_name));
    }
    if (m_destination_image_name_isSet) {
        obj.insert(QString("DestinationImageName"), ::OpenAPI::toJsonValue(m_destination_image_name));
    }
    if (m_destination_region_isSet) {
        obj.insert(QString("DestinationRegion"), ::OpenAPI::toJsonValue(m_destination_region));
    }
    if (m_destination_image_description_isSet) {
        obj.insert(QString("DestinationImageDescription"), ::OpenAPI::toJsonValue(m_destination_image_description));
    }
    return obj;
}

QString OAICopyImageRequest::getSourceImageName() const {
    return m_source_image_name;
}
void OAICopyImageRequest::setSourceImageName(const QString &source_image_name) {
    m_source_image_name = source_image_name;
    m_source_image_name_isSet = true;
}

bool OAICopyImageRequest::is_source_image_name_Set() const{
    return m_source_image_name_isSet;
}

bool OAICopyImageRequest::is_source_image_name_Valid() const{
    return m_source_image_name_isValid;
}

QString OAICopyImageRequest::getDestinationImageName() const {
    return m_destination_image_name;
}
void OAICopyImageRequest::setDestinationImageName(const QString &destination_image_name) {
    m_destination_image_name = destination_image_name;
    m_destination_image_name_isSet = true;
}

bool OAICopyImageRequest::is_destination_image_name_Set() const{
    return m_destination_image_name_isSet;
}

bool OAICopyImageRequest::is_destination_image_name_Valid() const{
    return m_destination_image_name_isValid;
}

QString OAICopyImageRequest::getDestinationRegion() const {
    return m_destination_region;
}
void OAICopyImageRequest::setDestinationRegion(const QString &destination_region) {
    m_destination_region = destination_region;
    m_destination_region_isSet = true;
}

bool OAICopyImageRequest::is_destination_region_Set() const{
    return m_destination_region_isSet;
}

bool OAICopyImageRequest::is_destination_region_Valid() const{
    return m_destination_region_isValid;
}

QString OAICopyImageRequest::getDestinationImageDescription() const {
    return m_destination_image_description;
}
void OAICopyImageRequest::setDestinationImageDescription(const QString &destination_image_description) {
    m_destination_image_description = destination_image_description;
    m_destination_image_description_isSet = true;
}

bool OAICopyImageRequest::is_destination_image_description_Set() const{
    return m_destination_image_description_isSet;
}

bool OAICopyImageRequest::is_destination_image_description_Valid() const{
    return m_destination_image_description_isValid;
}

bool OAICopyImageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_image_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICopyImageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_image_name_isValid && m_destination_image_name_isValid && m_destination_region_isValid && true;
}

} // namespace OpenAPI
