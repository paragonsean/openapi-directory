/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDirectoryConfigResult_DirectoryConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDirectoryConfigResult_DirectoryConfig::OAIUpdateDirectoryConfigResult_DirectoryConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDirectoryConfigResult_DirectoryConfig::OAIUpdateDirectoryConfigResult_DirectoryConfig() {
    this->initializeModel();
}

OAIUpdateDirectoryConfigResult_DirectoryConfig::~OAIUpdateDirectoryConfigResult_DirectoryConfig() {}

void OAIUpdateDirectoryConfigResult_DirectoryConfig::initializeModel() {

    m_directory_name_isSet = false;
    m_directory_name_isValid = false;

    m_organizational_unit_distinguished_names_isSet = false;
    m_organizational_unit_distinguished_names_isValid = false;

    m_service_account_credentials_isSet = false;
    m_service_account_credentials_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_certificate_based_auth_properties_isSet = false;
    m_certificate_based_auth_properties_isValid = false;
}

void OAIUpdateDirectoryConfigResult_DirectoryConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDirectoryConfigResult_DirectoryConfig::fromJsonObject(QJsonObject json) {

    m_directory_name_isValid = ::OpenAPI::fromJsonValue(m_directory_name, json[QString("DirectoryName")]);
    m_directory_name_isSet = !json[QString("DirectoryName")].isNull() && m_directory_name_isValid;

    m_organizational_unit_distinguished_names_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_distinguished_names, json[QString("OrganizationalUnitDistinguishedNames")]);
    m_organizational_unit_distinguished_names_isSet = !json[QString("OrganizationalUnitDistinguishedNames")].isNull() && m_organizational_unit_distinguished_names_isValid;

    m_service_account_credentials_isValid = ::OpenAPI::fromJsonValue(m_service_account_credentials, json[QString("ServiceAccountCredentials")]);
    m_service_account_credentials_isSet = !json[QString("ServiceAccountCredentials")].isNull() && m_service_account_credentials_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_certificate_based_auth_properties_isValid = ::OpenAPI::fromJsonValue(m_certificate_based_auth_properties, json[QString("CertificateBasedAuthProperties")]);
    m_certificate_based_auth_properties_isSet = !json[QString("CertificateBasedAuthProperties")].isNull() && m_certificate_based_auth_properties_isValid;
}

QString OAIUpdateDirectoryConfigResult_DirectoryConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDirectoryConfigResult_DirectoryConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_directory_name_isSet) {
        obj.insert(QString("DirectoryName"), ::OpenAPI::toJsonValue(m_directory_name));
    }
    if (m_organizational_unit_distinguished_names.isSet()) {
        obj.insert(QString("OrganizationalUnitDistinguishedNames"), ::OpenAPI::toJsonValue(m_organizational_unit_distinguished_names));
    }
    if (m_service_account_credentials.isSet()) {
        obj.insert(QString("ServiceAccountCredentials"), ::OpenAPI::toJsonValue(m_service_account_credentials));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_certificate_based_auth_properties.isSet()) {
        obj.insert(QString("CertificateBasedAuthProperties"), ::OpenAPI::toJsonValue(m_certificate_based_auth_properties));
    }
    return obj;
}

QString OAIUpdateDirectoryConfigResult_DirectoryConfig::getDirectoryName() const {
    return m_directory_name;
}
void OAIUpdateDirectoryConfigResult_DirectoryConfig::setDirectoryName(const QString &directory_name) {
    m_directory_name = directory_name;
    m_directory_name_isSet = true;
}

bool OAIUpdateDirectoryConfigResult_DirectoryConfig::is_directory_name_Set() const{
    return m_directory_name_isSet;
}

bool OAIUpdateDirectoryConfigResult_DirectoryConfig::is_directory_name_Valid() const{
    return m_directory_name_isValid;
}

QList OAIUpdateDirectoryConfigResult_DirectoryConfig::getOrganizationalUnitDistinguishedNames() const {
    return m_organizational_unit_distinguished_names;
}
void OAIUpdateDirectoryConfigResult_DirectoryConfig::setOrganizationalUnitDistinguishedNames(const QList &organizational_unit_distinguished_names) {
    m_organizational_unit_distinguished_names = organizational_unit_distinguished_names;
    m_organizational_unit_distinguished_names_isSet = true;
}

bool OAIUpdateDirectoryConfigResult_DirectoryConfig::is_organizational_unit_distinguished_names_Set() const{
    return m_organizational_unit_distinguished_names_isSet;
}

bool OAIUpdateDirectoryConfigResult_DirectoryConfig::is_organizational_unit_distinguished_names_Valid() const{
    return m_organizational_unit_distinguished_names_isValid;
}

OAICreateDirectoryConfigRequest_ServiceAccountCredentials OAIUpdateDirectoryConfigResult_DirectoryConfig::getServiceAccountCredentials() const {
    return m_service_account_credentials;
}
void OAIUpdateDirectoryConfigResult_DirectoryConfig::setServiceAccountCredentials(const OAICreateDirectoryConfigRequest_ServiceAccountCredentials &service_account_credentials) {
    m_service_account_credentials = service_account_credentials;
    m_service_account_credentials_isSet = true;
}

bool OAIUpdateDirectoryConfigResult_DirectoryConfig::is_service_account_credentials_Set() const{
    return m_service_account_credentials_isSet;
}

bool OAIUpdateDirectoryConfigResult_DirectoryConfig::is_service_account_credentials_Valid() const{
    return m_service_account_credentials_isValid;
}

QDateTime OAIUpdateDirectoryConfigResult_DirectoryConfig::getCreatedTime() const {
    return m_created_time;
}
void OAIUpdateDirectoryConfigResult_DirectoryConfig::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIUpdateDirectoryConfigResult_DirectoryConfig::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIUpdateDirectoryConfigResult_DirectoryConfig::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAICreateDirectoryConfigRequest_CertificateBasedAuthProperties OAIUpdateDirectoryConfigResult_DirectoryConfig::getCertificateBasedAuthProperties() const {
    return m_certificate_based_auth_properties;
}
void OAIUpdateDirectoryConfigResult_DirectoryConfig::setCertificateBasedAuthProperties(const OAICreateDirectoryConfigRequest_CertificateBasedAuthProperties &certificate_based_auth_properties) {
    m_certificate_based_auth_properties = certificate_based_auth_properties;
    m_certificate_based_auth_properties_isSet = true;
}

bool OAIUpdateDirectoryConfigResult_DirectoryConfig::is_certificate_based_auth_properties_Set() const{
    return m_certificate_based_auth_properties_isSet;
}

bool OAIUpdateDirectoryConfigResult_DirectoryConfig::is_certificate_based_auth_properties_Valid() const{
    return m_certificate_based_auth_properties_isValid;
}

bool OAIUpdateDirectoryConfigResult_DirectoryConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_directory_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_distinguished_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_based_auth_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDirectoryConfigResult_DirectoryConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_directory_name_isValid && true;
}

} // namespace OpenAPI
