/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateImagePermissionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateImagePermissionsRequest::OAIUpdateImagePermissionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateImagePermissionsRequest::OAIUpdateImagePermissionsRequest() {
    this->initializeModel();
}

OAIUpdateImagePermissionsRequest::~OAIUpdateImagePermissionsRequest() {}

void OAIUpdateImagePermissionsRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_shared_account_id_isSet = false;
    m_shared_account_id_isValid = false;

    m_image_permissions_isSet = false;
    m_image_permissions_isValid = false;
}

void OAIUpdateImagePermissionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateImagePermissionsRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_shared_account_id_isValid = ::OpenAPI::fromJsonValue(m_shared_account_id, json[QString("SharedAccountId")]);
    m_shared_account_id_isSet = !json[QString("SharedAccountId")].isNull() && m_shared_account_id_isValid;

    m_image_permissions_isValid = ::OpenAPI::fromJsonValue(m_image_permissions, json[QString("ImagePermissions")]);
    m_image_permissions_isSet = !json[QString("ImagePermissions")].isNull() && m_image_permissions_isValid;
}

QString OAIUpdateImagePermissionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateImagePermissionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_shared_account_id_isSet) {
        obj.insert(QString("SharedAccountId"), ::OpenAPI::toJsonValue(m_shared_account_id));
    }
    if (m_image_permissions.isSet()) {
        obj.insert(QString("ImagePermissions"), ::OpenAPI::toJsonValue(m_image_permissions));
    }
    return obj;
}

QString OAIUpdateImagePermissionsRequest::getName() const {
    return m_name;
}
void OAIUpdateImagePermissionsRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateImagePermissionsRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateImagePermissionsRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateImagePermissionsRequest::getSharedAccountId() const {
    return m_shared_account_id;
}
void OAIUpdateImagePermissionsRequest::setSharedAccountId(const QString &shared_account_id) {
    m_shared_account_id = shared_account_id;
    m_shared_account_id_isSet = true;
}

bool OAIUpdateImagePermissionsRequest::is_shared_account_id_Set() const{
    return m_shared_account_id_isSet;
}

bool OAIUpdateImagePermissionsRequest::is_shared_account_id_Valid() const{
    return m_shared_account_id_isValid;
}

OAIUpdateImagePermissionsRequest_ImagePermissions OAIUpdateImagePermissionsRequest::getImagePermissions() const {
    return m_image_permissions;
}
void OAIUpdateImagePermissionsRequest::setImagePermissions(const OAIUpdateImagePermissionsRequest_ImagePermissions &image_permissions) {
    m_image_permissions = image_permissions;
    m_image_permissions_isSet = true;
}

bool OAIUpdateImagePermissionsRequest::is_image_permissions_Set() const{
    return m_image_permissions_isSet;
}

bool OAIUpdateImagePermissionsRequest::is_image_permissions_Valid() const{
    return m_image_permissions_isValid;
}

bool OAIUpdateImagePermissionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateImagePermissionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_shared_account_id_isValid && m_image_permissions_isValid && true;
}

} // namespace OpenAPI
