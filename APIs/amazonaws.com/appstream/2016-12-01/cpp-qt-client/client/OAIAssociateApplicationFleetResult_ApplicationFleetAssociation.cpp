/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateApplicationFleetResult_ApplicationFleetAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::OAIAssociateApplicationFleetResult_ApplicationFleetAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::OAIAssociateApplicationFleetResult_ApplicationFleetAssociation() {
    this->initializeModel();
}

OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::~OAIAssociateApplicationFleetResult_ApplicationFleetAssociation() {}

void OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::initializeModel() {

    m_fleet_name_isSet = false;
    m_fleet_name_isValid = false;

    m_application_arn_isSet = false;
    m_application_arn_isValid = false;
}

void OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::fromJsonObject(QJsonObject json) {

    m_fleet_name_isValid = ::OpenAPI::fromJsonValue(m_fleet_name, json[QString("FleetName")]);
    m_fleet_name_isSet = !json[QString("FleetName")].isNull() && m_fleet_name_isValid;

    m_application_arn_isValid = ::OpenAPI::fromJsonValue(m_application_arn, json[QString("ApplicationArn")]);
    m_application_arn_isSet = !json[QString("ApplicationArn")].isNull() && m_application_arn_isValid;
}

QString OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_fleet_name_isSet) {
        obj.insert(QString("FleetName"), ::OpenAPI::toJsonValue(m_fleet_name));
    }
    if (m_application_arn_isSet) {
        obj.insert(QString("ApplicationArn"), ::OpenAPI::toJsonValue(m_application_arn));
    }
    return obj;
}

QString OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::getFleetName() const {
    return m_fleet_name;
}
void OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::setFleetName(const QString &fleet_name) {
    m_fleet_name = fleet_name;
    m_fleet_name_isSet = true;
}

bool OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::is_fleet_name_Set() const{
    return m_fleet_name_isSet;
}

bool OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::is_fleet_name_Valid() const{
    return m_fleet_name_isValid;
}

QString OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::getApplicationArn() const {
    return m_application_arn;
}
void OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::setApplicationArn(const QString &application_arn) {
    m_application_arn = application_arn;
    m_application_arn_isSet = true;
}

bool OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::is_application_arn_Set() const{
    return m_application_arn_isSet;
}

bool OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::is_application_arn_Valid() const{
    return m_application_arn_isValid;
}

bool OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fleet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateApplicationFleetResult_ApplicationFleetAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fleet_name_isValid && m_application_arn_isValid && true;
}

} // namespace OpenAPI
