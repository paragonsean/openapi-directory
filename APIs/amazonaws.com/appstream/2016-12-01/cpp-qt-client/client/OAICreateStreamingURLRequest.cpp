/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStreamingURLRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStreamingURLRequest::OAICreateStreamingURLRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStreamingURLRequest::OAICreateStreamingURLRequest() {
    this->initializeModel();
}

OAICreateStreamingURLRequest::~OAICreateStreamingURLRequest() {}

void OAICreateStreamingURLRequest::initializeModel() {

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_fleet_name_isSet = false;
    m_fleet_name_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_validity_isSet = false;
    m_validity_isValid = false;

    m_session_context_isSet = false;
    m_session_context_isValid = false;
}

void OAICreateStreamingURLRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStreamingURLRequest::fromJsonObject(QJsonObject json) {

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_fleet_name_isValid = ::OpenAPI::fromJsonValue(m_fleet_name, json[QString("FleetName")]);
    m_fleet_name_isSet = !json[QString("FleetName")].isNull() && m_fleet_name_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_validity_isValid = ::OpenAPI::fromJsonValue(m_validity, json[QString("Validity")]);
    m_validity_isSet = !json[QString("Validity")].isNull() && m_validity_isValid;

    m_session_context_isValid = ::OpenAPI::fromJsonValue(m_session_context, json[QString("SessionContext")]);
    m_session_context_isSet = !json[QString("SessionContext")].isNull() && m_session_context_isValid;
}

QString OAICreateStreamingURLRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStreamingURLRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_fleet_name_isSet) {
        obj.insert(QString("FleetName"), ::OpenAPI::toJsonValue(m_fleet_name));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_validity_isSet) {
        obj.insert(QString("Validity"), ::OpenAPI::toJsonValue(m_validity));
    }
    if (m_session_context_isSet) {
        obj.insert(QString("SessionContext"), ::OpenAPI::toJsonValue(m_session_context));
    }
    return obj;
}

QString OAICreateStreamingURLRequest::getStackName() const {
    return m_stack_name;
}
void OAICreateStreamingURLRequest::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAICreateStreamingURLRequest::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAICreateStreamingURLRequest::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAICreateStreamingURLRequest::getFleetName() const {
    return m_fleet_name;
}
void OAICreateStreamingURLRequest::setFleetName(const QString &fleet_name) {
    m_fleet_name = fleet_name;
    m_fleet_name_isSet = true;
}

bool OAICreateStreamingURLRequest::is_fleet_name_Set() const{
    return m_fleet_name_isSet;
}

bool OAICreateStreamingURLRequest::is_fleet_name_Valid() const{
    return m_fleet_name_isValid;
}

QString OAICreateStreamingURLRequest::getUserId() const {
    return m_user_id;
}
void OAICreateStreamingURLRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICreateStreamingURLRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICreateStreamingURLRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAICreateStreamingURLRequest::getApplicationId() const {
    return m_application_id;
}
void OAICreateStreamingURLRequest::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAICreateStreamingURLRequest::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAICreateStreamingURLRequest::is_application_id_Valid() const{
    return m_application_id_isValid;
}

qint32 OAICreateStreamingURLRequest::getValidity() const {
    return m_validity;
}
void OAICreateStreamingURLRequest::setValidity(const qint32 &validity) {
    m_validity = validity;
    m_validity_isSet = true;
}

bool OAICreateStreamingURLRequest::is_validity_Set() const{
    return m_validity_isSet;
}

bool OAICreateStreamingURLRequest::is_validity_Valid() const{
    return m_validity_isValid;
}

QString OAICreateStreamingURLRequest::getSessionContext() const {
    return m_session_context;
}
void OAICreateStreamingURLRequest::setSessionContext(const QString &session_context) {
    m_session_context = session_context;
    m_session_context_isSet = true;
}

bool OAICreateStreamingURLRequest::is_session_context_Set() const{
    return m_session_context_isSet;
}

bool OAICreateStreamingURLRequest::is_session_context_Valid() const{
    return m_session_context_isValid;
}

bool OAICreateStreamingURLRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_context_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStreamingURLRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_name_isValid && m_fleet_name_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
