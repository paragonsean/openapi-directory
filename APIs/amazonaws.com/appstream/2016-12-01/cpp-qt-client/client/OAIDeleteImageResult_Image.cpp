/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteImageResult_Image.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteImageResult_Image::OAIDeleteImageResult_Image(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteImageResult_Image::OAIDeleteImageResult_Image() {
    this->initializeModel();
}

OAIDeleteImageResult_Image::~OAIDeleteImageResult_Image() {}

void OAIDeleteImageResult_Image::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_base_image_arn_isSet = false;
    m_base_image_arn_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_image_builder_supported_isSet = false;
    m_image_builder_supported_isValid = false;

    m_image_builder_name_isSet = false;
    m_image_builder_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_state_change_reason_isSet = false;
    m_state_change_reason_isValid = false;

    m_applications_isSet = false;
    m_applications_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_public_base_image_released_date_isSet = false;
    m_public_base_image_released_date_isValid = false;

    m_appstream_agent_version_isSet = false;
    m_appstream_agent_version_isValid = false;

    m_image_permissions_isSet = false;
    m_image_permissions_isValid = false;

    m_image_errors_isSet = false;
    m_image_errors_isValid = false;
}

void OAIDeleteImageResult_Image::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteImageResult_Image::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_base_image_arn_isValid = ::OpenAPI::fromJsonValue(m_base_image_arn, json[QString("BaseImageArn")]);
    m_base_image_arn_isSet = !json[QString("BaseImageArn")].isNull() && m_base_image_arn_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_image_builder_supported_isValid = ::OpenAPI::fromJsonValue(m_image_builder_supported, json[QString("ImageBuilderSupported")]);
    m_image_builder_supported_isSet = !json[QString("ImageBuilderSupported")].isNull() && m_image_builder_supported_isValid;

    m_image_builder_name_isValid = ::OpenAPI::fromJsonValue(m_image_builder_name, json[QString("ImageBuilderName")]);
    m_image_builder_name_isSet = !json[QString("ImageBuilderName")].isNull() && m_image_builder_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("Platform")]);
    m_platform_isSet = !json[QString("Platform")].isNull() && m_platform_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_state_change_reason_isValid = ::OpenAPI::fromJsonValue(m_state_change_reason, json[QString("StateChangeReason")]);
    m_state_change_reason_isSet = !json[QString("StateChangeReason")].isNull() && m_state_change_reason_isValid;

    m_applications_isValid = ::OpenAPI::fromJsonValue(m_applications, json[QString("Applications")]);
    m_applications_isSet = !json[QString("Applications")].isNull() && m_applications_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_public_base_image_released_date_isValid = ::OpenAPI::fromJsonValue(m_public_base_image_released_date, json[QString("PublicBaseImageReleasedDate")]);
    m_public_base_image_released_date_isSet = !json[QString("PublicBaseImageReleasedDate")].isNull() && m_public_base_image_released_date_isValid;

    m_appstream_agent_version_isValid = ::OpenAPI::fromJsonValue(m_appstream_agent_version, json[QString("AppstreamAgentVersion")]);
    m_appstream_agent_version_isSet = !json[QString("AppstreamAgentVersion")].isNull() && m_appstream_agent_version_isValid;

    m_image_permissions_isValid = ::OpenAPI::fromJsonValue(m_image_permissions, json[QString("ImagePermissions")]);
    m_image_permissions_isSet = !json[QString("ImagePermissions")].isNull() && m_image_permissions_isValid;

    m_image_errors_isValid = ::OpenAPI::fromJsonValue(m_image_errors, json[QString("ImageErrors")]);
    m_image_errors_isSet = !json[QString("ImageErrors")].isNull() && m_image_errors_isValid;
}

QString OAIDeleteImageResult_Image::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteImageResult_Image::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_base_image_arn_isSet) {
        obj.insert(QString("BaseImageArn"), ::OpenAPI::toJsonValue(m_base_image_arn));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_image_builder_supported_isSet) {
        obj.insert(QString("ImageBuilderSupported"), ::OpenAPI::toJsonValue(m_image_builder_supported));
    }
    if (m_image_builder_name_isSet) {
        obj.insert(QString("ImageBuilderName"), ::OpenAPI::toJsonValue(m_image_builder_name));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("Platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_state_change_reason.isSet()) {
        obj.insert(QString("StateChangeReason"), ::OpenAPI::toJsonValue(m_state_change_reason));
    }
    if (m_applications.isSet()) {
        obj.insert(QString("Applications"), ::OpenAPI::toJsonValue(m_applications));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_public_base_image_released_date_isSet) {
        obj.insert(QString("PublicBaseImageReleasedDate"), ::OpenAPI::toJsonValue(m_public_base_image_released_date));
    }
    if (m_appstream_agent_version_isSet) {
        obj.insert(QString("AppstreamAgentVersion"), ::OpenAPI::toJsonValue(m_appstream_agent_version));
    }
    if (m_image_permissions.isSet()) {
        obj.insert(QString("ImagePermissions"), ::OpenAPI::toJsonValue(m_image_permissions));
    }
    if (m_image_errors.isSet()) {
        obj.insert(QString("ImageErrors"), ::OpenAPI::toJsonValue(m_image_errors));
    }
    return obj;
}

QString OAIDeleteImageResult_Image::getName() const {
    return m_name;
}
void OAIDeleteImageResult_Image::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeleteImageResult_Image::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeleteImageResult_Image::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeleteImageResult_Image::getArn() const {
    return m_arn;
}
void OAIDeleteImageResult_Image::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDeleteImageResult_Image::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDeleteImageResult_Image::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDeleteImageResult_Image::getBaseImageArn() const {
    return m_base_image_arn;
}
void OAIDeleteImageResult_Image::setBaseImageArn(const QString &base_image_arn) {
    m_base_image_arn = base_image_arn;
    m_base_image_arn_isSet = true;
}

bool OAIDeleteImageResult_Image::is_base_image_arn_Set() const{
    return m_base_image_arn_isSet;
}

bool OAIDeleteImageResult_Image::is_base_image_arn_Valid() const{
    return m_base_image_arn_isValid;
}

QString OAIDeleteImageResult_Image::getDisplayName() const {
    return m_display_name;
}
void OAIDeleteImageResult_Image::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDeleteImageResult_Image::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDeleteImageResult_Image::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIImageState OAIDeleteImageResult_Image::getState() const {
    return m_state;
}
void OAIDeleteImageResult_Image::setState(const OAIImageState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDeleteImageResult_Image::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDeleteImageResult_Image::is_state_Valid() const{
    return m_state_isValid;
}

OAIVisibilityType OAIDeleteImageResult_Image::getVisibility() const {
    return m_visibility;
}
void OAIDeleteImageResult_Image::setVisibility(const OAIVisibilityType &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIDeleteImageResult_Image::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIDeleteImageResult_Image::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIDeleteImageResult_Image::getImageBuilderSupported() const {
    return m_image_builder_supported;
}
void OAIDeleteImageResult_Image::setImageBuilderSupported(const bool &image_builder_supported) {
    m_image_builder_supported = image_builder_supported;
    m_image_builder_supported_isSet = true;
}

bool OAIDeleteImageResult_Image::is_image_builder_supported_Set() const{
    return m_image_builder_supported_isSet;
}

bool OAIDeleteImageResult_Image::is_image_builder_supported_Valid() const{
    return m_image_builder_supported_isValid;
}

QString OAIDeleteImageResult_Image::getImageBuilderName() const {
    return m_image_builder_name;
}
void OAIDeleteImageResult_Image::setImageBuilderName(const QString &image_builder_name) {
    m_image_builder_name = image_builder_name;
    m_image_builder_name_isSet = true;
}

bool OAIDeleteImageResult_Image::is_image_builder_name_Set() const{
    return m_image_builder_name_isSet;
}

bool OAIDeleteImageResult_Image::is_image_builder_name_Valid() const{
    return m_image_builder_name_isValid;
}

OAIPlatformType OAIDeleteImageResult_Image::getPlatform() const {
    return m_platform;
}
void OAIDeleteImageResult_Image::setPlatform(const OAIPlatformType &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIDeleteImageResult_Image::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIDeleteImageResult_Image::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIDeleteImageResult_Image::getDescription() const {
    return m_description;
}
void OAIDeleteImageResult_Image::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeleteImageResult_Image::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeleteImageResult_Image::is_description_Valid() const{
    return m_description_isValid;
}

OAIImage_StateChangeReason OAIDeleteImageResult_Image::getStateChangeReason() const {
    return m_state_change_reason;
}
void OAIDeleteImageResult_Image::setStateChangeReason(const OAIImage_StateChangeReason &state_change_reason) {
    m_state_change_reason = state_change_reason;
    m_state_change_reason_isSet = true;
}

bool OAIDeleteImageResult_Image::is_state_change_reason_Set() const{
    return m_state_change_reason_isSet;
}

bool OAIDeleteImageResult_Image::is_state_change_reason_Valid() const{
    return m_state_change_reason_isValid;
}

QList OAIDeleteImageResult_Image::getApplications() const {
    return m_applications;
}
void OAIDeleteImageResult_Image::setApplications(const QList &applications) {
    m_applications = applications;
    m_applications_isSet = true;
}

bool OAIDeleteImageResult_Image::is_applications_Set() const{
    return m_applications_isSet;
}

bool OAIDeleteImageResult_Image::is_applications_Valid() const{
    return m_applications_isValid;
}

QDateTime OAIDeleteImageResult_Image::getCreatedTime() const {
    return m_created_time;
}
void OAIDeleteImageResult_Image::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDeleteImageResult_Image::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDeleteImageResult_Image::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIDeleteImageResult_Image::getPublicBaseImageReleasedDate() const {
    return m_public_base_image_released_date;
}
void OAIDeleteImageResult_Image::setPublicBaseImageReleasedDate(const QDateTime &public_base_image_released_date) {
    m_public_base_image_released_date = public_base_image_released_date;
    m_public_base_image_released_date_isSet = true;
}

bool OAIDeleteImageResult_Image::is_public_base_image_released_date_Set() const{
    return m_public_base_image_released_date_isSet;
}

bool OAIDeleteImageResult_Image::is_public_base_image_released_date_Valid() const{
    return m_public_base_image_released_date_isValid;
}

QString OAIDeleteImageResult_Image::getAppstreamAgentVersion() const {
    return m_appstream_agent_version;
}
void OAIDeleteImageResult_Image::setAppstreamAgentVersion(const QString &appstream_agent_version) {
    m_appstream_agent_version = appstream_agent_version;
    m_appstream_agent_version_isSet = true;
}

bool OAIDeleteImageResult_Image::is_appstream_agent_version_Set() const{
    return m_appstream_agent_version_isSet;
}

bool OAIDeleteImageResult_Image::is_appstream_agent_version_Valid() const{
    return m_appstream_agent_version_isValid;
}

OAIImage_ImagePermissions OAIDeleteImageResult_Image::getImagePermissions() const {
    return m_image_permissions;
}
void OAIDeleteImageResult_Image::setImagePermissions(const OAIImage_ImagePermissions &image_permissions) {
    m_image_permissions = image_permissions;
    m_image_permissions_isSet = true;
}

bool OAIDeleteImageResult_Image::is_image_permissions_Set() const{
    return m_image_permissions_isSet;
}

bool OAIDeleteImageResult_Image::is_image_permissions_Valid() const{
    return m_image_permissions_isValid;
}

QList OAIDeleteImageResult_Image::getImageErrors() const {
    return m_image_errors;
}
void OAIDeleteImageResult_Image::setImageErrors(const QList &image_errors) {
    m_image_errors = image_errors;
    m_image_errors_isSet = true;
}

bool OAIDeleteImageResult_Image::is_image_errors_Set() const{
    return m_image_errors_isSet;
}

bool OAIDeleteImageResult_Image::is_image_errors_Valid() const{
    return m_image_errors_isValid;
}

bool OAIDeleteImageResult_Image::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_image_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_builder_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_builder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_change_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_base_image_released_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_appstream_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteImageResult_Image::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
