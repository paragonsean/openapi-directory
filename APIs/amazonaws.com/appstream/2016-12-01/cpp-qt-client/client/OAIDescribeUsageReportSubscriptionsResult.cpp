/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeUsageReportSubscriptionsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeUsageReportSubscriptionsResult::OAIDescribeUsageReportSubscriptionsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeUsageReportSubscriptionsResult::OAIDescribeUsageReportSubscriptionsResult() {
    this->initializeModel();
}

OAIDescribeUsageReportSubscriptionsResult::~OAIDescribeUsageReportSubscriptionsResult() {}

void OAIDescribeUsageReportSubscriptionsResult::initializeModel() {

    m_usage_report_subscriptions_isSet = false;
    m_usage_report_subscriptions_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeUsageReportSubscriptionsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeUsageReportSubscriptionsResult::fromJsonObject(QJsonObject json) {

    m_usage_report_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_usage_report_subscriptions, json[QString("UsageReportSubscriptions")]);
    m_usage_report_subscriptions_isSet = !json[QString("UsageReportSubscriptions")].isNull() && m_usage_report_subscriptions_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeUsageReportSubscriptionsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeUsageReportSubscriptionsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_usage_report_subscriptions.isSet()) {
        obj.insert(QString("UsageReportSubscriptions"), ::OpenAPI::toJsonValue(m_usage_report_subscriptions));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIDescribeUsageReportSubscriptionsResult::getUsageReportSubscriptions() const {
    return m_usage_report_subscriptions;
}
void OAIDescribeUsageReportSubscriptionsResult::setUsageReportSubscriptions(const QList &usage_report_subscriptions) {
    m_usage_report_subscriptions = usage_report_subscriptions;
    m_usage_report_subscriptions_isSet = true;
}

bool OAIDescribeUsageReportSubscriptionsResult::is_usage_report_subscriptions_Set() const{
    return m_usage_report_subscriptions_isSet;
}

bool OAIDescribeUsageReportSubscriptionsResult::is_usage_report_subscriptions_Valid() const{
    return m_usage_report_subscriptions_isValid;
}

QString OAIDescribeUsageReportSubscriptionsResult::getNextToken() const {
    return m_next_token;
}
void OAIDescribeUsageReportSubscriptionsResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeUsageReportSubscriptionsResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeUsageReportSubscriptionsResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeUsageReportSubscriptionsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_usage_report_subscriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeUsageReportSubscriptionsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
