/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDirectoryConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDirectoryConfigRequest::OAIUpdateDirectoryConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDirectoryConfigRequest::OAIUpdateDirectoryConfigRequest() {
    this->initializeModel();
}

OAIUpdateDirectoryConfigRequest::~OAIUpdateDirectoryConfigRequest() {}

void OAIUpdateDirectoryConfigRequest::initializeModel() {

    m_directory_name_isSet = false;
    m_directory_name_isValid = false;

    m_organizational_unit_distinguished_names_isSet = false;
    m_organizational_unit_distinguished_names_isValid = false;

    m_service_account_credentials_isSet = false;
    m_service_account_credentials_isValid = false;

    m_certificate_based_auth_properties_isSet = false;
    m_certificate_based_auth_properties_isValid = false;
}

void OAIUpdateDirectoryConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDirectoryConfigRequest::fromJsonObject(QJsonObject json) {

    m_directory_name_isValid = ::OpenAPI::fromJsonValue(m_directory_name, json[QString("DirectoryName")]);
    m_directory_name_isSet = !json[QString("DirectoryName")].isNull() && m_directory_name_isValid;

    m_organizational_unit_distinguished_names_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_distinguished_names, json[QString("OrganizationalUnitDistinguishedNames")]);
    m_organizational_unit_distinguished_names_isSet = !json[QString("OrganizationalUnitDistinguishedNames")].isNull() && m_organizational_unit_distinguished_names_isValid;

    m_service_account_credentials_isValid = ::OpenAPI::fromJsonValue(m_service_account_credentials, json[QString("ServiceAccountCredentials")]);
    m_service_account_credentials_isSet = !json[QString("ServiceAccountCredentials")].isNull() && m_service_account_credentials_isValid;

    m_certificate_based_auth_properties_isValid = ::OpenAPI::fromJsonValue(m_certificate_based_auth_properties, json[QString("CertificateBasedAuthProperties")]);
    m_certificate_based_auth_properties_isSet = !json[QString("CertificateBasedAuthProperties")].isNull() && m_certificate_based_auth_properties_isValid;
}

QString OAIUpdateDirectoryConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDirectoryConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_directory_name_isSet) {
        obj.insert(QString("DirectoryName"), ::OpenAPI::toJsonValue(m_directory_name));
    }
    if (m_organizational_unit_distinguished_names.isSet()) {
        obj.insert(QString("OrganizationalUnitDistinguishedNames"), ::OpenAPI::toJsonValue(m_organizational_unit_distinguished_names));
    }
    if (m_service_account_credentials.isSet()) {
        obj.insert(QString("ServiceAccountCredentials"), ::OpenAPI::toJsonValue(m_service_account_credentials));
    }
    if (m_certificate_based_auth_properties.isSet()) {
        obj.insert(QString("CertificateBasedAuthProperties"), ::OpenAPI::toJsonValue(m_certificate_based_auth_properties));
    }
    return obj;
}

QString OAIUpdateDirectoryConfigRequest::getDirectoryName() const {
    return m_directory_name;
}
void OAIUpdateDirectoryConfigRequest::setDirectoryName(const QString &directory_name) {
    m_directory_name = directory_name;
    m_directory_name_isSet = true;
}

bool OAIUpdateDirectoryConfigRequest::is_directory_name_Set() const{
    return m_directory_name_isSet;
}

bool OAIUpdateDirectoryConfigRequest::is_directory_name_Valid() const{
    return m_directory_name_isValid;
}

QList OAIUpdateDirectoryConfigRequest::getOrganizationalUnitDistinguishedNames() const {
    return m_organizational_unit_distinguished_names;
}
void OAIUpdateDirectoryConfigRequest::setOrganizationalUnitDistinguishedNames(const QList &organizational_unit_distinguished_names) {
    m_organizational_unit_distinguished_names = organizational_unit_distinguished_names;
    m_organizational_unit_distinguished_names_isSet = true;
}

bool OAIUpdateDirectoryConfigRequest::is_organizational_unit_distinguished_names_Set() const{
    return m_organizational_unit_distinguished_names_isSet;
}

bool OAIUpdateDirectoryConfigRequest::is_organizational_unit_distinguished_names_Valid() const{
    return m_organizational_unit_distinguished_names_isValid;
}

OAICreateDirectoryConfigRequest_ServiceAccountCredentials OAIUpdateDirectoryConfigRequest::getServiceAccountCredentials() const {
    return m_service_account_credentials;
}
void OAIUpdateDirectoryConfigRequest::setServiceAccountCredentials(const OAICreateDirectoryConfigRequest_ServiceAccountCredentials &service_account_credentials) {
    m_service_account_credentials = service_account_credentials;
    m_service_account_credentials_isSet = true;
}

bool OAIUpdateDirectoryConfigRequest::is_service_account_credentials_Set() const{
    return m_service_account_credentials_isSet;
}

bool OAIUpdateDirectoryConfigRequest::is_service_account_credentials_Valid() const{
    return m_service_account_credentials_isValid;
}

OAICreateDirectoryConfigRequest_CertificateBasedAuthProperties OAIUpdateDirectoryConfigRequest::getCertificateBasedAuthProperties() const {
    return m_certificate_based_auth_properties;
}
void OAIUpdateDirectoryConfigRequest::setCertificateBasedAuthProperties(const OAICreateDirectoryConfigRequest_CertificateBasedAuthProperties &certificate_based_auth_properties) {
    m_certificate_based_auth_properties = certificate_based_auth_properties;
    m_certificate_based_auth_properties_isSet = true;
}

bool OAIUpdateDirectoryConfigRequest::is_certificate_based_auth_properties_Set() const{
    return m_certificate_based_auth_properties_isSet;
}

bool OAIUpdateDirectoryConfigRequest::is_certificate_based_auth_properties_Valid() const{
    return m_certificate_based_auth_properties_isValid;
}

bool OAIUpdateDirectoryConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_directory_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_distinguished_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_based_auth_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDirectoryConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_directory_name_isValid && true;
}

} // namespace OpenAPI
