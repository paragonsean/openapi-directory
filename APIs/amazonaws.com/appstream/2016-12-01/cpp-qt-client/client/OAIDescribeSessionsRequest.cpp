/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSessionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSessionsRequest::OAIDescribeSessionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSessionsRequest::OAIDescribeSessionsRequest() {
    this->initializeModel();
}

OAIDescribeSessionsRequest::~OAIDescribeSessionsRequest() {}

void OAIDescribeSessionsRequest::initializeModel() {

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_fleet_name_isSet = false;
    m_fleet_name_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;
}

void OAIDescribeSessionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSessionsRequest::fromJsonObject(QJsonObject json) {

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_fleet_name_isValid = ::OpenAPI::fromJsonValue(m_fleet_name, json[QString("FleetName")]);
    m_fleet_name_isSet = !json[QString("FleetName")].isNull() && m_fleet_name_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("AuthenticationType")]);
    m_authentication_type_isSet = !json[QString("AuthenticationType")].isNull() && m_authentication_type_isValid;
}

QString OAIDescribeSessionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSessionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_fleet_name_isSet) {
        obj.insert(QString("FleetName"), ::OpenAPI::toJsonValue(m_fleet_name));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_authentication_type.isSet()) {
        obj.insert(QString("AuthenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    return obj;
}

QString OAIDescribeSessionsRequest::getStackName() const {
    return m_stack_name;
}
void OAIDescribeSessionsRequest::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAIDescribeSessionsRequest::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAIDescribeSessionsRequest::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAIDescribeSessionsRequest::getFleetName() const {
    return m_fleet_name;
}
void OAIDescribeSessionsRequest::setFleetName(const QString &fleet_name) {
    m_fleet_name = fleet_name;
    m_fleet_name_isSet = true;
}

bool OAIDescribeSessionsRequest::is_fleet_name_Set() const{
    return m_fleet_name_isSet;
}

bool OAIDescribeSessionsRequest::is_fleet_name_Valid() const{
    return m_fleet_name_isValid;
}

QString OAIDescribeSessionsRequest::getUserId() const {
    return m_user_id;
}
void OAIDescribeSessionsRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIDescribeSessionsRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIDescribeSessionsRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIDescribeSessionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeSessionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeSessionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeSessionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeSessionsRequest::getLimit() const {
    return m_limit;
}
void OAIDescribeSessionsRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIDescribeSessionsRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIDescribeSessionsRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

OAIAuthenticationType OAIDescribeSessionsRequest::getAuthenticationType() const {
    return m_authentication_type;
}
void OAIDescribeSessionsRequest::setAuthenticationType(const OAIAuthenticationType &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAIDescribeSessionsRequest::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAIDescribeSessionsRequest::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

bool OAIDescribeSessionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSessionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_name_isValid && m_fleet_name_isValid && true;
}

} // namespace OpenAPI
