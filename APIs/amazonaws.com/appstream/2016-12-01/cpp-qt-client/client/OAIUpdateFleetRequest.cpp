/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFleetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFleetRequest::OAIUpdateFleetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFleetRequest::OAIUpdateFleetRequest() {
    this->initializeModel();
}

OAIUpdateFleetRequest::~OAIUpdateFleetRequest() {}

void OAIUpdateFleetRequest::initializeModel() {

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_image_arn_isSet = false;
    m_image_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_compute_capacity_isSet = false;
    m_compute_capacity_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_max_user_duration_in_seconds_isSet = false;
    m_max_user_duration_in_seconds_isValid = false;

    m_disconnect_timeout_in_seconds_isSet = false;
    m_disconnect_timeout_in_seconds_isValid = false;

    m_delete_vpc_config_isSet = false;
    m_delete_vpc_config_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enable_default_internet_access_isSet = false;
    m_enable_default_internet_access_isValid = false;

    m_domain_join_info_isSet = false;
    m_domain_join_info_isValid = false;

    m_idle_disconnect_timeout_in_seconds_isSet = false;
    m_idle_disconnect_timeout_in_seconds_isValid = false;

    m_attributes_to_delete_isSet = false;
    m_attributes_to_delete_isValid = false;

    m_iam_role_arn_isSet = false;
    m_iam_role_arn_isValid = false;

    m_stream_view_isSet = false;
    m_stream_view_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_max_concurrent_sessions_isSet = false;
    m_max_concurrent_sessions_isValid = false;

    m_usb_device_filter_strings_isSet = false;
    m_usb_device_filter_strings_isValid = false;

    m_session_script_s3_location_isSet = false;
    m_session_script_s3_location_isValid = false;
}

void OAIUpdateFleetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFleetRequest::fromJsonObject(QJsonObject json) {

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("ImageName")]);
    m_image_name_isSet = !json[QString("ImageName")].isNull() && m_image_name_isValid;

    m_image_arn_isValid = ::OpenAPI::fromJsonValue(m_image_arn, json[QString("ImageArn")]);
    m_image_arn_isSet = !json[QString("ImageArn")].isNull() && m_image_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_compute_capacity_isValid = ::OpenAPI::fromJsonValue(m_compute_capacity, json[QString("ComputeCapacity")]);
    m_compute_capacity_isSet = !json[QString("ComputeCapacity")].isNull() && m_compute_capacity_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("VpcConfig")]);
    m_vpc_config_isSet = !json[QString("VpcConfig")].isNull() && m_vpc_config_isValid;

    m_max_user_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_max_user_duration_in_seconds, json[QString("MaxUserDurationInSeconds")]);
    m_max_user_duration_in_seconds_isSet = !json[QString("MaxUserDurationInSeconds")].isNull() && m_max_user_duration_in_seconds_isValid;

    m_disconnect_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_disconnect_timeout_in_seconds, json[QString("DisconnectTimeoutInSeconds")]);
    m_disconnect_timeout_in_seconds_isSet = !json[QString("DisconnectTimeoutInSeconds")].isNull() && m_disconnect_timeout_in_seconds_isValid;

    m_delete_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_delete_vpc_config, json[QString("DeleteVpcConfig")]);
    m_delete_vpc_config_isSet = !json[QString("DeleteVpcConfig")].isNull() && m_delete_vpc_config_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_enable_default_internet_access_isValid = ::OpenAPI::fromJsonValue(m_enable_default_internet_access, json[QString("EnableDefaultInternetAccess")]);
    m_enable_default_internet_access_isSet = !json[QString("EnableDefaultInternetAccess")].isNull() && m_enable_default_internet_access_isValid;

    m_domain_join_info_isValid = ::OpenAPI::fromJsonValue(m_domain_join_info, json[QString("DomainJoinInfo")]);
    m_domain_join_info_isSet = !json[QString("DomainJoinInfo")].isNull() && m_domain_join_info_isValid;

    m_idle_disconnect_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_idle_disconnect_timeout_in_seconds, json[QString("IdleDisconnectTimeoutInSeconds")]);
    m_idle_disconnect_timeout_in_seconds_isSet = !json[QString("IdleDisconnectTimeoutInSeconds")].isNull() && m_idle_disconnect_timeout_in_seconds_isValid;

    m_attributes_to_delete_isValid = ::OpenAPI::fromJsonValue(m_attributes_to_delete, json[QString("AttributesToDelete")]);
    m_attributes_to_delete_isSet = !json[QString("AttributesToDelete")].isNull() && m_attributes_to_delete_isValid;

    m_iam_role_arn_isValid = ::OpenAPI::fromJsonValue(m_iam_role_arn, json[QString("IamRoleArn")]);
    m_iam_role_arn_isSet = !json[QString("IamRoleArn")].isNull() && m_iam_role_arn_isValid;

    m_stream_view_isValid = ::OpenAPI::fromJsonValue(m_stream_view, json[QString("StreamView")]);
    m_stream_view_isSet = !json[QString("StreamView")].isNull() && m_stream_view_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("Platform")]);
    m_platform_isSet = !json[QString("Platform")].isNull() && m_platform_isValid;

    m_max_concurrent_sessions_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_sessions, json[QString("MaxConcurrentSessions")]);
    m_max_concurrent_sessions_isSet = !json[QString("MaxConcurrentSessions")].isNull() && m_max_concurrent_sessions_isValid;

    m_usb_device_filter_strings_isValid = ::OpenAPI::fromJsonValue(m_usb_device_filter_strings, json[QString("UsbDeviceFilterStrings")]);
    m_usb_device_filter_strings_isSet = !json[QString("UsbDeviceFilterStrings")].isNull() && m_usb_device_filter_strings_isValid;

    m_session_script_s3_location_isValid = ::OpenAPI::fromJsonValue(m_session_script_s3_location, json[QString("SessionScriptS3Location")]);
    m_session_script_s3_location_isSet = !json[QString("SessionScriptS3Location")].isNull() && m_session_script_s3_location_isValid;
}

QString OAIUpdateFleetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFleetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_image_name_isSet) {
        obj.insert(QString("ImageName"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_image_arn_isSet) {
        obj.insert(QString("ImageArn"), ::OpenAPI::toJsonValue(m_image_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_compute_capacity.isSet()) {
        obj.insert(QString("ComputeCapacity"), ::OpenAPI::toJsonValue(m_compute_capacity));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("VpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_max_user_duration_in_seconds_isSet) {
        obj.insert(QString("MaxUserDurationInSeconds"), ::OpenAPI::toJsonValue(m_max_user_duration_in_seconds));
    }
    if (m_disconnect_timeout_in_seconds_isSet) {
        obj.insert(QString("DisconnectTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_disconnect_timeout_in_seconds));
    }
    if (m_delete_vpc_config_isSet) {
        obj.insert(QString("DeleteVpcConfig"), ::OpenAPI::toJsonValue(m_delete_vpc_config));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enable_default_internet_access_isSet) {
        obj.insert(QString("EnableDefaultInternetAccess"), ::OpenAPI::toJsonValue(m_enable_default_internet_access));
    }
    if (m_domain_join_info.isSet()) {
        obj.insert(QString("DomainJoinInfo"), ::OpenAPI::toJsonValue(m_domain_join_info));
    }
    if (m_idle_disconnect_timeout_in_seconds_isSet) {
        obj.insert(QString("IdleDisconnectTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_idle_disconnect_timeout_in_seconds));
    }
    if (m_attributes_to_delete.isSet()) {
        obj.insert(QString("AttributesToDelete"), ::OpenAPI::toJsonValue(m_attributes_to_delete));
    }
    if (m_iam_role_arn_isSet) {
        obj.insert(QString("IamRoleArn"), ::OpenAPI::toJsonValue(m_iam_role_arn));
    }
    if (m_stream_view.isSet()) {
        obj.insert(QString("StreamView"), ::OpenAPI::toJsonValue(m_stream_view));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("Platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_max_concurrent_sessions_isSet) {
        obj.insert(QString("MaxConcurrentSessions"), ::OpenAPI::toJsonValue(m_max_concurrent_sessions));
    }
    if (m_usb_device_filter_strings.isSet()) {
        obj.insert(QString("UsbDeviceFilterStrings"), ::OpenAPI::toJsonValue(m_usb_device_filter_strings));
    }
    if (m_session_script_s3_location.isSet()) {
        obj.insert(QString("SessionScriptS3Location"), ::OpenAPI::toJsonValue(m_session_script_s3_location));
    }
    return obj;
}

QString OAIUpdateFleetRequest::getImageName() const {
    return m_image_name;
}
void OAIUpdateFleetRequest::setImageName(const QString &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAIUpdateFleetRequest::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAIUpdateFleetRequest::is_image_name_Valid() const{
    return m_image_name_isValid;
}

QString OAIUpdateFleetRequest::getImageArn() const {
    return m_image_arn;
}
void OAIUpdateFleetRequest::setImageArn(const QString &image_arn) {
    m_image_arn = image_arn;
    m_image_arn_isSet = true;
}

bool OAIUpdateFleetRequest::is_image_arn_Set() const{
    return m_image_arn_isSet;
}

bool OAIUpdateFleetRequest::is_image_arn_Valid() const{
    return m_image_arn_isValid;
}

QString OAIUpdateFleetRequest::getName() const {
    return m_name;
}
void OAIUpdateFleetRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateFleetRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateFleetRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateFleetRequest::getInstanceType() const {
    return m_instance_type;
}
void OAIUpdateFleetRequest::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIUpdateFleetRequest::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIUpdateFleetRequest::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

OAIUpdateFleetRequest_ComputeCapacity OAIUpdateFleetRequest::getComputeCapacity() const {
    return m_compute_capacity;
}
void OAIUpdateFleetRequest::setComputeCapacity(const OAIUpdateFleetRequest_ComputeCapacity &compute_capacity) {
    m_compute_capacity = compute_capacity;
    m_compute_capacity_isSet = true;
}

bool OAIUpdateFleetRequest::is_compute_capacity_Set() const{
    return m_compute_capacity_isSet;
}

bool OAIUpdateFleetRequest::is_compute_capacity_Valid() const{
    return m_compute_capacity_isValid;
}

OAIUpdateFleetRequest_VpcConfig OAIUpdateFleetRequest::getVpcConfig() const {
    return m_vpc_config;
}
void OAIUpdateFleetRequest::setVpcConfig(const OAIUpdateFleetRequest_VpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIUpdateFleetRequest::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIUpdateFleetRequest::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

qint32 OAIUpdateFleetRequest::getMaxUserDurationInSeconds() const {
    return m_max_user_duration_in_seconds;
}
void OAIUpdateFleetRequest::setMaxUserDurationInSeconds(const qint32 &max_user_duration_in_seconds) {
    m_max_user_duration_in_seconds = max_user_duration_in_seconds;
    m_max_user_duration_in_seconds_isSet = true;
}

bool OAIUpdateFleetRequest::is_max_user_duration_in_seconds_Set() const{
    return m_max_user_duration_in_seconds_isSet;
}

bool OAIUpdateFleetRequest::is_max_user_duration_in_seconds_Valid() const{
    return m_max_user_duration_in_seconds_isValid;
}

qint32 OAIUpdateFleetRequest::getDisconnectTimeoutInSeconds() const {
    return m_disconnect_timeout_in_seconds;
}
void OAIUpdateFleetRequest::setDisconnectTimeoutInSeconds(const qint32 &disconnect_timeout_in_seconds) {
    m_disconnect_timeout_in_seconds = disconnect_timeout_in_seconds;
    m_disconnect_timeout_in_seconds_isSet = true;
}

bool OAIUpdateFleetRequest::is_disconnect_timeout_in_seconds_Set() const{
    return m_disconnect_timeout_in_seconds_isSet;
}

bool OAIUpdateFleetRequest::is_disconnect_timeout_in_seconds_Valid() const{
    return m_disconnect_timeout_in_seconds_isValid;
}

bool OAIUpdateFleetRequest::getDeleteVpcConfig() const {
    return m_delete_vpc_config;
}
void OAIUpdateFleetRequest::setDeleteVpcConfig(const bool &delete_vpc_config) {
    m_delete_vpc_config = delete_vpc_config;
    m_delete_vpc_config_isSet = true;
}

bool OAIUpdateFleetRequest::is_delete_vpc_config_Set() const{
    return m_delete_vpc_config_isSet;
}

bool OAIUpdateFleetRequest::is_delete_vpc_config_Valid() const{
    return m_delete_vpc_config_isValid;
}

QString OAIUpdateFleetRequest::getDescription() const {
    return m_description;
}
void OAIUpdateFleetRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateFleetRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateFleetRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateFleetRequest::getDisplayName() const {
    return m_display_name;
}
void OAIUpdateFleetRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUpdateFleetRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUpdateFleetRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIUpdateFleetRequest::getEnableDefaultInternetAccess() const {
    return m_enable_default_internet_access;
}
void OAIUpdateFleetRequest::setEnableDefaultInternetAccess(const bool &enable_default_internet_access) {
    m_enable_default_internet_access = enable_default_internet_access;
    m_enable_default_internet_access_isSet = true;
}

bool OAIUpdateFleetRequest::is_enable_default_internet_access_Set() const{
    return m_enable_default_internet_access_isSet;
}

bool OAIUpdateFleetRequest::is_enable_default_internet_access_Valid() const{
    return m_enable_default_internet_access_isValid;
}

OAIUpdateFleetRequest_DomainJoinInfo OAIUpdateFleetRequest::getDomainJoinInfo() const {
    return m_domain_join_info;
}
void OAIUpdateFleetRequest::setDomainJoinInfo(const OAIUpdateFleetRequest_DomainJoinInfo &domain_join_info) {
    m_domain_join_info = domain_join_info;
    m_domain_join_info_isSet = true;
}

bool OAIUpdateFleetRequest::is_domain_join_info_Set() const{
    return m_domain_join_info_isSet;
}

bool OAIUpdateFleetRequest::is_domain_join_info_Valid() const{
    return m_domain_join_info_isValid;
}

qint32 OAIUpdateFleetRequest::getIdleDisconnectTimeoutInSeconds() const {
    return m_idle_disconnect_timeout_in_seconds;
}
void OAIUpdateFleetRequest::setIdleDisconnectTimeoutInSeconds(const qint32 &idle_disconnect_timeout_in_seconds) {
    m_idle_disconnect_timeout_in_seconds = idle_disconnect_timeout_in_seconds;
    m_idle_disconnect_timeout_in_seconds_isSet = true;
}

bool OAIUpdateFleetRequest::is_idle_disconnect_timeout_in_seconds_Set() const{
    return m_idle_disconnect_timeout_in_seconds_isSet;
}

bool OAIUpdateFleetRequest::is_idle_disconnect_timeout_in_seconds_Valid() const{
    return m_idle_disconnect_timeout_in_seconds_isValid;
}

QList OAIUpdateFleetRequest::getAttributesToDelete() const {
    return m_attributes_to_delete;
}
void OAIUpdateFleetRequest::setAttributesToDelete(const QList &attributes_to_delete) {
    m_attributes_to_delete = attributes_to_delete;
    m_attributes_to_delete_isSet = true;
}

bool OAIUpdateFleetRequest::is_attributes_to_delete_Set() const{
    return m_attributes_to_delete_isSet;
}

bool OAIUpdateFleetRequest::is_attributes_to_delete_Valid() const{
    return m_attributes_to_delete_isValid;
}

QString OAIUpdateFleetRequest::getIamRoleArn() const {
    return m_iam_role_arn;
}
void OAIUpdateFleetRequest::setIamRoleArn(const QString &iam_role_arn) {
    m_iam_role_arn = iam_role_arn;
    m_iam_role_arn_isSet = true;
}

bool OAIUpdateFleetRequest::is_iam_role_arn_Set() const{
    return m_iam_role_arn_isSet;
}

bool OAIUpdateFleetRequest::is_iam_role_arn_Valid() const{
    return m_iam_role_arn_isValid;
}

OAIStreamView OAIUpdateFleetRequest::getStreamView() const {
    return m_stream_view;
}
void OAIUpdateFleetRequest::setStreamView(const OAIStreamView &stream_view) {
    m_stream_view = stream_view;
    m_stream_view_isSet = true;
}

bool OAIUpdateFleetRequest::is_stream_view_Set() const{
    return m_stream_view_isSet;
}

bool OAIUpdateFleetRequest::is_stream_view_Valid() const{
    return m_stream_view_isValid;
}

OAIPlatformType OAIUpdateFleetRequest::getPlatform() const {
    return m_platform;
}
void OAIUpdateFleetRequest::setPlatform(const OAIPlatformType &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIUpdateFleetRequest::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIUpdateFleetRequest::is_platform_Valid() const{
    return m_platform_isValid;
}

qint32 OAIUpdateFleetRequest::getMaxConcurrentSessions() const {
    return m_max_concurrent_sessions;
}
void OAIUpdateFleetRequest::setMaxConcurrentSessions(const qint32 &max_concurrent_sessions) {
    m_max_concurrent_sessions = max_concurrent_sessions;
    m_max_concurrent_sessions_isSet = true;
}

bool OAIUpdateFleetRequest::is_max_concurrent_sessions_Set() const{
    return m_max_concurrent_sessions_isSet;
}

bool OAIUpdateFleetRequest::is_max_concurrent_sessions_Valid() const{
    return m_max_concurrent_sessions_isValid;
}

QList OAIUpdateFleetRequest::getUsbDeviceFilterStrings() const {
    return m_usb_device_filter_strings;
}
void OAIUpdateFleetRequest::setUsbDeviceFilterStrings(const QList &usb_device_filter_strings) {
    m_usb_device_filter_strings = usb_device_filter_strings;
    m_usb_device_filter_strings_isSet = true;
}

bool OAIUpdateFleetRequest::is_usb_device_filter_strings_Set() const{
    return m_usb_device_filter_strings_isSet;
}

bool OAIUpdateFleetRequest::is_usb_device_filter_strings_Valid() const{
    return m_usb_device_filter_strings_isValid;
}

OAIUpdateFleetRequest_SessionScriptS3Location OAIUpdateFleetRequest::getSessionScriptS3Location() const {
    return m_session_script_s3_location;
}
void OAIUpdateFleetRequest::setSessionScriptS3Location(const OAIUpdateFleetRequest_SessionScriptS3Location &session_script_s3_location) {
    m_session_script_s3_location = session_script_s3_location;
    m_session_script_s3_location_isSet = true;
}

bool OAIUpdateFleetRequest::is_session_script_s3_location_Set() const{
    return m_session_script_s3_location_isSet;
}

bool OAIUpdateFleetRequest::is_session_script_s3_location_Valid() const{
    return m_session_script_s3_location_isValid;
}

bool OAIUpdateFleetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_user_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disconnect_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_vpc_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_default_internet_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_join_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_disconnect_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_to_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_sessions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usb_device_filter_strings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_script_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFleetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
