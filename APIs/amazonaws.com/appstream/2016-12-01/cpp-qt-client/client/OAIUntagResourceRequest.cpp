/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUntagResourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUntagResourceRequest::OAIUntagResourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUntagResourceRequest::OAIUntagResourceRequest() {
    this->initializeModel();
}

OAIUntagResourceRequest::~OAIUntagResourceRequest() {}

void OAIUntagResourceRequest::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_tag_keys_isSet = false;
    m_tag_keys_isValid = false;
}

void OAIUntagResourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUntagResourceRequest::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_tag_keys_isValid = ::OpenAPI::fromJsonValue(m_tag_keys, json[QString("TagKeys")]);
    m_tag_keys_isSet = !json[QString("TagKeys")].isNull() && m_tag_keys_isValid;
}

QString OAIUntagResourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUntagResourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_tag_keys.isSet()) {
        obj.insert(QString("TagKeys"), ::OpenAPI::toJsonValue(m_tag_keys));
    }
    return obj;
}

QString OAIUntagResourceRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAIUntagResourceRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIUntagResourceRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIUntagResourceRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QList OAIUntagResourceRequest::getTagKeys() const {
    return m_tag_keys;
}
void OAIUntagResourceRequest::setTagKeys(const QList &tag_keys) {
    m_tag_keys = tag_keys;
    m_tag_keys_isSet = true;
}

bool OAIUntagResourceRequest::is_tag_keys_Set() const{
    return m_tag_keys_isSet;
}

bool OAIUntagResourceRequest::is_tag_keys_Valid() const{
    return m_tag_keys_isValid;
}

bool OAIUntagResourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUntagResourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && m_tag_keys_isValid && true;
}

} // namespace OpenAPI
