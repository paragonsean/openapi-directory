/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharedImagePermissions_imagePermissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharedImagePermissions_imagePermissions::OAISharedImagePermissions_imagePermissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharedImagePermissions_imagePermissions::OAISharedImagePermissions_imagePermissions() {
    this->initializeModel();
}

OAISharedImagePermissions_imagePermissions::~OAISharedImagePermissions_imagePermissions() {}

void OAISharedImagePermissions_imagePermissions::initializeModel() {

    m_allow_fleet_isSet = false;
    m_allow_fleet_isValid = false;

    m_allow_image_builder_isSet = false;
    m_allow_image_builder_isValid = false;
}

void OAISharedImagePermissions_imagePermissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharedImagePermissions_imagePermissions::fromJsonObject(QJsonObject json) {

    m_allow_fleet_isValid = ::OpenAPI::fromJsonValue(m_allow_fleet, json[QString("allowFleet")]);
    m_allow_fleet_isSet = !json[QString("allowFleet")].isNull() && m_allow_fleet_isValid;

    m_allow_image_builder_isValid = ::OpenAPI::fromJsonValue(m_allow_image_builder, json[QString("allowImageBuilder")]);
    m_allow_image_builder_isSet = !json[QString("allowImageBuilder")].isNull() && m_allow_image_builder_isValid;
}

QString OAISharedImagePermissions_imagePermissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharedImagePermissions_imagePermissions::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_fleet_isSet) {
        obj.insert(QString("allowFleet"), ::OpenAPI::toJsonValue(m_allow_fleet));
    }
    if (m_allow_image_builder_isSet) {
        obj.insert(QString("allowImageBuilder"), ::OpenAPI::toJsonValue(m_allow_image_builder));
    }
    return obj;
}

bool OAISharedImagePermissions_imagePermissions::getAllowFleet() const {
    return m_allow_fleet;
}
void OAISharedImagePermissions_imagePermissions::setAllowFleet(const bool &allow_fleet) {
    m_allow_fleet = allow_fleet;
    m_allow_fleet_isSet = true;
}

bool OAISharedImagePermissions_imagePermissions::is_allow_fleet_Set() const{
    return m_allow_fleet_isSet;
}

bool OAISharedImagePermissions_imagePermissions::is_allow_fleet_Valid() const{
    return m_allow_fleet_isValid;
}

bool OAISharedImagePermissions_imagePermissions::getAllowImageBuilder() const {
    return m_allow_image_builder;
}
void OAISharedImagePermissions_imagePermissions::setAllowImageBuilder(const bool &allow_image_builder) {
    m_allow_image_builder = allow_image_builder;
    m_allow_image_builder_isSet = true;
}

bool OAISharedImagePermissions_imagePermissions::is_allow_image_builder_Set() const{
    return m_allow_image_builder_isSet;
}

bool OAISharedImagePermissions_imagePermissions::is_allow_image_builder_Valid() const{
    return m_allow_image_builder_isValid;
}

bool OAISharedImagePermissions_imagePermissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_fleet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_image_builder_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharedImagePermissions_imagePermissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
