/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeleteImageResult_Image.h
 *
 * 
 */

#ifndef OAIDeleteImageResult_Image_H
#define OAIDeleteImageResult_Image_H

#include <QJsonObject>

#include "OAIImageState.h"
#include "OAIImage_ImagePermissions.h"
#include "OAIImage_StateChangeReason.h"
#include "OAIPlatformType.h"
#include "OAIVisibilityType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImage_StateChangeReason;
class OAIImage_ImagePermissions;

class OAIDeleteImageResult_Image : public OAIObject {
public:
    OAIDeleteImageResult_Image();
    OAIDeleteImageResult_Image(QString json);
    ~OAIDeleteImageResult_Image() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getBaseImageArn() const;
    void setBaseImageArn(const QString &base_image_arn);
    bool is_base_image_arn_Set() const;
    bool is_base_image_arn_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    OAIImageState getState() const;
    void setState(const OAIImageState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIVisibilityType getVisibility() const;
    void setVisibility(const OAIVisibilityType &visibility);
    bool is_visibility_Set() const;
    bool is_visibility_Valid() const;

    bool getImageBuilderSupported() const;
    void setImageBuilderSupported(const bool &image_builder_supported);
    bool is_image_builder_supported_Set() const;
    bool is_image_builder_supported_Valid() const;

    QString getImageBuilderName() const;
    void setImageBuilderName(const QString &image_builder_name);
    bool is_image_builder_name_Set() const;
    bool is_image_builder_name_Valid() const;

    OAIPlatformType getPlatform() const;
    void setPlatform(const OAIPlatformType &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIImage_StateChangeReason getStateChangeReason() const;
    void setStateChangeReason(const OAIImage_StateChangeReason &state_change_reason);
    bool is_state_change_reason_Set() const;
    bool is_state_change_reason_Valid() const;

    QList getApplications() const;
    void setApplications(const QList &applications);
    bool is_applications_Set() const;
    bool is_applications_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QDateTime getPublicBaseImageReleasedDate() const;
    void setPublicBaseImageReleasedDate(const QDateTime &public_base_image_released_date);
    bool is_public_base_image_released_date_Set() const;
    bool is_public_base_image_released_date_Valid() const;

    QString getAppstreamAgentVersion() const;
    void setAppstreamAgentVersion(const QString &appstream_agent_version);
    bool is_appstream_agent_version_Set() const;
    bool is_appstream_agent_version_Valid() const;

    OAIImage_ImagePermissions getImagePermissions() const;
    void setImagePermissions(const OAIImage_ImagePermissions &image_permissions);
    bool is_image_permissions_Set() const;
    bool is_image_permissions_Valid() const;

    QList getImageErrors() const;
    void setImageErrors(const QList &image_errors);
    bool is_image_errors_Set() const;
    bool is_image_errors_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_base_image_arn;
    bool m_base_image_arn_isSet;
    bool m_base_image_arn_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    OAIImageState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIVisibilityType m_visibility;
    bool m_visibility_isSet;
    bool m_visibility_isValid;

    bool m_image_builder_supported;
    bool m_image_builder_supported_isSet;
    bool m_image_builder_supported_isValid;

    QString m_image_builder_name;
    bool m_image_builder_name_isSet;
    bool m_image_builder_name_isValid;

    OAIPlatformType m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIImage_StateChangeReason m_state_change_reason;
    bool m_state_change_reason_isSet;
    bool m_state_change_reason_isValid;

    QList m_applications;
    bool m_applications_isSet;
    bool m_applications_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QDateTime m_public_base_image_released_date;
    bool m_public_base_image_released_date_isSet;
    bool m_public_base_image_released_date_isValid;

    QString m_appstream_agent_version;
    bool m_appstream_agent_version_isSet;
    bool m_appstream_agent_version_isValid;

    OAIImage_ImagePermissions m_image_permissions;
    bool m_image_permissions_isSet;
    bool m_image_permissions_isValid;

    QList m_image_errors;
    bool m_image_errors_isSet;
    bool m_image_errors_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeleteImageResult_Image)

#endif // OAIDeleteImageResult_Image_H
