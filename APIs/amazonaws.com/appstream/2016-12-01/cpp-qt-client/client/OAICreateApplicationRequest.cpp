/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplicationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplicationRequest::OAICreateApplicationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplicationRequest::OAICreateApplicationRequest() {
    this->initializeModel();
}

OAICreateApplicationRequest::~OAICreateApplicationRequest() {}

void OAICreateApplicationRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_icon_s3_location_isSet = false;
    m_icon_s3_location_isValid = false;

    m_launch_path_isSet = false;
    m_launch_path_isValid = false;

    m_working_directory_isSet = false;
    m_working_directory_isValid = false;

    m_launch_parameters_isSet = false;
    m_launch_parameters_isValid = false;

    m_platforms_isSet = false;
    m_platforms_isValid = false;

    m_instance_families_isSet = false;
    m_instance_families_isValid = false;

    m_app_block_arn_isSet = false;
    m_app_block_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateApplicationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplicationRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_icon_s3_location_isValid = ::OpenAPI::fromJsonValue(m_icon_s3_location, json[QString("IconS3Location")]);
    m_icon_s3_location_isSet = !json[QString("IconS3Location")].isNull() && m_icon_s3_location_isValid;

    m_launch_path_isValid = ::OpenAPI::fromJsonValue(m_launch_path, json[QString("LaunchPath")]);
    m_launch_path_isSet = !json[QString("LaunchPath")].isNull() && m_launch_path_isValid;

    m_working_directory_isValid = ::OpenAPI::fromJsonValue(m_working_directory, json[QString("WorkingDirectory")]);
    m_working_directory_isSet = !json[QString("WorkingDirectory")].isNull() && m_working_directory_isValid;

    m_launch_parameters_isValid = ::OpenAPI::fromJsonValue(m_launch_parameters, json[QString("LaunchParameters")]);
    m_launch_parameters_isSet = !json[QString("LaunchParameters")].isNull() && m_launch_parameters_isValid;

    m_platforms_isValid = ::OpenAPI::fromJsonValue(m_platforms, json[QString("Platforms")]);
    m_platforms_isSet = !json[QString("Platforms")].isNull() && m_platforms_isValid;

    m_instance_families_isValid = ::OpenAPI::fromJsonValue(m_instance_families, json[QString("InstanceFamilies")]);
    m_instance_families_isSet = !json[QString("InstanceFamilies")].isNull() && m_instance_families_isValid;

    m_app_block_arn_isValid = ::OpenAPI::fromJsonValue(m_app_block_arn, json[QString("AppBlockArn")]);
    m_app_block_arn_isSet = !json[QString("AppBlockArn")].isNull() && m_app_block_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateApplicationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplicationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_icon_s3_location.isSet()) {
        obj.insert(QString("IconS3Location"), ::OpenAPI::toJsonValue(m_icon_s3_location));
    }
    if (m_launch_path_isSet) {
        obj.insert(QString("LaunchPath"), ::OpenAPI::toJsonValue(m_launch_path));
    }
    if (m_working_directory_isSet) {
        obj.insert(QString("WorkingDirectory"), ::OpenAPI::toJsonValue(m_working_directory));
    }
    if (m_launch_parameters_isSet) {
        obj.insert(QString("LaunchParameters"), ::OpenAPI::toJsonValue(m_launch_parameters));
    }
    if (m_platforms.isSet()) {
        obj.insert(QString("Platforms"), ::OpenAPI::toJsonValue(m_platforms));
    }
    if (m_instance_families.isSet()) {
        obj.insert(QString("InstanceFamilies"), ::OpenAPI::toJsonValue(m_instance_families));
    }
    if (m_app_block_arn_isSet) {
        obj.insert(QString("AppBlockArn"), ::OpenAPI::toJsonValue(m_app_block_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateApplicationRequest::getName() const {
    return m_name;
}
void OAICreateApplicationRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateApplicationRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateApplicationRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateApplicationRequest::getDisplayName() const {
    return m_display_name;
}
void OAICreateApplicationRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICreateApplicationRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICreateApplicationRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICreateApplicationRequest::getDescription() const {
    return m_description;
}
void OAICreateApplicationRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateApplicationRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateApplicationRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateApplicationRequest_IconS3Location OAICreateApplicationRequest::getIconS3Location() const {
    return m_icon_s3_location;
}
void OAICreateApplicationRequest::setIconS3Location(const OAICreateApplicationRequest_IconS3Location &icon_s3_location) {
    m_icon_s3_location = icon_s3_location;
    m_icon_s3_location_isSet = true;
}

bool OAICreateApplicationRequest::is_icon_s3_location_Set() const{
    return m_icon_s3_location_isSet;
}

bool OAICreateApplicationRequest::is_icon_s3_location_Valid() const{
    return m_icon_s3_location_isValid;
}

QString OAICreateApplicationRequest::getLaunchPath() const {
    return m_launch_path;
}
void OAICreateApplicationRequest::setLaunchPath(const QString &launch_path) {
    m_launch_path = launch_path;
    m_launch_path_isSet = true;
}

bool OAICreateApplicationRequest::is_launch_path_Set() const{
    return m_launch_path_isSet;
}

bool OAICreateApplicationRequest::is_launch_path_Valid() const{
    return m_launch_path_isValid;
}

QString OAICreateApplicationRequest::getWorkingDirectory() const {
    return m_working_directory;
}
void OAICreateApplicationRequest::setWorkingDirectory(const QString &working_directory) {
    m_working_directory = working_directory;
    m_working_directory_isSet = true;
}

bool OAICreateApplicationRequest::is_working_directory_Set() const{
    return m_working_directory_isSet;
}

bool OAICreateApplicationRequest::is_working_directory_Valid() const{
    return m_working_directory_isValid;
}

QString OAICreateApplicationRequest::getLaunchParameters() const {
    return m_launch_parameters;
}
void OAICreateApplicationRequest::setLaunchParameters(const QString &launch_parameters) {
    m_launch_parameters = launch_parameters;
    m_launch_parameters_isSet = true;
}

bool OAICreateApplicationRequest::is_launch_parameters_Set() const{
    return m_launch_parameters_isSet;
}

bool OAICreateApplicationRequest::is_launch_parameters_Valid() const{
    return m_launch_parameters_isValid;
}

QList OAICreateApplicationRequest::getPlatforms() const {
    return m_platforms;
}
void OAICreateApplicationRequest::setPlatforms(const QList &platforms) {
    m_platforms = platforms;
    m_platforms_isSet = true;
}

bool OAICreateApplicationRequest::is_platforms_Set() const{
    return m_platforms_isSet;
}

bool OAICreateApplicationRequest::is_platforms_Valid() const{
    return m_platforms_isValid;
}

QList OAICreateApplicationRequest::getInstanceFamilies() const {
    return m_instance_families;
}
void OAICreateApplicationRequest::setInstanceFamilies(const QList &instance_families) {
    m_instance_families = instance_families;
    m_instance_families_isSet = true;
}

bool OAICreateApplicationRequest::is_instance_families_Set() const{
    return m_instance_families_isSet;
}

bool OAICreateApplicationRequest::is_instance_families_Valid() const{
    return m_instance_families_isValid;
}

QString OAICreateApplicationRequest::getAppBlockArn() const {
    return m_app_block_arn;
}
void OAICreateApplicationRequest::setAppBlockArn(const QString &app_block_arn) {
    m_app_block_arn = app_block_arn;
    m_app_block_arn_isSet = true;
}

bool OAICreateApplicationRequest::is_app_block_arn_Set() const{
    return m_app_block_arn_isSet;
}

bool OAICreateApplicationRequest::is_app_block_arn_Valid() const{
    return m_app_block_arn_isValid;
}

QMap OAICreateApplicationRequest::getTags() const {
    return m_tags;
}
void OAICreateApplicationRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateApplicationRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateApplicationRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateApplicationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platforms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_families.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_block_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplicationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_icon_s3_location_isValid && m_launch_path_isValid && m_platforms_isValid && m_instance_families_isValid && m_app_block_arn_isValid && true;
}

} // namespace OpenAPI
