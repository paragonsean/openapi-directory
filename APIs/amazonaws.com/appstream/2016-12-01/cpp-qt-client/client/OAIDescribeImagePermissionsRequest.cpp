/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeImagePermissionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeImagePermissionsRequest::OAIDescribeImagePermissionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeImagePermissionsRequest::OAIDescribeImagePermissionsRequest() {
    this->initializeModel();
}

OAIDescribeImagePermissionsRequest::~OAIDescribeImagePermissionsRequest() {}

void OAIDescribeImagePermissionsRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_shared_aws_account_ids_isSet = false;
    m_shared_aws_account_ids_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeImagePermissionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeImagePermissionsRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_shared_aws_account_ids_isValid = ::OpenAPI::fromJsonValue(m_shared_aws_account_ids, json[QString("SharedAwsAccountIds")]);
    m_shared_aws_account_ids_isSet = !json[QString("SharedAwsAccountIds")].isNull() && m_shared_aws_account_ids_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeImagePermissionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeImagePermissionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_shared_aws_account_ids.isSet()) {
        obj.insert(QString("SharedAwsAccountIds"), ::OpenAPI::toJsonValue(m_shared_aws_account_ids));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIDescribeImagePermissionsRequest::getName() const {
    return m_name;
}
void OAIDescribeImagePermissionsRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeImagePermissionsRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeImagePermissionsRequest::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDescribeImagePermissionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeImagePermissionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeImagePermissionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeImagePermissionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QList OAIDescribeImagePermissionsRequest::getSharedAwsAccountIds() const {
    return m_shared_aws_account_ids;
}
void OAIDescribeImagePermissionsRequest::setSharedAwsAccountIds(const QList &shared_aws_account_ids) {
    m_shared_aws_account_ids = shared_aws_account_ids;
    m_shared_aws_account_ids_isSet = true;
}

bool OAIDescribeImagePermissionsRequest::is_shared_aws_account_ids_Set() const{
    return m_shared_aws_account_ids_isSet;
}

bool OAIDescribeImagePermissionsRequest::is_shared_aws_account_ids_Valid() const{
    return m_shared_aws_account_ids_isValid;
}

QString OAIDescribeImagePermissionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeImagePermissionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeImagePermissionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeImagePermissionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeImagePermissionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_aws_account_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeImagePermissionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
