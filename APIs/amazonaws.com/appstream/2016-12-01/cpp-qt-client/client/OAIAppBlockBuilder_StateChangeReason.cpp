/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppBlockBuilder_StateChangeReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppBlockBuilder_StateChangeReason::OAIAppBlockBuilder_StateChangeReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppBlockBuilder_StateChangeReason::OAIAppBlockBuilder_StateChangeReason() {
    this->initializeModel();
}

OAIAppBlockBuilder_StateChangeReason::~OAIAppBlockBuilder_StateChangeReason() {}

void OAIAppBlockBuilder_StateChangeReason::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIAppBlockBuilder_StateChangeReason::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppBlockBuilder_StateChangeReason::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAIAppBlockBuilder_StateChangeReason::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppBlockBuilder_StateChangeReason::asJsonObject() const {
    QJsonObject obj;
    if (m_code.isSet()) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAIAppBlockBuilderStateChangeReasonCode OAIAppBlockBuilder_StateChangeReason::getCode() const {
    return m_code;
}
void OAIAppBlockBuilder_StateChangeReason::setCode(const OAIAppBlockBuilderStateChangeReasonCode &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAppBlockBuilder_StateChangeReason::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAppBlockBuilder_StateChangeReason::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIAppBlockBuilder_StateChangeReason::getMessage() const {
    return m_message;
}
void OAIAppBlockBuilder_StateChangeReason::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAppBlockBuilder_StateChangeReason::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAppBlockBuilder_StateChangeReason::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIAppBlockBuilder_StateChangeReason::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppBlockBuilder_StateChangeReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
