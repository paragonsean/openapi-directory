/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUpdatedImageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUpdatedImageRequest::OAICreateUpdatedImageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUpdatedImageRequest::OAICreateUpdatedImageRequest() {
    this->initializeModel();
}

OAICreateUpdatedImageRequest::~OAICreateUpdatedImageRequest() {}

void OAICreateUpdatedImageRequest::initializeModel() {

    m_existing_image_name_isSet = false;
    m_existing_image_name_isValid = false;

    m_new_image_name_isSet = false;
    m_new_image_name_isValid = false;

    m_new_image_description_isSet = false;
    m_new_image_description_isValid = false;

    m_new_image_display_name_isSet = false;
    m_new_image_display_name_isValid = false;

    m_new_image_tags_isSet = false;
    m_new_image_tags_isValid = false;

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;
}

void OAICreateUpdatedImageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUpdatedImageRequest::fromJsonObject(QJsonObject json) {

    m_existing_image_name_isValid = ::OpenAPI::fromJsonValue(m_existing_image_name, json[QString("existingImageName")]);
    m_existing_image_name_isSet = !json[QString("existingImageName")].isNull() && m_existing_image_name_isValid;

    m_new_image_name_isValid = ::OpenAPI::fromJsonValue(m_new_image_name, json[QString("newImageName")]);
    m_new_image_name_isSet = !json[QString("newImageName")].isNull() && m_new_image_name_isValid;

    m_new_image_description_isValid = ::OpenAPI::fromJsonValue(m_new_image_description, json[QString("newImageDescription")]);
    m_new_image_description_isSet = !json[QString("newImageDescription")].isNull() && m_new_image_description_isValid;

    m_new_image_display_name_isValid = ::OpenAPI::fromJsonValue(m_new_image_display_name, json[QString("newImageDisplayName")]);
    m_new_image_display_name_isSet = !json[QString("newImageDisplayName")].isNull() && m_new_image_display_name_isValid;

    m_new_image_tags_isValid = ::OpenAPI::fromJsonValue(m_new_image_tags, json[QString("newImageTags")]);
    m_new_image_tags_isSet = !json[QString("newImageTags")].isNull() && m_new_image_tags_isValid;

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("dryRun")]);
    m_dry_run_isSet = !json[QString("dryRun")].isNull() && m_dry_run_isValid;
}

QString OAICreateUpdatedImageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUpdatedImageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_existing_image_name_isSet) {
        obj.insert(QString("existingImageName"), ::OpenAPI::toJsonValue(m_existing_image_name));
    }
    if (m_new_image_name_isSet) {
        obj.insert(QString("newImageName"), ::OpenAPI::toJsonValue(m_new_image_name));
    }
    if (m_new_image_description_isSet) {
        obj.insert(QString("newImageDescription"), ::OpenAPI::toJsonValue(m_new_image_description));
    }
    if (m_new_image_display_name_isSet) {
        obj.insert(QString("newImageDisplayName"), ::OpenAPI::toJsonValue(m_new_image_display_name));
    }
    if (m_new_image_tags.isSet()) {
        obj.insert(QString("newImageTags"), ::OpenAPI::toJsonValue(m_new_image_tags));
    }
    if (m_dry_run_isSet) {
        obj.insert(QString("dryRun"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    return obj;
}

QString OAICreateUpdatedImageRequest::getExistingImageName() const {
    return m_existing_image_name;
}
void OAICreateUpdatedImageRequest::setExistingImageName(const QString &existing_image_name) {
    m_existing_image_name = existing_image_name;
    m_existing_image_name_isSet = true;
}

bool OAICreateUpdatedImageRequest::is_existing_image_name_Set() const{
    return m_existing_image_name_isSet;
}

bool OAICreateUpdatedImageRequest::is_existing_image_name_Valid() const{
    return m_existing_image_name_isValid;
}

QString OAICreateUpdatedImageRequest::getNewImageName() const {
    return m_new_image_name;
}
void OAICreateUpdatedImageRequest::setNewImageName(const QString &new_image_name) {
    m_new_image_name = new_image_name;
    m_new_image_name_isSet = true;
}

bool OAICreateUpdatedImageRequest::is_new_image_name_Set() const{
    return m_new_image_name_isSet;
}

bool OAICreateUpdatedImageRequest::is_new_image_name_Valid() const{
    return m_new_image_name_isValid;
}

QString OAICreateUpdatedImageRequest::getNewImageDescription() const {
    return m_new_image_description;
}
void OAICreateUpdatedImageRequest::setNewImageDescription(const QString &new_image_description) {
    m_new_image_description = new_image_description;
    m_new_image_description_isSet = true;
}

bool OAICreateUpdatedImageRequest::is_new_image_description_Set() const{
    return m_new_image_description_isSet;
}

bool OAICreateUpdatedImageRequest::is_new_image_description_Valid() const{
    return m_new_image_description_isValid;
}

QString OAICreateUpdatedImageRequest::getNewImageDisplayName() const {
    return m_new_image_display_name;
}
void OAICreateUpdatedImageRequest::setNewImageDisplayName(const QString &new_image_display_name) {
    m_new_image_display_name = new_image_display_name;
    m_new_image_display_name_isSet = true;
}

bool OAICreateUpdatedImageRequest::is_new_image_display_name_Set() const{
    return m_new_image_display_name_isSet;
}

bool OAICreateUpdatedImageRequest::is_new_image_display_name_Valid() const{
    return m_new_image_display_name_isValid;
}

QMap OAICreateUpdatedImageRequest::getNewImageTags() const {
    return m_new_image_tags;
}
void OAICreateUpdatedImageRequest::setNewImageTags(const QMap &new_image_tags) {
    m_new_image_tags = new_image_tags;
    m_new_image_tags_isSet = true;
}

bool OAICreateUpdatedImageRequest::is_new_image_tags_Set() const{
    return m_new_image_tags_isSet;
}

bool OAICreateUpdatedImageRequest::is_new_image_tags_Valid() const{
    return m_new_image_tags_isValid;
}

bool OAICreateUpdatedImageRequest::getDryRun() const {
    return m_dry_run;
}
void OAICreateUpdatedImageRequest::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAICreateUpdatedImageRequest::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAICreateUpdatedImageRequest::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

bool OAICreateUpdatedImageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_existing_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_image_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_image_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_image_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUpdatedImageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_existing_image_name_isValid && m_new_image_name_isValid && true;
}

} // namespace OpenAPI
