/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeUserStackAssociationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeUserStackAssociationsRequest::OAIDescribeUserStackAssociationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeUserStackAssociationsRequest::OAIDescribeUserStackAssociationsRequest() {
    this->initializeModel();
}

OAIDescribeUserStackAssociationsRequest::~OAIDescribeUserStackAssociationsRequest() {}

void OAIDescribeUserStackAssociationsRequest::initializeModel() {

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeUserStackAssociationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeUserStackAssociationsRequest::fromJsonObject(QJsonObject json) {

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("UserName")]);
    m_user_name_isSet = !json[QString("UserName")].isNull() && m_user_name_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("AuthenticationType")]);
    m_authentication_type_isSet = !json[QString("AuthenticationType")].isNull() && m_authentication_type_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeUserStackAssociationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeUserStackAssociationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("UserName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_authentication_type.isSet()) {
        obj.insert(QString("AuthenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIDescribeUserStackAssociationsRequest::getStackName() const {
    return m_stack_name;
}
void OAIDescribeUserStackAssociationsRequest::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAIDescribeUserStackAssociationsRequest::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAIDescribeUserStackAssociationsRequest::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAIDescribeUserStackAssociationsRequest::getUserName() const {
    return m_user_name;
}
void OAIDescribeUserStackAssociationsRequest::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIDescribeUserStackAssociationsRequest::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIDescribeUserStackAssociationsRequest::is_user_name_Valid() const{
    return m_user_name_isValid;
}

OAIAuthenticationType OAIDescribeUserStackAssociationsRequest::getAuthenticationType() const {
    return m_authentication_type;
}
void OAIDescribeUserStackAssociationsRequest::setAuthenticationType(const OAIAuthenticationType &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAIDescribeUserStackAssociationsRequest::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAIDescribeUserStackAssociationsRequest::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

qint32 OAIDescribeUserStackAssociationsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeUserStackAssociationsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeUserStackAssociationsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeUserStackAssociationsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIDescribeUserStackAssociationsRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeUserStackAssociationsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeUserStackAssociationsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeUserStackAssociationsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeUserStackAssociationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeUserStackAssociationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
