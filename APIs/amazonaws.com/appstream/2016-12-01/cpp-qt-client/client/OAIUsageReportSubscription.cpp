/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageReportSubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageReportSubscription::OAIUsageReportSubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageReportSubscription::OAIUsageReportSubscription() {
    this->initializeModel();
}

OAIUsageReportSubscription::~OAIUsageReportSubscription() {}

void OAIUsageReportSubscription::initializeModel() {

    m_s3_bucket_name_isSet = false;
    m_s3_bucket_name_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_last_generated_report_date_isSet = false;
    m_last_generated_report_date_isValid = false;

    m_subscription_errors_isSet = false;
    m_subscription_errors_isValid = false;
}

void OAIUsageReportSubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageReportSubscription::fromJsonObject(QJsonObject json) {

    m_s3_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_name, json[QString("S3BucketName")]);
    m_s3_bucket_name_isSet = !json[QString("S3BucketName")].isNull() && m_s3_bucket_name_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_last_generated_report_date_isValid = ::OpenAPI::fromJsonValue(m_last_generated_report_date, json[QString("LastGeneratedReportDate")]);
    m_last_generated_report_date_isSet = !json[QString("LastGeneratedReportDate")].isNull() && m_last_generated_report_date_isValid;

    m_subscription_errors_isValid = ::OpenAPI::fromJsonValue(m_subscription_errors, json[QString("SubscriptionErrors")]);
    m_subscription_errors_isSet = !json[QString("SubscriptionErrors")].isNull() && m_subscription_errors_isValid;
}

QString OAIUsageReportSubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageReportSubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket_name_isSet) {
        obj.insert(QString("S3BucketName"), ::OpenAPI::toJsonValue(m_s3_bucket_name));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_last_generated_report_date_isSet) {
        obj.insert(QString("LastGeneratedReportDate"), ::OpenAPI::toJsonValue(m_last_generated_report_date));
    }
    if (m_subscription_errors.isSet()) {
        obj.insert(QString("SubscriptionErrors"), ::OpenAPI::toJsonValue(m_subscription_errors));
    }
    return obj;
}

QString OAIUsageReportSubscription::getS3BucketName() const {
    return m_s3_bucket_name;
}
void OAIUsageReportSubscription::setS3BucketName(const QString &s3_bucket_name) {
    m_s3_bucket_name = s3_bucket_name;
    m_s3_bucket_name_isSet = true;
}

bool OAIUsageReportSubscription::is_s3_bucket_name_Set() const{
    return m_s3_bucket_name_isSet;
}

bool OAIUsageReportSubscription::is_s3_bucket_name_Valid() const{
    return m_s3_bucket_name_isValid;
}

OAIUsageReportSchedule OAIUsageReportSubscription::getSchedule() const {
    return m_schedule;
}
void OAIUsageReportSubscription::setSchedule(const OAIUsageReportSchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIUsageReportSubscription::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIUsageReportSubscription::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QDateTime OAIUsageReportSubscription::getLastGeneratedReportDate() const {
    return m_last_generated_report_date;
}
void OAIUsageReportSubscription::setLastGeneratedReportDate(const QDateTime &last_generated_report_date) {
    m_last_generated_report_date = last_generated_report_date;
    m_last_generated_report_date_isSet = true;
}

bool OAIUsageReportSubscription::is_last_generated_report_date_Set() const{
    return m_last_generated_report_date_isSet;
}

bool OAIUsageReportSubscription::is_last_generated_report_date_Valid() const{
    return m_last_generated_report_date_isValid;
}

QList OAIUsageReportSubscription::getSubscriptionErrors() const {
    return m_subscription_errors;
}
void OAIUsageReportSubscription::setSubscriptionErrors(const QList &subscription_errors) {
    m_subscription_errors = subscription_errors;
    m_subscription_errors_isSet = true;
}

bool OAIUsageReportSubscription::is_subscription_errors_Set() const{
    return m_subscription_errors_isSet;
}

bool OAIUsageReportSubscription::is_subscription_errors_Valid() const{
    return m_subscription_errors_isValid;
}

bool OAIUsageReportSubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_generated_report_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageReportSubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
