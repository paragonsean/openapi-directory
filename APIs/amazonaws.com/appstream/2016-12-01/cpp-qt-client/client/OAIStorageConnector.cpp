/**
 * Amazon AppStream
 * <fullname>Amazon AppStream 2.0</fullname> <p>This is the <i>Amazon AppStream 2.0 API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in AppStream 2.0. AppStream 2.0 is a fully managed, secure application streaming service that lets you stream desktop applications to users without rewriting applications. AppStream 2.0 manages the AWS resources that are required to host and run your applications, scales automatically, and provides access to your users on demand. </p> <note> <p>You can call the AppStream 2.0 API operations by using an interface VPC endpoint (interface endpoint). For more information, see <a href=\"https://docs.aws.amazon.com/appstream2/latest/developerguide/access-api-cli-through-interface-vpc-endpoint.html\">Access AppStream 2.0 API Operations and CLI Commands Through an Interface VPC Endpoint</a> in the <i>Amazon AppStream 2.0 Administration Guide</i>.</p> </note> <p>To learn more about AppStream 2.0, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/appstream2\">Amazon AppStream 2.0 product page</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/appstream2\">Amazon AppStream 2.0 documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageConnector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageConnector::OAIStorageConnector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageConnector::OAIStorageConnector() {
    this->initializeModel();
}

OAIStorageConnector::~OAIStorageConnector() {}

void OAIStorageConnector::initializeModel() {

    m_connector_type_isSet = false;
    m_connector_type_isValid = false;

    m_resource_identifier_isSet = false;
    m_resource_identifier_isValid = false;

    m_domains_isSet = false;
    m_domains_isValid = false;
}

void OAIStorageConnector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageConnector::fromJsonObject(QJsonObject json) {

    m_connector_type_isValid = ::OpenAPI::fromJsonValue(m_connector_type, json[QString("ConnectorType")]);
    m_connector_type_isSet = !json[QString("ConnectorType")].isNull() && m_connector_type_isValid;

    m_resource_identifier_isValid = ::OpenAPI::fromJsonValue(m_resource_identifier, json[QString("ResourceIdentifier")]);
    m_resource_identifier_isSet = !json[QString("ResourceIdentifier")].isNull() && m_resource_identifier_isValid;

    m_domains_isValid = ::OpenAPI::fromJsonValue(m_domains, json[QString("Domains")]);
    m_domains_isSet = !json[QString("Domains")].isNull() && m_domains_isValid;
}

QString OAIStorageConnector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageConnector::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_type.isSet()) {
        obj.insert(QString("ConnectorType"), ::OpenAPI::toJsonValue(m_connector_type));
    }
    if (m_resource_identifier_isSet) {
        obj.insert(QString("ResourceIdentifier"), ::OpenAPI::toJsonValue(m_resource_identifier));
    }
    if (m_domains.isSet()) {
        obj.insert(QString("Domains"), ::OpenAPI::toJsonValue(m_domains));
    }
    return obj;
}

OAIStorageConnectorType OAIStorageConnector::getConnectorType() const {
    return m_connector_type;
}
void OAIStorageConnector::setConnectorType(const OAIStorageConnectorType &connector_type) {
    m_connector_type = connector_type;
    m_connector_type_isSet = true;
}

bool OAIStorageConnector::is_connector_type_Set() const{
    return m_connector_type_isSet;
}

bool OAIStorageConnector::is_connector_type_Valid() const{
    return m_connector_type_isValid;
}

QString OAIStorageConnector::getResourceIdentifier() const {
    return m_resource_identifier;
}
void OAIStorageConnector::setResourceIdentifier(const QString &resource_identifier) {
    m_resource_identifier = resource_identifier;
    m_resource_identifier_isSet = true;
}

bool OAIStorageConnector::is_resource_identifier_Set() const{
    return m_resource_identifier_isSet;
}

bool OAIStorageConnector::is_resource_identifier_Valid() const{
    return m_resource_identifier_isValid;
}

QList OAIStorageConnector::getDomains() const {
    return m_domains;
}
void OAIStorageConnector::setDomains(const QList &domains) {
    m_domains = domains;
    m_domains_isSet = true;
}

bool OAIStorageConnector::is_domains_Set() const{
    return m_domains_isSet;
}

bool OAIStorageConnector::is_domains_Valid() const{
    return m_domains_isValid;
}

bool OAIStorageConnector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domains.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageConnector::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connector_type_isValid && true;
}

} // namespace OpenAPI
