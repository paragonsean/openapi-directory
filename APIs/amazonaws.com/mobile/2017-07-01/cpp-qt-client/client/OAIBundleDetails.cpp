/**
 * AWS Mobile
 *  AWS Mobile Service provides mobile app and website developers with capabilities required to configure AWS resources and bootstrap their developer desktop projects with the necessary SDKs, constants, tools and samples to make use of those resources. 
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBundleDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBundleDetails::OAIBundleDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBundleDetails::OAIBundleDetails() {
    this->initializeModel();
}

OAIBundleDetails::~OAIBundleDetails() {}

void OAIBundleDetails::initializeModel() {

    m_bundle_id_isSet = false;
    m_bundle_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_available_platforms_isSet = false;
    m_available_platforms_isValid = false;
}

void OAIBundleDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBundleDetails::fromJsonObject(QJsonObject json) {

    m_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_bundle_id, json[QString("bundleId")]);
    m_bundle_id_isSet = !json[QString("bundleId")].isNull() && m_bundle_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_available_platforms_isValid = ::OpenAPI::fromJsonValue(m_available_platforms, json[QString("availablePlatforms")]);
    m_available_platforms_isSet = !json[QString("availablePlatforms")].isNull() && m_available_platforms_isValid;
}

QString OAIBundleDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBundleDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_id_isSet) {
        obj.insert(QString("bundleId"), ::OpenAPI::toJsonValue(m_bundle_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_available_platforms.size() > 0) {
        obj.insert(QString("availablePlatforms"), ::OpenAPI::toJsonValue(m_available_platforms));
    }
    return obj;
}

QString OAIBundleDetails::getBundleId() const {
    return m_bundle_id;
}
void OAIBundleDetails::setBundleId(const QString &bundle_id) {
    m_bundle_id = bundle_id;
    m_bundle_id_isSet = true;
}

bool OAIBundleDetails::is_bundle_id_Set() const{
    return m_bundle_id_isSet;
}

bool OAIBundleDetails::is_bundle_id_Valid() const{
    return m_bundle_id_isValid;
}

QString OAIBundleDetails::getTitle() const {
    return m_title;
}
void OAIBundleDetails::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBundleDetails::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBundleDetails::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIBundleDetails::getVersion() const {
    return m_version;
}
void OAIBundleDetails::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIBundleDetails::is_version_Set() const{
    return m_version_isSet;
}

bool OAIBundleDetails::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIBundleDetails::getDescription() const {
    return m_description;
}
void OAIBundleDetails::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBundleDetails::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBundleDetails::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBundleDetails::getIconUrl() const {
    return m_icon_url;
}
void OAIBundleDetails::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIBundleDetails::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIBundleDetails::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QList<OAIPlatform> OAIBundleDetails::getAvailablePlatforms() const {
    return m_available_platforms;
}
void OAIBundleDetails::setAvailablePlatforms(const QList<OAIPlatform> &available_platforms) {
    m_available_platforms = available_platforms;
    m_available_platforms_isSet = true;
}

bool OAIBundleDetails::is_available_platforms_Set() const{
    return m_available_platforms_isSet;
}

bool OAIBundleDetails::is_available_platforms_Valid() const{
    return m_available_platforms_isValid;
}

bool OAIBundleDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBundleDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
