/**
 * AWS Mobile
 *  AWS Mobile Service provides mobile app and website developers with capabilities required to configure AWS resources and bootstrap their developer desktop projects with the necessary SDKs, constants, tools and samples to make use of those resources. 
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlatform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlatform::OAIPlatform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlatform::OAIPlatform() {
    this->initializeModel();
}

OAIPlatform::~OAIPlatform() {}

void OAIPlatform::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPlatform::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPlatform::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OSX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlatform::OSX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WINDOWS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlatform::WINDOWS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LINUX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlatform::LINUX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OBJC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlatform::OBJC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SWIFT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlatform::SWIFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ANDROID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlatform::ANDROID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JAVASCRIPT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPlatform::JAVASCRIPT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPlatform::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPlatform::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPlatform::OSX:
            val = "OSX";
            break;
        case eOAIPlatform::WINDOWS:
            val = "WINDOWS";
            break;
        case eOAIPlatform::LINUX:
            val = "LINUX";
            break;
        case eOAIPlatform::OBJC:
            val = "OBJC";
            break;
        case eOAIPlatform::SWIFT:
            val = "SWIFT";
            break;
        case eOAIPlatform::ANDROID:
            val = "ANDROID";
            break;
        case eOAIPlatform::JAVASCRIPT:
            val = "JAVASCRIPT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPlatform::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPlatform::eOAIPlatform OAIPlatform::getValue() const {
    return m_value;
}

void OAIPlatform::setValue(const OAIPlatform::eOAIPlatform& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPlatform::isSet() const {
    
    return m_value_isSet;
}

bool OAIPlatform::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
