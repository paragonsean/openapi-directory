/**
 * AWS Mobile
 *  AWS Mobile Service provides mobile app and website developers with capabilities required to configure AWS resources and bootstrap their developer desktop projects with the necessary SDKs, constants, tools and samples to make use of those resources. 
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportProjectResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportProjectResult::OAIExportProjectResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportProjectResult::OAIExportProjectResult() {
    this->initializeModel();
}

OAIExportProjectResult::~OAIExportProjectResult() {}

void OAIExportProjectResult::initializeModel() {

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_share_url_isSet = false;
    m_share_url_isValid = false;

    m_snapshot_id_isSet = false;
    m_snapshot_id_isValid = false;
}

void OAIExportProjectResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportProjectResult::fromJsonObject(QJsonObject json) {

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("downloadUrl")]);
    m_download_url_isSet = !json[QString("downloadUrl")].isNull() && m_download_url_isValid;

    m_share_url_isValid = ::OpenAPI::fromJsonValue(m_share_url, json[QString("shareUrl")]);
    m_share_url_isSet = !json[QString("shareUrl")].isNull() && m_share_url_isValid;

    m_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_id, json[QString("snapshotId")]);
    m_snapshot_id_isSet = !json[QString("snapshotId")].isNull() && m_snapshot_id_isValid;
}

QString OAIExportProjectResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportProjectResult::asJsonObject() const {
    QJsonObject obj;
    if (m_download_url_isSet) {
        obj.insert(QString("downloadUrl"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_share_url_isSet) {
        obj.insert(QString("shareUrl"), ::OpenAPI::toJsonValue(m_share_url));
    }
    if (m_snapshot_id_isSet) {
        obj.insert(QString("snapshotId"), ::OpenAPI::toJsonValue(m_snapshot_id));
    }
    return obj;
}

QString OAIExportProjectResult::getDownloadUrl() const {
    return m_download_url;
}
void OAIExportProjectResult::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIExportProjectResult::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIExportProjectResult::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIExportProjectResult::getShareUrl() const {
    return m_share_url;
}
void OAIExportProjectResult::setShareUrl(const QString &share_url) {
    m_share_url = share_url;
    m_share_url_isSet = true;
}

bool OAIExportProjectResult::is_share_url_Set() const{
    return m_share_url_isSet;
}

bool OAIExportProjectResult::is_share_url_Valid() const{
    return m_share_url_isValid;
}

QString OAIExportProjectResult::getSnapshotId() const {
    return m_snapshot_id;
}
void OAIExportProjectResult::setSnapshotId(const QString &snapshot_id) {
    m_snapshot_id = snapshot_id;
    m_snapshot_id_isSet = true;
}

bool OAIExportProjectResult::is_snapshot_id_Set() const{
    return m_snapshot_id_isSet;
}

bool OAIExportProjectResult::is_snapshot_id_Valid() const{
    return m_snapshot_id_isValid;
}

bool OAIExportProjectResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportProjectResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
