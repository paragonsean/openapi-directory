/**
 * AWS Mobile
 *  AWS Mobile Service provides mobile app and website developers with capabilities required to configure AWS resources and bootstrap their developer desktop projects with the necessary SDKs, constants, tools and samples to make use of those resources. 
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProjectResult_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProjectResult_details::OAICreateProjectResult_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProjectResult_details::OAICreateProjectResult_details() {
    this->initializeModel();
}

OAICreateProjectResult_details::~OAICreateProjectResult_details() {}

void OAICreateProjectResult_details::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_last_updated_date_isSet = false;
    m_last_updated_date_isValid = false;

    m_console_url_isSet = false;
    m_console_url_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAICreateProjectResult_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProjectResult_details::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_last_updated_date_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date, json[QString("lastUpdatedDate")]);
    m_last_updated_date_isSet = !json[QString("lastUpdatedDate")].isNull() && m_last_updated_date_isValid;

    m_console_url_isValid = ::OpenAPI::fromJsonValue(m_console_url, json[QString("consoleUrl")]);
    m_console_url_isSet = !json[QString("consoleUrl")].isNull() && m_console_url_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;
}

QString OAICreateProjectResult_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProjectResult_details::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_last_updated_date_isSet) {
        obj.insert(QString("lastUpdatedDate"), ::OpenAPI::toJsonValue(m_last_updated_date));
    }
    if (m_console_url_isSet) {
        obj.insert(QString("consoleUrl"), ::OpenAPI::toJsonValue(m_console_url));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

QString OAICreateProjectResult_details::getName() const {
    return m_name;
}
void OAICreateProjectResult_details::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateProjectResult_details::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateProjectResult_details::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateProjectResult_details::getProjectId() const {
    return m_project_id;
}
void OAICreateProjectResult_details::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAICreateProjectResult_details::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAICreateProjectResult_details::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAICreateProjectResult_details::getRegion() const {
    return m_region;
}
void OAICreateProjectResult_details::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAICreateProjectResult_details::is_region_Set() const{
    return m_region_isSet;
}

bool OAICreateProjectResult_details::is_region_Valid() const{
    return m_region_isValid;
}

OAIProjectState OAICreateProjectResult_details::getState() const {
    return m_state;
}
void OAICreateProjectResult_details::setState(const OAIProjectState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateProjectResult_details::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateProjectResult_details::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAICreateProjectResult_details::getCreatedDate() const {
    return m_created_date;
}
void OAICreateProjectResult_details::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAICreateProjectResult_details::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAICreateProjectResult_details::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QDateTime OAICreateProjectResult_details::getLastUpdatedDate() const {
    return m_last_updated_date;
}
void OAICreateProjectResult_details::setLastUpdatedDate(const QDateTime &last_updated_date) {
    m_last_updated_date = last_updated_date;
    m_last_updated_date_isSet = true;
}

bool OAICreateProjectResult_details::is_last_updated_date_Set() const{
    return m_last_updated_date_isSet;
}

bool OAICreateProjectResult_details::is_last_updated_date_Valid() const{
    return m_last_updated_date_isValid;
}

QString OAICreateProjectResult_details::getConsoleUrl() const {
    return m_console_url;
}
void OAICreateProjectResult_details::setConsoleUrl(const QString &console_url) {
    m_console_url = console_url;
    m_console_url_isSet = true;
}

bool OAICreateProjectResult_details::is_console_url_Set() const{
    return m_console_url_isSet;
}

bool OAICreateProjectResult_details::is_console_url_Valid() const{
    return m_console_url_isValid;
}

QList<OAIResource> OAICreateProjectResult_details::getResources() const {
    return m_resources;
}
void OAICreateProjectResult_details::setResources(const QList<OAIResource> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAICreateProjectResult_details::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAICreateProjectResult_details::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAICreateProjectResult_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_console_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProjectResult_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
