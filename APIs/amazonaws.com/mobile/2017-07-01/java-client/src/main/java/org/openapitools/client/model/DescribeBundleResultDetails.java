/*
 * AWS Mobile
 *  AWS Mobile Service provides mobile app and website developers with capabilities required to configure AWS resources and bootstrap their developer desktop projects with the necessary SDKs, constants, tools and samples to make use of those resources. 
 *
 * The version of the OpenAPI document: 2017-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Platform;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeBundleResultDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:25.517138-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeBundleResultDetails {
  public static final String SERIALIZED_NAME_BUNDLE_ID = "bundleId";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  private String bundleId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ICON_URL = "iconUrl";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_AVAILABLE_PLATFORMS = "availablePlatforms";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_PLATFORMS)
  private List<Platform> availablePlatforms = new ArrayList<>();

  public DescribeBundleResultDetails() {
  }

  public DescribeBundleResultDetails bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   *  Unique bundle identifier. 
   * @return bundleId
   */
  @javax.annotation.Nullable
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }


  public DescribeBundleResultDetails title(String title) {
    this.title = title;
    return this;
  }

  /**
   *  Title of the download bundle. 
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public DescribeBundleResultDetails version(String version) {
    this.version = version;
    return this;
  }

  /**
   *  Version of the download bundle. 
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public DescribeBundleResultDetails description(String description) {
    this.description = description;
    return this;
  }

  /**
   *  Description of the download bundle. 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeBundleResultDetails iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   *  Icon for the download bundle. 
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public DescribeBundleResultDetails availablePlatforms(List<Platform> availablePlatforms) {
    this.availablePlatforms = availablePlatforms;
    return this;
  }

  public DescribeBundleResultDetails addAvailablePlatformsItem(Platform availablePlatformsItem) {
    if (this.availablePlatforms == null) {
      this.availablePlatforms = new ArrayList<>();
    }
    this.availablePlatforms.add(availablePlatformsItem);
    return this;
  }

  /**
   *  Developer desktop or mobile app or website platforms. 
   * @return availablePlatforms
   */
  @javax.annotation.Nullable
  public List<Platform> getAvailablePlatforms() {
    return availablePlatforms;
  }

  public void setAvailablePlatforms(List<Platform> availablePlatforms) {
    this.availablePlatforms = availablePlatforms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeBundleResultDetails describeBundleResultDetails = (DescribeBundleResultDetails) o;
    return Objects.equals(this.bundleId, describeBundleResultDetails.bundleId) &&
        Objects.equals(this.title, describeBundleResultDetails.title) &&
        Objects.equals(this.version, describeBundleResultDetails.version) &&
        Objects.equals(this.description, describeBundleResultDetails.description) &&
        Objects.equals(this.iconUrl, describeBundleResultDetails.iconUrl) &&
        Objects.equals(this.availablePlatforms, describeBundleResultDetails.availablePlatforms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundleId, title, version, description, iconUrl, availablePlatforms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeBundleResultDetails {\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    availablePlatforms: ").append(toIndentedString(availablePlatforms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bundleId");
    openapiFields.add("title");
    openapiFields.add("version");
    openapiFields.add("description");
    openapiFields.add("iconUrl");
    openapiFields.add("availablePlatforms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeBundleResultDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeBundleResultDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeBundleResultDetails is not found in the empty JSON string", DescribeBundleResultDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeBundleResultDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeBundleResultDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bundleId") != null && !jsonObj.get("bundleId").isJsonNull()) && !jsonObj.get("bundleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundleId").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("iconUrl") != null && !jsonObj.get("iconUrl").isJsonNull()) && !jsonObj.get("iconUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("availablePlatforms") != null && !jsonObj.get("availablePlatforms").isJsonNull() && !jsonObj.get("availablePlatforms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availablePlatforms` to be an array in the JSON string but got `%s`", jsonObj.get("availablePlatforms").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeBundleResultDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeBundleResultDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeBundleResultDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeBundleResultDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeBundleResultDetails>() {
           @Override
           public void write(JsonWriter out, DescribeBundleResultDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeBundleResultDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeBundleResultDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeBundleResultDetails
   * @throws IOException if the JSON string is invalid with respect to DescribeBundleResultDetails
   */
  public static DescribeBundleResultDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeBundleResultDetails.class);
  }

  /**
   * Convert an instance of DescribeBundleResultDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

