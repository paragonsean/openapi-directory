openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "Kinesis Video Streams Signaling Service is a intermediate service\
    \ that establishes a communication channel for discovering peers, transmitting\
    \ offers and answers in order to establish peer-to-peer connection in webRTC technology."
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Kinesis Video Signaling Channels
  version: 2019-12-04
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: kinesis-video-signaling
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/kinesis-video-signaling-2019-12-04.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/kinesisvideo/
servers:
- description: The Amazon Kinesis Video Signaling Channels multi-region endpoint
  url: "http://kinesisvideo.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Kinesis Video Signaling Channels multi-region endpoint
  url: "https://kinesisvideo.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Kinesis Video Signaling Channels endpoint for China (Beijing)
    and China (Ningxia)
  url: "http://kinesisvideo.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Amazon Kinesis Video Signaling Channels endpoint for China (Beijing)
    and China (Ningxia)
  url: "https://kinesisvideo.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /v1/get-ice-server-config:
    post:
      description: "<p>Gets the Interactive Connectivity Establishment (ICE) server\
        \ configuration information, including URIs, username, and password which\
        \ can be used to configure the WebRTC connection. The ICE component uses this\
        \ configuration information to setup the WebRTC connection, including authenticating\
        \ with the Traversal Using Relays around NAT (TURN) relay server. </p> <p>TURN\
        \ is a protocol that is used to improve the connectivity of peer-to-peer applications.\
        \ By providing a cloud-based relay service, TURN ensures that a connection\
        \ can be established even when one or more peers are incapable of a direct\
        \ peer-to-peer connection. For more information, see <a href=\"https://tools.ietf.org/html/draft-uberti-rtcweb-turn-rest-00\"\
        >A REST API For Access To TURN Services</a>.</p> <p> You can invoke this API\
        \ to establish a fallback mechanism in case either of the peers is unable\
        \ to establish a direct peer-to-peer connection over a signaling channel.\
        \ You must specify either a signaling channel ARN or the client ID in order\
        \ to invoke this API.</p>"
      operationId: get_ice_server_config
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIceServerConfig_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIceServerConfigResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidClientException'
          description: InvalidClientException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionExpiredException'
          description: SessionExpiredException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientLimitExceededException'
          description: ClientLimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
          description: InvalidArgumentException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /v1/send-alexa-offer-to-master:
    post:
      description: "This API allows you to connect WebRTC-enabled devices with Alexa\
        \ display devices. When invoked, it sends the Alexa Session Description Protocol\
        \ (SDP) offer to the master peer. The offer is delivered as soon as the master\
        \ is connected to the specified signaling channel. This API returns the SDP\
        \ answer from the connected master. If the master is not connected to the\
        \ signaling channel, redelivery requests are made until the message expires."
      operationId: send_alexa_offer_to_master
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendAlexaOfferToMaster_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendAlexaOfferToMasterResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientLimitExceededException'
          description: ClientLimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
          description: InvalidArgumentException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    GetIceServerConfigResponse:
      example:
        IceServerList: ""
      properties:
        IceServerList:
          allOf:
          - $ref: '#/components/schemas/IceServerList'
          - description: The list of ICE server information objects.
          title: IceServerList
      title: GetIceServerConfigResponse
      type: object
    InvalidClientException: {}
    SessionExpiredException: {}
    ClientLimitExceededException: {}
    ResourceNotFoundException: {}
    InvalidArgumentException: {}
    NotAuthorizedException: {}
    SendAlexaOfferToMasterResponse:
      example:
        Answer: ""
      properties:
        Answer:
          allOf:
          - $ref: '#/components/schemas/Answer'
          - description: The base64-encoded SDP answer content.
          title: Answer
      title: SendAlexaOfferToMasterResponse
      type: object
    Answer:
      maxLength: 10000
      minLength: 1
      type: string
    ClientId:
      maxLength: 256
      minLength: 1
      pattern: "[a-zA-Z0-9_.-]+"
      type: string
    ResourceARN:
      maxLength: 1024
      minLength: 1
      pattern: "arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+"
      type: string
    Service:
      enum:
      - TURN
      title: Service
      type: string
    Username:
      maxLength: 256
      minLength: 1
      pattern: "[a-zA-Z0-9_.-]+"
      type: string
    GetIceServerConfigRequest:
      example:
        ChannelARN: ""
        Username: ""
        ClientId: ""
        Service: ""
      properties:
        ChannelARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          - description: 'The ARN of the signaling channel to be used for the peer-to-peer
              connection between configured peers. '
        ClientId:
          allOf:
          - $ref: '#/components/schemas/ClientId'
          - description: Unique identifier for the viewer. Must be unique within the
              signaling channel.
        Service:
          allOf:
          - $ref: '#/components/schemas/Service'
          - description: "Specifies the desired service. Currently, <code>TURN</code>\
              \ is the only valid value."
        Username:
          allOf:
          - $ref: '#/components/schemas/Username'
          - description: An optional user ID to be associated with the credentials.
      required:
      - ChannelARN
      title: GetIceServerConfigRequest
      type: object
    IceServerList:
      items:
        $ref: '#/components/schemas/IceServer'
      type: array
    Uris:
      items:
        $ref: '#/components/schemas/Uri'
      type: array
    Password:
      maxLength: 256
      minLength: 1
      pattern: "[a-zA-Z0-9_.-]+"
      type: string
    Ttl:
      maximum: 86400
      minimum: 30
      type: integer
    IceServer:
      description: A structure for the ICE server connection data.
      properties:
        Uris:
          allOf:
          - $ref: '#/components/schemas/Uris'
          - description: "An array of URIs, in the form specified in the <a href=\"\
              https://tools.ietf.org/html/draft-petithuguenin-behave-turn-uris-03\"\
              >I-D.petithuguenin-behave-turn-uris</a> spec. These URIs provide the\
              \ different addresses and/or protocols that can be used to reach the\
              \ TURN server."
          title: Uris
        Username:
          allOf:
          - $ref: '#/components/schemas/Username'
          - description: A username to login to the ICE server.
          title: Username
        Password:
          allOf:
          - $ref: '#/components/schemas/Password'
          - description: A password to login to the ICE server.
          title: Password
        Ttl:
          allOf:
          - $ref: '#/components/schemas/Ttl'
          - description: "The period of time, in seconds, during which the username\
              \ and password are valid."
          title: Ttl
      title: IceServer
      type: object
    MessagePayload:
      maxLength: 10000
      minLength: 1
      pattern: "[a-zA-Z0-9+/=]+"
      type: string
    SendAlexaOfferToMasterRequest:
      example:
        ChannelARN: ""
        SenderClientId: ""
        MessagePayload: ""
      properties:
        ChannelARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          - description: The ARN of the signaling channel by which Alexa and the master
              peer communicate.
        SenderClientId:
          allOf:
          - $ref: '#/components/schemas/ClientId'
          - description: The unique identifier for the sender client.
        MessagePayload:
          allOf:
          - $ref: '#/components/schemas/MessagePayload'
          - description: The base64-encoded SDP offer content.
      required:
      - ChannelARN
      - MessagePayload
      - SenderClientId
      title: SendAlexaOfferToMasterRequest
      type: object
    Uri:
      maxLength: 256
      minLength: 1
      title: Uri
      type: string
    GetIceServerConfig_request:
      properties:
        ChannelARN:
          description: 'The ARN of the signaling channel to be used for the peer-to-peer
            connection between configured peers. '
          maxLength: 1024
          minLength: 1
          pattern: "arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+"
          title: ChannelARN
          type: string
        ClientId:
          description: Unique identifier for the viewer. Must be unique within the
            signaling channel.
          maxLength: 256
          minLength: 1
          pattern: "[a-zA-Z0-9_.-]+"
          title: ClientId
          type: string
        Service:
          description: "Specifies the desired service. Currently, <code>TURN</code>\
            \ is the only valid value."
          enum:
          - TURN
          title: Service
          type: string
        Username:
          description: An optional user ID to be associated with the credentials.
          maxLength: 256
          minLength: 1
          pattern: "[a-zA-Z0-9_.-]+"
          title: Username
          type: string
      required:
      - ChannelARN
      title: GetIceServerConfig_request
      type: object
    SendAlexaOfferToMaster_request:
      properties:
        ChannelARN:
          description: The ARN of the signaling channel by which Alexa and the master
            peer communicate.
          maxLength: 1024
          minLength: 1
          pattern: "arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+"
          title: ChannelARN
          type: string
        SenderClientId:
          description: The unique identifier for the sender client.
          maxLength: 256
          minLength: 1
          pattern: "[a-zA-Z0-9_.-]+"
          title: SenderClientId
          type: string
        MessagePayload:
          description: The base64-encoded SDP offer content.
          maxLength: 10000
          minLength: 1
          pattern: "[a-zA-Z0-9+/=]+"
          title: MessagePayload
          type: string
      required:
      - ChannelARN
      - MessagePayload
      - SenderClientId
      title: SendAlexaOfferToMaster_request
      type: object
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_hmac
