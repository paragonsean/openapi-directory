# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetIceServerConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_arn: str=None, client_id: str=None, service: str=None, username: str=None):
        """GetIceServerConfigRequest - a model defined in OpenAPI

        :param channel_arn: The channel_arn of this GetIceServerConfigRequest.
        :param client_id: The client_id of this GetIceServerConfigRequest.
        :param service: The service of this GetIceServerConfigRequest.
        :param username: The username of this GetIceServerConfigRequest.
        """
        self.openapi_types = {
            'channel_arn': str,
            'client_id': str,
            'service': str,
            'username': str
        }

        self.attribute_map = {
            'channel_arn': 'ChannelARN',
            'client_id': 'ClientId',
            'service': 'Service',
            'username': 'Username'
        }

        self._channel_arn = channel_arn
        self._client_id = client_id
        self._service = service
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIceServerConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetIceServerConfig_request of this GetIceServerConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_arn(self):
        """Gets the channel_arn of this GetIceServerConfigRequest.

        The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers. 

        :return: The channel_arn of this GetIceServerConfigRequest.
        :rtype: str
        """
        return self._channel_arn

    @channel_arn.setter
    def channel_arn(self, channel_arn):
        """Sets the channel_arn of this GetIceServerConfigRequest.

        The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers. 

        :param channel_arn: The channel_arn of this GetIceServerConfigRequest.
        :type channel_arn: str
        """
        if channel_arn is None:
            raise ValueError("Invalid value for `channel_arn`, must not be `None`")
        if channel_arn is not None and len(channel_arn) > 1024:
            raise ValueError("Invalid value for `channel_arn`, length must be less than or equal to `1024`")
        if channel_arn is not None and len(channel_arn) < 1:
            raise ValueError("Invalid value for `channel_arn`, length must be greater than or equal to `1`")
        if channel_arn is not None and not re.search(r'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+', channel_arn):
            raise ValueError("Invalid value for `channel_arn`, must be a follow pattern or equal to `/arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+/`")

        self._channel_arn = channel_arn

    @property
    def client_id(self):
        """Gets the client_id of this GetIceServerConfigRequest.

        Unique identifier for the viewer. Must be unique within the signaling channel.

        :return: The client_id of this GetIceServerConfigRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this GetIceServerConfigRequest.

        Unique identifier for the viewer. Must be unique within the signaling channel.

        :param client_id: The client_id of this GetIceServerConfigRequest.
        :type client_id: str
        """
        if client_id is not None and len(client_id) > 256:
            raise ValueError("Invalid value for `client_id`, length must be less than or equal to `256`")
        if client_id is not None and len(client_id) < 1:
            raise ValueError("Invalid value for `client_id`, length must be greater than or equal to `1`")
        if client_id is not None and not re.search(r'[a-zA-Z0-9_.-]+', client_id):
            raise ValueError("Invalid value for `client_id`, must be a follow pattern or equal to `/[a-zA-Z0-9_.-]+/`")

        self._client_id = client_id

    @property
    def service(self):
        """Gets the service of this GetIceServerConfigRequest.

        Specifies the desired service. Currently, <code>TURN</code> is the only valid value.

        :return: The service of this GetIceServerConfigRequest.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this GetIceServerConfigRequest.

        Specifies the desired service. Currently, <code>TURN</code> is the only valid value.

        :param service: The service of this GetIceServerConfigRequest.
        :type service: str
        """
        allowed_values = ["TURN"]  # noqa: E501
        if service not in allowed_values:
            raise ValueError(
                "Invalid value for `service` ({0}), must be one of {1}"
                .format(service, allowed_values)
            )

        self._service = service

    @property
    def username(self):
        """Gets the username of this GetIceServerConfigRequest.

        An optional user ID to be associated with the credentials.

        :return: The username of this GetIceServerConfigRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this GetIceServerConfigRequest.

        An optional user ID to be associated with the credentials.

        :param username: The username of this GetIceServerConfigRequest.
        :type username: str
        """
        if username is not None and len(username) > 256:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `256`")
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")
        if username is not None and not re.search(r'[a-zA-Z0-9_.-]+', username):
            raise ValueError("Invalid value for `username`, must be a follow pattern or equal to `/[a-zA-Z0-9_.-]+/`")

        self._username = username
