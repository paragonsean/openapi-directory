# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SendAlexaOfferToMasterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_arn: str=None, sender_client_id: str=None, message_payload: str=None):
        """SendAlexaOfferToMasterRequest - a model defined in OpenAPI

        :param channel_arn: The channel_arn of this SendAlexaOfferToMasterRequest.
        :param sender_client_id: The sender_client_id of this SendAlexaOfferToMasterRequest.
        :param message_payload: The message_payload of this SendAlexaOfferToMasterRequest.
        """
        self.openapi_types = {
            'channel_arn': str,
            'sender_client_id': str,
            'message_payload': str
        }

        self.attribute_map = {
            'channel_arn': 'ChannelARN',
            'sender_client_id': 'SenderClientId',
            'message_payload': 'MessagePayload'
        }

        self._channel_arn = channel_arn
        self._sender_client_id = sender_client_id
        self._message_payload = message_payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendAlexaOfferToMasterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendAlexaOfferToMaster_request of this SendAlexaOfferToMasterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_arn(self):
        """Gets the channel_arn of this SendAlexaOfferToMasterRequest.

        The ARN of the signaling channel by which Alexa and the master peer communicate.

        :return: The channel_arn of this SendAlexaOfferToMasterRequest.
        :rtype: str
        """
        return self._channel_arn

    @channel_arn.setter
    def channel_arn(self, channel_arn):
        """Sets the channel_arn of this SendAlexaOfferToMasterRequest.

        The ARN of the signaling channel by which Alexa and the master peer communicate.

        :param channel_arn: The channel_arn of this SendAlexaOfferToMasterRequest.
        :type channel_arn: str
        """
        if channel_arn is None:
            raise ValueError("Invalid value for `channel_arn`, must not be `None`")
        if channel_arn is not None and len(channel_arn) > 1024:
            raise ValueError("Invalid value for `channel_arn`, length must be less than or equal to `1024`")
        if channel_arn is not None and len(channel_arn) < 1:
            raise ValueError("Invalid value for `channel_arn`, length must be greater than or equal to `1`")
        if channel_arn is not None and not re.search(r'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+', channel_arn):
            raise ValueError("Invalid value for `channel_arn`, must be a follow pattern or equal to `/arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+/`")

        self._channel_arn = channel_arn

    @property
    def sender_client_id(self):
        """Gets the sender_client_id of this SendAlexaOfferToMasterRequest.

        The unique identifier for the sender client.

        :return: The sender_client_id of this SendAlexaOfferToMasterRequest.
        :rtype: str
        """
        return self._sender_client_id

    @sender_client_id.setter
    def sender_client_id(self, sender_client_id):
        """Sets the sender_client_id of this SendAlexaOfferToMasterRequest.

        The unique identifier for the sender client.

        :param sender_client_id: The sender_client_id of this SendAlexaOfferToMasterRequest.
        :type sender_client_id: str
        """
        if sender_client_id is None:
            raise ValueError("Invalid value for `sender_client_id`, must not be `None`")
        if sender_client_id is not None and len(sender_client_id) > 256:
            raise ValueError("Invalid value for `sender_client_id`, length must be less than or equal to `256`")
        if sender_client_id is not None and len(sender_client_id) < 1:
            raise ValueError("Invalid value for `sender_client_id`, length must be greater than or equal to `1`")
        if sender_client_id is not None and not re.search(r'[a-zA-Z0-9_.-]+', sender_client_id):
            raise ValueError("Invalid value for `sender_client_id`, must be a follow pattern or equal to `/[a-zA-Z0-9_.-]+/`")

        self._sender_client_id = sender_client_id

    @property
    def message_payload(self):
        """Gets the message_payload of this SendAlexaOfferToMasterRequest.

        The base64-encoded SDP offer content.

        :return: The message_payload of this SendAlexaOfferToMasterRequest.
        :rtype: str
        """
        return self._message_payload

    @message_payload.setter
    def message_payload(self, message_payload):
        """Sets the message_payload of this SendAlexaOfferToMasterRequest.

        The base64-encoded SDP offer content.

        :param message_payload: The message_payload of this SendAlexaOfferToMasterRequest.
        :type message_payload: str
        """
        if message_payload is None:
            raise ValueError("Invalid value for `message_payload`, must not be `None`")
        if message_payload is not None and len(message_payload) > 10000:
            raise ValueError("Invalid value for `message_payload`, length must be less than or equal to `10000`")
        if message_payload is not None and len(message_payload) < 1:
            raise ValueError("Invalid value for `message_payload`, length must be greater than or equal to `1`")
        if message_payload is not None and not re.search(r'[a-zA-Z0-9+\/=]+', message_payload):
            raise ValueError("Invalid value for `message_payload`, must be a follow pattern or equal to `/[a-zA-Z0-9+\/=]+/`")

        self._message_payload = message_payload
