/**
 * Amazon Kinesis Video Signaling Channels
 * Kinesis Video Streams Signaling Service is a intermediate service that establishes a communication channel for discovering peers, transmitting offers and answers in order to establish peer-to-peer connection in webRTC technology.
 *
 * The version of the OpenAPI document: 2019-12-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIceServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIceServer::OAIIceServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIceServer::OAIIceServer() {
    this->initializeModel();
}

OAIIceServer::~OAIIceServer() {}

void OAIIceServer::initializeModel() {

    m_uris_isSet = false;
    m_uris_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIIceServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIceServer::fromJsonObject(QJsonObject json) {

    m_uris_isValid = ::OpenAPI::fromJsonValue(m_uris, json[QString("Uris")]);
    m_uris_isSet = !json[QString("Uris")].isNull() && m_uris_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("Ttl")]);
    m_ttl_isSet = !json[QString("Ttl")].isNull() && m_ttl_isValid;
}

QString OAIIceServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIceServer::asJsonObject() const {
    QJsonObject obj;
    if (m_uris.isSet()) {
        obj.insert(QString("Uris"), ::OpenAPI::toJsonValue(m_uris));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("Ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QList OAIIceServer::getUris() const {
    return m_uris;
}
void OAIIceServer::setUris(const QList &uris) {
    m_uris = uris;
    m_uris_isSet = true;
}

bool OAIIceServer::is_uris_Set() const{
    return m_uris_isSet;
}

bool OAIIceServer::is_uris_Valid() const{
    return m_uris_isValid;
}

QString OAIIceServer::getUsername() const {
    return m_username;
}
void OAIIceServer::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIIceServer::is_username_Set() const{
    return m_username_isSet;
}

bool OAIIceServer::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIIceServer::getPassword() const {
    return m_password;
}
void OAIIceServer::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIIceServer::is_password_Set() const{
    return m_password_isSet;
}

bool OAIIceServer::is_password_Valid() const{
    return m_password_isValid;
}

qint32 OAIIceServer::getTtl() const {
    return m_ttl;
}
void OAIIceServer::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIIceServer::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIIceServer::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIIceServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uris.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIceServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
