/**
 * Amazon Kinesis Video Signaling Channels
 * Kinesis Video Streams Signaling Service is a intermediate service that establishes a communication channel for discovering peers, transmitting offers and answers in order to establish peer-to-peer connection in webRTC technology.
 *
 * The version of the OpenAPI document: 2019-12-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetIceServerConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetIceServerConfigRequest::OAIGetIceServerConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetIceServerConfigRequest::OAIGetIceServerConfigRequest() {
    this->initializeModel();
}

OAIGetIceServerConfigRequest::~OAIGetIceServerConfigRequest() {}

void OAIGetIceServerConfigRequest::initializeModel() {

    m_channel_arn_isSet = false;
    m_channel_arn_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIGetIceServerConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetIceServerConfigRequest::fromJsonObject(QJsonObject json) {

    m_channel_arn_isValid = ::OpenAPI::fromJsonValue(m_channel_arn, json[QString("ChannelARN")]);
    m_channel_arn_isSet = !json[QString("ChannelARN")].isNull() && m_channel_arn_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("ClientId")]);
    m_client_id_isSet = !json[QString("ClientId")].isNull() && m_client_id_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("Service")]);
    m_service_isSet = !json[QString("Service")].isNull() && m_service_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;
}

QString OAIGetIceServerConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetIceServerConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_arn_isSet) {
        obj.insert(QString("ChannelARN"), ::OpenAPI::toJsonValue(m_channel_arn));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("ClientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_service.isSet()) {
        obj.insert(QString("Service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIGetIceServerConfigRequest::getChannelArn() const {
    return m_channel_arn;
}
void OAIGetIceServerConfigRequest::setChannelArn(const QString &channel_arn) {
    m_channel_arn = channel_arn;
    m_channel_arn_isSet = true;
}

bool OAIGetIceServerConfigRequest::is_channel_arn_Set() const{
    return m_channel_arn_isSet;
}

bool OAIGetIceServerConfigRequest::is_channel_arn_Valid() const{
    return m_channel_arn_isValid;
}

QString OAIGetIceServerConfigRequest::getClientId() const {
    return m_client_id;
}
void OAIGetIceServerConfigRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIGetIceServerConfigRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIGetIceServerConfigRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

OAIService OAIGetIceServerConfigRequest::getService() const {
    return m_service;
}
void OAIGetIceServerConfigRequest::setService(const OAIService &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIGetIceServerConfigRequest::is_service_Set() const{
    return m_service_isSet;
}

bool OAIGetIceServerConfigRequest::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIGetIceServerConfigRequest::getUsername() const {
    return m_username;
}
void OAIGetIceServerConfigRequest::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIGetIceServerConfigRequest::is_username_Set() const{
    return m_username_isSet;
}

bool OAIGetIceServerConfigRequest::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIGetIceServerConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetIceServerConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_arn_isValid && true;
}

} // namespace OpenAPI
