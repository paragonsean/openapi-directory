/**
 * Amazon Kinesis Video Signaling Channels
 * Kinesis Video Streams Signaling Service is a intermediate service that establishes a communication channel for discovering peers, transmitting offers and answers in order to establish peer-to-peer connection in webRTC technology.
 *
 * The version of the OpenAPI document: 2019-12-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetIceServerConfigResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetIceServerConfigResponse::OAIGetIceServerConfigResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetIceServerConfigResponse::OAIGetIceServerConfigResponse() {
    this->initializeModel();
}

OAIGetIceServerConfigResponse::~OAIGetIceServerConfigResponse() {}

void OAIGetIceServerConfigResponse::initializeModel() {

    m_ice_server_list_isSet = false;
    m_ice_server_list_isValid = false;
}

void OAIGetIceServerConfigResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetIceServerConfigResponse::fromJsonObject(QJsonObject json) {

    m_ice_server_list_isValid = ::OpenAPI::fromJsonValue(m_ice_server_list, json[QString("IceServerList")]);
    m_ice_server_list_isSet = !json[QString("IceServerList")].isNull() && m_ice_server_list_isValid;
}

QString OAIGetIceServerConfigResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetIceServerConfigResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ice_server_list.isSet()) {
        obj.insert(QString("IceServerList"), ::OpenAPI::toJsonValue(m_ice_server_list));
    }
    return obj;
}

QList OAIGetIceServerConfigResponse::getIceServerList() const {
    return m_ice_server_list;
}
void OAIGetIceServerConfigResponse::setIceServerList(const QList &ice_server_list) {
    m_ice_server_list = ice_server_list;
    m_ice_server_list_isSet = true;
}

bool OAIGetIceServerConfigResponse::is_ice_server_list_Set() const{
    return m_ice_server_list_isSet;
}

bool OAIGetIceServerConfigResponse::is_ice_server_list_Valid() const{
    return m_ice_server_list_isValid;
}

bool OAIGetIceServerConfigResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ice_server_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetIceServerConfigResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
