/**
 * Amazon Kinesis Video Signaling Channels
 * Kinesis Video Streams Signaling Service is a intermediate service that establishes a communication channel for discovering peers, transmitting offers and answers in order to establish peer-to-peer connection in webRTC technology.
 *
 * The version of the OpenAPI document: 2019-12-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendAlexaOfferToMasterResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendAlexaOfferToMasterResponse::OAISendAlexaOfferToMasterResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendAlexaOfferToMasterResponse::OAISendAlexaOfferToMasterResponse() {
    this->initializeModel();
}

OAISendAlexaOfferToMasterResponse::~OAISendAlexaOfferToMasterResponse() {}

void OAISendAlexaOfferToMasterResponse::initializeModel() {

    m_answer_isSet = false;
    m_answer_isValid = false;
}

void OAISendAlexaOfferToMasterResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendAlexaOfferToMasterResponse::fromJsonObject(QJsonObject json) {

    m_answer_isValid = ::OpenAPI::fromJsonValue(m_answer, json[QString("Answer")]);
    m_answer_isSet = !json[QString("Answer")].isNull() && m_answer_isValid;
}

QString OAISendAlexaOfferToMasterResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendAlexaOfferToMasterResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_isSet) {
        obj.insert(QString("Answer"), ::OpenAPI::toJsonValue(m_answer));
    }
    return obj;
}

QString OAISendAlexaOfferToMasterResponse::getAnswer() const {
    return m_answer;
}
void OAISendAlexaOfferToMasterResponse::setAnswer(const QString &answer) {
    m_answer = answer;
    m_answer_isSet = true;
}

bool OAISendAlexaOfferToMasterResponse::is_answer_Set() const{
    return m_answer_isSet;
}

bool OAISendAlexaOfferToMasterResponse::is_answer_Valid() const{
    return m_answer_isValid;
}

bool OAISendAlexaOfferToMasterResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendAlexaOfferToMasterResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
