/*
 * Amazon Kinesis Video Signaling Channels
 * Kinesis Video Streams Signaling Service is a intermediate service that establishes a communication channel for discovering peers, transmitting offers and answers in order to establish peer-to-peer connection in webRTC technology.
 *
 * The version of the OpenAPI document: 2019-12-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetIceServerConfigRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:05.741727-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetIceServerConfigRequest {
  public static final String SERIALIZED_NAME_CHANNEL_A_R_N = "ChannelARN";
  @SerializedName(SERIALIZED_NAME_CHANNEL_A_R_N)
  private String channelARN;

  public static final String SERIALIZED_NAME_CLIENT_ID = "ClientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  /**
   * Specifies the desired service. Currently, &lt;code&gt;TURN&lt;/code&gt; is the only valid value.
   */
  @JsonAdapter(ServiceEnum.Adapter.class)
  public enum ServiceEnum {
    TURN("TURN");

    private String value;

    ServiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceEnum fromValue(String value) {
      for (ServiceEnum b : ServiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE = "Service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private ServiceEnum service;

  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public GetIceServerConfigRequest() {
  }

  public GetIceServerConfigRequest channelARN(String channelARN) {
    this.channelARN = channelARN;
    return this;
  }

  /**
   * The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers. 
   * @return channelARN
   */
  @javax.annotation.Nonnull
  public String getChannelARN() {
    return channelARN;
  }

  public void setChannelARN(String channelARN) {
    this.channelARN = channelARN;
  }


  public GetIceServerConfigRequest clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Unique identifier for the viewer. Must be unique within the signaling channel.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public GetIceServerConfigRequest service(ServiceEnum service) {
    this.service = service;
    return this;
  }

  /**
   * Specifies the desired service. Currently, &lt;code&gt;TURN&lt;/code&gt; is the only valid value.
   * @return service
   */
  @javax.annotation.Nullable
  public ServiceEnum getService() {
    return service;
  }

  public void setService(ServiceEnum service) {
    this.service = service;
  }


  public GetIceServerConfigRequest username(String username) {
    this.username = username;
    return this;
  }

  /**
   * An optional user ID to be associated with the credentials.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetIceServerConfigRequest getIceServerConfigRequest = (GetIceServerConfigRequest) o;
    return Objects.equals(this.channelARN, getIceServerConfigRequest.channelARN) &&
        Objects.equals(this.clientId, getIceServerConfigRequest.clientId) &&
        Objects.equals(this.service, getIceServerConfigRequest.service) &&
        Objects.equals(this.username, getIceServerConfigRequest.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelARN, clientId, service, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetIceServerConfigRequest {\n");
    sb.append("    channelARN: ").append(toIndentedString(channelARN)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelARN");
    openapiFields.add("ClientId");
    openapiFields.add("Service");
    openapiFields.add("Username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ChannelARN");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetIceServerConfigRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetIceServerConfigRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetIceServerConfigRequest is not found in the empty JSON string", GetIceServerConfigRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetIceServerConfigRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetIceServerConfigRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetIceServerConfigRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ChannelARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChannelARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChannelARN").toString()));
      }
      if ((jsonObj.get("ClientId") != null && !jsonObj.get("ClientId").isJsonNull()) && !jsonObj.get("ClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientId").toString()));
      }
      if ((jsonObj.get("Service") != null && !jsonObj.get("Service").isJsonNull()) && !jsonObj.get("Service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Service").toString()));
      }
      // validate the optional field `Service`
      if (jsonObj.get("Service") != null && !jsonObj.get("Service").isJsonNull()) {
        ServiceEnum.validateJsonElement(jsonObj.get("Service"));
      }
      if ((jsonObj.get("Username") != null && !jsonObj.get("Username").isJsonNull()) && !jsonObj.get("Username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetIceServerConfigRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetIceServerConfigRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetIceServerConfigRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetIceServerConfigRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetIceServerConfigRequest>() {
           @Override
           public void write(JsonWriter out, GetIceServerConfigRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetIceServerConfigRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetIceServerConfigRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetIceServerConfigRequest
   * @throws IOException if the JSON string is invalid with respect to GetIceServerConfigRequest
   */
  public static GetIceServerConfigRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetIceServerConfigRequest.class);
  }

  /**
   * Convert an instance of GetIceServerConfigRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

