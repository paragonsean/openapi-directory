/**
 * Amazon Kinesis Video Signaling Channels
 * Kinesis Video Streams Signaling Service is a intermediate service that establishes a communication channel for discovering peers, transmitting offers and answers in order to establish peer-to-peer connection in webRTC technology.
 *
 * The version of the OpenAPI document: 2019-12-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetIceServerConfigRequest from '../model/GetIceServerConfigRequest';
import GetIceServerConfigResponse from '../model/GetIceServerConfigResponse';
import SendAlexaOfferToMasterRequest from '../model/SendAlexaOfferToMasterRequest';
import SendAlexaOfferToMasterResponse from '../model/SendAlexaOfferToMasterResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-12-04
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getIceServerConfig operation.
     * @callback module:api/DefaultApi~getIceServerConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIceServerConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the Interactive Connectivity Establishment (ICE) server configuration information, including URIs, username, and password which can be used to configure the WebRTC connection. The ICE component uses this configuration information to setup the WebRTC connection, including authenticating with the Traversal Using Relays around NAT (TURN) relay server. </p> <p>TURN is a protocol that is used to improve the connectivity of peer-to-peer applications. By providing a cloud-based relay service, TURN ensures that a connection can be established even when one or more peers are incapable of a direct peer-to-peer connection. For more information, see <a href=\"https://tools.ietf.org/html/draft-uberti-rtcweb-turn-rest-00\">A REST API For Access To TURN Services</a>.</p> <p> You can invoke this API to establish a fallback mechanism in case either of the peers is unable to establish a direct peer-to-peer connection over a signaling channel. You must specify either a signaling channel ARN or the client ID in order to invoke this API.</p>
     * @param {module:model/GetIceServerConfigRequest} getIceServerConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getIceServerConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetIceServerConfigResponse}
     */
    getIceServerConfig(getIceServerConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = getIceServerConfigRequest;
      // verify the required parameter 'getIceServerConfigRequest' is set
      if (getIceServerConfigRequest === undefined || getIceServerConfigRequest === null) {
        throw new Error("Missing the required parameter 'getIceServerConfigRequest' when calling getIceServerConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetIceServerConfigResponse;
      return this.apiClient.callApi(
        '/v1/get-ice-server-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendAlexaOfferToMaster operation.
     * @callback module:api/DefaultApi~sendAlexaOfferToMasterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendAlexaOfferToMasterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This API allows you to connect WebRTC-enabled devices with Alexa display devices. When invoked, it sends the Alexa Session Description Protocol (SDP) offer to the master peer. The offer is delivered as soon as the master is connected to the specified signaling channel. This API returns the SDP answer from the connected master. If the master is not connected to the signaling channel, redelivery requests are made until the message expires.
     * @param {module:model/SendAlexaOfferToMasterRequest} sendAlexaOfferToMasterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendAlexaOfferToMasterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendAlexaOfferToMasterResponse}
     */
    sendAlexaOfferToMaster(sendAlexaOfferToMasterRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendAlexaOfferToMasterRequest;
      // verify the required parameter 'sendAlexaOfferToMasterRequest' is set
      if (sendAlexaOfferToMasterRequest === undefined || sendAlexaOfferToMasterRequest === null) {
        throw new Error("Missing the required parameter 'sendAlexaOfferToMasterRequest' when calling sendAlexaOfferToMaster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendAlexaOfferToMasterResponse;
      return this.apiClient.callApi(
        '/v1/send-alexa-offer-to-master', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
