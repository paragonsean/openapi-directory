/**
 * Amazon Kinesis Video Signaling Channels
 * Kinesis Video Streams Signaling Service is a intermediate service that establishes a communication channel for discovering peers, transmitting offers and answers in order to establish peer-to-peer connection in webRTC technology.
 *
 * The version of the OpenAPI document: 2019-12-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SendAlexaOfferToMasterRequest model module.
 * @module model/SendAlexaOfferToMasterRequest
 * @version 2019-12-04
 */
class SendAlexaOfferToMasterRequest {
    /**
     * Constructs a new <code>SendAlexaOfferToMasterRequest</code>.
     * @alias module:model/SendAlexaOfferToMasterRequest
     * @param channelARN {String} The ARN of the signaling channel by which Alexa and the master peer communicate.
     * @param senderClientId {String} The unique identifier for the sender client.
     * @param messagePayload {String} The base64-encoded SDP offer content.
     */
    constructor(channelARN, senderClientId, messagePayload) { 
        
        SendAlexaOfferToMasterRequest.initialize(this, channelARN, senderClientId, messagePayload);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channelARN, senderClientId, messagePayload) { 
        obj['ChannelARN'] = channelARN;
        obj['SenderClientId'] = senderClientId;
        obj['MessagePayload'] = messagePayload;
    }

    /**
     * Constructs a <code>SendAlexaOfferToMasterRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendAlexaOfferToMasterRequest} obj Optional instance to populate.
     * @return {module:model/SendAlexaOfferToMasterRequest} The populated <code>SendAlexaOfferToMasterRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendAlexaOfferToMasterRequest();

            if (data.hasOwnProperty('ChannelARN')) {
                obj['ChannelARN'] = ApiClient.convertToType(data['ChannelARN'], 'String');
            }
            if (data.hasOwnProperty('SenderClientId')) {
                obj['SenderClientId'] = ApiClient.convertToType(data['SenderClientId'], 'String');
            }
            if (data.hasOwnProperty('MessagePayload')) {
                obj['MessagePayload'] = ApiClient.convertToType(data['MessagePayload'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SendAlexaOfferToMasterRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SendAlexaOfferToMasterRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SendAlexaOfferToMasterRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ChannelARN'] && !(typeof data['ChannelARN'] === 'string' || data['ChannelARN'] instanceof String)) {
            throw new Error("Expected the field `ChannelARN` to be a primitive type in the JSON string but got " + data['ChannelARN']);
        }
        // ensure the json data is a string
        if (data['SenderClientId'] && !(typeof data['SenderClientId'] === 'string' || data['SenderClientId'] instanceof String)) {
            throw new Error("Expected the field `SenderClientId` to be a primitive type in the JSON string but got " + data['SenderClientId']);
        }
        // ensure the json data is a string
        if (data['MessagePayload'] && !(typeof data['MessagePayload'] === 'string' || data['MessagePayload'] instanceof String)) {
            throw new Error("Expected the field `MessagePayload` to be a primitive type in the JSON string but got " + data['MessagePayload']);
        }

        return true;
    }


}

SendAlexaOfferToMasterRequest.RequiredProperties = ["ChannelARN", "SenderClientId", "MessagePayload"];

/**
 * The ARN of the signaling channel by which Alexa and the master peer communicate.
 * @member {String} ChannelARN
 */
SendAlexaOfferToMasterRequest.prototype['ChannelARN'] = undefined;

/**
 * The unique identifier for the sender client.
 * @member {String} SenderClientId
 */
SendAlexaOfferToMasterRequest.prototype['SenderClientId'] = undefined;

/**
 * The base64-encoded SDP offer content.
 * @member {String} MessagePayload
 */
SendAlexaOfferToMasterRequest.prototype['MessagePayload'] = undefined;






export default SendAlexaOfferToMasterRequest;

