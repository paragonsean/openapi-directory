/**
 * Amazon Kinesis Video Signaling Channels
 * Kinesis Video Streams Signaling Service is a intermediate service that establishes a communication channel for discovering peers, transmitting offers and answers in order to establish peer-to-peer connection in webRTC technology.
 *
 * The version of the OpenAPI document: 2019-12-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetIceServerConfigRequest model module.
 * @module model/GetIceServerConfigRequest
 * @version 2019-12-04
 */
class GetIceServerConfigRequest {
    /**
     * Constructs a new <code>GetIceServerConfigRequest</code>.
     * @alias module:model/GetIceServerConfigRequest
     * @param channelARN {String} The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers. 
     */
    constructor(channelARN) { 
        
        GetIceServerConfigRequest.initialize(this, channelARN);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channelARN) { 
        obj['ChannelARN'] = channelARN;
    }

    /**
     * Constructs a <code>GetIceServerConfigRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetIceServerConfigRequest} obj Optional instance to populate.
     * @return {module:model/GetIceServerConfigRequest} The populated <code>GetIceServerConfigRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetIceServerConfigRequest();

            if (data.hasOwnProperty('ChannelARN')) {
                obj['ChannelARN'] = ApiClient.convertToType(data['ChannelARN'], 'String');
            }
            if (data.hasOwnProperty('ClientId')) {
                obj['ClientId'] = ApiClient.convertToType(data['ClientId'], 'String');
            }
            if (data.hasOwnProperty('Service')) {
                obj['Service'] = ApiClient.convertToType(data['Service'], 'String');
            }
            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetIceServerConfigRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetIceServerConfigRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetIceServerConfigRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ChannelARN'] && !(typeof data['ChannelARN'] === 'string' || data['ChannelARN'] instanceof String)) {
            throw new Error("Expected the field `ChannelARN` to be a primitive type in the JSON string but got " + data['ChannelARN']);
        }
        // ensure the json data is a string
        if (data['ClientId'] && !(typeof data['ClientId'] === 'string' || data['ClientId'] instanceof String)) {
            throw new Error("Expected the field `ClientId` to be a primitive type in the JSON string but got " + data['ClientId']);
        }
        // ensure the json data is a string
        if (data['Service'] && !(typeof data['Service'] === 'string' || data['Service'] instanceof String)) {
            throw new Error("Expected the field `Service` to be a primitive type in the JSON string but got " + data['Service']);
        }
        // ensure the json data is a string
        if (data['Username'] && !(typeof data['Username'] === 'string' || data['Username'] instanceof String)) {
            throw new Error("Expected the field `Username` to be a primitive type in the JSON string but got " + data['Username']);
        }

        return true;
    }


}

GetIceServerConfigRequest.RequiredProperties = ["ChannelARN"];

/**
 * The ARN of the signaling channel to be used for the peer-to-peer connection between configured peers. 
 * @member {String} ChannelARN
 */
GetIceServerConfigRequest.prototype['ChannelARN'] = undefined;

/**
 * Unique identifier for the viewer. Must be unique within the signaling channel.
 * @member {String} ClientId
 */
GetIceServerConfigRequest.prototype['ClientId'] = undefined;

/**
 * Specifies the desired service. Currently, <code>TURN</code> is the only valid value.
 * @member {module:model/GetIceServerConfigRequest.ServiceEnum} Service
 */
GetIceServerConfigRequest.prototype['Service'] = undefined;

/**
 * An optional user ID to be associated with the credentials.
 * @member {String} Username
 */
GetIceServerConfigRequest.prototype['Username'] = undefined;





/**
 * Allowed values for the <code>Service</code> property.
 * @enum {String}
 * @readonly
 */
GetIceServerConfigRequest['ServiceEnum'] = {

    /**
     * value: "TURN"
     * @const
     */
    "TURN": "TURN"
};



export default GetIceServerConfigRequest;

