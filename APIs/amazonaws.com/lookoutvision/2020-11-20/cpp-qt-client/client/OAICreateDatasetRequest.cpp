/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDatasetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDatasetRequest::OAICreateDatasetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDatasetRequest::OAICreateDatasetRequest() {
    this->initializeModel();
}

OAICreateDatasetRequest::~OAICreateDatasetRequest() {}

void OAICreateDatasetRequest::initializeModel() {

    m_dataset_type_isSet = false;
    m_dataset_type_isValid = false;

    m_dataset_source_isSet = false;
    m_dataset_source_isValid = false;
}

void OAICreateDatasetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDatasetRequest::fromJsonObject(QJsonObject json) {

    m_dataset_type_isValid = ::OpenAPI::fromJsonValue(m_dataset_type, json[QString("DatasetType")]);
    m_dataset_type_isSet = !json[QString("DatasetType")].isNull() && m_dataset_type_isValid;

    m_dataset_source_isValid = ::OpenAPI::fromJsonValue(m_dataset_source, json[QString("DatasetSource")]);
    m_dataset_source_isSet = !json[QString("DatasetSource")].isNull() && m_dataset_source_isValid;
}

QString OAICreateDatasetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDatasetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_type_isSet) {
        obj.insert(QString("DatasetType"), ::OpenAPI::toJsonValue(m_dataset_type));
    }
    if (m_dataset_source.isSet()) {
        obj.insert(QString("DatasetSource"), ::OpenAPI::toJsonValue(m_dataset_source));
    }
    return obj;
}

QString OAICreateDatasetRequest::getDatasetType() const {
    return m_dataset_type;
}
void OAICreateDatasetRequest::setDatasetType(const QString &dataset_type) {
    m_dataset_type = dataset_type;
    m_dataset_type_isSet = true;
}

bool OAICreateDatasetRequest::is_dataset_type_Set() const{
    return m_dataset_type_isSet;
}

bool OAICreateDatasetRequest::is_dataset_type_Valid() const{
    return m_dataset_type_isValid;
}

OAICreateDatasetRequest_DatasetSource OAICreateDatasetRequest::getDatasetSource() const {
    return m_dataset_source;
}
void OAICreateDatasetRequest::setDatasetSource(const OAICreateDatasetRequest_DatasetSource &dataset_source) {
    m_dataset_source = dataset_source;
    m_dataset_source_isSet = true;
}

bool OAICreateDatasetRequest::is_dataset_source_Set() const{
    return m_dataset_source_isSet;
}

bool OAICreateDatasetRequest::is_dataset_source_Valid() const{
    return m_dataset_source_isValid;
}

bool OAICreateDatasetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDatasetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_type_isValid && true;
}

} // namespace OpenAPI
