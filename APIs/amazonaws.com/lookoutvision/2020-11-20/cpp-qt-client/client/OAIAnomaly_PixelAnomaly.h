/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnomaly_PixelAnomaly.h
 *
 * 
 */

#ifndef OAIAnomaly_PixelAnomaly_H
#define OAIAnomaly_PixelAnomaly_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAnomaly_PixelAnomaly : public OAIObject {
public:
    OAIAnomaly_PixelAnomaly();
    OAIAnomaly_PixelAnomaly(QString json);
    ~OAIAnomaly_PixelAnomaly() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getTotalPercentageArea() const;
    void setTotalPercentageArea(const float &total_percentage_area);
    bool is_total_percentage_area_Set() const;
    bool is_total_percentage_area_Valid() const;

    QString getColor() const;
    void setColor(const QString &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_total_percentage_area;
    bool m_total_percentage_area_isSet;
    bool m_total_percentage_area_isValid;

    QString m_color;
    bool m_color_isSet;
    bool m_color_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnomaly_PixelAnomaly)

#endif // OAIAnomaly_PixelAnomaly_H
