/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelDescription_EvaluationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelDescription_EvaluationResult::OAIModelDescription_EvaluationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelDescription_EvaluationResult::OAIModelDescription_EvaluationResult() {
    this->initializeModel();
}

OAIModelDescription_EvaluationResult::~OAIModelDescription_EvaluationResult() {}

void OAIModelDescription_EvaluationResult::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIModelDescription_EvaluationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelDescription_EvaluationResult::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;
}

QString OAIModelDescription_EvaluationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelDescription_EvaluationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

QString OAIModelDescription_EvaluationResult::getBucket() const {
    return m_bucket;
}
void OAIModelDescription_EvaluationResult::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIModelDescription_EvaluationResult::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIModelDescription_EvaluationResult::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIModelDescription_EvaluationResult::getKey() const {
    return m_key;
}
void OAIModelDescription_EvaluationResult::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIModelDescription_EvaluationResult::is_key_Set() const{
    return m_key_isSet;
}

bool OAIModelDescription_EvaluationResult::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIModelDescription_EvaluationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelDescription_EvaluationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_isValid && m_key_isValid && true;
}

} // namespace OpenAPI
