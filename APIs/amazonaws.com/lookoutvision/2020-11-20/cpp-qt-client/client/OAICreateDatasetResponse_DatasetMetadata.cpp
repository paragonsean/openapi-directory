/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDatasetResponse_DatasetMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDatasetResponse_DatasetMetadata::OAICreateDatasetResponse_DatasetMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDatasetResponse_DatasetMetadata::OAICreateDatasetResponse_DatasetMetadata() {
    this->initializeModel();
}

OAICreateDatasetResponse_DatasetMetadata::~OAICreateDatasetResponse_DatasetMetadata() {}

void OAICreateDatasetResponse_DatasetMetadata::initializeModel() {

    m_dataset_type_isSet = false;
    m_dataset_type_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;
}

void OAICreateDatasetResponse_DatasetMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDatasetResponse_DatasetMetadata::fromJsonObject(QJsonObject json) {

    m_dataset_type_isValid = ::OpenAPI::fromJsonValue(m_dataset_type, json[QString("DatasetType")]);
    m_dataset_type_isSet = !json[QString("DatasetType")].isNull() && m_dataset_type_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("CreationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("CreationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;
}

QString OAICreateDatasetResponse_DatasetMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDatasetResponse_DatasetMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_type_isSet) {
        obj.insert(QString("DatasetType"), ::OpenAPI::toJsonValue(m_dataset_type));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("CreationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    return obj;
}

QString OAICreateDatasetResponse_DatasetMetadata::getDatasetType() const {
    return m_dataset_type;
}
void OAICreateDatasetResponse_DatasetMetadata::setDatasetType(const QString &dataset_type) {
    m_dataset_type = dataset_type;
    m_dataset_type_isSet = true;
}

bool OAICreateDatasetResponse_DatasetMetadata::is_dataset_type_Set() const{
    return m_dataset_type_isSet;
}

bool OAICreateDatasetResponse_DatasetMetadata::is_dataset_type_Valid() const{
    return m_dataset_type_isValid;
}

QDateTime OAICreateDatasetResponse_DatasetMetadata::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAICreateDatasetResponse_DatasetMetadata::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAICreateDatasetResponse_DatasetMetadata::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAICreateDatasetResponse_DatasetMetadata::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

OAIDatasetStatus OAICreateDatasetResponse_DatasetMetadata::getStatus() const {
    return m_status;
}
void OAICreateDatasetResponse_DatasetMetadata::setStatus(const OAIDatasetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateDatasetResponse_DatasetMetadata::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateDatasetResponse_DatasetMetadata::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICreateDatasetResponse_DatasetMetadata::getStatusMessage() const {
    return m_status_message;
}
void OAICreateDatasetResponse_DatasetMetadata::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAICreateDatasetResponse_DatasetMetadata::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAICreateDatasetResponse_DatasetMetadata::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAICreateDatasetResponse_DatasetMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDatasetResponse_DatasetMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
