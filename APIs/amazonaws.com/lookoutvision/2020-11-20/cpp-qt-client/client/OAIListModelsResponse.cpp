/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListModelsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListModelsResponse::OAIListModelsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListModelsResponse::OAIListModelsResponse() {
    this->initializeModel();
}

OAIListModelsResponse::~OAIListModelsResponse() {}

void OAIListModelsResponse::initializeModel() {

    m_models_isSet = false;
    m_models_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListModelsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListModelsResponse::fromJsonObject(QJsonObject json) {

    m_models_isValid = ::OpenAPI::fromJsonValue(m_models, json[QString("Models")]);
    m_models_isSet = !json[QString("Models")].isNull() && m_models_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListModelsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListModelsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_models.isSet()) {
        obj.insert(QString("Models"), ::OpenAPI::toJsonValue(m_models));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListModelsResponse::getModels() const {
    return m_models;
}
void OAIListModelsResponse::setModels(const QList &models) {
    m_models = models;
    m_models_isSet = true;
}

bool OAIListModelsResponse::is_models_Set() const{
    return m_models_isSet;
}

bool OAIListModelsResponse::is_models_Valid() const{
    return m_models_isValid;
}

QString OAIListModelsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListModelsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListModelsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListModelsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListModelsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_models.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListModelsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
