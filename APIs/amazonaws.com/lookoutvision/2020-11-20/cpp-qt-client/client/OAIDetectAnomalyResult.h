/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDetectAnomalyResult.h
 *
 * The prediction results from a call to &lt;a&gt;DetectAnomalies&lt;/a&gt;. &lt;code&gt;DetectAnomalyResult&lt;/code&gt; includes classification information for the prediction (&lt;code&gt;IsAnomalous&lt;/code&gt; and &lt;code&gt;Confidence&lt;/code&gt;). If the model you use is an image segementation model, &lt;code&gt;DetectAnomalyResult&lt;/code&gt; also includes segmentation information (&lt;code&gt;Anomalies&lt;/code&gt; and &lt;code&gt;AnomalyMask&lt;/code&gt;). Classification information is calculated separately from segmentation information and you shouldn&#39;t assume a relationship between them.
 */

#ifndef OAIDetectAnomalyResult_H
#define OAIDetectAnomalyResult_H

#include <QJsonObject>

#include "OAIDetectAnomalyResult_Source.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDetectAnomalyResult_Source;

class OAIDetectAnomalyResult : public OAIObject {
public:
    OAIDetectAnomalyResult();
    OAIDetectAnomalyResult(QString json);
    ~OAIDetectAnomalyResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDetectAnomalyResult_Source getSource() const;
    void setSource(const OAIDetectAnomalyResult_Source &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    bool getIsAnomalous() const;
    void setIsAnomalous(const bool &is_anomalous);
    bool is_is_anomalous_Set() const;
    bool is_is_anomalous_Valid() const;

    float getConfidence() const;
    void setConfidence(const float &confidence);
    bool is_confidence_Set() const;
    bool is_confidence_Valid() const;

    QList getAnomalies() const;
    void setAnomalies(const QList &anomalies);
    bool is_anomalies_Set() const;
    bool is_anomalies_Valid() const;

    QString getAnomalyMask() const;
    void setAnomalyMask(const QString &anomaly_mask);
    bool is_anomaly_mask_Set() const;
    bool is_anomaly_mask_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDetectAnomalyResult_Source m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    bool m_is_anomalous;
    bool m_is_anomalous_isSet;
    bool m_is_anomalous_isValid;

    float m_confidence;
    bool m_confidence_isSet;
    bool m_confidence_isValid;

    QList m_anomalies;
    bool m_anomalies_isSet;
    bool m_anomalies_isValid;

    QString m_anomaly_mask;
    bool m_anomaly_mask_isSet;
    bool m_anomaly_mask_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDetectAnomalyResult)

#endif // OAIDetectAnomalyResult_H
