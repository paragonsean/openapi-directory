/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListProjectsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListProjectsResponse::OAIListProjectsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListProjectsResponse::OAIListProjectsResponse() {
    this->initializeModel();
}

OAIListProjectsResponse::~OAIListProjectsResponse() {}

void OAIListProjectsResponse::initializeModel() {

    m_projects_isSet = false;
    m_projects_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListProjectsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListProjectsResponse::fromJsonObject(QJsonObject json) {

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("Projects")]);
    m_projects_isSet = !json[QString("Projects")].isNull() && m_projects_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListProjectsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListProjectsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_projects.isSet()) {
        obj.insert(QString("Projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListProjectsResponse::getProjects() const {
    return m_projects;
}
void OAIListProjectsResponse::setProjects(const QList &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAIListProjectsResponse::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAIListProjectsResponse::is_projects_Valid() const{
    return m_projects_isValid;
}

QString OAIListProjectsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListProjectsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListProjectsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListProjectsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListProjectsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_projects.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListProjectsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
