/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteProjectResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteProjectResponse::OAIDeleteProjectResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteProjectResponse::OAIDeleteProjectResponse() {
    this->initializeModel();
}

OAIDeleteProjectResponse::~OAIDeleteProjectResponse() {}

void OAIDeleteProjectResponse::initializeModel() {

    m_project_arn_isSet = false;
    m_project_arn_isValid = false;
}

void OAIDeleteProjectResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteProjectResponse::fromJsonObject(QJsonObject json) {

    m_project_arn_isValid = ::OpenAPI::fromJsonValue(m_project_arn, json[QString("ProjectArn")]);
    m_project_arn_isSet = !json[QString("ProjectArn")].isNull() && m_project_arn_isValid;
}

QString OAIDeleteProjectResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteProjectResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_project_arn_isSet) {
        obj.insert(QString("ProjectArn"), ::OpenAPI::toJsonValue(m_project_arn));
    }
    return obj;
}

QString OAIDeleteProjectResponse::getProjectArn() const {
    return m_project_arn;
}
void OAIDeleteProjectResponse::setProjectArn(const QString &project_arn) {
    m_project_arn = project_arn;
    m_project_arn_isSet = true;
}

bool OAIDeleteProjectResponse::is_project_arn_Set() const{
    return m_project_arn_isSet;
}

bool OAIDeleteProjectResponse::is_project_arn_Valid() const{
    return m_project_arn_isValid;
}

bool OAIDeleteProjectResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteProjectResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
