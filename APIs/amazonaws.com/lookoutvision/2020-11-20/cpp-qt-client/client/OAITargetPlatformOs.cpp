/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetPlatformOs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetPlatformOs::OAITargetPlatformOs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetPlatformOs::OAITargetPlatformOs() {
    this->initializeModel();
}

OAITargetPlatformOs::~OAITargetPlatformOs() {}

void OAITargetPlatformOs::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITargetPlatformOs::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITargetPlatformOs::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LINUX", Qt::CaseInsensitive) == 0) {
        m_value = eOAITargetPlatformOs::LINUX;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITargetPlatformOs::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITargetPlatformOs::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITargetPlatformOs::LINUX:
            val = "LINUX";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITargetPlatformOs::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITargetPlatformOs::eOAITargetPlatformOs OAITargetPlatformOs::getValue() const {
    return m_value;
}

void OAITargetPlatformOs::setValue(const OAITargetPlatformOs::eOAITargetPlatformOs& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITargetPlatformOs::isSet() const {
    
    return m_value_isSet;
}

bool OAITargetPlatformOs::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
