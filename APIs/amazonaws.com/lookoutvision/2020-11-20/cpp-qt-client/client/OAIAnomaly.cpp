/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnomaly.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnomaly::OAIAnomaly(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnomaly::OAIAnomaly() {
    this->initializeModel();
}

OAIAnomaly::~OAIAnomaly() {}

void OAIAnomaly::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_pixel_anomaly_isSet = false;
    m_pixel_anomaly_isValid = false;
}

void OAIAnomaly::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnomaly::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_pixel_anomaly_isValid = ::OpenAPI::fromJsonValue(m_pixel_anomaly, json[QString("PixelAnomaly")]);
    m_pixel_anomaly_isSet = !json[QString("PixelAnomaly")].isNull() && m_pixel_anomaly_isValid;
}

QString OAIAnomaly::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnomaly::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pixel_anomaly.isSet()) {
        obj.insert(QString("PixelAnomaly"), ::OpenAPI::toJsonValue(m_pixel_anomaly));
    }
    return obj;
}

QString OAIAnomaly::getName() const {
    return m_name;
}
void OAIAnomaly::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnomaly::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnomaly::is_name_Valid() const{
    return m_name_isValid;
}

OAIAnomaly_PixelAnomaly OAIAnomaly::getPixelAnomaly() const {
    return m_pixel_anomaly;
}
void OAIAnomaly::setPixelAnomaly(const OAIAnomaly_PixelAnomaly &pixel_anomaly) {
    m_pixel_anomaly = pixel_anomaly;
    m_pixel_anomaly_isSet = true;
}

bool OAIAnomaly::is_pixel_anomaly_Set() const{
    return m_pixel_anomaly_isSet;
}

bool OAIAnomaly::is_pixel_anomaly_Valid() const{
    return m_pixel_anomaly_isValid;
}

bool OAIAnomaly::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pixel_anomaly.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnomaly::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
