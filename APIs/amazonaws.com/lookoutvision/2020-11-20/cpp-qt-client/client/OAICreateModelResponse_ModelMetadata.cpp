/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateModelResponse_ModelMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateModelResponse_ModelMetadata::OAICreateModelResponse_ModelMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateModelResponse_ModelMetadata::OAICreateModelResponse_ModelMetadata() {
    this->initializeModel();
}

OAICreateModelResponse_ModelMetadata::~OAICreateModelResponse_ModelMetadata() {}

void OAICreateModelResponse_ModelMetadata::initializeModel() {

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_model_version_isSet = false;
    m_model_version_isValid = false;

    m_model_arn_isSet = false;
    m_model_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_performance_isSet = false;
    m_performance_isValid = false;
}

void OAICreateModelResponse_ModelMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateModelResponse_ModelMetadata::fromJsonObject(QJsonObject json) {

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("CreationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("CreationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("ModelVersion")]);
    m_model_version_isSet = !json[QString("ModelVersion")].isNull() && m_model_version_isValid;

    m_model_arn_isValid = ::OpenAPI::fromJsonValue(m_model_arn, json[QString("ModelArn")]);
    m_model_arn_isSet = !json[QString("ModelArn")].isNull() && m_model_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_performance_isValid = ::OpenAPI::fromJsonValue(m_performance, json[QString("Performance")]);
    m_performance_isSet = !json[QString("Performance")].isNull() && m_performance_isValid;
}

QString OAICreateModelResponse_ModelMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateModelResponse_ModelMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("CreationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_model_version_isSet) {
        obj.insert(QString("ModelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    if (m_model_arn_isSet) {
        obj.insert(QString("ModelArn"), ::OpenAPI::toJsonValue(m_model_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_performance.isSet()) {
        obj.insert(QString("Performance"), ::OpenAPI::toJsonValue(m_performance));
    }
    return obj;
}

QDateTime OAICreateModelResponse_ModelMetadata::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAICreateModelResponse_ModelMetadata::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAICreateModelResponse_ModelMetadata::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAICreateModelResponse_ModelMetadata::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

QString OAICreateModelResponse_ModelMetadata::getModelVersion() const {
    return m_model_version;
}
void OAICreateModelResponse_ModelMetadata::setModelVersion(const QString &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAICreateModelResponse_ModelMetadata::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAICreateModelResponse_ModelMetadata::is_model_version_Valid() const{
    return m_model_version_isValid;
}

QString OAICreateModelResponse_ModelMetadata::getModelArn() const {
    return m_model_arn;
}
void OAICreateModelResponse_ModelMetadata::setModelArn(const QString &model_arn) {
    m_model_arn = model_arn;
    m_model_arn_isSet = true;
}

bool OAICreateModelResponse_ModelMetadata::is_model_arn_Set() const{
    return m_model_arn_isSet;
}

bool OAICreateModelResponse_ModelMetadata::is_model_arn_Valid() const{
    return m_model_arn_isValid;
}

QString OAICreateModelResponse_ModelMetadata::getDescription() const {
    return m_description;
}
void OAICreateModelResponse_ModelMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateModelResponse_ModelMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateModelResponse_ModelMetadata::is_description_Valid() const{
    return m_description_isValid;
}

OAIModelStatus OAICreateModelResponse_ModelMetadata::getStatus() const {
    return m_status;
}
void OAICreateModelResponse_ModelMetadata::setStatus(const OAIModelStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateModelResponse_ModelMetadata::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateModelResponse_ModelMetadata::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICreateModelResponse_ModelMetadata::getStatusMessage() const {
    return m_status_message;
}
void OAICreateModelResponse_ModelMetadata::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAICreateModelResponse_ModelMetadata::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAICreateModelResponse_ModelMetadata::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAIModelMetadata_Performance OAICreateModelResponse_ModelMetadata::getPerformance() const {
    return m_performance;
}
void OAICreateModelResponse_ModelMetadata::setPerformance(const OAIModelMetadata_Performance &performance) {
    m_performance = performance;
    m_performance_isSet = true;
}

bool OAICreateModelResponse_ModelMetadata::is_performance_Set() const{
    return m_performance_isSet;
}

bool OAICreateModelResponse_ModelMetadata::is_performance_Valid() const{
    return m_performance_isValid;
}

bool OAICreateModelResponse_ModelMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateModelResponse_ModelMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
