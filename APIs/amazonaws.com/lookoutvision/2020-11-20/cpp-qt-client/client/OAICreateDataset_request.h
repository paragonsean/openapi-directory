/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateDataset_request.h
 *
 * 
 */

#ifndef OAICreateDataset_request_H
#define OAICreateDataset_request_H

#include <QJsonObject>

#include "OAICreateDataset_request_DatasetSource.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateDataset_request_DatasetSource;

class OAICreateDataset_request : public OAIObject {
public:
    OAICreateDataset_request();
    OAICreateDataset_request(QString json);
    ~OAICreateDataset_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDatasetType() const;
    void setDatasetType(const QString &dataset_type);
    bool is_dataset_type_Set() const;
    bool is_dataset_type_Valid() const;

    OAICreateDataset_request_DatasetSource getDatasetSource() const;
    void setDatasetSource(const OAICreateDataset_request_DatasetSource &dataset_source);
    bool is_dataset_source_Set() const;
    bool is_dataset_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dataset_type;
    bool m_dataset_type_isSet;
    bool m_dataset_type_isValid;

    OAICreateDataset_request_DatasetSource m_dataset_source;
    bool m_dataset_source_isSet;
    bool m_dataset_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateDataset_request)

#endif // OAICreateDataset_request_H
