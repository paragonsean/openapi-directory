/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDatasetResponse_DatasetDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDatasetResponse_DatasetDescription::OAIDescribeDatasetResponse_DatasetDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDatasetResponse_DatasetDescription::OAIDescribeDatasetResponse_DatasetDescription() {
    this->initializeModel();
}

OAIDescribeDatasetResponse_DatasetDescription::~OAIDescribeDatasetResponse_DatasetDescription() {}

void OAIDescribeDatasetResponse_DatasetDescription::initializeModel() {

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_dataset_type_isSet = false;
    m_dataset_type_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_image_stats_isSet = false;
    m_image_stats_isValid = false;
}

void OAIDescribeDatasetResponse_DatasetDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDatasetResponse_DatasetDescription::fromJsonObject(QJsonObject json) {

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("ProjectName")]);
    m_project_name_isSet = !json[QString("ProjectName")].isNull() && m_project_name_isValid;

    m_dataset_type_isValid = ::OpenAPI::fromJsonValue(m_dataset_type, json[QString("DatasetType")]);
    m_dataset_type_isSet = !json[QString("DatasetType")].isNull() && m_dataset_type_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("CreationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("CreationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("LastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("LastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_image_stats_isValid = ::OpenAPI::fromJsonValue(m_image_stats, json[QString("ImageStats")]);
    m_image_stats_isSet = !json[QString("ImageStats")].isNull() && m_image_stats_isValid;
}

QString OAIDescribeDatasetResponse_DatasetDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDatasetResponse_DatasetDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_project_name_isSet) {
        obj.insert(QString("ProjectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_dataset_type_isSet) {
        obj.insert(QString("DatasetType"), ::OpenAPI::toJsonValue(m_dataset_type));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("CreationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("LastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_image_stats.isSet()) {
        obj.insert(QString("ImageStats"), ::OpenAPI::toJsonValue(m_image_stats));
    }
    return obj;
}

QString OAIDescribeDatasetResponse_DatasetDescription::getProjectName() const {
    return m_project_name;
}
void OAIDescribeDatasetResponse_DatasetDescription::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QString OAIDescribeDatasetResponse_DatasetDescription::getDatasetType() const {
    return m_dataset_type;
}
void OAIDescribeDatasetResponse_DatasetDescription::setDatasetType(const QString &dataset_type) {
    m_dataset_type = dataset_type;
    m_dataset_type_isSet = true;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_dataset_type_Set() const{
    return m_dataset_type_isSet;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_dataset_type_Valid() const{
    return m_dataset_type_isValid;
}

QDateTime OAIDescribeDatasetResponse_DatasetDescription::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIDescribeDatasetResponse_DatasetDescription::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

QDateTime OAIDescribeDatasetResponse_DatasetDescription::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIDescribeDatasetResponse_DatasetDescription::setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

OAIDatasetStatus OAIDescribeDatasetResponse_DatasetDescription::getStatus() const {
    return m_status;
}
void OAIDescribeDatasetResponse_DatasetDescription::setStatus(const OAIDatasetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeDatasetResponse_DatasetDescription::getStatusMessage() const {
    return m_status_message;
}
void OAIDescribeDatasetResponse_DatasetDescription::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAIDatasetDescription_ImageStats OAIDescribeDatasetResponse_DatasetDescription::getImageStats() const {
    return m_image_stats;
}
void OAIDescribeDatasetResponse_DatasetDescription::setImageStats(const OAIDatasetDescription_ImageStats &image_stats) {
    m_image_stats = image_stats;
    m_image_stats_isSet = true;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_image_stats_Set() const{
    return m_image_stats_isSet;
}

bool OAIDescribeDatasetResponse_DatasetDescription::is_image_stats_Valid() const{
    return m_image_stats_isValid;
}

bool OAIDescribeDatasetResponse_DatasetDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDatasetResponse_DatasetDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
