/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGreengrassConfiguration_TargetPlatform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGreengrassConfiguration_TargetPlatform::OAIGreengrassConfiguration_TargetPlatform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGreengrassConfiguration_TargetPlatform::OAIGreengrassConfiguration_TargetPlatform() {
    this->initializeModel();
}

OAIGreengrassConfiguration_TargetPlatform::~OAIGreengrassConfiguration_TargetPlatform() {}

void OAIGreengrassConfiguration_TargetPlatform::initializeModel() {

    m_os_isSet = false;
    m_os_isValid = false;

    m_arch_isSet = false;
    m_arch_isValid = false;

    m_accelerator_isSet = false;
    m_accelerator_isValid = false;
}

void OAIGreengrassConfiguration_TargetPlatform::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGreengrassConfiguration_TargetPlatform::fromJsonObject(QJsonObject json) {

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("Os")]);
    m_os_isSet = !json[QString("Os")].isNull() && m_os_isValid;

    m_arch_isValid = ::OpenAPI::fromJsonValue(m_arch, json[QString("Arch")]);
    m_arch_isSet = !json[QString("Arch")].isNull() && m_arch_isValid;

    m_accelerator_isValid = ::OpenAPI::fromJsonValue(m_accelerator, json[QString("Accelerator")]);
    m_accelerator_isSet = !json[QString("Accelerator")].isNull() && m_accelerator_isValid;
}

QString OAIGreengrassConfiguration_TargetPlatform::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGreengrassConfiguration_TargetPlatform::asJsonObject() const {
    QJsonObject obj;
    if (m_os.isSet()) {
        obj.insert(QString("Os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_arch.isSet()) {
        obj.insert(QString("Arch"), ::OpenAPI::toJsonValue(m_arch));
    }
    if (m_accelerator.isSet()) {
        obj.insert(QString("Accelerator"), ::OpenAPI::toJsonValue(m_accelerator));
    }
    return obj;
}

OAITargetPlatformOs OAIGreengrassConfiguration_TargetPlatform::getOs() const {
    return m_os;
}
void OAIGreengrassConfiguration_TargetPlatform::setOs(const OAITargetPlatformOs &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIGreengrassConfiguration_TargetPlatform::is_os_Set() const{
    return m_os_isSet;
}

bool OAIGreengrassConfiguration_TargetPlatform::is_os_Valid() const{
    return m_os_isValid;
}

OAITargetPlatformArch OAIGreengrassConfiguration_TargetPlatform::getArch() const {
    return m_arch;
}
void OAIGreengrassConfiguration_TargetPlatform::setArch(const OAITargetPlatformArch &arch) {
    m_arch = arch;
    m_arch_isSet = true;
}

bool OAIGreengrassConfiguration_TargetPlatform::is_arch_Set() const{
    return m_arch_isSet;
}

bool OAIGreengrassConfiguration_TargetPlatform::is_arch_Valid() const{
    return m_arch_isValid;
}

OAITargetPlatformAccelerator OAIGreengrassConfiguration_TargetPlatform::getAccelerator() const {
    return m_accelerator;
}
void OAIGreengrassConfiguration_TargetPlatform::setAccelerator(const OAITargetPlatformAccelerator &accelerator) {
    m_accelerator = accelerator;
    m_accelerator_isSet = true;
}

bool OAIGreengrassConfiguration_TargetPlatform::is_accelerator_Set() const{
    return m_accelerator_isSet;
}

bool OAIGreengrassConfiguration_TargetPlatform::is_accelerator_Valid() const{
    return m_accelerator_isValid;
}

bool OAIGreengrassConfiguration_TargetPlatform::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGreengrassConfiguration_TargetPlatform::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_os_isValid && m_arch_isValid && true;
}

} // namespace OpenAPI
