/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelPackagingDescription_ModelPackagingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelPackagingDescription_ModelPackagingConfiguration::OAIModelPackagingDescription_ModelPackagingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelPackagingDescription_ModelPackagingConfiguration::OAIModelPackagingDescription_ModelPackagingConfiguration() {
    this->initializeModel();
}

OAIModelPackagingDescription_ModelPackagingConfiguration::~OAIModelPackagingDescription_ModelPackagingConfiguration() {}

void OAIModelPackagingDescription_ModelPackagingConfiguration::initializeModel() {

    m_greengrass_isSet = false;
    m_greengrass_isValid = false;
}

void OAIModelPackagingDescription_ModelPackagingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelPackagingDescription_ModelPackagingConfiguration::fromJsonObject(QJsonObject json) {

    m_greengrass_isValid = ::OpenAPI::fromJsonValue(m_greengrass, json[QString("Greengrass")]);
    m_greengrass_isSet = !json[QString("Greengrass")].isNull() && m_greengrass_isValid;
}

QString OAIModelPackagingDescription_ModelPackagingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelPackagingDescription_ModelPackagingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_greengrass.isSet()) {
        obj.insert(QString("Greengrass"), ::OpenAPI::toJsonValue(m_greengrass));
    }
    return obj;
}

OAIStartModelPackagingJob_request_Configuration_Greengrass OAIModelPackagingDescription_ModelPackagingConfiguration::getGreengrass() const {
    return m_greengrass;
}
void OAIModelPackagingDescription_ModelPackagingConfiguration::setGreengrass(const OAIStartModelPackagingJob_request_Configuration_Greengrass &greengrass) {
    m_greengrass = greengrass;
    m_greengrass_isSet = true;
}

bool OAIModelPackagingDescription_ModelPackagingConfiguration::is_greengrass_Set() const{
    return m_greengrass_isSet;
}

bool OAIModelPackagingDescription_ModelPackagingConfiguration::is_greengrass_Valid() const{
    return m_greengrass_isValid;
}

bool OAIModelPackagingDescription_ModelPackagingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_greengrass.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelPackagingDescription_ModelPackagingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_greengrass_isValid && true;
}

} // namespace OpenAPI
