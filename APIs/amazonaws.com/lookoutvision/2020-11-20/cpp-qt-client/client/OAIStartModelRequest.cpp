/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartModelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartModelRequest::OAIStartModelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartModelRequest::OAIStartModelRequest() {
    this->initializeModel();
}

OAIStartModelRequest::~OAIStartModelRequest() {}

void OAIStartModelRequest::initializeModel() {

    m_min_inference_units_isSet = false;
    m_min_inference_units_isValid = false;

    m_max_inference_units_isSet = false;
    m_max_inference_units_isValid = false;
}

void OAIStartModelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartModelRequest::fromJsonObject(QJsonObject json) {

    m_min_inference_units_isValid = ::OpenAPI::fromJsonValue(m_min_inference_units, json[QString("MinInferenceUnits")]);
    m_min_inference_units_isSet = !json[QString("MinInferenceUnits")].isNull() && m_min_inference_units_isValid;

    m_max_inference_units_isValid = ::OpenAPI::fromJsonValue(m_max_inference_units, json[QString("MaxInferenceUnits")]);
    m_max_inference_units_isSet = !json[QString("MaxInferenceUnits")].isNull() && m_max_inference_units_isValid;
}

QString OAIStartModelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartModelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_min_inference_units_isSet) {
        obj.insert(QString("MinInferenceUnits"), ::OpenAPI::toJsonValue(m_min_inference_units));
    }
    if (m_max_inference_units_isSet) {
        obj.insert(QString("MaxInferenceUnits"), ::OpenAPI::toJsonValue(m_max_inference_units));
    }
    return obj;
}

qint32 OAIStartModelRequest::getMinInferenceUnits() const {
    return m_min_inference_units;
}
void OAIStartModelRequest::setMinInferenceUnits(const qint32 &min_inference_units) {
    m_min_inference_units = min_inference_units;
    m_min_inference_units_isSet = true;
}

bool OAIStartModelRequest::is_min_inference_units_Set() const{
    return m_min_inference_units_isSet;
}

bool OAIStartModelRequest::is_min_inference_units_Valid() const{
    return m_min_inference_units_isValid;
}

qint32 OAIStartModelRequest::getMaxInferenceUnits() const {
    return m_max_inference_units;
}
void OAIStartModelRequest::setMaxInferenceUnits(const qint32 &max_inference_units) {
    m_max_inference_units = max_inference_units;
    m_max_inference_units_isSet = true;
}

bool OAIStartModelRequest::is_max_inference_units_Set() const{
    return m_max_inference_units_isSet;
}

bool OAIStartModelRequest::is_max_inference_units_Valid() const{
    return m_max_inference_units_isValid;
}

bool OAIStartModelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_inference_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_inference_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartModelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_min_inference_units_isValid && true;
}

} // namespace OpenAPI
