/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataset_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataset_request::OAICreateDataset_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataset_request::OAICreateDataset_request() {
    this->initializeModel();
}

OAICreateDataset_request::~OAICreateDataset_request() {}

void OAICreateDataset_request::initializeModel() {

    m_dataset_type_isSet = false;
    m_dataset_type_isValid = false;

    m_dataset_source_isSet = false;
    m_dataset_source_isValid = false;
}

void OAICreateDataset_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataset_request::fromJsonObject(QJsonObject json) {

    m_dataset_type_isValid = ::OpenAPI::fromJsonValue(m_dataset_type, json[QString("DatasetType")]);
    m_dataset_type_isSet = !json[QString("DatasetType")].isNull() && m_dataset_type_isValid;

    m_dataset_source_isValid = ::OpenAPI::fromJsonValue(m_dataset_source, json[QString("DatasetSource")]);
    m_dataset_source_isSet = !json[QString("DatasetSource")].isNull() && m_dataset_source_isValid;
}

QString OAICreateDataset_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataset_request::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_type_isSet) {
        obj.insert(QString("DatasetType"), ::OpenAPI::toJsonValue(m_dataset_type));
    }
    if (m_dataset_source.isSet()) {
        obj.insert(QString("DatasetSource"), ::OpenAPI::toJsonValue(m_dataset_source));
    }
    return obj;
}

QString OAICreateDataset_request::getDatasetType() const {
    return m_dataset_type;
}
void OAICreateDataset_request::setDatasetType(const QString &dataset_type) {
    m_dataset_type = dataset_type;
    m_dataset_type_isSet = true;
}

bool OAICreateDataset_request::is_dataset_type_Set() const{
    return m_dataset_type_isSet;
}

bool OAICreateDataset_request::is_dataset_type_Valid() const{
    return m_dataset_type_isValid;
}

OAICreateDataset_request_DatasetSource OAICreateDataset_request::getDatasetSource() const {
    return m_dataset_source;
}
void OAICreateDataset_request::setDatasetSource(const OAICreateDataset_request_DatasetSource &dataset_source) {
    m_dataset_source = dataset_source;
    m_dataset_source_isSet = true;
}

bool OAICreateDataset_request::is_dataset_source_Set() const{
    return m_dataset_source_isSet;
}

bool OAICreateDataset_request::is_dataset_source_Valid() const{
    return m_dataset_source_isValid;
}

bool OAICreateDataset_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataset_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_type_isValid && true;
}

} // namespace OpenAPI
