/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDatasetEntriesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDatasetEntriesResponse::OAIListDatasetEntriesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDatasetEntriesResponse::OAIListDatasetEntriesResponse() {
    this->initializeModel();
}

OAIListDatasetEntriesResponse::~OAIListDatasetEntriesResponse() {}

void OAIListDatasetEntriesResponse::initializeModel() {

    m_dataset_entries_isSet = false;
    m_dataset_entries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListDatasetEntriesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDatasetEntriesResponse::fromJsonObject(QJsonObject json) {

    m_dataset_entries_isValid = ::OpenAPI::fromJsonValue(m_dataset_entries, json[QString("DatasetEntries")]);
    m_dataset_entries_isSet = !json[QString("DatasetEntries")].isNull() && m_dataset_entries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListDatasetEntriesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDatasetEntriesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_entries.isSet()) {
        obj.insert(QString("DatasetEntries"), ::OpenAPI::toJsonValue(m_dataset_entries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListDatasetEntriesResponse::getDatasetEntries() const {
    return m_dataset_entries;
}
void OAIListDatasetEntriesResponse::setDatasetEntries(const QList &dataset_entries) {
    m_dataset_entries = dataset_entries;
    m_dataset_entries_isSet = true;
}

bool OAIListDatasetEntriesResponse::is_dataset_entries_Set() const{
    return m_dataset_entries_isSet;
}

bool OAIListDatasetEntriesResponse::is_dataset_entries_Valid() const{
    return m_dataset_entries_isValid;
}

QString OAIListDatasetEntriesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListDatasetEntriesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDatasetEntriesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDatasetEntriesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListDatasetEntriesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_entries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDatasetEntriesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
