/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDatasetEntries_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDatasetEntries_request::OAIUpdateDatasetEntries_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDatasetEntries_request::OAIUpdateDatasetEntries_request() {
    this->initializeModel();
}

OAIUpdateDatasetEntries_request::~OAIUpdateDatasetEntries_request() {}

void OAIUpdateDatasetEntries_request::initializeModel() {

    m_changes_isSet = false;
    m_changes_isValid = false;
}

void OAIUpdateDatasetEntries_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDatasetEntries_request::fromJsonObject(QJsonObject json) {

    m_changes_isValid = ::OpenAPI::fromJsonValue(m_changes, json[QString("Changes")]);
    m_changes_isSet = !json[QString("Changes")].isNull() && m_changes_isValid;
}

QString OAIUpdateDatasetEntries_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDatasetEntries_request::asJsonObject() const {
    QJsonObject obj;
    if (m_changes_isSet) {
        obj.insert(QString("Changes"), ::OpenAPI::toJsonValue(m_changes));
    }
    return obj;
}

QString OAIUpdateDatasetEntries_request::getChanges() const {
    return m_changes;
}
void OAIUpdateDatasetEntries_request::setChanges(const QString &changes) {
    m_changes = changes;
    m_changes_isSet = true;
}

bool OAIUpdateDatasetEntries_request::is_changes_Set() const{
    return m_changes_isSet;
}

bool OAIUpdateDatasetEntries_request::is_changes_Valid() const{
    return m_changes_isValid;
}

bool OAIUpdateDatasetEntries_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDatasetEntries_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_changes_isValid && true;
}

} // namespace OpenAPI
