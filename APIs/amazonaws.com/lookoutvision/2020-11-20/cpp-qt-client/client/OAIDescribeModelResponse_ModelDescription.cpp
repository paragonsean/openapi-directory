/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeModelResponse_ModelDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeModelResponse_ModelDescription::OAIDescribeModelResponse_ModelDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeModelResponse_ModelDescription::OAIDescribeModelResponse_ModelDescription() {
    this->initializeModel();
}

OAIDescribeModelResponse_ModelDescription::~OAIDescribeModelResponse_ModelDescription() {}

void OAIDescribeModelResponse_ModelDescription::initializeModel() {

    m_model_version_isSet = false;
    m_model_version_isValid = false;

    m_model_arn_isSet = false;
    m_model_arn_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_performance_isSet = false;
    m_performance_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_evaluation_manifest_isSet = false;
    m_evaluation_manifest_isValid = false;

    m_evaluation_result_isSet = false;
    m_evaluation_result_isValid = false;

    m_evaluation_end_timestamp_isSet = false;
    m_evaluation_end_timestamp_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_min_inference_units_isSet = false;
    m_min_inference_units_isValid = false;

    m_max_inference_units_isSet = false;
    m_max_inference_units_isValid = false;
}

void OAIDescribeModelResponse_ModelDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeModelResponse_ModelDescription::fromJsonObject(QJsonObject json) {

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("ModelVersion")]);
    m_model_version_isSet = !json[QString("ModelVersion")].isNull() && m_model_version_isValid;

    m_model_arn_isValid = ::OpenAPI::fromJsonValue(m_model_arn, json[QString("ModelArn")]);
    m_model_arn_isSet = !json[QString("ModelArn")].isNull() && m_model_arn_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("CreationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("CreationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_performance_isValid = ::OpenAPI::fromJsonValue(m_performance, json[QString("Performance")]);
    m_performance_isSet = !json[QString("Performance")].isNull() && m_performance_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("OutputConfig")]);
    m_output_config_isSet = !json[QString("OutputConfig")].isNull() && m_output_config_isValid;

    m_evaluation_manifest_isValid = ::OpenAPI::fromJsonValue(m_evaluation_manifest, json[QString("EvaluationManifest")]);
    m_evaluation_manifest_isSet = !json[QString("EvaluationManifest")].isNull() && m_evaluation_manifest_isValid;

    m_evaluation_result_isValid = ::OpenAPI::fromJsonValue(m_evaluation_result, json[QString("EvaluationResult")]);
    m_evaluation_result_isSet = !json[QString("EvaluationResult")].isNull() && m_evaluation_result_isValid;

    m_evaluation_end_timestamp_isValid = ::OpenAPI::fromJsonValue(m_evaluation_end_timestamp, json[QString("EvaluationEndTimestamp")]);
    m_evaluation_end_timestamp_isSet = !json[QString("EvaluationEndTimestamp")].isNull() && m_evaluation_end_timestamp_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_min_inference_units_isValid = ::OpenAPI::fromJsonValue(m_min_inference_units, json[QString("MinInferenceUnits")]);
    m_min_inference_units_isSet = !json[QString("MinInferenceUnits")].isNull() && m_min_inference_units_isValid;

    m_max_inference_units_isValid = ::OpenAPI::fromJsonValue(m_max_inference_units, json[QString("MaxInferenceUnits")]);
    m_max_inference_units_isSet = !json[QString("MaxInferenceUnits")].isNull() && m_max_inference_units_isValid;
}

QString OAIDescribeModelResponse_ModelDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeModelResponse_ModelDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_model_version_isSet) {
        obj.insert(QString("ModelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    if (m_model_arn_isSet) {
        obj.insert(QString("ModelArn"), ::OpenAPI::toJsonValue(m_model_arn));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("CreationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_performance.isSet()) {
        obj.insert(QString("Performance"), ::OpenAPI::toJsonValue(m_performance));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("OutputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_evaluation_manifest.isSet()) {
        obj.insert(QString("EvaluationManifest"), ::OpenAPI::toJsonValue(m_evaluation_manifest));
    }
    if (m_evaluation_result.isSet()) {
        obj.insert(QString("EvaluationResult"), ::OpenAPI::toJsonValue(m_evaluation_result));
    }
    if (m_evaluation_end_timestamp_isSet) {
        obj.insert(QString("EvaluationEndTimestamp"), ::OpenAPI::toJsonValue(m_evaluation_end_timestamp));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_min_inference_units_isSet) {
        obj.insert(QString("MinInferenceUnits"), ::OpenAPI::toJsonValue(m_min_inference_units));
    }
    if (m_max_inference_units_isSet) {
        obj.insert(QString("MaxInferenceUnits"), ::OpenAPI::toJsonValue(m_max_inference_units));
    }
    return obj;
}

QString OAIDescribeModelResponse_ModelDescription::getModelVersion() const {
    return m_model_version;
}
void OAIDescribeModelResponse_ModelDescription::setModelVersion(const QString &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_model_version_Valid() const{
    return m_model_version_isValid;
}

QString OAIDescribeModelResponse_ModelDescription::getModelArn() const {
    return m_model_arn;
}
void OAIDescribeModelResponse_ModelDescription::setModelArn(const QString &model_arn) {
    m_model_arn = model_arn;
    m_model_arn_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_model_arn_Set() const{
    return m_model_arn_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_model_arn_Valid() const{
    return m_model_arn_isValid;
}

QDateTime OAIDescribeModelResponse_ModelDescription::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIDescribeModelResponse_ModelDescription::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

QString OAIDescribeModelResponse_ModelDescription::getDescription() const {
    return m_description;
}
void OAIDescribeModelResponse_ModelDescription::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_description_Valid() const{
    return m_description_isValid;
}

OAIModelStatus OAIDescribeModelResponse_ModelDescription::getStatus() const {
    return m_status;
}
void OAIDescribeModelResponse_ModelDescription::setStatus(const OAIModelStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeModelResponse_ModelDescription::getStatusMessage() const {
    return m_status_message;
}
void OAIDescribeModelResponse_ModelDescription::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAIModelDescription_Performance OAIDescribeModelResponse_ModelDescription::getPerformance() const {
    return m_performance;
}
void OAIDescribeModelResponse_ModelDescription::setPerformance(const OAIModelDescription_Performance &performance) {
    m_performance = performance;
    m_performance_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_performance_Set() const{
    return m_performance_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_performance_Valid() const{
    return m_performance_isValid;
}

OAIModelDescription_OutputConfig OAIDescribeModelResponse_ModelDescription::getOutputConfig() const {
    return m_output_config;
}
void OAIDescribeModelResponse_ModelDescription::setOutputConfig(const OAIModelDescription_OutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_output_config_Valid() const{
    return m_output_config_isValid;
}

OAIModelDescription_EvaluationManifest OAIDescribeModelResponse_ModelDescription::getEvaluationManifest() const {
    return m_evaluation_manifest;
}
void OAIDescribeModelResponse_ModelDescription::setEvaluationManifest(const OAIModelDescription_EvaluationManifest &evaluation_manifest) {
    m_evaluation_manifest = evaluation_manifest;
    m_evaluation_manifest_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_evaluation_manifest_Set() const{
    return m_evaluation_manifest_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_evaluation_manifest_Valid() const{
    return m_evaluation_manifest_isValid;
}

OAIModelDescription_EvaluationResult OAIDescribeModelResponse_ModelDescription::getEvaluationResult() const {
    return m_evaluation_result;
}
void OAIDescribeModelResponse_ModelDescription::setEvaluationResult(const OAIModelDescription_EvaluationResult &evaluation_result) {
    m_evaluation_result = evaluation_result;
    m_evaluation_result_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_evaluation_result_Set() const{
    return m_evaluation_result_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_evaluation_result_Valid() const{
    return m_evaluation_result_isValid;
}

QDateTime OAIDescribeModelResponse_ModelDescription::getEvaluationEndTimestamp() const {
    return m_evaluation_end_timestamp;
}
void OAIDescribeModelResponse_ModelDescription::setEvaluationEndTimestamp(const QDateTime &evaluation_end_timestamp) {
    m_evaluation_end_timestamp = evaluation_end_timestamp;
    m_evaluation_end_timestamp_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_evaluation_end_timestamp_Set() const{
    return m_evaluation_end_timestamp_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_evaluation_end_timestamp_Valid() const{
    return m_evaluation_end_timestamp_isValid;
}

QString OAIDescribeModelResponse_ModelDescription::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIDescribeModelResponse_ModelDescription::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

qint32 OAIDescribeModelResponse_ModelDescription::getMinInferenceUnits() const {
    return m_min_inference_units;
}
void OAIDescribeModelResponse_ModelDescription::setMinInferenceUnits(const qint32 &min_inference_units) {
    m_min_inference_units = min_inference_units;
    m_min_inference_units_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_min_inference_units_Set() const{
    return m_min_inference_units_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_min_inference_units_Valid() const{
    return m_min_inference_units_isValid;
}

qint32 OAIDescribeModelResponse_ModelDescription::getMaxInferenceUnits() const {
    return m_max_inference_units;
}
void OAIDescribeModelResponse_ModelDescription::setMaxInferenceUnits(const qint32 &max_inference_units) {
    m_max_inference_units = max_inference_units;
    m_max_inference_units_isSet = true;
}

bool OAIDescribeModelResponse_ModelDescription::is_max_inference_units_Set() const{
    return m_max_inference_units_isSet;
}

bool OAIDescribeModelResponse_ModelDescription::is_max_inference_units_Valid() const{
    return m_max_inference_units_isValid;
}

bool OAIDescribeModelResponse_ModelDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_end_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_inference_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_inference_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeModelResponse_ModelDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
