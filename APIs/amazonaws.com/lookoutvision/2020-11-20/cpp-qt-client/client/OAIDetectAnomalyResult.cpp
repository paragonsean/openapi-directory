/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectAnomalyResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectAnomalyResult::OAIDetectAnomalyResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectAnomalyResult::OAIDetectAnomalyResult() {
    this->initializeModel();
}

OAIDetectAnomalyResult::~OAIDetectAnomalyResult() {}

void OAIDetectAnomalyResult::initializeModel() {

    m_source_isSet = false;
    m_source_isValid = false;

    m_is_anomalous_isSet = false;
    m_is_anomalous_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_anomalies_isSet = false;
    m_anomalies_isValid = false;

    m_anomaly_mask_isSet = false;
    m_anomaly_mask_isValid = false;
}

void OAIDetectAnomalyResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectAnomalyResult::fromJsonObject(QJsonObject json) {

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_is_anomalous_isValid = ::OpenAPI::fromJsonValue(m_is_anomalous, json[QString("IsAnomalous")]);
    m_is_anomalous_isSet = !json[QString("IsAnomalous")].isNull() && m_is_anomalous_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("Confidence")]);
    m_confidence_isSet = !json[QString("Confidence")].isNull() && m_confidence_isValid;

    m_anomalies_isValid = ::OpenAPI::fromJsonValue(m_anomalies, json[QString("Anomalies")]);
    m_anomalies_isSet = !json[QString("Anomalies")].isNull() && m_anomalies_isValid;

    m_anomaly_mask_isValid = ::OpenAPI::fromJsonValue(m_anomaly_mask, json[QString("AnomalyMask")]);
    m_anomaly_mask_isSet = !json[QString("AnomalyMask")].isNull() && m_anomaly_mask_isValid;
}

QString OAIDetectAnomalyResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectAnomalyResult::asJsonObject() const {
    QJsonObject obj;
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_is_anomalous_isSet) {
        obj.insert(QString("IsAnomalous"), ::OpenAPI::toJsonValue(m_is_anomalous));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("Confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_anomalies.isSet()) {
        obj.insert(QString("Anomalies"), ::OpenAPI::toJsonValue(m_anomalies));
    }
    if (m_anomaly_mask_isSet) {
        obj.insert(QString("AnomalyMask"), ::OpenAPI::toJsonValue(m_anomaly_mask));
    }
    return obj;
}

OAIDetectAnomalyResult_Source OAIDetectAnomalyResult::getSource() const {
    return m_source;
}
void OAIDetectAnomalyResult::setSource(const OAIDetectAnomalyResult_Source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDetectAnomalyResult::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDetectAnomalyResult::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIDetectAnomalyResult::getIsAnomalous() const {
    return m_is_anomalous;
}
void OAIDetectAnomalyResult::setIsAnomalous(const bool &is_anomalous) {
    m_is_anomalous = is_anomalous;
    m_is_anomalous_isSet = true;
}

bool OAIDetectAnomalyResult::is_is_anomalous_Set() const{
    return m_is_anomalous_isSet;
}

bool OAIDetectAnomalyResult::is_is_anomalous_Valid() const{
    return m_is_anomalous_isValid;
}

float OAIDetectAnomalyResult::getConfidence() const {
    return m_confidence;
}
void OAIDetectAnomalyResult::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIDetectAnomalyResult::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIDetectAnomalyResult::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QList OAIDetectAnomalyResult::getAnomalies() const {
    return m_anomalies;
}
void OAIDetectAnomalyResult::setAnomalies(const QList &anomalies) {
    m_anomalies = anomalies;
    m_anomalies_isSet = true;
}

bool OAIDetectAnomalyResult::is_anomalies_Set() const{
    return m_anomalies_isSet;
}

bool OAIDetectAnomalyResult::is_anomalies_Valid() const{
    return m_anomalies_isValid;
}

QString OAIDetectAnomalyResult::getAnomalyMask() const {
    return m_anomaly_mask;
}
void OAIDetectAnomalyResult::setAnomalyMask(const QString &anomaly_mask) {
    m_anomaly_mask = anomaly_mask;
    m_anomaly_mask_isSet = true;
}

bool OAIDetectAnomalyResult::is_anomaly_mask_Set() const{
    return m_anomaly_mask_isSet;
}

bool OAIDetectAnomalyResult::is_anomaly_mask_Valid() const{
    return m_anomaly_mask_isValid;
}

bool OAIDetectAnomalyResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_anomalous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomalies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_anomaly_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectAnomalyResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
