/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetGroundTruthManifest_S3Object.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetGroundTruthManifest_S3Object::OAIDatasetGroundTruthManifest_S3Object(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetGroundTruthManifest_S3Object::OAIDatasetGroundTruthManifest_S3Object() {
    this->initializeModel();
}

OAIDatasetGroundTruthManifest_S3Object::~OAIDatasetGroundTruthManifest_S3Object() {}

void OAIDatasetGroundTruthManifest_S3Object::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIDatasetGroundTruthManifest_S3Object::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetGroundTruthManifest_S3Object::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("VersionId")]);
    m_version_id_isSet = !json[QString("VersionId")].isNull() && m_version_id_isValid;
}

QString OAIDatasetGroundTruthManifest_S3Object::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetGroundTruthManifest_S3Object::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_key_isSet) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("VersionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QString OAIDatasetGroundTruthManifest_S3Object::getBucket() const {
    return m_bucket;
}
void OAIDatasetGroundTruthManifest_S3Object::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIDatasetGroundTruthManifest_S3Object::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIDatasetGroundTruthManifest_S3Object::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIDatasetGroundTruthManifest_S3Object::getKey() const {
    return m_key;
}
void OAIDatasetGroundTruthManifest_S3Object::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIDatasetGroundTruthManifest_S3Object::is_key_Set() const{
    return m_key_isSet;
}

bool OAIDatasetGroundTruthManifest_S3Object::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIDatasetGroundTruthManifest_S3Object::getVersionId() const {
    return m_version_id;
}
void OAIDatasetGroundTruthManifest_S3Object::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIDatasetGroundTruthManifest_S3Object::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIDatasetGroundTruthManifest_S3Object::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIDatasetGroundTruthManifest_S3Object::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetGroundTruthManifest_S3Object::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_isValid && m_key_isValid && true;
}

} // namespace OpenAPI
