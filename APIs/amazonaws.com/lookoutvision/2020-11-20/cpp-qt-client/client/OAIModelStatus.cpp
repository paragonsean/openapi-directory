/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelStatus::OAIModelStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelStatus::OAIModelStatus() {
    this->initializeModel();
}

OAIModelStatus::~OAIModelStatus() {}

void OAIModelStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIModelStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIModelStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TRAINING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIModelStatus::TRAINING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRAINED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIModelStatus::TRAINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRAINING_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIModelStatus::TRAINING_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STARTING_HOSTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIModelStatus::STARTING_HOSTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HOSTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIModelStatus::HOSTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HOSTING_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIModelStatus::HOSTING_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPING_HOSTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIModelStatus::STOPPING_HOSTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SYSTEM_UPDATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIModelStatus::SYSTEM_UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIModelStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIModelStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIModelStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIModelStatus::TRAINING:
            val = "TRAINING";
            break;
        case eOAIModelStatus::TRAINED:
            val = "TRAINED";
            break;
        case eOAIModelStatus::TRAINING_FAILED:
            val = "TRAINING_FAILED";
            break;
        case eOAIModelStatus::STARTING_HOSTING:
            val = "STARTING_HOSTING";
            break;
        case eOAIModelStatus::HOSTED:
            val = "HOSTED";
            break;
        case eOAIModelStatus::HOSTING_FAILED:
            val = "HOSTING_FAILED";
            break;
        case eOAIModelStatus::STOPPING_HOSTING:
            val = "STOPPING_HOSTING";
            break;
        case eOAIModelStatus::SYSTEM_UPDATING:
            val = "SYSTEM_UPDATING";
            break;
        case eOAIModelStatus::DELETING:
            val = "DELETING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIModelStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIModelStatus::eOAIModelStatus OAIModelStatus::getValue() const {
    return m_value;
}

void OAIModelStatus::setValue(const OAIModelStatus::eOAIModelStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIModelStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIModelStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
