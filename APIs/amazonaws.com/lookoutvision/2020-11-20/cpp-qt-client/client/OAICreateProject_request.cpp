/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProject_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProject_request::OAICreateProject_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProject_request::OAICreateProject_request() {
    this->initializeModel();
}

OAICreateProject_request::~OAICreateProject_request() {}

void OAICreateProject_request::initializeModel() {

    m_project_name_isSet = false;
    m_project_name_isValid = false;
}

void OAICreateProject_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProject_request::fromJsonObject(QJsonObject json) {

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("ProjectName")]);
    m_project_name_isSet = !json[QString("ProjectName")].isNull() && m_project_name_isValid;
}

QString OAICreateProject_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProject_request::asJsonObject() const {
    QJsonObject obj;
    if (m_project_name_isSet) {
        obj.insert(QString("ProjectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    return obj;
}

QString OAICreateProject_request::getProjectName() const {
    return m_project_name;
}
void OAICreateProject_request::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAICreateProject_request::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAICreateProject_request::is_project_name_Valid() const{
    return m_project_name_isValid;
}

bool OAICreateProject_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProject_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_name_isValid && true;
}

} // namespace OpenAPI
