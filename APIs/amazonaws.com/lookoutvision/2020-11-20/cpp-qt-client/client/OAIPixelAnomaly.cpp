/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPixelAnomaly.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPixelAnomaly::OAIPixelAnomaly(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPixelAnomaly::OAIPixelAnomaly() {
    this->initializeModel();
}

OAIPixelAnomaly::~OAIPixelAnomaly() {}

void OAIPixelAnomaly::initializeModel() {

    m_total_percentage_area_isSet = false;
    m_total_percentage_area_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;
}

void OAIPixelAnomaly::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPixelAnomaly::fromJsonObject(QJsonObject json) {

    m_total_percentage_area_isValid = ::OpenAPI::fromJsonValue(m_total_percentage_area, json[QString("TotalPercentageArea")]);
    m_total_percentage_area_isSet = !json[QString("TotalPercentageArea")].isNull() && m_total_percentage_area_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;
}

QString OAIPixelAnomaly::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPixelAnomaly::asJsonObject() const {
    QJsonObject obj;
    if (m_total_percentage_area_isSet) {
        obj.insert(QString("TotalPercentageArea"), ::OpenAPI::toJsonValue(m_total_percentage_area));
    }
    if (m_color_isSet) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    return obj;
}

float OAIPixelAnomaly::getTotalPercentageArea() const {
    return m_total_percentage_area;
}
void OAIPixelAnomaly::setTotalPercentageArea(const float &total_percentage_area) {
    m_total_percentage_area = total_percentage_area;
    m_total_percentage_area_isSet = true;
}

bool OAIPixelAnomaly::is_total_percentage_area_Set() const{
    return m_total_percentage_area_isSet;
}

bool OAIPixelAnomaly::is_total_percentage_area_Valid() const{
    return m_total_percentage_area_isValid;
}

QString OAIPixelAnomaly::getColor() const {
    return m_color;
}
void OAIPixelAnomaly::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIPixelAnomaly::is_color_Set() const{
    return m_color_isSet;
}

bool OAIPixelAnomaly::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIPixelAnomaly::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_percentage_area_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPixelAnomaly::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
