/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelDescription_OutputConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelDescription_OutputConfig::OAIModelDescription_OutputConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelDescription_OutputConfig::OAIModelDescription_OutputConfig() {
    this->initializeModel();
}

OAIModelDescription_OutputConfig::~OAIModelDescription_OutputConfig() {}

void OAIModelDescription_OutputConfig::initializeModel() {

    m_s3_location_isSet = false;
    m_s3_location_isValid = false;
}

void OAIModelDescription_OutputConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelDescription_OutputConfig::fromJsonObject(QJsonObject json) {

    m_s3_location_isValid = ::OpenAPI::fromJsonValue(m_s3_location, json[QString("S3Location")]);
    m_s3_location_isSet = !json[QString("S3Location")].isNull() && m_s3_location_isValid;
}

QString OAIModelDescription_OutputConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelDescription_OutputConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_location.isSet()) {
        obj.insert(QString("S3Location"), ::OpenAPI::toJsonValue(m_s3_location));
    }
    return obj;
}

OAICreateModel_request_OutputConfig_S3Location OAIModelDescription_OutputConfig::getS3Location() const {
    return m_s3_location;
}
void OAIModelDescription_OutputConfig::setS3Location(const OAICreateModel_request_OutputConfig_S3Location &s3_location) {
    m_s3_location = s3_location;
    m_s3_location_isSet = true;
}

bool OAIModelDescription_OutputConfig::is_s3_location_Set() const{
    return m_s3_location_isSet;
}

bool OAIModelDescription_OutputConfig::is_s3_location_Valid() const{
    return m_s3_location_isValid;
}

bool OAIModelDescription_OutputConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelDescription_OutputConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_location_isValid && true;
}

} // namespace OpenAPI
