/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeModelResponse_ModelDescription.h
 *
 * 
 */

#ifndef OAIDescribeModelResponse_ModelDescription_H
#define OAIDescribeModelResponse_ModelDescription_H

#include <QJsonObject>

#include "OAIModelDescription_EvaluationManifest.h"
#include "OAIModelDescription_EvaluationResult.h"
#include "OAIModelDescription_OutputConfig.h"
#include "OAIModelDescription_Performance.h"
#include "OAIModelStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIModelDescription_Performance;
class OAIModelDescription_OutputConfig;
class OAIModelDescription_EvaluationManifest;
class OAIModelDescription_EvaluationResult;

class OAIDescribeModelResponse_ModelDescription : public OAIObject {
public:
    OAIDescribeModelResponse_ModelDescription();
    OAIDescribeModelResponse_ModelDescription(QString json);
    ~OAIDescribeModelResponse_ModelDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getModelVersion() const;
    void setModelVersion(const QString &model_version);
    bool is_model_version_Set() const;
    bool is_model_version_Valid() const;

    QString getModelArn() const;
    void setModelArn(const QString &model_arn);
    bool is_model_arn_Set() const;
    bool is_model_arn_Valid() const;

    QDateTime getCreationTimestamp() const;
    void setCreationTimestamp(const QDateTime &creation_timestamp);
    bool is_creation_timestamp_Set() const;
    bool is_creation_timestamp_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIModelStatus getStatus() const;
    void setStatus(const OAIModelStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    OAIModelDescription_Performance getPerformance() const;
    void setPerformance(const OAIModelDescription_Performance &performance);
    bool is_performance_Set() const;
    bool is_performance_Valid() const;

    OAIModelDescription_OutputConfig getOutputConfig() const;
    void setOutputConfig(const OAIModelDescription_OutputConfig &output_config);
    bool is_output_config_Set() const;
    bool is_output_config_Valid() const;

    OAIModelDescription_EvaluationManifest getEvaluationManifest() const;
    void setEvaluationManifest(const OAIModelDescription_EvaluationManifest &evaluation_manifest);
    bool is_evaluation_manifest_Set() const;
    bool is_evaluation_manifest_Valid() const;

    OAIModelDescription_EvaluationResult getEvaluationResult() const;
    void setEvaluationResult(const OAIModelDescription_EvaluationResult &evaluation_result);
    bool is_evaluation_result_Set() const;
    bool is_evaluation_result_Valid() const;

    QDateTime getEvaluationEndTimestamp() const;
    void setEvaluationEndTimestamp(const QDateTime &evaluation_end_timestamp);
    bool is_evaluation_end_timestamp_Set() const;
    bool is_evaluation_end_timestamp_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    qint32 getMinInferenceUnits() const;
    void setMinInferenceUnits(const qint32 &min_inference_units);
    bool is_min_inference_units_Set() const;
    bool is_min_inference_units_Valid() const;

    qint32 getMaxInferenceUnits() const;
    void setMaxInferenceUnits(const qint32 &max_inference_units);
    bool is_max_inference_units_Set() const;
    bool is_max_inference_units_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_model_version;
    bool m_model_version_isSet;
    bool m_model_version_isValid;

    QString m_model_arn;
    bool m_model_arn_isSet;
    bool m_model_arn_isValid;

    QDateTime m_creation_timestamp;
    bool m_creation_timestamp_isSet;
    bool m_creation_timestamp_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIModelStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    OAIModelDescription_Performance m_performance;
    bool m_performance_isSet;
    bool m_performance_isValid;

    OAIModelDescription_OutputConfig m_output_config;
    bool m_output_config_isSet;
    bool m_output_config_isValid;

    OAIModelDescription_EvaluationManifest m_evaluation_manifest;
    bool m_evaluation_manifest_isSet;
    bool m_evaluation_manifest_isValid;

    OAIModelDescription_EvaluationResult m_evaluation_result;
    bool m_evaluation_result_isSet;
    bool m_evaluation_result_isValid;

    QDateTime m_evaluation_end_timestamp;
    bool m_evaluation_end_timestamp_isSet;
    bool m_evaluation_end_timestamp_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    qint32 m_min_inference_units;
    bool m_min_inference_units_isSet;
    bool m_min_inference_units_isValid;

    qint32 m_max_inference_units;
    bool m_max_inference_units_isSet;
    bool m_max_inference_units_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeModelResponse_ModelDescription)

#endif // OAIDescribeModelResponse_ModelDescription_H
