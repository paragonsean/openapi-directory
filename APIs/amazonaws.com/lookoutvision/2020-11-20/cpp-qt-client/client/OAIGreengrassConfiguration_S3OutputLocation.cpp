/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGreengrassConfiguration_S3OutputLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGreengrassConfiguration_S3OutputLocation::OAIGreengrassConfiguration_S3OutputLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGreengrassConfiguration_S3OutputLocation::OAIGreengrassConfiguration_S3OutputLocation() {
    this->initializeModel();
}

OAIGreengrassConfiguration_S3OutputLocation::~OAIGreengrassConfiguration_S3OutputLocation() {}

void OAIGreengrassConfiguration_S3OutputLocation::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAIGreengrassConfiguration_S3OutputLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGreengrassConfiguration_S3OutputLocation::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("Bucket")]);
    m_bucket_isSet = !json[QString("Bucket")].isNull() && m_bucket_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;
}

QString OAIGreengrassConfiguration_S3OutputLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGreengrassConfiguration_S3OutputLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("Bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

QString OAIGreengrassConfiguration_S3OutputLocation::getBucket() const {
    return m_bucket;
}
void OAIGreengrassConfiguration_S3OutputLocation::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIGreengrassConfiguration_S3OutputLocation::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIGreengrassConfiguration_S3OutputLocation::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIGreengrassConfiguration_S3OutputLocation::getPrefix() const {
    return m_prefix;
}
void OAIGreengrassConfiguration_S3OutputLocation::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIGreengrassConfiguration_S3OutputLocation::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIGreengrassConfiguration_S3OutputLocation::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIGreengrassConfiguration_S3OutputLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGreengrassConfiguration_S3OutputLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_isValid && true;
}

} // namespace OpenAPI
