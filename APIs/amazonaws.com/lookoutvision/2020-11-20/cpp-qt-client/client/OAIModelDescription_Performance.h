/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIModelDescription_Performance.h
 *
 * 
 */

#ifndef OAIModelDescription_Performance_H
#define OAIModelDescription_Performance_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIModelDescription_Performance : public OAIObject {
public:
    OAIModelDescription_Performance();
    OAIModelDescription_Performance(QString json);
    ~OAIModelDescription_Performance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getF1Score() const;
    void setF1Score(const float &f1_score);
    bool is_f1_score_Set() const;
    bool is_f1_score_Valid() const;

    float getRecall() const;
    void setRecall(const float &recall);
    bool is_recall_Set() const;
    bool is_recall_Valid() const;

    float getPrecision() const;
    void setPrecision(const float &precision);
    bool is_precision_Set() const;
    bool is_precision_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_f1_score;
    bool m_f1_score_isSet;
    bool m_f1_score_isValid;

    float m_recall;
    bool m_recall_isSet;
    bool m_recall_isValid;

    float m_precision;
    bool m_precision_isSet;
    bool m_precision_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIModelDescription_Performance)

#endif // OAIModelDescription_Performance_H
