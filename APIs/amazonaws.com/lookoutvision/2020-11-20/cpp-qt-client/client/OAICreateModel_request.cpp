/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateModel_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateModel_request::OAICreateModel_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateModel_request::OAICreateModel_request() {
    this->initializeModel();
}

OAICreateModel_request::~OAICreateModel_request() {}

void OAICreateModel_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateModel_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateModel_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("OutputConfig")]);
    m_output_config_isSet = !json[QString("OutputConfig")].isNull() && m_output_config_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("KmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("KmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateModel_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateModel_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("OutputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("KmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateModel_request::getDescription() const {
    return m_description;
}
void OAICreateModel_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateModel_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateModel_request::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateModel_request_OutputConfig OAICreateModel_request::getOutputConfig() const {
    return m_output_config;
}
void OAICreateModel_request::setOutputConfig(const OAICreateModel_request_OutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAICreateModel_request::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAICreateModel_request::is_output_config_Valid() const{
    return m_output_config_isValid;
}

QString OAICreateModel_request::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateModel_request::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateModel_request::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateModel_request::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QList<OAITag> OAICreateModel_request::getTags() const {
    return m_tags;
}
void OAICreateModel_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateModel_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateModel_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateModel_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateModel_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_output_config_isValid && true;
}

} // namespace OpenAPI
