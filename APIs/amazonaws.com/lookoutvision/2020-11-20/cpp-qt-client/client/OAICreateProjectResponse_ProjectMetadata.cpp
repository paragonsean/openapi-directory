/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProjectResponse_ProjectMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProjectResponse_ProjectMetadata::OAICreateProjectResponse_ProjectMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProjectResponse_ProjectMetadata::OAICreateProjectResponse_ProjectMetadata() {
    this->initializeModel();
}

OAICreateProjectResponse_ProjectMetadata::~OAICreateProjectResponse_ProjectMetadata() {}

void OAICreateProjectResponse_ProjectMetadata::initializeModel() {

    m_project_arn_isSet = false;
    m_project_arn_isValid = false;

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;
}

void OAICreateProjectResponse_ProjectMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProjectResponse_ProjectMetadata::fromJsonObject(QJsonObject json) {

    m_project_arn_isValid = ::OpenAPI::fromJsonValue(m_project_arn, json[QString("ProjectArn")]);
    m_project_arn_isSet = !json[QString("ProjectArn")].isNull() && m_project_arn_isValid;

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("ProjectName")]);
    m_project_name_isSet = !json[QString("ProjectName")].isNull() && m_project_name_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("CreationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("CreationTimestamp")].isNull() && m_creation_timestamp_isValid;
}

QString OAICreateProjectResponse_ProjectMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProjectResponse_ProjectMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_project_arn_isSet) {
        obj.insert(QString("ProjectArn"), ::OpenAPI::toJsonValue(m_project_arn));
    }
    if (m_project_name_isSet) {
        obj.insert(QString("ProjectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("CreationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    return obj;
}

QString OAICreateProjectResponse_ProjectMetadata::getProjectArn() const {
    return m_project_arn;
}
void OAICreateProjectResponse_ProjectMetadata::setProjectArn(const QString &project_arn) {
    m_project_arn = project_arn;
    m_project_arn_isSet = true;
}

bool OAICreateProjectResponse_ProjectMetadata::is_project_arn_Set() const{
    return m_project_arn_isSet;
}

bool OAICreateProjectResponse_ProjectMetadata::is_project_arn_Valid() const{
    return m_project_arn_isValid;
}

QString OAICreateProjectResponse_ProjectMetadata::getProjectName() const {
    return m_project_name;
}
void OAICreateProjectResponse_ProjectMetadata::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAICreateProjectResponse_ProjectMetadata::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAICreateProjectResponse_ProjectMetadata::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QDateTime OAICreateProjectResponse_ProjectMetadata::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAICreateProjectResponse_ProjectMetadata::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAICreateProjectResponse_ProjectMetadata::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAICreateProjectResponse_ProjectMetadata::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

bool OAICreateProjectResponse_ProjectMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProjectResponse_ProjectMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
