/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelPackagingOutputDetails_Greengrass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelPackagingOutputDetails_Greengrass::OAIModelPackagingOutputDetails_Greengrass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelPackagingOutputDetails_Greengrass::OAIModelPackagingOutputDetails_Greengrass() {
    this->initializeModel();
}

OAIModelPackagingOutputDetails_Greengrass::~OAIModelPackagingOutputDetails_Greengrass() {}

void OAIModelPackagingOutputDetails_Greengrass::initializeModel() {

    m_component_version_arn_isSet = false;
    m_component_version_arn_isValid = false;

    m_component_name_isSet = false;
    m_component_name_isValid = false;

    m_component_version_isSet = false;
    m_component_version_isValid = false;
}

void OAIModelPackagingOutputDetails_Greengrass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelPackagingOutputDetails_Greengrass::fromJsonObject(QJsonObject json) {

    m_component_version_arn_isValid = ::OpenAPI::fromJsonValue(m_component_version_arn, json[QString("ComponentVersionArn")]);
    m_component_version_arn_isSet = !json[QString("ComponentVersionArn")].isNull() && m_component_version_arn_isValid;

    m_component_name_isValid = ::OpenAPI::fromJsonValue(m_component_name, json[QString("ComponentName")]);
    m_component_name_isSet = !json[QString("ComponentName")].isNull() && m_component_name_isValid;

    m_component_version_isValid = ::OpenAPI::fromJsonValue(m_component_version, json[QString("ComponentVersion")]);
    m_component_version_isSet = !json[QString("ComponentVersion")].isNull() && m_component_version_isValid;
}

QString OAIModelPackagingOutputDetails_Greengrass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelPackagingOutputDetails_Greengrass::asJsonObject() const {
    QJsonObject obj;
    if (m_component_version_arn_isSet) {
        obj.insert(QString("ComponentVersionArn"), ::OpenAPI::toJsonValue(m_component_version_arn));
    }
    if (m_component_name_isSet) {
        obj.insert(QString("ComponentName"), ::OpenAPI::toJsonValue(m_component_name));
    }
    if (m_component_version_isSet) {
        obj.insert(QString("ComponentVersion"), ::OpenAPI::toJsonValue(m_component_version));
    }
    return obj;
}

QString OAIModelPackagingOutputDetails_Greengrass::getComponentVersionArn() const {
    return m_component_version_arn;
}
void OAIModelPackagingOutputDetails_Greengrass::setComponentVersionArn(const QString &component_version_arn) {
    m_component_version_arn = component_version_arn;
    m_component_version_arn_isSet = true;
}

bool OAIModelPackagingOutputDetails_Greengrass::is_component_version_arn_Set() const{
    return m_component_version_arn_isSet;
}

bool OAIModelPackagingOutputDetails_Greengrass::is_component_version_arn_Valid() const{
    return m_component_version_arn_isValid;
}

QString OAIModelPackagingOutputDetails_Greengrass::getComponentName() const {
    return m_component_name;
}
void OAIModelPackagingOutputDetails_Greengrass::setComponentName(const QString &component_name) {
    m_component_name = component_name;
    m_component_name_isSet = true;
}

bool OAIModelPackagingOutputDetails_Greengrass::is_component_name_Set() const{
    return m_component_name_isSet;
}

bool OAIModelPackagingOutputDetails_Greengrass::is_component_name_Valid() const{
    return m_component_name_isValid;
}

QString OAIModelPackagingOutputDetails_Greengrass::getComponentVersion() const {
    return m_component_version;
}
void OAIModelPackagingOutputDetails_Greengrass::setComponentVersion(const QString &component_version) {
    m_component_version = component_version;
    m_component_version_isSet = true;
}

bool OAIModelPackagingOutputDetails_Greengrass::is_component_version_Set() const{
    return m_component_version_isSet;
}

bool OAIModelPackagingOutputDetails_Greengrass::is_component_version_Valid() const{
    return m_component_version_isValid;
}

bool OAIModelPackagingOutputDetails_Greengrass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_version_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelPackagingOutputDetails_Greengrass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
