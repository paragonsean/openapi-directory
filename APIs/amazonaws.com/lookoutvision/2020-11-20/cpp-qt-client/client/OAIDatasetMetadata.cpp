/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatasetMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatasetMetadata::OAIDatasetMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatasetMetadata::OAIDatasetMetadata() {
    this->initializeModel();
}

OAIDatasetMetadata::~OAIDatasetMetadata() {}

void OAIDatasetMetadata::initializeModel() {

    m_dataset_type_isSet = false;
    m_dataset_type_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;
}

void OAIDatasetMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatasetMetadata::fromJsonObject(QJsonObject json) {

    m_dataset_type_isValid = ::OpenAPI::fromJsonValue(m_dataset_type, json[QString("DatasetType")]);
    m_dataset_type_isSet = !json[QString("DatasetType")].isNull() && m_dataset_type_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("CreationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("CreationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;
}

QString OAIDatasetMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatasetMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_type_isSet) {
        obj.insert(QString("DatasetType"), ::OpenAPI::toJsonValue(m_dataset_type));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("CreationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    return obj;
}

QString OAIDatasetMetadata::getDatasetType() const {
    return m_dataset_type;
}
void OAIDatasetMetadata::setDatasetType(const QString &dataset_type) {
    m_dataset_type = dataset_type;
    m_dataset_type_isSet = true;
}

bool OAIDatasetMetadata::is_dataset_type_Set() const{
    return m_dataset_type_isSet;
}

bool OAIDatasetMetadata::is_dataset_type_Valid() const{
    return m_dataset_type_isValid;
}

QDateTime OAIDatasetMetadata::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIDatasetMetadata::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIDatasetMetadata::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIDatasetMetadata::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

OAIDatasetStatus OAIDatasetMetadata::getStatus() const {
    return m_status;
}
void OAIDatasetMetadata::setStatus(const OAIDatasetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDatasetMetadata::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDatasetMetadata::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDatasetMetadata::getStatusMessage() const {
    return m_status_message;
}
void OAIDatasetMetadata::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIDatasetMetadata::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIDatasetMetadata::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAIDatasetMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatasetMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
