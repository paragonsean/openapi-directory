/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListModelPackagingJobsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListModelPackagingJobsResponse::OAIListModelPackagingJobsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListModelPackagingJobsResponse::OAIListModelPackagingJobsResponse() {
    this->initializeModel();
}

OAIListModelPackagingJobsResponse::~OAIListModelPackagingJobsResponse() {}

void OAIListModelPackagingJobsResponse::initializeModel() {

    m_model_packaging_jobs_isSet = false;
    m_model_packaging_jobs_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListModelPackagingJobsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListModelPackagingJobsResponse::fromJsonObject(QJsonObject json) {

    m_model_packaging_jobs_isValid = ::OpenAPI::fromJsonValue(m_model_packaging_jobs, json[QString("ModelPackagingJobs")]);
    m_model_packaging_jobs_isSet = !json[QString("ModelPackagingJobs")].isNull() && m_model_packaging_jobs_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListModelPackagingJobsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListModelPackagingJobsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_model_packaging_jobs.isSet()) {
        obj.insert(QString("ModelPackagingJobs"), ::OpenAPI::toJsonValue(m_model_packaging_jobs));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListModelPackagingJobsResponse::getModelPackagingJobs() const {
    return m_model_packaging_jobs;
}
void OAIListModelPackagingJobsResponse::setModelPackagingJobs(const QList &model_packaging_jobs) {
    m_model_packaging_jobs = model_packaging_jobs;
    m_model_packaging_jobs_isSet = true;
}

bool OAIListModelPackagingJobsResponse::is_model_packaging_jobs_Set() const{
    return m_model_packaging_jobs_isSet;
}

bool OAIListModelPackagingJobsResponse::is_model_packaging_jobs_Valid() const{
    return m_model_packaging_jobs_isValid;
}

QString OAIListModelPackagingJobsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListModelPackagingJobsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListModelPackagingJobsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListModelPackagingJobsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListModelPackagingJobsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_packaging_jobs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListModelPackagingJobsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
