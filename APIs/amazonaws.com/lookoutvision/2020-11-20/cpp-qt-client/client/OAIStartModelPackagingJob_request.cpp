/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartModelPackagingJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartModelPackagingJob_request::OAIStartModelPackagingJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartModelPackagingJob_request::OAIStartModelPackagingJob_request() {
    this->initializeModel();
}

OAIStartModelPackagingJob_request::~OAIStartModelPackagingJob_request() {}

void OAIStartModelPackagingJob_request::initializeModel() {

    m_model_version_isSet = false;
    m_model_version_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIStartModelPackagingJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartModelPackagingJob_request::fromJsonObject(QJsonObject json) {

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("ModelVersion")]);
    m_model_version_isSet = !json[QString("ModelVersion")].isNull() && m_model_version_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIStartModelPackagingJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartModelPackagingJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_model_version_isSet) {
        obj.insert(QString("ModelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIStartModelPackagingJob_request::getModelVersion() const {
    return m_model_version;
}
void OAIStartModelPackagingJob_request::setModelVersion(const QString &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAIStartModelPackagingJob_request::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAIStartModelPackagingJob_request::is_model_version_Valid() const{
    return m_model_version_isValid;
}

QString OAIStartModelPackagingJob_request::getJobName() const {
    return m_job_name;
}
void OAIStartModelPackagingJob_request::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIStartModelPackagingJob_request::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIStartModelPackagingJob_request::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIStartModelPackagingJob_request_Configuration OAIStartModelPackagingJob_request::getConfiguration() const {
    return m_configuration;
}
void OAIStartModelPackagingJob_request::setConfiguration(const OAIStartModelPackagingJob_request_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIStartModelPackagingJob_request::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIStartModelPackagingJob_request::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIStartModelPackagingJob_request::getDescription() const {
    return m_description;
}
void OAIStartModelPackagingJob_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStartModelPackagingJob_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStartModelPackagingJob_request::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIStartModelPackagingJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartModelPackagingJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_version_isValid && m_configuration_isValid && true;
}

} // namespace OpenAPI
