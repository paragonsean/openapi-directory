/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGreengrassConfiguration.h
 *
 * &lt;p&gt;Configuration information for the AWS IoT Greengrass component created in a model packaging job. For more information, see &lt;a&gt;StartModelPackagingJob&lt;/a&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t specify a component with the same &lt;code&gt;ComponentName&lt;/code&gt; and &lt;code&gt;Componentversion&lt;/code&gt; as an existing component with the same component name and component version.&lt;/p&gt; &lt;/note&gt;
 */

#ifndef OAIGreengrassConfiguration_H
#define OAIGreengrassConfiguration_H

#include <QJsonObject>

#include "OAIGreengrassConfiguration_S3OutputLocation.h"
#include "OAIGreengrassConfiguration_TargetPlatform.h"
#include "OAITargetDevice.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGreengrassConfiguration_TargetPlatform;
class OAIGreengrassConfiguration_S3OutputLocation;

class OAIGreengrassConfiguration : public OAIObject {
public:
    OAIGreengrassConfiguration();
    OAIGreengrassConfiguration(QString json);
    ~OAIGreengrassConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCompilerOptions() const;
    void setCompilerOptions(const QString &compiler_options);
    bool is_compiler_options_Set() const;
    bool is_compiler_options_Valid() const;

    OAITargetDevice getTargetDevice() const;
    void setTargetDevice(const OAITargetDevice &target_device);
    bool is_target_device_Set() const;
    bool is_target_device_Valid() const;

    OAIGreengrassConfiguration_TargetPlatform getTargetPlatform() const;
    void setTargetPlatform(const OAIGreengrassConfiguration_TargetPlatform &target_platform);
    bool is_target_platform_Set() const;
    bool is_target_platform_Valid() const;

    OAIGreengrassConfiguration_S3OutputLocation getS3OutputLocation() const;
    void setS3OutputLocation(const OAIGreengrassConfiguration_S3OutputLocation &s3_output_location);
    bool is_s3_output_location_Set() const;
    bool is_s3_output_location_Valid() const;

    QString getComponentName() const;
    void setComponentName(const QString &component_name);
    bool is_component_name_Set() const;
    bool is_component_name_Valid() const;

    QString getComponentVersion() const;
    void setComponentVersion(const QString &component_version);
    bool is_component_version_Set() const;
    bool is_component_version_Valid() const;

    QString getComponentDescription() const;
    void setComponentDescription(const QString &component_description);
    bool is_component_description_Set() const;
    bool is_component_description_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_compiler_options;
    bool m_compiler_options_isSet;
    bool m_compiler_options_isValid;

    OAITargetDevice m_target_device;
    bool m_target_device_isSet;
    bool m_target_device_isValid;

    OAIGreengrassConfiguration_TargetPlatform m_target_platform;
    bool m_target_platform_isSet;
    bool m_target_platform_isValid;

    OAIGreengrassConfiguration_S3OutputLocation m_s3_output_location;
    bool m_s3_output_location_isSet;
    bool m_s3_output_location_isValid;

    QString m_component_name;
    bool m_component_name_isSet;
    bool m_component_name_isValid;

    QString m_component_version;
    bool m_component_version_isSet;
    bool m_component_version_isValid;

    QString m_component_description;
    bool m_component_description_isSet;
    bool m_component_description_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGreengrassConfiguration)

#endif // OAIGreengrassConfiguration_H
