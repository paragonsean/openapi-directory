/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDatasetRequest_DatasetSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDatasetRequest_DatasetSource::OAICreateDatasetRequest_DatasetSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDatasetRequest_DatasetSource::OAICreateDatasetRequest_DatasetSource() {
    this->initializeModel();
}

OAICreateDatasetRequest_DatasetSource::~OAICreateDatasetRequest_DatasetSource() {}

void OAICreateDatasetRequest_DatasetSource::initializeModel() {

    m_ground_truth_manifest_isSet = false;
    m_ground_truth_manifest_isValid = false;
}

void OAICreateDatasetRequest_DatasetSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDatasetRequest_DatasetSource::fromJsonObject(QJsonObject json) {

    m_ground_truth_manifest_isValid = ::OpenAPI::fromJsonValue(m_ground_truth_manifest, json[QString("GroundTruthManifest")]);
    m_ground_truth_manifest_isSet = !json[QString("GroundTruthManifest")].isNull() && m_ground_truth_manifest_isValid;
}

QString OAICreateDatasetRequest_DatasetSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDatasetRequest_DatasetSource::asJsonObject() const {
    QJsonObject obj;
    if (m_ground_truth_manifest.isSet()) {
        obj.insert(QString("GroundTruthManifest"), ::OpenAPI::toJsonValue(m_ground_truth_manifest));
    }
    return obj;
}

OAICreateDataset_request_DatasetSource_GroundTruthManifest OAICreateDatasetRequest_DatasetSource::getGroundTruthManifest() const {
    return m_ground_truth_manifest;
}
void OAICreateDatasetRequest_DatasetSource::setGroundTruthManifest(const OAICreateDataset_request_DatasetSource_GroundTruthManifest &ground_truth_manifest) {
    m_ground_truth_manifest = ground_truth_manifest;
    m_ground_truth_manifest_isSet = true;
}

bool OAICreateDatasetRequest_DatasetSource::is_ground_truth_manifest_Set() const{
    return m_ground_truth_manifest_isSet;
}

bool OAICreateDatasetRequest_DatasetSource::is_ground_truth_manifest_Valid() const{
    return m_ground_truth_manifest_isValid;
}

bool OAICreateDatasetRequest_DatasetSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ground_truth_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDatasetRequest_DatasetSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
