/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectDescription::OAIProjectDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectDescription::OAIProjectDescription() {
    this->initializeModel();
}

OAIProjectDescription::~OAIProjectDescription() {}

void OAIProjectDescription::initializeModel() {

    m_project_arn_isSet = false;
    m_project_arn_isValid = false;

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_datasets_isSet = false;
    m_datasets_isValid = false;
}

void OAIProjectDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectDescription::fromJsonObject(QJsonObject json) {

    m_project_arn_isValid = ::OpenAPI::fromJsonValue(m_project_arn, json[QString("ProjectArn")]);
    m_project_arn_isSet = !json[QString("ProjectArn")].isNull() && m_project_arn_isValid;

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("ProjectName")]);
    m_project_name_isSet = !json[QString("ProjectName")].isNull() && m_project_name_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("CreationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("CreationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_datasets_isValid = ::OpenAPI::fromJsonValue(m_datasets, json[QString("Datasets")]);
    m_datasets_isSet = !json[QString("Datasets")].isNull() && m_datasets_isValid;
}

QString OAIProjectDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_project_arn_isSet) {
        obj.insert(QString("ProjectArn"), ::OpenAPI::toJsonValue(m_project_arn));
    }
    if (m_project_name_isSet) {
        obj.insert(QString("ProjectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("CreationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_datasets.isSet()) {
        obj.insert(QString("Datasets"), ::OpenAPI::toJsonValue(m_datasets));
    }
    return obj;
}

QString OAIProjectDescription::getProjectArn() const {
    return m_project_arn;
}
void OAIProjectDescription::setProjectArn(const QString &project_arn) {
    m_project_arn = project_arn;
    m_project_arn_isSet = true;
}

bool OAIProjectDescription::is_project_arn_Set() const{
    return m_project_arn_isSet;
}

bool OAIProjectDescription::is_project_arn_Valid() const{
    return m_project_arn_isValid;
}

QString OAIProjectDescription::getProjectName() const {
    return m_project_name;
}
void OAIProjectDescription::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAIProjectDescription::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAIProjectDescription::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QDateTime OAIProjectDescription::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIProjectDescription::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIProjectDescription::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIProjectDescription::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

QList OAIProjectDescription::getDatasets() const {
    return m_datasets;
}
void OAIProjectDescription::setDatasets(const QList &datasets) {
    m_datasets = datasets;
    m_datasets_isSet = true;
}

bool OAIProjectDescription::is_datasets_Set() const{
    return m_datasets_isSet;
}

bool OAIProjectDescription::is_datasets_Valid() const{
    return m_datasets_isValid;
}

bool OAIProjectDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_project_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
