/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelPerformance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelPerformance::OAIModelPerformance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelPerformance::OAIModelPerformance() {
    this->initializeModel();
}

OAIModelPerformance::~OAIModelPerformance() {}

void OAIModelPerformance::initializeModel() {

    m_f1_score_isSet = false;
    m_f1_score_isValid = false;

    m_recall_isSet = false;
    m_recall_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;
}

void OAIModelPerformance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelPerformance::fromJsonObject(QJsonObject json) {

    m_f1_score_isValid = ::OpenAPI::fromJsonValue(m_f1_score, json[QString("F1Score")]);
    m_f1_score_isSet = !json[QString("F1Score")].isNull() && m_f1_score_isValid;

    m_recall_isValid = ::OpenAPI::fromJsonValue(m_recall, json[QString("Recall")]);
    m_recall_isSet = !json[QString("Recall")].isNull() && m_recall_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("Precision")]);
    m_precision_isSet = !json[QString("Precision")].isNull() && m_precision_isValid;
}

QString OAIModelPerformance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelPerformance::asJsonObject() const {
    QJsonObject obj;
    if (m_f1_score_isSet) {
        obj.insert(QString("F1Score"), ::OpenAPI::toJsonValue(m_f1_score));
    }
    if (m_recall_isSet) {
        obj.insert(QString("Recall"), ::OpenAPI::toJsonValue(m_recall));
    }
    if (m_precision_isSet) {
        obj.insert(QString("Precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    return obj;
}

float OAIModelPerformance::getF1Score() const {
    return m_f1_score;
}
void OAIModelPerformance::setF1Score(const float &f1_score) {
    m_f1_score = f1_score;
    m_f1_score_isSet = true;
}

bool OAIModelPerformance::is_f1_score_Set() const{
    return m_f1_score_isSet;
}

bool OAIModelPerformance::is_f1_score_Valid() const{
    return m_f1_score_isValid;
}

float OAIModelPerformance::getRecall() const {
    return m_recall;
}
void OAIModelPerformance::setRecall(const float &recall) {
    m_recall = recall;
    m_recall_isSet = true;
}

bool OAIModelPerformance::is_recall_Set() const{
    return m_recall_isSet;
}

bool OAIModelPerformance::is_recall_Valid() const{
    return m_recall_isValid;
}

float OAIModelPerformance::getPrecision() const {
    return m_precision;
}
void OAIModelPerformance::setPrecision(const float &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAIModelPerformance::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAIModelPerformance::is_precision_Valid() const{
    return m_precision_isValid;
}

bool OAIModelPerformance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_f1_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelPerformance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
