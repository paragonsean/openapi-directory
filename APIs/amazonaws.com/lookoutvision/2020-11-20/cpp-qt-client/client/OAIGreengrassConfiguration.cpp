/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGreengrassConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGreengrassConfiguration::OAIGreengrassConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGreengrassConfiguration::OAIGreengrassConfiguration() {
    this->initializeModel();
}

OAIGreengrassConfiguration::~OAIGreengrassConfiguration() {}

void OAIGreengrassConfiguration::initializeModel() {

    m_compiler_options_isSet = false;
    m_compiler_options_isValid = false;

    m_target_device_isSet = false;
    m_target_device_isValid = false;

    m_target_platform_isSet = false;
    m_target_platform_isValid = false;

    m_s3_output_location_isSet = false;
    m_s3_output_location_isValid = false;

    m_component_name_isSet = false;
    m_component_name_isValid = false;

    m_component_version_isSet = false;
    m_component_version_isValid = false;

    m_component_description_isSet = false;
    m_component_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGreengrassConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGreengrassConfiguration::fromJsonObject(QJsonObject json) {

    m_compiler_options_isValid = ::OpenAPI::fromJsonValue(m_compiler_options, json[QString("CompilerOptions")]);
    m_compiler_options_isSet = !json[QString("CompilerOptions")].isNull() && m_compiler_options_isValid;

    m_target_device_isValid = ::OpenAPI::fromJsonValue(m_target_device, json[QString("TargetDevice")]);
    m_target_device_isSet = !json[QString("TargetDevice")].isNull() && m_target_device_isValid;

    m_target_platform_isValid = ::OpenAPI::fromJsonValue(m_target_platform, json[QString("TargetPlatform")]);
    m_target_platform_isSet = !json[QString("TargetPlatform")].isNull() && m_target_platform_isValid;

    m_s3_output_location_isValid = ::OpenAPI::fromJsonValue(m_s3_output_location, json[QString("S3OutputLocation")]);
    m_s3_output_location_isSet = !json[QString("S3OutputLocation")].isNull() && m_s3_output_location_isValid;

    m_component_name_isValid = ::OpenAPI::fromJsonValue(m_component_name, json[QString("ComponentName")]);
    m_component_name_isSet = !json[QString("ComponentName")].isNull() && m_component_name_isValid;

    m_component_version_isValid = ::OpenAPI::fromJsonValue(m_component_version, json[QString("ComponentVersion")]);
    m_component_version_isSet = !json[QString("ComponentVersion")].isNull() && m_component_version_isValid;

    m_component_description_isValid = ::OpenAPI::fromJsonValue(m_component_description, json[QString("ComponentDescription")]);
    m_component_description_isSet = !json[QString("ComponentDescription")].isNull() && m_component_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIGreengrassConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGreengrassConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_compiler_options_isSet) {
        obj.insert(QString("CompilerOptions"), ::OpenAPI::toJsonValue(m_compiler_options));
    }
    if (m_target_device.isSet()) {
        obj.insert(QString("TargetDevice"), ::OpenAPI::toJsonValue(m_target_device));
    }
    if (m_target_platform.isSet()) {
        obj.insert(QString("TargetPlatform"), ::OpenAPI::toJsonValue(m_target_platform));
    }
    if (m_s3_output_location.isSet()) {
        obj.insert(QString("S3OutputLocation"), ::OpenAPI::toJsonValue(m_s3_output_location));
    }
    if (m_component_name_isSet) {
        obj.insert(QString("ComponentName"), ::OpenAPI::toJsonValue(m_component_name));
    }
    if (m_component_version_isSet) {
        obj.insert(QString("ComponentVersion"), ::OpenAPI::toJsonValue(m_component_version));
    }
    if (m_component_description_isSet) {
        obj.insert(QString("ComponentDescription"), ::OpenAPI::toJsonValue(m_component_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGreengrassConfiguration::getCompilerOptions() const {
    return m_compiler_options;
}
void OAIGreengrassConfiguration::setCompilerOptions(const QString &compiler_options) {
    m_compiler_options = compiler_options;
    m_compiler_options_isSet = true;
}

bool OAIGreengrassConfiguration::is_compiler_options_Set() const{
    return m_compiler_options_isSet;
}

bool OAIGreengrassConfiguration::is_compiler_options_Valid() const{
    return m_compiler_options_isValid;
}

OAITargetDevice OAIGreengrassConfiguration::getTargetDevice() const {
    return m_target_device;
}
void OAIGreengrassConfiguration::setTargetDevice(const OAITargetDevice &target_device) {
    m_target_device = target_device;
    m_target_device_isSet = true;
}

bool OAIGreengrassConfiguration::is_target_device_Set() const{
    return m_target_device_isSet;
}

bool OAIGreengrassConfiguration::is_target_device_Valid() const{
    return m_target_device_isValid;
}

OAIGreengrassConfiguration_TargetPlatform OAIGreengrassConfiguration::getTargetPlatform() const {
    return m_target_platform;
}
void OAIGreengrassConfiguration::setTargetPlatform(const OAIGreengrassConfiguration_TargetPlatform &target_platform) {
    m_target_platform = target_platform;
    m_target_platform_isSet = true;
}

bool OAIGreengrassConfiguration::is_target_platform_Set() const{
    return m_target_platform_isSet;
}

bool OAIGreengrassConfiguration::is_target_platform_Valid() const{
    return m_target_platform_isValid;
}

OAIGreengrassConfiguration_S3OutputLocation OAIGreengrassConfiguration::getS3OutputLocation() const {
    return m_s3_output_location;
}
void OAIGreengrassConfiguration::setS3OutputLocation(const OAIGreengrassConfiguration_S3OutputLocation &s3_output_location) {
    m_s3_output_location = s3_output_location;
    m_s3_output_location_isSet = true;
}

bool OAIGreengrassConfiguration::is_s3_output_location_Set() const{
    return m_s3_output_location_isSet;
}

bool OAIGreengrassConfiguration::is_s3_output_location_Valid() const{
    return m_s3_output_location_isValid;
}

QString OAIGreengrassConfiguration::getComponentName() const {
    return m_component_name;
}
void OAIGreengrassConfiguration::setComponentName(const QString &component_name) {
    m_component_name = component_name;
    m_component_name_isSet = true;
}

bool OAIGreengrassConfiguration::is_component_name_Set() const{
    return m_component_name_isSet;
}

bool OAIGreengrassConfiguration::is_component_name_Valid() const{
    return m_component_name_isValid;
}

QString OAIGreengrassConfiguration::getComponentVersion() const {
    return m_component_version;
}
void OAIGreengrassConfiguration::setComponentVersion(const QString &component_version) {
    m_component_version = component_version;
    m_component_version_isSet = true;
}

bool OAIGreengrassConfiguration::is_component_version_Set() const{
    return m_component_version_isSet;
}

bool OAIGreengrassConfiguration::is_component_version_Valid() const{
    return m_component_version_isValid;
}

QString OAIGreengrassConfiguration::getComponentDescription() const {
    return m_component_description;
}
void OAIGreengrassConfiguration::setComponentDescription(const QString &component_description) {
    m_component_description = component_description;
    m_component_description_isSet = true;
}

bool OAIGreengrassConfiguration::is_component_description_Set() const{
    return m_component_description_isSet;
}

bool OAIGreengrassConfiguration::is_component_description_Valid() const{
    return m_component_description_isValid;
}

QList OAIGreengrassConfiguration::getTags() const {
    return m_tags;
}
void OAIGreengrassConfiguration::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGreengrassConfiguration::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGreengrassConfiguration::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGreengrassConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compiler_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_output_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGreengrassConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_output_location_isValid && m_component_name_isValid && true;
}

} // namespace OpenAPI
