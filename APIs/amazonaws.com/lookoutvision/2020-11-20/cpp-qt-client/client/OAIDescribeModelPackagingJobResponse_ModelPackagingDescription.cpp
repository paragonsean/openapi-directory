/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeModelPackagingJobResponse_ModelPackagingDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::OAIDescribeModelPackagingJobResponse_ModelPackagingDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::OAIDescribeModelPackagingJobResponse_ModelPackagingDescription() {
    this->initializeModel();
}

OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::~OAIDescribeModelPackagingJobResponse_ModelPackagingDescription() {}

void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::initializeModel() {

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_model_version_isSet = false;
    m_model_version_isValid = false;

    m_model_packaging_configuration_isSet = false;
    m_model_packaging_configuration_isValid = false;

    m_model_packaging_job_description_isSet = false;
    m_model_packaging_job_description_isValid = false;

    m_model_packaging_method_isSet = false;
    m_model_packaging_method_isValid = false;

    m_model_packaging_output_details_isSet = false;
    m_model_packaging_output_details_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;
}

void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::fromJsonObject(QJsonObject json) {

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("ProjectName")]);
    m_project_name_isSet = !json[QString("ProjectName")].isNull() && m_project_name_isValid;

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("ModelVersion")]);
    m_model_version_isSet = !json[QString("ModelVersion")].isNull() && m_model_version_isValid;

    m_model_packaging_configuration_isValid = ::OpenAPI::fromJsonValue(m_model_packaging_configuration, json[QString("ModelPackagingConfiguration")]);
    m_model_packaging_configuration_isSet = !json[QString("ModelPackagingConfiguration")].isNull() && m_model_packaging_configuration_isValid;

    m_model_packaging_job_description_isValid = ::OpenAPI::fromJsonValue(m_model_packaging_job_description, json[QString("ModelPackagingJobDescription")]);
    m_model_packaging_job_description_isSet = !json[QString("ModelPackagingJobDescription")].isNull() && m_model_packaging_job_description_isValid;

    m_model_packaging_method_isValid = ::OpenAPI::fromJsonValue(m_model_packaging_method, json[QString("ModelPackagingMethod")]);
    m_model_packaging_method_isSet = !json[QString("ModelPackagingMethod")].isNull() && m_model_packaging_method_isValid;

    m_model_packaging_output_details_isValid = ::OpenAPI::fromJsonValue(m_model_packaging_output_details, json[QString("ModelPackagingOutputDetails")]);
    m_model_packaging_output_details_isSet = !json[QString("ModelPackagingOutputDetails")].isNull() && m_model_packaging_output_details_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("CreationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("CreationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("LastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("LastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;
}

QString OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_project_name_isSet) {
        obj.insert(QString("ProjectName"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_model_version_isSet) {
        obj.insert(QString("ModelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    if (m_model_packaging_configuration.isSet()) {
        obj.insert(QString("ModelPackagingConfiguration"), ::OpenAPI::toJsonValue(m_model_packaging_configuration));
    }
    if (m_model_packaging_job_description_isSet) {
        obj.insert(QString("ModelPackagingJobDescription"), ::OpenAPI::toJsonValue(m_model_packaging_job_description));
    }
    if (m_model_packaging_method_isSet) {
        obj.insert(QString("ModelPackagingMethod"), ::OpenAPI::toJsonValue(m_model_packaging_method));
    }
    if (m_model_packaging_output_details.isSet()) {
        obj.insert(QString("ModelPackagingOutputDetails"), ::OpenAPI::toJsonValue(m_model_packaging_output_details));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("CreationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("LastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    return obj;
}

QString OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::getJobName() const {
    return m_job_name;
}
void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QString OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::getProjectName() const {
    return m_project_name;
}
void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_project_name_Valid() const{
    return m_project_name_isValid;
}

QString OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::getModelVersion() const {
    return m_model_version;
}
void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::setModelVersion(const QString &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_model_version_Valid() const{
    return m_model_version_isValid;
}

OAIModelPackagingDescription_ModelPackagingConfiguration OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::getModelPackagingConfiguration() const {
    return m_model_packaging_configuration;
}
void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::setModelPackagingConfiguration(const OAIModelPackagingDescription_ModelPackagingConfiguration &model_packaging_configuration) {
    m_model_packaging_configuration = model_packaging_configuration;
    m_model_packaging_configuration_isSet = true;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_model_packaging_configuration_Set() const{
    return m_model_packaging_configuration_isSet;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_model_packaging_configuration_Valid() const{
    return m_model_packaging_configuration_isValid;
}

QString OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::getModelPackagingJobDescription() const {
    return m_model_packaging_job_description;
}
void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::setModelPackagingJobDescription(const QString &model_packaging_job_description) {
    m_model_packaging_job_description = model_packaging_job_description;
    m_model_packaging_job_description_isSet = true;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_model_packaging_job_description_Set() const{
    return m_model_packaging_job_description_isSet;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_model_packaging_job_description_Valid() const{
    return m_model_packaging_job_description_isValid;
}

QString OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::getModelPackagingMethod() const {
    return m_model_packaging_method;
}
void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::setModelPackagingMethod(const QString &model_packaging_method) {
    m_model_packaging_method = model_packaging_method;
    m_model_packaging_method_isSet = true;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_model_packaging_method_Set() const{
    return m_model_packaging_method_isSet;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_model_packaging_method_Valid() const{
    return m_model_packaging_method_isValid;
}

OAIModelPackagingDescription_ModelPackagingOutputDetails OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::getModelPackagingOutputDetails() const {
    return m_model_packaging_output_details;
}
void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::setModelPackagingOutputDetails(const OAIModelPackagingDescription_ModelPackagingOutputDetails &model_packaging_output_details) {
    m_model_packaging_output_details = model_packaging_output_details;
    m_model_packaging_output_details_isSet = true;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_model_packaging_output_details_Set() const{
    return m_model_packaging_output_details_isSet;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_model_packaging_output_details_Valid() const{
    return m_model_packaging_output_details_isValid;
}

OAIModelPackagingJobStatus OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::getStatus() const {
    return m_status;
}
void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::setStatus(const OAIModelPackagingJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::getStatusMessage() const {
    return m_status_message;
}
void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QDateTime OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

QDateTime OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_packaging_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_packaging_job_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_packaging_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_packaging_output_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeModelPackagingJobResponse_ModelPackagingDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
