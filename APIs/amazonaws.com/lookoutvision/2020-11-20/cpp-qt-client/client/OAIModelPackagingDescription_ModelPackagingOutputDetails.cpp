/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelPackagingDescription_ModelPackagingOutputDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelPackagingDescription_ModelPackagingOutputDetails::OAIModelPackagingDescription_ModelPackagingOutputDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelPackagingDescription_ModelPackagingOutputDetails::OAIModelPackagingDescription_ModelPackagingOutputDetails() {
    this->initializeModel();
}

OAIModelPackagingDescription_ModelPackagingOutputDetails::~OAIModelPackagingDescription_ModelPackagingOutputDetails() {}

void OAIModelPackagingDescription_ModelPackagingOutputDetails::initializeModel() {

    m_greengrass_isSet = false;
    m_greengrass_isValid = false;
}

void OAIModelPackagingDescription_ModelPackagingOutputDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelPackagingDescription_ModelPackagingOutputDetails::fromJsonObject(QJsonObject json) {

    m_greengrass_isValid = ::OpenAPI::fromJsonValue(m_greengrass, json[QString("Greengrass")]);
    m_greengrass_isSet = !json[QString("Greengrass")].isNull() && m_greengrass_isValid;
}

QString OAIModelPackagingDescription_ModelPackagingOutputDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelPackagingDescription_ModelPackagingOutputDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_greengrass.isSet()) {
        obj.insert(QString("Greengrass"), ::OpenAPI::toJsonValue(m_greengrass));
    }
    return obj;
}

OAIModelPackagingOutputDetails_Greengrass OAIModelPackagingDescription_ModelPackagingOutputDetails::getGreengrass() const {
    return m_greengrass;
}
void OAIModelPackagingDescription_ModelPackagingOutputDetails::setGreengrass(const OAIModelPackagingOutputDetails_Greengrass &greengrass) {
    m_greengrass = greengrass;
    m_greengrass_isSet = true;
}

bool OAIModelPackagingDescription_ModelPackagingOutputDetails::is_greengrass_Set() const{
    return m_greengrass_isSet;
}

bool OAIModelPackagingDescription_ModelPackagingOutputDetails::is_greengrass_Valid() const{
    return m_greengrass_isValid;
}

bool OAIModelPackagingDescription_ModelPackagingOutputDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_greengrass.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelPackagingDescription_ModelPackagingOutputDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
