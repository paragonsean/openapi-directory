/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteModelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteModelResponse::OAIDeleteModelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteModelResponse::OAIDeleteModelResponse() {
    this->initializeModel();
}

OAIDeleteModelResponse::~OAIDeleteModelResponse() {}

void OAIDeleteModelResponse::initializeModel() {

    m_model_arn_isSet = false;
    m_model_arn_isValid = false;
}

void OAIDeleteModelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteModelResponse::fromJsonObject(QJsonObject json) {

    m_model_arn_isValid = ::OpenAPI::fromJsonValue(m_model_arn, json[QString("ModelArn")]);
    m_model_arn_isSet = !json[QString("ModelArn")].isNull() && m_model_arn_isValid;
}

QString OAIDeleteModelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteModelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_model_arn_isSet) {
        obj.insert(QString("ModelArn"), ::OpenAPI::toJsonValue(m_model_arn));
    }
    return obj;
}

QString OAIDeleteModelResponse::getModelArn() const {
    return m_model_arn;
}
void OAIDeleteModelResponse::setModelArn(const QString &model_arn) {
    m_model_arn = model_arn;
    m_model_arn_isSet = true;
}

bool OAIDeleteModelResponse::is_model_arn_Set() const{
    return m_model_arn_isSet;
}

bool OAIDeleteModelResponse::is_model_arn_Valid() const{
    return m_model_arn_isValid;
}

bool OAIDeleteModelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteModelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
