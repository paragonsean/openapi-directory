/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatasetDescription.h
 *
 * The description for a dataset. For more information, see &lt;a&gt;DescribeDataset&lt;/a&gt;.
 */

#ifndef OAIDatasetDescription_H
#define OAIDatasetDescription_H

#include <QJsonObject>

#include "OAIDatasetDescription_ImageStats.h"
#include "OAIDatasetStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDatasetDescription_ImageStats;

class OAIDatasetDescription : public OAIObject {
public:
    OAIDatasetDescription();
    OAIDatasetDescription(QString json);
    ~OAIDatasetDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getProjectName() const;
    void setProjectName(const QString &project_name);
    bool is_project_name_Set() const;
    bool is_project_name_Valid() const;

    QString getDatasetType() const;
    void setDatasetType(const QString &dataset_type);
    bool is_dataset_type_Set() const;
    bool is_dataset_type_Valid() const;

    QDateTime getCreationTimestamp() const;
    void setCreationTimestamp(const QDateTime &creation_timestamp);
    bool is_creation_timestamp_Set() const;
    bool is_creation_timestamp_Valid() const;

    QDateTime getLastUpdatedTimestamp() const;
    void setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp);
    bool is_last_updated_timestamp_Set() const;
    bool is_last_updated_timestamp_Valid() const;

    OAIDatasetStatus getStatus() const;
    void setStatus(const OAIDatasetStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    OAIDatasetDescription_ImageStats getImageStats() const;
    void setImageStats(const OAIDatasetDescription_ImageStats &image_stats);
    bool is_image_stats_Set() const;
    bool is_image_stats_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_project_name;
    bool m_project_name_isSet;
    bool m_project_name_isValid;

    QString m_dataset_type;
    bool m_dataset_type_isSet;
    bool m_dataset_type_isValid;

    QDateTime m_creation_timestamp;
    bool m_creation_timestamp_isSet;
    bool m_creation_timestamp_isValid;

    QDateTime m_last_updated_timestamp;
    bool m_last_updated_timestamp_isSet;
    bool m_last_updated_timestamp_isValid;

    OAIDatasetStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    OAIDatasetDescription_ImageStats m_image_stats;
    bool m_image_stats_isSet;
    bool m_image_stats_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatasetDescription)

#endif // OAIDatasetDescription_H
