/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonLookoutForVision);
  }
}(this, function(expect, AmazonLookoutForVision) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonLookoutForVision.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createDataset', function() {
      it('should call createDataset successfully', function(done) {
        //uncomment below and update the code to test createDataset
        //instance.createDataset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModel', function() {
      it('should call createModel successfully', function(done) {
        //uncomment below and update the code to test createModel
        //instance.createModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProject', function() {
      it('should call createProject successfully', function(done) {
        //uncomment below and update the code to test createProject
        //instance.createProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDataset', function() {
      it('should call deleteDataset successfully', function(done) {
        //uncomment below and update the code to test deleteDataset
        //instance.deleteDataset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteModel', function() {
      it('should call deleteModel successfully', function(done) {
        //uncomment below and update the code to test deleteModel
        //instance.deleteModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProject', function() {
      it('should call deleteProject successfully', function(done) {
        //uncomment below and update the code to test deleteProject
        //instance.deleteProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDataset', function() {
      it('should call describeDataset successfully', function(done) {
        //uncomment below and update the code to test describeDataset
        //instance.describeDataset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeModel', function() {
      it('should call describeModel successfully', function(done) {
        //uncomment below and update the code to test describeModel
        //instance.describeModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeModelPackagingJob', function() {
      it('should call describeModelPackagingJob successfully', function(done) {
        //uncomment below and update the code to test describeModelPackagingJob
        //instance.describeModelPackagingJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeProject', function() {
      it('should call describeProject successfully', function(done) {
        //uncomment below and update the code to test describeProject
        //instance.describeProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detectAnomalies', function() {
      it('should call detectAnomalies successfully', function(done) {
        //uncomment below and update the code to test detectAnomalies
        //instance.detectAnomalies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDatasetEntries', function() {
      it('should call listDatasetEntries successfully', function(done) {
        //uncomment below and update the code to test listDatasetEntries
        //instance.listDatasetEntries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listModelPackagingJobs', function() {
      it('should call listModelPackagingJobs successfully', function(done) {
        //uncomment below and update the code to test listModelPackagingJobs
        //instance.listModelPackagingJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listModels', function() {
      it('should call listModels successfully', function(done) {
        //uncomment below and update the code to test listModels
        //instance.listModels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProjects', function() {
      it('should call listProjects successfully', function(done) {
        //uncomment below and update the code to test listProjects
        //instance.listProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startModel', function() {
      it('should call startModel successfully', function(done) {
        //uncomment below and update the code to test startModel
        //instance.startModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startModelPackagingJob', function() {
      it('should call startModelPackagingJob successfully', function(done) {
        //uncomment below and update the code to test startModelPackagingJob
        //instance.startModelPackagingJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopModel', function() {
      it('should call stopModel successfully', function(done) {
        //uncomment below and update the code to test stopModel
        //instance.stopModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDatasetEntries', function() {
      it('should call updateDatasetEntries successfully', function(done) {
        //uncomment below and update the code to test updateDatasetEntries
        //instance.updateDatasetEntries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
