/**
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonLookoutForVision);
  }
}(this, function(expect, AmazonLookoutForVision) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonLookoutForVision.ModelDescription();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModelDescription', function() {
    it('should create an instance of ModelDescription', function() {
      // uncomment below and update the code to test ModelDescription
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be.a(AmazonLookoutForVision.ModelDescription);
    });

    it('should have the property modelVersion (base name: "ModelVersion")', function() {
      // uncomment below and update the code to test the property modelVersion
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property modelArn (base name: "ModelArn")', function() {
      // uncomment below and update the code to test the property modelArn
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property creationTimestamp (base name: "CreationTimestamp")', function() {
      // uncomment below and update the code to test the property creationTimestamp
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property statusMessage (base name: "StatusMessage")', function() {
      // uncomment below and update the code to test the property statusMessage
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property performance (base name: "Performance")', function() {
      // uncomment below and update the code to test the property performance
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property outputConfig (base name: "OutputConfig")', function() {
      // uncomment below and update the code to test the property outputConfig
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property evaluationManifest (base name: "EvaluationManifest")', function() {
      // uncomment below and update the code to test the property evaluationManifest
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property evaluationResult (base name: "EvaluationResult")', function() {
      // uncomment below and update the code to test the property evaluationResult
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property evaluationEndTimestamp (base name: "EvaluationEndTimestamp")', function() {
      // uncomment below and update the code to test the property evaluationEndTimestamp
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyId (base name: "KmsKeyId")', function() {
      // uncomment below and update the code to test the property kmsKeyId
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property minInferenceUnits (base name: "MinInferenceUnits")', function() {
      // uncomment below and update the code to test the property minInferenceUnits
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

    it('should have the property maxInferenceUnits (base name: "MaxInferenceUnits")', function() {
      // uncomment below and update the code to test the property maxInferenceUnits
      //var instance = new AmazonLookoutForVision.ModelDescription();
      //expect(instance).to.be();
    });

  });

}));
