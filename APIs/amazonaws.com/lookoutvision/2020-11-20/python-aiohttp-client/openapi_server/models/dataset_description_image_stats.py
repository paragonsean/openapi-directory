# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatasetDescriptionImageStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total: int=None, labeled: int=None, normal: int=None, anomaly: int=None):
        """DatasetDescriptionImageStats - a model defined in OpenAPI

        :param total: The total of this DatasetDescriptionImageStats.
        :param labeled: The labeled of this DatasetDescriptionImageStats.
        :param normal: The normal of this DatasetDescriptionImageStats.
        :param anomaly: The anomaly of this DatasetDescriptionImageStats.
        """
        self.openapi_types = {
            'total': int,
            'labeled': int,
            'normal': int,
            'anomaly': int
        }

        self.attribute_map = {
            'total': 'Total',
            'labeled': 'Labeled',
            'normal': 'Normal',
            'anomaly': 'Anomaly'
        }

        self._total = total
        self._labeled = labeled
        self._normal = normal
        self._anomaly = anomaly

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatasetDescriptionImageStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatasetDescription_ImageStats of this DatasetDescriptionImageStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total(self):
        """Gets the total of this DatasetDescriptionImageStats.


        :return: The total of this DatasetDescriptionImageStats.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DatasetDescriptionImageStats.


        :param total: The total of this DatasetDescriptionImageStats.
        :type total: int
        """

        self._total = total

    @property
    def labeled(self):
        """Gets the labeled of this DatasetDescriptionImageStats.


        :return: The labeled of this DatasetDescriptionImageStats.
        :rtype: int
        """
        return self._labeled

    @labeled.setter
    def labeled(self, labeled):
        """Sets the labeled of this DatasetDescriptionImageStats.


        :param labeled: The labeled of this DatasetDescriptionImageStats.
        :type labeled: int
        """

        self._labeled = labeled

    @property
    def normal(self):
        """Gets the normal of this DatasetDescriptionImageStats.


        :return: The normal of this DatasetDescriptionImageStats.
        :rtype: int
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this DatasetDescriptionImageStats.


        :param normal: The normal of this DatasetDescriptionImageStats.
        :type normal: int
        """

        self._normal = normal

    @property
    def anomaly(self):
        """Gets the anomaly of this DatasetDescriptionImageStats.


        :return: The anomaly of this DatasetDescriptionImageStats.
        :rtype: int
        """
        return self._anomaly

    @anomaly.setter
    def anomaly(self, anomaly):
        """Sets the anomaly of this DatasetDescriptionImageStats.


        :param anomaly: The anomaly of this DatasetDescriptionImageStats.
        :type anomaly: int
        """

        self._anomaly = anomaly
