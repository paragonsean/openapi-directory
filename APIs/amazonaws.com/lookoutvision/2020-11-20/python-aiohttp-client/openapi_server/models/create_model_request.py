# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_model_request_output_config import CreateModelRequestOutputConfig
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateModelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, output_config: CreateModelRequestOutputConfig=None, kms_key_id: str=None, tags: List[Tag]=None):
        """CreateModelRequest - a model defined in OpenAPI

        :param description: The description of this CreateModelRequest.
        :param output_config: The output_config of this CreateModelRequest.
        :param kms_key_id: The kms_key_id of this CreateModelRequest.
        :param tags: The tags of this CreateModelRequest.
        """
        self.openapi_types = {
            'description': str,
            'output_config': CreateModelRequestOutputConfig,
            'kms_key_id': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'description': 'Description',
            'output_config': 'OutputConfig',
            'kms_key_id': 'KmsKeyId',
            'tags': 'Tags'
        }

        self._description = description
        self._output_config = output_config
        self._kms_key_id = kms_key_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateModelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateModel_request of this CreateModelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateModelRequest.

        A description for the version of the model.

        :return: The description of this CreateModelRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateModelRequest.

        A description for the version of the model.

        :param description: The description of this CreateModelRequest.
        :type description: str
        """
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'[0-9A-Za-z\.\-_]*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[0-9A-Za-z\.\-_]*/`")

        self._description = description

    @property
    def output_config(self):
        """Gets the output_config of this CreateModelRequest.


        :return: The output_config of this CreateModelRequest.
        :rtype: CreateModelRequestOutputConfig
        """
        return self._output_config

    @output_config.setter
    def output_config(self, output_config):
        """Sets the output_config of this CreateModelRequest.


        :param output_config: The output_config of this CreateModelRequest.
        :type output_config: CreateModelRequestOutputConfig
        """
        if output_config is None:
            raise ValueError("Invalid value for `output_config`, must not be `None`")

        self._output_config = output_config

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this CreateModelRequest.

        The identifier for your AWS KMS key. The key is used to encrypt training and test images copied into the service for model training. Your source images are unaffected. If this parameter is not specified, the copied images are encrypted by a key that AWS owns and manages.

        :return: The kms_key_id of this CreateModelRequest.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this CreateModelRequest.

        The identifier for your AWS KMS key. The key is used to encrypt training and test images copied into the service for model training. Your source images are unaffected. If this parameter is not specified, the copied images are encrypted by a key that AWS owns and manages.

        :param kms_key_id: The kms_key_id of this CreateModelRequest.
        :type kms_key_id: str
        """
        if kms_key_id is not None and len(kms_key_id) > 2048:
            raise ValueError("Invalid value for `kms_key_id`, length must be less than or equal to `2048`")
        if kms_key_id is not None and len(kms_key_id) < 1:
            raise ValueError("Invalid value for `kms_key_id`, length must be greater than or equal to `1`")
        if kms_key_id is not None and not re.search(r'^[A-Za-z0-9][A-Za-z0-9:_\/+=,@.-]{0,2048}$', kms_key_id):
            raise ValueError("Invalid value for `kms_key_id`, must be a follow pattern or equal to `/^[A-Za-z0-9][A-Za-z0-9:_\/+=,@.-]{0,2048}$/`")

        self._kms_key_id = kms_key_id

    @property
    def tags(self):
        """Gets the tags of this CreateModelRequest.

        A set of tags (key-value pairs) that you want to attach to the model.

        :return: The tags of this CreateModelRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateModelRequest.

        A set of tags (key-value pairs) that you want to attach to the model.

        :param tags: The tags of this CreateModelRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
