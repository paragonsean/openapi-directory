# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PixelAnomaly(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_percentage_area: float=None, color: str=None):
        """PixelAnomaly - a model defined in OpenAPI

        :param total_percentage_area: The total_percentage_area of this PixelAnomaly.
        :param color: The color of this PixelAnomaly.
        """
        self.openapi_types = {
            'total_percentage_area': float,
            'color': str
        }

        self.attribute_map = {
            'total_percentage_area': 'TotalPercentageArea',
            'color': 'Color'
        }

        self._total_percentage_area = total_percentage_area
        self._color = color

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PixelAnomaly':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PixelAnomaly of this PixelAnomaly.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_percentage_area(self):
        """Gets the total_percentage_area of this PixelAnomaly.


        :return: The total_percentage_area of this PixelAnomaly.
        :rtype: float
        """
        return self._total_percentage_area

    @total_percentage_area.setter
    def total_percentage_area(self, total_percentage_area):
        """Sets the total_percentage_area of this PixelAnomaly.


        :param total_percentage_area: The total_percentage_area of this PixelAnomaly.
        :type total_percentage_area: float
        """

        self._total_percentage_area = total_percentage_area

    @property
    def color(self):
        """Gets the color of this PixelAnomaly.


        :return: The color of this PixelAnomaly.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PixelAnomaly.


        :param color: The color of this PixelAnomaly.
        :type color: str
        """

        self._color = color
