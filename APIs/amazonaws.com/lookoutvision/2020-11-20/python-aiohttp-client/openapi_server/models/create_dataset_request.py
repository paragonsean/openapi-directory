# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_dataset_request_dataset_source import CreateDatasetRequestDatasetSource
import re
from openapi_server import util


class CreateDatasetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_type: str=None, dataset_source: CreateDatasetRequestDatasetSource=None):
        """CreateDatasetRequest - a model defined in OpenAPI

        :param dataset_type: The dataset_type of this CreateDatasetRequest.
        :param dataset_source: The dataset_source of this CreateDatasetRequest.
        """
        self.openapi_types = {
            'dataset_type': str,
            'dataset_source': CreateDatasetRequestDatasetSource
        }

        self.attribute_map = {
            'dataset_type': 'DatasetType',
            'dataset_source': 'DatasetSource'
        }

        self._dataset_type = dataset_type
        self._dataset_source = dataset_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDatasetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataset_request of this CreateDatasetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_type(self):
        """Gets the dataset_type of this CreateDatasetRequest.

        The type of the dataset. Specify <code>train</code> for a training dataset. Specify <code>test</code> for a test dataset.

        :return: The dataset_type of this CreateDatasetRequest.
        :rtype: str
        """
        return self._dataset_type

    @dataset_type.setter
    def dataset_type(self, dataset_type):
        """Sets the dataset_type of this CreateDatasetRequest.

        The type of the dataset. Specify <code>train</code> for a training dataset. Specify <code>test</code> for a test dataset.

        :param dataset_type: The dataset_type of this CreateDatasetRequest.
        :type dataset_type: str
        """
        if dataset_type is None:
            raise ValueError("Invalid value for `dataset_type`, must not be `None`")
        if dataset_type is not None and len(dataset_type) > 10:
            raise ValueError("Invalid value for `dataset_type`, length must be less than or equal to `10`")
        if dataset_type is not None and len(dataset_type) < 1:
            raise ValueError("Invalid value for `dataset_type`, length must be greater than or equal to `1`")
        if dataset_type is not None and not re.search(r'train|test', dataset_type):
            raise ValueError("Invalid value for `dataset_type`, must be a follow pattern or equal to `/train|test/`")

        self._dataset_type = dataset_type

    @property
    def dataset_source(self):
        """Gets the dataset_source of this CreateDatasetRequest.


        :return: The dataset_source of this CreateDatasetRequest.
        :rtype: CreateDatasetRequestDatasetSource
        """
        return self._dataset_source

    @dataset_source.setter
    def dataset_source(self, dataset_source):
        """Sets the dataset_source of this CreateDatasetRequest.


        :param dataset_source: The dataset_source of this CreateDatasetRequest.
        :type dataset_source: CreateDatasetRequestDatasetSource
        """

        self._dataset_source = dataset_source
