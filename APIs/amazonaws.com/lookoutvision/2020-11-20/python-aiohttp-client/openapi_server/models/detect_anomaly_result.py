# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detect_anomaly_result_source import DetectAnomalyResultSource
from openapi_server import util


class DetectAnomalyResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source: DetectAnomalyResultSource=None, is_anomalous: bool=None, confidence: float=None, anomalies: List=None, anomaly_mask: str=None):
        """DetectAnomalyResult - a model defined in OpenAPI

        :param source: The source of this DetectAnomalyResult.
        :param is_anomalous: The is_anomalous of this DetectAnomalyResult.
        :param confidence: The confidence of this DetectAnomalyResult.
        :param anomalies: The anomalies of this DetectAnomalyResult.
        :param anomaly_mask: The anomaly_mask of this DetectAnomalyResult.
        """
        self.openapi_types = {
            'source': DetectAnomalyResultSource,
            'is_anomalous': bool,
            'confidence': float,
            'anomalies': List,
            'anomaly_mask': str
        }

        self.attribute_map = {
            'source': 'Source',
            'is_anomalous': 'IsAnomalous',
            'confidence': 'Confidence',
            'anomalies': 'Anomalies',
            'anomaly_mask': 'AnomalyMask'
        }

        self._source = source
        self._is_anomalous = is_anomalous
        self._confidence = confidence
        self._anomalies = anomalies
        self._anomaly_mask = anomaly_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectAnomalyResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectAnomalyResult of this DetectAnomalyResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source(self):
        """Gets the source of this DetectAnomalyResult.


        :return: The source of this DetectAnomalyResult.
        :rtype: DetectAnomalyResultSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DetectAnomalyResult.


        :param source: The source of this DetectAnomalyResult.
        :type source: DetectAnomalyResultSource
        """

        self._source = source

    @property
    def is_anomalous(self):
        """Gets the is_anomalous of this DetectAnomalyResult.


        :return: The is_anomalous of this DetectAnomalyResult.
        :rtype: bool
        """
        return self._is_anomalous

    @is_anomalous.setter
    def is_anomalous(self, is_anomalous):
        """Sets the is_anomalous of this DetectAnomalyResult.


        :param is_anomalous: The is_anomalous of this DetectAnomalyResult.
        :type is_anomalous: bool
        """

        self._is_anomalous = is_anomalous

    @property
    def confidence(self):
        """Gets the confidence of this DetectAnomalyResult.


        :return: The confidence of this DetectAnomalyResult.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this DetectAnomalyResult.


        :param confidence: The confidence of this DetectAnomalyResult.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def anomalies(self):
        """Gets the anomalies of this DetectAnomalyResult.


        :return: The anomalies of this DetectAnomalyResult.
        :rtype: List
        """
        return self._anomalies

    @anomalies.setter
    def anomalies(self, anomalies):
        """Sets the anomalies of this DetectAnomalyResult.


        :param anomalies: The anomalies of this DetectAnomalyResult.
        :type anomalies: List
        """

        self._anomalies = anomalies

    @property
    def anomaly_mask(self):
        """Gets the anomaly_mask of this DetectAnomalyResult.


        :return: The anomaly_mask of this DetectAnomalyResult.
        :rtype: str
        """
        return self._anomaly_mask

    @anomaly_mask.setter
    def anomaly_mask(self, anomaly_mask):
        """Sets the anomaly_mask of this DetectAnomalyResult.


        :param anomaly_mask: The anomaly_mask of this DetectAnomalyResult.
        :type anomaly_mask: str
        """

        self._anomaly_mask = anomaly_mask
