# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_model_request_output_config_s3_location import CreateModelRequestOutputConfigS3Location
from openapi_server import util


class OutputConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_location: CreateModelRequestOutputConfigS3Location=None):
        """OutputConfig - a model defined in OpenAPI

        :param s3_location: The s3_location of this OutputConfig.
        """
        self.openapi_types = {
            's3_location': CreateModelRequestOutputConfigS3Location
        }

        self.attribute_map = {
            's3_location': 'S3Location'
        }

        self._s3_location = s3_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputConfig of this OutputConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_location(self):
        """Gets the s3_location of this OutputConfig.


        :return: The s3_location of this OutputConfig.
        :rtype: CreateModelRequestOutputConfigS3Location
        """
        return self._s3_location

    @s3_location.setter
    def s3_location(self, s3_location):
        """Sets the s3_location of this OutputConfig.


        :param s3_location: The s3_location of this OutputConfig.
        :type s3_location: CreateModelRequestOutputConfigS3Location
        """
        if s3_location is None:
            raise ValueError("Invalid value for `s3_location`, must not be `None`")

        self._s3_location = s3_location
