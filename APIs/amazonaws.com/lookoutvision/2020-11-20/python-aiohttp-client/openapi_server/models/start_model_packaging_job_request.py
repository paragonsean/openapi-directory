# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_model_packaging_job_request_configuration import StartModelPackagingJobRequestConfiguration
import re
from openapi_server import util


class StartModelPackagingJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_version: str=None, job_name: str=None, configuration: StartModelPackagingJobRequestConfiguration=None, description: str=None):
        """StartModelPackagingJobRequest - a model defined in OpenAPI

        :param model_version: The model_version of this StartModelPackagingJobRequest.
        :param job_name: The job_name of this StartModelPackagingJobRequest.
        :param configuration: The configuration of this StartModelPackagingJobRequest.
        :param description: The description of this StartModelPackagingJobRequest.
        """
        self.openapi_types = {
            'model_version': str,
            'job_name': str,
            'configuration': StartModelPackagingJobRequestConfiguration,
            'description': str
        }

        self.attribute_map = {
            'model_version': 'ModelVersion',
            'job_name': 'JobName',
            'configuration': 'Configuration',
            'description': 'Description'
        }

        self._model_version = model_version
        self._job_name = job_name
        self._configuration = configuration
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartModelPackagingJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartModelPackagingJob_request of this StartModelPackagingJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_version(self):
        """Gets the model_version of this StartModelPackagingJobRequest.

         The version of the model within the project that you want to package. 

        :return: The model_version of this StartModelPackagingJobRequest.
        :rtype: str
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this StartModelPackagingJobRequest.

         The version of the model within the project that you want to package. 

        :param model_version: The model_version of this StartModelPackagingJobRequest.
        :type model_version: str
        """
        if model_version is None:
            raise ValueError("Invalid value for `model_version`, must not be `None`")
        if model_version is not None and len(model_version) > 10:
            raise ValueError("Invalid value for `model_version`, length must be less than or equal to `10`")
        if model_version is not None and len(model_version) < 1:
            raise ValueError("Invalid value for `model_version`, length must be greater than or equal to `1`")
        if model_version is not None and not re.search(r'([1-9][0-9]*|latest)', model_version):
            raise ValueError("Invalid value for `model_version`, must be a follow pattern or equal to `/([1-9][0-9]*|latest)/`")

        self._model_version = model_version

    @property
    def job_name(self):
        """Gets the job_name of this StartModelPackagingJobRequest.

        A name for the model packaging job. If you don't supply a value, the service creates a job name for you. 

        :return: The job_name of this StartModelPackagingJobRequest.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this StartModelPackagingJobRequest.

        A name for the model packaging job. If you don't supply a value, the service creates a job name for you. 

        :param job_name: The job_name of this StartModelPackagingJobRequest.
        :type job_name: str
        """
        if job_name is not None and len(job_name) > 64:
            raise ValueError("Invalid value for `job_name`, length must be less than or equal to `64`")
        if job_name is not None and len(job_name) < 1:
            raise ValueError("Invalid value for `job_name`, length must be greater than or equal to `1`")
        if job_name is not None and not re.search(r'[a-zA-Z0-9-]+', job_name):
            raise ValueError("Invalid value for `job_name`, must be a follow pattern or equal to `/[a-zA-Z0-9-]+/`")

        self._job_name = job_name

    @property
    def configuration(self):
        """Gets the configuration of this StartModelPackagingJobRequest.


        :return: The configuration of this StartModelPackagingJobRequest.
        :rtype: StartModelPackagingJobRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this StartModelPackagingJobRequest.


        :param configuration: The configuration of this StartModelPackagingJobRequest.
        :type configuration: StartModelPackagingJobRequestConfiguration
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def description(self):
        """Gets the description of this StartModelPackagingJobRequest.

        A description for the model packaging job. 

        :return: The description of this StartModelPackagingJobRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StartModelPackagingJobRequest.

        A description for the model packaging job. 

        :param description: The description of this StartModelPackagingJobRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")
        if description is not None and not re.search(r'[a-zA-Z0-9-_. ()\':,;?]+', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[a-zA-Z0-9-_. ()':,;?]+/`")

        self._description = description
