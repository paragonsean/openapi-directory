/*
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the pixels in an anomaly mask. For more information, see &lt;a&gt;Anomaly&lt;/a&gt;. &lt;code&gt;PixelAnomaly&lt;/code&gt; is only returned by image segmentation models.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:16.523404-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PixelAnomaly {
  public static final String SERIALIZED_NAME_TOTAL_PERCENTAGE_AREA = "TotalPercentageArea";
  @SerializedName(SERIALIZED_NAME_TOTAL_PERCENTAGE_AREA)
  private Float totalPercentageArea;

  public static final String SERIALIZED_NAME_COLOR = "Color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public PixelAnomaly() {
  }

  public PixelAnomaly totalPercentageArea(Float totalPercentageArea) {
    this.totalPercentageArea = totalPercentageArea;
    return this;
  }

  /**
   * Get totalPercentageArea
   * @return totalPercentageArea
   */
  @javax.annotation.Nullable
  public Float getTotalPercentageArea() {
    return totalPercentageArea;
  }

  public void setTotalPercentageArea(Float totalPercentageArea) {
    this.totalPercentageArea = totalPercentageArea;
  }


  public PixelAnomaly color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PixelAnomaly pixelAnomaly = (PixelAnomaly) o;
    return Objects.equals(this.totalPercentageArea, pixelAnomaly.totalPercentageArea) &&
        Objects.equals(this.color, pixelAnomaly.color);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalPercentageArea, color);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PixelAnomaly {\n");
    sb.append("    totalPercentageArea: ").append(toIndentedString(totalPercentageArea)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TotalPercentageArea");
    openapiFields.add("Color");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PixelAnomaly
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PixelAnomaly.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PixelAnomaly is not found in the empty JSON string", PixelAnomaly.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PixelAnomaly.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PixelAnomaly` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TotalPercentageArea`
      if (jsonObj.get("TotalPercentageArea") != null && !jsonObj.get("TotalPercentageArea").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("TotalPercentageArea"));
      }
      // validate the optional field `Color`
      if (jsonObj.get("Color") != null && !jsonObj.get("Color").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Color"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PixelAnomaly.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PixelAnomaly' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PixelAnomaly> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PixelAnomaly.class));

       return (TypeAdapter<T>) new TypeAdapter<PixelAnomaly>() {
           @Override
           public void write(JsonWriter out, PixelAnomaly value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PixelAnomaly read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PixelAnomaly given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PixelAnomaly
   * @throws IOException if the JSON string is invalid with respect to PixelAnomaly
   */
  public static PixelAnomaly fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PixelAnomaly.class);
  }

  /**
   * Convert an instance of PixelAnomaly to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

