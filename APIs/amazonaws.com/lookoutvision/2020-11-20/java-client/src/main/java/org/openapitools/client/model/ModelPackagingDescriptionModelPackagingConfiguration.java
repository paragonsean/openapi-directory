/*
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StartModelPackagingJobRequestConfigurationGreengrass;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelPackagingDescriptionModelPackagingConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:16.523404-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelPackagingDescriptionModelPackagingConfiguration {
  public static final String SERIALIZED_NAME_GREENGRASS = "Greengrass";
  @SerializedName(SERIALIZED_NAME_GREENGRASS)
  private StartModelPackagingJobRequestConfigurationGreengrass greengrass;

  public ModelPackagingDescriptionModelPackagingConfiguration() {
  }

  public ModelPackagingDescriptionModelPackagingConfiguration greengrass(StartModelPackagingJobRequestConfigurationGreengrass greengrass) {
    this.greengrass = greengrass;
    return this;
  }

  /**
   * Get greengrass
   * @return greengrass
   */
  @javax.annotation.Nonnull
  public StartModelPackagingJobRequestConfigurationGreengrass getGreengrass() {
    return greengrass;
  }

  public void setGreengrass(StartModelPackagingJobRequestConfigurationGreengrass greengrass) {
    this.greengrass = greengrass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelPackagingDescriptionModelPackagingConfiguration modelPackagingDescriptionModelPackagingConfiguration = (ModelPackagingDescriptionModelPackagingConfiguration) o;
    return Objects.equals(this.greengrass, modelPackagingDescriptionModelPackagingConfiguration.greengrass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(greengrass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelPackagingDescriptionModelPackagingConfiguration {\n");
    sb.append("    greengrass: ").append(toIndentedString(greengrass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Greengrass");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Greengrass");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelPackagingDescriptionModelPackagingConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelPackagingDescriptionModelPackagingConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelPackagingDescriptionModelPackagingConfiguration is not found in the empty JSON string", ModelPackagingDescriptionModelPackagingConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelPackagingDescriptionModelPackagingConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelPackagingDescriptionModelPackagingConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelPackagingDescriptionModelPackagingConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Greengrass`
      StartModelPackagingJobRequestConfigurationGreengrass.validateJsonElement(jsonObj.get("Greengrass"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelPackagingDescriptionModelPackagingConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelPackagingDescriptionModelPackagingConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelPackagingDescriptionModelPackagingConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelPackagingDescriptionModelPackagingConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelPackagingDescriptionModelPackagingConfiguration>() {
           @Override
           public void write(JsonWriter out, ModelPackagingDescriptionModelPackagingConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelPackagingDescriptionModelPackagingConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelPackagingDescriptionModelPackagingConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelPackagingDescriptionModelPackagingConfiguration
   * @throws IOException if the JSON string is invalid with respect to ModelPackagingDescriptionModelPackagingConfiguration
   */
  public static ModelPackagingDescriptionModelPackagingConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelPackagingDescriptionModelPackagingConfiguration.class);
  }

  /**
   * Convert an instance of ModelPackagingDescriptionModelPackagingConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

