/*
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Statistics about the images in a dataset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:16.523404-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatasetImageStats {
  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public static final String SERIALIZED_NAME_LABELED = "Labeled";
  @SerializedName(SERIALIZED_NAME_LABELED)
  private Integer labeled;

  public static final String SERIALIZED_NAME_NORMAL = "Normal";
  @SerializedName(SERIALIZED_NAME_NORMAL)
  private Integer normal;

  public static final String SERIALIZED_NAME_ANOMALY = "Anomaly";
  @SerializedName(SERIALIZED_NAME_ANOMALY)
  private Integer anomaly;

  public DatasetImageStats() {
  }

  public DatasetImageStats total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  public DatasetImageStats labeled(Integer labeled) {
    this.labeled = labeled;
    return this;
  }

  /**
   * Get labeled
   * @return labeled
   */
  @javax.annotation.Nullable
  public Integer getLabeled() {
    return labeled;
  }

  public void setLabeled(Integer labeled) {
    this.labeled = labeled;
  }


  public DatasetImageStats normal(Integer normal) {
    this.normal = normal;
    return this;
  }

  /**
   * Get normal
   * @return normal
   */
  @javax.annotation.Nullable
  public Integer getNormal() {
    return normal;
  }

  public void setNormal(Integer normal) {
    this.normal = normal;
  }


  public DatasetImageStats anomaly(Integer anomaly) {
    this.anomaly = anomaly;
    return this;
  }

  /**
   * Get anomaly
   * @return anomaly
   */
  @javax.annotation.Nullable
  public Integer getAnomaly() {
    return anomaly;
  }

  public void setAnomaly(Integer anomaly) {
    this.anomaly = anomaly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetImageStats datasetImageStats = (DatasetImageStats) o;
    return Objects.equals(this.total, datasetImageStats.total) &&
        Objects.equals(this.labeled, datasetImageStats.labeled) &&
        Objects.equals(this.normal, datasetImageStats.normal) &&
        Objects.equals(this.anomaly, datasetImageStats.anomaly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, labeled, normal, anomaly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetImageStats {\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    labeled: ").append(toIndentedString(labeled)).append("\n");
    sb.append("    normal: ").append(toIndentedString(normal)).append("\n");
    sb.append("    anomaly: ").append(toIndentedString(anomaly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Total");
    openapiFields.add("Labeled");
    openapiFields.add("Normal");
    openapiFields.add("Anomaly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatasetImageStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasetImageStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasetImageStats is not found in the empty JSON string", DatasetImageStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatasetImageStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasetImageStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Total`
      if (jsonObj.get("Total") != null && !jsonObj.get("Total").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Total"));
      }
      // validate the optional field `Labeled`
      if (jsonObj.get("Labeled") != null && !jsonObj.get("Labeled").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Labeled"));
      }
      // validate the optional field `Normal`
      if (jsonObj.get("Normal") != null && !jsonObj.get("Normal").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Normal"));
      }
      // validate the optional field `Anomaly`
      if (jsonObj.get("Anomaly") != null && !jsonObj.get("Anomaly").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Anomaly"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasetImageStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasetImageStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasetImageStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasetImageStats.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasetImageStats>() {
           @Override
           public void write(JsonWriter out, DatasetImageStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasetImageStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatasetImageStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatasetImageStats
   * @throws IOException if the JSON string is invalid with respect to DatasetImageStats
   */
  public static DatasetImageStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasetImageStats.class);
  }

  /**
   * Convert an instance of DatasetImageStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

