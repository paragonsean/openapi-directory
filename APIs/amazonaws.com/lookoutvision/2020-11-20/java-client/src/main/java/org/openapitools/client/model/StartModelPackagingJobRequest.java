/*
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StartModelPackagingJobRequestConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartModelPackagingJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:16.523404-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartModelPackagingJobRequest {
  public static final String SERIALIZED_NAME_MODEL_VERSION = "ModelVersion";
  @SerializedName(SERIALIZED_NAME_MODEL_VERSION)
  private String modelVersion;

  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_CONFIGURATION = "Configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private StartModelPackagingJobRequestConfiguration _configuration;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public StartModelPackagingJobRequest() {
  }

  public StartModelPackagingJobRequest modelVersion(String modelVersion) {
    this.modelVersion = modelVersion;
    return this;
  }

  /**
   *  The version of the model within the project that you want to package. 
   * @return modelVersion
   */
  @javax.annotation.Nonnull
  public String getModelVersion() {
    return modelVersion;
  }

  public void setModelVersion(String modelVersion) {
    this.modelVersion = modelVersion;
  }


  public StartModelPackagingJobRequest jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * A name for the model packaging job. If you don&#39;t supply a value, the service creates a job name for you. 
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public StartModelPackagingJobRequest _configuration(StartModelPackagingJobRequestConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nonnull
  public StartModelPackagingJobRequestConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(StartModelPackagingJobRequestConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public StartModelPackagingJobRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description for the model packaging job. 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartModelPackagingJobRequest startModelPackagingJobRequest = (StartModelPackagingJobRequest) o;
    return Objects.equals(this.modelVersion, startModelPackagingJobRequest.modelVersion) &&
        Objects.equals(this.jobName, startModelPackagingJobRequest.jobName) &&
        Objects.equals(this._configuration, startModelPackagingJobRequest._configuration) &&
        Objects.equals(this.description, startModelPackagingJobRequest.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelVersion, jobName, _configuration, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartModelPackagingJobRequest {\n");
    sb.append("    modelVersion: ").append(toIndentedString(modelVersion)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ModelVersion");
    openapiFields.add("JobName");
    openapiFields.add("Configuration");
    openapiFields.add("Description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ModelVersion");
    openapiRequiredFields.add("Configuration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartModelPackagingJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartModelPackagingJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartModelPackagingJobRequest is not found in the empty JSON string", StartModelPackagingJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartModelPackagingJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartModelPackagingJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartModelPackagingJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ModelVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ModelVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ModelVersion").toString()));
      }
      if ((jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) && !jsonObj.get("JobName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobName").toString()));
      }
      // validate the required field `Configuration`
      StartModelPackagingJobRequestConfiguration.validateJsonElement(jsonObj.get("Configuration"));
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartModelPackagingJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartModelPackagingJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartModelPackagingJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartModelPackagingJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartModelPackagingJobRequest>() {
           @Override
           public void write(JsonWriter out, StartModelPackagingJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartModelPackagingJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartModelPackagingJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartModelPackagingJobRequest
   * @throws IOException if the JSON string is invalid with respect to StartModelPackagingJobRequest
   */
  public static StartModelPackagingJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartModelPackagingJobRequest.class);
  }

  /**
   * Convert an instance of StartModelPackagingJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

