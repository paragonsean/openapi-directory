/*
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets TargetPlatformAccelerator
 */
@JsonAdapter(TargetPlatformAccelerator.Adapter.class)
public enum TargetPlatformAccelerator {
  
  NVIDIA("NVIDIA");

  private String value;

  TargetPlatformAccelerator(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TargetPlatformAccelerator fromValue(String value) {
    for (TargetPlatformAccelerator b : TargetPlatformAccelerator.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TargetPlatformAccelerator> {
    @Override
    public void write(final JsonWriter jsonWriter, final TargetPlatformAccelerator enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TargetPlatformAccelerator read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TargetPlatformAccelerator.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    TargetPlatformAccelerator.fromValue(value);
  }
}

