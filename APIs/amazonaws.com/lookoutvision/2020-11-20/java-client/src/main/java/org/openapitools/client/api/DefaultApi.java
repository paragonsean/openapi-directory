/*
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateDatasetRequest;
import org.openapitools.client.model.CreateDatasetResponse;
import org.openapitools.client.model.CreateModelRequest;
import org.openapitools.client.model.CreateModelResponse;
import org.openapitools.client.model.CreateProjectRequest;
import org.openapitools.client.model.CreateProjectResponse;
import org.openapitools.client.model.DeleteModelResponse;
import org.openapitools.client.model.DeleteProjectResponse;
import org.openapitools.client.model.DescribeDatasetResponse;
import org.openapitools.client.model.DescribeModelPackagingJobResponse;
import org.openapitools.client.model.DescribeModelResponse;
import org.openapitools.client.model.DescribeProjectResponse;
import org.openapitools.client.model.DetectAnomaliesRequest;
import org.openapitools.client.model.DetectAnomaliesResponse;
import org.openapitools.client.model.ListDatasetEntriesResponse;
import org.openapitools.client.model.ListModelPackagingJobsResponse;
import org.openapitools.client.model.ListModelsResponse;
import org.openapitools.client.model.ListProjectsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.StartModelPackagingJobRequest;
import org.openapitools.client.model.StartModelPackagingJobResponse;
import org.openapitools.client.model.StartModelRequest;
import org.openapitools.client.model.StartModelResponse;
import org.openapitools.client.model.StopModelResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateDatasetEntriesRequest;
import org.openapitools.client.model.UpdateDatasetEntriesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDataset
     * @param projectName The name of the project in which you want to create a dataset. (required)
     * @param createDatasetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;CreateDataset&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;CreateDataset&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;CreateDataset&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;CreateDataset&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasetCall(String projectName, CreateDatasetRequest createDatasetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDatasetRequest;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/datasets"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmznClientToken != null) {
            localVarHeaderParams.put("X-Amzn-Client-Token", localVarApiClient.parameterToString(xAmznClientToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDatasetValidateBeforeCall(String projectName, CreateDatasetRequest createDatasetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling createDataset(Async)");
        }

        // verify the required parameter 'createDatasetRequest' is set
        if (createDatasetRequest == null) {
            throw new ApiException("Missing the required parameter 'createDatasetRequest' when calling createDataset(Async)");
        }

        return createDatasetCall(projectName, createDatasetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new dataset in an Amazon Lookout for Vision project. &lt;code&gt;CreateDataset&lt;/code&gt; can create a training or a test dataset from a valid dataset source (&lt;code&gt;DatasetSource&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you want a single dataset project, specify &lt;code&gt;train&lt;/code&gt; for the value of &lt;code&gt;DatasetType&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To have a project with separate training and test datasets, call &lt;code&gt;CreateDataset&lt;/code&gt; twice. On the first call, specify &lt;code&gt;train&lt;/code&gt; for the value of &lt;code&gt;DatasetType&lt;/code&gt;. On the second call, specify &lt;code&gt;test&lt;/code&gt; for the value of &lt;code&gt;DatasetType&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:CreateDataset&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project in which you want to create a dataset. (required)
     * @param createDatasetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;CreateDataset&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;CreateDataset&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;CreateDataset&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;CreateDataset&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @return CreateDatasetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateDatasetResponse createDataset(String projectName, CreateDatasetRequest createDatasetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        ApiResponse<CreateDatasetResponse> localVarResp = createDatasetWithHttpInfo(projectName, createDatasetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new dataset in an Amazon Lookout for Vision project. &lt;code&gt;CreateDataset&lt;/code&gt; can create a training or a test dataset from a valid dataset source (&lt;code&gt;DatasetSource&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you want a single dataset project, specify &lt;code&gt;train&lt;/code&gt; for the value of &lt;code&gt;DatasetType&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To have a project with separate training and test datasets, call &lt;code&gt;CreateDataset&lt;/code&gt; twice. On the first call, specify &lt;code&gt;train&lt;/code&gt; for the value of &lt;code&gt;DatasetType&lt;/code&gt;. On the second call, specify &lt;code&gt;test&lt;/code&gt; for the value of &lt;code&gt;DatasetType&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:CreateDataset&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project in which you want to create a dataset. (required)
     * @param createDatasetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;CreateDataset&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;CreateDataset&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;CreateDataset&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;CreateDataset&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;CreateDatasetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDatasetResponse> createDatasetWithHttpInfo(String projectName, CreateDatasetRequest createDatasetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        okhttp3.Call localVarCall = createDatasetValidateBeforeCall(projectName, createDatasetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, null);
        Type localVarReturnType = new TypeToken<CreateDatasetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new dataset in an Amazon Lookout for Vision project. &lt;code&gt;CreateDataset&lt;/code&gt; can create a training or a test dataset from a valid dataset source (&lt;code&gt;DatasetSource&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you want a single dataset project, specify &lt;code&gt;train&lt;/code&gt; for the value of &lt;code&gt;DatasetType&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To have a project with separate training and test datasets, call &lt;code&gt;CreateDataset&lt;/code&gt; twice. On the first call, specify &lt;code&gt;train&lt;/code&gt; for the value of &lt;code&gt;DatasetType&lt;/code&gt;. On the second call, specify &lt;code&gt;test&lt;/code&gt; for the value of &lt;code&gt;DatasetType&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:CreateDataset&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project in which you want to create a dataset. (required)
     * @param createDatasetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;CreateDataset&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;CreateDataset&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;CreateDataset&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;CreateDataset&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDatasetAsync(String projectName, CreateDatasetRequest createDatasetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback<CreateDatasetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDatasetValidateBeforeCall(projectName, createDatasetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);
        Type localVarReturnType = new TypeToken<CreateDatasetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createModel
     * @param projectName The name of the project in which you want to create a model version. (required)
     * @param createModelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;CreateModel&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;CreateModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;CreateModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from starting multiple training jobs. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;CreateModel&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createModelCall(String projectName, CreateModelRequest createModelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createModelRequest;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/models"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmznClientToken != null) {
            localVarHeaderParams.put("X-Amzn-Client-Token", localVarApiClient.parameterToString(xAmznClientToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createModelValidateBeforeCall(String projectName, CreateModelRequest createModelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling createModel(Async)");
        }

        // verify the required parameter 'createModelRequest' is set
        if (createModelRequest == null) {
            throw new ApiException("Missing the required parameter 'createModelRequest' when calling createModel(Async)");
        }

        return createModelCall(projectName, createModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new version of a model within an an Amazon Lookout for Vision project. &lt;code&gt;CreateModel&lt;/code&gt; is an asynchronous operation in which Amazon Lookout for Vision trains, tests, and evaluates a new version of a model. &lt;/p&gt; &lt;p&gt;To get the current status, check the &lt;code&gt;Status&lt;/code&gt; field returned in the response from &lt;a&gt;DescribeModel&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the project has a single dataset, Amazon Lookout for Vision internally splits the dataset to create a training and a test dataset. If the project has a training and a test dataset, Lookout for Vision uses the respective datasets to train and test the model. &lt;/p&gt; &lt;p&gt;After training completes, the evaluation metrics are stored at the location specified in &lt;code&gt;OutputConfig&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:CreateModel&lt;/code&gt; operation. If you want to tag your model, you also require permission to the &lt;code&gt;lookoutvision:TagResource&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project in which you want to create a model version. (required)
     * @param createModelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;CreateModel&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;CreateModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;CreateModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from starting multiple training jobs. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;CreateModel&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @return CreateModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateModelResponse createModel(String projectName, CreateModelRequest createModelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        ApiResponse<CreateModelResponse> localVarResp = createModelWithHttpInfo(projectName, createModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new version of a model within an an Amazon Lookout for Vision project. &lt;code&gt;CreateModel&lt;/code&gt; is an asynchronous operation in which Amazon Lookout for Vision trains, tests, and evaluates a new version of a model. &lt;/p&gt; &lt;p&gt;To get the current status, check the &lt;code&gt;Status&lt;/code&gt; field returned in the response from &lt;a&gt;DescribeModel&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the project has a single dataset, Amazon Lookout for Vision internally splits the dataset to create a training and a test dataset. If the project has a training and a test dataset, Lookout for Vision uses the respective datasets to train and test the model. &lt;/p&gt; &lt;p&gt;After training completes, the evaluation metrics are stored at the location specified in &lt;code&gt;OutputConfig&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:CreateModel&lt;/code&gt; operation. If you want to tag your model, you also require permission to the &lt;code&gt;lookoutvision:TagResource&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project in which you want to create a model version. (required)
     * @param createModelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;CreateModel&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;CreateModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;CreateModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from starting multiple training jobs. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;CreateModel&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;CreateModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateModelResponse> createModelWithHttpInfo(String projectName, CreateModelRequest createModelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        okhttp3.Call localVarCall = createModelValidateBeforeCall(projectName, createModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, null);
        Type localVarReturnType = new TypeToken<CreateModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new version of a model within an an Amazon Lookout for Vision project. &lt;code&gt;CreateModel&lt;/code&gt; is an asynchronous operation in which Amazon Lookout for Vision trains, tests, and evaluates a new version of a model. &lt;/p&gt; &lt;p&gt;To get the current status, check the &lt;code&gt;Status&lt;/code&gt; field returned in the response from &lt;a&gt;DescribeModel&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the project has a single dataset, Amazon Lookout for Vision internally splits the dataset to create a training and a test dataset. If the project has a training and a test dataset, Lookout for Vision uses the respective datasets to train and test the model. &lt;/p&gt; &lt;p&gt;After training completes, the evaluation metrics are stored at the location specified in &lt;code&gt;OutputConfig&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:CreateModel&lt;/code&gt; operation. If you want to tag your model, you also require permission to the &lt;code&gt;lookoutvision:TagResource&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project in which you want to create a model version. (required)
     * @param createModelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;CreateModel&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;CreateModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;CreateModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from starting multiple training jobs. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;CreateModel&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createModelAsync(String projectName, CreateModelRequest createModelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback<CreateModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createModelValidateBeforeCall(projectName, createModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);
        Type localVarReturnType = new TypeToken<CreateModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProject
     * @param createProjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;CreateProject&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;CreateProject&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;CreateProject&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple project creation requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;CreateProject&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectCall(CreateProjectRequest createProjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProjectRequest;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmznClientToken != null) {
            localVarHeaderParams.put("X-Amzn-Client-Token", localVarApiClient.parameterToString(xAmznClientToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectValidateBeforeCall(CreateProjectRequest createProjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createProjectRequest' is set
        if (createProjectRequest == null) {
            throw new ApiException("Missing the required parameter 'createProjectRequest' when calling createProject(Async)");
        }

        return createProjectCall(createProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an empty Amazon Lookout for Vision project. After you create the project, add a dataset by calling &lt;a&gt;CreateDataset&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:CreateProject&lt;/code&gt; operation.&lt;/p&gt;
     * @param createProjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;CreateProject&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;CreateProject&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;CreateProject&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple project creation requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;CreateProject&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @return CreateProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateProjectResponse createProject(CreateProjectRequest createProjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        ApiResponse<CreateProjectResponse> localVarResp = createProjectWithHttpInfo(createProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an empty Amazon Lookout for Vision project. After you create the project, add a dataset by calling &lt;a&gt;CreateDataset&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:CreateProject&lt;/code&gt; operation.&lt;/p&gt;
     * @param createProjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;CreateProject&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;CreateProject&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;CreateProject&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple project creation requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;CreateProject&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;CreateProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateProjectResponse> createProjectWithHttpInfo(CreateProjectRequest createProjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        okhttp3.Call localVarCall = createProjectValidateBeforeCall(createProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, null);
        Type localVarReturnType = new TypeToken<CreateProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an empty Amazon Lookout for Vision project. After you create the project, add a dataset by calling &lt;a&gt;CreateDataset&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:CreateProject&lt;/code&gt; operation.&lt;/p&gt;
     * @param createProjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;CreateProject&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;CreateProject&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;CreateProject&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple project creation requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;CreateProject&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProjectAsync(CreateProjectRequest createProjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback<CreateProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectValidateBeforeCall(createProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);
        Type localVarReturnType = new TypeToken<CreateProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDataset
     * @param projectName The name of the project that contains the dataset that you want to delete. (required)
     * @param datasetType The type of the dataset to delete. Specify &lt;code&gt;train&lt;/code&gt; to delete the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to delete the test dataset. To delete the dataset in a single dataset project, specify &lt;code&gt;train&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;DeleteDataset&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;DeleteDataset&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;DeleteDataset&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple deletetion requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;DeleteDataset&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetCall(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/datasets/{datasetType}"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "datasetType" + "}", localVarApiClient.escapeString(datasetType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmznClientToken != null) {
            localVarHeaderParams.put("X-Amzn-Client-Token", localVarApiClient.parameterToString(xAmznClientToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDatasetValidateBeforeCall(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling deleteDataset(Async)");
        }

        // verify the required parameter 'datasetType' is set
        if (datasetType == null) {
            throw new ApiException("Missing the required parameter 'datasetType' when calling deleteDataset(Async)");
        }

        return deleteDatasetCall(projectName, datasetType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an existing Amazon Lookout for Vision &lt;code&gt;dataset&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If your the project has a single dataset, you must create a new dataset before you can create a model.&lt;/p&gt; &lt;p&gt;If you project has a training dataset and a test dataset consider the following. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you delete the test dataset, your project reverts to a single dataset project. If you then train the model, Amazon Lookout for Vision internally splits the remaining dataset into a training and test dataset.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you delete the training dataset, you must create a training dataset before you can create a model.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DeleteDataset&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the dataset that you want to delete. (required)
     * @param datasetType The type of the dataset to delete. Specify &lt;code&gt;train&lt;/code&gt; to delete the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to delete the test dataset. To delete the dataset in a single dataset project, specify &lt;code&gt;train&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;DeleteDataset&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;DeleteDataset&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;DeleteDataset&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple deletetion requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;DeleteDataset&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteDataset(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        ApiResponse<Object> localVarResp = deleteDatasetWithHttpInfo(projectName, datasetType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an existing Amazon Lookout for Vision &lt;code&gt;dataset&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If your the project has a single dataset, you must create a new dataset before you can create a model.&lt;/p&gt; &lt;p&gt;If you project has a training dataset and a test dataset consider the following. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you delete the test dataset, your project reverts to a single dataset project. If you then train the model, Amazon Lookout for Vision internally splits the remaining dataset into a training and test dataset.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you delete the training dataset, you must create a training dataset before you can create a model.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DeleteDataset&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the dataset that you want to delete. (required)
     * @param datasetType The type of the dataset to delete. Specify &lt;code&gt;train&lt;/code&gt; to delete the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to delete the test dataset. To delete the dataset in a single dataset project, specify &lt;code&gt;train&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;DeleteDataset&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;DeleteDataset&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;DeleteDataset&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple deletetion requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;DeleteDataset&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteDatasetWithHttpInfo(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        okhttp3.Call localVarCall = deleteDatasetValidateBeforeCall(projectName, datasetType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an existing Amazon Lookout for Vision &lt;code&gt;dataset&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If your the project has a single dataset, you must create a new dataset before you can create a model.&lt;/p&gt; &lt;p&gt;If you project has a training dataset and a test dataset consider the following. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you delete the test dataset, your project reverts to a single dataset project. If you then train the model, Amazon Lookout for Vision internally splits the remaining dataset into a training and test dataset.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you delete the training dataset, you must create a training dataset before you can create a model.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DeleteDataset&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the dataset that you want to delete. (required)
     * @param datasetType The type of the dataset to delete. Specify &lt;code&gt;train&lt;/code&gt; to delete the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to delete the test dataset. To delete the dataset in a single dataset project, specify &lt;code&gt;train&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;DeleteDataset&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;DeleteDataset&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;DeleteDataset&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple deletetion requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;DeleteDataset&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDatasetAsync(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDatasetValidateBeforeCall(projectName, datasetType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteModel
     * @param projectName The name of the project that contains the model that you want to delete. (required)
     * @param modelVersion The version of the model that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;DeleteModel&lt;/code&gt; completes only once. You choose the value to pass. For example, an issue might prevent you from getting a response from &lt;code&gt;DeleteModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;DeleteModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for ClientToken, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple model deletion requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;DeleteModel&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteModelCall(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/models/{modelVersion}"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "modelVersion" + "}", localVarApiClient.escapeString(modelVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmznClientToken != null) {
            localVarHeaderParams.put("X-Amzn-Client-Token", localVarApiClient.parameterToString(xAmznClientToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteModelValidateBeforeCall(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling deleteModel(Async)");
        }

        // verify the required parameter 'modelVersion' is set
        if (modelVersion == null) {
            throw new ApiException("Missing the required parameter 'modelVersion' when calling deleteModel(Async)");
        }

        return deleteModelCall(projectName, modelVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon Lookout for Vision model. You can&#39;t delete a running model. To stop a running model, use the &lt;a&gt;StopModel&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;It might take a few seconds to delete a model. To determine if a model has been deleted, call &lt;a&gt;ListModels&lt;/a&gt; and check if the version of the model (&lt;code&gt;ModelVersion&lt;/code&gt;) is in the &lt;code&gt;Models&lt;/code&gt; array. &lt;/p&gt; &lt;p/&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DeleteModel&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model that you want to delete. (required)
     * @param modelVersion The version of the model that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;DeleteModel&lt;/code&gt; completes only once. You choose the value to pass. For example, an issue might prevent you from getting a response from &lt;code&gt;DeleteModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;DeleteModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for ClientToken, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple model deletion requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;DeleteModel&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @return DeleteModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteModelResponse deleteModel(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        ApiResponse<DeleteModelResponse> localVarResp = deleteModelWithHttpInfo(projectName, modelVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon Lookout for Vision model. You can&#39;t delete a running model. To stop a running model, use the &lt;a&gt;StopModel&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;It might take a few seconds to delete a model. To determine if a model has been deleted, call &lt;a&gt;ListModels&lt;/a&gt; and check if the version of the model (&lt;code&gt;ModelVersion&lt;/code&gt;) is in the &lt;code&gt;Models&lt;/code&gt; array. &lt;/p&gt; &lt;p/&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DeleteModel&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model that you want to delete. (required)
     * @param modelVersion The version of the model that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;DeleteModel&lt;/code&gt; completes only once. You choose the value to pass. For example, an issue might prevent you from getting a response from &lt;code&gt;DeleteModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;DeleteModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for ClientToken, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple model deletion requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;DeleteModel&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;DeleteModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteModelResponse> deleteModelWithHttpInfo(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        okhttp3.Call localVarCall = deleteModelValidateBeforeCall(projectName, modelVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, null);
        Type localVarReturnType = new TypeToken<DeleteModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an Amazon Lookout for Vision model. You can&#39;t delete a running model. To stop a running model, use the &lt;a&gt;StopModel&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;It might take a few seconds to delete a model. To determine if a model has been deleted, call &lt;a&gt;ListModels&lt;/a&gt; and check if the version of the model (&lt;code&gt;ModelVersion&lt;/code&gt;) is in the &lt;code&gt;Models&lt;/code&gt; array. &lt;/p&gt; &lt;p/&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DeleteModel&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model that you want to delete. (required)
     * @param modelVersion The version of the model that you want to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;DeleteModel&lt;/code&gt; completes only once. You choose the value to pass. For example, an issue might prevent you from getting a response from &lt;code&gt;DeleteModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;DeleteModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for ClientToken, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple model deletion requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;DeleteModel&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteModelAsync(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback<DeleteModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteModelValidateBeforeCall(projectName, modelVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);
        Type localVarReturnType = new TypeToken<DeleteModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProject
     * @param projectName The name of the project to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;DeleteProject&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;DeleteProject&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;DeleteProject&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple project deletion requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;DeleteProject&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectCall(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmznClientToken != null) {
            localVarHeaderParams.put("X-Amzn-Client-Token", localVarApiClient.parameterToString(xAmznClientToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectValidateBeforeCall(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling deleteProject(Async)");
        }

        return deleteProjectCall(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon Lookout for Vision project.&lt;/p&gt; &lt;p&gt;To delete a project, you must first delete each version of the model associated with the project. To delete a model use the &lt;a&gt;DeleteModel&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;You also have to delete the dataset(s) associated with the model. For more information, see &lt;a&gt;DeleteDataset&lt;/a&gt;. The images referenced by the training and test datasets aren&#39;t deleted. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DeleteProject&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;DeleteProject&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;DeleteProject&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;DeleteProject&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple project deletion requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;DeleteProject&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @return DeleteProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteProjectResponse deleteProject(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        ApiResponse<DeleteProjectResponse> localVarResp = deleteProjectWithHttpInfo(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an Amazon Lookout for Vision project.&lt;/p&gt; &lt;p&gt;To delete a project, you must first delete each version of the model associated with the project. To delete a model use the &lt;a&gt;DeleteModel&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;You also have to delete the dataset(s) associated with the model. For more information, see &lt;a&gt;DeleteDataset&lt;/a&gt;. The images referenced by the training and test datasets aren&#39;t deleted. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DeleteProject&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;DeleteProject&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;DeleteProject&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;DeleteProject&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple project deletion requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;DeleteProject&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;DeleteProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteProjectResponse> deleteProjectWithHttpInfo(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, null);
        Type localVarReturnType = new TypeToken<DeleteProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an Amazon Lookout for Vision project.&lt;/p&gt; &lt;p&gt;To delete a project, you must first delete each version of the model associated with the project. To delete a model use the &lt;a&gt;DeleteModel&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;You also have to delete the dataset(s) associated with the model. For more information, see &lt;a&gt;DeleteDataset&lt;/a&gt;. The images referenced by the training and test datasets aren&#39;t deleted. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DeleteProject&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;DeleteProject&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;DeleteProject&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;DeleteProject&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple project deletion requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;DeleteProject&lt;/code&gt;. An idempotency token is active for 8 hours.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectAsync(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback<DeleteProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);
        Type localVarReturnType = new TypeToken<DeleteProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeDataset
     * @param projectName The name of the project that contains the dataset that you want to describe. (required)
     * @param datasetType The type of the dataset to describe. Specify &lt;code&gt;train&lt;/code&gt; to describe the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to describe the test dataset. If you have a single dataset project, specify &lt;code&gt;train&lt;/code&gt;  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeDatasetCall(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/datasets/{datasetType}"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "datasetType" + "}", localVarApiClient.escapeString(datasetType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeDatasetValidateBeforeCall(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling describeDataset(Async)");
        }

        // verify the required parameter 'datasetType' is set
        if (datasetType == null) {
            throw new ApiException("Missing the required parameter 'datasetType' when calling describeDataset(Async)");
        }

        return describeDatasetCall(projectName, datasetType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describe an Amazon Lookout for Vision dataset.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DescribeDataset&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the dataset that you want to describe. (required)
     * @param datasetType The type of the dataset to describe. Specify &lt;code&gt;train&lt;/code&gt; to describe the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to describe the test dataset. If you have a single dataset project, specify &lt;code&gt;train&lt;/code&gt;  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeDatasetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeDatasetResponse describeDataset(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeDatasetResponse> localVarResp = describeDatasetWithHttpInfo(projectName, datasetType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describe an Amazon Lookout for Vision dataset.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DescribeDataset&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the dataset that you want to describe. (required)
     * @param datasetType The type of the dataset to describe. Specify &lt;code&gt;train&lt;/code&gt; to describe the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to describe the test dataset. If you have a single dataset project, specify &lt;code&gt;train&lt;/code&gt;  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeDatasetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeDatasetResponse> describeDatasetWithHttpInfo(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeDatasetValidateBeforeCall(projectName, datasetType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeDatasetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describe an Amazon Lookout for Vision dataset.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DescribeDataset&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the dataset that you want to describe. (required)
     * @param datasetType The type of the dataset to describe. Specify &lt;code&gt;train&lt;/code&gt; to describe the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to describe the test dataset. If you have a single dataset project, specify &lt;code&gt;train&lt;/code&gt;  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeDatasetAsync(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeDatasetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeDatasetValidateBeforeCall(projectName, datasetType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeDatasetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeModel
     * @param projectName The project that contains the version of a model that you want to describe. (required)
     * @param modelVersion The version of the model that you want to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeModelCall(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/models/{modelVersion}"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "modelVersion" + "}", localVarApiClient.escapeString(modelVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeModelValidateBeforeCall(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling describeModel(Async)");
        }

        // verify the required parameter 'modelVersion' is set
        if (modelVersion == null) {
            throw new ApiException("Missing the required parameter 'modelVersion' when calling describeModel(Async)");
        }

        return describeModelCall(projectName, modelVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes a version of an Amazon Lookout for Vision model.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DescribeModel&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The project that contains the version of a model that you want to describe. (required)
     * @param modelVersion The version of the model that you want to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeModelResponse describeModel(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeModelResponse> localVarResp = describeModelWithHttpInfo(projectName, modelVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes a version of an Amazon Lookout for Vision model.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DescribeModel&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The project that contains the version of a model that you want to describe. (required)
     * @param modelVersion The version of the model that you want to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeModelResponse> describeModelWithHttpInfo(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeModelValidateBeforeCall(projectName, modelVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes a version of an Amazon Lookout for Vision model.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DescribeModel&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The project that contains the version of a model that you want to describe. (required)
     * @param modelVersion The version of the model that you want to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeModelAsync(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeModelValidateBeforeCall(projectName, modelVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeModelPackagingJob
     * @param projectName The name of the project that contains the model packaging job that you want to describe.  (required)
     * @param jobName The job name for the model packaging job.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeModelPackagingJobCall(String projectName, String jobName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/modelpackagingjobs/{jobName}"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeModelPackagingJobValidateBeforeCall(String projectName, String jobName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling describeModelPackagingJob(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling describeModelPackagingJob(Async)");
        }

        return describeModelPackagingJobCall(projectName, jobName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes an Amazon Lookout for Vision model packaging job. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DescribeModelPackagingJob&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;i&gt;Using your Amazon Lookout for Vision model on an edge device&lt;/i&gt; in the Amazon Lookout for Vision Developer Guide. &lt;/p&gt;
     * @param projectName The name of the project that contains the model packaging job that you want to describe.  (required)
     * @param jobName The job name for the model packaging job.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeModelPackagingJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeModelPackagingJobResponse describeModelPackagingJob(String projectName, String jobName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeModelPackagingJobResponse> localVarResp = describeModelPackagingJobWithHttpInfo(projectName, jobName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes an Amazon Lookout for Vision model packaging job. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DescribeModelPackagingJob&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;i&gt;Using your Amazon Lookout for Vision model on an edge device&lt;/i&gt; in the Amazon Lookout for Vision Developer Guide. &lt;/p&gt;
     * @param projectName The name of the project that contains the model packaging job that you want to describe.  (required)
     * @param jobName The job name for the model packaging job.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeModelPackagingJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeModelPackagingJobResponse> describeModelPackagingJobWithHttpInfo(String projectName, String jobName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeModelPackagingJobValidateBeforeCall(projectName, jobName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeModelPackagingJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes an Amazon Lookout for Vision model packaging job. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DescribeModelPackagingJob&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;i&gt;Using your Amazon Lookout for Vision model on an edge device&lt;/i&gt; in the Amazon Lookout for Vision Developer Guide. &lt;/p&gt;
     * @param projectName The name of the project that contains the model packaging job that you want to describe.  (required)
     * @param jobName The job name for the model packaging job.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeModelPackagingJobAsync(String projectName, String jobName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeModelPackagingJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeModelPackagingJobValidateBeforeCall(projectName, jobName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeModelPackagingJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeProject
     * @param projectName The name of the project that you want to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeProjectCall(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeProjectValidateBeforeCall(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling describeProject(Async)");
        }

        return describeProjectCall(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes an Amazon Lookout for Vision project.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DescribeProject&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that you want to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeProjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeProjectResponse describeProject(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeProjectResponse> localVarResp = describeProjectWithHttpInfo(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes an Amazon Lookout for Vision project.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DescribeProject&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that you want to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeProjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeProjectResponse> describeProjectWithHttpInfo(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeProjectValidateBeforeCall(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes an Amazon Lookout for Vision project.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DescribeProject&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that you want to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeProjectAsync(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeProjectValidateBeforeCall(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detectAnomalies
     * @param projectName The name of the project that contains the model version that you want to use. (required)
     * @param modelVersion The version of the model that you want to use. (required)
     * @param contentType The type of the image passed in &lt;code&gt;Body&lt;/code&gt;. Valid values are &lt;code&gt;image/png&lt;/code&gt; (PNG format images) and &lt;code&gt;image/jpeg&lt;/code&gt; (JPG format images).  (required)
     * @param detectAnomaliesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectAnomaliesCall(String projectName, String modelVersion, String contentType, DetectAnomaliesRequest detectAnomaliesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detectAnomaliesRequest;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/models/{modelVersion}/detect#Content-Type"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "modelVersion" + "}", localVarApiClient.escapeString(modelVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectAnomaliesValidateBeforeCall(String projectName, String modelVersion, String contentType, DetectAnomaliesRequest detectAnomaliesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling detectAnomalies(Async)");
        }

        // verify the required parameter 'modelVersion' is set
        if (modelVersion == null) {
            throw new ApiException("Missing the required parameter 'modelVersion' when calling detectAnomalies(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling detectAnomalies(Async)");
        }

        // verify the required parameter 'detectAnomaliesRequest' is set
        if (detectAnomaliesRequest == null) {
            throw new ApiException("Missing the required parameter 'detectAnomaliesRequest' when calling detectAnomalies(Async)");
        }

        return detectAnomaliesCall(projectName, modelVersion, contentType, detectAnomaliesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Detects anomalies in an image that you supply. &lt;/p&gt; &lt;p&gt;The response from &lt;code&gt;DetectAnomalies&lt;/code&gt; includes a boolean prediction that the image contains one or more anomalies and a confidence value for the prediction. If the model is an image segmentation model, the response also includes segmentation information for each type of anomaly found in the image.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Before calling &lt;code&gt;DetectAnomalies&lt;/code&gt;, you must first start your model with the &lt;a&gt;StartModel&lt;/a&gt; operation. You are charged for the amount of time, in minutes, that a model runs and for the number of anomaly detection units that your model uses. If you are not using a model, use the &lt;a&gt;StopModel&lt;/a&gt; operation to stop your model. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;i&gt;Detecting anomalies in an image&lt;/i&gt; in the Amazon Lookout for Vision developer guide.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DetectAnomalies&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model version that you want to use. (required)
     * @param modelVersion The version of the model that you want to use. (required)
     * @param contentType The type of the image passed in &lt;code&gt;Body&lt;/code&gt;. Valid values are &lt;code&gt;image/png&lt;/code&gt; (PNG format images) and &lt;code&gt;image/jpeg&lt;/code&gt; (JPG format images).  (required)
     * @param detectAnomaliesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DetectAnomaliesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public DetectAnomaliesResponse detectAnomalies(String projectName, String modelVersion, String contentType, DetectAnomaliesRequest detectAnomaliesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DetectAnomaliesResponse> localVarResp = detectAnomaliesWithHttpInfo(projectName, modelVersion, contentType, detectAnomaliesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Detects anomalies in an image that you supply. &lt;/p&gt; &lt;p&gt;The response from &lt;code&gt;DetectAnomalies&lt;/code&gt; includes a boolean prediction that the image contains one or more anomalies and a confidence value for the prediction. If the model is an image segmentation model, the response also includes segmentation information for each type of anomaly found in the image.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Before calling &lt;code&gt;DetectAnomalies&lt;/code&gt;, you must first start your model with the &lt;a&gt;StartModel&lt;/a&gt; operation. You are charged for the amount of time, in minutes, that a model runs and for the number of anomaly detection units that your model uses. If you are not using a model, use the &lt;a&gt;StopModel&lt;/a&gt; operation to stop your model. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;i&gt;Detecting anomalies in an image&lt;/i&gt; in the Amazon Lookout for Vision developer guide.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DetectAnomalies&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model version that you want to use. (required)
     * @param modelVersion The version of the model that you want to use. (required)
     * @param contentType The type of the image passed in &lt;code&gt;Body&lt;/code&gt;. Valid values are &lt;code&gt;image/png&lt;/code&gt; (PNG format images) and &lt;code&gt;image/jpeg&lt;/code&gt; (JPG format images).  (required)
     * @param detectAnomaliesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DetectAnomaliesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectAnomaliesResponse> detectAnomaliesWithHttpInfo(String projectName, String modelVersion, String contentType, DetectAnomaliesRequest detectAnomaliesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = detectAnomaliesValidateBeforeCall(projectName, modelVersion, contentType, detectAnomaliesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DetectAnomaliesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Detects anomalies in an image that you supply. &lt;/p&gt; &lt;p&gt;The response from &lt;code&gt;DetectAnomalies&lt;/code&gt; includes a boolean prediction that the image contains one or more anomalies and a confidence value for the prediction. If the model is an image segmentation model, the response also includes segmentation information for each type of anomaly found in the image.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Before calling &lt;code&gt;DetectAnomalies&lt;/code&gt;, you must first start your model with the &lt;a&gt;StartModel&lt;/a&gt; operation. You are charged for the amount of time, in minutes, that a model runs and for the number of anomaly detection units that your model uses. If you are not using a model, use the &lt;a&gt;StopModel&lt;/a&gt; operation to stop your model. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;i&gt;Detecting anomalies in an image&lt;/i&gt; in the Amazon Lookout for Vision developer guide.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:DetectAnomalies&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model version that you want to use. (required)
     * @param modelVersion The version of the model that you want to use. (required)
     * @param contentType The type of the image passed in &lt;code&gt;Body&lt;/code&gt;. Valid values are &lt;code&gt;image/png&lt;/code&gt; (PNG format images) and &lt;code&gt;image/jpeg&lt;/code&gt; (JPG format images).  (required)
     * @param detectAnomaliesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectAnomaliesAsync(String projectName, String modelVersion, String contentType, DetectAnomaliesRequest detectAnomaliesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DetectAnomaliesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectAnomaliesValidateBeforeCall(projectName, modelVersion, contentType, detectAnomaliesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DetectAnomaliesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDatasetEntries
     * @param projectName The name of the project that contains the dataset that you want to list. (required)
     * @param datasetType The type of the dataset that you want to list. Specify &lt;code&gt;train&lt;/code&gt; to list the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to list the test dataset. If you have a single dataset project, specify &lt;code&gt;train&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param labeled Specify &lt;code&gt;true&lt;/code&gt; to include labeled entries, otherwise specify &lt;code&gt;false&lt;/code&gt;. If you don&#39;t specify a value, Lookout for Vision returns all entries. (optional)
     * @param anomalyClass Specify &lt;code&gt;normal&lt;/code&gt; to include only normal images. Specify &lt;code&gt;anomaly&lt;/code&gt; to only include anomalous entries. If you don&#39;t specify a value, Amazon Lookout for Vision returns normal and anomalous images. (optional)
     * @param createdBefore Only includes entries before the specified date in the response. For example, &lt;code&gt;2020-06-23T00:00:00&lt;/code&gt;. (optional)
     * @param createdAfter Only includes entries after the specified date in the response. For example, &lt;code&gt;2020-06-23T00:00:00&lt;/code&gt;. (optional)
     * @param nextToken If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of dataset entries. (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. (optional)
     * @param sourceRefContains Perform a \&quot;contains\&quot; search on the values of the &lt;code&gt;source-ref&lt;/code&gt; key within the dataset. For example a value of \&quot;IMG_17\&quot; returns all JSON Lines where the &lt;code&gt;source-ref&lt;/code&gt; key value matches &lt;i&gt;*IMG_17*&lt;/i&gt;. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDatasetEntriesCall(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean labeled, String anomalyClass, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String nextToken, Integer maxResults, String sourceRefContains, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/datasets/{datasetType}/entries"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "datasetType" + "}", localVarApiClient.escapeString(datasetType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (labeled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labeled", labeled));
        }

        if (anomalyClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anomalyClass", anomalyClass));
        }

        if (createdBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBefore", createdBefore));
        }

        if (createdAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAfter", createdAfter));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (sourceRefContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceRefContains", sourceRefContains));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDatasetEntriesValidateBeforeCall(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean labeled, String anomalyClass, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String nextToken, Integer maxResults, String sourceRefContains, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling listDatasetEntries(Async)");
        }

        // verify the required parameter 'datasetType' is set
        if (datasetType == null) {
            throw new ApiException("Missing the required parameter 'datasetType' when calling listDatasetEntries(Async)");
        }

        return listDatasetEntriesCall(projectName, datasetType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, labeled, anomalyClass, createdBefore, createdAfter, nextToken, maxResults, sourceRefContains, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the JSON Lines within a dataset. An Amazon Lookout for Vision JSON Line contains the anomaly information for a single image, including the image location and the assigned label.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListDatasetEntries&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the dataset that you want to list. (required)
     * @param datasetType The type of the dataset that you want to list. Specify &lt;code&gt;train&lt;/code&gt; to list the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to list the test dataset. If you have a single dataset project, specify &lt;code&gt;train&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param labeled Specify &lt;code&gt;true&lt;/code&gt; to include labeled entries, otherwise specify &lt;code&gt;false&lt;/code&gt;. If you don&#39;t specify a value, Lookout for Vision returns all entries. (optional)
     * @param anomalyClass Specify &lt;code&gt;normal&lt;/code&gt; to include only normal images. Specify &lt;code&gt;anomaly&lt;/code&gt; to only include anomalous entries. If you don&#39;t specify a value, Amazon Lookout for Vision returns normal and anomalous images. (optional)
     * @param createdBefore Only includes entries before the specified date in the response. For example, &lt;code&gt;2020-06-23T00:00:00&lt;/code&gt;. (optional)
     * @param createdAfter Only includes entries after the specified date in the response. For example, &lt;code&gt;2020-06-23T00:00:00&lt;/code&gt;. (optional)
     * @param nextToken If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of dataset entries. (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. (optional)
     * @param sourceRefContains Perform a \&quot;contains\&quot; search on the values of the &lt;code&gt;source-ref&lt;/code&gt; key within the dataset. For example a value of \&quot;IMG_17\&quot; returns all JSON Lines where the &lt;code&gt;source-ref&lt;/code&gt; key value matches &lt;i&gt;*IMG_17*&lt;/i&gt;. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListDatasetEntriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ListDatasetEntriesResponse listDatasetEntries(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean labeled, String anomalyClass, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String nextToken, Integer maxResults, String sourceRefContains, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListDatasetEntriesResponse> localVarResp = listDatasetEntriesWithHttpInfo(projectName, datasetType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, labeled, anomalyClass, createdBefore, createdAfter, nextToken, maxResults, sourceRefContains, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the JSON Lines within a dataset. An Amazon Lookout for Vision JSON Line contains the anomaly information for a single image, including the image location and the assigned label.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListDatasetEntries&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the dataset that you want to list. (required)
     * @param datasetType The type of the dataset that you want to list. Specify &lt;code&gt;train&lt;/code&gt; to list the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to list the test dataset. If you have a single dataset project, specify &lt;code&gt;train&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param labeled Specify &lt;code&gt;true&lt;/code&gt; to include labeled entries, otherwise specify &lt;code&gt;false&lt;/code&gt;. If you don&#39;t specify a value, Lookout for Vision returns all entries. (optional)
     * @param anomalyClass Specify &lt;code&gt;normal&lt;/code&gt; to include only normal images. Specify &lt;code&gt;anomaly&lt;/code&gt; to only include anomalous entries. If you don&#39;t specify a value, Amazon Lookout for Vision returns normal and anomalous images. (optional)
     * @param createdBefore Only includes entries before the specified date in the response. For example, &lt;code&gt;2020-06-23T00:00:00&lt;/code&gt;. (optional)
     * @param createdAfter Only includes entries after the specified date in the response. For example, &lt;code&gt;2020-06-23T00:00:00&lt;/code&gt;. (optional)
     * @param nextToken If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of dataset entries. (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. (optional)
     * @param sourceRefContains Perform a \&quot;contains\&quot; search on the values of the &lt;code&gt;source-ref&lt;/code&gt; key within the dataset. For example a value of \&quot;IMG_17\&quot; returns all JSON Lines where the &lt;code&gt;source-ref&lt;/code&gt; key value matches &lt;i&gt;*IMG_17*&lt;/i&gt;. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListDatasetEntriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDatasetEntriesResponse> listDatasetEntriesWithHttpInfo(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean labeled, String anomalyClass, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String nextToken, Integer maxResults, String sourceRefContains, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listDatasetEntriesValidateBeforeCall(projectName, datasetType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, labeled, anomalyClass, createdBefore, createdAfter, nextToken, maxResults, sourceRefContains, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListDatasetEntriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the JSON Lines within a dataset. An Amazon Lookout for Vision JSON Line contains the anomaly information for a single image, including the image location and the assigned label.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListDatasetEntries&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the dataset that you want to list. (required)
     * @param datasetType The type of the dataset that you want to list. Specify &lt;code&gt;train&lt;/code&gt; to list the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to list the test dataset. If you have a single dataset project, specify &lt;code&gt;train&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param labeled Specify &lt;code&gt;true&lt;/code&gt; to include labeled entries, otherwise specify &lt;code&gt;false&lt;/code&gt;. If you don&#39;t specify a value, Lookout for Vision returns all entries. (optional)
     * @param anomalyClass Specify &lt;code&gt;normal&lt;/code&gt; to include only normal images. Specify &lt;code&gt;anomaly&lt;/code&gt; to only include anomalous entries. If you don&#39;t specify a value, Amazon Lookout for Vision returns normal and anomalous images. (optional)
     * @param createdBefore Only includes entries before the specified date in the response. For example, &lt;code&gt;2020-06-23T00:00:00&lt;/code&gt;. (optional)
     * @param createdAfter Only includes entries after the specified date in the response. For example, &lt;code&gt;2020-06-23T00:00:00&lt;/code&gt;. (optional)
     * @param nextToken If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of dataset entries. (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. (optional)
     * @param sourceRefContains Perform a \&quot;contains\&quot; search on the values of the &lt;code&gt;source-ref&lt;/code&gt; key within the dataset. For example a value of \&quot;IMG_17\&quot; returns all JSON Lines where the &lt;code&gt;source-ref&lt;/code&gt; key value matches &lt;i&gt;*IMG_17*&lt;/i&gt;. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDatasetEntriesAsync(String projectName, String datasetType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean labeled, String anomalyClass, OffsetDateTime createdBefore, OffsetDateTime createdAfter, String nextToken, Integer maxResults, String sourceRefContains, String maxResults2, String nextToken2, final ApiCallback<ListDatasetEntriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDatasetEntriesValidateBeforeCall(projectName, datasetType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, labeled, anomalyClass, createdBefore, createdAfter, nextToken, maxResults, sourceRefContains, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListDatasetEntriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listModelPackagingJobs
     * @param projectName  The name of the project for which you want to list the model packaging jobs.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous response was incomplete (because there is more results to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.  (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.  (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listModelPackagingJobsCall(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/modelpackagingjobs"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listModelPackagingJobsValidateBeforeCall(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling listModelPackagingJobs(Async)");
        }

        return listModelPackagingJobsCall(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt; Lists the model packaging jobs created for an Amazon Lookout for Vision project. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListModelPackagingJobs&lt;/code&gt; operation. &lt;/p&gt; &lt;p&gt;For more information, see &lt;i&gt;Using your Amazon Lookout for Vision model on an edge device&lt;/i&gt; in the Amazon Lookout for Vision Developer Guide. &lt;/p&gt;
     * @param projectName  The name of the project for which you want to list the model packaging jobs.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous response was incomplete (because there is more results to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.  (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.  (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListModelPackagingJobsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ListModelPackagingJobsResponse listModelPackagingJobs(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListModelPackagingJobsResponse> localVarResp = listModelPackagingJobsWithHttpInfo(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Lists the model packaging jobs created for an Amazon Lookout for Vision project. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListModelPackagingJobs&lt;/code&gt; operation. &lt;/p&gt; &lt;p&gt;For more information, see &lt;i&gt;Using your Amazon Lookout for Vision model on an edge device&lt;/i&gt; in the Amazon Lookout for Vision Developer Guide. &lt;/p&gt;
     * @param projectName  The name of the project for which you want to list the model packaging jobs.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous response was incomplete (because there is more results to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.  (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.  (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListModelPackagingJobsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListModelPackagingJobsResponse> listModelPackagingJobsWithHttpInfo(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listModelPackagingJobsValidateBeforeCall(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListModelPackagingJobsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Lists the model packaging jobs created for an Amazon Lookout for Vision project. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListModelPackagingJobs&lt;/code&gt; operation. &lt;/p&gt; &lt;p&gt;For more information, see &lt;i&gt;Using your Amazon Lookout for Vision model on an edge device&lt;/i&gt; in the Amazon Lookout for Vision Developer Guide. &lt;/p&gt;
     * @param projectName  The name of the project for which you want to list the model packaging jobs.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous response was incomplete (because there is more results to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of results.  (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.  (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listModelPackagingJobsAsync(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback<ListModelPackagingJobsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listModelPackagingJobsValidateBeforeCall(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListModelPackagingJobsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listModels
     * @param projectName The name of the project that contains the model versions that you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of models. (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listModelsCall(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/models"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listModelsValidateBeforeCall(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling listModels(Async)");
        }

        return listModelsCall(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the versions of a model in an Amazon Lookout for Vision project.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ListModels&lt;/code&gt; operation is eventually consistent. Recent calls to &lt;code&gt;CreateModel&lt;/code&gt; might take a while to appear in the response from &lt;code&gt;ListProjects&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListModels&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model versions that you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of models. (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListModelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ListModelsResponse listModels(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListModelsResponse> localVarResp = listModelsWithHttpInfo(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the versions of a model in an Amazon Lookout for Vision project.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ListModels&lt;/code&gt; operation is eventually consistent. Recent calls to &lt;code&gt;CreateModel&lt;/code&gt; might take a while to appear in the response from &lt;code&gt;ListProjects&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListModels&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model versions that you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of models. (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListModelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListModelsResponse> listModelsWithHttpInfo(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listModelsValidateBeforeCall(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListModelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the versions of a model in an Amazon Lookout for Vision project.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ListModels&lt;/code&gt; operation is eventually consistent. Recent calls to &lt;code&gt;CreateModel&lt;/code&gt; might take a while to appear in the response from &lt;code&gt;ListProjects&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListModels&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model versions that you want to list. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of models. (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listModelsAsync(String projectName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback<ListModelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listModelsValidateBeforeCall(projectName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListModelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProjects
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of projects. (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectsCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProjectsValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        return listProjectsCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the Amazon Lookout for Vision projects in your AWS account that are in the AWS Region in which you call &lt;code&gt;ListProjects&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ListProjects&lt;/code&gt; operation is eventually consistent. Recent calls to &lt;code&gt;CreateProject&lt;/code&gt; and &lt;code&gt;DeleteProject&lt;/code&gt; might take a while to appear in the response from &lt;code&gt;ListProjects&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListProjects&lt;/code&gt; operation.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of projects. (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListProjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ListProjectsResponse listProjects(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListProjectsResponse> localVarResp = listProjectsWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the Amazon Lookout for Vision projects in your AWS account that are in the AWS Region in which you call &lt;code&gt;ListProjects&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ListProjects&lt;/code&gt; operation is eventually consistent. Recent calls to &lt;code&gt;CreateProject&lt;/code&gt; and &lt;code&gt;DeleteProject&lt;/code&gt; might take a while to appear in the response from &lt;code&gt;ListProjects&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListProjects&lt;/code&gt; operation.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of projects. (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListProjectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListProjectsResponse> listProjectsWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listProjectsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListProjectsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the Amazon Lookout for Vision projects in your AWS account that are in the AWS Region in which you call &lt;code&gt;ListProjects&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ListProjects&lt;/code&gt; operation is eventually consistent. Recent calls to &lt;code&gt;CreateProject&lt;/code&gt; and &lt;code&gt;DeleteProject&lt;/code&gt; might take a while to appear in the response from &lt;code&gt;ListProjects&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListProjects&lt;/code&gt; operation.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of projects. (optional)
     * @param maxResults The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listProjectsAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback<ListProjectsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProjectsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListProjectsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param resourceArn The Amazon Resource Name (ARN) of the model for which you want to list tags.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String resourceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/tags/{resourceArn}"
            .replace("{" + "resourceArn" + "}", localVarApiClient.escapeString(resourceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String resourceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of tags attached to the specified Amazon Lookout for Vision model.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListTagsForResource&lt;/code&gt; operation.&lt;/p&gt;
     * @param resourceArn The Amazon Resource Name (ARN) of the model for which you want to list tags.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse listTagsForResource(String resourceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of tags attached to the specified Amazon Lookout for Vision model.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListTagsForResource&lt;/code&gt; operation.&lt;/p&gt;
     * @param resourceArn The Amazon Resource Name (ARN) of the model for which you want to list tags.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(String resourceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of tags attached to the specified Amazon Lookout for Vision model.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:ListTagsForResource&lt;/code&gt; operation.&lt;/p&gt;
     * @param resourceArn The Amazon Resource Name (ARN) of the model for which you want to list tags.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String resourceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startModel
     * @param projectName The name of the project that contains the model that you want to start. (required)
     * @param modelVersion The version of the model that you want to start. (required)
     * @param startModelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;StartModel&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;StartModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;StartModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple start requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;StartModel&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startModelCall(String projectName, String modelVersion, StartModelRequest startModelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startModelRequest;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/models/{modelVersion}/start"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "modelVersion" + "}", localVarApiClient.escapeString(modelVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmznClientToken != null) {
            localVarHeaderParams.put("X-Amzn-Client-Token", localVarApiClient.parameterToString(xAmznClientToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startModelValidateBeforeCall(String projectName, String modelVersion, StartModelRequest startModelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling startModel(Async)");
        }

        // verify the required parameter 'modelVersion' is set
        if (modelVersion == null) {
            throw new ApiException("Missing the required parameter 'modelVersion' when calling startModel(Async)");
        }

        // verify the required parameter 'startModelRequest' is set
        if (startModelRequest == null) {
            throw new ApiException("Missing the required parameter 'startModelRequest' when calling startModel(Async)");
        }

        return startModelCall(projectName, modelVersion, startModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts the running of the version of an Amazon Lookout for Vision model. Starting a model takes a while to complete. To check the current state of the model, use &lt;a&gt;DescribeModel&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A model is ready to use when its status is &lt;code&gt;HOSTED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Once the model is running, you can detect custom labels in new images by calling &lt;a&gt;DetectAnomalies&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You are charged for the amount of time that the model is running. To stop a running model, call &lt;a&gt;StopModel&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:StartModel&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model that you want to start. (required)
     * @param modelVersion The version of the model that you want to start. (required)
     * @param startModelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;StartModel&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;StartModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;StartModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple start requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;StartModel&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @return StartModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public StartModelResponse startModel(String projectName, String modelVersion, StartModelRequest startModelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        ApiResponse<StartModelResponse> localVarResp = startModelWithHttpInfo(projectName, modelVersion, startModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts the running of the version of an Amazon Lookout for Vision model. Starting a model takes a while to complete. To check the current state of the model, use &lt;a&gt;DescribeModel&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A model is ready to use when its status is &lt;code&gt;HOSTED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Once the model is running, you can detect custom labels in new images by calling &lt;a&gt;DetectAnomalies&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You are charged for the amount of time that the model is running. To stop a running model, call &lt;a&gt;StopModel&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:StartModel&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model that you want to start. (required)
     * @param modelVersion The version of the model that you want to start. (required)
     * @param startModelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;StartModel&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;StartModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;StartModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple start requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;StartModel&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;StartModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartModelResponse> startModelWithHttpInfo(String projectName, String modelVersion, StartModelRequest startModelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        okhttp3.Call localVarCall = startModelValidateBeforeCall(projectName, modelVersion, startModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, null);
        Type localVarReturnType = new TypeToken<StartModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts the running of the version of an Amazon Lookout for Vision model. Starting a model takes a while to complete. To check the current state of the model, use &lt;a&gt;DescribeModel&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;A model is ready to use when its status is &lt;code&gt;HOSTED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Once the model is running, you can detect custom labels in new images by calling &lt;a&gt;DetectAnomalies&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You are charged for the amount of time that the model is running. To stop a running model, call &lt;a&gt;StopModel&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:StartModel&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model that you want to start. (required)
     * @param modelVersion The version of the model that you want to start. (required)
     * @param startModelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;StartModel&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;StartModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;StartModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value. &lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple start requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;StartModel&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startModelAsync(String projectName, String modelVersion, StartModelRequest startModelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback<StartModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startModelValidateBeforeCall(projectName, modelVersion, startModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);
        Type localVarReturnType = new TypeToken<StartModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startModelPackagingJob
     * @param projectName  The name of the project which contains the version of the model that you want to package.  (required)
     * @param startModelPackagingJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;StartModelPackagingJob&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;StartModelPackagingJob&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;StartModelPackagingJob&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;StartModelPackagingJob&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startModelPackagingJobCall(String projectName, StartModelPackagingJobRequest startModelPackagingJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startModelPackagingJobRequest;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/modelpackagingjobs"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmznClientToken != null) {
            localVarHeaderParams.put("X-Amzn-Client-Token", localVarApiClient.parameterToString(xAmznClientToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startModelPackagingJobValidateBeforeCall(String projectName, StartModelPackagingJobRequest startModelPackagingJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling startModelPackagingJob(Async)");
        }

        // verify the required parameter 'startModelPackagingJobRequest' is set
        if (startModelPackagingJobRequest == null) {
            throw new ApiException("Missing the required parameter 'startModelPackagingJobRequest' when calling startModelPackagingJob(Async)");
        }

        return startModelPackagingJobCall(projectName, startModelPackagingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts an Amazon Lookout for Vision model packaging job. A model packaging job creates an AWS IoT Greengrass component for a Lookout for Vision model. You can use the component to deploy your model to an edge device managed by Greengrass. &lt;/p&gt; &lt;p&gt;Use the &lt;a&gt;DescribeModelPackagingJob&lt;/a&gt; API to determine the current status of the job. The model packaging job is complete if the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;SUCCEEDED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To deploy the component to the target device, use the component name and component version with the AWS IoT Greengrass &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/APIReference/API_CreateDeployment.html\&quot;&gt;CreateDeployment&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation requires the following permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;lookoutvision:StartModelPackagingJob&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;s3:PutObject&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;s3:GetBucketLocation&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;kms:GenerateDataKey&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;greengrass:CreateComponentVersion&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;greengrass:DescribeComponent&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) &lt;code&gt;greengrass:TagResource&lt;/code&gt;. Only required if you want to tag the component.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;i&gt;Using your Amazon Lookout for Vision model on an edge device&lt;/i&gt; in the Amazon Lookout for Vision Developer Guide. &lt;/p&gt;
     * @param projectName  The name of the project which contains the version of the model that you want to package.  (required)
     * @param startModelPackagingJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;StartModelPackagingJob&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;StartModelPackagingJob&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;StartModelPackagingJob&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;StartModelPackagingJob&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @return StartModelPackagingJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public StartModelPackagingJobResponse startModelPackagingJob(String projectName, StartModelPackagingJobRequest startModelPackagingJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        ApiResponse<StartModelPackagingJobResponse> localVarResp = startModelPackagingJobWithHttpInfo(projectName, startModelPackagingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts an Amazon Lookout for Vision model packaging job. A model packaging job creates an AWS IoT Greengrass component for a Lookout for Vision model. You can use the component to deploy your model to an edge device managed by Greengrass. &lt;/p&gt; &lt;p&gt;Use the &lt;a&gt;DescribeModelPackagingJob&lt;/a&gt; API to determine the current status of the job. The model packaging job is complete if the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;SUCCEEDED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To deploy the component to the target device, use the component name and component version with the AWS IoT Greengrass &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/APIReference/API_CreateDeployment.html\&quot;&gt;CreateDeployment&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation requires the following permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;lookoutvision:StartModelPackagingJob&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;s3:PutObject&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;s3:GetBucketLocation&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;kms:GenerateDataKey&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;greengrass:CreateComponentVersion&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;greengrass:DescribeComponent&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) &lt;code&gt;greengrass:TagResource&lt;/code&gt;. Only required if you want to tag the component.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;i&gt;Using your Amazon Lookout for Vision model on an edge device&lt;/i&gt; in the Amazon Lookout for Vision Developer Guide. &lt;/p&gt;
     * @param projectName  The name of the project which contains the version of the model that you want to package.  (required)
     * @param startModelPackagingJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;StartModelPackagingJob&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;StartModelPackagingJob&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;StartModelPackagingJob&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;StartModelPackagingJob&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;StartModelPackagingJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartModelPackagingJobResponse> startModelPackagingJobWithHttpInfo(String projectName, StartModelPackagingJobRequest startModelPackagingJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        okhttp3.Call localVarCall = startModelPackagingJobValidateBeforeCall(projectName, startModelPackagingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, null);
        Type localVarReturnType = new TypeToken<StartModelPackagingJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts an Amazon Lookout for Vision model packaging job. A model packaging job creates an AWS IoT Greengrass component for a Lookout for Vision model. You can use the component to deploy your model to an edge device managed by Greengrass. &lt;/p&gt; &lt;p&gt;Use the &lt;a&gt;DescribeModelPackagingJob&lt;/a&gt; API to determine the current status of the job. The model packaging job is complete if the value of &lt;code&gt;Status&lt;/code&gt; is &lt;code&gt;SUCCEEDED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To deploy the component to the target device, use the component name and component version with the AWS IoT Greengrass &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/greengrass/v2/APIReference/API_CreateDeployment.html\&quot;&gt;CreateDeployment&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation requires the following permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;lookoutvision:StartModelPackagingJob&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;s3:PutObject&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;s3:GetBucketLocation&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;kms:GenerateDataKey&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;greengrass:CreateComponentVersion&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;greengrass:DescribeComponent&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) &lt;code&gt;greengrass:TagResource&lt;/code&gt;. Only required if you want to tag the component.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;i&gt;Using your Amazon Lookout for Vision model on an edge device&lt;/i&gt; in the Amazon Lookout for Vision Developer Guide. &lt;/p&gt;
     * @param projectName  The name of the project which contains the version of the model that you want to package.  (required)
     * @param startModelPackagingJobRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;StartModelPackagingJob&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;StartModelPackagingJob&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;StartModelPackagingJob&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;StartModelPackagingJob&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startModelPackagingJobAsync(String projectName, StartModelPackagingJobRequest startModelPackagingJobRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback<StartModelPackagingJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startModelPackagingJobValidateBeforeCall(projectName, startModelPackagingJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);
        Type localVarReturnType = new TypeToken<StartModelPackagingJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopModel
     * @param projectName The name of the project that contains the model that you want to stop. (required)
     * @param modelVersion The version of the model that you want to stop. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;StopModel&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;StopModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;StopModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple stop requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;StopModel&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopModelCall(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/models/{modelVersion}/stop"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "modelVersion" + "}", localVarApiClient.escapeString(modelVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmznClientToken != null) {
            localVarHeaderParams.put("X-Amzn-Client-Token", localVarApiClient.parameterToString(xAmznClientToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopModelValidateBeforeCall(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling stopModel(Async)");
        }

        // verify the required parameter 'modelVersion' is set
        if (modelVersion == null) {
            throw new ApiException("Missing the required parameter 'modelVersion' when calling stopModel(Async)");
        }

        return stopModelCall(projectName, modelVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Stops the hosting of a running model. The operation might take a while to complete. To check the current status, call &lt;a&gt;DescribeModel&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;After the model hosting stops, the &lt;code&gt;Status&lt;/code&gt; of the model is &lt;code&gt;TRAINED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:StopModel&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model that you want to stop. (required)
     * @param modelVersion The version of the model that you want to stop. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;StopModel&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;StopModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;StopModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple stop requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;StopModel&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @return StopModelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public StopModelResponse stopModel(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        ApiResponse<StopModelResponse> localVarResp = stopModelWithHttpInfo(projectName, modelVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Stops the hosting of a running model. The operation might take a while to complete. To check the current status, call &lt;a&gt;DescribeModel&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;After the model hosting stops, the &lt;code&gt;Status&lt;/code&gt; of the model is &lt;code&gt;TRAINED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:StopModel&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model that you want to stop. (required)
     * @param modelVersion The version of the model that you want to stop. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;StopModel&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;StopModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;StopModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple stop requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;StopModel&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;StopModelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StopModelResponse> stopModelWithHttpInfo(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        okhttp3.Call localVarCall = stopModelValidateBeforeCall(projectName, modelVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, null);
        Type localVarReturnType = new TypeToken<StopModelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Stops the hosting of a running model. The operation might take a while to complete. To check the current status, call &lt;a&gt;DescribeModel&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;After the model hosting stops, the &lt;code&gt;Status&lt;/code&gt; of the model is &lt;code&gt;TRAINED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:StopModel&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the model that you want to stop. (required)
     * @param modelVersion The version of the model that you want to stop. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;StopModel&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;StopModel&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;StopModel&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple stop requests. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;StopModel&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopModelAsync(String projectName, String modelVersion, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback<StopModelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopModelValidateBeforeCall(projectName, modelVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);
        Type localVarReturnType = new TypeToken<StopModelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param resourceArn The Amazon Resource Name (ARN) of the model to assign the tags. (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String resourceArn, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/2020-11-20/tags/{resourceArn}"
            .replace("{" + "resourceArn" + "}", localVarApiClient.escapeString(resourceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String resourceArn, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds one or more key-value tags to an Amazon Lookout for Vision model. For more information, see &lt;i&gt;Tagging a model&lt;/i&gt; in the &lt;i&gt;Amazon Lookout for Vision Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:TagResource&lt;/code&gt; operation.&lt;/p&gt;
     * @param resourceArn The Amazon Resource Name (ARN) of the model to assign the tags. (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public Object tagResource(String resourceArn, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = tagResourceWithHttpInfo(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds one or more key-value tags to an Amazon Lookout for Vision model. For more information, see &lt;i&gt;Tagging a model&lt;/i&gt; in the &lt;i&gt;Amazon Lookout for Vision Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:TagResource&lt;/code&gt; operation.&lt;/p&gt;
     * @param resourceArn The Amazon Resource Name (ARN) of the model to assign the tags. (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tagResourceWithHttpInfo(String resourceArn, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds one or more key-value tags to an Amazon Lookout for Vision model. For more information, see &lt;i&gt;Tagging a model&lt;/i&gt; in the &lt;i&gt;Amazon Lookout for Vision Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:TagResource&lt;/code&gt; operation.&lt;/p&gt;
     * @param resourceArn The Amazon Resource Name (ARN) of the model to assign the tags. (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceQuotaExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String resourceArn, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param resourceArn The Amazon Resource Name (ARN) of the model from which you want to remove tags.  (required)
     * @param tagKeys A list of the keys of the tags that you want to remove. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String resourceArn, List<String> tagKeys, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/2020-11-20/tags/{resourceArn}#tagKeys"
            .replace("{" + "resourceArn" + "}", localVarApiClient.escapeString(resourceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tagKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tagKeys", tagKeys));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String resourceArn, List<String> tagKeys, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling untagResource(Async)");
        }

        // verify the required parameter 'tagKeys' is set
        if (tagKeys == null) {
            throw new ApiException("Missing the required parameter 'tagKeys' when calling untagResource(Async)");
        }

        return untagResourceCall(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes one or more tags from an Amazon Lookout for Vision model. For more information, see &lt;i&gt;Tagging a model&lt;/i&gt; in the &lt;i&gt;Amazon Lookout for Vision Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:UntagResource&lt;/code&gt; operation.&lt;/p&gt;
     * @param resourceArn The Amazon Resource Name (ARN) of the model from which you want to remove tags.  (required)
     * @param tagKeys A list of the keys of the tags that you want to remove. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public Object untagResource(String resourceArn, List<String> tagKeys, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = untagResourceWithHttpInfo(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Removes one or more tags from an Amazon Lookout for Vision model. For more information, see &lt;i&gt;Tagging a model&lt;/i&gt; in the &lt;i&gt;Amazon Lookout for Vision Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:UntagResource&lt;/code&gt; operation.&lt;/p&gt;
     * @param resourceArn The Amazon Resource Name (ARN) of the model from which you want to remove tags.  (required)
     * @param tagKeys A list of the keys of the tags that you want to remove. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> untagResourceWithHttpInfo(String resourceArn, List<String> tagKeys, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes one or more tags from an Amazon Lookout for Vision model. For more information, see &lt;i&gt;Tagging a model&lt;/i&gt; in the &lt;i&gt;Amazon Lookout for Vision Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:UntagResource&lt;/code&gt; operation.&lt;/p&gt;
     * @param resourceArn The Amazon Resource Name (ARN) of the model from which you want to remove tags.  (required)
     * @param tagKeys A list of the keys of the tags that you want to remove. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String resourceArn, List<String> tagKeys, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDatasetEntries
     * @param projectName The name of the project that contains the dataset that you want to update. (required)
     * @param datasetType The type of the dataset that you want to update. Specify &lt;code&gt;train&lt;/code&gt; to update the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to update the test dataset. If you have a single dataset project, specify &lt;code&gt;train&lt;/code&gt;. (required)
     * @param updateDatasetEntriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;UpdateDatasetEntries&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;UpdateDatasetEntries&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;UpdateDatasetEntries&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple updates with the same dataset entries. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;UpdateDatasetEntries&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetEntriesCall(String projectName, String datasetType, UpdateDatasetEntriesRequest updateDatasetEntriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDatasetEntriesRequest;

        // create path and map variables
        String localVarPath = "/2020-11-20/projects/{projectName}/datasets/{datasetType}/entries"
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "datasetType" + "}", localVarApiClient.escapeString(datasetType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmznClientToken != null) {
            localVarHeaderParams.put("X-Amzn-Client-Token", localVarApiClient.parameterToString(xAmznClientToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDatasetEntriesValidateBeforeCall(String projectName, String datasetType, UpdateDatasetEntriesRequest updateDatasetEntriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling updateDatasetEntries(Async)");
        }

        // verify the required parameter 'datasetType' is set
        if (datasetType == null) {
            throw new ApiException("Missing the required parameter 'datasetType' when calling updateDatasetEntries(Async)");
        }

        // verify the required parameter 'updateDatasetEntriesRequest' is set
        if (updateDatasetEntriesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDatasetEntriesRequest' when calling updateDatasetEntries(Async)");
        }

        return updateDatasetEntriesCall(projectName, datasetType, updateDatasetEntriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds or updates one or more JSON Line entries in a dataset. A JSON Line includes information about an image used for training or testing an Amazon Lookout for Vision model.&lt;/p&gt; &lt;p&gt;To update an existing JSON Line, use the &lt;code&gt;source-ref&lt;/code&gt; field to identify the JSON Line. The JSON line that you supply replaces the existing JSON line. Any existing annotations that are not in the new JSON line are removed from the dataset. &lt;/p&gt; &lt;p&gt;For more information, see &lt;i&gt;Defining JSON lines for anomaly classification&lt;/i&gt; in the Amazon Lookout for Vision Developer Guide. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The images you reference in the &lt;code&gt;source-ref&lt;/code&gt; field of a JSON line, must be in the same S3 bucket as the existing images in the dataset. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Updating a dataset might take a while to complete. To check the current status, call &lt;a&gt;DescribeDataset&lt;/a&gt; and check the &lt;code&gt;Status&lt;/code&gt; field in the response.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:UpdateDatasetEntries&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the dataset that you want to update. (required)
     * @param datasetType The type of the dataset that you want to update. Specify &lt;code&gt;train&lt;/code&gt; to update the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to update the test dataset. If you have a single dataset project, specify &lt;code&gt;train&lt;/code&gt;. (required)
     * @param updateDatasetEntriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;UpdateDatasetEntries&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;UpdateDatasetEntries&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;UpdateDatasetEntries&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple updates with the same dataset entries. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;UpdateDatasetEntries&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @return UpdateDatasetEntriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDatasetEntriesResponse updateDatasetEntries(String projectName, String datasetType, UpdateDatasetEntriesRequest updateDatasetEntriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        ApiResponse<UpdateDatasetEntriesResponse> localVarResp = updateDatasetEntriesWithHttpInfo(projectName, datasetType, updateDatasetEntriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds or updates one or more JSON Line entries in a dataset. A JSON Line includes information about an image used for training or testing an Amazon Lookout for Vision model.&lt;/p&gt; &lt;p&gt;To update an existing JSON Line, use the &lt;code&gt;source-ref&lt;/code&gt; field to identify the JSON Line. The JSON line that you supply replaces the existing JSON line. Any existing annotations that are not in the new JSON line are removed from the dataset. &lt;/p&gt; &lt;p&gt;For more information, see &lt;i&gt;Defining JSON lines for anomaly classification&lt;/i&gt; in the Amazon Lookout for Vision Developer Guide. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The images you reference in the &lt;code&gt;source-ref&lt;/code&gt; field of a JSON line, must be in the same S3 bucket as the existing images in the dataset. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Updating a dataset might take a while to complete. To check the current status, call &lt;a&gt;DescribeDataset&lt;/a&gt; and check the &lt;code&gt;Status&lt;/code&gt; field in the response.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:UpdateDatasetEntries&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the dataset that you want to update. (required)
     * @param datasetType The type of the dataset that you want to update. Specify &lt;code&gt;train&lt;/code&gt; to update the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to update the test dataset. If you have a single dataset project, specify &lt;code&gt;train&lt;/code&gt;. (required)
     * @param updateDatasetEntriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;UpdateDatasetEntries&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;UpdateDatasetEntries&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;UpdateDatasetEntries&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple updates with the same dataset entries. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;UpdateDatasetEntries&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;UpdateDatasetEntriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDatasetEntriesResponse> updateDatasetEntriesWithHttpInfo(String projectName, String datasetType, UpdateDatasetEntriesRequest updateDatasetEntriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken) throws ApiException {
        okhttp3.Call localVarCall = updateDatasetEntriesValidateBeforeCall(projectName, datasetType, updateDatasetEntriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, null);
        Type localVarReturnType = new TypeToken<UpdateDatasetEntriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds or updates one or more JSON Line entries in a dataset. A JSON Line includes information about an image used for training or testing an Amazon Lookout for Vision model.&lt;/p&gt; &lt;p&gt;To update an existing JSON Line, use the &lt;code&gt;source-ref&lt;/code&gt; field to identify the JSON Line. The JSON line that you supply replaces the existing JSON line. Any existing annotations that are not in the new JSON line are removed from the dataset. &lt;/p&gt; &lt;p&gt;For more information, see &lt;i&gt;Defining JSON lines for anomaly classification&lt;/i&gt; in the Amazon Lookout for Vision Developer Guide. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The images you reference in the &lt;code&gt;source-ref&lt;/code&gt; field of a JSON line, must be in the same S3 bucket as the existing images in the dataset. &lt;/p&gt; &lt;/note&gt; &lt;p&gt;Updating a dataset might take a while to complete. To check the current status, call &lt;a&gt;DescribeDataset&lt;/a&gt; and check the &lt;code&gt;Status&lt;/code&gt; field in the response.&lt;/p&gt; &lt;p&gt;This operation requires permissions to perform the &lt;code&gt;lookoutvision:UpdateDatasetEntries&lt;/code&gt; operation.&lt;/p&gt;
     * @param projectName The name of the project that contains the dataset that you want to update. (required)
     * @param datasetType The type of the dataset that you want to update. Specify &lt;code&gt;train&lt;/code&gt; to update the training dataset. Specify &lt;code&gt;test&lt;/code&gt; to update the test dataset. If you have a single dataset project, specify &lt;code&gt;train&lt;/code&gt;. (required)
     * @param updateDatasetEntriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmznClientToken &lt;p&gt;ClientToken is an idempotency token that ensures a call to &lt;code&gt;UpdateDatasetEntries&lt;/code&gt; completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from &lt;code&gt;UpdateDatasetEntries&lt;/code&gt;. In this case, safely retry your call to &lt;code&gt;UpdateDatasetEntries&lt;/code&gt; by using the same &lt;code&gt;ClientToken&lt;/code&gt; parameter value.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a value for &lt;code&gt;ClientToken&lt;/code&gt;, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple updates with the same dataset entries. You&#39;ll need to provide your own value for other use cases. &lt;/p&gt; &lt;p&gt;An error occurs if the other input parameters are not the same as in the first request. Using a different value for &lt;code&gt;ClientToken&lt;/code&gt; is considered a new call to &lt;code&gt;UpdateDatasetEntries&lt;/code&gt;. An idempotency token is active for 8 hours. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalServerException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottlingException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDatasetEntriesAsync(String projectName, String datasetType, UpdateDatasetEntriesRequest updateDatasetEntriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmznClientToken, final ApiCallback<UpdateDatasetEntriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDatasetEntriesValidateBeforeCall(projectName, datasetType, updateDatasetEntriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmznClientToken, _callback);
        Type localVarReturnType = new TypeToken<UpdateDatasetEntriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
