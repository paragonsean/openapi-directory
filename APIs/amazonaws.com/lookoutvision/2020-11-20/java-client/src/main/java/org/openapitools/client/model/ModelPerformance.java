/*
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the evaluation performance of a trained model. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:16.523404-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelPerformance {
  public static final String SERIALIZED_NAME_F1_SCORE = "F1Score";
  @SerializedName(SERIALIZED_NAME_F1_SCORE)
  private Float f1Score;

  public static final String SERIALIZED_NAME_RECALL = "Recall";
  @SerializedName(SERIALIZED_NAME_RECALL)
  private Float recall;

  public static final String SERIALIZED_NAME_PRECISION = "Precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  private Float precision;

  public ModelPerformance() {
  }

  public ModelPerformance f1Score(Float f1Score) {
    this.f1Score = f1Score;
    return this;
  }

  /**
   * Get f1Score
   * @return f1Score
   */
  @javax.annotation.Nullable
  public Float getF1Score() {
    return f1Score;
  }

  public void setF1Score(Float f1Score) {
    this.f1Score = f1Score;
  }


  public ModelPerformance recall(Float recall) {
    this.recall = recall;
    return this;
  }

  /**
   * Get recall
   * @return recall
   */
  @javax.annotation.Nullable
  public Float getRecall() {
    return recall;
  }

  public void setRecall(Float recall) {
    this.recall = recall;
  }


  public ModelPerformance precision(Float precision) {
    this.precision = precision;
    return this;
  }

  /**
   * Get precision
   * @return precision
   */
  @javax.annotation.Nullable
  public Float getPrecision() {
    return precision;
  }

  public void setPrecision(Float precision) {
    this.precision = precision;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelPerformance modelPerformance = (ModelPerformance) o;
    return Objects.equals(this.f1Score, modelPerformance.f1Score) &&
        Objects.equals(this.recall, modelPerformance.recall) &&
        Objects.equals(this.precision, modelPerformance.precision);
  }

  @Override
  public int hashCode() {
    return Objects.hash(f1Score, recall, precision);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelPerformance {\n");
    sb.append("    f1Score: ").append(toIndentedString(f1Score)).append("\n");
    sb.append("    recall: ").append(toIndentedString(recall)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("F1Score");
    openapiFields.add("Recall");
    openapiFields.add("Precision");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelPerformance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelPerformance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelPerformance is not found in the empty JSON string", ModelPerformance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelPerformance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelPerformance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `F1Score`
      if (jsonObj.get("F1Score") != null && !jsonObj.get("F1Score").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("F1Score"));
      }
      // validate the optional field `Recall`
      if (jsonObj.get("Recall") != null && !jsonObj.get("Recall").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("Recall"));
      }
      // validate the optional field `Precision`
      if (jsonObj.get("Precision") != null && !jsonObj.get("Precision").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("Precision"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelPerformance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelPerformance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelPerformance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelPerformance.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelPerformance>() {
           @Override
           public void write(JsonWriter out, ModelPerformance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelPerformance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelPerformance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelPerformance
   * @throws IOException if the JSON string is invalid with respect to ModelPerformance
   */
  public static ModelPerformance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelPerformance.class);
  }

  /**
   * Convert an instance of ModelPerformance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

