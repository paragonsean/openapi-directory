/*
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateDatasetRequestDatasetSourceGroundTruthManifest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDatasetRequestDatasetSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:16.523404-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDatasetRequestDatasetSource {
  public static final String SERIALIZED_NAME_GROUND_TRUTH_MANIFEST = "GroundTruthManifest";
  @SerializedName(SERIALIZED_NAME_GROUND_TRUTH_MANIFEST)
  private CreateDatasetRequestDatasetSourceGroundTruthManifest groundTruthManifest;

  public CreateDatasetRequestDatasetSource() {
  }

  public CreateDatasetRequestDatasetSource groundTruthManifest(CreateDatasetRequestDatasetSourceGroundTruthManifest groundTruthManifest) {
    this.groundTruthManifest = groundTruthManifest;
    return this;
  }

  /**
   * Get groundTruthManifest
   * @return groundTruthManifest
   */
  @javax.annotation.Nullable
  public CreateDatasetRequestDatasetSourceGroundTruthManifest getGroundTruthManifest() {
    return groundTruthManifest;
  }

  public void setGroundTruthManifest(CreateDatasetRequestDatasetSourceGroundTruthManifest groundTruthManifest) {
    this.groundTruthManifest = groundTruthManifest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDatasetRequestDatasetSource createDatasetRequestDatasetSource = (CreateDatasetRequestDatasetSource) o;
    return Objects.equals(this.groundTruthManifest, createDatasetRequestDatasetSource.groundTruthManifest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groundTruthManifest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDatasetRequestDatasetSource {\n");
    sb.append("    groundTruthManifest: ").append(toIndentedString(groundTruthManifest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GroundTruthManifest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDatasetRequestDatasetSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDatasetRequestDatasetSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDatasetRequestDatasetSource is not found in the empty JSON string", CreateDatasetRequestDatasetSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDatasetRequestDatasetSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDatasetRequestDatasetSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `GroundTruthManifest`
      if (jsonObj.get("GroundTruthManifest") != null && !jsonObj.get("GroundTruthManifest").isJsonNull()) {
        CreateDatasetRequestDatasetSourceGroundTruthManifest.validateJsonElement(jsonObj.get("GroundTruthManifest"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDatasetRequestDatasetSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDatasetRequestDatasetSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDatasetRequestDatasetSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDatasetRequestDatasetSource.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDatasetRequestDatasetSource>() {
           @Override
           public void write(JsonWriter out, CreateDatasetRequestDatasetSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDatasetRequestDatasetSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDatasetRequestDatasetSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDatasetRequestDatasetSource
   * @throws IOException if the JSON string is invalid with respect to CreateDatasetRequestDatasetSource
   */
  public static CreateDatasetRequestDatasetSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDatasetRequestDatasetSource.class);
  }

  /**
   * Convert an instance of CreateDatasetRequestDatasetSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

