/*
 * Amazon Lookout for Vision
 * <p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>
 *
 * The version of the OpenAPI document: 2020-11-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GreengrassConfigurationS3OutputLocation;
import org.openapitools.client.model.GreengrassConfigurationTargetPlatform;
import org.openapitools.client.model.TargetDevice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Configuration information for the AWS IoT Greengrass component created in a model packaging job. For more information, see &lt;a&gt;StartModelPackagingJob&lt;/a&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t specify a component with the same &lt;code&gt;ComponentName&lt;/code&gt; and &lt;code&gt;Componentversion&lt;/code&gt; as an existing component with the same component name and component version.&lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:16.523404-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GreengrassConfiguration {
  public static final String SERIALIZED_NAME_COMPILER_OPTIONS = "CompilerOptions";
  @SerializedName(SERIALIZED_NAME_COMPILER_OPTIONS)
  private String compilerOptions;

  public static final String SERIALIZED_NAME_TARGET_DEVICE = "TargetDevice";
  @SerializedName(SERIALIZED_NAME_TARGET_DEVICE)
  private TargetDevice targetDevice;

  public static final String SERIALIZED_NAME_TARGET_PLATFORM = "TargetPlatform";
  @SerializedName(SERIALIZED_NAME_TARGET_PLATFORM)
  private GreengrassConfigurationTargetPlatform targetPlatform;

  public static final String SERIALIZED_NAME_S3_OUTPUT_LOCATION = "S3OutputLocation";
  @SerializedName(SERIALIZED_NAME_S3_OUTPUT_LOCATION)
  private GreengrassConfigurationS3OutputLocation s3OutputLocation;

  public static final String SERIALIZED_NAME_COMPONENT_NAME = "ComponentName";
  @SerializedName(SERIALIZED_NAME_COMPONENT_NAME)
  private String componentName;

  public static final String SERIALIZED_NAME_COMPONENT_VERSION = "ComponentVersion";
  @SerializedName(SERIALIZED_NAME_COMPONENT_VERSION)
  private String componentVersion;

  public static final String SERIALIZED_NAME_COMPONENT_DESCRIPTION = "ComponentDescription";
  @SerializedName(SERIALIZED_NAME_COMPONENT_DESCRIPTION)
  private String componentDescription;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public GreengrassConfiguration() {
  }

  public GreengrassConfiguration compilerOptions(String compilerOptions) {
    this.compilerOptions = compilerOptions;
    return this;
  }

  /**
   * Get compilerOptions
   * @return compilerOptions
   */
  @javax.annotation.Nullable
  public String getCompilerOptions() {
    return compilerOptions;
  }

  public void setCompilerOptions(String compilerOptions) {
    this.compilerOptions = compilerOptions;
  }


  public GreengrassConfiguration targetDevice(TargetDevice targetDevice) {
    this.targetDevice = targetDevice;
    return this;
  }

  /**
   * Get targetDevice
   * @return targetDevice
   */
  @javax.annotation.Nullable
  public TargetDevice getTargetDevice() {
    return targetDevice;
  }

  public void setTargetDevice(TargetDevice targetDevice) {
    this.targetDevice = targetDevice;
  }


  public GreengrassConfiguration targetPlatform(GreengrassConfigurationTargetPlatform targetPlatform) {
    this.targetPlatform = targetPlatform;
    return this;
  }

  /**
   * Get targetPlatform
   * @return targetPlatform
   */
  @javax.annotation.Nullable
  public GreengrassConfigurationTargetPlatform getTargetPlatform() {
    return targetPlatform;
  }

  public void setTargetPlatform(GreengrassConfigurationTargetPlatform targetPlatform) {
    this.targetPlatform = targetPlatform;
  }


  public GreengrassConfiguration s3OutputLocation(GreengrassConfigurationS3OutputLocation s3OutputLocation) {
    this.s3OutputLocation = s3OutputLocation;
    return this;
  }

  /**
   * Get s3OutputLocation
   * @return s3OutputLocation
   */
  @javax.annotation.Nonnull
  public GreengrassConfigurationS3OutputLocation getS3OutputLocation() {
    return s3OutputLocation;
  }

  public void setS3OutputLocation(GreengrassConfigurationS3OutputLocation s3OutputLocation) {
    this.s3OutputLocation = s3OutputLocation;
  }


  public GreengrassConfiguration componentName(String componentName) {
    this.componentName = componentName;
    return this;
  }

  /**
   * Get componentName
   * @return componentName
   */
  @javax.annotation.Nonnull
  public String getComponentName() {
    return componentName;
  }

  public void setComponentName(String componentName) {
    this.componentName = componentName;
  }


  public GreengrassConfiguration componentVersion(String componentVersion) {
    this.componentVersion = componentVersion;
    return this;
  }

  /**
   * Get componentVersion
   * @return componentVersion
   */
  @javax.annotation.Nullable
  public String getComponentVersion() {
    return componentVersion;
  }

  public void setComponentVersion(String componentVersion) {
    this.componentVersion = componentVersion;
  }


  public GreengrassConfiguration componentDescription(String componentDescription) {
    this.componentDescription = componentDescription;
    return this;
  }

  /**
   * Get componentDescription
   * @return componentDescription
   */
  @javax.annotation.Nullable
  public String getComponentDescription() {
    return componentDescription;
  }

  public void setComponentDescription(String componentDescription) {
    this.componentDescription = componentDescription;
  }


  public GreengrassConfiguration tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GreengrassConfiguration greengrassConfiguration = (GreengrassConfiguration) o;
    return Objects.equals(this.compilerOptions, greengrassConfiguration.compilerOptions) &&
        Objects.equals(this.targetDevice, greengrassConfiguration.targetDevice) &&
        Objects.equals(this.targetPlatform, greengrassConfiguration.targetPlatform) &&
        Objects.equals(this.s3OutputLocation, greengrassConfiguration.s3OutputLocation) &&
        Objects.equals(this.componentName, greengrassConfiguration.componentName) &&
        Objects.equals(this.componentVersion, greengrassConfiguration.componentVersion) &&
        Objects.equals(this.componentDescription, greengrassConfiguration.componentDescription) &&
        Objects.equals(this.tags, greengrassConfiguration.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compilerOptions, targetDevice, targetPlatform, s3OutputLocation, componentName, componentVersion, componentDescription, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GreengrassConfiguration {\n");
    sb.append("    compilerOptions: ").append(toIndentedString(compilerOptions)).append("\n");
    sb.append("    targetDevice: ").append(toIndentedString(targetDevice)).append("\n");
    sb.append("    targetPlatform: ").append(toIndentedString(targetPlatform)).append("\n");
    sb.append("    s3OutputLocation: ").append(toIndentedString(s3OutputLocation)).append("\n");
    sb.append("    componentName: ").append(toIndentedString(componentName)).append("\n");
    sb.append("    componentVersion: ").append(toIndentedString(componentVersion)).append("\n");
    sb.append("    componentDescription: ").append(toIndentedString(componentDescription)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CompilerOptions");
    openapiFields.add("TargetDevice");
    openapiFields.add("TargetPlatform");
    openapiFields.add("S3OutputLocation");
    openapiFields.add("ComponentName");
    openapiFields.add("ComponentVersion");
    openapiFields.add("ComponentDescription");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("S3OutputLocation");
    openapiRequiredFields.add("ComponentName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GreengrassConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GreengrassConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GreengrassConfiguration is not found in the empty JSON string", GreengrassConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GreengrassConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GreengrassConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GreengrassConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CompilerOptions`
      if (jsonObj.get("CompilerOptions") != null && !jsonObj.get("CompilerOptions").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CompilerOptions"));
      }
      // validate the optional field `TargetDevice`
      if (jsonObj.get("TargetDevice") != null && !jsonObj.get("TargetDevice").isJsonNull()) {
        TargetDevice.validateJsonElement(jsonObj.get("TargetDevice"));
      }
      // validate the optional field `TargetPlatform`
      if (jsonObj.get("TargetPlatform") != null && !jsonObj.get("TargetPlatform").isJsonNull()) {
        GreengrassConfigurationTargetPlatform.validateJsonElement(jsonObj.get("TargetPlatform"));
      }
      // validate the required field `S3OutputLocation`
      GreengrassConfigurationS3OutputLocation.validateJsonElement(jsonObj.get("S3OutputLocation"));
      // validate the required field `ComponentName`
      String.validateJsonElement(jsonObj.get("ComponentName"));
      // validate the optional field `ComponentVersion`
      if (jsonObj.get("ComponentVersion") != null && !jsonObj.get("ComponentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ComponentVersion"));
      }
      // validate the optional field `ComponentDescription`
      if (jsonObj.get("ComponentDescription") != null && !jsonObj.get("ComponentDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ComponentDescription"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GreengrassConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GreengrassConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GreengrassConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GreengrassConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<GreengrassConfiguration>() {
           @Override
           public void write(JsonWriter out, GreengrassConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GreengrassConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GreengrassConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GreengrassConfiguration
   * @throws IOException if the JSON string is invalid with respect to GreengrassConfiguration
   */
  public static GreengrassConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GreengrassConfiguration.class);
  }

  /**
   * Convert an instance of GreengrassConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

