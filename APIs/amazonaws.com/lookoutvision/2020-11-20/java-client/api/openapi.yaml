openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<p>This is the Amazon Lookout for Vision API Reference. It provides\
    \ descriptions of actions, data types, common parameters, and common errors.</p>\
    \ <p>Amazon Lookout for Vision enables you to find visual defects in industrial\
    \ products, accurately and at scale. It uses computer vision to identify missing\
    \ components in an industrial product, damage to vehicles or structures, irregularities\
    \ in production lines, and even minuscule defects in silicon wafers â€” or any other\
    \ physical item where quality is important such as a missing capacitor on printed\
    \ circuit boards.</p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Lookout for Vision
  version: 2020-11-20
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: lookoutvision
  x-aws-signingName: lookoutvision
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/lookoutvision-2020-11-20.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/lookoutvision/
servers:
- description: The Amazon Lookout for Vision multi-region endpoint
  url: "http://lookoutvision.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Lookout for Vision multi-region endpoint
  url: "https://lookoutvision.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Lookout for Vision endpoint for China (Beijing) and China
    (Ningxia)
  url: "http://lookoutvision.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Amazon Lookout for Vision endpoint for China (Beijing) and China
    (Ningxia)
  url: "https://lookoutvision.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /2020-11-20/projects/{projectName}/datasets:
    post:
      description: "<p>Creates a new dataset in an Amazon Lookout for Vision project.\
        \ <code>CreateDataset</code> can create a training or a test dataset from\
        \ a valid dataset source (<code>DatasetSource</code>).</p> <p>If you want\
        \ a single dataset project, specify <code>train</code> for the value of <code>DatasetType</code>.</p>\
        \ <p>To have a project with separate training and test datasets, call <code>CreateDataset</code>\
        \ twice. On the first call, specify <code>train</code> for the value of <code>DatasetType</code>.\
        \ On the second call, specify <code>test</code> for the value of <code>DatasetType</code>.\
        \ </p> <p>This operation requires permissions to perform the <code>lookoutvision:CreateDataset</code>\
        \ operation.</p>"
      operationId: CreateDataset
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project in which you want to create a dataset.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: "<p>ClientToken is an idempotency token that ensures a call to\
          \ <code>CreateDataset</code> completes only once. You choose the value to\
          \ pass. For example, An issue might prevent you from getting a response\
          \ from <code>CreateDataset</code>. In this case, safely retry your call\
          \ to <code>CreateDataset</code> by using the same <code>ClientToken</code>\
          \ parameter value.</p> <p>If you don't supply a value for <code>ClientToken</code>,\
          \ the AWS SDK you are using inserts a value for you. This prevents retries\
          \ after a network error from making multiple dataset creation requests.\
          \ You'll need to provide your own value for other use cases. </p> <p>An\
          \ error occurs if the other input parameters are not the same as in the\
          \ first request. Using a different value for <code>ClientToken</code> is\
          \ considered a new call to <code>CreateDataset</code>. An idempotency token\
          \ is active for 8 hours. </p>"
        explode: false
        in: header
        name: X-Amzn-Client-Token
        required: false
        schema:
          maxLength: 64
          minLength: 1
          pattern: "^[a-zA-Z0-9-]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataset_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDatasetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /2020-11-20/projects/{projectName}/models:
    get:
      description: <p>Lists the versions of a model in an Amazon Lookout for Vision
        project.</p> <p>The <code>ListModels</code> operation is eventually consistent.
        Recent calls to <code>CreateModel</code> might take a while to appear in the
        response from <code>ListProjects</code>.</p> <p>This operation requires permissions
        to perform the <code>lookoutvision:ListModels</code> operation.</p>
      operationId: ListModels
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project that contains the model versions that
          you want to list.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: "If the previous response was incomplete (because there is more\
          \ data to retrieve), Amazon Lookout for Vision returns a pagination token\
          \ in the response. You can use this pagination token to retrieve the next\
          \ set of models."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 2048
          pattern: "^[a-zA-Z0-9\\/\\+\\=]{0,2048}$"
          type: string
        style: form
      - description: "The maximum number of results to return per paginated call.\
          \ The largest value you can specify is 100. If you specify a value greater\
          \ than 100, a ValidationException error occurs. The default value is 100."
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
    post:
      description: "<p>Creates a new version of a model within an an Amazon Lookout\
        \ for Vision project. <code>CreateModel</code> is an asynchronous operation\
        \ in which Amazon Lookout for Vision trains, tests, and evaluates a new version\
        \ of a model. </p> <p>To get the current status, check the <code>Status</code>\
        \ field returned in the response from <a>DescribeModel</a>.</p> <p>If the\
        \ project has a single dataset, Amazon Lookout for Vision internally splits\
        \ the dataset to create a training and a test dataset. If the project has\
        \ a training and a test dataset, Lookout for Vision uses the respective datasets\
        \ to train and test the model. </p> <p>After training completes, the evaluation\
        \ metrics are stored at the location specified in <code>OutputConfig</code>.\
        \ </p> <p>This operation requires permissions to perform the <code>lookoutvision:CreateModel</code>\
        \ operation. If you want to tag your model, you also require permission to\
        \ the <code>lookoutvision:TagResource</code> operation.</p>"
      operationId: CreateModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project in which you want to create a model version.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: "<p>ClientToken is an idempotency token that ensures a call to\
          \ <code>CreateModel</code> completes only once. You choose the value to\
          \ pass. For example, An issue might prevent you from getting a response\
          \ from <code>CreateModel</code>. In this case, safely retry your call to\
          \ <code>CreateModel</code> by using the same <code>ClientToken</code> parameter\
          \ value. </p> <p>If you don't supply a value for <code>ClientToken</code>,\
          \ the AWS SDK you are using inserts a value for you. This prevents retries\
          \ after a network error from starting multiple training jobs. You'll need\
          \ to provide your own value for other use cases. </p> <p>An error occurs\
          \ if the other input parameters are not the same as in the first request.\
          \ Using a different value for <code>ClientToken</code> is considered a new\
          \ call to <code>CreateModel</code>. An idempotency token is active for 8\
          \ hours.</p>"
        explode: false
        in: header
        name: X-Amzn-Client-Token
        required: false
        schema:
          maxLength: 64
          minLength: 1
          pattern: "^[a-zA-Z0-9-]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModel_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModelResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /2020-11-20/projects:
    get:
      description: <p>Lists the Amazon Lookout for Vision projects in your AWS account
        that are in the AWS Region in which you call <code>ListProjects</code>.</p>
        <p>The <code>ListProjects</code> operation is eventually consistent. Recent
        calls to <code>CreateProject</code> and <code>DeleteProject</code> might take
        a while to appear in the response from <code>ListProjects</code>.</p> <p>This
        operation requires permissions to perform the <code>lookoutvision:ListProjects</code>
        operation.</p>
      operationId: ListProjects
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "If the previous response was incomplete (because there is more\
          \ data to retrieve), Amazon Lookout for Vision returns a pagination token\
          \ in the response. You can use this pagination token to retrieve the next\
          \ set of projects."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 2048
          pattern: "^[a-zA-Z0-9\\/\\+\\=]{0,2048}$"
          type: string
        style: form
      - description: "The maximum number of results to return per paginated call.\
          \ The largest value you can specify is 100. If you specify a value greater\
          \ than 100, a ValidationException error occurs. The default value is 100."
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProjectsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
    post:
      description: "<p>Creates an empty Amazon Lookout for Vision project. After you\
        \ create the project, add a dataset by calling <a>CreateDataset</a>.</p> <p>This\
        \ operation requires permissions to perform the <code>lookoutvision:CreateProject</code>\
        \ operation.</p>"
      operationId: CreateProject
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>ClientToken is an idempotency token that ensures a call to\
          \ <code>CreateProject</code> completes only once. You choose the value to\
          \ pass. For example, An issue might prevent you from getting a response\
          \ from <code>CreateProject</code>. In this case, safely retry your call\
          \ to <code>CreateProject</code> by using the same <code>ClientToken</code>\
          \ parameter value. </p> <p>If you don't supply a value for <code>ClientToken</code>,\
          \ the AWS SDK you are using inserts a value for you. This prevents retries\
          \ after a network error from making multiple project creation requests.\
          \ You'll need to provide your own value for other use cases. </p> <p>An\
          \ error occurs if the other input parameters are not the same as in the\
          \ first request. Using a different value for <code>ClientToken</code> is\
          \ considered a new call to <code>CreateProject</code>. An idempotency token\
          \ is active for 8 hours.</p>"
        explode: false
        in: header
        name: X-Amzn-Client-Token
        required: false
        schema:
          maxLength: 64
          minLength: 1
          pattern: "^[a-zA-Z0-9-]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProject_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProjectResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /2020-11-20/projects/{projectName}/datasets/{datasetType}:
    delete:
      description: "<p>Deletes an existing Amazon Lookout for Vision <code>dataset</code>.\
        \ </p> <p>If your the project has a single dataset, you must create a new\
        \ dataset before you can create a model.</p> <p>If you project has a training\
        \ dataset and a test dataset consider the following. </p> <ul> <li> <p>If\
        \ you delete the test dataset, your project reverts to a single dataset project.\
        \ If you then train the model, Amazon Lookout for Vision internally splits\
        \ the remaining dataset into a training and test dataset.</p> </li> <li> <p>If\
        \ you delete the training dataset, you must create a training dataset before\
        \ you can create a model.</p> </li> </ul> <p>This operation requires permissions\
        \ to perform the <code>lookoutvision:DeleteDataset</code> operation.</p>"
      operationId: DeleteDataset
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project that contains the dataset that you want
          to delete.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: "The type of the dataset to delete. Specify <code>train</code>\
          \ to delete the training dataset. Specify <code>test</code> to delete the\
          \ test dataset. To delete the dataset in a single dataset project, specify\
          \ <code>train</code>."
        explode: false
        in: path
        name: datasetType
        required: true
        schema:
          maxLength: 10
          minLength: 1
          pattern: train|test
          type: string
        style: simple
      - description: "<p>ClientToken is an idempotency token that ensures a call to\
          \ <code>DeleteDataset</code> completes only once. You choose the value to\
          \ pass. For example, An issue might prevent you from getting a response\
          \ from <code>DeleteDataset</code>. In this case, safely retry your call\
          \ to <code>DeleteDataset</code> by using the same <code>ClientToken</code>\
          \ parameter value. </p> <p>If you don't supply a value for <code>ClientToken</code>,\
          \ the AWS SDK you are using inserts a value for you. This prevents retries\
          \ after a network error from making multiple deletetion requests. You'll\
          \ need to provide your own value for other use cases. </p> <p>An error occurs\
          \ if the other input parameters are not the same as in the first request.\
          \ Using a different value for <code>ClientToken</code> is considered a new\
          \ call to <code>DeleteDataset</code>. An idempotency token is active for\
          \ 8 hours.</p>"
        explode: false
        in: header
        name: X-Amzn-Client-Token
        required: false
        schema:
          maxLength: 64
          minLength: 1
          pattern: "^[a-zA-Z0-9-]+$"
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDatasetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
    get:
      description: <p>Describe an Amazon Lookout for Vision dataset.</p> <p>This operation
        requires permissions to perform the <code>lookoutvision:DescribeDataset</code>
        operation.</p>
      operationId: DescribeDataset
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project that contains the dataset that you want
          to describe.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: "The type of the dataset to describe. Specify <code>train</code>\
          \ to describe the training dataset. Specify <code>test</code> to describe\
          \ the test dataset. If you have a single dataset project, specify <code>train</code> "
        explode: false
        in: path
        name: datasetType
        required: true
        schema:
          maxLength: 10
          minLength: 1
          pattern: train|test
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeDatasetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
  /2020-11-20/projects/{projectName}/models/{modelVersion}:
    delete:
      description: "<p>Deletes an Amazon Lookout for Vision model. You can't delete\
        \ a running model. To stop a running model, use the <a>StopModel</a> operation.</p>\
        \ <p>It might take a few seconds to delete a model. To determine if a model\
        \ has been deleted, call <a>ListModels</a> and check if the version of the\
        \ model (<code>ModelVersion</code>) is in the <code>Models</code> array. </p>\
        \ <p/> <p>This operation requires permissions to perform the <code>lookoutvision:DeleteModel</code>\
        \ operation.</p>"
      operationId: DeleteModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project that contains the model that you want
          to delete.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: The version of the model that you want to delete.
        explode: false
        in: path
        name: modelVersion
        required: true
        schema:
          maxLength: 10
          minLength: 1
          pattern: "([1-9][0-9]*)"
          type: string
        style: simple
      - description: "<p>ClientToken is an idempotency token that ensures a call to\
          \ <code>DeleteModel</code> completes only once. You choose the value to\
          \ pass. For example, an issue might prevent you from getting a response\
          \ from <code>DeleteModel</code>. In this case, safely retry your call to\
          \ <code>DeleteModel</code> by using the same <code>ClientToken</code> parameter\
          \ value.</p> <p>If you don't supply a value for ClientToken, the AWS SDK\
          \ you are using inserts a value for you. This prevents retries after a network\
          \ error from making multiple model deletion requests. You'll need to provide\
          \ your own value for other use cases. </p> <p>An error occurs if the other\
          \ input parameters are not the same as in the first request. Using a different\
          \ value for <code>ClientToken</code> is considered a new call to <code>DeleteModel</code>.\
          \ An idempotency token is active for 8 hours.</p>"
        explode: false
        in: header
        name: X-Amzn-Client-Token
        required: false
        schema:
          maxLength: 64
          minLength: 1
          pattern: "^[a-zA-Z0-9-]+$"
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteModelResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
    get:
      description: <p>Describes a version of an Amazon Lookout for Vision model.</p>
        <p>This operation requires permissions to perform the <code>lookoutvision:DescribeModel</code>
        operation.</p>
      operationId: DescribeModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The project that contains the version of a model that you want
          to describe.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: The version of the model that you want to describe.
        explode: false
        in: path
        name: modelVersion
        required: true
        schema:
          maxLength: 10
          minLength: 1
          pattern: "([1-9][0-9]*|latest)"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeModelResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
  /2020-11-20/projects/{projectName}:
    delete:
      description: "<p>Deletes an Amazon Lookout for Vision project.</p> <p>To delete\
        \ a project, you must first delete each version of the model associated with\
        \ the project. To delete a model use the <a>DeleteModel</a> operation.</p>\
        \ <p>You also have to delete the dataset(s) associated with the model. For\
        \ more information, see <a>DeleteDataset</a>. The images referenced by the\
        \ training and test datasets aren't deleted. </p> <p>This operation requires\
        \ permissions to perform the <code>lookoutvision:DeleteProject</code> operation.</p>"
      operationId: DeleteProject
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project to delete.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: "<p>ClientToken is an idempotency token that ensures a call to\
          \ <code>DeleteProject</code> completes only once. You choose the value to\
          \ pass. For example, An issue might prevent you from getting a response\
          \ from <code>DeleteProject</code>. In this case, safely retry your call\
          \ to <code>DeleteProject</code> by using the same <code>ClientToken</code>\
          \ parameter value. </p> <p>If you don't supply a value for <code>ClientToken</code>,\
          \ the AWS SDK you are using inserts a value for you. This prevents retries\
          \ after a network error from making multiple project deletion requests.\
          \ You'll need to provide your own value for other use cases. </p> <p>An\
          \ error occurs if the other input parameters are not the same as in the\
          \ first request. Using a different value for <code>ClientToken</code> is\
          \ considered a new call to <code>DeleteProject</code>. An idempotency token\
          \ is active for 8 hours.</p>"
        explode: false
        in: header
        name: X-Amzn-Client-Token
        required: false
        schema:
          maxLength: 64
          minLength: 1
          pattern: "^[a-zA-Z0-9-]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProjectResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
    get:
      description: <p>Describes an Amazon Lookout for Vision project.</p> <p>This
        operation requires permissions to perform the <code>lookoutvision:DescribeProject</code>
        operation.</p>
      operationId: DescribeProject
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project that you want to describe.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeProjectResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
  /2020-11-20/projects/{projectName}/modelpackagingjobs/{jobName}:
    get:
      description: "<p>Describes an Amazon Lookout for Vision model packaging job.\
        \ </p> <p>This operation requires permissions to perform the <code>lookoutvision:DescribeModelPackagingJob</code>\
        \ operation.</p> <p>For more information, see <i>Using your Amazon Lookout\
        \ for Vision model on an edge device</i> in the Amazon Lookout for Vision\
        \ Developer Guide. </p>"
      operationId: DescribeModelPackagingJob
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The name of the project that contains the model packaging job
          that you want to describe. '
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: 'The job name for the model packaging job. '
        explode: false
        in: path
        name: jobName
        required: true
        schema:
          maxLength: 64
          minLength: 1
          pattern: "[a-zA-Z0-9-]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeModelPackagingJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
  /2020-11-20/projects/{projectName}/models/{modelVersion}/detect#Content-Type:
    post:
      description: "<p>Detects anomalies in an image that you supply. </p> <p>The\
        \ response from <code>DetectAnomalies</code> includes a boolean prediction\
        \ that the image contains one or more anomalies and a confidence value for\
        \ the prediction. If the model is an image segmentation model, the response\
        \ also includes segmentation information for each type of anomaly found in\
        \ the image.</p> <note> <p>Before calling <code>DetectAnomalies</code>, you\
        \ must first start your model with the <a>StartModel</a> operation. You are\
        \ charged for the amount of time, in minutes, that a model runs and for the\
        \ number of anomaly detection units that your model uses. If you are not using\
        \ a model, use the <a>StopModel</a> operation to stop your model. </p> </note>\
        \ <p>For more information, see <i>Detecting anomalies in an image</i> in the\
        \ Amazon Lookout for Vision developer guide.</p> <p>This operation requires\
        \ permissions to perform the <code>lookoutvision:DetectAnomalies</code> operation.</p>"
      operationId: DetectAnomalies
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project that contains the model version that
          you want to use.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: The version of the model that you want to use.
        explode: false
        in: path
        name: modelVersion
        required: true
        schema:
          maxLength: 10
          minLength: 1
          pattern: "([1-9][0-9]*|latest)"
          type: string
        style: simple
      - description: 'The type of the image passed in <code>Body</code>. Valid values
          are <code>image/png</code> (PNG format images) and <code>image/jpeg</code>
          (JPG format images). '
        explode: false
        in: header
        name: Content-Type
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: .*
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetectAnomalies_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetectAnomaliesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-content-type: application/json
      x-accepts:
      - application/json
  /2020-11-20/projects/{projectName}/datasets/{datasetType}/entries:
    get:
      description: "<p>Lists the JSON Lines within a dataset. An Amazon Lookout for\
        \ Vision JSON Line contains the anomaly information for a single image, including\
        \ the image location and the assigned label.</p> <p>This operation requires\
        \ permissions to perform the <code>lookoutvision:ListDatasetEntries</code>\
        \ operation.</p>"
      operationId: ListDatasetEntries
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project that contains the dataset that you want
          to list.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: "The type of the dataset that you want to list. Specify <code>train</code>\
          \ to list the training dataset. Specify <code>test</code> to list the test\
          \ dataset. If you have a single dataset project, specify <code>train</code>."
        explode: false
        in: path
        name: datasetType
        required: true
        schema:
          maxLength: 10
          minLength: 1
          pattern: train|test
          type: string
        style: simple
      - description: "Specify <code>true</code> to include labeled entries, otherwise\
          \ specify <code>false</code>. If you don't specify a value, Lookout for\
          \ Vision returns all entries."
        explode: true
        in: query
        name: labeled
        required: false
        schema:
          type: boolean
        style: form
      - description: "Specify <code>normal</code> to include only normal images. Specify\
          \ <code>anomaly</code> to only include anomalous entries. If you don't specify\
          \ a value, Amazon Lookout for Vision returns normal and anomalous images."
        explode: true
        in: query
        name: anomalyClass
        required: false
        schema:
          maxLength: 10
          minLength: 1
          pattern: (normal|anomaly)
          type: string
        style: form
      - description: "Only includes entries before the specified date in the response.\
          \ For example, <code>2020-06-23T00:00:00</code>."
        explode: true
        in: query
        name: createdBefore
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: "Only includes entries after the specified date in the response.\
          \ For example, <code>2020-06-23T00:00:00</code>."
        explode: true
        in: query
        name: createdAfter
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: "If the previous response was incomplete (because there is more\
          \ data to retrieve), Amazon Lookout for Vision returns a pagination token\
          \ in the response. You can use this pagination token to retrieve the next\
          \ set of dataset entries."
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 2048
          pattern: "^[a-zA-Z0-9\\/\\+\\=]{0,2048}$"
          type: string
        style: form
      - description: "The maximum number of results to return per paginated call.\
          \ The largest value you can specify is 100. If you specify a value greater\
          \ than 100, a ValidationException error occurs. The default value is 100."
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Perform a "contains" search on the values of the <code>source-ref</code>
          key within the dataset. For example a value of "IMG_17" returns all JSON
          Lines where the <code>source-ref</code> key value matches <i>*IMG_17*</i>.
        explode: true
        in: query
        name: sourceRefContains
        required: false
        schema:
          maxLength: 2048
          minLength: 1
          pattern: .*\S.*
          type: string
        style: form
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatasetEntriesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
    patch:
      description: "<p>Adds or updates one or more JSON Line entries in a dataset.\
        \ A JSON Line includes information about an image used for training or testing\
        \ an Amazon Lookout for Vision model.</p> <p>To update an existing JSON Line,\
        \ use the <code>source-ref</code> field to identify the JSON Line. The JSON\
        \ line that you supply replaces the existing JSON line. Any existing annotations\
        \ that are not in the new JSON line are removed from the dataset. </p> <p>For\
        \ more information, see <i>Defining JSON lines for anomaly classification</i>\
        \ in the Amazon Lookout for Vision Developer Guide. </p> <note> <p>The images\
        \ you reference in the <code>source-ref</code> field of a JSON line, must\
        \ be in the same S3 bucket as the existing images in the dataset. </p> </note>\
        \ <p>Updating a dataset might take a while to complete. To check the current\
        \ status, call <a>DescribeDataset</a> and check the <code>Status</code> field\
        \ in the response.</p> <p>This operation requires permissions to perform the\
        \ <code>lookoutvision:UpdateDatasetEntries</code> operation.</p>"
      operationId: UpdateDatasetEntries
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project that contains the dataset that you want
          to update.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: "The type of the dataset that you want to update. Specify <code>train</code>\
          \ to update the training dataset. Specify <code>test</code> to update the\
          \ test dataset. If you have a single dataset project, specify <code>train</code>."
        explode: false
        in: path
        name: datasetType
        required: true
        schema:
          maxLength: 10
          minLength: 1
          pattern: train|test
          type: string
        style: simple
      - description: "<p>ClientToken is an idempotency token that ensures a call to\
          \ <code>UpdateDatasetEntries</code> completes only once. You choose the\
          \ value to pass. For example, An issue might prevent you from getting a\
          \ response from <code>UpdateDatasetEntries</code>. In this case, safely\
          \ retry your call to <code>UpdateDatasetEntries</code> by using the same\
          \ <code>ClientToken</code> parameter value.</p> <p>If you don't supply a\
          \ value for <code>ClientToken</code>, the AWS SDK you are using inserts\
          \ a value for you. This prevents retries after a network error from making\
          \ multiple updates with the same dataset entries. You'll need to provide\
          \ your own value for other use cases. </p> <p>An error occurs if the other\
          \ input parameters are not the same as in the first request. Using a different\
          \ value for <code>ClientToken</code> is considered a new call to <code>UpdateDatasetEntries</code>.\
          \ An idempotency token is active for 8 hours. </p>"
        explode: false
        in: header
        name: X-Amzn-Client-Token
        required: false
        schema:
          maxLength: 64
          minLength: 1
          pattern: "^[a-zA-Z0-9-]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatasetEntries_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDatasetEntriesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-content-type: application/json
      x-accepts:
      - application/json
  /2020-11-20/projects/{projectName}/modelpackagingjobs:
    get:
      description: "<p> Lists the model packaging jobs created for an Amazon Lookout\
        \ for Vision project. </p> <p>This operation requires permissions to perform\
        \ the <code>lookoutvision:ListModelPackagingJobs</code> operation. </p> <p>For\
        \ more information, see <i>Using your Amazon Lookout for Vision model on an\
        \ edge device</i> in the Amazon Lookout for Vision Developer Guide. </p>"
      operationId: ListModelPackagingJobs
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: ' The name of the project for which you want to list the model
          packaging jobs. '
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: "If the previous response was incomplete (because there is more\
          \ results to retrieve), Amazon Lookout for Vision returns a pagination token\
          \ in the response. You can use this pagination token to retrieve the next\
          \ set of results. "
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 2048
          pattern: "^[a-zA-Z0-9\\/\\+\\=]{0,2048}$"
          type: string
        style: form
      - description: "The maximum number of results to return per paginated call.\
          \ The largest value you can specify is 100. If you specify a value greater\
          \ than 100, a ValidationException error occurs. The default value is 100. "
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelPackagingJobsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
    post:
      description: "<p>Starts an Amazon Lookout for Vision model packaging job. A\
        \ model packaging job creates an AWS IoT Greengrass component for a Lookout\
        \ for Vision model. You can use the component to deploy your model to an edge\
        \ device managed by Greengrass. </p> <p>Use the <a>DescribeModelPackagingJob</a>\
        \ API to determine the current status of the job. The model packaging job\
        \ is complete if the value of <code>Status</code> is <code>SUCCEEDED</code>.</p>\
        \ <p>To deploy the component to the target device, use the component name\
        \ and component version with the AWS IoT Greengrass <a href=\"https://docs.aws.amazon.com/greengrass/v2/APIReference/API_CreateDeployment.html\"\
        >CreateDeployment</a> API.</p> <p>This operation requires the following permissions:</p>\
        \ <ul> <li> <p> <code>lookoutvision:StartModelPackagingJob</code> </p> </li>\
        \ <li> <p> <code>s3:PutObject</code> </p> </li> <li> <p> <code>s3:GetBucketLocation</code>\
        \ </p> </li> <li> <p> <code>kms:GenerateDataKey</code> </p> </li> <li> <p>\
        \ <code>greengrass:CreateComponentVersion</code> </p> </li> <li> <p> <code>greengrass:DescribeComponent</code>\
        \ </p> </li> <li> <p>(Optional) <code>greengrass:TagResource</code>. Only\
        \ required if you want to tag the component.</p> </li> </ul> <p>For more information,\
        \ see <i>Using your Amazon Lookout for Vision model on an edge device</i>\
        \ in the Amazon Lookout for Vision Developer Guide. </p>"
      operationId: StartModelPackagingJob
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: ' The name of the project which contains the version of the model
          that you want to package. '
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: "<p>ClientToken is an idempotency token that ensures a call to\
          \ <code>StartModelPackagingJob</code> completes only once. You choose the\
          \ value to pass. For example, An issue might prevent you from getting a\
          \ response from <code>StartModelPackagingJob</code>. In this case, safely\
          \ retry your call to <code>StartModelPackagingJob</code> by using the same\
          \ <code>ClientToken</code> parameter value.</p> <p>If you don't supply a\
          \ value for <code>ClientToken</code>, the AWS SDK you are using inserts\
          \ a value for you. This prevents retries after a network error from making\
          \ multiple dataset creation requests. You'll need to provide your own value\
          \ for other use cases. </p> <p>An error occurs if the other input parameters\
          \ are not the same as in the first request. Using a different value for\
          \ <code>ClientToken</code> is considered a new call to <code>StartModelPackagingJob</code>.\
          \ An idempotency token is active for 8 hours. </p>"
        explode: false
        in: header
        name: X-Amzn-Client-Token
        required: false
        schema:
          maxLength: 64
          minLength: 1
          pattern: "^[a-zA-Z0-9-]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartModelPackagingJob_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartModelPackagingJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /2020-11-20/tags/{resourceArn}:
    get:
      description: <p>Returns a list of tags attached to the specified Amazon Lookout
        for Vision model.</p> <p>This operation requires permissions to perform the
        <code>lookoutvision:ListTagsForResource</code> operation.</p>
      operationId: ListTagsForResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The Amazon Resource Name (ARN) of the model for which you want
          to list tags. '
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
    post:
      description: "<p>Adds one or more key-value tags to an Amazon Lookout for Vision\
        \ model. For more information, see <i>Tagging a model</i> in the <i>Amazon\
        \ Lookout for Vision Developer Guide</i>. </p> <p>This operation requires\
        \ permissions to perform the <code>lookoutvision:TagResource</code> operation.</p>"
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the model to assign the tags.
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /2020-11-20/projects/{projectName}/models/{modelVersion}/start:
    post:
      description: "<p>Starts the running of the version of an Amazon Lookout for\
        \ Vision model. Starting a model takes a while to complete. To check the current\
        \ state of the model, use <a>DescribeModel</a>.</p> <p>A model is ready to\
        \ use when its status is <code>HOSTED</code>.</p> <p>Once the model is running,\
        \ you can detect custom labels in new images by calling <a>DetectAnomalies</a>.</p>\
        \ <note> <p>You are charged for the amount of time that the model is running.\
        \ To stop a running model, call <a>StopModel</a>.</p> </note> <p>This operation\
        \ requires permissions to perform the <code>lookoutvision:StartModel</code>\
        \ operation.</p>"
      operationId: StartModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project that contains the model that you want
          to start.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: The version of the model that you want to start.
        explode: false
        in: path
        name: modelVersion
        required: true
        schema:
          maxLength: 10
          minLength: 1
          pattern: "([1-9][0-9]*|latest)"
          type: string
        style: simple
      - description: "<p>ClientToken is an idempotency token that ensures a call to\
          \ <code>StartModel</code> completes only once. You choose the value to pass.\
          \ For example, An issue might prevent you from getting a response from <code>StartModel</code>.\
          \ In this case, safely retry your call to <code>StartModel</code> by using\
          \ the same <code>ClientToken</code> parameter value. </p> <p>If you don't\
          \ supply a value for <code>ClientToken</code>, the AWS SDK you are using\
          \ inserts a value for you. This prevents retries after a network error from\
          \ making multiple start requests. You'll need to provide your own value\
          \ for other use cases. </p> <p>An error occurs if the other input parameters\
          \ are not the same as in the first request. Using a different value for\
          \ <code>ClientToken</code> is considered a new call to <code>StartModel</code>.\
          \ An idempotency token is active for 8 hours. </p>"
        explode: false
        in: header
        name: X-Amzn-Client-Token
        required: false
        schema:
          maxLength: 64
          minLength: 1
          pattern: "^[a-zA-Z0-9-]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartModel_request'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartModelResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /2020-11-20/projects/{projectName}/models/{modelVersion}/stop:
    post:
      description: "<p>Stops the hosting of a running model. The operation might take\
        \ a while to complete. To check the current status, call <a>DescribeModel</a>.\
        \ </p> <p>After the model hosting stops, the <code>Status</code> of the model\
        \ is <code>TRAINED</code>.</p> <p>This operation requires permissions to perform\
        \ the <code>lookoutvision:StopModel</code> operation.</p>"
      operationId: StopModel
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the project that contains the model that you want
          to stop.
        explode: false
        in: path
        name: projectName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
        style: simple
      - description: The version of the model that you want to stop.
        explode: false
        in: path
        name: modelVersion
        required: true
        schema:
          maxLength: 10
          minLength: 1
          pattern: "([1-9][0-9]*|latest)"
          type: string
        style: simple
      - description: "<p>ClientToken is an idempotency token that ensures a call to\
          \ <code>StopModel</code> completes only once. You choose the value to pass.\
          \ For example, An issue might prevent you from getting a response from <code>StopModel</code>.\
          \ In this case, safely retry your call to <code>StopModel</code> by using\
          \ the same <code>ClientToken</code> parameter value.</p> <p>If you don't\
          \ supply a value for <code>ClientToken</code>, the AWS SDK you are using\
          \ inserts a value for you. This prevents retries after a network error from\
          \ making multiple stop requests. You'll need to provide your own value for\
          \ other use cases. </p> <p>An error occurs if the other input parameters\
          \ are not the same as in the first request. Using a different value for\
          \ <code>ClientToken</code> is considered a new call to <code>StopModel</code>.\
          \ An idempotency token is active for 8 hours. </p>"
        explode: false
        in: header
        name: X-Amzn-Client-Token
        required: false
        schema:
          maxLength: 64
          minLength: 1
          pattern: "^[a-zA-Z0-9-]+$"
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopModelResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
  /2020-11-20/tags/{resourceArn}#tagKeys:
    delete:
      description: "<p>Removes one or more tags from an Amazon Lookout for Vision\
        \ model. For more information, see <i>Tagging a model</i> in the <i>Amazon\
        \ Lookout for Vision Developer Guide</i>. </p> <p>This operation requires\
        \ permissions to perform the <code>lookoutvision:UntagResource</code> operation.</p>"
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'The Amazon Resource Name (ARN) of the model from which you want
          to remove tags. '
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 1011
          minLength: 1
          type: string
        style: simple
      - description: A list of the keys of the tags that you want to remove.
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/TagKey'
          maxItems: 200
          minItems: 0
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    CreateDatasetResponse:
      example:
        DatasetMetadata:
          Status: ""
          CreationTimestamp: ""
          DatasetType: ""
          StatusMessage: ""
      properties:
        DatasetMetadata:
          $ref: '#/components/schemas/CreateDatasetResponse_DatasetMetadata'
      type: object
    DatasetGroundTruthManifest:
      description: Location information about a manifest file. You can use a manifest
        file to create a dataset.
      properties:
        S3Object:
          $ref: '#/components/schemas/DatasetGroundTruthManifest_S3Object'
      type: object
    AccessDeniedException: {}
    InternalServerException: {}
    ValidationException: {}
    ConflictException: {}
    ResourceNotFoundException: {}
    ThrottlingException: {}
    ServiceQuotaExceededException: {}
    CreateModelResponse:
      example:
        ModelMetadata:
          ModelArn: ""
          Status: ""
          Description: ""
          CreationTimestamp: ""
          ModelVersion: ""
          Performance:
            Precision: ""
            F1Score: ""
            Recall: ""
          StatusMessage: ""
      properties:
        ModelMetadata:
          $ref: '#/components/schemas/CreateModelResponse_ModelMetadata'
      type: object
    S3Location:
      description: Information about the location of training output or the output
        of a model packaging job.
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          - description: "The S3 bucket that contains the training or model packaging\
              \ job output. If you are training a model, the bucket must in your AWS\
              \ account. If you use an S3 bucket for a model packaging job, the S3\
              \ bucket must be in the same AWS Region and AWS account in which you\
              \ use AWS IoT Greengrass."
        Prefix:
          allOf:
          - $ref: '#/components/schemas/S3KeyPrefix'
          - description: "The path of the folder, within the S3 bucket, that contains\
              \ the output."
      required:
      - Bucket
      type: object
    Tag:
      description: A key and value pair that is attached to the specified Amazon Lookout
        for Vision model.
      properties:
        Key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          - description: The key of the tag that is attached to the specified model.
        Value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          - description: The value of the tag that is attached to the specified model.
      required:
      - Key
      - Value
      type: object
    CreateProjectResponse:
      example:
        ProjectMetadata:
          ProjectArn: ""
          CreationTimestamp: ""
          ProjectName: ""
      properties:
        ProjectMetadata:
          $ref: '#/components/schemas/CreateProjectResponse_ProjectMetadata'
      type: object
    DeleteDatasetResponse:
      properties: {}
      type: object
    DeleteModelResponse:
      example:
        ModelArn: ""
      properties:
        ModelArn:
          allOf:
          - $ref: '#/components/schemas/ModelArn'
          - description: The Amazon Resource Name (ARN) of the model that was deleted.
      type: object
    DeleteProjectResponse:
      example:
        ProjectArn: ""
      properties:
        ProjectArn:
          allOf:
          - $ref: '#/components/schemas/ProjectArn'
          - description: The Amazon Resource Name (ARN) of the project that was deleted.
      type: object
    DescribeDatasetResponse:
      example:
        DatasetDescription:
          Status: ""
          CreationTimestamp: ""
          ProjectName: ""
          LastUpdatedTimestamp: ""
          DatasetType: ""
          ImageStats:
            Total: ""
            Labeled: ""
            Anomaly: ""
            Normal: ""
          StatusMessage: ""
      properties:
        DatasetDescription:
          $ref: '#/components/schemas/DescribeDatasetResponse_DatasetDescription'
      type: object
    DescribeModelResponse:
      example:
        ModelDescription:
          ModelArn: ""
          Status: ""
          Description: ""
          CreationTimestamp: ""
          KmsKeyId: ""
          MaxInferenceUnits: ""
          EvaluationManifest:
            Bucket: ""
            Key: ""
          EvaluationResult:
            Bucket: ""
            Key: ""
          StatusMessage: ""
          MinInferenceUnits: ""
          OutputConfig:
            S3Location:
              Bucket: ""
              Prefix: ""
          ModelVersion: ""
          Performance:
            Precision: ""
            F1Score: ""
            Recall: ""
          EvaluationEndTimestamp: ""
      properties:
        ModelDescription:
          $ref: '#/components/schemas/DescribeModelResponse_ModelDescription'
      type: object
    DescribeModelPackagingJobResponse:
      example:
        ModelPackagingDescription:
          Status: ""
          CreationTimestamp: ""
          ProjectName: ""
          ModelPackagingConfiguration:
            Greengrass:
              ComponentDescription: ""
              CompilerOptions: ""
              S3OutputLocation:
                Bucket: ""
                Prefix: ""
              TargetPlatform:
                Os: ""
                Arch: ""
                Accelerator: ""
              ComponentName: ""
              Tags: ""
              TargetDevice: ""
              ComponentVersion: ""
          LastUpdatedTimestamp: ""
          JobName: ""
          ModelPackagingMethod: ""
          ModelVersion: ""
          ModelPackagingOutputDetails:
            Greengrass:
              ComponentName: ""
              ComponentVersionArn: ""
              ComponentVersion: ""
          ModelPackagingJobDescription: ""
          StatusMessage: ""
      properties:
        ModelPackagingDescription:
          $ref: '#/components/schemas/DescribeModelPackagingJobResponse_ModelPackagingDescription'
      type: object
    DescribeProjectResponse:
      example:
        ProjectDescription:
          Datasets: ""
          ProjectArn: ""
          CreationTimestamp: ""
          ProjectName: ""
      properties:
        ProjectDescription:
          $ref: '#/components/schemas/DescribeProjectResponse_ProjectDescription'
      type: object
    DetectAnomaliesResponse:
      example:
        DetectAnomalyResult:
          Confidence: ""
          Source:
            Type: ""
          IsAnomalous: ""
          AnomalyMask: ""
          Anomalies: ""
      properties:
        DetectAnomalyResult:
          $ref: '#/components/schemas/DetectAnomaliesResponse_DetectAnomalyResult'
      type: object
    ListDatasetEntriesResponse:
      example:
        NextToken: ""
        DatasetEntries: ""
      properties:
        DatasetEntries:
          allOf:
          - $ref: '#/components/schemas/DatasetEntryList'
          - description: A list of the entries (JSON Lines) within the dataset.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "If the response is truncated, Amazon Lookout for Vision\
              \ returns this token that you can use in the subsequent request to retrieve\
              \ the next set ofdataset entries."
      type: object
    ListModelPackagingJobsResponse:
      example:
        ModelPackagingJobs: ""
        NextToken: ""
      properties:
        ModelPackagingJobs:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobsList'
          - description: ' A list of the model packaging jobs created for the specified
              Amazon Lookout for Vision project. '
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "If the previous response was incomplete (because there is\
              \ more results to retrieve), Amazon Lookout for Vision returns a pagination\
              \ token in the response. You can use this pagination token to retrieve\
              \ the next set of results. "
      type: object
    ListModelsResponse:
      example:
        NextToken: ""
        Models: ""
      properties:
        Models:
          allOf:
          - $ref: '#/components/schemas/ModelMetadataList'
          - description: 'A list of model versions in the specified project. '
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "If the response is truncated, Amazon Lookout for Vision\
              \ returns this token that you can use in the subsequent request to retrieve\
              \ the next set of models. "
      type: object
    ListProjectsResponse:
      example:
        NextToken: ""
        Projects: ""
      properties:
        Projects:
          allOf:
          - $ref: '#/components/schemas/ProjectMetadataList'
          - description: A list of projects in your AWS account.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "If the response is truncated, Amazon Lookout for Vision\
              \ returns this token that you can use in the subsequent request to retrieve\
              \ the next set of projects."
      type: object
    ListTagsForResourceResponse:
      example:
        Tags: ""
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: A map of tag keys and values attached to the specified model.
      type: object
    StartModelResponse:
      example:
        Status: ""
      properties:
        Status:
          allOf:
          - $ref: '#/components/schemas/ModelHostingStatus'
          - description: The current running status of the model.
      type: object
    StartModelPackagingJobResponse:
      example:
        JobName: ""
      properties:
        JobName:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobName'
          - description: "The job name for the model packaging job. If you don't supply\
              \ a job name in the <code>JobName</code> input parameter, the service\
              \ creates a job name for you. "
      type: object
    GreengrassConfiguration:
      description: "<p>Configuration information for the AWS IoT Greengrass component\
        \ created in a model packaging job. For more information, see <a>StartModelPackagingJob</a>.\
        \ </p> <note> <p>You can't specify a component with the same <code>ComponentName</code>\
        \ and <code>Componentversion</code> as an existing component with the same\
        \ component name and component version.</p> </note>"
      properties:
        CompilerOptions:
          allOf:
          - $ref: '#/components/schemas/CompilerOptions'
          - description: "<p>Additional compiler options for the Greengrass component.\
              \ Currently, only NVIDIA Graphics Processing Units (GPU) and CPU accelerators\
              \ are supported. If you specify <code>TargetDevice</code>, don't specify\
              \ <code>CompilerOptions</code>.</p> <p>For more information, see <i>Compiler\
              \ options</i> in the Amazon Lookout for Vision Developer Guide. </p>"
        TargetDevice:
          allOf:
          - $ref: '#/components/schemas/TargetDevice'
          - description: "The target device for the model. Currently the only supported\
              \ value is <code>jetson_xavier</code>. If you specify <code>TargetDevice</code>,\
              \ you can't specify <code>TargetPlatform</code>. "
        TargetPlatform:
          $ref: '#/components/schemas/GreengrassConfiguration_TargetPlatform'
        S3OutputLocation:
          $ref: '#/components/schemas/GreengrassConfiguration_S3OutputLocation'
        ComponentName:
          allOf:
          - $ref: '#/components/schemas/ComponentName'
          - description: ' A name for the AWS IoT Greengrass component. '
        ComponentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersion'
          - description: "A Version for the AWS IoT Greengrass component. If you don't\
              \ provide a value, a default value of <code> <i>Model Version</i>.0.0</code>\
              \ is used. "
        ComponentDescription:
          allOf:
          - $ref: '#/components/schemas/ComponentDescription'
          - description: ' A description for the AWS IoT Greengrass component. '
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: ' A set of tags (key-value pairs) that you want to attach
              to the AWS IoT Greengrass component. '
      required:
      - ComponentName
      - S3OutputLocation
      type: object
    StopModelResponse:
      example:
        Status: ""
      properties:
        Status:
          allOf:
          - $ref: '#/components/schemas/ModelHostingStatus'
          - description: The status of the model.
      type: object
    TagResourceResponse:
      properties: {}
      type: object
    UntagResourceResponse:
      properties: {}
      type: object
    TagKey:
      maxLength: 128
      minLength: 1
      pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"
      type: string
    UpdateDatasetEntriesResponse:
      example:
        Status: ""
      properties:
        Status:
          allOf:
          - $ref: '#/components/schemas/DatasetStatus'
          - description: The status of the dataset update.
      type: object
    AnomalyName:
      maxLength: 256
      minLength: 1
      pattern: "[a-zA-Z0-9]*"
      type: string
    PixelAnomaly:
      description: "Information about the pixels in an anomaly mask. For more information,\
        \ see <a>Anomaly</a>. <code>PixelAnomaly</code> is only returned by image\
        \ segmentation models."
      properties:
        TotalPercentageArea:
          allOf:
          - $ref: '#/components/schemas/Float'
          - description: The percentage area of the image that the anomaly type covers.
        Color:
          allOf:
          - $ref: '#/components/schemas/Color'
          - description: 'A hex color value for the mask that covers an anomaly type.
              Each anomaly type has a different mask color. The color maps to the
              color of the anomaly type used in the training dataset. '
      type: object
    Anomaly:
      description: "Information about an anomaly type found on an image by an image\
        \ segmentation model. For more information, see <a>DetectAnomalies</a>."
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/AnomalyName'
          - description: "The name of an anomaly type found in an image. <code>Name</code>\
              \ maps to an anomaly type in the training dataset, apart from the anomaly\
              \ type <code>background</code>. The service automatically inserts the\
              \ <code>background</code> anomaly type into the response from <code>DetectAnomalies</code>. "
        PixelAnomaly:
          $ref: '#/components/schemas/Anomaly_PixelAnomaly'
      type: object
    AnomalyClassFilter:
      maxLength: 10
      minLength: 1
      pattern: (normal|anomaly)
      type: string
    AnomalyList:
      items:
        $ref: '#/components/schemas/Anomaly'
      type: array
    AnomalyMask:
      maxLength: 5242880
      minLength: 1
      type: string
    Boolean:
      type: boolean
    ClientToken:
      maxLength: 64
      minLength: 1
      pattern: "^[a-zA-Z0-9-]+$"
      type: string
    Color:
      maxLength: 7
      minLength: 7
      pattern: "\\#[a-zA-Z0-9]{6}"
      type: string
    CompilerOptions:
      maxLength: 1024
      minLength: 3
      pattern: .*
      type: string
    ComponentDescription:
      maxLength: 256
      minLength: 1
      pattern: "[a-zA-Z0-9-_. ()':,;?]+"
      type: string
    ComponentName:
      maxLength: 128
      minLength: 1
      pattern: "[a-zA-Z0-9-_.]+"
      type: string
    ComponentVersion:
      maxLength: 64
      minLength: 1
      pattern: "^([0-9]{1,6})\\.([0-9]{1,6})\\.([0-9]{1,6})$"
      type: string
    ComponentVersionArn:
      pattern: "arn:[^:]*:greengrass:[^:]*:aws:components:[^:]+"
      type: string
    ContentType:
      maxLength: 255
      minLength: 1
      pattern: .*
      type: string
    ProjectName:
      maxLength: 255
      minLength: 1
      pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
      type: string
    DatasetType:
      maxLength: 10
      minLength: 1
      pattern: train|test
      type: string
    DatasetSource:
      description: Information about the location of a manifest file that Amazon Lookout
        for Vision uses to to create a dataset.
      properties:
        GroundTruthManifest:
          $ref: '#/components/schemas/CreateDataset_request_DatasetSource_GroundTruthManifest'
      type: object
    CreateDatasetRequest:
      example:
        DatasetType: ""
        DatasetSource:
          GroundTruthManifest:
            S3Object:
              VersionId: ""
              Bucket: ""
              Key: ""
      properties:
        DatasetType:
          allOf:
          - $ref: '#/components/schemas/DatasetType'
          - description: The type of the dataset. Specify <code>train</code> for a
              training dataset. Specify <code>test</code> for a test dataset.
        DatasetSource:
          $ref: '#/components/schemas/CreateDatasetRequest_DatasetSource'
      required:
      - DatasetType
      title: CreateDatasetRequest
      type: object
    DatasetMetadata:
      description: "Summary information for an Amazon Lookout for Vision dataset.\
        \ For more information, see <a>DescribeDataset</a> and <a>ProjectDescription</a>."
      properties:
        DatasetType:
          allOf:
          - $ref: '#/components/schemas/DatasetType'
          - description: The type of the dataset.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: 'The Unix timestamp for the date and time that the dataset
              was created. '
        Status:
          allOf:
          - $ref: '#/components/schemas/DatasetStatus'
          - description: The status for the dataset.
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/DatasetStatusMessage'
          - description: The status message for the dataset.
      type: object
    ModelDescriptionMessage:
      maxLength: 500
      minLength: 1
      pattern: "[0-9A-Za-z\\.\\-_]*"
      type: string
    OutputConfig:
      description: The S3 location where Amazon Lookout for Vision saves model training
        files.
      properties:
        S3Location:
          $ref: '#/components/schemas/CreateModel_request_OutputConfig_S3Location'
      required:
      - S3Location
      type: object
    KmsKeyId:
      maxLength: 2048
      minLength: 1
      pattern: "^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$"
      type: string
    TagList:
      items:
        $ref: '#/components/schemas/Tag'
      maxItems: 200
      minItems: 0
      type: array
    CreateModelRequest:
      example:
        Description: ""
        OutputConfig:
          S3Location:
            Bucket: ""
            Prefix: ""
        KmsKeyId: ""
        Tags: ""
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/ModelDescriptionMessage'
          - description: A description for the version of the model.
        OutputConfig:
          $ref: '#/components/schemas/CreateModelRequest_OutputConfig'
        KmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          - description: "The identifier for your AWS KMS key. The key is used to\
              \ encrypt training and test images copied into the service for model\
              \ training. Your source images are unaffected. If this parameter is\
              \ not specified, the copied images are encrypted by a key that AWS owns\
              \ and manages."
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: A set of tags (key-value pairs) that you want to attach to
              the model.
      required:
      - OutputConfig
      title: CreateModelRequest
      type: object
    ModelMetadata:
      description: Describes an Amazon Lookout for Vision model.
      properties:
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: 'The unix timestamp for the date and time that the model
              was created. '
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          - description: The version of the model.
        ModelArn:
          allOf:
          - $ref: '#/components/schemas/ModelArn'
          - description: The Amazon Resource Name (ARN) of the model.
        Description:
          allOf:
          - $ref: '#/components/schemas/ModelDescriptionMessage'
          - description: The description for the model.
        Status:
          allOf:
          - $ref: '#/components/schemas/ModelStatus'
          - description: The status of the model.
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/ModelStatusMessage'
          - description: The status message for the model.
        Performance:
          $ref: '#/components/schemas/ModelMetadata_Performance'
      type: object
    CreateProjectRequest:
      example:
        ProjectName: ""
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          - description: The name for the project.
      required:
      - ProjectName
      title: CreateProjectRequest
      type: object
    ProjectMetadata:
      description: Metadata about an Amazon Lookout for Vision project.
      properties:
        ProjectArn:
          allOf:
          - $ref: '#/components/schemas/ProjectArn'
          - description: The Amazon Resource Name (ARN) of the project.
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          - description: The name of the project.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: 'The unix timestamp for the date and time that the project
              was created. '
      type: object
    DatasetChanges:
      maxLength: 10485760
      minLength: 1
      type: string
    DateTime:
      format: date-time
      type: string
    DatasetStatus:
      enum:
      - CREATE_IN_PROGRESS
      - CREATE_COMPLETE
      - CREATE_FAILED
      - UPDATE_IN_PROGRESS
      - UPDATE_COMPLETE
      - UPDATE_FAILED_ROLLBACK_IN_PROGRESS
      - UPDATE_FAILED_ROLLBACK_COMPLETE
      - DELETE_IN_PROGRESS
      - DELETE_COMPLETE
      - DELETE_FAILED
      type: string
    DatasetStatusMessage:
      type: string
    DatasetImageStats:
      description: Statistics about the images in a dataset.
      properties:
        Total:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: The total number of images in the dataset.
        Labeled:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: The total number of labeled images.
        Normal:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: The total number of images labeled as normal.
        Anomaly:
          allOf:
          - $ref: '#/components/schemas/Integer'
          - description: the total number of images labeled as an anomaly.
      type: object
    DatasetDescription:
      description: "The description for a dataset. For more information, see <a>DescribeDataset</a>."
      properties:
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          - description: The name of the project that contains the dataset.
        DatasetType:
          allOf:
          - $ref: '#/components/schemas/DatasetType'
          - description: The type of the dataset. The value <code>train</code> represents
              a training dataset or single dataset project. The value <code>test</code>
              represents a test dataset.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: The Unix timestamp for the time and date that the dataset
              was created.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: The Unix timestamp for the date and time that the dataset
              was last updated.
        Status:
          allOf:
          - $ref: '#/components/schemas/DatasetStatus'
          - description: The status of the dataset.
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/DatasetStatusMessage'
          - description: 'The status message for the dataset. '
        ImageStats:
          $ref: '#/components/schemas/DatasetDescription_ImageStats'
      type: object
    DatasetEntry:
      maxLength: 8192
      minLength: 2
      pattern: "^\\{.*\\}$"
      type: string
    DatasetEntryList:
      items:
        $ref: '#/components/schemas/DatasetEntry'
      type: array
    InputS3Object:
      description: 'Amazon S3 Location information for an input manifest file. '
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          - description: The Amazon S3 bucket that contains the manifest.
        Key:
          allOf:
          - $ref: '#/components/schemas/S3ObjectKey'
          - description: The name and location of the manifest file withiin the bucket.
        VersionId:
          allOf:
          - $ref: '#/components/schemas/S3ObjectVersion'
          - description: The version ID of the bucket.
      required:
      - Bucket
      - Key
      type: object
    Integer:
      type: integer
    DatasetMetadataList:
      items:
        $ref: '#/components/schemas/DatasetMetadata'
      type: array
    DeleteDatasetRequest:
      properties: {}
      title: DeleteDatasetRequest
      type: object
    ModelVersionNoLatest:
      maxLength: 10
      minLength: 1
      pattern: "([1-9][0-9]*)"
      type: string
    DeleteModelRequest:
      properties: {}
      title: DeleteModelRequest
      type: object
    ModelArn:
      type: string
    DeleteProjectRequest:
      properties: {}
      title: DeleteProjectRequest
      type: object
    ProjectArn:
      type: string
    DescribeDatasetRequest:
      properties: {}
      title: DescribeDatasetRequest
      type: object
    ModelPackagingJobName:
      maxLength: 64
      minLength: 1
      pattern: "[a-zA-Z0-9-]+"
      type: string
    DescribeModelPackagingJobRequest:
      properties: {}
      title: DescribeModelPackagingJobRequest
      type: object
    ModelPackagingDescription:
      description: " Information about a model packaging job. For more information,\
        \ see <a>DescribeModelPackagingJob</a>. "
      properties:
        JobName:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobName'
          - description: ' The name of the model packaging job. '
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          - description: 'The name of the project that''s associated with a model
              that''s in the model package. '
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          - description: 'The version of the model used in the model packaging job. '
        ModelPackagingConfiguration:
          $ref: '#/components/schemas/ModelPackagingDescription_ModelPackagingConfiguration'
        ModelPackagingJobDescription:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobDescription'
          - description: 'The description for the model packaging job. '
        ModelPackagingMethod:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingMethod'
          - description: 'The AWS service used to package the job. Currently Lookout
              for Vision can package jobs with AWS IoT Greengrass. '
        ModelPackagingOutputDetails:
          $ref: '#/components/schemas/ModelPackagingDescription_ModelPackagingOutputDetails'
        Status:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobStatus'
          - description: ' The status of the model packaging job. '
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingStatusMessage'
          - description: ' The status message for the model packaging job. '
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: ' The Unix timestamp for the time and date that the model
              packaging job was created. '
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: ' The Unix timestamp for the time and date that the model
              packaging job was last updated. '
      type: object
    ModelVersion:
      maxLength: 10
      minLength: 1
      pattern: "([1-9][0-9]*|latest)"
      type: string
    DescribeModelRequest:
      properties: {}
      title: DescribeModelRequest
      type: object
    ModelDescription:
      description: Describes an Amazon Lookout for Vision model.
      properties:
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          - description: The version of the model
        ModelArn:
          allOf:
          - $ref: '#/components/schemas/ModelArn'
          - description: The Amazon Resource Name (ARN) of the model.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: 'The unix timestamp for the date and time that the model
              was created. '
        Description:
          allOf:
          - $ref: '#/components/schemas/ModelDescriptionMessage'
          - description: The description for the model.
        Status:
          allOf:
          - $ref: '#/components/schemas/ModelStatus'
          - description: The status of the model.
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/ModelStatusMessage'
          - description: The status message for the model.
        Performance:
          $ref: '#/components/schemas/ModelDescription_Performance'
        OutputConfig:
          $ref: '#/components/schemas/ModelDescription_OutputConfig'
        EvaluationManifest:
          $ref: '#/components/schemas/ModelDescription_EvaluationManifest'
        EvaluationResult:
          $ref: '#/components/schemas/ModelDescription_EvaluationResult'
        EvaluationEndTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: 'The unix timestamp for the date and time that the evaluation
              ended. '
        KmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          - description: The identifer for the AWS Key Management Service (AWS KMS)
              key that was used to encrypt the model during training.
        MinInferenceUnits:
          allOf:
          - $ref: '#/components/schemas/InferenceUnits'
          - description: "The minimum number of inference units used by the model.\
              \ For more information, see <a>StartModel</a> "
        MaxInferenceUnits:
          allOf:
          - $ref: '#/components/schemas/InferenceUnits'
          - description: "The maximum number of inference units Amazon Lookout for\
              \ Vision uses to auto-scale the model. For more information, see <a>StartModel</a>."
      type: object
    DescribeProjectRequest:
      properties: {}
      title: DescribeProjectRequest
      type: object
    ProjectDescription:
      description: "Describe an Amazon Lookout for Vision project. For more information,\
        \ see <a>DescribeProject</a>."
      properties:
        ProjectArn:
          allOf:
          - $ref: '#/components/schemas/ProjectArn'
          - description: The Amazon Resource Name (ARN) of the project.
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          - description: The name of the project.
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: 'The unix timestamp for the date and time that the project
              was created. '
        Datasets:
          allOf:
          - $ref: '#/components/schemas/DatasetMetadataList'
          - description: A list of datasets in the project.
      type: object
    Stream:
      type: string
    DetectAnomaliesRequest:
      example:
        Body: ""
      properties:
        Body:
          allOf:
          - $ref: '#/components/schemas/Stream'
          - description: 'The unencrypted image bytes that you want to analyze. '
      required:
      - Body
      title: DetectAnomaliesRequest
      type: object
    DetectAnomalyResult:
      description: "The prediction results from a call to <a>DetectAnomalies</a>.\
        \ <code>DetectAnomalyResult</code> includes classification information for\
        \ the prediction (<code>IsAnomalous</code> and <code>Confidence</code>). If\
        \ the model you use is an image segementation model, <code>DetectAnomalyResult</code>\
        \ also includes segmentation information (<code>Anomalies</code> and <code>AnomalyMask</code>).\
        \ Classification information is calculated separately from segmentation information\
        \ and you shouldn't assume a relationship between them."
      properties:
        Source:
          $ref: '#/components/schemas/DetectAnomalyResult_Source'
        IsAnomalous:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "True if Amazon Lookout for Vision classifies the image as\
              \ containing an anomaly, otherwise false."
        Confidence:
          allOf:
          - $ref: '#/components/schemas/Float'
          - description: The confidence that Lookout for Vision has in the accuracy
              of the classification in <code>IsAnomalous</code>.
        Anomalies:
          allOf:
          - $ref: '#/components/schemas/AnomalyList'
          - description: "<p>If the model is an image segmentation model, <code>Anomalies</code>\
              \ contains a list of anomaly types found in the image. There is one\
              \ entry for each type of anomaly found (even if multiple instances of\
              \ an anomaly type exist on the image). The first element in the list\
              \ is always an anomaly type representing the image background ('background')\
              \ and shouldn't be considered an anomaly. Amazon Lookout for Vision\
              \ automatically add the background anomaly type to the response, and\
              \ you don't need to declare a background anomaly type in your dataset.</p>\
              \ <p>If the list has one entry ('background'), no anomalies were found\
              \ on the image.</p> <p/> <p>An image classification model doesn't return\
              \ an <code>Anomalies</code> list. </p>"
        AnomalyMask:
          allOf:
          - $ref: '#/components/schemas/AnomalyMask'
          - description: "<p>If the model is an image segmentation model, <code>AnomalyMask</code>\
              \ contains pixel masks that covers all anomaly types found on the image.\
              \ Each anomaly type has a different mask color. To map a color to an\
              \ anomaly type, see the <code>color</code> field of the <a>PixelAnomaly</a>\
              \ object.</p> <p>An image classification model doesn't return an <code>Anomalies</code>\
              \ list. </p>"
      type: object
    ImageSource:
      description: The source for an image.
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/ImageSourceType'
          - description: The type of the image.
      type: object
    Float:
      format: float
      type: number
    TargetDevice:
      enum:
      - jetson_xavier
      type: string
    TargetPlatform:
      description: The platform on which a model runs on an AWS IoT Greengrass core
        device.
      properties:
        Os:
          allOf:
          - $ref: '#/components/schemas/TargetPlatformOs'
          - description: 'The target operating system for the model. Linux is the
              only operating system that is currently supported. '
        Arch:
          allOf:
          - $ref: '#/components/schemas/TargetPlatformArch'
          - description: 'The target architecture for the model. The currently supported
              architectures are X86_64 (64-bit version of the x86 instruction set)
              and ARM_64 (ARMv8 64-bit CPU). '
        Accelerator:
          allOf:
          - $ref: '#/components/schemas/TargetPlatformAccelerator'
          - description: "<p>The target accelerator for the model. Currently, Amazon\
              \ Lookout for Vision only supports NVIDIA (Nvidia graphics processing\
              \ unit) and CPU accelerators. If you specify NVIDIA as an accelerator,\
              \ you must also specify the <code>gpu-code</code>, <code>trt-ver</code>,\
              \ and <code>cuda-ver</code> compiler options. If you don't specify an\
              \ accelerator, Lookout for Vision uses the CPU for compilation and we\
              \ highly recommend that you use the <a>GreengrassConfiguration$CompilerOptions</a>\
              \ field. For example, you can use the following compiler options for\
              \ CPU: </p> <ul> <li> <p> <code>mcpu</code>: CPU micro-architecture.\
              \ For example, <code>{'mcpu': 'skylake-avx512'}</code> </p> </li> <li>\
              \ <p> <code>mattr</code>: CPU flags. For example, <code>{'mattr': ['+neon',\
              \ '+vfpv4']}</code> </p> </li> </ul>"
      required:
      - Arch
      - Os
      type: object
    GreengrassOutputDetails:
      description: 'Information about the AWS IoT Greengrass component created by
        a model packaging job. '
      properties:
        ComponentVersionArn:
          allOf:
          - $ref: '#/components/schemas/ComponentVersionArn'
          - description: ' The Amazon Resource Name (ARN) of the component. '
        ComponentName:
          allOf:
          - $ref: '#/components/schemas/ComponentName'
          - description: ' The name of the component. '
        ComponentVersion:
          allOf:
          - $ref: '#/components/schemas/ComponentVersion'
          - description: ' The version of the component. '
      type: object
    ImageSourceType:
      pattern: direct
      type: string
    InferenceUnits:
      minimum: 1
      type: integer
    S3BucketName:
      maxLength: 63
      minLength: 3
      pattern: "[0-9A-Za-z\\.\\-_]*"
      type: string
    S3ObjectKey:
      maxLength: 1024
      minLength: 1
      pattern: "^([a-zA-Z0-9!_.*'()-][/a-zA-Z0-9!_.*'()-]*)?$"
      type: string
    S3ObjectVersion:
      maxLength: 1024
      minLength: 1
      pattern: .*
      type: string
    IsLabeled:
      type: boolean
    PaginationToken:
      maxLength: 2048
      pattern: "^[a-zA-Z0-9\\/\\+\\=]{0,2048}$"
      type: string
    PageSize:
      maximum: 100
      minimum: 1
      type: integer
    QueryString:
      maxLength: 2048
      minLength: 1
      pattern: .*\S.*
      type: string
    ListDatasetEntriesRequest:
      properties: {}
      title: ListDatasetEntriesRequest
      type: object
    ListModelPackagingJobsRequest:
      properties: {}
      title: ListModelPackagingJobsRequest
      type: object
    ModelPackagingJobsList:
      items:
        $ref: '#/components/schemas/ModelPackagingJobMetadata'
      type: array
    ListModelsRequest:
      properties: {}
      title: ListModelsRequest
      type: object
    ModelMetadataList:
      items:
        $ref: '#/components/schemas/ModelMetadata'
      type: array
    ListProjectsRequest:
      properties: {}
      title: ListProjectsRequest
      type: object
    ProjectMetadataList:
      items:
        $ref: '#/components/schemas/ProjectMetadata'
      type: array
    TagArn:
      maxLength: 1011
      minLength: 1
      type: string
    ListTagsForResourceRequest:
      properties: {}
      title: ListTagsForResourceRequest
      type: object
    ModelStatus:
      enum:
      - TRAINING
      - TRAINED
      - TRAINING_FAILED
      - STARTING_HOSTING
      - HOSTED
      - HOSTING_FAILED
      - STOPPING_HOSTING
      - SYSTEM_UPDATING
      - DELETING
      type: string
    ModelStatusMessage:
      type: string
    ModelPerformance:
      description: 'Information about the evaluation performance of a trained model. '
      properties:
        F1Score:
          allOf:
          - $ref: '#/components/schemas/Float'
          - description: The overall F1 score metric for the trained model.
        Recall:
          allOf:
          - $ref: '#/components/schemas/Float'
          - description: 'The overall recall metric value for the trained model. '
        Precision:
          allOf:
          - $ref: '#/components/schemas/Float'
          - description: The overall precision metric value for the trained model.
      type: object
    OutputS3Object:
      description: The S3 location where Amazon Lookout for Vision saves training
        output.
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          - description: The bucket that contains the training output.
        Key:
          allOf:
          - $ref: '#/components/schemas/S3ObjectKey'
          - description: The location of the training output in the bucket.
      required:
      - Bucket
      - Key
      type: object
    ModelHostingStatus:
      enum:
      - STARTING_HOSTING
      - HOSTED
      - HOSTING_FAILED
      - STOPPING_HOSTING
      - SYSTEM_UPDATING
      type: string
    ModelPackagingConfiguration:
      description: " Configuration information for a Amazon Lookout for Vision model\
        \ packaging job. For more information, see <a>StartModelPackagingJob</a>. "
      properties:
        Greengrass:
          $ref: '#/components/schemas/StartModelPackagingJob_request_Configuration_Greengrass'
      required:
      - Greengrass
      type: object
    ModelPackagingJobDescription:
      maxLength: 256
      minLength: 1
      pattern: "[a-zA-Z0-9-_. ()':,;?]+"
      type: string
    ModelPackagingMethod:
      maxLength: 32
      minLength: 1
      pattern: "^[a-zA-Z0-9]+"
      type: string
    ModelPackagingOutputDetails:
      description: ' Information about the output from a model packaging job. '
      properties:
        Greengrass:
          $ref: '#/components/schemas/ModelPackagingOutputDetails_Greengrass'
      type: object
    ModelPackagingJobStatus:
      enum:
      - CREATED
      - RUNNING
      - SUCCEEDED
      - FAILED
      type: string
    ModelPackagingStatusMessage:
      type: string
    ModelPackagingJobMetadata:
      description: " Metadata for a model packaging job. For more information, see\
        \ <a>ListModelPackagingJobs</a>. "
      properties:
        JobName:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobName'
          - description: ' The name of the model packaging job. '
        ProjectName:
          allOf:
          - $ref: '#/components/schemas/ProjectName'
          - description: ' The project that contains the model that is in the model
              package. '
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          - description: ' The version of the model that is in the model package. '
        ModelPackagingJobDescription:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobDescription'
          - description: ' The description for the model packaging job. '
        ModelPackagingMethod:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingMethod'
          - description: ' The AWS service used to package the job. Currently Lookout
              for Vision can package jobs with AWS IoT Greengrass. '
        Status:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobStatus'
          - description: 'The status of the model packaging job. '
        StatusMessage:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingStatusMessage'
          - description: 'The status message for the model packaging job. '
        CreationTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: The Unix timestamp for the time and date that the model packaging
              job was created.
        LastUpdatedTimestamp:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: The Unix timestamp for the time and date that the model packaging
              job was last updated.
      type: object
    S3KeyPrefix:
      maxLength: 1024
      pattern: "^([a-zA-Z0-9!_.*'()-][/a-zA-Z0-9!_.*'()-]*)?$"
      type: string
    StartModelPackagingJobRequest:
      example:
        Description: ""
        Configuration:
          Greengrass:
            ComponentDescription: ""
            CompilerOptions: ""
            S3OutputLocation:
              Bucket: ""
              Prefix: ""
            TargetPlatform:
              Os: ""
              Arch: ""
              Accelerator: ""
            ComponentName: ""
            Tags: ""
            TargetDevice: ""
            ComponentVersion: ""
        JobName: ""
        ModelVersion: ""
      properties:
        ModelVersion:
          allOf:
          - $ref: '#/components/schemas/ModelVersion'
          - description: ' The version of the model within the project that you want
              to package. '
        JobName:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobName'
          - description: "A name for the model packaging job. If you don't supply\
              \ a value, the service creates a job name for you. "
        Configuration:
          $ref: '#/components/schemas/StartModelPackagingJobRequest_Configuration'
        Description:
          allOf:
          - $ref: '#/components/schemas/ModelPackagingJobDescription'
          - description: 'A description for the model packaging job. '
      required:
      - Configuration
      - ModelVersion
      title: StartModelPackagingJobRequest
      type: object
    StartModelRequest:
      example:
        MinInferenceUnits: ""
        MaxInferenceUnits: ""
      properties:
        MinInferenceUnits:
          allOf:
          - $ref: '#/components/schemas/InferenceUnits'
          - description: 'The minimum number of inference units to use. A single inference
              unit represents 1 hour of processing. Use a higher number to increase
              the TPS throughput of your model. You are charged for the number of
              inference units that you use. '
        MaxInferenceUnits:
          allOf:
          - $ref: '#/components/schemas/InferenceUnits'
          - description: "The maximum number of inference units to use for auto-scaling\
              \ the model. If you don't specify a value, Amazon Lookout for Vision\
              \ doesn't auto-scale the model."
      required:
      - MinInferenceUnits
      title: StartModelRequest
      type: object
    StopModelRequest:
      properties: {}
      title: StopModelRequest
      type: object
    TagValue:
      maxLength: 256
      minLength: 0
      pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"
      type: string
    TagKeyList:
      items:
        $ref: '#/components/schemas/TagKey'
      maxItems: 200
      minItems: 0
      type: array
    TagResourceRequest:
      example:
        Tags: ""
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: The key-value tags to assign to the model.
      required:
      - Tags
      title: TagResourceRequest
      type: object
    TargetPlatformOs:
      enum:
      - LINUX
      type: string
    TargetPlatformArch:
      enum:
      - ARM64
      - X86_64
      type: string
    TargetPlatformAccelerator:
      enum:
      - NVIDIA
      type: string
    UntagResourceRequest:
      properties: {}
      title: UntagResourceRequest
      type: object
    UpdateDatasetEntriesRequest:
      example:
        Changes: ""
      properties:
        Changes:
          allOf:
          - $ref: '#/components/schemas/DatasetChanges'
          - description: The entries to add to the dataset.
      required:
      - Changes
      title: UpdateDatasetEntriesRequest
      type: object
    CreateDataset_request_DatasetSource_GroundTruthManifest:
      allOf:
      - $ref: '#/components/schemas/DatasetGroundTruthManifest'
      - description: Location information for the manifest file.
      example:
        S3Object:
          VersionId: ""
          Bucket: ""
          Key: ""
    CreateDataset_request_DatasetSource:
      description: Information about the location of a manifest file that Amazon Lookout
        for Vision uses to to create a dataset.
      properties:
        GroundTruthManifest:
          $ref: '#/components/schemas/CreateDataset_request_DatasetSource_GroundTruthManifest'
      type: object
    CreateDataset_request:
      properties:
        DatasetType:
          description: The type of the dataset. Specify <code>train</code> for a training
            dataset. Specify <code>test</code> for a test dataset.
          maxLength: 10
          minLength: 1
          pattern: train|test
          type: string
        DatasetSource:
          $ref: '#/components/schemas/CreateDataset_request_DatasetSource'
      required:
      - DatasetType
      type: object
    CreateModel_request_OutputConfig_S3Location:
      allOf:
      - $ref: '#/components/schemas/S3Location'
      - description: The S3 location for the output.
      example:
        Bucket: ""
        Prefix: ""
    CreateModel_request_OutputConfig:
      description: The S3 location where Amazon Lookout for Vision saves model training
        files.
      properties:
        S3Location:
          $ref: '#/components/schemas/CreateModel_request_OutputConfig_S3Location'
      type: object
    CreateModel_request:
      properties:
        Description:
          description: A description for the version of the model.
          maxLength: 500
          minLength: 1
          pattern: "[0-9A-Za-z\\.\\-_]*"
          type: string
        OutputConfig:
          $ref: '#/components/schemas/CreateModel_request_OutputConfig'
        KmsKeyId:
          description: "The identifier for your AWS KMS key. The key is used to encrypt\
            \ training and test images copied into the service for model training.\
            \ Your source images are unaffected. If this parameter is not specified,\
            \ the copied images are encrypted by a key that AWS owns and manages."
          maxLength: 2048
          minLength: 1
          pattern: "^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$"
          type: string
        Tags:
          description: A set of tags (key-value pairs) that you want to attach to
            the model.
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
          type: array
      required:
      - OutputConfig
      type: object
    CreateProject_request:
      properties:
        ProjectName:
          description: The name for the project.
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9][a-zA-Z0-9_\\-]*"
          type: string
      required:
      - ProjectName
      type: object
    DetectAnomalies_request:
      properties:
        Body:
          description: 'The unencrypted image bytes that you want to analyze. '
          type: string
      required:
      - Body
      type: object
    UpdateDatasetEntries_request:
      properties:
        Changes:
          description: The entries to add to the dataset.
          maxLength: 10485760
          minLength: 1
          type: string
      required:
      - Changes
      type: object
    StartModelPackagingJob_request_Configuration_Greengrass:
      allOf:
      - $ref: '#/components/schemas/GreengrassConfiguration'
      - description: ' Configuration information for the AWS IoT Greengrass component
          in a model packaging job. '
      example:
        ComponentDescription: ""
        CompilerOptions: ""
        S3OutputLocation:
          Bucket: ""
          Prefix: ""
        TargetPlatform:
          Os: ""
          Arch: ""
          Accelerator: ""
        ComponentName: ""
        Tags: ""
        TargetDevice: ""
        ComponentVersion: ""
    StartModelPackagingJob_request_Configuration:
      description: " Configuration information for a Amazon Lookout for Vision model\
        \ packaging job. For more information, see <a>StartModelPackagingJob</a>. "
      properties:
        Greengrass:
          $ref: '#/components/schemas/StartModelPackagingJob_request_Configuration_Greengrass'
      type: object
    StartModelPackagingJob_request:
      properties:
        ModelVersion:
          description: ' The version of the model within the project that you want
            to package. '
          maxLength: 10
          minLength: 1
          pattern: "([1-9][0-9]*|latest)"
          type: string
        JobName:
          description: "A name for the model packaging job. If you don't supply a\
            \ value, the service creates a job name for you. "
          maxLength: 64
          minLength: 1
          pattern: "[a-zA-Z0-9-]+"
          type: string
        Configuration:
          $ref: '#/components/schemas/StartModelPackagingJob_request_Configuration'
        Description:
          description: 'A description for the model packaging job. '
          maxLength: 256
          minLength: 1
          pattern: "[a-zA-Z0-9-_. ()':,;?]+"
          type: string
      required:
      - Configuration
      - ModelVersion
      type: object
    TagResource_request:
      properties:
        Tags:
          description: The key-value tags to assign to the model.
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
          type: array
      required:
      - Tags
      type: object
    StartModel_request:
      properties:
        MinInferenceUnits:
          description: 'The minimum number of inference units to use. A single inference
            unit represents 1 hour of processing. Use a higher number to increase
            the TPS throughput of your model. You are charged for the number of inference
            units that you use. '
          minimum: 1
          type: integer
        MaxInferenceUnits:
          description: "The maximum number of inference units to use for auto-scaling\
            \ the model. If you don't specify a value, Amazon Lookout for Vision doesn't\
            \ auto-scale the model."
          minimum: 1
          type: integer
      required:
      - MinInferenceUnits
      type: object
    CreateDatasetResponse_DatasetMetadata:
      allOf:
      - $ref: '#/components/schemas/DatasetMetadata'
      - description: Information about the dataset.
      example:
        Status: ""
        CreationTimestamp: ""
        DatasetType: ""
        StatusMessage: ""
    DatasetGroundTruthManifest_S3Object:
      allOf:
      - $ref: '#/components/schemas/InputS3Object'
      - description: The S3 bucket location for the manifest file.
      example:
        VersionId: ""
        Bucket: ""
        Key: ""
    CreateModelResponse_ModelMetadata:
      allOf:
      - $ref: '#/components/schemas/ModelMetadata'
      - description: The response from a call to <code>CreateModel</code>.
      example:
        ModelArn: ""
        Status: ""
        Description: ""
        CreationTimestamp: ""
        ModelVersion: ""
        Performance:
          Precision: ""
          F1Score: ""
          Recall: ""
        StatusMessage: ""
    CreateProjectResponse_ProjectMetadata:
      allOf:
      - $ref: '#/components/schemas/ProjectMetadata'
      - description: Information about the project.
      example:
        ProjectArn: ""
        CreationTimestamp: ""
        ProjectName: ""
    DescribeDatasetResponse_DatasetDescription:
      allOf:
      - $ref: '#/components/schemas/DatasetDescription'
      - description: 'The description of the requested dataset. '
      example:
        Status: ""
        CreationTimestamp: ""
        ProjectName: ""
        LastUpdatedTimestamp: ""
        DatasetType: ""
        ImageStats:
          Total: ""
          Labeled: ""
          Anomaly: ""
          Normal: ""
        StatusMessage: ""
    DescribeModelResponse_ModelDescription:
      allOf:
      - $ref: '#/components/schemas/ModelDescription'
      - description: Contains the description of the model.
      example:
        ModelArn: ""
        Status: ""
        Description: ""
        CreationTimestamp: ""
        KmsKeyId: ""
        MaxInferenceUnits: ""
        EvaluationManifest:
          Bucket: ""
          Key: ""
        EvaluationResult:
          Bucket: ""
          Key: ""
        StatusMessage: ""
        MinInferenceUnits: ""
        OutputConfig:
          S3Location:
            Bucket: ""
            Prefix: ""
        ModelVersion: ""
        Performance:
          Precision: ""
          F1Score: ""
          Recall: ""
        EvaluationEndTimestamp: ""
    DescribeModelPackagingJobResponse_ModelPackagingDescription:
      allOf:
      - $ref: '#/components/schemas/ModelPackagingDescription'
      - description: 'The description of the model packaging job. '
      example:
        Status: ""
        CreationTimestamp: ""
        ProjectName: ""
        ModelPackagingConfiguration:
          Greengrass:
            ComponentDescription: ""
            CompilerOptions: ""
            S3OutputLocation:
              Bucket: ""
              Prefix: ""
            TargetPlatform:
              Os: ""
              Arch: ""
              Accelerator: ""
            ComponentName: ""
            Tags: ""
            TargetDevice: ""
            ComponentVersion: ""
        LastUpdatedTimestamp: ""
        JobName: ""
        ModelPackagingMethod: ""
        ModelVersion: ""
        ModelPackagingOutputDetails:
          Greengrass:
            ComponentName: ""
            ComponentVersionArn: ""
            ComponentVersion: ""
        ModelPackagingJobDescription: ""
        StatusMessage: ""
    DescribeProjectResponse_ProjectDescription:
      allOf:
      - $ref: '#/components/schemas/ProjectDescription'
      - description: The description of the project.
      example:
        Datasets: ""
        ProjectArn: ""
        CreationTimestamp: ""
        ProjectName: ""
    DetectAnomaliesResponse_DetectAnomalyResult:
      allOf:
      - $ref: '#/components/schemas/DetectAnomalyResult'
      - description: The results of the <code>DetectAnomalies</code> operation.
      example:
        Confidence: ""
        Source:
          Type: ""
        IsAnomalous: ""
        AnomalyMask: ""
        Anomalies: ""
    GreengrassConfiguration_TargetPlatform:
      allOf:
      - $ref: '#/components/schemas/TargetPlatform'
      - description: "The target platform for the model. If you specify <code>TargetPlatform</code>,\
          \ you can't specify <code>TargetDevice</code>. "
      example:
        Os: ""
        Arch: ""
        Accelerator: ""
    GreengrassConfiguration_S3OutputLocation:
      allOf:
      - $ref: '#/components/schemas/S3Location'
      - description: ' An S3 location in which Lookout for Vision stores the component
          artifacts. '
      example:
        Bucket: ""
        Prefix: ""
    Anomaly_PixelAnomaly:
      allOf:
      - $ref: '#/components/schemas/PixelAnomaly'
      - description: Information about the pixel mask that covers an anomaly type.
    CreateDatasetRequest_DatasetSource:
      allOf:
      - $ref: '#/components/schemas/DatasetSource'
      - description: "<p>The location of the manifest file that Amazon Lookout for\
          \ Vision uses to create the dataset.</p> <p>If you don't specify <code>DatasetSource</code>,\
          \ an empty dataset is created and the operation synchronously returns. Later,\
          \ you can add JSON Lines by calling <a>UpdateDatasetEntries</a>. </p> <p>If\
          \ you specify a value for <code>DataSource</code>, the manifest at the S3\
          \ location is validated and used to create the dataset. The call to <code>CreateDataset</code>\
          \ is asynchronous and might take a while to complete. To find out the current\
          \ status, Check the value of <code>Status</code> returned in a call to <a>DescribeDataset</a>.</p>"
      example:
        GroundTruthManifest:
          S3Object:
            VersionId: ""
            Bucket: ""
            Key: ""
    CreateModelRequest_OutputConfig:
      allOf:
      - $ref: '#/components/schemas/OutputConfig'
      - description: The location where Amazon Lookout for Vision saves the training
          results.
      example:
        S3Location:
          Bucket: ""
          Prefix: ""
    ModelMetadata_Performance:
      allOf:
      - $ref: '#/components/schemas/ModelPerformance'
      - description: Performance metrics for the model. Not available until training
          has successfully completed.
      example:
        Precision: ""
        F1Score: ""
        Recall: ""
    DatasetDescription_ImageStats:
      allOf:
      - $ref: '#/components/schemas/DatasetImageStats'
      - description: Statistics about the images in a dataset.
      example:
        Total: ""
        Labeled: ""
        Anomaly: ""
        Normal: ""
    ModelPackagingDescription_ModelPackagingConfiguration:
      allOf:
      - $ref: '#/components/schemas/ModelPackagingConfiguration'
      - description: ' The configuration information used in the model packaging job. '
      example:
        Greengrass:
          ComponentDescription: ""
          CompilerOptions: ""
          S3OutputLocation:
            Bucket: ""
            Prefix: ""
          TargetPlatform:
            Os: ""
            Arch: ""
            Accelerator: ""
          ComponentName: ""
          Tags: ""
          TargetDevice: ""
          ComponentVersion: ""
    ModelPackagingDescription_ModelPackagingOutputDetails:
      allOf:
      - $ref: '#/components/schemas/ModelPackagingOutputDetails'
      - description: "Information about the output of the model packaging job. For\
          \ more information, see <a>DescribeModelPackagingJob</a>. "
      example:
        Greengrass:
          ComponentName: ""
          ComponentVersionArn: ""
          ComponentVersion: ""
    ModelDescription_Performance:
      allOf:
      - $ref: '#/components/schemas/ModelPerformance'
      - description: Performance metrics for the model. Created during training.
      example:
        Precision: ""
        F1Score: ""
        Recall: ""
    ModelDescription_OutputConfig:
      allOf:
      - $ref: '#/components/schemas/OutputConfig'
      - description: The S3 location where Amazon Lookout for Vision saves model training
          files.
      example:
        S3Location:
          Bucket: ""
          Prefix: ""
    ModelDescription_EvaluationManifest:
      allOf:
      - $ref: '#/components/schemas/OutputS3Object'
      - description: The S3 location where Amazon Lookout for Vision saves the manifest
          file that was used to test the trained model and generate the performance
          scores.
      example:
        Bucket: ""
        Key: ""
    ModelDescription_EvaluationResult:
      allOf:
      - $ref: '#/components/schemas/OutputS3Object'
      - description: The S3 location where Amazon Lookout for Vision saves the performance
          metrics.
      example:
        Bucket: ""
        Key: ""
    DetectAnomalyResult_Source:
      allOf:
      - $ref: '#/components/schemas/ImageSource'
      - description: The source of the image that was analyzed. <code>direct</code>
          means that the images was supplied from the local computer. No other values
          are supported.
      example:
        Type: ""
    ModelPackagingOutputDetails_Greengrass:
      allOf:
      - $ref: '#/components/schemas/GreengrassOutputDetails'
      - description: ' Information about the AWS IoT Greengrass component in a model
          packaging job. '
      example:
        ComponentName: ""
        ComponentVersionArn: ""
        ComponentVersion: ""
    StartModelPackagingJobRequest_Configuration:
      allOf:
      - $ref: '#/components/schemas/ModelPackagingConfiguration'
      - description: 'The configuration for the model packaging job. '
      example:
        Greengrass:
          ComponentDescription: ""
          CompilerOptions: ""
          S3OutputLocation:
            Bucket: ""
            Prefix: ""
          TargetPlatform:
            Os: ""
            Arch: ""
            Accelerator: ""
          ComponentName: ""
          Tags: ""
          TargetDevice: ""
          ComponentVersion: ""
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

