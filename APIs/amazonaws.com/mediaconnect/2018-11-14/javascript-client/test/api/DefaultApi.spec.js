/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsMediaConnect);
  }
}(this, function(expect, AwsMediaConnect) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsMediaConnect.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addBridgeOutputs', function() {
      it('should call addBridgeOutputs successfully', function(done) {
        //uncomment below and update the code to test addBridgeOutputs
        //instance.addBridgeOutputs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addBridgeSources', function() {
      it('should call addBridgeSources successfully', function(done) {
        //uncomment below and update the code to test addBridgeSources
        //instance.addBridgeSources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFlowMediaStreams', function() {
      it('should call addFlowMediaStreams successfully', function(done) {
        //uncomment below and update the code to test addFlowMediaStreams
        //instance.addFlowMediaStreams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFlowOutputs', function() {
      it('should call addFlowOutputs successfully', function(done) {
        //uncomment below and update the code to test addFlowOutputs
        //instance.addFlowOutputs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFlowSources', function() {
      it('should call addFlowSources successfully', function(done) {
        //uncomment below and update the code to test addFlowSources
        //instance.addFlowSources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFlowVpcInterfaces', function() {
      it('should call addFlowVpcInterfaces successfully', function(done) {
        //uncomment below and update the code to test addFlowVpcInterfaces
        //instance.addFlowVpcInterfaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBridge', function() {
      it('should call createBridge successfully', function(done) {
        //uncomment below and update the code to test createBridge
        //instance.createBridge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFlow', function() {
      it('should call createFlow successfully', function(done) {
        //uncomment below and update the code to test createFlow
        //instance.createFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGateway', function() {
      it('should call createGateway successfully', function(done) {
        //uncomment below and update the code to test createGateway
        //instance.createGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBridge', function() {
      it('should call deleteBridge successfully', function(done) {
        //uncomment below and update the code to test deleteBridge
        //instance.deleteBridge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFlow', function() {
      it('should call deleteFlow successfully', function(done) {
        //uncomment below and update the code to test deleteFlow
        //instance.deleteFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteGateway', function() {
      it('should call deleteGateway successfully', function(done) {
        //uncomment below and update the code to test deleteGateway
        //instance.deleteGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterGatewayInstance', function() {
      it('should call deregisterGatewayInstance successfully', function(done) {
        //uncomment below and update the code to test deregisterGatewayInstance
        //instance.deregisterGatewayInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeBridge', function() {
      it('should call describeBridge successfully', function(done) {
        //uncomment below and update the code to test describeBridge
        //instance.describeBridge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFlow', function() {
      it('should call describeFlow successfully', function(done) {
        //uncomment below and update the code to test describeFlow
        //instance.describeFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGateway', function() {
      it('should call describeGateway successfully', function(done) {
        //uncomment below and update the code to test describeGateway
        //instance.describeGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGatewayInstance', function() {
      it('should call describeGatewayInstance successfully', function(done) {
        //uncomment below and update the code to test describeGatewayInstance
        //instance.describeGatewayInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOffering', function() {
      it('should call describeOffering successfully', function(done) {
        //uncomment below and update the code to test describeOffering
        //instance.describeOffering(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeReservation', function() {
      it('should call describeReservation successfully', function(done) {
        //uncomment below and update the code to test describeReservation
        //instance.describeReservation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('grantFlowEntitlements', function() {
      it('should call grantFlowEntitlements successfully', function(done) {
        //uncomment below and update the code to test grantFlowEntitlements
        //instance.grantFlowEntitlements(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBridges', function() {
      it('should call listBridges successfully', function(done) {
        //uncomment below and update the code to test listBridges
        //instance.listBridges(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEntitlements', function() {
      it('should call listEntitlements successfully', function(done) {
        //uncomment below and update the code to test listEntitlements
        //instance.listEntitlements(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFlows', function() {
      it('should call listFlows successfully', function(done) {
        //uncomment below and update the code to test listFlows
        //instance.listFlows(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGatewayInstances', function() {
      it('should call listGatewayInstances successfully', function(done) {
        //uncomment below and update the code to test listGatewayInstances
        //instance.listGatewayInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGateways', function() {
      it('should call listGateways successfully', function(done) {
        //uncomment below and update the code to test listGateways
        //instance.listGateways(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOfferings', function() {
      it('should call listOfferings successfully', function(done) {
        //uncomment below and update the code to test listOfferings
        //instance.listOfferings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listReservations', function() {
      it('should call listReservations successfully', function(done) {
        //uncomment below and update the code to test listReservations
        //instance.listReservations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('purchaseOffering', function() {
      it('should call purchaseOffering successfully', function(done) {
        //uncomment below and update the code to test purchaseOffering
        //instance.purchaseOffering(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeBridgeOutput', function() {
      it('should call removeBridgeOutput successfully', function(done) {
        //uncomment below and update the code to test removeBridgeOutput
        //instance.removeBridgeOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeBridgeSource', function() {
      it('should call removeBridgeSource successfully', function(done) {
        //uncomment below and update the code to test removeBridgeSource
        //instance.removeBridgeSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeFlowMediaStream', function() {
      it('should call removeFlowMediaStream successfully', function(done) {
        //uncomment below and update the code to test removeFlowMediaStream
        //instance.removeFlowMediaStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeFlowOutput', function() {
      it('should call removeFlowOutput successfully', function(done) {
        //uncomment below and update the code to test removeFlowOutput
        //instance.removeFlowOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeFlowSource', function() {
      it('should call removeFlowSource successfully', function(done) {
        //uncomment below and update the code to test removeFlowSource
        //instance.removeFlowSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeFlowVpcInterface', function() {
      it('should call removeFlowVpcInterface successfully', function(done) {
        //uncomment below and update the code to test removeFlowVpcInterface
        //instance.removeFlowVpcInterface(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeFlowEntitlement', function() {
      it('should call revokeFlowEntitlement successfully', function(done) {
        //uncomment below and update the code to test revokeFlowEntitlement
        //instance.revokeFlowEntitlement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startFlow', function() {
      it('should call startFlow successfully', function(done) {
        //uncomment below and update the code to test startFlow
        //instance.startFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopFlow', function() {
      it('should call stopFlow successfully', function(done) {
        //uncomment below and update the code to test stopFlow
        //instance.stopFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBridge', function() {
      it('should call updateBridge successfully', function(done) {
        //uncomment below and update the code to test updateBridge
        //instance.updateBridge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBridgeOutput', function() {
      it('should call updateBridgeOutput successfully', function(done) {
        //uncomment below and update the code to test updateBridgeOutput
        //instance.updateBridgeOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBridgeSource', function() {
      it('should call updateBridgeSource successfully', function(done) {
        //uncomment below and update the code to test updateBridgeSource
        //instance.updateBridgeSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBridgeState', function() {
      it('should call updateBridgeState successfully', function(done) {
        //uncomment below and update the code to test updateBridgeState
        //instance.updateBridgeState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFlow', function() {
      it('should call updateFlow successfully', function(done) {
        //uncomment below and update the code to test updateFlow
        //instance.updateFlow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFlowEntitlement', function() {
      it('should call updateFlowEntitlement successfully', function(done) {
        //uncomment below and update the code to test updateFlowEntitlement
        //instance.updateFlowEntitlement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFlowMediaStream', function() {
      it('should call updateFlowMediaStream successfully', function(done) {
        //uncomment below and update the code to test updateFlowMediaStream
        //instance.updateFlowMediaStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFlowOutput', function() {
      it('should call updateFlowOutput successfully', function(done) {
        //uncomment below and update the code to test updateFlowOutput
        //instance.updateFlowOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFlowSource', function() {
      it('should call updateFlowSource successfully', function(done) {
        //uncomment below and update the code to test updateFlowSource
        //instance.updateFlowSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGatewayInstance', function() {
      it('should call updateGatewayInstance successfully', function(done) {
        //uncomment below and update the code to test updateGatewayInstance
        //instance.updateGatewayInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
