/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsMediaConnect);
  }
}(this, function(expect, AwsMediaConnect) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsMediaConnect.UpdateFlowOutputRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpdateFlowOutputRequest', function() {
    it('should create an instance of UpdateFlowOutputRequest', function() {
      // uncomment below and update the code to test UpdateFlowOutputRequest
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be.a(AwsMediaConnect.UpdateFlowOutputRequest);
    });

    it('should have the property cidrAllowList (base name: "cidrAllowList")', function() {
      // uncomment below and update the code to test the property cidrAllowList
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property destination (base name: "destination")', function() {
      // uncomment below and update the code to test the property destination
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property encryption (base name: "encryption")', function() {
      // uncomment below and update the code to test the property encryption
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property maxLatency (base name: "maxLatency")', function() {
      // uncomment below and update the code to test the property maxLatency
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property mediaStreamOutputConfigurations (base name: "mediaStreamOutputConfigurations")', function() {
      // uncomment below and update the code to test the property mediaStreamOutputConfigurations
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property minLatency (base name: "minLatency")', function() {
      // uncomment below and update the code to test the property minLatency
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property protocol (base name: "protocol")', function() {
      // uncomment below and update the code to test the property protocol
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property remoteId (base name: "remoteId")', function() {
      // uncomment below and update the code to test the property remoteId
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property senderControlPort (base name: "senderControlPort")', function() {
      // uncomment below and update the code to test the property senderControlPort
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property senderIpAddress (base name: "senderIpAddress")', function() {
      // uncomment below and update the code to test the property senderIpAddress
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property smoothingLatency (base name: "smoothingLatency")', function() {
      // uncomment below and update the code to test the property smoothingLatency
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property streamId (base name: "streamId")', function() {
      // uncomment below and update the code to test the property streamId
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

    it('should have the property vpcInterfaceAttachment (base name: "vpcInterfaceAttachment")', function() {
      // uncomment below and update the code to test the property vpcInterfaceAttachment
      //var instance = new AwsMediaConnect.UpdateFlowOutputRequest();
      //expect(instance).to.be();
    });

  });

}));
