/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsMediaConnect);
  }
}(this, function(expect, AwsMediaConnect) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsMediaConnect.FlowSource();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FlowSource', function() {
    it('should create an instance of FlowSource', function() {
      // uncomment below and update the code to test FlowSource
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be.a(AwsMediaConnect.FlowSource);
    });

    it('should have the property dataTransferSubscriberFeePercent (base name: "DataTransferSubscriberFeePercent")', function() {
      // uncomment below and update the code to test the property dataTransferSubscriberFeePercent
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property decryption (base name: "Decryption")', function() {
      // uncomment below and update the code to test the property decryption
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property entitlementArn (base name: "EntitlementArn")', function() {
      // uncomment below and update the code to test the property entitlementArn
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property ingestIp (base name: "IngestIp")', function() {
      // uncomment below and update the code to test the property ingestIp
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property ingestPort (base name: "IngestPort")', function() {
      // uncomment below and update the code to test the property ingestPort
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property mediaStreamSourceConfigurations (base name: "MediaStreamSourceConfigurations")', function() {
      // uncomment below and update the code to test the property mediaStreamSourceConfigurations
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property senderControlPort (base name: "SenderControlPort")', function() {
      // uncomment below and update the code to test the property senderControlPort
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property senderIpAddress (base name: "SenderIpAddress")', function() {
      // uncomment below and update the code to test the property senderIpAddress
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property sourceArn (base name: "SourceArn")', function() {
      // uncomment below and update the code to test the property sourceArn
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property transport (base name: "Transport")', function() {
      // uncomment below and update the code to test the property transport
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property vpcInterfaceName (base name: "VpcInterfaceName")', function() {
      // uncomment below and update the code to test the property vpcInterfaceName
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property whitelistCidr (base name: "WhitelistCidr")', function() {
      // uncomment below and update the code to test the property whitelistCidr
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

    it('should have the property gatewayBridgeSource (base name: "GatewayBridgeSource")', function() {
      // uncomment below and update the code to test the property gatewayBridgeSource
      //var instance = new AwsMediaConnect.FlowSource();
      //expect(instance).to.be();
    });

  });

}));
