/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddBridgeOutputsRequest from '../model/AddBridgeOutputsRequest';
import AddBridgeOutputsResponse from '../model/AddBridgeOutputsResponse';
import AddBridgeSourcesRequest from '../model/AddBridgeSourcesRequest';
import AddBridgeSourcesResponse from '../model/AddBridgeSourcesResponse';
import AddFlowMediaStreamsRequest from '../model/AddFlowMediaStreamsRequest';
import AddFlowMediaStreamsResponse from '../model/AddFlowMediaStreamsResponse';
import AddFlowOutputsRequest from '../model/AddFlowOutputsRequest';
import AddFlowOutputsResponse from '../model/AddFlowOutputsResponse';
import AddFlowSourcesRequest from '../model/AddFlowSourcesRequest';
import AddFlowSourcesResponse from '../model/AddFlowSourcesResponse';
import AddFlowVpcInterfacesRequest from '../model/AddFlowVpcInterfacesRequest';
import AddFlowVpcInterfacesResponse from '../model/AddFlowVpcInterfacesResponse';
import CreateBridgeRequest from '../model/CreateBridgeRequest';
import CreateBridgeResponse from '../model/CreateBridgeResponse';
import CreateFlowRequest from '../model/CreateFlowRequest';
import CreateFlowResponse from '../model/CreateFlowResponse';
import CreateGatewayRequest from '../model/CreateGatewayRequest';
import CreateGatewayResponse from '../model/CreateGatewayResponse';
import DeleteBridgeResponse from '../model/DeleteBridgeResponse';
import DeleteFlowResponse from '../model/DeleteFlowResponse';
import DeleteGatewayResponse from '../model/DeleteGatewayResponse';
import DeregisterGatewayInstanceResponse from '../model/DeregisterGatewayInstanceResponse';
import DescribeBridgeResponse from '../model/DescribeBridgeResponse';
import DescribeFlowResponse from '../model/DescribeFlowResponse';
import DescribeGatewayInstanceResponse from '../model/DescribeGatewayInstanceResponse';
import DescribeGatewayResponse from '../model/DescribeGatewayResponse';
import DescribeOfferingResponse from '../model/DescribeOfferingResponse';
import DescribeReservationResponse from '../model/DescribeReservationResponse';
import GrantFlowEntitlementsRequest from '../model/GrantFlowEntitlementsRequest';
import GrantFlowEntitlementsResponse from '../model/GrantFlowEntitlementsResponse';
import ListBridgesResponse from '../model/ListBridgesResponse';
import ListEntitlementsResponse from '../model/ListEntitlementsResponse';
import ListFlowsResponse from '../model/ListFlowsResponse';
import ListGatewayInstancesResponse from '../model/ListGatewayInstancesResponse';
import ListGatewaysResponse from '../model/ListGatewaysResponse';
import ListOfferingsResponse from '../model/ListOfferingsResponse';
import ListReservationsResponse from '../model/ListReservationsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PurchaseOfferingRequest from '../model/PurchaseOfferingRequest';
import PurchaseOfferingResponse from '../model/PurchaseOfferingResponse';
import RemoveBridgeOutputResponse from '../model/RemoveBridgeOutputResponse';
import RemoveBridgeSourceResponse from '../model/RemoveBridgeSourceResponse';
import RemoveFlowMediaStreamResponse from '../model/RemoveFlowMediaStreamResponse';
import RemoveFlowOutputResponse from '../model/RemoveFlowOutputResponse';
import RemoveFlowSourceResponse from '../model/RemoveFlowSourceResponse';
import RemoveFlowVpcInterfaceResponse from '../model/RemoveFlowVpcInterfaceResponse';
import RevokeFlowEntitlementResponse from '../model/RevokeFlowEntitlementResponse';
import StartFlowResponse from '../model/StartFlowResponse';
import StopFlowResponse from '../model/StopFlowResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateBridgeOutputRequest from '../model/UpdateBridgeOutputRequest';
import UpdateBridgeOutputResponse from '../model/UpdateBridgeOutputResponse';
import UpdateBridgeRequest from '../model/UpdateBridgeRequest';
import UpdateBridgeResponse from '../model/UpdateBridgeResponse';
import UpdateBridgeSourceRequest from '../model/UpdateBridgeSourceRequest';
import UpdateBridgeSourceResponse from '../model/UpdateBridgeSourceResponse';
import UpdateBridgeStateRequest from '../model/UpdateBridgeStateRequest';
import UpdateBridgeStateResponse from '../model/UpdateBridgeStateResponse';
import UpdateFlowEntitlementRequest from '../model/UpdateFlowEntitlementRequest';
import UpdateFlowEntitlementResponse from '../model/UpdateFlowEntitlementResponse';
import UpdateFlowMediaStreamRequest from '../model/UpdateFlowMediaStreamRequest';
import UpdateFlowMediaStreamResponse from '../model/UpdateFlowMediaStreamResponse';
import UpdateFlowOutputRequest from '../model/UpdateFlowOutputRequest';
import UpdateFlowOutputResponse from '../model/UpdateFlowOutputResponse';
import UpdateFlowRequest from '../model/UpdateFlowRequest';
import UpdateFlowResponse from '../model/UpdateFlowResponse';
import UpdateFlowSourceRequest from '../model/UpdateFlowSourceRequest';
import UpdateFlowSourceResponse from '../model/UpdateFlowSourceResponse';
import UpdateGatewayInstanceRequest from '../model/UpdateGatewayInstanceRequest';
import UpdateGatewayInstanceResponse from '../model/UpdateGatewayInstanceResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-11-14
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addBridgeOutputs operation.
     * @callback module:api/DefaultApi~addBridgeOutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddBridgeOutputsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds outputs to an existing bridge.
     * @param {String} bridgeArn The ARN of the bridge that you want to update.
     * @param {module:model/AddBridgeOutputsRequest} addBridgeOutputsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addBridgeOutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddBridgeOutputsResponse}
     */
    addBridgeOutputs(bridgeArn, addBridgeOutputsRequest, opts, callback) {
      opts = opts || {};
      let postBody = addBridgeOutputsRequest;
      // verify the required parameter 'bridgeArn' is set
      if (bridgeArn === undefined || bridgeArn === null) {
        throw new Error("Missing the required parameter 'bridgeArn' when calling addBridgeOutputs");
      }
      // verify the required parameter 'addBridgeOutputsRequest' is set
      if (addBridgeOutputsRequest === undefined || addBridgeOutputsRequest === null) {
        throw new Error("Missing the required parameter 'addBridgeOutputsRequest' when calling addBridgeOutputs");
      }

      let pathParams = {
        'bridgeArn': bridgeArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddBridgeOutputsResponse;
      return this.apiClient.callApi(
        '/v1/bridges/{bridgeArn}/outputs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addBridgeSources operation.
     * @callback module:api/DefaultApi~addBridgeSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddBridgeSourcesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds sources to an existing bridge.
     * @param {String} bridgeArn The ARN of the bridge that you want to update.
     * @param {module:model/AddBridgeSourcesRequest} addBridgeSourcesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addBridgeSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddBridgeSourcesResponse}
     */
    addBridgeSources(bridgeArn, addBridgeSourcesRequest, opts, callback) {
      opts = opts || {};
      let postBody = addBridgeSourcesRequest;
      // verify the required parameter 'bridgeArn' is set
      if (bridgeArn === undefined || bridgeArn === null) {
        throw new Error("Missing the required parameter 'bridgeArn' when calling addBridgeSources");
      }
      // verify the required parameter 'addBridgeSourcesRequest' is set
      if (addBridgeSourcesRequest === undefined || addBridgeSourcesRequest === null) {
        throw new Error("Missing the required parameter 'addBridgeSourcesRequest' when calling addBridgeSources");
      }

      let pathParams = {
        'bridgeArn': bridgeArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddBridgeSourcesResponse;
      return this.apiClient.callApi(
        '/v1/bridges/{bridgeArn}/sources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFlowMediaStreams operation.
     * @callback module:api/DefaultApi~addFlowMediaStreamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddFlowMediaStreamsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds media streams to an existing flow. After you add a media stream to a flow, you can associate it with a source and/or an output that uses the ST 2110 JPEG XS or CDI protocol.
     * @param {String} flowArn The Amazon Resource Name (ARN) of the flow.
     * @param {module:model/AddFlowMediaStreamsRequest} addFlowMediaStreamsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addFlowMediaStreamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddFlowMediaStreamsResponse}
     */
    addFlowMediaStreams(flowArn, addFlowMediaStreamsRequest, opts, callback) {
      opts = opts || {};
      let postBody = addFlowMediaStreamsRequest;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling addFlowMediaStreams");
      }
      // verify the required parameter 'addFlowMediaStreamsRequest' is set
      if (addFlowMediaStreamsRequest === undefined || addFlowMediaStreamsRequest === null) {
        throw new Error("Missing the required parameter 'addFlowMediaStreamsRequest' when calling addFlowMediaStreams");
      }

      let pathParams = {
        'flowArn': flowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddFlowMediaStreamsResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/mediaStreams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFlowOutputs operation.
     * @callback module:api/DefaultApi~addFlowOutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddFlowOutputsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds outputs to an existing flow. You can create up to 50 outputs per flow.
     * @param {String} flowArn The flow that you want to add outputs to.
     * @param {module:model/AddFlowOutputsRequest} addFlowOutputsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addFlowOutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddFlowOutputsResponse}
     */
    addFlowOutputs(flowArn, addFlowOutputsRequest, opts, callback) {
      opts = opts || {};
      let postBody = addFlowOutputsRequest;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling addFlowOutputs");
      }
      // verify the required parameter 'addFlowOutputsRequest' is set
      if (addFlowOutputsRequest === undefined || addFlowOutputsRequest === null) {
        throw new Error("Missing the required parameter 'addFlowOutputsRequest' when calling addFlowOutputs");
      }

      let pathParams = {
        'flowArn': flowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddFlowOutputsResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/outputs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFlowSources operation.
     * @callback module:api/DefaultApi~addFlowSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddFlowSourcesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds Sources to flow
     * @param {String} flowArn The flow that you want to mutate.
     * @param {module:model/AddFlowSourcesRequest} addFlowSourcesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addFlowSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddFlowSourcesResponse}
     */
    addFlowSources(flowArn, addFlowSourcesRequest, opts, callback) {
      opts = opts || {};
      let postBody = addFlowSourcesRequest;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling addFlowSources");
      }
      // verify the required parameter 'addFlowSourcesRequest' is set
      if (addFlowSourcesRequest === undefined || addFlowSourcesRequest === null) {
        throw new Error("Missing the required parameter 'addFlowSourcesRequest' when calling addFlowSources");
      }

      let pathParams = {
        'flowArn': flowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddFlowSourcesResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/source', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addFlowVpcInterfaces operation.
     * @callback module:api/DefaultApi~addFlowVpcInterfacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddFlowVpcInterfacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds VPC interfaces to flow
     * @param {String} flowArn The flow that you want to mutate.
     * @param {module:model/AddFlowVpcInterfacesRequest} addFlowVpcInterfacesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addFlowVpcInterfacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddFlowVpcInterfacesResponse}
     */
    addFlowVpcInterfaces(flowArn, addFlowVpcInterfacesRequest, opts, callback) {
      opts = opts || {};
      let postBody = addFlowVpcInterfacesRequest;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling addFlowVpcInterfaces");
      }
      // verify the required parameter 'addFlowVpcInterfacesRequest' is set
      if (addFlowVpcInterfacesRequest === undefined || addFlowVpcInterfacesRequest === null) {
        throw new Error("Missing the required parameter 'addFlowVpcInterfacesRequest' when calling addFlowVpcInterfaces");
      }

      let pathParams = {
        'flowArn': flowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddFlowVpcInterfacesResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/vpcInterfaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBridge operation.
     * @callback module:api/DefaultApi~createBridgeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBridgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new bridge. The request must include one source.
     * @param {module:model/CreateBridgeRequest} createBridgeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createBridgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBridgeResponse}
     */
    createBridge(createBridgeRequest, opts, callback) {
      opts = opts || {};
      let postBody = createBridgeRequest;
      // verify the required parameter 'createBridgeRequest' is set
      if (createBridgeRequest === undefined || createBridgeRequest === null) {
        throw new Error("Missing the required parameter 'createBridgeRequest' when calling createBridge");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateBridgeResponse;
      return this.apiClient.callApi(
        '/v1/bridges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFlow operation.
     * @callback module:api/DefaultApi~createFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new flow. The request must include one source. The request optionally can include outputs (up to 50) and entitlements (up to 50).
     * @param {module:model/CreateFlowRequest} createFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFlowResponse}
     */
    createFlow(createFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFlowRequest;
      // verify the required parameter 'createFlowRequest' is set
      if (createFlowRequest === undefined || createFlowRequest === null) {
        throw new Error("Missing the required parameter 'createFlowRequest' when calling createFlow");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFlowResponse;
      return this.apiClient.callApi(
        '/v1/flows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGateway operation.
     * @callback module:api/DefaultApi~createGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGatewayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new gateway. The request must include at least one network (up to 4).
     * @param {module:model/CreateGatewayRequest} createGatewayRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGatewayResponse}
     */
    createGateway(createGatewayRequest, opts, callback) {
      opts = opts || {};
      let postBody = createGatewayRequest;
      // verify the required parameter 'createGatewayRequest' is set
      if (createGatewayRequest === undefined || createGatewayRequest === null) {
        throw new Error("Missing the required parameter 'createGatewayRequest' when calling createGateway");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGatewayResponse;
      return this.apiClient.callApi(
        '/v1/gateways', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBridge operation.
     * @callback module:api/DefaultApi~deleteBridgeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBridgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a bridge. Before you can delete a bridge, you must stop the bridge.
     * @param {String} bridgeArn The ARN of the bridge that you want to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBridgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBridgeResponse}
     */
    deleteBridge(bridgeArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bridgeArn' is set
      if (bridgeArn === undefined || bridgeArn === null) {
        throw new Error("Missing the required parameter 'bridgeArn' when calling deleteBridge");
      }

      let pathParams = {
        'bridgeArn': bridgeArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteBridgeResponse;
      return this.apiClient.callApi(
        '/v1/bridges/{bridgeArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFlow operation.
     * @callback module:api/DefaultApi~deleteFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a flow. Before you can delete a flow, you must stop the flow.
     * @param {String} flowArn The ARN of the flow that you want to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteFlowResponse}
     */
    deleteFlow(flowArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling deleteFlow");
      }

      let pathParams = {
        'flowArn': flowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteFlowResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGateway operation.
     * @callback module:api/DefaultApi~deleteGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteGatewayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a gateway. Before you can delete a gateway, you must deregister its instances and delete its bridges.
     * @param {String} gatewayArn The ARN of the gateway that you want to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteGatewayResponse}
     */
    deleteGateway(gatewayArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gatewayArn' is set
      if (gatewayArn === undefined || gatewayArn === null) {
        throw new Error("Missing the required parameter 'gatewayArn' when calling deleteGateway");
      }

      let pathParams = {
        'gatewayArn': gatewayArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteGatewayResponse;
      return this.apiClient.callApi(
        '/v1/gateways/{gatewayArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterGatewayInstance operation.
     * @callback module:api/DefaultApi~deregisterGatewayInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeregisterGatewayInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deregisters an instance. Before you deregister an instance, all bridges running on the instance must be stopped. If you want to deregister an instance without stopping the bridges, you must use the --force option.
     * @param {String} gatewayInstanceArn The Amazon Resource Name (ARN) of the gateway that contains the instance that you want to deregister.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [force] Force the deregistration of an instance. Force will deregister an instance, even if there are bridges running on it.
     * @param {module:api/DefaultApi~deregisterGatewayInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeregisterGatewayInstanceResponse}
     */
    deregisterGatewayInstance(gatewayInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gatewayInstanceArn' is set
      if (gatewayInstanceArn === undefined || gatewayInstanceArn === null) {
        throw new Error("Missing the required parameter 'gatewayInstanceArn' when calling deregisterGatewayInstance");
      }

      let pathParams = {
        'gatewayInstanceArn': gatewayInstanceArn
      };
      let queryParams = {
        'force': opts['force']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeregisterGatewayInstanceResponse;
      return this.apiClient.callApi(
        '/v1/gateway-instances/{gatewayInstanceArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeBridge operation.
     * @callback module:api/DefaultApi~describeBridgeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeBridgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays the details of a bridge.
     * @param {String} bridgeArn The ARN of the bridge that you want to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeBridgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeBridgeResponse}
     */
    describeBridge(bridgeArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bridgeArn' is set
      if (bridgeArn === undefined || bridgeArn === null) {
        throw new Error("Missing the required parameter 'bridgeArn' when calling describeBridge");
      }

      let pathParams = {
        'bridgeArn': bridgeArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeBridgeResponse;
      return this.apiClient.callApi(
        '/v1/bridges/{bridgeArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFlow operation.
     * @callback module:api/DefaultApi~describeFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays the details of a flow. The response includes the flow ARN, name, and Availability Zone, as well as details about the source, outputs, and entitlements.
     * @param {String} flowArn The ARN of the flow that you want to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFlowResponse}
     */
    describeFlow(flowArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling describeFlow");
      }

      let pathParams = {
        'flowArn': flowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeFlowResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeGateway operation.
     * @callback module:api/DefaultApi~describeGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeGatewayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays the details of a gateway. The response includes the gateway ARN, name, and CIDR blocks, as well as details about the networks.
     * @param {String} gatewayArn The Amazon Resource Name (ARN) of the gateway that you want to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeGatewayResponse}
     */
    describeGateway(gatewayArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gatewayArn' is set
      if (gatewayArn === undefined || gatewayArn === null) {
        throw new Error("Missing the required parameter 'gatewayArn' when calling describeGateway");
      }

      let pathParams = {
        'gatewayArn': gatewayArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeGatewayResponse;
      return this.apiClient.callApi(
        '/v1/gateways/{gatewayArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeGatewayInstance operation.
     * @callback module:api/DefaultApi~describeGatewayInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeGatewayInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays the details of an instance.
     * @param {String} gatewayInstanceArn The Amazon Resource Name (ARN) of the gateway instance that you want to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeGatewayInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeGatewayInstanceResponse}
     */
    describeGatewayInstance(gatewayInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gatewayInstanceArn' is set
      if (gatewayInstanceArn === undefined || gatewayInstanceArn === null) {
        throw new Error("Missing the required parameter 'gatewayInstanceArn' when calling describeGatewayInstance");
      }

      let pathParams = {
        'gatewayInstanceArn': gatewayInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeGatewayInstanceResponse;
      return this.apiClient.callApi(
        '/v1/gateway-instances/{gatewayInstanceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeOffering operation.
     * @callback module:api/DefaultApi~describeOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeOfferingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays the details of an offering. The response includes the offering description, duration, outbound bandwidth, price, and Amazon Resource Name (ARN).
     * @param {String} offeringArn The Amazon Resource Name (ARN) of the offering.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeOfferingResponse}
     */
    describeOffering(offeringArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'offeringArn' is set
      if (offeringArn === undefined || offeringArn === null) {
        throw new Error("Missing the required parameter 'offeringArn' when calling describeOffering");
      }

      let pathParams = {
        'offeringArn': offeringArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeOfferingResponse;
      return this.apiClient.callApi(
        '/v1/offerings/{offeringArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeReservation operation.
     * @callback module:api/DefaultApi~describeReservationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReservationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays the details of a reservation. The response includes the reservation name, state, start date and time, and the details of the offering that make up the rest of the reservation (such as price, duration, and outbound bandwidth).
     * @param {String} reservationArn The Amazon Resource Name (ARN) of the reservation.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeReservationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReservationResponse}
     */
    describeReservation(reservationArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reservationArn' is set
      if (reservationArn === undefined || reservationArn === null) {
        throw new Error("Missing the required parameter 'reservationArn' when calling describeReservation");
      }

      let pathParams = {
        'reservationArn': reservationArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeReservationResponse;
      return this.apiClient.callApi(
        '/v1/reservations/{reservationArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the grantFlowEntitlements operation.
     * @callback module:api/DefaultApi~grantFlowEntitlementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GrantFlowEntitlementsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Grants entitlements to an existing flow.
     * @param {String} flowArn The flow that you want to grant entitlements on.
     * @param {module:model/GrantFlowEntitlementsRequest} grantFlowEntitlementsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~grantFlowEntitlementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GrantFlowEntitlementsResponse}
     */
    grantFlowEntitlements(flowArn, grantFlowEntitlementsRequest, opts, callback) {
      opts = opts || {};
      let postBody = grantFlowEntitlementsRequest;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling grantFlowEntitlements");
      }
      // verify the required parameter 'grantFlowEntitlementsRequest' is set
      if (grantFlowEntitlementsRequest === undefined || grantFlowEntitlementsRequest === null) {
        throw new Error("Missing the required parameter 'grantFlowEntitlementsRequest' when calling grantFlowEntitlements");
      }

      let pathParams = {
        'flowArn': flowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GrantFlowEntitlementsResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/entitlements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBridges operation.
     * @callback module:api/DefaultApi~listBridgesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBridgesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a list of bridges that are associated with this account and an optionally specified Arn. This request returns a paginated result.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [filterArn] Filter the list results to display only the bridges associated with the selected Amazon Resource Name (ARN).
     * @param {Number} [maxResults] The maximum number of results to return per API request. For example, you submit a ListBridges request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
     * @param {String} [nextToken] The token that identifies which batch of results that you want to see. For example, you submit a ListBridges request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListBridges request a second time and specify the NextToken value.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listBridgesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBridgesResponse}
     */
    listBridges(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filterArn': opts['filterArn'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBridgesResponse;
      return this.apiClient.callApi(
        '/v1/bridges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEntitlements operation.
     * @callback module:api/DefaultApi~listEntitlementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEntitlementsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a list of all entitlements that have been granted to this account. This request returns 20 results per page.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per API request. For example, you submit a ListEntitlements request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 20 results per page.
     * @param {String} [nextToken] The token that identifies which batch of results that you want to see. For example, you submit a ListEntitlements request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListEntitlements request a second time and specify the NextToken value.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listEntitlementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEntitlementsResponse}
     */
    listEntitlements(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEntitlementsResponse;
      return this.apiClient.callApi(
        '/v1/entitlements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFlows operation.
     * @callback module:api/DefaultApi~listFlowsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFlowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a list of flows that are associated with this account. This request returns a paginated result.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per API request. For example, you submit a ListFlows request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
     * @param {String} [nextToken] The token that identifies which batch of results that you want to see. For example, you submit a ListFlows request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListFlows request a second time and specify the NextToken value.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFlowsResponse}
     */
    listFlows(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFlowsResponse;
      return this.apiClient.callApi(
        '/v1/flows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGatewayInstances operation.
     * @callback module:api/DefaultApi~listGatewayInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListGatewayInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a list of instances associated with the AWS account. This request returns a paginated result. You can use the filterArn property to display only the instances associated with the selected Gateway Amazon Resource Name (ARN).
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [filterArn] Filter the list results to display only the instances associated with the selected Gateway Amazon Resource Name (ARN).
     * @param {Number} [maxResults] The maximum number of results to return per API request. For example, you submit a ListInstances request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
     * @param {String} [nextToken] The token that identifies which batch of results that you want to see. For example, you submit a ListInstances request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListInstances request a second time and specify the NextToken value.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listGatewayInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListGatewayInstancesResponse}
     */
    listGatewayInstances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filterArn': opts['filterArn'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListGatewayInstancesResponse;
      return this.apiClient.callApi(
        '/v1/gateway-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGateways operation.
     * @callback module:api/DefaultApi~listGatewaysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListGatewaysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a list of gateways that are associated with this account. This request returns a paginated result.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per API request. For example, you submit a ListGateways request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
     * @param {String} [nextToken] The token that identifies which batch of results that you want to see. For example, you submit a ListGateways request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListGateways request a second time and specify the NextToken value.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listGatewaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListGatewaysResponse}
     */
    listGateways(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListGatewaysResponse;
      return this.apiClient.callApi(
        '/v1/gateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOfferings operation.
     * @callback module:api/DefaultApi~listOfferingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOfferingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a list of all offerings that are available to this account in the current AWS Region. If you have an active reservation (which means you've purchased an offering that has already started and hasn't expired yet), your account isn't eligible for other offerings.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per API request. For example, you submit a ListOfferings request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
     * @param {String} [nextToken] The token that identifies which batch of results that you want to see. For example, you submit a ListOfferings request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListOfferings request a second time and specify the NextToken value.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listOfferingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOfferingsResponse}
     */
    listOfferings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListOfferingsResponse;
      return this.apiClient.callApi(
        '/v1/offerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReservations operation.
     * @callback module:api/DefaultApi~listReservationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReservationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a list of all reservations that have been purchased by this account in the current AWS Region. This list includes all reservations in all states (such as active and expired).
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to return per API request. For example, you submit a ListReservations request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
     * @param {String} [nextToken] The token that identifies which batch of results that you want to see. For example, you submit a ListReservations request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListOfferings request a second time and specify the NextToken value.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listReservationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReservationsResponse}
     */
    listReservations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListReservationsResponse;
      return this.apiClient.callApi(
        '/v1/reservations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all tags on an AWS Elemental MediaConnect resource
     * @param {String} resourceArn The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource for which to list the tags.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseOffering operation.
     * @callback module:api/DefaultApi~purchaseOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseOfferingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submits a request to purchase an offering. If you already have an active reservation, you can't purchase another offering.
     * @param {String} offeringArn The Amazon Resource Name (ARN) of the offering.
     * @param {module:model/PurchaseOfferingRequest} purchaseOfferingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~purchaseOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseOfferingResponse}
     */
    purchaseOffering(offeringArn, purchaseOfferingRequest, opts, callback) {
      opts = opts || {};
      let postBody = purchaseOfferingRequest;
      // verify the required parameter 'offeringArn' is set
      if (offeringArn === undefined || offeringArn === null) {
        throw new Error("Missing the required parameter 'offeringArn' when calling purchaseOffering");
      }
      // verify the required parameter 'purchaseOfferingRequest' is set
      if (purchaseOfferingRequest === undefined || purchaseOfferingRequest === null) {
        throw new Error("Missing the required parameter 'purchaseOfferingRequest' when calling purchaseOffering");
      }

      let pathParams = {
        'offeringArn': offeringArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseOfferingResponse;
      return this.apiClient.callApi(
        '/v1/offerings/{offeringArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeBridgeOutput operation.
     * @callback module:api/DefaultApi~removeBridgeOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveBridgeOutputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an output from a bridge.
     * @param {String} bridgeArn The ARN of the bridge that you want to update.
     * @param {String} outputName The name of the bridge output that you want to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeBridgeOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveBridgeOutputResponse}
     */
    removeBridgeOutput(bridgeArn, outputName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bridgeArn' is set
      if (bridgeArn === undefined || bridgeArn === null) {
        throw new Error("Missing the required parameter 'bridgeArn' when calling removeBridgeOutput");
      }
      // verify the required parameter 'outputName' is set
      if (outputName === undefined || outputName === null) {
        throw new Error("Missing the required parameter 'outputName' when calling removeBridgeOutput");
      }

      let pathParams = {
        'bridgeArn': bridgeArn,
        'outputName': outputName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoveBridgeOutputResponse;
      return this.apiClient.callApi(
        '/v1/bridges/{bridgeArn}/outputs/{outputName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeBridgeSource operation.
     * @callback module:api/DefaultApi~removeBridgeSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveBridgeSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a source from a bridge.
     * @param {String} bridgeArn The ARN of the bridge that you want to update.
     * @param {String} sourceName The name of the bridge source that you want to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeBridgeSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveBridgeSourceResponse}
     */
    removeBridgeSource(bridgeArn, sourceName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bridgeArn' is set
      if (bridgeArn === undefined || bridgeArn === null) {
        throw new Error("Missing the required parameter 'bridgeArn' when calling removeBridgeSource");
      }
      // verify the required parameter 'sourceName' is set
      if (sourceName === undefined || sourceName === null) {
        throw new Error("Missing the required parameter 'sourceName' when calling removeBridgeSource");
      }

      let pathParams = {
        'bridgeArn': bridgeArn,
        'sourceName': sourceName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoveBridgeSourceResponse;
      return this.apiClient.callApi(
        '/v1/bridges/{bridgeArn}/sources/{sourceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFlowMediaStream operation.
     * @callback module:api/DefaultApi~removeFlowMediaStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveFlowMediaStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a media stream from a flow. This action is only available if the media stream is not associated with a source or output.
     * @param {String} flowArn The Amazon Resource Name (ARN) of the flow.
     * @param {String} mediaStreamName The name of the media stream that you want to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeFlowMediaStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveFlowMediaStreamResponse}
     */
    removeFlowMediaStream(flowArn, mediaStreamName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling removeFlowMediaStream");
      }
      // verify the required parameter 'mediaStreamName' is set
      if (mediaStreamName === undefined || mediaStreamName === null) {
        throw new Error("Missing the required parameter 'mediaStreamName' when calling removeFlowMediaStream");
      }

      let pathParams = {
        'flowArn': flowArn,
        'mediaStreamName': mediaStreamName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoveFlowMediaStreamResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/mediaStreams/{mediaStreamName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFlowOutput operation.
     * @callback module:api/DefaultApi~removeFlowOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveFlowOutputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an output from an existing flow. This request can be made only on an output that does not have an entitlement associated with it. If the output has an entitlement, you must revoke the entitlement instead. When an entitlement is revoked from a flow, the service automatically removes the associated output.
     * @param {String} flowArn The flow that you want to remove an output from.
     * @param {String} outputArn The ARN of the output that you want to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeFlowOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveFlowOutputResponse}
     */
    removeFlowOutput(flowArn, outputArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling removeFlowOutput");
      }
      // verify the required parameter 'outputArn' is set
      if (outputArn === undefined || outputArn === null) {
        throw new Error("Missing the required parameter 'outputArn' when calling removeFlowOutput");
      }

      let pathParams = {
        'flowArn': flowArn,
        'outputArn': outputArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoveFlowOutputResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/outputs/{outputArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFlowSource operation.
     * @callback module:api/DefaultApi~removeFlowSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveFlowSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a source from an existing flow. This request can be made only if there is more than one source on the flow.
     * @param {String} flowArn The flow that you want to remove a source from.
     * @param {String} sourceArn The ARN of the source that you want to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeFlowSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveFlowSourceResponse}
     */
    removeFlowSource(flowArn, sourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling removeFlowSource");
      }
      // verify the required parameter 'sourceArn' is set
      if (sourceArn === undefined || sourceArn === null) {
        throw new Error("Missing the required parameter 'sourceArn' when calling removeFlowSource");
      }

      let pathParams = {
        'flowArn': flowArn,
        'sourceArn': sourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoveFlowSourceResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/source/{sourceArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFlowVpcInterface operation.
     * @callback module:api/DefaultApi~removeFlowVpcInterfaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveFlowVpcInterfaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a VPC Interface from an existing flow. This request can be made only on a VPC interface that does not have a Source or Output associated with it. If the VPC interface is referenced by a Source or Output, you must first delete or update the Source or Output to no longer reference the VPC interface.
     * @param {String} flowArn The flow that you want to remove a VPC interface from.
     * @param {String} vpcInterfaceName The name of the VPC interface that you want to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeFlowVpcInterfaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveFlowVpcInterfaceResponse}
     */
    removeFlowVpcInterface(flowArn, vpcInterfaceName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling removeFlowVpcInterface");
      }
      // verify the required parameter 'vpcInterfaceName' is set
      if (vpcInterfaceName === undefined || vpcInterfaceName === null) {
        throw new Error("Missing the required parameter 'vpcInterfaceName' when calling removeFlowVpcInterface");
      }

      let pathParams = {
        'flowArn': flowArn,
        'vpcInterfaceName': vpcInterfaceName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoveFlowVpcInterfaceResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/vpcInterfaces/{vpcInterfaceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeFlowEntitlement operation.
     * @callback module:api/DefaultApi~revokeFlowEntitlementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RevokeFlowEntitlementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes an entitlement from a flow. Once an entitlement is revoked, the content becomes unavailable to the subscriber and the associated output is removed.
     * @param {String} entitlementArn The ARN of the entitlement that you want to revoke.
     * @param {String} flowArn The flow that you want to revoke an entitlement from.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~revokeFlowEntitlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RevokeFlowEntitlementResponse}
     */
    revokeFlowEntitlement(entitlementArn, flowArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entitlementArn' is set
      if (entitlementArn === undefined || entitlementArn === null) {
        throw new Error("Missing the required parameter 'entitlementArn' when calling revokeFlowEntitlement");
      }
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling revokeFlowEntitlement");
      }

      let pathParams = {
        'entitlementArn': entitlementArn,
        'flowArn': flowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RevokeFlowEntitlementResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/entitlements/{entitlementArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startFlow operation.
     * @callback module:api/DefaultApi~startFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a flow.
     * @param {String} flowArn The ARN of the flow that you want to start.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartFlowResponse}
     */
    startFlow(flowArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling startFlow");
      }

      let pathParams = {
        'flowArn': flowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StartFlowResponse;
      return this.apiClient.callApi(
        '/v1/flows/start/{flowArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopFlow operation.
     * @callback module:api/DefaultApi~stopFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a flow.
     * @param {String} flowArn The ARN of the flow that you want to stop.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopFlowResponse}
     */
    stopFlow(flowArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling stopFlow");
      }

      let pathParams = {
        'flowArn': flowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StopFlowResponse;
      return this.apiClient.callApi(
        '/v1/flows/stop/{flowArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.
     * @param {String} resourceArn The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource to which to add tags.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes specified tags from a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource from which to delete tags.
     * @param {Array.<String>} tagKeys The keys of the tags to be removed.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBridge operation.
     * @callback module:api/DefaultApi~updateBridgeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBridgeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the bridge
     * @param {String} bridgeArn The Amazon Resource Number (ARN) of the bridge that you want to update.
     * @param {module:model/UpdateBridgeRequest} updateBridgeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBridgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBridgeResponse}
     */
    updateBridge(bridgeArn, updateBridgeRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBridgeRequest;
      // verify the required parameter 'bridgeArn' is set
      if (bridgeArn === undefined || bridgeArn === null) {
        throw new Error("Missing the required parameter 'bridgeArn' when calling updateBridge");
      }
      // verify the required parameter 'updateBridgeRequest' is set
      if (updateBridgeRequest === undefined || updateBridgeRequest === null) {
        throw new Error("Missing the required parameter 'updateBridgeRequest' when calling updateBridge");
      }

      let pathParams = {
        'bridgeArn': bridgeArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBridgeResponse;
      return this.apiClient.callApi(
        '/v1/bridges/{bridgeArn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBridgeOutput operation.
     * @callback module:api/DefaultApi~updateBridgeOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBridgeOutputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing bridge output.
     * @param {String} bridgeArn The ARN of the bridge that you want to update.
     * @param {String} outputName The name of the bridge output that you want to update.
     * @param {module:model/UpdateBridgeOutputRequest} updateBridgeOutputRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBridgeOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBridgeOutputResponse}
     */
    updateBridgeOutput(bridgeArn, outputName, updateBridgeOutputRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBridgeOutputRequest;
      // verify the required parameter 'bridgeArn' is set
      if (bridgeArn === undefined || bridgeArn === null) {
        throw new Error("Missing the required parameter 'bridgeArn' when calling updateBridgeOutput");
      }
      // verify the required parameter 'outputName' is set
      if (outputName === undefined || outputName === null) {
        throw new Error("Missing the required parameter 'outputName' when calling updateBridgeOutput");
      }
      // verify the required parameter 'updateBridgeOutputRequest' is set
      if (updateBridgeOutputRequest === undefined || updateBridgeOutputRequest === null) {
        throw new Error("Missing the required parameter 'updateBridgeOutputRequest' when calling updateBridgeOutput");
      }

      let pathParams = {
        'bridgeArn': bridgeArn,
        'outputName': outputName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBridgeOutputResponse;
      return this.apiClient.callApi(
        '/v1/bridges/{bridgeArn}/outputs/{outputName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBridgeSource operation.
     * @callback module:api/DefaultApi~updateBridgeSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBridgeSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing bridge source.
     * @param {String} bridgeArn The ARN of the bridge that you want to update.
     * @param {String} sourceName The name of the source that you want to update.
     * @param {module:model/UpdateBridgeSourceRequest} updateBridgeSourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBridgeSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBridgeSourceResponse}
     */
    updateBridgeSource(bridgeArn, sourceName, updateBridgeSourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBridgeSourceRequest;
      // verify the required parameter 'bridgeArn' is set
      if (bridgeArn === undefined || bridgeArn === null) {
        throw new Error("Missing the required parameter 'bridgeArn' when calling updateBridgeSource");
      }
      // verify the required parameter 'sourceName' is set
      if (sourceName === undefined || sourceName === null) {
        throw new Error("Missing the required parameter 'sourceName' when calling updateBridgeSource");
      }
      // verify the required parameter 'updateBridgeSourceRequest' is set
      if (updateBridgeSourceRequest === undefined || updateBridgeSourceRequest === null) {
        throw new Error("Missing the required parameter 'updateBridgeSourceRequest' when calling updateBridgeSource");
      }

      let pathParams = {
        'bridgeArn': bridgeArn,
        'sourceName': sourceName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBridgeSourceResponse;
      return this.apiClient.callApi(
        '/v1/bridges/{bridgeArn}/sources/{sourceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBridgeState operation.
     * @callback module:api/DefaultApi~updateBridgeStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBridgeStateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the bridge state
     * @param {String} bridgeArn The ARN of the bridge that you want to update.
     * @param {module:model/UpdateBridgeStateRequest} updateBridgeStateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBridgeStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBridgeStateResponse}
     */
    updateBridgeState(bridgeArn, updateBridgeStateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBridgeStateRequest;
      // verify the required parameter 'bridgeArn' is set
      if (bridgeArn === undefined || bridgeArn === null) {
        throw new Error("Missing the required parameter 'bridgeArn' when calling updateBridgeState");
      }
      // verify the required parameter 'updateBridgeStateRequest' is set
      if (updateBridgeStateRequest === undefined || updateBridgeStateRequest === null) {
        throw new Error("Missing the required parameter 'updateBridgeStateRequest' when calling updateBridgeState");
      }

      let pathParams = {
        'bridgeArn': bridgeArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBridgeStateResponse;
      return this.apiClient.callApi(
        '/v1/bridges/{bridgeArn}/state', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFlow operation.
     * @callback module:api/DefaultApi~updateFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates flow
     * @param {String} flowArn The flow that you want to update.
     * @param {module:model/UpdateFlowRequest} updateFlowRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFlowResponse}
     */
    updateFlow(flowArn, updateFlowRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFlowRequest;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling updateFlow");
      }
      // verify the required parameter 'updateFlowRequest' is set
      if (updateFlowRequest === undefined || updateFlowRequest === null) {
        throw new Error("Missing the required parameter 'updateFlowRequest' when calling updateFlow");
      }

      let pathParams = {
        'flowArn': flowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFlowResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFlowEntitlement operation.
     * @callback module:api/DefaultApi~updateFlowEntitlementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFlowEntitlementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * You can change an entitlement's description, subscribers, and encryption. If you change the subscribers, the service will remove the outputs that are are used by the subscribers that are removed.
     * @param {String} entitlementArn The ARN of the entitlement that you want to update.
     * @param {String} flowArn The flow that is associated with the entitlement that you want to update.
     * @param {module:model/UpdateFlowEntitlementRequest} updateFlowEntitlementRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFlowEntitlementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFlowEntitlementResponse}
     */
    updateFlowEntitlement(entitlementArn, flowArn, updateFlowEntitlementRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFlowEntitlementRequest;
      // verify the required parameter 'entitlementArn' is set
      if (entitlementArn === undefined || entitlementArn === null) {
        throw new Error("Missing the required parameter 'entitlementArn' when calling updateFlowEntitlement");
      }
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling updateFlowEntitlement");
      }
      // verify the required parameter 'updateFlowEntitlementRequest' is set
      if (updateFlowEntitlementRequest === undefined || updateFlowEntitlementRequest === null) {
        throw new Error("Missing the required parameter 'updateFlowEntitlementRequest' when calling updateFlowEntitlement");
      }

      let pathParams = {
        'entitlementArn': entitlementArn,
        'flowArn': flowArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFlowEntitlementResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/entitlements/{entitlementArn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFlowMediaStream operation.
     * @callback module:api/DefaultApi~updateFlowMediaStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFlowMediaStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing media stream.
     * @param {String} flowArn The Amazon Resource Name (ARN) of the flow.
     * @param {String} mediaStreamName The name of the media stream that you want to update.
     * @param {module:model/UpdateFlowMediaStreamRequest} updateFlowMediaStreamRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFlowMediaStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFlowMediaStreamResponse}
     */
    updateFlowMediaStream(flowArn, mediaStreamName, updateFlowMediaStreamRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFlowMediaStreamRequest;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling updateFlowMediaStream");
      }
      // verify the required parameter 'mediaStreamName' is set
      if (mediaStreamName === undefined || mediaStreamName === null) {
        throw new Error("Missing the required parameter 'mediaStreamName' when calling updateFlowMediaStream");
      }
      // verify the required parameter 'updateFlowMediaStreamRequest' is set
      if (updateFlowMediaStreamRequest === undefined || updateFlowMediaStreamRequest === null) {
        throw new Error("Missing the required parameter 'updateFlowMediaStreamRequest' when calling updateFlowMediaStream");
      }

      let pathParams = {
        'flowArn': flowArn,
        'mediaStreamName': mediaStreamName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFlowMediaStreamResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/mediaStreams/{mediaStreamName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFlowOutput operation.
     * @callback module:api/DefaultApi~updateFlowOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFlowOutputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing flow output.
     * @param {String} flowArn The flow that is associated with the output that you want to update.
     * @param {String} outputArn The ARN of the output that you want to update.
     * @param {module:model/UpdateFlowOutputRequest} updateFlowOutputRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFlowOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFlowOutputResponse}
     */
    updateFlowOutput(flowArn, outputArn, updateFlowOutputRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFlowOutputRequest;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling updateFlowOutput");
      }
      // verify the required parameter 'outputArn' is set
      if (outputArn === undefined || outputArn === null) {
        throw new Error("Missing the required parameter 'outputArn' when calling updateFlowOutput");
      }
      // verify the required parameter 'updateFlowOutputRequest' is set
      if (updateFlowOutputRequest === undefined || updateFlowOutputRequest === null) {
        throw new Error("Missing the required parameter 'updateFlowOutputRequest' when calling updateFlowOutput");
      }

      let pathParams = {
        'flowArn': flowArn,
        'outputArn': outputArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFlowOutputResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/outputs/{outputArn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFlowSource operation.
     * @callback module:api/DefaultApi~updateFlowSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFlowSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the source of a flow.
     * @param {String} flowArn The flow that is associated with the source that you want to update.
     * @param {String} sourceArn The ARN of the source that you want to update.
     * @param {module:model/UpdateFlowSourceRequest} updateFlowSourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFlowSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFlowSourceResponse}
     */
    updateFlowSource(flowArn, sourceArn, updateFlowSourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFlowSourceRequest;
      // verify the required parameter 'flowArn' is set
      if (flowArn === undefined || flowArn === null) {
        throw new Error("Missing the required parameter 'flowArn' when calling updateFlowSource");
      }
      // verify the required parameter 'sourceArn' is set
      if (sourceArn === undefined || sourceArn === null) {
        throw new Error("Missing the required parameter 'sourceArn' when calling updateFlowSource");
      }
      // verify the required parameter 'updateFlowSourceRequest' is set
      if (updateFlowSourceRequest === undefined || updateFlowSourceRequest === null) {
        throw new Error("Missing the required parameter 'updateFlowSourceRequest' when calling updateFlowSource");
      }

      let pathParams = {
        'flowArn': flowArn,
        'sourceArn': sourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFlowSourceResponse;
      return this.apiClient.callApi(
        '/v1/flows/{flowArn}/source/{sourceArn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGatewayInstance operation.
     * @callback module:api/DefaultApi~updateGatewayInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateGatewayInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration of an existing Gateway Instance.
     * @param {String} gatewayInstanceArn The Amazon Resource Name (ARN) of the instance that you want to update.
     * @param {module:model/UpdateGatewayInstanceRequest} updateGatewayInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateGatewayInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateGatewayInstanceResponse}
     */
    updateGatewayInstance(gatewayInstanceArn, updateGatewayInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateGatewayInstanceRequest;
      // verify the required parameter 'gatewayInstanceArn' is set
      if (gatewayInstanceArn === undefined || gatewayInstanceArn === null) {
        throw new Error("Missing the required parameter 'gatewayInstanceArn' when calling updateGatewayInstance");
      }
      // verify the required parameter 'updateGatewayInstanceRequest' is set
      if (updateGatewayInstanceRequest === undefined || updateGatewayInstanceRequest === null) {
        throw new Error("Missing the required parameter 'updateGatewayInstanceRequest' when calling updateGatewayInstance");
      }

      let pathParams = {
        'gatewayInstanceArn': gatewayInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGatewayInstanceResponse;
      return this.apiClient.callApi(
        '/v1/gateway-instances/{gatewayInstanceArn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
