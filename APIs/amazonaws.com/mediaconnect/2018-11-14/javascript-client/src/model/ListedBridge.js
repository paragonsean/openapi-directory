/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BridgeState from './BridgeState';

/**
 * The ListedBridge model module.
 * @module model/ListedBridge
 * @version 2018-11-14
 */
class ListedBridge {
    /**
     * Constructs a new <code>ListedBridge</code>.
     * Displays details of the selected bridge.
     * @alias module:model/ListedBridge
     * @param bridgeArn {String} 
     * @param bridgeState {module:model/BridgeState} 
     * @param bridgeType {String} 
     * @param name {String} 
     * @param placementArn {String} 
     */
    constructor(bridgeArn, bridgeState, bridgeType, name, placementArn) { 
        
        ListedBridge.initialize(this, bridgeArn, bridgeState, bridgeType, name, placementArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bridgeArn, bridgeState, bridgeType, name, placementArn) { 
        obj['BridgeArn'] = bridgeArn;
        obj['BridgeState'] = bridgeState;
        obj['BridgeType'] = bridgeType;
        obj['Name'] = name;
        obj['PlacementArn'] = placementArn;
    }

    /**
     * Constructs a <code>ListedBridge</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListedBridge} obj Optional instance to populate.
     * @return {module:model/ListedBridge} The populated <code>ListedBridge</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListedBridge();

            if (data.hasOwnProperty('BridgeArn')) {
                obj['BridgeArn'] = ApiClient.convertToType(data['BridgeArn'], 'String');
            }
            if (data.hasOwnProperty('BridgeState')) {
                obj['BridgeState'] = ApiClient.convertToType(data['BridgeState'], BridgeState);
            }
            if (data.hasOwnProperty('BridgeType')) {
                obj['BridgeType'] = ApiClient.convertToType(data['BridgeType'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PlacementArn')) {
                obj['PlacementArn'] = ApiClient.convertToType(data['PlacementArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListedBridge</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListedBridge</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListedBridge.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `BridgeArn`
        if (data['BridgeArn']) { // data not null
          String.validateJSON(data['BridgeArn']);
        }
        // validate the optional field `BridgeState`
        if (data['BridgeState']) { // data not null
          BridgeState.validateJSON(data['BridgeState']);
        }
        // validate the optional field `BridgeType`
        if (data['BridgeType']) { // data not null
          String.validateJSON(data['BridgeType']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `PlacementArn`
        if (data['PlacementArn']) { // data not null
          String.validateJSON(data['PlacementArn']);
        }

        return true;
    }


}

ListedBridge.RequiredProperties = ["BridgeArn", "BridgeState", "BridgeType", "Name", "PlacementArn"];

/**
 * @member {String} BridgeArn
 */
ListedBridge.prototype['BridgeArn'] = undefined;

/**
 * @member {module:model/BridgeState} BridgeState
 */
ListedBridge.prototype['BridgeState'] = undefined;

/**
 * @member {String} BridgeType
 */
ListedBridge.prototype['BridgeType'] = undefined;

/**
 * @member {String} Name
 */
ListedBridge.prototype['Name'] = undefined;

/**
 * @member {String} PlacementArn
 */
ListedBridge.prototype['PlacementArn'] = undefined;






export default ListedBridge;

