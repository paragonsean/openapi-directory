/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddMediaStreamRequest from './AddMediaStreamRequest';
import AddOutputRequest from './AddOutputRequest';
import CreateBridgeRequestSourceFailoverConfig from './CreateBridgeRequestSourceFailoverConfig';
import CreateFlowRequestMaintenance from './CreateFlowRequestMaintenance';
import CreateFlowRequestSource from './CreateFlowRequestSource';
import GrantEntitlementRequest from './GrantEntitlementRequest';
import SetSourceRequest from './SetSourceRequest';
import VpcInterfaceRequest from './VpcInterfaceRequest';

/**
 * The CreateFlowRequest model module.
 * @module model/CreateFlowRequest
 * @version 2018-11-14
 */
class CreateFlowRequest {
    /**
     * Constructs a new <code>CreateFlowRequest</code>.
     * @alias module:model/CreateFlowRequest
     * @param name {String} The name of the flow.
     */
    constructor(name) { 
        
        CreateFlowRequest.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateFlowRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateFlowRequest} obj Optional instance to populate.
     * @return {module:model/CreateFlowRequest} The populated <code>CreateFlowRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateFlowRequest();

            if (data.hasOwnProperty('availabilityZone')) {
                obj['availabilityZone'] = ApiClient.convertToType(data['availabilityZone'], 'String');
            }
            if (data.hasOwnProperty('entitlements')) {
                obj['entitlements'] = ApiClient.convertToType(data['entitlements'], [GrantEntitlementRequest]);
            }
            if (data.hasOwnProperty('mediaStreams')) {
                obj['mediaStreams'] = ApiClient.convertToType(data['mediaStreams'], [AddMediaStreamRequest]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], [AddOutputRequest]);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = CreateFlowRequestSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('sourceFailoverConfig')) {
                obj['sourceFailoverConfig'] = CreateBridgeRequestSourceFailoverConfig.constructFromObject(data['sourceFailoverConfig']);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [SetSourceRequest]);
            }
            if (data.hasOwnProperty('vpcInterfaces')) {
                obj['vpcInterfaces'] = ApiClient.convertToType(data['vpcInterfaces'], [VpcInterfaceRequest]);
            }
            if (data.hasOwnProperty('maintenance')) {
                obj['maintenance'] = CreateFlowRequestMaintenance.constructFromObject(data['maintenance']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateFlowRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateFlowRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateFlowRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['availabilityZone'] && !(typeof data['availabilityZone'] === 'string' || data['availabilityZone'] instanceof String)) {
            throw new Error("Expected the field `availabilityZone` to be a primitive type in the JSON string but got " + data['availabilityZone']);
        }
        if (data['entitlements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['entitlements'])) {
                throw new Error("Expected the field `entitlements` to be an array in the JSON data but got " + data['entitlements']);
            }
            // validate the optional field `entitlements` (array)
            for (const item of data['entitlements']) {
                GrantEntitlementRequest.validateJSON(item);
            };
        }
        if (data['mediaStreams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mediaStreams'])) {
                throw new Error("Expected the field `mediaStreams` to be an array in the JSON data but got " + data['mediaStreams']);
            }
            // validate the optional field `mediaStreams` (array)
            for (const item of data['mediaStreams']) {
                AddMediaStreamRequest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['outputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputs'])) {
                throw new Error("Expected the field `outputs` to be an array in the JSON data but got " + data['outputs']);
            }
            // validate the optional field `outputs` (array)
            for (const item of data['outputs']) {
                AddOutputRequest.validateJSON(item);
            };
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          CreateFlowRequestSource.validateJSON(data['source']);
        }
        // validate the optional field `sourceFailoverConfig`
        if (data['sourceFailoverConfig']) { // data not null
          CreateBridgeRequestSourceFailoverConfig.validateJSON(data['sourceFailoverConfig']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                SetSourceRequest.validateJSON(item);
            };
        }
        if (data['vpcInterfaces']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vpcInterfaces'])) {
                throw new Error("Expected the field `vpcInterfaces` to be an array in the JSON data but got " + data['vpcInterfaces']);
            }
            // validate the optional field `vpcInterfaces` (array)
            for (const item of data['vpcInterfaces']) {
                VpcInterfaceRequest.validateJSON(item);
            };
        }
        // validate the optional field `maintenance`
        if (data['maintenance']) { // data not null
          CreateFlowRequestMaintenance.validateJSON(data['maintenance']);
        }

        return true;
    }


}

CreateFlowRequest.RequiredProperties = ["name"];

/**
 * The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.
 * @member {String} availabilityZone
 */
CreateFlowRequest.prototype['availabilityZone'] = undefined;

/**
 * The entitlements that you want to grant on a flow.
 * @member {Array.<module:model/GrantEntitlementRequest>} entitlements
 */
CreateFlowRequest.prototype['entitlements'] = undefined;

/**
 * The media streams that you want to add to the flow. You can associate these media streams with sources and outputs on the flow.
 * @member {Array.<module:model/AddMediaStreamRequest>} mediaStreams
 */
CreateFlowRequest.prototype['mediaStreams'] = undefined;

/**
 * The name of the flow.
 * @member {String} name
 */
CreateFlowRequest.prototype['name'] = undefined;

/**
 * The outputs that you want to add to this flow.
 * @member {Array.<module:model/AddOutputRequest>} outputs
 */
CreateFlowRequest.prototype['outputs'] = undefined;

/**
 * @member {module:model/CreateFlowRequestSource} source
 */
CreateFlowRequest.prototype['source'] = undefined;

/**
 * @member {module:model/CreateBridgeRequestSourceFailoverConfig} sourceFailoverConfig
 */
CreateFlowRequest.prototype['sourceFailoverConfig'] = undefined;

/**
 * 
 * @member {Array.<module:model/SetSourceRequest>} sources
 */
CreateFlowRequest.prototype['sources'] = undefined;

/**
 * The VPC interfaces you want on the flow.
 * @member {Array.<module:model/VpcInterfaceRequest>} vpcInterfaces
 */
CreateFlowRequest.prototype['vpcInterfaces'] = undefined;

/**
 * @member {module:model/CreateFlowRequestMaintenance} maintenance
 */
CreateFlowRequest.prototype['maintenance'] = undefined;






export default CreateFlowRequest;

