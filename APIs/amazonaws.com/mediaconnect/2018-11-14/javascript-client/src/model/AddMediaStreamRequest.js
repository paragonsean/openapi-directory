/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddMediaStreamRequestAttributes from './AddMediaStreamRequestAttributes';
import MediaStreamType from './MediaStreamType';

/**
 * The AddMediaStreamRequest model module.
 * @module model/AddMediaStreamRequest
 * @version 2018-11-14
 */
class AddMediaStreamRequest {
    /**
     * Constructs a new <code>AddMediaStreamRequest</code>.
     * The media stream that you want to add to the flow.
     * @alias module:model/AddMediaStreamRequest
     * @param mediaStreamId {Number} 
     * @param mediaStreamName {String} 
     * @param mediaStreamType {module:model/MediaStreamType} 
     */
    constructor(mediaStreamId, mediaStreamName, mediaStreamType) { 
        
        AddMediaStreamRequest.initialize(this, mediaStreamId, mediaStreamName, mediaStreamType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mediaStreamId, mediaStreamName, mediaStreamType) { 
        obj['MediaStreamId'] = mediaStreamId;
        obj['MediaStreamName'] = mediaStreamName;
        obj['MediaStreamType'] = mediaStreamType;
    }

    /**
     * Constructs a <code>AddMediaStreamRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddMediaStreamRequest} obj Optional instance to populate.
     * @return {module:model/AddMediaStreamRequest} The populated <code>AddMediaStreamRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddMediaStreamRequest();

            if (data.hasOwnProperty('Attributes')) {
                obj['Attributes'] = AddMediaStreamRequestAttributes.constructFromObject(data['Attributes']);
            }
            if (data.hasOwnProperty('ClockRate')) {
                obj['ClockRate'] = ApiClient.convertToType(data['ClockRate'], 'Number');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('MediaStreamId')) {
                obj['MediaStreamId'] = ApiClient.convertToType(data['MediaStreamId'], 'Number');
            }
            if (data.hasOwnProperty('MediaStreamName')) {
                obj['MediaStreamName'] = ApiClient.convertToType(data['MediaStreamName'], 'String');
            }
            if (data.hasOwnProperty('MediaStreamType')) {
                obj['MediaStreamType'] = ApiClient.convertToType(data['MediaStreamType'], MediaStreamType);
            }
            if (data.hasOwnProperty('VideoFormat')) {
                obj['VideoFormat'] = ApiClient.convertToType(data['VideoFormat'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddMediaStreamRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddMediaStreamRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddMediaStreamRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Attributes`
        if (data['Attributes']) { // data not null
          AddMediaStreamRequestAttributes.validateJSON(data['Attributes']);
        }
        // validate the optional field `ClockRate`
        if (data['ClockRate']) { // data not null
          Number.validateJSON(data['ClockRate']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `MediaStreamId`
        if (data['MediaStreamId']) { // data not null
          Number.validateJSON(data['MediaStreamId']);
        }
        // validate the optional field `MediaStreamName`
        if (data['MediaStreamName']) { // data not null
          String.validateJSON(data['MediaStreamName']);
        }
        // validate the optional field `MediaStreamType`
        if (data['MediaStreamType']) { // data not null
          MediaStreamType.validateJSON(data['MediaStreamType']);
        }
        // validate the optional field `VideoFormat`
        if (data['VideoFormat']) { // data not null
          String.validateJSON(data['VideoFormat']);
        }

        return true;
    }


}

AddMediaStreamRequest.RequiredProperties = ["MediaStreamId", "MediaStreamName", "MediaStreamType"];

/**
 * @member {module:model/AddMediaStreamRequestAttributes} Attributes
 */
AddMediaStreamRequest.prototype['Attributes'] = undefined;

/**
 * @member {Number} ClockRate
 */
AddMediaStreamRequest.prototype['ClockRate'] = undefined;

/**
 * @member {String} Description
 */
AddMediaStreamRequest.prototype['Description'] = undefined;

/**
 * @member {Number} MediaStreamId
 */
AddMediaStreamRequest.prototype['MediaStreamId'] = undefined;

/**
 * @member {String} MediaStreamName
 */
AddMediaStreamRequest.prototype['MediaStreamName'] = undefined;

/**
 * @member {module:model/MediaStreamType} MediaStreamType
 */
AddMediaStreamRequest.prototype['MediaStreamType'] = undefined;

/**
 * @member {String} VideoFormat
 */
AddMediaStreamRequest.prototype['VideoFormat'] = undefined;






export default AddMediaStreamRequest;

