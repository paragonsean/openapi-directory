/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Protocol from './Protocol';
import Transport from './Transport';

/**
 * The OutputTransport model module.
 * @module model/OutputTransport
 * @version 2018-11-14
 */
class OutputTransport {
    /**
     * Constructs a new <code>OutputTransport</code>.
     * @alias module:model/OutputTransport
     * @implements module:model/Transport
     * @param protocol {module:model/Protocol} 
     */
    constructor(protocol) { 
        Transport.initialize(this, protocol);
        OutputTransport.initialize(this, protocol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, protocol) { 
        obj['Protocol'] = protocol;
    }

    /**
     * Constructs a <code>OutputTransport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutputTransport} obj Optional instance to populate.
     * @return {module:model/OutputTransport} The populated <code>OutputTransport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutputTransport();
            Transport.constructFromObject(data, obj);

            if (data.hasOwnProperty('CidrAllowList')) {
                obj['CidrAllowList'] = ApiClient.convertToType(data['CidrAllowList'], Array);
            }
            if (data.hasOwnProperty('MaxBitrate')) {
                obj['MaxBitrate'] = ApiClient.convertToType(data['MaxBitrate'], 'Number');
            }
            if (data.hasOwnProperty('MaxLatency')) {
                obj['MaxLatency'] = ApiClient.convertToType(data['MaxLatency'], 'Number');
            }
            if (data.hasOwnProperty('MaxSyncBuffer')) {
                obj['MaxSyncBuffer'] = ApiClient.convertToType(data['MaxSyncBuffer'], 'Number');
            }
            if (data.hasOwnProperty('MinLatency')) {
                obj['MinLatency'] = ApiClient.convertToType(data['MinLatency'], 'Number');
            }
            if (data.hasOwnProperty('Protocol')) {
                obj['Protocol'] = ApiClient.convertToType(data['Protocol'], Protocol);
            }
            if (data.hasOwnProperty('RemoteId')) {
                obj['RemoteId'] = ApiClient.convertToType(data['RemoteId'], 'String');
            }
            if (data.hasOwnProperty('SenderControlPort')) {
                obj['SenderControlPort'] = ApiClient.convertToType(data['SenderControlPort'], 'Number');
            }
            if (data.hasOwnProperty('SenderIpAddress')) {
                obj['SenderIpAddress'] = ApiClient.convertToType(data['SenderIpAddress'], 'String');
            }
            if (data.hasOwnProperty('SmoothingLatency')) {
                obj['SmoothingLatency'] = ApiClient.convertToType(data['SmoothingLatency'], 'Number');
            }
            if (data.hasOwnProperty('SourceListenerAddress')) {
                obj['SourceListenerAddress'] = ApiClient.convertToType(data['SourceListenerAddress'], 'String');
            }
            if (data.hasOwnProperty('SourceListenerPort')) {
                obj['SourceListenerPort'] = ApiClient.convertToType(data['SourceListenerPort'], 'Number');
            }
            if (data.hasOwnProperty('StreamId')) {
                obj['StreamId'] = ApiClient.convertToType(data['StreamId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutputTransport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutputTransport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OutputTransport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CidrAllowList`
        if (data['CidrAllowList']) { // data not null
          Array.validateJSON(data['CidrAllowList']);
        }
        // validate the optional field `MaxBitrate`
        if (data['MaxBitrate']) { // data not null
          Number.validateJSON(data['MaxBitrate']);
        }
        // validate the optional field `MaxLatency`
        if (data['MaxLatency']) { // data not null
          Number.validateJSON(data['MaxLatency']);
        }
        // validate the optional field `MaxSyncBuffer`
        if (data['MaxSyncBuffer']) { // data not null
          Number.validateJSON(data['MaxSyncBuffer']);
        }
        // validate the optional field `MinLatency`
        if (data['MinLatency']) { // data not null
          Number.validateJSON(data['MinLatency']);
        }
        // validate the optional field `Protocol`
        if (data['Protocol']) { // data not null
          Protocol.validateJSON(data['Protocol']);
        }
        // validate the optional field `RemoteId`
        if (data['RemoteId']) { // data not null
          String.validateJSON(data['RemoteId']);
        }
        // validate the optional field `SenderControlPort`
        if (data['SenderControlPort']) { // data not null
          Number.validateJSON(data['SenderControlPort']);
        }
        // validate the optional field `SenderIpAddress`
        if (data['SenderIpAddress']) { // data not null
          String.validateJSON(data['SenderIpAddress']);
        }
        // validate the optional field `SmoothingLatency`
        if (data['SmoothingLatency']) { // data not null
          Number.validateJSON(data['SmoothingLatency']);
        }
        // validate the optional field `SourceListenerAddress`
        if (data['SourceListenerAddress']) { // data not null
          String.validateJSON(data['SourceListenerAddress']);
        }
        // validate the optional field `SourceListenerPort`
        if (data['SourceListenerPort']) { // data not null
          Number.validateJSON(data['SourceListenerPort']);
        }
        // validate the optional field `StreamId`
        if (data['StreamId']) { // data not null
          String.validateJSON(data['StreamId']);
        }

        return true;
    }


}

OutputTransport.RequiredProperties = ["Protocol"];

/**
 * @member {Array} CidrAllowList
 */
OutputTransport.prototype['CidrAllowList'] = undefined;

/**
 * @member {Number} MaxBitrate
 */
OutputTransport.prototype['MaxBitrate'] = undefined;

/**
 * @member {Number} MaxLatency
 */
OutputTransport.prototype['MaxLatency'] = undefined;

/**
 * @member {Number} MaxSyncBuffer
 */
OutputTransport.prototype['MaxSyncBuffer'] = undefined;

/**
 * @member {Number} MinLatency
 */
OutputTransport.prototype['MinLatency'] = undefined;

/**
 * @member {module:model/Protocol} Protocol
 */
OutputTransport.prototype['Protocol'] = undefined;

/**
 * @member {String} RemoteId
 */
OutputTransport.prototype['RemoteId'] = undefined;

/**
 * @member {Number} SenderControlPort
 */
OutputTransport.prototype['SenderControlPort'] = undefined;

/**
 * @member {String} SenderIpAddress
 */
OutputTransport.prototype['SenderIpAddress'] = undefined;

/**
 * @member {Number} SmoothingLatency
 */
OutputTransport.prototype['SmoothingLatency'] = undefined;

/**
 * @member {String} SourceListenerAddress
 */
OutputTransport.prototype['SourceListenerAddress'] = undefined;

/**
 * @member {Number} SourceListenerPort
 */
OutputTransport.prototype['SourceListenerPort'] = undefined;

/**
 * @member {String} StreamId
 */
OutputTransport.prototype['StreamId'] = undefined;


// Implement Transport interface:
/**
 * @member {Array} CidrAllowList
 */
Transport.prototype['CidrAllowList'] = undefined;
/**
 * @member {Number} MaxBitrate
 */
Transport.prototype['MaxBitrate'] = undefined;
/**
 * @member {Number} MaxLatency
 */
Transport.prototype['MaxLatency'] = undefined;
/**
 * @member {Number} MaxSyncBuffer
 */
Transport.prototype['MaxSyncBuffer'] = undefined;
/**
 * @member {Number} MinLatency
 */
Transport.prototype['MinLatency'] = undefined;
/**
 * @member {module:model/Protocol} Protocol
 */
Transport.prototype['Protocol'] = undefined;
/**
 * @member {String} RemoteId
 */
Transport.prototype['RemoteId'] = undefined;
/**
 * @member {Number} SenderControlPort
 */
Transport.prototype['SenderControlPort'] = undefined;
/**
 * @member {String} SenderIpAddress
 */
Transport.prototype['SenderIpAddress'] = undefined;
/**
 * @member {Number} SmoothingLatency
 */
Transport.prototype['SmoothingLatency'] = undefined;
/**
 * @member {String} SourceListenerAddress
 */
Transport.prototype['SourceListenerAddress'] = undefined;
/**
 * @member {Number} SourceListenerPort
 */
Transport.prototype['SourceListenerPort'] = undefined;
/**
 * @member {String} StreamId
 */
Transport.prototype['StreamId'] = undefined;




export default OutputTransport;

