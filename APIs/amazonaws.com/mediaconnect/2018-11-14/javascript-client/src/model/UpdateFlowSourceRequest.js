/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaStreamSourceConfigurationRequest from './MediaStreamSourceConfigurationRequest';
import UpdateFlowOutputRequestEncryption from './UpdateFlowOutputRequestEncryption';
import UpdateFlowSourceRequestGatewayBridgeSource from './UpdateFlowSourceRequestGatewayBridgeSource';

/**
 * The UpdateFlowSourceRequest model module.
 * @module model/UpdateFlowSourceRequest
 * @version 2018-11-14
 */
class UpdateFlowSourceRequest {
    /**
     * Constructs a new <code>UpdateFlowSourceRequest</code>.
     * @alias module:model/UpdateFlowSourceRequest
     */
    constructor() { 
        
        UpdateFlowSourceRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateFlowSourceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateFlowSourceRequest} obj Optional instance to populate.
     * @return {module:model/UpdateFlowSourceRequest} The populated <code>UpdateFlowSourceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateFlowSourceRequest();

            if (data.hasOwnProperty('decryption')) {
                obj['decryption'] = UpdateFlowOutputRequestEncryption.constructFromObject(data['decryption']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('entitlementArn')) {
                obj['entitlementArn'] = ApiClient.convertToType(data['entitlementArn'], 'String');
            }
            if (data.hasOwnProperty('ingestPort')) {
                obj['ingestPort'] = ApiClient.convertToType(data['ingestPort'], 'Number');
            }
            if (data.hasOwnProperty('maxBitrate')) {
                obj['maxBitrate'] = ApiClient.convertToType(data['maxBitrate'], 'Number');
            }
            if (data.hasOwnProperty('maxLatency')) {
                obj['maxLatency'] = ApiClient.convertToType(data['maxLatency'], 'Number');
            }
            if (data.hasOwnProperty('maxSyncBuffer')) {
                obj['maxSyncBuffer'] = ApiClient.convertToType(data['maxSyncBuffer'], 'Number');
            }
            if (data.hasOwnProperty('mediaStreamSourceConfigurations')) {
                obj['mediaStreamSourceConfigurations'] = ApiClient.convertToType(data['mediaStreamSourceConfigurations'], [MediaStreamSourceConfigurationRequest]);
            }
            if (data.hasOwnProperty('minLatency')) {
                obj['minLatency'] = ApiClient.convertToType(data['minLatency'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('senderControlPort')) {
                obj['senderControlPort'] = ApiClient.convertToType(data['senderControlPort'], 'Number');
            }
            if (data.hasOwnProperty('senderIpAddress')) {
                obj['senderIpAddress'] = ApiClient.convertToType(data['senderIpAddress'], 'String');
            }
            if (data.hasOwnProperty('sourceListenerAddress')) {
                obj['sourceListenerAddress'] = ApiClient.convertToType(data['sourceListenerAddress'], 'String');
            }
            if (data.hasOwnProperty('sourceListenerPort')) {
                obj['sourceListenerPort'] = ApiClient.convertToType(data['sourceListenerPort'], 'Number');
            }
            if (data.hasOwnProperty('streamId')) {
                obj['streamId'] = ApiClient.convertToType(data['streamId'], 'String');
            }
            if (data.hasOwnProperty('vpcInterfaceName')) {
                obj['vpcInterfaceName'] = ApiClient.convertToType(data['vpcInterfaceName'], 'String');
            }
            if (data.hasOwnProperty('whitelistCidr')) {
                obj['whitelistCidr'] = ApiClient.convertToType(data['whitelistCidr'], 'String');
            }
            if (data.hasOwnProperty('gatewayBridgeSource')) {
                obj['gatewayBridgeSource'] = UpdateFlowSourceRequestGatewayBridgeSource.constructFromObject(data['gatewayBridgeSource']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateFlowSourceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateFlowSourceRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `decryption`
        if (data['decryption']) { // data not null
          UpdateFlowOutputRequestEncryption.validateJSON(data['decryption']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['entitlementArn'] && !(typeof data['entitlementArn'] === 'string' || data['entitlementArn'] instanceof String)) {
            throw new Error("Expected the field `entitlementArn` to be a primitive type in the JSON string but got " + data['entitlementArn']);
        }
        if (data['mediaStreamSourceConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mediaStreamSourceConfigurations'])) {
                throw new Error("Expected the field `mediaStreamSourceConfigurations` to be an array in the JSON data but got " + data['mediaStreamSourceConfigurations']);
            }
            // validate the optional field `mediaStreamSourceConfigurations` (array)
            for (const item of data['mediaStreamSourceConfigurations']) {
                MediaStreamSourceConfigurationRequest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['senderIpAddress'] && !(typeof data['senderIpAddress'] === 'string' || data['senderIpAddress'] instanceof String)) {
            throw new Error("Expected the field `senderIpAddress` to be a primitive type in the JSON string but got " + data['senderIpAddress']);
        }
        // ensure the json data is a string
        if (data['sourceListenerAddress'] && !(typeof data['sourceListenerAddress'] === 'string' || data['sourceListenerAddress'] instanceof String)) {
            throw new Error("Expected the field `sourceListenerAddress` to be a primitive type in the JSON string but got " + data['sourceListenerAddress']);
        }
        // ensure the json data is a string
        if (data['streamId'] && !(typeof data['streamId'] === 'string' || data['streamId'] instanceof String)) {
            throw new Error("Expected the field `streamId` to be a primitive type in the JSON string but got " + data['streamId']);
        }
        // ensure the json data is a string
        if (data['vpcInterfaceName'] && !(typeof data['vpcInterfaceName'] === 'string' || data['vpcInterfaceName'] instanceof String)) {
            throw new Error("Expected the field `vpcInterfaceName` to be a primitive type in the JSON string but got " + data['vpcInterfaceName']);
        }
        // ensure the json data is a string
        if (data['whitelistCidr'] && !(typeof data['whitelistCidr'] === 'string' || data['whitelistCidr'] instanceof String)) {
            throw new Error("Expected the field `whitelistCidr` to be a primitive type in the JSON string but got " + data['whitelistCidr']);
        }
        // validate the optional field `gatewayBridgeSource`
        if (data['gatewayBridgeSource']) { // data not null
          UpdateFlowSourceRequestGatewayBridgeSource.validateJSON(data['gatewayBridgeSource']);
        }

        return true;
    }


}



/**
 * @member {module:model/UpdateFlowOutputRequestEncryption} decryption
 */
UpdateFlowSourceRequest.prototype['decryption'] = undefined;

/**
 * A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
 * @member {String} description
 */
UpdateFlowSourceRequest.prototype['description'] = undefined;

/**
 * The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.
 * @member {String} entitlementArn
 */
UpdateFlowSourceRequest.prototype['entitlementArn'] = undefined;

/**
 * The port that the flow will be listening on for incoming content.
 * @member {Number} ingestPort
 */
UpdateFlowSourceRequest.prototype['ingestPort'] = undefined;

/**
 * The smoothing max bitrate (in bps) for RIST, RTP, and RTP-FEC streams.
 * @member {Number} maxBitrate
 */
UpdateFlowSourceRequest.prototype['maxBitrate'] = undefined;

/**
 * The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
 * @member {Number} maxLatency
 */
UpdateFlowSourceRequest.prototype['maxLatency'] = undefined;

/**
 * The size of the buffer (in milliseconds) to use to sync incoming source data.
 * @member {Number} maxSyncBuffer
 */
UpdateFlowSourceRequest.prototype['maxSyncBuffer'] = undefined;

/**
 * The media streams that are associated with the source, and the parameters for those associations.
 * @member {Array.<module:model/MediaStreamSourceConfigurationRequest>} mediaStreamSourceConfigurations
 */
UpdateFlowSourceRequest.prototype['mediaStreamSourceConfigurations'] = undefined;

/**
 * The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
 * @member {Number} minLatency
 */
UpdateFlowSourceRequest.prototype['minLatency'] = undefined;

/**
 * The protocol that is used by the source.
 * @member {module:model/UpdateFlowSourceRequest.ProtocolEnum} protocol
 */
UpdateFlowSourceRequest.prototype['protocol'] = undefined;

/**
 * The port that the flow uses to send outbound requests to initiate connection with the sender.
 * @member {Number} senderControlPort
 */
UpdateFlowSourceRequest.prototype['senderControlPort'] = undefined;

/**
 * The IP address that the flow communicates with to initiate connection with the sender.
 * @member {String} senderIpAddress
 */
UpdateFlowSourceRequest.prototype['senderIpAddress'] = undefined;

/**
 * Source IP or domain name for SRT-caller protocol.
 * @member {String} sourceListenerAddress
 */
UpdateFlowSourceRequest.prototype['sourceListenerAddress'] = undefined;

/**
 * Source port for SRT-caller protocol.
 * @member {Number} sourceListenerPort
 */
UpdateFlowSourceRequest.prototype['sourceListenerPort'] = undefined;

/**
 * The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.
 * @member {String} streamId
 */
UpdateFlowSourceRequest.prototype['streamId'] = undefined;

/**
 * The name of the VPC interface to use for this source.
 * @member {String} vpcInterfaceName
 */
UpdateFlowSourceRequest.prototype['vpcInterfaceName'] = undefined;

/**
 * The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
 * @member {String} whitelistCidr
 */
UpdateFlowSourceRequest.prototype['whitelistCidr'] = undefined;

/**
 * @member {module:model/UpdateFlowSourceRequestGatewayBridgeSource} gatewayBridgeSource
 */
UpdateFlowSourceRequest.prototype['gatewayBridgeSource'] = undefined;





/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
UpdateFlowSourceRequest['ProtocolEnum'] = {

    /**
     * value: "zixi-push"
     * @const
     */
    "zixi-push": "zixi-push",

    /**
     * value: "rtp-fec"
     * @const
     */
    "rtp-fec": "rtp-fec",

    /**
     * value: "rtp"
     * @const
     */
    "rtp": "rtp",

    /**
     * value: "zixi-pull"
     * @const
     */
    "zixi-pull": "zixi-pull",

    /**
     * value: "rist"
     * @const
     */
    "rist": "rist",

    /**
     * value: "st2110-jpegxs"
     * @const
     */
    "st2110-jpegxs": "st2110-jpegxs",

    /**
     * value: "cdi"
     * @const
     */
    "cdi": "cdi",

    /**
     * value: "srt-listener"
     * @const
     */
    "srt-listener": "srt-listener",

    /**
     * value: "srt-caller"
     * @const
     */
    "srt-caller": "srt-caller",

    /**
     * value: "fujitsu-qos"
     * @const
     */
    "fujitsu-qos": "fujitsu-qos",

    /**
     * value: "udp"
     * @const
     */
    "udp": "udp"
};



export default UpdateFlowSourceRequest;

