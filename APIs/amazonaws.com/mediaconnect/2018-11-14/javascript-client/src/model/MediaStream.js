/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaStreamAttributes from './MediaStreamAttributes';
import MediaStreamType from './MediaStreamType';

/**
 * The MediaStream model module.
 * @module model/MediaStream
 * @version 2018-11-14
 */
class MediaStream {
    /**
     * Constructs a new <code>MediaStream</code>.
     * A single track or stream of media that contains video, audio, or ancillary data. After you add a media stream to a flow, you can associate it with sources and outputs on that flow, as long as they use the CDI protocol or the ST 2110 JPEG XS protocol. Each source or output can consist of one or many media streams.
     * @alias module:model/MediaStream
     * @param fmt {Number} 
     * @param mediaStreamId {Number} 
     * @param mediaStreamName {String} 
     * @param mediaStreamType {module:model/MediaStreamType} 
     */
    constructor(fmt, mediaStreamId, mediaStreamName, mediaStreamType) { 
        
        MediaStream.initialize(this, fmt, mediaStreamId, mediaStreamName, mediaStreamType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fmt, mediaStreamId, mediaStreamName, mediaStreamType) { 
        obj['Fmt'] = fmt;
        obj['MediaStreamId'] = mediaStreamId;
        obj['MediaStreamName'] = mediaStreamName;
        obj['MediaStreamType'] = mediaStreamType;
    }

    /**
     * Constructs a <code>MediaStream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaStream} obj Optional instance to populate.
     * @return {module:model/MediaStream} The populated <code>MediaStream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaStream();

            if (data.hasOwnProperty('Attributes')) {
                obj['Attributes'] = MediaStreamAttributes.constructFromObject(data['Attributes']);
            }
            if (data.hasOwnProperty('ClockRate')) {
                obj['ClockRate'] = ApiClient.convertToType(data['ClockRate'], 'Number');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Fmt')) {
                obj['Fmt'] = ApiClient.convertToType(data['Fmt'], 'Number');
            }
            if (data.hasOwnProperty('MediaStreamId')) {
                obj['MediaStreamId'] = ApiClient.convertToType(data['MediaStreamId'], 'Number');
            }
            if (data.hasOwnProperty('MediaStreamName')) {
                obj['MediaStreamName'] = ApiClient.convertToType(data['MediaStreamName'], 'String');
            }
            if (data.hasOwnProperty('MediaStreamType')) {
                obj['MediaStreamType'] = ApiClient.convertToType(data['MediaStreamType'], MediaStreamType);
            }
            if (data.hasOwnProperty('VideoFormat')) {
                obj['VideoFormat'] = ApiClient.convertToType(data['VideoFormat'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaStream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaStream</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MediaStream.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Attributes`
        if (data['Attributes']) { // data not null
          MediaStreamAttributes.validateJSON(data['Attributes']);
        }
        // validate the optional field `ClockRate`
        if (data['ClockRate']) { // data not null
          Number.validateJSON(data['ClockRate']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `Fmt`
        if (data['Fmt']) { // data not null
          Number.validateJSON(data['Fmt']);
        }
        // validate the optional field `MediaStreamId`
        if (data['MediaStreamId']) { // data not null
          Number.validateJSON(data['MediaStreamId']);
        }
        // validate the optional field `MediaStreamName`
        if (data['MediaStreamName']) { // data not null
          String.validateJSON(data['MediaStreamName']);
        }
        // validate the optional field `MediaStreamType`
        if (data['MediaStreamType']) { // data not null
          MediaStreamType.validateJSON(data['MediaStreamType']);
        }
        // validate the optional field `VideoFormat`
        if (data['VideoFormat']) { // data not null
          String.validateJSON(data['VideoFormat']);
        }

        return true;
    }


}

MediaStream.RequiredProperties = ["Fmt", "MediaStreamId", "MediaStreamName", "MediaStreamType"];

/**
 * @member {module:model/MediaStreamAttributes} Attributes
 */
MediaStream.prototype['Attributes'] = undefined;

/**
 * @member {Number} ClockRate
 */
MediaStream.prototype['ClockRate'] = undefined;

/**
 * @member {String} Description
 */
MediaStream.prototype['Description'] = undefined;

/**
 * @member {Number} Fmt
 */
MediaStream.prototype['Fmt'] = undefined;

/**
 * @member {Number} MediaStreamId
 */
MediaStream.prototype['MediaStreamId'] = undefined;

/**
 * @member {String} MediaStreamName
 */
MediaStream.prototype['MediaStreamName'] = undefined;

/**
 * @member {module:model/MediaStreamType} MediaStreamType
 */
MediaStream.prototype['MediaStreamType'] = undefined;

/**
 * @member {String} VideoFormat
 */
MediaStream.prototype['VideoFormat'] = undefined;






export default MediaStream;

