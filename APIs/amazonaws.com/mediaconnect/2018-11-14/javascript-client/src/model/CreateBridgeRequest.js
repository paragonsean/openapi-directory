/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddBridgeOutputRequest from './AddBridgeOutputRequest';
import AddBridgeSourceRequest from './AddBridgeSourceRequest';
import CreateBridgeRequestEgressGatewayBridge from './CreateBridgeRequestEgressGatewayBridge';
import CreateBridgeRequestIngressGatewayBridge from './CreateBridgeRequestIngressGatewayBridge';
import CreateBridgeRequestSourceFailoverConfig from './CreateBridgeRequestSourceFailoverConfig';

/**
 * The CreateBridgeRequest model module.
 * @module model/CreateBridgeRequest
 * @version 2018-11-14
 */
class CreateBridgeRequest {
    /**
     * Constructs a new <code>CreateBridgeRequest</code>.
     * @alias module:model/CreateBridgeRequest
     * @param name {String} The name of the bridge. This name can not be modified after the bridge is created.
     * @param placementArn {String} The bridge placement Amazon Resource Number (ARN).
     * @param sources {Array.<module:model/AddBridgeSourceRequest>} The sources that you want to add to this bridge.
     */
    constructor(name, placementArn, sources) { 
        
        CreateBridgeRequest.initialize(this, name, placementArn, sources);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, placementArn, sources) { 
        obj['name'] = name;
        obj['placementArn'] = placementArn;
        obj['sources'] = sources;
    }

    /**
     * Constructs a <code>CreateBridgeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateBridgeRequest} obj Optional instance to populate.
     * @return {module:model/CreateBridgeRequest} The populated <code>CreateBridgeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateBridgeRequest();

            if (data.hasOwnProperty('egressGatewayBridge')) {
                obj['egressGatewayBridge'] = CreateBridgeRequestEgressGatewayBridge.constructFromObject(data['egressGatewayBridge']);
            }
            if (data.hasOwnProperty('ingressGatewayBridge')) {
                obj['ingressGatewayBridge'] = CreateBridgeRequestIngressGatewayBridge.constructFromObject(data['ingressGatewayBridge']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], [AddBridgeOutputRequest]);
            }
            if (data.hasOwnProperty('placementArn')) {
                obj['placementArn'] = ApiClient.convertToType(data['placementArn'], 'String');
            }
            if (data.hasOwnProperty('sourceFailoverConfig')) {
                obj['sourceFailoverConfig'] = CreateBridgeRequestSourceFailoverConfig.constructFromObject(data['sourceFailoverConfig']);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [AddBridgeSourceRequest]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateBridgeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateBridgeRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateBridgeRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `egressGatewayBridge`
        if (data['egressGatewayBridge']) { // data not null
          CreateBridgeRequestEgressGatewayBridge.validateJSON(data['egressGatewayBridge']);
        }
        // validate the optional field `ingressGatewayBridge`
        if (data['ingressGatewayBridge']) { // data not null
          CreateBridgeRequestIngressGatewayBridge.validateJSON(data['ingressGatewayBridge']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['outputs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputs'])) {
                throw new Error("Expected the field `outputs` to be an array in the JSON data but got " + data['outputs']);
            }
            // validate the optional field `outputs` (array)
            for (const item of data['outputs']) {
                AddBridgeOutputRequest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['placementArn'] && !(typeof data['placementArn'] === 'string' || data['placementArn'] instanceof String)) {
            throw new Error("Expected the field `placementArn` to be a primitive type in the JSON string but got " + data['placementArn']);
        }
        // validate the optional field `sourceFailoverConfig`
        if (data['sourceFailoverConfig']) { // data not null
          CreateBridgeRequestSourceFailoverConfig.validateJSON(data['sourceFailoverConfig']);
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                AddBridgeSourceRequest.validateJSON(item);
            };
        }

        return true;
    }


}

CreateBridgeRequest.RequiredProperties = ["name", "placementArn", "sources"];

/**
 * @member {module:model/CreateBridgeRequestEgressGatewayBridge} egressGatewayBridge
 */
CreateBridgeRequest.prototype['egressGatewayBridge'] = undefined;

/**
 * @member {module:model/CreateBridgeRequestIngressGatewayBridge} ingressGatewayBridge
 */
CreateBridgeRequest.prototype['ingressGatewayBridge'] = undefined;

/**
 * The name of the bridge. This name can not be modified after the bridge is created.
 * @member {String} name
 */
CreateBridgeRequest.prototype['name'] = undefined;

/**
 * The outputs that you want to add to this bridge.
 * @member {Array.<module:model/AddBridgeOutputRequest>} outputs
 */
CreateBridgeRequest.prototype['outputs'] = undefined;

/**
 * The bridge placement Amazon Resource Number (ARN).
 * @member {String} placementArn
 */
CreateBridgeRequest.prototype['placementArn'] = undefined;

/**
 * @member {module:model/CreateBridgeRequestSourceFailoverConfig} sourceFailoverConfig
 */
CreateBridgeRequest.prototype['sourceFailoverConfig'] = undefined;

/**
 * The sources that you want to add to this bridge.
 * @member {Array.<module:model/AddBridgeSourceRequest>} sources
 */
CreateBridgeRequest.prototype['sources'] = undefined;






export default CreateBridgeRequest;

