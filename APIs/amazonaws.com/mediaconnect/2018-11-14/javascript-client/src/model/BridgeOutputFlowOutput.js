/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BridgeFlowOutput from './BridgeFlowOutput';

/**
 * The BridgeOutputFlowOutput model module.
 * @module model/BridgeOutputFlowOutput
 * @version 2018-11-14
 */
class BridgeOutputFlowOutput {
    /**
     * Constructs a new <code>BridgeOutputFlowOutput</code>.
     * @alias module:model/BridgeOutputFlowOutput
     * @implements module:model/BridgeFlowOutput
     * @param flowArn {String} 
     * @param flowSourceArn {String} 
     * @param name {String} 
     */
    constructor(flowArn, flowSourceArn, name) { 
        BridgeFlowOutput.initialize(this, flowArn, flowSourceArn, name);
        BridgeOutputFlowOutput.initialize(this, flowArn, flowSourceArn, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, flowArn, flowSourceArn, name) { 
        obj['FlowArn'] = flowArn;
        obj['FlowSourceArn'] = flowSourceArn;
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>BridgeOutputFlowOutput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BridgeOutputFlowOutput} obj Optional instance to populate.
     * @return {module:model/BridgeOutputFlowOutput} The populated <code>BridgeOutputFlowOutput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BridgeOutputFlowOutput();
            BridgeFlowOutput.constructFromObject(data, obj);

            if (data.hasOwnProperty('FlowArn')) {
                obj['FlowArn'] = ApiClient.convertToType(data['FlowArn'], 'String');
            }
            if (data.hasOwnProperty('FlowSourceArn')) {
                obj['FlowSourceArn'] = ApiClient.convertToType(data['FlowSourceArn'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BridgeOutputFlowOutput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BridgeOutputFlowOutput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BridgeOutputFlowOutput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `FlowArn`
        if (data['FlowArn']) { // data not null
          String.validateJSON(data['FlowArn']);
        }
        // validate the optional field `FlowSourceArn`
        if (data['FlowSourceArn']) { // data not null
          String.validateJSON(data['FlowSourceArn']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }

        return true;
    }


}

BridgeOutputFlowOutput.RequiredProperties = ["FlowArn", "FlowSourceArn", "Name"];

/**
 * @member {String} FlowArn
 */
BridgeOutputFlowOutput.prototype['FlowArn'] = undefined;

/**
 * @member {String} FlowSourceArn
 */
BridgeOutputFlowOutput.prototype['FlowSourceArn'] = undefined;

/**
 * @member {String} Name
 */
BridgeOutputFlowOutput.prototype['Name'] = undefined;


// Implement BridgeFlowOutput interface:
/**
 * @member {String} FlowArn
 */
BridgeFlowOutput.prototype['FlowArn'] = undefined;
/**
 * @member {String} FlowSourceArn
 */
BridgeFlowOutput.prototype['FlowSourceArn'] = undefined;
/**
 * @member {String} Name
 */
BridgeFlowOutput.prototype['Name'] = undefined;




export default BridgeOutputFlowOutput;

