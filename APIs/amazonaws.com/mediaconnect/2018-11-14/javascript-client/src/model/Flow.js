/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BridgeSourceFailoverConfig from './BridgeSourceFailoverConfig';
import FlowMaintenance from './FlowMaintenance';
import FlowSource from './FlowSource';
import Status from './Status';

/**
 * The Flow model module.
 * @module model/Flow
 * @version 2018-11-14
 */
class Flow {
    /**
     * Constructs a new <code>Flow</code>.
     * The settings for a flow, including its source, outputs, and entitlements.
     * @alias module:model/Flow
     * @param availabilityZone {String} 
     * @param entitlements {Array} 
     * @param flowArn {String} 
     * @param name {String} 
     * @param outputs {Array} 
     * @param source {module:model/FlowSource} 
     * @param status {module:model/Status} 
     */
    constructor(availabilityZone, entitlements, flowArn, name, outputs, source, status) { 
        
        Flow.initialize(this, availabilityZone, entitlements, flowArn, name, outputs, source, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, availabilityZone, entitlements, flowArn, name, outputs, source, status) { 
        obj['AvailabilityZone'] = availabilityZone;
        obj['Entitlements'] = entitlements;
        obj['FlowArn'] = flowArn;
        obj['Name'] = name;
        obj['Outputs'] = outputs;
        obj['Source'] = source;
        obj['Status'] = status;
    }

    /**
     * Constructs a <code>Flow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Flow} obj Optional instance to populate.
     * @return {module:model/Flow} The populated <code>Flow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Flow();

            if (data.hasOwnProperty('AvailabilityZone')) {
                obj['AvailabilityZone'] = ApiClient.convertToType(data['AvailabilityZone'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('EgressIp')) {
                obj['EgressIp'] = ApiClient.convertToType(data['EgressIp'], 'String');
            }
            if (data.hasOwnProperty('Entitlements')) {
                obj['Entitlements'] = ApiClient.convertToType(data['Entitlements'], Array);
            }
            if (data.hasOwnProperty('FlowArn')) {
                obj['FlowArn'] = ApiClient.convertToType(data['FlowArn'], 'String');
            }
            if (data.hasOwnProperty('MediaStreams')) {
                obj['MediaStreams'] = ApiClient.convertToType(data['MediaStreams'], Array);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Outputs')) {
                obj['Outputs'] = ApiClient.convertToType(data['Outputs'], Array);
            }
            if (data.hasOwnProperty('Source')) {
                obj['Source'] = FlowSource.constructFromObject(data['Source']);
            }
            if (data.hasOwnProperty('SourceFailoverConfig')) {
                obj['SourceFailoverConfig'] = BridgeSourceFailoverConfig.constructFromObject(data['SourceFailoverConfig']);
            }
            if (data.hasOwnProperty('Sources')) {
                obj['Sources'] = ApiClient.convertToType(data['Sources'], Array);
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], Status);
            }
            if (data.hasOwnProperty('VpcInterfaces')) {
                obj['VpcInterfaces'] = ApiClient.convertToType(data['VpcInterfaces'], Array);
            }
            if (data.hasOwnProperty('Maintenance')) {
                obj['Maintenance'] = FlowMaintenance.constructFromObject(data['Maintenance']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Flow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Flow</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Flow.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AvailabilityZone`
        if (data['AvailabilityZone']) { // data not null
          String.validateJSON(data['AvailabilityZone']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `EgressIp`
        if (data['EgressIp']) { // data not null
          String.validateJSON(data['EgressIp']);
        }
        // validate the optional field `Entitlements`
        if (data['Entitlements']) { // data not null
          Array.validateJSON(data['Entitlements']);
        }
        // validate the optional field `FlowArn`
        if (data['FlowArn']) { // data not null
          String.validateJSON(data['FlowArn']);
        }
        // validate the optional field `MediaStreams`
        if (data['MediaStreams']) { // data not null
          Array.validateJSON(data['MediaStreams']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Outputs`
        if (data['Outputs']) { // data not null
          Array.validateJSON(data['Outputs']);
        }
        // validate the optional field `Source`
        if (data['Source']) { // data not null
          FlowSource.validateJSON(data['Source']);
        }
        // validate the optional field `SourceFailoverConfig`
        if (data['SourceFailoverConfig']) { // data not null
          BridgeSourceFailoverConfig.validateJSON(data['SourceFailoverConfig']);
        }
        // validate the optional field `Sources`
        if (data['Sources']) { // data not null
          Array.validateJSON(data['Sources']);
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          Status.validateJSON(data['Status']);
        }
        // validate the optional field `VpcInterfaces`
        if (data['VpcInterfaces']) { // data not null
          Array.validateJSON(data['VpcInterfaces']);
        }
        // validate the optional field `Maintenance`
        if (data['Maintenance']) { // data not null
          FlowMaintenance.validateJSON(data['Maintenance']);
        }

        return true;
    }


}

Flow.RequiredProperties = ["AvailabilityZone", "Entitlements", "FlowArn", "Name", "Outputs", "Source", "Status"];

/**
 * @member {String} AvailabilityZone
 */
Flow.prototype['AvailabilityZone'] = undefined;

/**
 * @member {String} Description
 */
Flow.prototype['Description'] = undefined;

/**
 * @member {String} EgressIp
 */
Flow.prototype['EgressIp'] = undefined;

/**
 * @member {Array} Entitlements
 */
Flow.prototype['Entitlements'] = undefined;

/**
 * @member {String} FlowArn
 */
Flow.prototype['FlowArn'] = undefined;

/**
 * @member {Array} MediaStreams
 */
Flow.prototype['MediaStreams'] = undefined;

/**
 * @member {String} Name
 */
Flow.prototype['Name'] = undefined;

/**
 * @member {Array} Outputs
 */
Flow.prototype['Outputs'] = undefined;

/**
 * @member {module:model/FlowSource} Source
 */
Flow.prototype['Source'] = undefined;

/**
 * @member {module:model/BridgeSourceFailoverConfig} SourceFailoverConfig
 */
Flow.prototype['SourceFailoverConfig'] = undefined;

/**
 * @member {Array} Sources
 */
Flow.prototype['Sources'] = undefined;

/**
 * @member {module:model/Status} Status
 */
Flow.prototype['Status'] = undefined;

/**
 * @member {Array} VpcInterfaces
 */
Flow.prototype['VpcInterfaces'] = undefined;

/**
 * @member {module:model/FlowMaintenance} Maintenance
 */
Flow.prototype['Maintenance'] = undefined;






export default Flow;

