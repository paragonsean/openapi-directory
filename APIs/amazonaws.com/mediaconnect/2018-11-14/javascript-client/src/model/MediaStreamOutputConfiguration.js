/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncodingName from './EncodingName';
import MediaStreamOutputConfigurationEncodingParameters from './MediaStreamOutputConfigurationEncodingParameters';

/**
 * The MediaStreamOutputConfiguration model module.
 * @module model/MediaStreamOutputConfiguration
 * @version 2018-11-14
 */
class MediaStreamOutputConfiguration {
    /**
     * Constructs a new <code>MediaStreamOutputConfiguration</code>.
     * The media stream that is associated with the output, and the parameters for that association.
     * @alias module:model/MediaStreamOutputConfiguration
     * @param encodingName {module:model/EncodingName} 
     * @param mediaStreamName {String} 
     */
    constructor(encodingName, mediaStreamName) { 
        
        MediaStreamOutputConfiguration.initialize(this, encodingName, mediaStreamName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, encodingName, mediaStreamName) { 
        obj['EncodingName'] = encodingName;
        obj['MediaStreamName'] = mediaStreamName;
    }

    /**
     * Constructs a <code>MediaStreamOutputConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaStreamOutputConfiguration} obj Optional instance to populate.
     * @return {module:model/MediaStreamOutputConfiguration} The populated <code>MediaStreamOutputConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaStreamOutputConfiguration();

            if (data.hasOwnProperty('DestinationConfigurations')) {
                obj['DestinationConfigurations'] = ApiClient.convertToType(data['DestinationConfigurations'], Array);
            }
            if (data.hasOwnProperty('EncodingName')) {
                obj['EncodingName'] = ApiClient.convertToType(data['EncodingName'], EncodingName);
            }
            if (data.hasOwnProperty('EncodingParameters')) {
                obj['EncodingParameters'] = MediaStreamOutputConfigurationEncodingParameters.constructFromObject(data['EncodingParameters']);
            }
            if (data.hasOwnProperty('MediaStreamName')) {
                obj['MediaStreamName'] = ApiClient.convertToType(data['MediaStreamName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaStreamOutputConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaStreamOutputConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MediaStreamOutputConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DestinationConfigurations`
        if (data['DestinationConfigurations']) { // data not null
          Array.validateJSON(data['DestinationConfigurations']);
        }
        // validate the optional field `EncodingName`
        if (data['EncodingName']) { // data not null
          EncodingName.validateJSON(data['EncodingName']);
        }
        // validate the optional field `EncodingParameters`
        if (data['EncodingParameters']) { // data not null
          MediaStreamOutputConfigurationEncodingParameters.validateJSON(data['EncodingParameters']);
        }
        // validate the optional field `MediaStreamName`
        if (data['MediaStreamName']) { // data not null
          String.validateJSON(data['MediaStreamName']);
        }

        return true;
    }


}

MediaStreamOutputConfiguration.RequiredProperties = ["EncodingName", "MediaStreamName"];

/**
 * @member {Array} DestinationConfigurations
 */
MediaStreamOutputConfiguration.prototype['DestinationConfigurations'] = undefined;

/**
 * @member {module:model/EncodingName} EncodingName
 */
MediaStreamOutputConfiguration.prototype['EncodingName'] = undefined;

/**
 * @member {module:model/MediaStreamOutputConfigurationEncodingParameters} EncodingParameters
 */
MediaStreamOutputConfiguration.prototype['EncodingParameters'] = undefined;

/**
 * @member {String} MediaStreamName
 */
MediaStreamOutputConfiguration.prototype['MediaStreamName'] = undefined;






export default MediaStreamOutputConfiguration;

