/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaStreamOutputConfigurationRequest from './MediaStreamOutputConfigurationRequest';
import UpdateFlowOutputRequestEncryption from './UpdateFlowOutputRequestEncryption';
import UpdateFlowOutputRequestVpcInterfaceAttachment from './UpdateFlowOutputRequestVpcInterfaceAttachment';

/**
 * The UpdateFlowOutputRequest model module.
 * @module model/UpdateFlowOutputRequest
 * @version 2018-11-14
 */
class UpdateFlowOutputRequest {
    /**
     * Constructs a new <code>UpdateFlowOutputRequest</code>.
     * @alias module:model/UpdateFlowOutputRequest
     */
    constructor() { 
        
        UpdateFlowOutputRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateFlowOutputRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateFlowOutputRequest} obj Optional instance to populate.
     * @return {module:model/UpdateFlowOutputRequest} The populated <code>UpdateFlowOutputRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateFlowOutputRequest();

            if (data.hasOwnProperty('cidrAllowList')) {
                obj['cidrAllowList'] = ApiClient.convertToType(data['cidrAllowList'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = ApiClient.convertToType(data['destination'], 'String');
            }
            if (data.hasOwnProperty('encryption')) {
                obj['encryption'] = UpdateFlowOutputRequestEncryption.constructFromObject(data['encryption']);
            }
            if (data.hasOwnProperty('maxLatency')) {
                obj['maxLatency'] = ApiClient.convertToType(data['maxLatency'], 'Number');
            }
            if (data.hasOwnProperty('mediaStreamOutputConfigurations')) {
                obj['mediaStreamOutputConfigurations'] = ApiClient.convertToType(data['mediaStreamOutputConfigurations'], [MediaStreamOutputConfigurationRequest]);
            }
            if (data.hasOwnProperty('minLatency')) {
                obj['minLatency'] = ApiClient.convertToType(data['minLatency'], 'Number');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('remoteId')) {
                obj['remoteId'] = ApiClient.convertToType(data['remoteId'], 'String');
            }
            if (data.hasOwnProperty('senderControlPort')) {
                obj['senderControlPort'] = ApiClient.convertToType(data['senderControlPort'], 'Number');
            }
            if (data.hasOwnProperty('senderIpAddress')) {
                obj['senderIpAddress'] = ApiClient.convertToType(data['senderIpAddress'], 'String');
            }
            if (data.hasOwnProperty('smoothingLatency')) {
                obj['smoothingLatency'] = ApiClient.convertToType(data['smoothingLatency'], 'Number');
            }
            if (data.hasOwnProperty('streamId')) {
                obj['streamId'] = ApiClient.convertToType(data['streamId'], 'String');
            }
            if (data.hasOwnProperty('vpcInterfaceAttachment')) {
                obj['vpcInterfaceAttachment'] = UpdateFlowOutputRequestVpcInterfaceAttachment.constructFromObject(data['vpcInterfaceAttachment']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateFlowOutputRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateFlowOutputRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['cidrAllowList'])) {
            throw new Error("Expected the field `cidrAllowList` to be an array in the JSON data but got " + data['cidrAllowList']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['destination'] && !(typeof data['destination'] === 'string' || data['destination'] instanceof String)) {
            throw new Error("Expected the field `destination` to be a primitive type in the JSON string but got " + data['destination']);
        }
        // validate the optional field `encryption`
        if (data['encryption']) { // data not null
          UpdateFlowOutputRequestEncryption.validateJSON(data['encryption']);
        }
        if (data['mediaStreamOutputConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mediaStreamOutputConfigurations'])) {
                throw new Error("Expected the field `mediaStreamOutputConfigurations` to be an array in the JSON data but got " + data['mediaStreamOutputConfigurations']);
            }
            // validate the optional field `mediaStreamOutputConfigurations` (array)
            for (const item of data['mediaStreamOutputConfigurations']) {
                MediaStreamOutputConfigurationRequest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['remoteId'] && !(typeof data['remoteId'] === 'string' || data['remoteId'] instanceof String)) {
            throw new Error("Expected the field `remoteId` to be a primitive type in the JSON string but got " + data['remoteId']);
        }
        // ensure the json data is a string
        if (data['senderIpAddress'] && !(typeof data['senderIpAddress'] === 'string' || data['senderIpAddress'] instanceof String)) {
            throw new Error("Expected the field `senderIpAddress` to be a primitive type in the JSON string but got " + data['senderIpAddress']);
        }
        // ensure the json data is a string
        if (data['streamId'] && !(typeof data['streamId'] === 'string' || data['streamId'] instanceof String)) {
            throw new Error("Expected the field `streamId` to be a primitive type in the JSON string but got " + data['streamId']);
        }
        // validate the optional field `vpcInterfaceAttachment`
        if (data['vpcInterfaceAttachment']) { // data not null
          UpdateFlowOutputRequestVpcInterfaceAttachment.validateJSON(data['vpcInterfaceAttachment']);
        }

        return true;
    }


}



/**
 * The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
 * @member {Array.<String>} cidrAllowList
 */
UpdateFlowOutputRequest.prototype['cidrAllowList'] = undefined;

/**
 * A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.
 * @member {String} description
 */
UpdateFlowOutputRequest.prototype['description'] = undefined;

/**
 * The IP address where you want to send the output.
 * @member {String} destination
 */
UpdateFlowOutputRequest.prototype['destination'] = undefined;

/**
 * @member {module:model/UpdateFlowOutputRequestEncryption} encryption
 */
UpdateFlowOutputRequest.prototype['encryption'] = undefined;

/**
 * The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
 * @member {Number} maxLatency
 */
UpdateFlowOutputRequest.prototype['maxLatency'] = undefined;

/**
 * The media streams that are associated with the output, and the parameters for those associations.
 * @member {Array.<module:model/MediaStreamOutputConfigurationRequest>} mediaStreamOutputConfigurations
 */
UpdateFlowOutputRequest.prototype['mediaStreamOutputConfigurations'] = undefined;

/**
 * The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
 * @member {Number} minLatency
 */
UpdateFlowOutputRequest.prototype['minLatency'] = undefined;

/**
 * The port to use when content is distributed to this output.
 * @member {Number} port
 */
UpdateFlowOutputRequest.prototype['port'] = undefined;

/**
 * The protocol to use for the output.
 * @member {module:model/UpdateFlowOutputRequest.ProtocolEnum} protocol
 */
UpdateFlowOutputRequest.prototype['protocol'] = undefined;

/**
 * The remote ID for the Zixi-pull stream.
 * @member {String} remoteId
 */
UpdateFlowOutputRequest.prototype['remoteId'] = undefined;

/**
 * The port that the flow uses to send outbound requests to initiate connection with the sender.
 * @member {Number} senderControlPort
 */
UpdateFlowOutputRequest.prototype['senderControlPort'] = undefined;

/**
 * The IP address that the flow communicates with to initiate connection with the sender.
 * @member {String} senderIpAddress
 */
UpdateFlowOutputRequest.prototype['senderIpAddress'] = undefined;

/**
 * The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
 * @member {Number} smoothingLatency
 */
UpdateFlowOutputRequest.prototype['smoothingLatency'] = undefined;

/**
 * The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.
 * @member {String} streamId
 */
UpdateFlowOutputRequest.prototype['streamId'] = undefined;

/**
 * @member {module:model/UpdateFlowOutputRequestVpcInterfaceAttachment} vpcInterfaceAttachment
 */
UpdateFlowOutputRequest.prototype['vpcInterfaceAttachment'] = undefined;





/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
UpdateFlowOutputRequest['ProtocolEnum'] = {

    /**
     * value: "zixi-push"
     * @const
     */
    "zixi-push": "zixi-push",

    /**
     * value: "rtp-fec"
     * @const
     */
    "rtp-fec": "rtp-fec",

    /**
     * value: "rtp"
     * @const
     */
    "rtp": "rtp",

    /**
     * value: "zixi-pull"
     * @const
     */
    "zixi-pull": "zixi-pull",

    /**
     * value: "rist"
     * @const
     */
    "rist": "rist",

    /**
     * value: "st2110-jpegxs"
     * @const
     */
    "st2110-jpegxs": "st2110-jpegxs",

    /**
     * value: "cdi"
     * @const
     */
    "cdi": "cdi",

    /**
     * value: "srt-listener"
     * @const
     */
    "srt-listener": "srt-listener",

    /**
     * value: "srt-caller"
     * @const
     */
    "srt-caller": "srt-caller",

    /**
     * value: "fujitsu-qos"
     * @const
     */
    "fujitsu-qos": "fujitsu-qos",

    /**
     * value: "udp"
     * @const
     */
    "udp": "udp"
};



export default UpdateFlowOutputRequest;

