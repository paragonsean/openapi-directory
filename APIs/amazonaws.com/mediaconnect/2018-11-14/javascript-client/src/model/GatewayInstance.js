/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BridgePlacement from './BridgePlacement';
import ConnectionStatus from './ConnectionStatus';
import InstanceState from './InstanceState';

/**
 * The GatewayInstance model module.
 * @module model/GatewayInstance
 * @version 2018-11-14
 */
class GatewayInstance {
    /**
     * Constructs a new <code>GatewayInstance</code>.
     * The settings for an instance in a gateway.
     * @alias module:model/GatewayInstance
     * @param bridgePlacement {module:model/BridgePlacement} 
     * @param connectionStatus {module:model/ConnectionStatus} 
     * @param gatewayArn {String} 
     * @param gatewayInstanceArn {String} 
     * @param instanceId {String} 
     * @param instanceState {module:model/InstanceState} 
     * @param runningBridgeCount {Number} 
     */
    constructor(bridgePlacement, connectionStatus, gatewayArn, gatewayInstanceArn, instanceId, instanceState, runningBridgeCount) { 
        
        GatewayInstance.initialize(this, bridgePlacement, connectionStatus, gatewayArn, gatewayInstanceArn, instanceId, instanceState, runningBridgeCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bridgePlacement, connectionStatus, gatewayArn, gatewayInstanceArn, instanceId, instanceState, runningBridgeCount) { 
        obj['BridgePlacement'] = bridgePlacement;
        obj['ConnectionStatus'] = connectionStatus;
        obj['GatewayArn'] = gatewayArn;
        obj['GatewayInstanceArn'] = gatewayInstanceArn;
        obj['InstanceId'] = instanceId;
        obj['InstanceState'] = instanceState;
        obj['RunningBridgeCount'] = runningBridgeCount;
    }

    /**
     * Constructs a <code>GatewayInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GatewayInstance} obj Optional instance to populate.
     * @return {module:model/GatewayInstance} The populated <code>GatewayInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GatewayInstance();

            if (data.hasOwnProperty('BridgePlacement')) {
                obj['BridgePlacement'] = ApiClient.convertToType(data['BridgePlacement'], BridgePlacement);
            }
            if (data.hasOwnProperty('ConnectionStatus')) {
                obj['ConnectionStatus'] = ApiClient.convertToType(data['ConnectionStatus'], ConnectionStatus);
            }
            if (data.hasOwnProperty('GatewayArn')) {
                obj['GatewayArn'] = ApiClient.convertToType(data['GatewayArn'], 'String');
            }
            if (data.hasOwnProperty('GatewayInstanceArn')) {
                obj['GatewayInstanceArn'] = ApiClient.convertToType(data['GatewayInstanceArn'], 'String');
            }
            if (data.hasOwnProperty('InstanceId')) {
                obj['InstanceId'] = ApiClient.convertToType(data['InstanceId'], 'String');
            }
            if (data.hasOwnProperty('InstanceMessages')) {
                obj['InstanceMessages'] = ApiClient.convertToType(data['InstanceMessages'], Array);
            }
            if (data.hasOwnProperty('InstanceState')) {
                obj['InstanceState'] = ApiClient.convertToType(data['InstanceState'], InstanceState);
            }
            if (data.hasOwnProperty('RunningBridgeCount')) {
                obj['RunningBridgeCount'] = ApiClient.convertToType(data['RunningBridgeCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GatewayInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GatewayInstance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GatewayInstance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `BridgePlacement`
        if (data['BridgePlacement']) { // data not null
          BridgePlacement.validateJSON(data['BridgePlacement']);
        }
        // validate the optional field `ConnectionStatus`
        if (data['ConnectionStatus']) { // data not null
          ConnectionStatus.validateJSON(data['ConnectionStatus']);
        }
        // validate the optional field `GatewayArn`
        if (data['GatewayArn']) { // data not null
          String.validateJSON(data['GatewayArn']);
        }
        // validate the optional field `GatewayInstanceArn`
        if (data['GatewayInstanceArn']) { // data not null
          String.validateJSON(data['GatewayInstanceArn']);
        }
        // validate the optional field `InstanceId`
        if (data['InstanceId']) { // data not null
          String.validateJSON(data['InstanceId']);
        }
        // validate the optional field `InstanceMessages`
        if (data['InstanceMessages']) { // data not null
          Array.validateJSON(data['InstanceMessages']);
        }
        // validate the optional field `InstanceState`
        if (data['InstanceState']) { // data not null
          InstanceState.validateJSON(data['InstanceState']);
        }
        // validate the optional field `RunningBridgeCount`
        if (data['RunningBridgeCount']) { // data not null
          Number.validateJSON(data['RunningBridgeCount']);
        }

        return true;
    }


}

GatewayInstance.RequiredProperties = ["BridgePlacement", "ConnectionStatus", "GatewayArn", "GatewayInstanceArn", "InstanceId", "InstanceState", "RunningBridgeCount"];

/**
 * @member {module:model/BridgePlacement} BridgePlacement
 */
GatewayInstance.prototype['BridgePlacement'] = undefined;

/**
 * @member {module:model/ConnectionStatus} ConnectionStatus
 */
GatewayInstance.prototype['ConnectionStatus'] = undefined;

/**
 * @member {String} GatewayArn
 */
GatewayInstance.prototype['GatewayArn'] = undefined;

/**
 * @member {String} GatewayInstanceArn
 */
GatewayInstance.prototype['GatewayInstanceArn'] = undefined;

/**
 * @member {String} InstanceId
 */
GatewayInstance.prototype['InstanceId'] = undefined;

/**
 * @member {Array} InstanceMessages
 */
GatewayInstance.prototype['InstanceMessages'] = undefined;

/**
 * @member {module:model/InstanceState} InstanceState
 */
GatewayInstance.prototype['InstanceState'] = undefined;

/**
 * @member {Number} RunningBridgeCount
 */
GatewayInstance.prototype['RunningBridgeCount'] = undefined;






export default GatewayInstance;

