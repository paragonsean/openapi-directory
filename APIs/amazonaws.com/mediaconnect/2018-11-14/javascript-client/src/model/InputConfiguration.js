/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputConfigurationInterface from './InputConfigurationInterface';

/**
 * The InputConfiguration model module.
 * @module model/InputConfiguration
 * @version 2018-11-14
 */
class InputConfiguration {
    /**
     * Constructs a new <code>InputConfiguration</code>.
     * The transport parameters that are associated with an incoming media stream.
     * @alias module:model/InputConfiguration
     * @param inputIp {String} 
     * @param inputPort {Number} 
     * @param _interface {module:model/InputConfigurationInterface} 
     */
    constructor(inputIp, inputPort, _interface) { 
        
        InputConfiguration.initialize(this, inputIp, inputPort, _interface);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, inputIp, inputPort, _interface) { 
        obj['InputIp'] = inputIp;
        obj['InputPort'] = inputPort;
        obj['Interface'] = _interface;
    }

    /**
     * Constructs a <code>InputConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputConfiguration} obj Optional instance to populate.
     * @return {module:model/InputConfiguration} The populated <code>InputConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputConfiguration();

            if (data.hasOwnProperty('InputIp')) {
                obj['InputIp'] = ApiClient.convertToType(data['InputIp'], 'String');
            }
            if (data.hasOwnProperty('InputPort')) {
                obj['InputPort'] = ApiClient.convertToType(data['InputPort'], 'Number');
            }
            if (data.hasOwnProperty('Interface')) {
                obj['Interface'] = InputConfigurationInterface.constructFromObject(data['Interface']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `InputIp`
        if (data['InputIp']) { // data not null
          String.validateJSON(data['InputIp']);
        }
        // validate the optional field `InputPort`
        if (data['InputPort']) { // data not null
          Number.validateJSON(data['InputPort']);
        }
        // validate the optional field `Interface`
        if (data['Interface']) { // data not null
          InputConfigurationInterface.validateJSON(data['Interface']);
        }

        return true;
    }


}

InputConfiguration.RequiredProperties = ["InputIp", "InputPort", "Interface"];

/**
 * @member {String} InputIp
 */
InputConfiguration.prototype['InputIp'] = undefined;

/**
 * @member {Number} InputPort
 */
InputConfiguration.prototype['InputPort'] = undefined;

/**
 * @member {module:model/InputConfigurationInterface} Interface
 */
InputConfiguration.prototype['Interface'] = undefined;






export default InputConfiguration;

