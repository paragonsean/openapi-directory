/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PurchaseOfferingRequest model module.
 * @module model/PurchaseOfferingRequest
 * @version 2018-11-14
 */
class PurchaseOfferingRequest {
    /**
     * Constructs a new <code>PurchaseOfferingRequest</code>.
     * @alias module:model/PurchaseOfferingRequest
     * @param reservationName {String} The name that you want to use for the reservation.
     * @param start {String} The date and time that you want the reservation to begin, in Coordinated Universal Time (UTC). You can specify any date and time between 12:00am on the first day of the current month to the current time on today's date, inclusive. Specify the start in a 24-hour notation. Use the following format: YYYY-MM-DDTHH:mm:SSZ, where T and Z are literal characters. For example, to specify 11:30pm on March 5, 2020, enter 2020-03-05T23:30:00Z.
     */
    constructor(reservationName, start) { 
        
        PurchaseOfferingRequest.initialize(this, reservationName, start);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, reservationName, start) { 
        obj['reservationName'] = reservationName;
        obj['start'] = start;
    }

    /**
     * Constructs a <code>PurchaseOfferingRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PurchaseOfferingRequest} obj Optional instance to populate.
     * @return {module:model/PurchaseOfferingRequest} The populated <code>PurchaseOfferingRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PurchaseOfferingRequest();

            if (data.hasOwnProperty('reservationName')) {
                obj['reservationName'] = ApiClient.convertToType(data['reservationName'], 'String');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PurchaseOfferingRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PurchaseOfferingRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PurchaseOfferingRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['reservationName'] && !(typeof data['reservationName'] === 'string' || data['reservationName'] instanceof String)) {
            throw new Error("Expected the field `reservationName` to be a primitive type in the JSON string but got " + data['reservationName']);
        }
        // ensure the json data is a string
        if (data['start'] && !(typeof data['start'] === 'string' || data['start'] instanceof String)) {
            throw new Error("Expected the field `start` to be a primitive type in the JSON string but got " + data['start']);
        }

        return true;
    }


}

PurchaseOfferingRequest.RequiredProperties = ["reservationName", "start"];

/**
 * The name that you want to use for the reservation.
 * @member {String} reservationName
 */
PurchaseOfferingRequest.prototype['reservationName'] = undefined;

/**
 * The date and time that you want the reservation to begin, in Coordinated Universal Time (UTC). You can specify any date and time between 12:00am on the first day of the current month to the current time on today's date, inclusive. Specify the start in a 24-hour notation. Use the following format: YYYY-MM-DDTHH:mm:SSZ, where T and Z are literal characters. For example, to specify 11:30pm on March 5, 2020, enter 2020-03-05T23:30:00Z.
 * @member {String} start
 */
PurchaseOfferingRequest.prototype['start'] = undefined;






export default PurchaseOfferingRequest;

