/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateBridgeRequestSourceFailoverConfigSourcePriority;
import org.openapitools.client.model.FailoverMode;
import org.openapitools.client.model.State;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBridgeRequestSourceFailoverConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBridgeRequestSourceFailoverConfig {
  public static final String SERIALIZED_NAME_FAILOVER_MODE = "FailoverMode";
  @SerializedName(SERIALIZED_NAME_FAILOVER_MODE)
  private FailoverMode failoverMode;

  public static final String SERIALIZED_NAME_RECOVERY_WINDOW = "RecoveryWindow";
  @SerializedName(SERIALIZED_NAME_RECOVERY_WINDOW)
  private Integer recoveryWindow;

  public static final String SERIALIZED_NAME_SOURCE_PRIORITY = "SourcePriority";
  @SerializedName(SERIALIZED_NAME_SOURCE_PRIORITY)
  private CreateBridgeRequestSourceFailoverConfigSourcePriority sourcePriority;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private State state;

  public CreateBridgeRequestSourceFailoverConfig() {
  }

  public CreateBridgeRequestSourceFailoverConfig failoverMode(FailoverMode failoverMode) {
    this.failoverMode = failoverMode;
    return this;
  }

  /**
   * Get failoverMode
   * @return failoverMode
   */
  @javax.annotation.Nullable
  public FailoverMode getFailoverMode() {
    return failoverMode;
  }

  public void setFailoverMode(FailoverMode failoverMode) {
    this.failoverMode = failoverMode;
  }


  public CreateBridgeRequestSourceFailoverConfig recoveryWindow(Integer recoveryWindow) {
    this.recoveryWindow = recoveryWindow;
    return this;
  }

  /**
   * Get recoveryWindow
   * @return recoveryWindow
   */
  @javax.annotation.Nullable
  public Integer getRecoveryWindow() {
    return recoveryWindow;
  }

  public void setRecoveryWindow(Integer recoveryWindow) {
    this.recoveryWindow = recoveryWindow;
  }


  public CreateBridgeRequestSourceFailoverConfig sourcePriority(CreateBridgeRequestSourceFailoverConfigSourcePriority sourcePriority) {
    this.sourcePriority = sourcePriority;
    return this;
  }

  /**
   * Get sourcePriority
   * @return sourcePriority
   */
  @javax.annotation.Nullable
  public CreateBridgeRequestSourceFailoverConfigSourcePriority getSourcePriority() {
    return sourcePriority;
  }

  public void setSourcePriority(CreateBridgeRequestSourceFailoverConfigSourcePriority sourcePriority) {
    this.sourcePriority = sourcePriority;
  }


  public CreateBridgeRequestSourceFailoverConfig state(State state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public State getState() {
    return state;
  }

  public void setState(State state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBridgeRequestSourceFailoverConfig createBridgeRequestSourceFailoverConfig = (CreateBridgeRequestSourceFailoverConfig) o;
    return Objects.equals(this.failoverMode, createBridgeRequestSourceFailoverConfig.failoverMode) &&
        Objects.equals(this.recoveryWindow, createBridgeRequestSourceFailoverConfig.recoveryWindow) &&
        Objects.equals(this.sourcePriority, createBridgeRequestSourceFailoverConfig.sourcePriority) &&
        Objects.equals(this.state, createBridgeRequestSourceFailoverConfig.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failoverMode, recoveryWindow, sourcePriority, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBridgeRequestSourceFailoverConfig {\n");
    sb.append("    failoverMode: ").append(toIndentedString(failoverMode)).append("\n");
    sb.append("    recoveryWindow: ").append(toIndentedString(recoveryWindow)).append("\n");
    sb.append("    sourcePriority: ").append(toIndentedString(sourcePriority)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FailoverMode");
    openapiFields.add("RecoveryWindow");
    openapiFields.add("SourcePriority");
    openapiFields.add("State");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBridgeRequestSourceFailoverConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBridgeRequestSourceFailoverConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBridgeRequestSourceFailoverConfig is not found in the empty JSON string", CreateBridgeRequestSourceFailoverConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBridgeRequestSourceFailoverConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBridgeRequestSourceFailoverConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FailoverMode`
      if (jsonObj.get("FailoverMode") != null && !jsonObj.get("FailoverMode").isJsonNull()) {
        FailoverMode.validateJsonElement(jsonObj.get("FailoverMode"));
      }
      // validate the optional field `RecoveryWindow`
      if (jsonObj.get("RecoveryWindow") != null && !jsonObj.get("RecoveryWindow").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RecoveryWindow"));
      }
      // validate the optional field `SourcePriority`
      if (jsonObj.get("SourcePriority") != null && !jsonObj.get("SourcePriority").isJsonNull()) {
        CreateBridgeRequestSourceFailoverConfigSourcePriority.validateJsonElement(jsonObj.get("SourcePriority"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        State.validateJsonElement(jsonObj.get("State"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBridgeRequestSourceFailoverConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBridgeRequestSourceFailoverConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBridgeRequestSourceFailoverConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBridgeRequestSourceFailoverConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBridgeRequestSourceFailoverConfig>() {
           @Override
           public void write(JsonWriter out, CreateBridgeRequestSourceFailoverConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBridgeRequestSourceFailoverConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBridgeRequestSourceFailoverConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBridgeRequestSourceFailoverConfig
   * @throws IOException if the JSON string is invalid with respect to CreateBridgeRequestSourceFailoverConfig
   */
  public static CreateBridgeRequestSourceFailoverConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBridgeRequestSourceFailoverConfig.class);
  }

  /**
   * Convert an instance of CreateBridgeRequestSourceFailoverConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

