/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Protocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SourceTransport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceTransport {
  public static final String SERIALIZED_NAME_CIDR_ALLOW_LIST = "CidrAllowList";
  @SerializedName(SERIALIZED_NAME_CIDR_ALLOW_LIST)
  private List cidrAllowList;

  public static final String SERIALIZED_NAME_MAX_BITRATE = "MaxBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_BITRATE)
  private Integer maxBitrate;

  public static final String SERIALIZED_NAME_MAX_LATENCY = "MaxLatency";
  @SerializedName(SERIALIZED_NAME_MAX_LATENCY)
  private Integer maxLatency;

  public static final String SERIALIZED_NAME_MAX_SYNC_BUFFER = "MaxSyncBuffer";
  @SerializedName(SERIALIZED_NAME_MAX_SYNC_BUFFER)
  private Integer maxSyncBuffer;

  public static final String SERIALIZED_NAME_MIN_LATENCY = "MinLatency";
  @SerializedName(SERIALIZED_NAME_MIN_LATENCY)
  private Integer minLatency;

  public static final String SERIALIZED_NAME_PROTOCOL = "Protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private Protocol protocol;

  public static final String SERIALIZED_NAME_REMOTE_ID = "RemoteId";
  @SerializedName(SERIALIZED_NAME_REMOTE_ID)
  private String remoteId;

  public static final String SERIALIZED_NAME_SENDER_CONTROL_PORT = "SenderControlPort";
  @SerializedName(SERIALIZED_NAME_SENDER_CONTROL_PORT)
  private Integer senderControlPort;

  public static final String SERIALIZED_NAME_SENDER_IP_ADDRESS = "SenderIpAddress";
  @SerializedName(SERIALIZED_NAME_SENDER_IP_ADDRESS)
  private String senderIpAddress;

  public static final String SERIALIZED_NAME_SMOOTHING_LATENCY = "SmoothingLatency";
  @SerializedName(SERIALIZED_NAME_SMOOTHING_LATENCY)
  private Integer smoothingLatency;

  public static final String SERIALIZED_NAME_SOURCE_LISTENER_ADDRESS = "SourceListenerAddress";
  @SerializedName(SERIALIZED_NAME_SOURCE_LISTENER_ADDRESS)
  private String sourceListenerAddress;

  public static final String SERIALIZED_NAME_SOURCE_LISTENER_PORT = "SourceListenerPort";
  @SerializedName(SERIALIZED_NAME_SOURCE_LISTENER_PORT)
  private Integer sourceListenerPort;

  public static final String SERIALIZED_NAME_STREAM_ID = "StreamId";
  @SerializedName(SERIALIZED_NAME_STREAM_ID)
  private String streamId;

  public SourceTransport() {
  }

  public SourceTransport cidrAllowList(List cidrAllowList) {
    this.cidrAllowList = cidrAllowList;
    return this;
  }

  /**
   * Get cidrAllowList
   * @return cidrAllowList
   */
  @javax.annotation.Nullable
  public List getCidrAllowList() {
    return cidrAllowList;
  }

  public void setCidrAllowList(List cidrAllowList) {
    this.cidrAllowList = cidrAllowList;
  }


  public SourceTransport maxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
    return this;
  }

  /**
   * Get maxBitrate
   * @return maxBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxBitrate() {
    return maxBitrate;
  }

  public void setMaxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
  }


  public SourceTransport maxLatency(Integer maxLatency) {
    this.maxLatency = maxLatency;
    return this;
  }

  /**
   * Get maxLatency
   * @return maxLatency
   */
  @javax.annotation.Nullable
  public Integer getMaxLatency() {
    return maxLatency;
  }

  public void setMaxLatency(Integer maxLatency) {
    this.maxLatency = maxLatency;
  }


  public SourceTransport maxSyncBuffer(Integer maxSyncBuffer) {
    this.maxSyncBuffer = maxSyncBuffer;
    return this;
  }

  /**
   * Get maxSyncBuffer
   * @return maxSyncBuffer
   */
  @javax.annotation.Nullable
  public Integer getMaxSyncBuffer() {
    return maxSyncBuffer;
  }

  public void setMaxSyncBuffer(Integer maxSyncBuffer) {
    this.maxSyncBuffer = maxSyncBuffer;
  }


  public SourceTransport minLatency(Integer minLatency) {
    this.minLatency = minLatency;
    return this;
  }

  /**
   * Get minLatency
   * @return minLatency
   */
  @javax.annotation.Nullable
  public Integer getMinLatency() {
    return minLatency;
  }

  public void setMinLatency(Integer minLatency) {
    this.minLatency = minLatency;
  }


  public SourceTransport protocol(Protocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nonnull
  public Protocol getProtocol() {
    return protocol;
  }

  public void setProtocol(Protocol protocol) {
    this.protocol = protocol;
  }


  public SourceTransport remoteId(String remoteId) {
    this.remoteId = remoteId;
    return this;
  }

  /**
   * Get remoteId
   * @return remoteId
   */
  @javax.annotation.Nullable
  public String getRemoteId() {
    return remoteId;
  }

  public void setRemoteId(String remoteId) {
    this.remoteId = remoteId;
  }


  public SourceTransport senderControlPort(Integer senderControlPort) {
    this.senderControlPort = senderControlPort;
    return this;
  }

  /**
   * Get senderControlPort
   * @return senderControlPort
   */
  @javax.annotation.Nullable
  public Integer getSenderControlPort() {
    return senderControlPort;
  }

  public void setSenderControlPort(Integer senderControlPort) {
    this.senderControlPort = senderControlPort;
  }


  public SourceTransport senderIpAddress(String senderIpAddress) {
    this.senderIpAddress = senderIpAddress;
    return this;
  }

  /**
   * Get senderIpAddress
   * @return senderIpAddress
   */
  @javax.annotation.Nullable
  public String getSenderIpAddress() {
    return senderIpAddress;
  }

  public void setSenderIpAddress(String senderIpAddress) {
    this.senderIpAddress = senderIpAddress;
  }


  public SourceTransport smoothingLatency(Integer smoothingLatency) {
    this.smoothingLatency = smoothingLatency;
    return this;
  }

  /**
   * Get smoothingLatency
   * @return smoothingLatency
   */
  @javax.annotation.Nullable
  public Integer getSmoothingLatency() {
    return smoothingLatency;
  }

  public void setSmoothingLatency(Integer smoothingLatency) {
    this.smoothingLatency = smoothingLatency;
  }


  public SourceTransport sourceListenerAddress(String sourceListenerAddress) {
    this.sourceListenerAddress = sourceListenerAddress;
    return this;
  }

  /**
   * Get sourceListenerAddress
   * @return sourceListenerAddress
   */
  @javax.annotation.Nullable
  public String getSourceListenerAddress() {
    return sourceListenerAddress;
  }

  public void setSourceListenerAddress(String sourceListenerAddress) {
    this.sourceListenerAddress = sourceListenerAddress;
  }


  public SourceTransport sourceListenerPort(Integer sourceListenerPort) {
    this.sourceListenerPort = sourceListenerPort;
    return this;
  }

  /**
   * Get sourceListenerPort
   * @return sourceListenerPort
   */
  @javax.annotation.Nullable
  public Integer getSourceListenerPort() {
    return sourceListenerPort;
  }

  public void setSourceListenerPort(Integer sourceListenerPort) {
    this.sourceListenerPort = sourceListenerPort;
  }


  public SourceTransport streamId(String streamId) {
    this.streamId = streamId;
    return this;
  }

  /**
   * Get streamId
   * @return streamId
   */
  @javax.annotation.Nullable
  public String getStreamId() {
    return streamId;
  }

  public void setStreamId(String streamId) {
    this.streamId = streamId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceTransport sourceTransport = (SourceTransport) o;
    return Objects.equals(this.cidrAllowList, sourceTransport.cidrAllowList) &&
        Objects.equals(this.maxBitrate, sourceTransport.maxBitrate) &&
        Objects.equals(this.maxLatency, sourceTransport.maxLatency) &&
        Objects.equals(this.maxSyncBuffer, sourceTransport.maxSyncBuffer) &&
        Objects.equals(this.minLatency, sourceTransport.minLatency) &&
        Objects.equals(this.protocol, sourceTransport.protocol) &&
        Objects.equals(this.remoteId, sourceTransport.remoteId) &&
        Objects.equals(this.senderControlPort, sourceTransport.senderControlPort) &&
        Objects.equals(this.senderIpAddress, sourceTransport.senderIpAddress) &&
        Objects.equals(this.smoothingLatency, sourceTransport.smoothingLatency) &&
        Objects.equals(this.sourceListenerAddress, sourceTransport.sourceListenerAddress) &&
        Objects.equals(this.sourceListenerPort, sourceTransport.sourceListenerPort) &&
        Objects.equals(this.streamId, sourceTransport.streamId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cidrAllowList, maxBitrate, maxLatency, maxSyncBuffer, minLatency, protocol, remoteId, senderControlPort, senderIpAddress, smoothingLatency, sourceListenerAddress, sourceListenerPort, streamId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceTransport {\n");
    sb.append("    cidrAllowList: ").append(toIndentedString(cidrAllowList)).append("\n");
    sb.append("    maxBitrate: ").append(toIndentedString(maxBitrate)).append("\n");
    sb.append("    maxLatency: ").append(toIndentedString(maxLatency)).append("\n");
    sb.append("    maxSyncBuffer: ").append(toIndentedString(maxSyncBuffer)).append("\n");
    sb.append("    minLatency: ").append(toIndentedString(minLatency)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    remoteId: ").append(toIndentedString(remoteId)).append("\n");
    sb.append("    senderControlPort: ").append(toIndentedString(senderControlPort)).append("\n");
    sb.append("    senderIpAddress: ").append(toIndentedString(senderIpAddress)).append("\n");
    sb.append("    smoothingLatency: ").append(toIndentedString(smoothingLatency)).append("\n");
    sb.append("    sourceListenerAddress: ").append(toIndentedString(sourceListenerAddress)).append("\n");
    sb.append("    sourceListenerPort: ").append(toIndentedString(sourceListenerPort)).append("\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CidrAllowList");
    openapiFields.add("MaxBitrate");
    openapiFields.add("MaxLatency");
    openapiFields.add("MaxSyncBuffer");
    openapiFields.add("MinLatency");
    openapiFields.add("Protocol");
    openapiFields.add("RemoteId");
    openapiFields.add("SenderControlPort");
    openapiFields.add("SenderIpAddress");
    openapiFields.add("SmoothingLatency");
    openapiFields.add("SourceListenerAddress");
    openapiFields.add("SourceListenerPort");
    openapiFields.add("StreamId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Protocol");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceTransport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceTransport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceTransport is not found in the empty JSON string", SourceTransport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceTransport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceTransport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceTransport.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CidrAllowList`
      if (jsonObj.get("CidrAllowList") != null && !jsonObj.get("CidrAllowList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CidrAllowList"));
      }
      // validate the optional field `MaxBitrate`
      if (jsonObj.get("MaxBitrate") != null && !jsonObj.get("MaxBitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxBitrate"));
      }
      // validate the optional field `MaxLatency`
      if (jsonObj.get("MaxLatency") != null && !jsonObj.get("MaxLatency").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxLatency"));
      }
      // validate the optional field `MaxSyncBuffer`
      if (jsonObj.get("MaxSyncBuffer") != null && !jsonObj.get("MaxSyncBuffer").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxSyncBuffer"));
      }
      // validate the optional field `MinLatency`
      if (jsonObj.get("MinLatency") != null && !jsonObj.get("MinLatency").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinLatency"));
      }
      // validate the required field `Protocol`
      Protocol.validateJsonElement(jsonObj.get("Protocol"));
      // validate the optional field `RemoteId`
      if (jsonObj.get("RemoteId") != null && !jsonObj.get("RemoteId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RemoteId"));
      }
      // validate the optional field `SenderControlPort`
      if (jsonObj.get("SenderControlPort") != null && !jsonObj.get("SenderControlPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SenderControlPort"));
      }
      // validate the optional field `SenderIpAddress`
      if (jsonObj.get("SenderIpAddress") != null && !jsonObj.get("SenderIpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SenderIpAddress"));
      }
      // validate the optional field `SmoothingLatency`
      if (jsonObj.get("SmoothingLatency") != null && !jsonObj.get("SmoothingLatency").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SmoothingLatency"));
      }
      // validate the optional field `SourceListenerAddress`
      if (jsonObj.get("SourceListenerAddress") != null && !jsonObj.get("SourceListenerAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceListenerAddress"));
      }
      // validate the optional field `SourceListenerPort`
      if (jsonObj.get("SourceListenerPort") != null && !jsonObj.get("SourceListenerPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SourceListenerPort"));
      }
      // validate the optional field `StreamId`
      if (jsonObj.get("StreamId") != null && !jsonObj.get("StreamId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StreamId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceTransport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceTransport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceTransport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceTransport.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceTransport>() {
           @Override
           public void write(JsonWriter out, SourceTransport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceTransport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceTransport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceTransport
   * @throws IOException if the JSON string is invalid with respect to SourceTransport
   */
  public static SourceTransport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceTransport.class);
  }

  /**
   * Convert an instance of SourceTransport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

