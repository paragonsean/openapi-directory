/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MediaStreamAttributes;
import org.openapitools.client.model.MediaStreamType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateFlowMediaStreamResponseMediaStream
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFlowMediaStreamResponseMediaStream {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private MediaStreamAttributes attributes;

  public static final String SERIALIZED_NAME_CLOCK_RATE = "ClockRate";
  @SerializedName(SERIALIZED_NAME_CLOCK_RATE)
  private Integer clockRate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FMT = "Fmt";
  @SerializedName(SERIALIZED_NAME_FMT)
  private Integer fmt;

  public static final String SERIALIZED_NAME_MEDIA_STREAM_ID = "MediaStreamId";
  @SerializedName(SERIALIZED_NAME_MEDIA_STREAM_ID)
  private Integer mediaStreamId;

  public static final String SERIALIZED_NAME_MEDIA_STREAM_NAME = "MediaStreamName";
  @SerializedName(SERIALIZED_NAME_MEDIA_STREAM_NAME)
  private String mediaStreamName;

  public static final String SERIALIZED_NAME_MEDIA_STREAM_TYPE = "MediaStreamType";
  @SerializedName(SERIALIZED_NAME_MEDIA_STREAM_TYPE)
  private MediaStreamType mediaStreamType;

  public static final String SERIALIZED_NAME_VIDEO_FORMAT = "VideoFormat";
  @SerializedName(SERIALIZED_NAME_VIDEO_FORMAT)
  private String videoFormat;

  public UpdateFlowMediaStreamResponseMediaStream() {
  }

  public UpdateFlowMediaStreamResponseMediaStream attributes(MediaStreamAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public MediaStreamAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(MediaStreamAttributes attributes) {
    this.attributes = attributes;
  }


  public UpdateFlowMediaStreamResponseMediaStream clockRate(Integer clockRate) {
    this.clockRate = clockRate;
    return this;
  }

  /**
   * Get clockRate
   * @return clockRate
   */
  @javax.annotation.Nullable
  public Integer getClockRate() {
    return clockRate;
  }

  public void setClockRate(Integer clockRate) {
    this.clockRate = clockRate;
  }


  public UpdateFlowMediaStreamResponseMediaStream description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateFlowMediaStreamResponseMediaStream fmt(Integer fmt) {
    this.fmt = fmt;
    return this;
  }

  /**
   * Get fmt
   * @return fmt
   */
  @javax.annotation.Nonnull
  public Integer getFmt() {
    return fmt;
  }

  public void setFmt(Integer fmt) {
    this.fmt = fmt;
  }


  public UpdateFlowMediaStreamResponseMediaStream mediaStreamId(Integer mediaStreamId) {
    this.mediaStreamId = mediaStreamId;
    return this;
  }

  /**
   * Get mediaStreamId
   * @return mediaStreamId
   */
  @javax.annotation.Nonnull
  public Integer getMediaStreamId() {
    return mediaStreamId;
  }

  public void setMediaStreamId(Integer mediaStreamId) {
    this.mediaStreamId = mediaStreamId;
  }


  public UpdateFlowMediaStreamResponseMediaStream mediaStreamName(String mediaStreamName) {
    this.mediaStreamName = mediaStreamName;
    return this;
  }

  /**
   * Get mediaStreamName
   * @return mediaStreamName
   */
  @javax.annotation.Nonnull
  public String getMediaStreamName() {
    return mediaStreamName;
  }

  public void setMediaStreamName(String mediaStreamName) {
    this.mediaStreamName = mediaStreamName;
  }


  public UpdateFlowMediaStreamResponseMediaStream mediaStreamType(MediaStreamType mediaStreamType) {
    this.mediaStreamType = mediaStreamType;
    return this;
  }

  /**
   * Get mediaStreamType
   * @return mediaStreamType
   */
  @javax.annotation.Nonnull
  public MediaStreamType getMediaStreamType() {
    return mediaStreamType;
  }

  public void setMediaStreamType(MediaStreamType mediaStreamType) {
    this.mediaStreamType = mediaStreamType;
  }


  public UpdateFlowMediaStreamResponseMediaStream videoFormat(String videoFormat) {
    this.videoFormat = videoFormat;
    return this;
  }

  /**
   * Get videoFormat
   * @return videoFormat
   */
  @javax.annotation.Nullable
  public String getVideoFormat() {
    return videoFormat;
  }

  public void setVideoFormat(String videoFormat) {
    this.videoFormat = videoFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFlowMediaStreamResponseMediaStream updateFlowMediaStreamResponseMediaStream = (UpdateFlowMediaStreamResponseMediaStream) o;
    return Objects.equals(this.attributes, updateFlowMediaStreamResponseMediaStream.attributes) &&
        Objects.equals(this.clockRate, updateFlowMediaStreamResponseMediaStream.clockRate) &&
        Objects.equals(this.description, updateFlowMediaStreamResponseMediaStream.description) &&
        Objects.equals(this.fmt, updateFlowMediaStreamResponseMediaStream.fmt) &&
        Objects.equals(this.mediaStreamId, updateFlowMediaStreamResponseMediaStream.mediaStreamId) &&
        Objects.equals(this.mediaStreamName, updateFlowMediaStreamResponseMediaStream.mediaStreamName) &&
        Objects.equals(this.mediaStreamType, updateFlowMediaStreamResponseMediaStream.mediaStreamType) &&
        Objects.equals(this.videoFormat, updateFlowMediaStreamResponseMediaStream.videoFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, clockRate, description, fmt, mediaStreamId, mediaStreamName, mediaStreamType, videoFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFlowMediaStreamResponseMediaStream {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    clockRate: ").append(toIndentedString(clockRate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fmt: ").append(toIndentedString(fmt)).append("\n");
    sb.append("    mediaStreamId: ").append(toIndentedString(mediaStreamId)).append("\n");
    sb.append("    mediaStreamName: ").append(toIndentedString(mediaStreamName)).append("\n");
    sb.append("    mediaStreamType: ").append(toIndentedString(mediaStreamType)).append("\n");
    sb.append("    videoFormat: ").append(toIndentedString(videoFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attributes");
    openapiFields.add("ClockRate");
    openapiFields.add("Description");
    openapiFields.add("Fmt");
    openapiFields.add("MediaStreamId");
    openapiFields.add("MediaStreamName");
    openapiFields.add("MediaStreamType");
    openapiFields.add("VideoFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Fmt");
    openapiRequiredFields.add("MediaStreamId");
    openapiRequiredFields.add("MediaStreamName");
    openapiRequiredFields.add("MediaStreamType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFlowMediaStreamResponseMediaStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFlowMediaStreamResponseMediaStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFlowMediaStreamResponseMediaStream is not found in the empty JSON string", UpdateFlowMediaStreamResponseMediaStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFlowMediaStreamResponseMediaStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFlowMediaStreamResponseMediaStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateFlowMediaStreamResponseMediaStream.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Attributes`
      if (jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) {
        MediaStreamAttributes.validateJsonElement(jsonObj.get("Attributes"));
      }
      // validate the optional field `ClockRate`
      if (jsonObj.get("ClockRate") != null && !jsonObj.get("ClockRate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ClockRate"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the required field `Fmt`
      Integer.validateJsonElement(jsonObj.get("Fmt"));
      // validate the required field `MediaStreamId`
      Integer.validateJsonElement(jsonObj.get("MediaStreamId"));
      // validate the required field `MediaStreamName`
      String.validateJsonElement(jsonObj.get("MediaStreamName"));
      // validate the required field `MediaStreamType`
      MediaStreamType.validateJsonElement(jsonObj.get("MediaStreamType"));
      // validate the optional field `VideoFormat`
      if (jsonObj.get("VideoFormat") != null && !jsonObj.get("VideoFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VideoFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFlowMediaStreamResponseMediaStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFlowMediaStreamResponseMediaStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFlowMediaStreamResponseMediaStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFlowMediaStreamResponseMediaStream.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFlowMediaStreamResponseMediaStream>() {
           @Override
           public void write(JsonWriter out, UpdateFlowMediaStreamResponseMediaStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFlowMediaStreamResponseMediaStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFlowMediaStreamResponseMediaStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFlowMediaStreamResponseMediaStream
   * @throws IOException if the JSON string is invalid with respect to UpdateFlowMediaStreamResponseMediaStream
   */
  public static UpdateFlowMediaStreamResponseMediaStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFlowMediaStreamResponseMediaStream.class);
  }

  /**
   * Convert an instance of UpdateFlowMediaStreamResponseMediaStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

