/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddBridgeOutputRequest;
import org.openapitools.client.model.AddBridgeSourceRequest;
import org.openapitools.client.model.CreateBridgeRequestEgressGatewayBridge;
import org.openapitools.client.model.CreateBridgeRequestIngressGatewayBridge;
import org.openapitools.client.model.CreateBridgeRequestSourceFailoverConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBridgeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBridgeRequest {
  public static final String SERIALIZED_NAME_EGRESS_GATEWAY_BRIDGE = "egressGatewayBridge";
  @SerializedName(SERIALIZED_NAME_EGRESS_GATEWAY_BRIDGE)
  private CreateBridgeRequestEgressGatewayBridge egressGatewayBridge;

  public static final String SERIALIZED_NAME_INGRESS_GATEWAY_BRIDGE = "ingressGatewayBridge";
  @SerializedName(SERIALIZED_NAME_INGRESS_GATEWAY_BRIDGE)
  private CreateBridgeRequestIngressGatewayBridge ingressGatewayBridge;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List<AddBridgeOutputRequest> outputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLACEMENT_ARN = "placementArn";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_ARN)
  private String placementArn;

  public static final String SERIALIZED_NAME_SOURCE_FAILOVER_CONFIG = "sourceFailoverConfig";
  @SerializedName(SERIALIZED_NAME_SOURCE_FAILOVER_CONFIG)
  private CreateBridgeRequestSourceFailoverConfig sourceFailoverConfig;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<AddBridgeSourceRequest> sources = new ArrayList<>();

  public CreateBridgeRequest() {
  }

  public CreateBridgeRequest egressGatewayBridge(CreateBridgeRequestEgressGatewayBridge egressGatewayBridge) {
    this.egressGatewayBridge = egressGatewayBridge;
    return this;
  }

  /**
   * Get egressGatewayBridge
   * @return egressGatewayBridge
   */
  @javax.annotation.Nullable
  public CreateBridgeRequestEgressGatewayBridge getEgressGatewayBridge() {
    return egressGatewayBridge;
  }

  public void setEgressGatewayBridge(CreateBridgeRequestEgressGatewayBridge egressGatewayBridge) {
    this.egressGatewayBridge = egressGatewayBridge;
  }


  public CreateBridgeRequest ingressGatewayBridge(CreateBridgeRequestIngressGatewayBridge ingressGatewayBridge) {
    this.ingressGatewayBridge = ingressGatewayBridge;
    return this;
  }

  /**
   * Get ingressGatewayBridge
   * @return ingressGatewayBridge
   */
  @javax.annotation.Nullable
  public CreateBridgeRequestIngressGatewayBridge getIngressGatewayBridge() {
    return ingressGatewayBridge;
  }

  public void setIngressGatewayBridge(CreateBridgeRequestIngressGatewayBridge ingressGatewayBridge) {
    this.ingressGatewayBridge = ingressGatewayBridge;
  }


  public CreateBridgeRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the bridge. This name can not be modified after the bridge is created.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateBridgeRequest outputs(List<AddBridgeOutputRequest> outputs) {
    this.outputs = outputs;
    return this;
  }

  public CreateBridgeRequest addOutputsItem(AddBridgeOutputRequest outputsItem) {
    if (this.outputs == null) {
      this.outputs = new ArrayList<>();
    }
    this.outputs.add(outputsItem);
    return this;
  }

  /**
   * The outputs that you want to add to this bridge.
   * @return outputs
   */
  @javax.annotation.Nullable
  public List<AddBridgeOutputRequest> getOutputs() {
    return outputs;
  }

  public void setOutputs(List<AddBridgeOutputRequest> outputs) {
    this.outputs = outputs;
  }


  public CreateBridgeRequest placementArn(String placementArn) {
    this.placementArn = placementArn;
    return this;
  }

  /**
   * The bridge placement Amazon Resource Number (ARN).
   * @return placementArn
   */
  @javax.annotation.Nonnull
  public String getPlacementArn() {
    return placementArn;
  }

  public void setPlacementArn(String placementArn) {
    this.placementArn = placementArn;
  }


  public CreateBridgeRequest sourceFailoverConfig(CreateBridgeRequestSourceFailoverConfig sourceFailoverConfig) {
    this.sourceFailoverConfig = sourceFailoverConfig;
    return this;
  }

  /**
   * Get sourceFailoverConfig
   * @return sourceFailoverConfig
   */
  @javax.annotation.Nullable
  public CreateBridgeRequestSourceFailoverConfig getSourceFailoverConfig() {
    return sourceFailoverConfig;
  }

  public void setSourceFailoverConfig(CreateBridgeRequestSourceFailoverConfig sourceFailoverConfig) {
    this.sourceFailoverConfig = sourceFailoverConfig;
  }


  public CreateBridgeRequest sources(List<AddBridgeSourceRequest> sources) {
    this.sources = sources;
    return this;
  }

  public CreateBridgeRequest addSourcesItem(AddBridgeSourceRequest sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * The sources that you want to add to this bridge.
   * @return sources
   */
  @javax.annotation.Nonnull
  public List<AddBridgeSourceRequest> getSources() {
    return sources;
  }

  public void setSources(List<AddBridgeSourceRequest> sources) {
    this.sources = sources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBridgeRequest createBridgeRequest = (CreateBridgeRequest) o;
    return Objects.equals(this.egressGatewayBridge, createBridgeRequest.egressGatewayBridge) &&
        Objects.equals(this.ingressGatewayBridge, createBridgeRequest.ingressGatewayBridge) &&
        Objects.equals(this.name, createBridgeRequest.name) &&
        Objects.equals(this.outputs, createBridgeRequest.outputs) &&
        Objects.equals(this.placementArn, createBridgeRequest.placementArn) &&
        Objects.equals(this.sourceFailoverConfig, createBridgeRequest.sourceFailoverConfig) &&
        Objects.equals(this.sources, createBridgeRequest.sources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(egressGatewayBridge, ingressGatewayBridge, name, outputs, placementArn, sourceFailoverConfig, sources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBridgeRequest {\n");
    sb.append("    egressGatewayBridge: ").append(toIndentedString(egressGatewayBridge)).append("\n");
    sb.append("    ingressGatewayBridge: ").append(toIndentedString(ingressGatewayBridge)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    placementArn: ").append(toIndentedString(placementArn)).append("\n");
    sb.append("    sourceFailoverConfig: ").append(toIndentedString(sourceFailoverConfig)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("egressGatewayBridge");
    openapiFields.add("ingressGatewayBridge");
    openapiFields.add("name");
    openapiFields.add("outputs");
    openapiFields.add("placementArn");
    openapiFields.add("sourceFailoverConfig");
    openapiFields.add("sources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("placementArn");
    openapiRequiredFields.add("sources");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBridgeRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBridgeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBridgeRequest is not found in the empty JSON string", CreateBridgeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBridgeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBridgeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateBridgeRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `egressGatewayBridge`
      if (jsonObj.get("egressGatewayBridge") != null && !jsonObj.get("egressGatewayBridge").isJsonNull()) {
        CreateBridgeRequestEgressGatewayBridge.validateJsonElement(jsonObj.get("egressGatewayBridge"));
      }
      // validate the optional field `ingressGatewayBridge`
      if (jsonObj.get("ingressGatewayBridge") != null && !jsonObj.get("ingressGatewayBridge").isJsonNull()) {
        CreateBridgeRequestIngressGatewayBridge.validateJsonElement(jsonObj.get("ingressGatewayBridge"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("outputs") != null && !jsonObj.get("outputs").isJsonNull()) {
        JsonArray jsonArrayoutputs = jsonObj.getAsJsonArray("outputs");
        if (jsonArrayoutputs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputs` to be an array in the JSON string but got `%s`", jsonObj.get("outputs").toString()));
          }

          // validate the optional field `outputs` (array)
          for (int i = 0; i < jsonArrayoutputs.size(); i++) {
            AddBridgeOutputRequest.validateJsonElement(jsonArrayoutputs.get(i));
          };
        }
      }
      if (!jsonObj.get("placementArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placementArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placementArn").toString()));
      }
      // validate the optional field `sourceFailoverConfig`
      if (jsonObj.get("sourceFailoverConfig") != null && !jsonObj.get("sourceFailoverConfig").isJsonNull()) {
        CreateBridgeRequestSourceFailoverConfig.validateJsonElement(jsonObj.get("sourceFailoverConfig"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }

      JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
      // validate the required field `sources` (array)
      for (int i = 0; i < jsonArraysources.size(); i++) {
        AddBridgeSourceRequest.validateJsonElement(jsonArraysources.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBridgeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBridgeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBridgeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBridgeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBridgeRequest>() {
           @Override
           public void write(JsonWriter out, CreateBridgeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBridgeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBridgeRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBridgeRequest
   * @throws IOException if the JSON string is invalid with respect to CreateBridgeRequest
   */
  public static CreateBridgeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBridgeRequest.class);
  }

  /**
   * Convert an instance of CreateBridgeRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

