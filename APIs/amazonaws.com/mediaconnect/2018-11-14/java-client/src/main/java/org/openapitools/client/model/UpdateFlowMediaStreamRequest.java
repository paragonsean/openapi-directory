/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateFlowMediaStreamRequestAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateFlowMediaStreamRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFlowMediaStreamRequest {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private UpdateFlowMediaStreamRequestAttributes attributes;

  public static final String SERIALIZED_NAME_CLOCK_RATE = "clockRate";
  @SerializedName(SERIALIZED_NAME_CLOCK_RATE)
  private Integer clockRate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The type of media stream.
   */
  @JsonAdapter(MediaStreamTypeEnum.Adapter.class)
  public enum MediaStreamTypeEnum {
    VIDEO("video"),
    
    AUDIO("audio"),
    
    ANCILLARY_DATA("ancillary-data");

    private String value;

    MediaStreamTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MediaStreamTypeEnum fromValue(String value) {
      for (MediaStreamTypeEnum b : MediaStreamTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MediaStreamTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MediaStreamTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MediaStreamTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MediaStreamTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MediaStreamTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEDIA_STREAM_TYPE = "mediaStreamType";
  @SerializedName(SERIALIZED_NAME_MEDIA_STREAM_TYPE)
  private MediaStreamTypeEnum mediaStreamType;

  public static final String SERIALIZED_NAME_VIDEO_FORMAT = "videoFormat";
  @SerializedName(SERIALIZED_NAME_VIDEO_FORMAT)
  private String videoFormat;

  public UpdateFlowMediaStreamRequest() {
  }

  public UpdateFlowMediaStreamRequest attributes(UpdateFlowMediaStreamRequestAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public UpdateFlowMediaStreamRequestAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(UpdateFlowMediaStreamRequestAttributes attributes) {
    this.attributes = attributes;
  }


  public UpdateFlowMediaStreamRequest clockRate(Integer clockRate) {
    this.clockRate = clockRate;
    return this;
  }

  /**
   * The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.
   * @return clockRate
   */
  @javax.annotation.Nullable
  public Integer getClockRate() {
    return clockRate;
  }

  public void setClockRate(Integer clockRate) {
    this.clockRate = clockRate;
  }


  public UpdateFlowMediaStreamRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateFlowMediaStreamRequest mediaStreamType(MediaStreamTypeEnum mediaStreamType) {
    this.mediaStreamType = mediaStreamType;
    return this;
  }

  /**
   * The type of media stream.
   * @return mediaStreamType
   */
  @javax.annotation.Nullable
  public MediaStreamTypeEnum getMediaStreamType() {
    return mediaStreamType;
  }

  public void setMediaStreamType(MediaStreamTypeEnum mediaStreamType) {
    this.mediaStreamType = mediaStreamType;
  }


  public UpdateFlowMediaStreamRequest videoFormat(String videoFormat) {
    this.videoFormat = videoFormat;
    return this;
  }

  /**
   * The resolution of the video.
   * @return videoFormat
   */
  @javax.annotation.Nullable
  public String getVideoFormat() {
    return videoFormat;
  }

  public void setVideoFormat(String videoFormat) {
    this.videoFormat = videoFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFlowMediaStreamRequest updateFlowMediaStreamRequest = (UpdateFlowMediaStreamRequest) o;
    return Objects.equals(this.attributes, updateFlowMediaStreamRequest.attributes) &&
        Objects.equals(this.clockRate, updateFlowMediaStreamRequest.clockRate) &&
        Objects.equals(this.description, updateFlowMediaStreamRequest.description) &&
        Objects.equals(this.mediaStreamType, updateFlowMediaStreamRequest.mediaStreamType) &&
        Objects.equals(this.videoFormat, updateFlowMediaStreamRequest.videoFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, clockRate, description, mediaStreamType, videoFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFlowMediaStreamRequest {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    clockRate: ").append(toIndentedString(clockRate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    mediaStreamType: ").append(toIndentedString(mediaStreamType)).append("\n");
    sb.append("    videoFormat: ").append(toIndentedString(videoFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("clockRate");
    openapiFields.add("description");
    openapiFields.add("mediaStreamType");
    openapiFields.add("videoFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFlowMediaStreamRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFlowMediaStreamRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFlowMediaStreamRequest is not found in the empty JSON string", UpdateFlowMediaStreamRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFlowMediaStreamRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFlowMediaStreamRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        UpdateFlowMediaStreamRequestAttributes.validateJsonElement(jsonObj.get("attributes"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("mediaStreamType") != null && !jsonObj.get("mediaStreamType").isJsonNull()) && !jsonObj.get("mediaStreamType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaStreamType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaStreamType").toString()));
      }
      // validate the optional field `mediaStreamType`
      if (jsonObj.get("mediaStreamType") != null && !jsonObj.get("mediaStreamType").isJsonNull()) {
        MediaStreamTypeEnum.validateJsonElement(jsonObj.get("mediaStreamType"));
      }
      if ((jsonObj.get("videoFormat") != null && !jsonObj.get("videoFormat").isJsonNull()) && !jsonObj.get("videoFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoFormat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFlowMediaStreamRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFlowMediaStreamRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFlowMediaStreamRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFlowMediaStreamRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFlowMediaStreamRequest>() {
           @Override
           public void write(JsonWriter out, UpdateFlowMediaStreamRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFlowMediaStreamRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFlowMediaStreamRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFlowMediaStreamRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateFlowMediaStreamRequest
   */
  public static UpdateFlowMediaStreamRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFlowMediaStreamRequest.class);
  }

  /**
   * Convert an instance of UpdateFlowMediaStreamRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

