/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BridgeSourceFailoverConfig;
import org.openapitools.client.model.FlowMaintenance;
import org.openapitools.client.model.FlowSource;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateFlowResponseFlow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateFlowResponseFlow {
  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "AvailabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EGRESS_IP = "EgressIp";
  @SerializedName(SERIALIZED_NAME_EGRESS_IP)
  private String egressIp;

  public static final String SERIALIZED_NAME_ENTITLEMENTS = "Entitlements";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENTS)
  private List entitlements;

  public static final String SERIALIZED_NAME_FLOW_ARN = "FlowArn";
  @SerializedName(SERIALIZED_NAME_FLOW_ARN)
  private String flowArn;

  public static final String SERIALIZED_NAME_MEDIA_STREAMS = "MediaStreams";
  @SerializedName(SERIALIZED_NAME_MEDIA_STREAMS)
  private List mediaStreams;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUTS = "Outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List outputs;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private FlowSource source;

  public static final String SERIALIZED_NAME_SOURCE_FAILOVER_CONFIG = "SourceFailoverConfig";
  @SerializedName(SERIALIZED_NAME_SOURCE_FAILOVER_CONFIG)
  private BridgeSourceFailoverConfig sourceFailoverConfig;

  public static final String SERIALIZED_NAME_SOURCES = "Sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List sources;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_VPC_INTERFACES = "VpcInterfaces";
  @SerializedName(SERIALIZED_NAME_VPC_INTERFACES)
  private List vpcInterfaces;

  public static final String SERIALIZED_NAME_MAINTENANCE = "Maintenance";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE)
  private FlowMaintenance maintenance;

  public CreateFlowResponseFlow() {
  }

  public CreateFlowResponseFlow availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nonnull
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public CreateFlowResponseFlow description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateFlowResponseFlow egressIp(String egressIp) {
    this.egressIp = egressIp;
    return this;
  }

  /**
   * Get egressIp
   * @return egressIp
   */
  @javax.annotation.Nullable
  public String getEgressIp() {
    return egressIp;
  }

  public void setEgressIp(String egressIp) {
    this.egressIp = egressIp;
  }


  public CreateFlowResponseFlow entitlements(List entitlements) {
    this.entitlements = entitlements;
    return this;
  }

  /**
   * Get entitlements
   * @return entitlements
   */
  @javax.annotation.Nonnull
  public List getEntitlements() {
    return entitlements;
  }

  public void setEntitlements(List entitlements) {
    this.entitlements = entitlements;
  }


  public CreateFlowResponseFlow flowArn(String flowArn) {
    this.flowArn = flowArn;
    return this;
  }

  /**
   * Get flowArn
   * @return flowArn
   */
  @javax.annotation.Nonnull
  public String getFlowArn() {
    return flowArn;
  }

  public void setFlowArn(String flowArn) {
    this.flowArn = flowArn;
  }


  public CreateFlowResponseFlow mediaStreams(List mediaStreams) {
    this.mediaStreams = mediaStreams;
    return this;
  }

  /**
   * Get mediaStreams
   * @return mediaStreams
   */
  @javax.annotation.Nullable
  public List getMediaStreams() {
    return mediaStreams;
  }

  public void setMediaStreams(List mediaStreams) {
    this.mediaStreams = mediaStreams;
  }


  public CreateFlowResponseFlow name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateFlowResponseFlow outputs(List outputs) {
    this.outputs = outputs;
    return this;
  }

  /**
   * Get outputs
   * @return outputs
   */
  @javax.annotation.Nonnull
  public List getOutputs() {
    return outputs;
  }

  public void setOutputs(List outputs) {
    this.outputs = outputs;
  }


  public CreateFlowResponseFlow source(FlowSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public FlowSource getSource() {
    return source;
  }

  public void setSource(FlowSource source) {
    this.source = source;
  }


  public CreateFlowResponseFlow sourceFailoverConfig(BridgeSourceFailoverConfig sourceFailoverConfig) {
    this.sourceFailoverConfig = sourceFailoverConfig;
    return this;
  }

  /**
   * Get sourceFailoverConfig
   * @return sourceFailoverConfig
   */
  @javax.annotation.Nullable
  public BridgeSourceFailoverConfig getSourceFailoverConfig() {
    return sourceFailoverConfig;
  }

  public void setSourceFailoverConfig(BridgeSourceFailoverConfig sourceFailoverConfig) {
    this.sourceFailoverConfig = sourceFailoverConfig;
  }


  public CreateFlowResponseFlow sources(List sources) {
    this.sources = sources;
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List getSources() {
    return sources;
  }

  public void setSources(List sources) {
    this.sources = sources;
  }


  public CreateFlowResponseFlow status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public CreateFlowResponseFlow vpcInterfaces(List vpcInterfaces) {
    this.vpcInterfaces = vpcInterfaces;
    return this;
  }

  /**
   * Get vpcInterfaces
   * @return vpcInterfaces
   */
  @javax.annotation.Nullable
  public List getVpcInterfaces() {
    return vpcInterfaces;
  }

  public void setVpcInterfaces(List vpcInterfaces) {
    this.vpcInterfaces = vpcInterfaces;
  }


  public CreateFlowResponseFlow maintenance(FlowMaintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

  /**
   * Get maintenance
   * @return maintenance
   */
  @javax.annotation.Nullable
  public FlowMaintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(FlowMaintenance maintenance) {
    this.maintenance = maintenance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFlowResponseFlow createFlowResponseFlow = (CreateFlowResponseFlow) o;
    return Objects.equals(this.availabilityZone, createFlowResponseFlow.availabilityZone) &&
        Objects.equals(this.description, createFlowResponseFlow.description) &&
        Objects.equals(this.egressIp, createFlowResponseFlow.egressIp) &&
        Objects.equals(this.entitlements, createFlowResponseFlow.entitlements) &&
        Objects.equals(this.flowArn, createFlowResponseFlow.flowArn) &&
        Objects.equals(this.mediaStreams, createFlowResponseFlow.mediaStreams) &&
        Objects.equals(this.name, createFlowResponseFlow.name) &&
        Objects.equals(this.outputs, createFlowResponseFlow.outputs) &&
        Objects.equals(this.source, createFlowResponseFlow.source) &&
        Objects.equals(this.sourceFailoverConfig, createFlowResponseFlow.sourceFailoverConfig) &&
        Objects.equals(this.sources, createFlowResponseFlow.sources) &&
        Objects.equals(this.status, createFlowResponseFlow.status) &&
        Objects.equals(this.vpcInterfaces, createFlowResponseFlow.vpcInterfaces) &&
        Objects.equals(this.maintenance, createFlowResponseFlow.maintenance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityZone, description, egressIp, entitlements, flowArn, mediaStreams, name, outputs, source, sourceFailoverConfig, sources, status, vpcInterfaces, maintenance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFlowResponseFlow {\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    egressIp: ").append(toIndentedString(egressIp)).append("\n");
    sb.append("    entitlements: ").append(toIndentedString(entitlements)).append("\n");
    sb.append("    flowArn: ").append(toIndentedString(flowArn)).append("\n");
    sb.append("    mediaStreams: ").append(toIndentedString(mediaStreams)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceFailoverConfig: ").append(toIndentedString(sourceFailoverConfig)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    vpcInterfaces: ").append(toIndentedString(vpcInterfaces)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailabilityZone");
    openapiFields.add("Description");
    openapiFields.add("EgressIp");
    openapiFields.add("Entitlements");
    openapiFields.add("FlowArn");
    openapiFields.add("MediaStreams");
    openapiFields.add("Name");
    openapiFields.add("Outputs");
    openapiFields.add("Source");
    openapiFields.add("SourceFailoverConfig");
    openapiFields.add("Sources");
    openapiFields.add("Status");
    openapiFields.add("VpcInterfaces");
    openapiFields.add("Maintenance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AvailabilityZone");
    openapiRequiredFields.add("Entitlements");
    openapiRequiredFields.add("FlowArn");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Outputs");
    openapiRequiredFields.add("Source");
    openapiRequiredFields.add("Status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFlowResponseFlow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFlowResponseFlow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFlowResponseFlow is not found in the empty JSON string", CreateFlowResponseFlow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFlowResponseFlow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFlowResponseFlow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateFlowResponseFlow.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AvailabilityZone`
      String.validateJsonElement(jsonObj.get("AvailabilityZone"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `EgressIp`
      if (jsonObj.get("EgressIp") != null && !jsonObj.get("EgressIp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EgressIp"));
      }
      // validate the required field `Entitlements`
      List.validateJsonElement(jsonObj.get("Entitlements"));
      // validate the required field `FlowArn`
      String.validateJsonElement(jsonObj.get("FlowArn"));
      // validate the optional field `MediaStreams`
      if (jsonObj.get("MediaStreams") != null && !jsonObj.get("MediaStreams").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MediaStreams"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `Outputs`
      List.validateJsonElement(jsonObj.get("Outputs"));
      // validate the required field `Source`
      FlowSource.validateJsonElement(jsonObj.get("Source"));
      // validate the optional field `SourceFailoverConfig`
      if (jsonObj.get("SourceFailoverConfig") != null && !jsonObj.get("SourceFailoverConfig").isJsonNull()) {
        BridgeSourceFailoverConfig.validateJsonElement(jsonObj.get("SourceFailoverConfig"));
      }
      // validate the optional field `Sources`
      if (jsonObj.get("Sources") != null && !jsonObj.get("Sources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Sources"));
      }
      // validate the required field `Status`
      Status.validateJsonElement(jsonObj.get("Status"));
      // validate the optional field `VpcInterfaces`
      if (jsonObj.get("VpcInterfaces") != null && !jsonObj.get("VpcInterfaces").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("VpcInterfaces"));
      }
      // validate the optional field `Maintenance`
      if (jsonObj.get("Maintenance") != null && !jsonObj.get("Maintenance").isJsonNull()) {
        FlowMaintenance.validateJsonElement(jsonObj.get("Maintenance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFlowResponseFlow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFlowResponseFlow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFlowResponseFlow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFlowResponseFlow.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFlowResponseFlow>() {
           @Override
           public void write(JsonWriter out, CreateFlowResponseFlow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFlowResponseFlow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFlowResponseFlow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFlowResponseFlow
   * @throws IOException if the JSON string is invalid with respect to CreateFlowResponseFlow
   */
  public static CreateFlowResponseFlow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFlowResponseFlow.class);
  }

  /**
   * Convert an instance of CreateFlowResponseFlow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

