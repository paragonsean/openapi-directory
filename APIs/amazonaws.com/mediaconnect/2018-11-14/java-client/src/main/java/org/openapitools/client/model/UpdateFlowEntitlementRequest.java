/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateFlowOutputRequestEncryption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateFlowEntitlementRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFlowEntitlementRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENCRYPTION = "encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private UpdateFlowOutputRequestEncryption encryption;

  /**
   * An indication of whether you want to enable the entitlement to allow access, or disable it to stop streaming content to the subscriber’s flow temporarily. If you don’t specify the entitlementStatus field in your request, MediaConnect leaves the value unchanged.
   */
  @JsonAdapter(EntitlementStatusEnum.Adapter.class)
  public enum EntitlementStatusEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    EntitlementStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntitlementStatusEnum fromValue(String value) {
      for (EntitlementStatusEnum b : EntitlementStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntitlementStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntitlementStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntitlementStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntitlementStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntitlementStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITLEMENT_STATUS = "entitlementStatus";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_STATUS)
  private EntitlementStatusEnum entitlementStatus;

  public static final String SERIALIZED_NAME_SUBSCRIBERS = "subscribers";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBERS)
  private List<String> subscribers = new ArrayList<>();

  public UpdateFlowEntitlementRequest() {
  }

  public UpdateFlowEntitlementRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateFlowEntitlementRequest encryption(UpdateFlowOutputRequestEncryption encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * Get encryption
   * @return encryption
   */
  @javax.annotation.Nullable
  public UpdateFlowOutputRequestEncryption getEncryption() {
    return encryption;
  }

  public void setEncryption(UpdateFlowOutputRequestEncryption encryption) {
    this.encryption = encryption;
  }


  public UpdateFlowEntitlementRequest entitlementStatus(EntitlementStatusEnum entitlementStatus) {
    this.entitlementStatus = entitlementStatus;
    return this;
  }

  /**
   * An indication of whether you want to enable the entitlement to allow access, or disable it to stop streaming content to the subscriber’s flow temporarily. If you don’t specify the entitlementStatus field in your request, MediaConnect leaves the value unchanged.
   * @return entitlementStatus
   */
  @javax.annotation.Nullable
  public EntitlementStatusEnum getEntitlementStatus() {
    return entitlementStatus;
  }

  public void setEntitlementStatus(EntitlementStatusEnum entitlementStatus) {
    this.entitlementStatus = entitlementStatus;
  }


  public UpdateFlowEntitlementRequest subscribers(List<String> subscribers) {
    this.subscribers = subscribers;
    return this;
  }

  public UpdateFlowEntitlementRequest addSubscribersItem(String subscribersItem) {
    if (this.subscribers == null) {
      this.subscribers = new ArrayList<>();
    }
    this.subscribers.add(subscribersItem);
    return this;
  }

  /**
   * The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
   * @return subscribers
   */
  @javax.annotation.Nullable
  public List<String> getSubscribers() {
    return subscribers;
  }

  public void setSubscribers(List<String> subscribers) {
    this.subscribers = subscribers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFlowEntitlementRequest updateFlowEntitlementRequest = (UpdateFlowEntitlementRequest) o;
    return Objects.equals(this.description, updateFlowEntitlementRequest.description) &&
        Objects.equals(this.encryption, updateFlowEntitlementRequest.encryption) &&
        Objects.equals(this.entitlementStatus, updateFlowEntitlementRequest.entitlementStatus) &&
        Objects.equals(this.subscribers, updateFlowEntitlementRequest.subscribers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, encryption, entitlementStatus, subscribers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFlowEntitlementRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    entitlementStatus: ").append(toIndentedString(entitlementStatus)).append("\n");
    sb.append("    subscribers: ").append(toIndentedString(subscribers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("encryption");
    openapiFields.add("entitlementStatus");
    openapiFields.add("subscribers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFlowEntitlementRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFlowEntitlementRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFlowEntitlementRequest is not found in the empty JSON string", UpdateFlowEntitlementRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFlowEntitlementRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFlowEntitlementRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `encryption`
      if (jsonObj.get("encryption") != null && !jsonObj.get("encryption").isJsonNull()) {
        UpdateFlowOutputRequestEncryption.validateJsonElement(jsonObj.get("encryption"));
      }
      if ((jsonObj.get("entitlementStatus") != null && !jsonObj.get("entitlementStatus").isJsonNull()) && !jsonObj.get("entitlementStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entitlementStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entitlementStatus").toString()));
      }
      // validate the optional field `entitlementStatus`
      if (jsonObj.get("entitlementStatus") != null && !jsonObj.get("entitlementStatus").isJsonNull()) {
        EntitlementStatusEnum.validateJsonElement(jsonObj.get("entitlementStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subscribers") != null && !jsonObj.get("subscribers").isJsonNull() && !jsonObj.get("subscribers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribers` to be an array in the JSON string but got `%s`", jsonObj.get("subscribers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFlowEntitlementRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFlowEntitlementRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFlowEntitlementRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFlowEntitlementRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFlowEntitlementRequest>() {
           @Override
           public void write(JsonWriter out, UpdateFlowEntitlementRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFlowEntitlementRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFlowEntitlementRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFlowEntitlementRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateFlowEntitlementRequest
   */
  public static UpdateFlowEntitlementRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFlowEntitlementRequest.class);
  }

  /**
   * Convert an instance of UpdateFlowEntitlementRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

