/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateFlowRequestSourceDecryption;
import org.openapitools.client.model.CreateFlowRequestSourceGatewayBridgeSource;
import org.openapitools.client.model.Protocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateFlowRequestSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateFlowRequestSource {
  public static final String SERIALIZED_NAME_DECRYPTION = "Decryption";
  @SerializedName(SERIALIZED_NAME_DECRYPTION)
  private CreateFlowRequestSourceDecryption decryption;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENTITLEMENT_ARN = "EntitlementArn";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_ARN)
  private String entitlementArn;

  public static final String SERIALIZED_NAME_INGEST_PORT = "IngestPort";
  @SerializedName(SERIALIZED_NAME_INGEST_PORT)
  private Integer ingestPort;

  public static final String SERIALIZED_NAME_MAX_BITRATE = "MaxBitrate";
  @SerializedName(SERIALIZED_NAME_MAX_BITRATE)
  private Integer maxBitrate;

  public static final String SERIALIZED_NAME_MAX_LATENCY = "MaxLatency";
  @SerializedName(SERIALIZED_NAME_MAX_LATENCY)
  private Integer maxLatency;

  public static final String SERIALIZED_NAME_MAX_SYNC_BUFFER = "MaxSyncBuffer";
  @SerializedName(SERIALIZED_NAME_MAX_SYNC_BUFFER)
  private Integer maxSyncBuffer;

  public static final String SERIALIZED_NAME_MEDIA_STREAM_SOURCE_CONFIGURATIONS = "MediaStreamSourceConfigurations";
  @SerializedName(SERIALIZED_NAME_MEDIA_STREAM_SOURCE_CONFIGURATIONS)
  private List mediaStreamSourceConfigurations;

  public static final String SERIALIZED_NAME_MIN_LATENCY = "MinLatency";
  @SerializedName(SERIALIZED_NAME_MIN_LATENCY)
  private Integer minLatency;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROTOCOL = "Protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private Protocol protocol;

  public static final String SERIALIZED_NAME_SENDER_CONTROL_PORT = "SenderControlPort";
  @SerializedName(SERIALIZED_NAME_SENDER_CONTROL_PORT)
  private Integer senderControlPort;

  public static final String SERIALIZED_NAME_SENDER_IP_ADDRESS = "SenderIpAddress";
  @SerializedName(SERIALIZED_NAME_SENDER_IP_ADDRESS)
  private String senderIpAddress;

  public static final String SERIALIZED_NAME_SOURCE_LISTENER_ADDRESS = "SourceListenerAddress";
  @SerializedName(SERIALIZED_NAME_SOURCE_LISTENER_ADDRESS)
  private String sourceListenerAddress;

  public static final String SERIALIZED_NAME_SOURCE_LISTENER_PORT = "SourceListenerPort";
  @SerializedName(SERIALIZED_NAME_SOURCE_LISTENER_PORT)
  private Integer sourceListenerPort;

  public static final String SERIALIZED_NAME_STREAM_ID = "StreamId";
  @SerializedName(SERIALIZED_NAME_STREAM_ID)
  private String streamId;

  public static final String SERIALIZED_NAME_VPC_INTERFACE_NAME = "VpcInterfaceName";
  @SerializedName(SERIALIZED_NAME_VPC_INTERFACE_NAME)
  private String vpcInterfaceName;

  public static final String SERIALIZED_NAME_WHITELIST_CIDR = "WhitelistCidr";
  @SerializedName(SERIALIZED_NAME_WHITELIST_CIDR)
  private String whitelistCidr;

  public static final String SERIALIZED_NAME_GATEWAY_BRIDGE_SOURCE = "GatewayBridgeSource";
  @SerializedName(SERIALIZED_NAME_GATEWAY_BRIDGE_SOURCE)
  private CreateFlowRequestSourceGatewayBridgeSource gatewayBridgeSource;

  public CreateFlowRequestSource() {
  }

  public CreateFlowRequestSource decryption(CreateFlowRequestSourceDecryption decryption) {
    this.decryption = decryption;
    return this;
  }

  /**
   * Get decryption
   * @return decryption
   */
  @javax.annotation.Nullable
  public CreateFlowRequestSourceDecryption getDecryption() {
    return decryption;
  }

  public void setDecryption(CreateFlowRequestSourceDecryption decryption) {
    this.decryption = decryption;
  }


  public CreateFlowRequestSource description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateFlowRequestSource entitlementArn(String entitlementArn) {
    this.entitlementArn = entitlementArn;
    return this;
  }

  /**
   * Get entitlementArn
   * @return entitlementArn
   */
  @javax.annotation.Nullable
  public String getEntitlementArn() {
    return entitlementArn;
  }

  public void setEntitlementArn(String entitlementArn) {
    this.entitlementArn = entitlementArn;
  }


  public CreateFlowRequestSource ingestPort(Integer ingestPort) {
    this.ingestPort = ingestPort;
    return this;
  }

  /**
   * Get ingestPort
   * @return ingestPort
   */
  @javax.annotation.Nullable
  public Integer getIngestPort() {
    return ingestPort;
  }

  public void setIngestPort(Integer ingestPort) {
    this.ingestPort = ingestPort;
  }


  public CreateFlowRequestSource maxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
    return this;
  }

  /**
   * Get maxBitrate
   * @return maxBitrate
   */
  @javax.annotation.Nullable
  public Integer getMaxBitrate() {
    return maxBitrate;
  }

  public void setMaxBitrate(Integer maxBitrate) {
    this.maxBitrate = maxBitrate;
  }


  public CreateFlowRequestSource maxLatency(Integer maxLatency) {
    this.maxLatency = maxLatency;
    return this;
  }

  /**
   * Get maxLatency
   * @return maxLatency
   */
  @javax.annotation.Nullable
  public Integer getMaxLatency() {
    return maxLatency;
  }

  public void setMaxLatency(Integer maxLatency) {
    this.maxLatency = maxLatency;
  }


  public CreateFlowRequestSource maxSyncBuffer(Integer maxSyncBuffer) {
    this.maxSyncBuffer = maxSyncBuffer;
    return this;
  }

  /**
   * Get maxSyncBuffer
   * @return maxSyncBuffer
   */
  @javax.annotation.Nullable
  public Integer getMaxSyncBuffer() {
    return maxSyncBuffer;
  }

  public void setMaxSyncBuffer(Integer maxSyncBuffer) {
    this.maxSyncBuffer = maxSyncBuffer;
  }


  public CreateFlowRequestSource mediaStreamSourceConfigurations(List mediaStreamSourceConfigurations) {
    this.mediaStreamSourceConfigurations = mediaStreamSourceConfigurations;
    return this;
  }

  /**
   * Get mediaStreamSourceConfigurations
   * @return mediaStreamSourceConfigurations
   */
  @javax.annotation.Nullable
  public List getMediaStreamSourceConfigurations() {
    return mediaStreamSourceConfigurations;
  }

  public void setMediaStreamSourceConfigurations(List mediaStreamSourceConfigurations) {
    this.mediaStreamSourceConfigurations = mediaStreamSourceConfigurations;
  }


  public CreateFlowRequestSource minLatency(Integer minLatency) {
    this.minLatency = minLatency;
    return this;
  }

  /**
   * Get minLatency
   * @return minLatency
   */
  @javax.annotation.Nullable
  public Integer getMinLatency() {
    return minLatency;
  }

  public void setMinLatency(Integer minLatency) {
    this.minLatency = minLatency;
  }


  public CreateFlowRequestSource name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateFlowRequestSource protocol(Protocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public Protocol getProtocol() {
    return protocol;
  }

  public void setProtocol(Protocol protocol) {
    this.protocol = protocol;
  }


  public CreateFlowRequestSource senderControlPort(Integer senderControlPort) {
    this.senderControlPort = senderControlPort;
    return this;
  }

  /**
   * Get senderControlPort
   * @return senderControlPort
   */
  @javax.annotation.Nullable
  public Integer getSenderControlPort() {
    return senderControlPort;
  }

  public void setSenderControlPort(Integer senderControlPort) {
    this.senderControlPort = senderControlPort;
  }


  public CreateFlowRequestSource senderIpAddress(String senderIpAddress) {
    this.senderIpAddress = senderIpAddress;
    return this;
  }

  /**
   * Get senderIpAddress
   * @return senderIpAddress
   */
  @javax.annotation.Nullable
  public String getSenderIpAddress() {
    return senderIpAddress;
  }

  public void setSenderIpAddress(String senderIpAddress) {
    this.senderIpAddress = senderIpAddress;
  }


  public CreateFlowRequestSource sourceListenerAddress(String sourceListenerAddress) {
    this.sourceListenerAddress = sourceListenerAddress;
    return this;
  }

  /**
   * Get sourceListenerAddress
   * @return sourceListenerAddress
   */
  @javax.annotation.Nullable
  public String getSourceListenerAddress() {
    return sourceListenerAddress;
  }

  public void setSourceListenerAddress(String sourceListenerAddress) {
    this.sourceListenerAddress = sourceListenerAddress;
  }


  public CreateFlowRequestSource sourceListenerPort(Integer sourceListenerPort) {
    this.sourceListenerPort = sourceListenerPort;
    return this;
  }

  /**
   * Get sourceListenerPort
   * @return sourceListenerPort
   */
  @javax.annotation.Nullable
  public Integer getSourceListenerPort() {
    return sourceListenerPort;
  }

  public void setSourceListenerPort(Integer sourceListenerPort) {
    this.sourceListenerPort = sourceListenerPort;
  }


  public CreateFlowRequestSource streamId(String streamId) {
    this.streamId = streamId;
    return this;
  }

  /**
   * Get streamId
   * @return streamId
   */
  @javax.annotation.Nullable
  public String getStreamId() {
    return streamId;
  }

  public void setStreamId(String streamId) {
    this.streamId = streamId;
  }


  public CreateFlowRequestSource vpcInterfaceName(String vpcInterfaceName) {
    this.vpcInterfaceName = vpcInterfaceName;
    return this;
  }

  /**
   * Get vpcInterfaceName
   * @return vpcInterfaceName
   */
  @javax.annotation.Nullable
  public String getVpcInterfaceName() {
    return vpcInterfaceName;
  }

  public void setVpcInterfaceName(String vpcInterfaceName) {
    this.vpcInterfaceName = vpcInterfaceName;
  }


  public CreateFlowRequestSource whitelistCidr(String whitelistCidr) {
    this.whitelistCidr = whitelistCidr;
    return this;
  }

  /**
   * Get whitelistCidr
   * @return whitelistCidr
   */
  @javax.annotation.Nullable
  public String getWhitelistCidr() {
    return whitelistCidr;
  }

  public void setWhitelistCidr(String whitelistCidr) {
    this.whitelistCidr = whitelistCidr;
  }


  public CreateFlowRequestSource gatewayBridgeSource(CreateFlowRequestSourceGatewayBridgeSource gatewayBridgeSource) {
    this.gatewayBridgeSource = gatewayBridgeSource;
    return this;
  }

  /**
   * Get gatewayBridgeSource
   * @return gatewayBridgeSource
   */
  @javax.annotation.Nullable
  public CreateFlowRequestSourceGatewayBridgeSource getGatewayBridgeSource() {
    return gatewayBridgeSource;
  }

  public void setGatewayBridgeSource(CreateFlowRequestSourceGatewayBridgeSource gatewayBridgeSource) {
    this.gatewayBridgeSource = gatewayBridgeSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFlowRequestSource createFlowRequestSource = (CreateFlowRequestSource) o;
    return Objects.equals(this.decryption, createFlowRequestSource.decryption) &&
        Objects.equals(this.description, createFlowRequestSource.description) &&
        Objects.equals(this.entitlementArn, createFlowRequestSource.entitlementArn) &&
        Objects.equals(this.ingestPort, createFlowRequestSource.ingestPort) &&
        Objects.equals(this.maxBitrate, createFlowRequestSource.maxBitrate) &&
        Objects.equals(this.maxLatency, createFlowRequestSource.maxLatency) &&
        Objects.equals(this.maxSyncBuffer, createFlowRequestSource.maxSyncBuffer) &&
        Objects.equals(this.mediaStreamSourceConfigurations, createFlowRequestSource.mediaStreamSourceConfigurations) &&
        Objects.equals(this.minLatency, createFlowRequestSource.minLatency) &&
        Objects.equals(this.name, createFlowRequestSource.name) &&
        Objects.equals(this.protocol, createFlowRequestSource.protocol) &&
        Objects.equals(this.senderControlPort, createFlowRequestSource.senderControlPort) &&
        Objects.equals(this.senderIpAddress, createFlowRequestSource.senderIpAddress) &&
        Objects.equals(this.sourceListenerAddress, createFlowRequestSource.sourceListenerAddress) &&
        Objects.equals(this.sourceListenerPort, createFlowRequestSource.sourceListenerPort) &&
        Objects.equals(this.streamId, createFlowRequestSource.streamId) &&
        Objects.equals(this.vpcInterfaceName, createFlowRequestSource.vpcInterfaceName) &&
        Objects.equals(this.whitelistCidr, createFlowRequestSource.whitelistCidr) &&
        Objects.equals(this.gatewayBridgeSource, createFlowRequestSource.gatewayBridgeSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decryption, description, entitlementArn, ingestPort, maxBitrate, maxLatency, maxSyncBuffer, mediaStreamSourceConfigurations, minLatency, name, protocol, senderControlPort, senderIpAddress, sourceListenerAddress, sourceListenerPort, streamId, vpcInterfaceName, whitelistCidr, gatewayBridgeSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFlowRequestSource {\n");
    sb.append("    decryption: ").append(toIndentedString(decryption)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entitlementArn: ").append(toIndentedString(entitlementArn)).append("\n");
    sb.append("    ingestPort: ").append(toIndentedString(ingestPort)).append("\n");
    sb.append("    maxBitrate: ").append(toIndentedString(maxBitrate)).append("\n");
    sb.append("    maxLatency: ").append(toIndentedString(maxLatency)).append("\n");
    sb.append("    maxSyncBuffer: ").append(toIndentedString(maxSyncBuffer)).append("\n");
    sb.append("    mediaStreamSourceConfigurations: ").append(toIndentedString(mediaStreamSourceConfigurations)).append("\n");
    sb.append("    minLatency: ").append(toIndentedString(minLatency)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    senderControlPort: ").append(toIndentedString(senderControlPort)).append("\n");
    sb.append("    senderIpAddress: ").append(toIndentedString(senderIpAddress)).append("\n");
    sb.append("    sourceListenerAddress: ").append(toIndentedString(sourceListenerAddress)).append("\n");
    sb.append("    sourceListenerPort: ").append(toIndentedString(sourceListenerPort)).append("\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("    vpcInterfaceName: ").append(toIndentedString(vpcInterfaceName)).append("\n");
    sb.append("    whitelistCidr: ").append(toIndentedString(whitelistCidr)).append("\n");
    sb.append("    gatewayBridgeSource: ").append(toIndentedString(gatewayBridgeSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Decryption");
    openapiFields.add("Description");
    openapiFields.add("EntitlementArn");
    openapiFields.add("IngestPort");
    openapiFields.add("MaxBitrate");
    openapiFields.add("MaxLatency");
    openapiFields.add("MaxSyncBuffer");
    openapiFields.add("MediaStreamSourceConfigurations");
    openapiFields.add("MinLatency");
    openapiFields.add("Name");
    openapiFields.add("Protocol");
    openapiFields.add("SenderControlPort");
    openapiFields.add("SenderIpAddress");
    openapiFields.add("SourceListenerAddress");
    openapiFields.add("SourceListenerPort");
    openapiFields.add("StreamId");
    openapiFields.add("VpcInterfaceName");
    openapiFields.add("WhitelistCidr");
    openapiFields.add("GatewayBridgeSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFlowRequestSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFlowRequestSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFlowRequestSource is not found in the empty JSON string", CreateFlowRequestSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFlowRequestSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFlowRequestSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Decryption`
      if (jsonObj.get("Decryption") != null && !jsonObj.get("Decryption").isJsonNull()) {
        CreateFlowRequestSourceDecryption.validateJsonElement(jsonObj.get("Decryption"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `EntitlementArn`
      if (jsonObj.get("EntitlementArn") != null && !jsonObj.get("EntitlementArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EntitlementArn"));
      }
      // validate the optional field `IngestPort`
      if (jsonObj.get("IngestPort") != null && !jsonObj.get("IngestPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("IngestPort"));
      }
      // validate the optional field `MaxBitrate`
      if (jsonObj.get("MaxBitrate") != null && !jsonObj.get("MaxBitrate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxBitrate"));
      }
      // validate the optional field `MaxLatency`
      if (jsonObj.get("MaxLatency") != null && !jsonObj.get("MaxLatency").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxLatency"));
      }
      // validate the optional field `MaxSyncBuffer`
      if (jsonObj.get("MaxSyncBuffer") != null && !jsonObj.get("MaxSyncBuffer").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxSyncBuffer"));
      }
      // validate the optional field `MediaStreamSourceConfigurations`
      if (jsonObj.get("MediaStreamSourceConfigurations") != null && !jsonObj.get("MediaStreamSourceConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MediaStreamSourceConfigurations"));
      }
      // validate the optional field `MinLatency`
      if (jsonObj.get("MinLatency") != null && !jsonObj.get("MinLatency").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinLatency"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Protocol`
      if (jsonObj.get("Protocol") != null && !jsonObj.get("Protocol").isJsonNull()) {
        Protocol.validateJsonElement(jsonObj.get("Protocol"));
      }
      // validate the optional field `SenderControlPort`
      if (jsonObj.get("SenderControlPort") != null && !jsonObj.get("SenderControlPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SenderControlPort"));
      }
      // validate the optional field `SenderIpAddress`
      if (jsonObj.get("SenderIpAddress") != null && !jsonObj.get("SenderIpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SenderIpAddress"));
      }
      // validate the optional field `SourceListenerAddress`
      if (jsonObj.get("SourceListenerAddress") != null && !jsonObj.get("SourceListenerAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceListenerAddress"));
      }
      // validate the optional field `SourceListenerPort`
      if (jsonObj.get("SourceListenerPort") != null && !jsonObj.get("SourceListenerPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SourceListenerPort"));
      }
      // validate the optional field `StreamId`
      if (jsonObj.get("StreamId") != null && !jsonObj.get("StreamId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StreamId"));
      }
      // validate the optional field `VpcInterfaceName`
      if (jsonObj.get("VpcInterfaceName") != null && !jsonObj.get("VpcInterfaceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcInterfaceName"));
      }
      // validate the optional field `WhitelistCidr`
      if (jsonObj.get("WhitelistCidr") != null && !jsonObj.get("WhitelistCidr").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WhitelistCidr"));
      }
      // validate the optional field `GatewayBridgeSource`
      if (jsonObj.get("GatewayBridgeSource") != null && !jsonObj.get("GatewayBridgeSource").isJsonNull()) {
        CreateFlowRequestSourceGatewayBridgeSource.validateJsonElement(jsonObj.get("GatewayBridgeSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFlowRequestSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFlowRequestSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFlowRequestSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFlowRequestSource.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFlowRequestSource>() {
           @Override
           public void write(JsonWriter out, CreateFlowRequestSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFlowRequestSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFlowRequestSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFlowRequestSource
   * @throws IOException if the JSON string is invalid with respect to CreateFlowRequestSource
   */
  public static CreateFlowRequestSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFlowRequestSource.class);
  }

  /**
   * Convert an instance of CreateFlowRequestSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

