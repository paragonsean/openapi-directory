/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateGatewayInstanceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateGatewayInstanceRequest {
  /**
   * The availability of the instance to host new bridges. The bridgePlacement property can be LOCKED or AVAILABLE. If it is LOCKED, no new bridges can be deployed to this instance. If it is AVAILABLE, new bridges can be added to this instance.
   */
  @JsonAdapter(BridgePlacementEnum.Adapter.class)
  public enum BridgePlacementEnum {
    AVAILABLE("AVAILABLE"),
    
    LOCKED("LOCKED");

    private String value;

    BridgePlacementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BridgePlacementEnum fromValue(String value) {
      for (BridgePlacementEnum b : BridgePlacementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BridgePlacementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BridgePlacementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BridgePlacementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BridgePlacementEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BridgePlacementEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BRIDGE_PLACEMENT = "bridgePlacement";
  @SerializedName(SERIALIZED_NAME_BRIDGE_PLACEMENT)
  private BridgePlacementEnum bridgePlacement;

  public UpdateGatewayInstanceRequest() {
  }

  public UpdateGatewayInstanceRequest bridgePlacement(BridgePlacementEnum bridgePlacement) {
    this.bridgePlacement = bridgePlacement;
    return this;
  }

  /**
   * The availability of the instance to host new bridges. The bridgePlacement property can be LOCKED or AVAILABLE. If it is LOCKED, no new bridges can be deployed to this instance. If it is AVAILABLE, new bridges can be added to this instance.
   * @return bridgePlacement
   */
  @javax.annotation.Nullable
  public BridgePlacementEnum getBridgePlacement() {
    return bridgePlacement;
  }

  public void setBridgePlacement(BridgePlacementEnum bridgePlacement) {
    this.bridgePlacement = bridgePlacement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateGatewayInstanceRequest updateGatewayInstanceRequest = (UpdateGatewayInstanceRequest) o;
    return Objects.equals(this.bridgePlacement, updateGatewayInstanceRequest.bridgePlacement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bridgePlacement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateGatewayInstanceRequest {\n");
    sb.append("    bridgePlacement: ").append(toIndentedString(bridgePlacement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bridgePlacement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateGatewayInstanceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateGatewayInstanceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateGatewayInstanceRequest is not found in the empty JSON string", UpdateGatewayInstanceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateGatewayInstanceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateGatewayInstanceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bridgePlacement") != null && !jsonObj.get("bridgePlacement").isJsonNull()) && !jsonObj.get("bridgePlacement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bridgePlacement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bridgePlacement").toString()));
      }
      // validate the optional field `bridgePlacement`
      if (jsonObj.get("bridgePlacement") != null && !jsonObj.get("bridgePlacement").isJsonNull()) {
        BridgePlacementEnum.validateJsonElement(jsonObj.get("bridgePlacement"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateGatewayInstanceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateGatewayInstanceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateGatewayInstanceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateGatewayInstanceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateGatewayInstanceRequest>() {
           @Override
           public void write(JsonWriter out, UpdateGatewayInstanceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateGatewayInstanceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateGatewayInstanceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateGatewayInstanceRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateGatewayInstanceRequest
   */
  public static UpdateGatewayInstanceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateGatewayInstanceRequest.class);
  }

  /**
   * Convert an instance of UpdateGatewayInstanceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

