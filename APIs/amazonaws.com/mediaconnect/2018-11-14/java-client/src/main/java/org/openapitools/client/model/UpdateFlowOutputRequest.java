/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MediaStreamOutputConfigurationRequest;
import org.openapitools.client.model.UpdateFlowOutputRequestEncryption;
import org.openapitools.client.model.UpdateFlowOutputRequestVpcInterfaceAttachment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateFlowOutputRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFlowOutputRequest {
  public static final String SERIALIZED_NAME_CIDR_ALLOW_LIST = "cidrAllowList";
  @SerializedName(SERIALIZED_NAME_CIDR_ALLOW_LIST)
  private List<String> cidrAllowList = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_ENCRYPTION = "encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private UpdateFlowOutputRequestEncryption encryption;

  public static final String SERIALIZED_NAME_MAX_LATENCY = "maxLatency";
  @SerializedName(SERIALIZED_NAME_MAX_LATENCY)
  private Integer maxLatency;

  public static final String SERIALIZED_NAME_MEDIA_STREAM_OUTPUT_CONFIGURATIONS = "mediaStreamOutputConfigurations";
  @SerializedName(SERIALIZED_NAME_MEDIA_STREAM_OUTPUT_CONFIGURATIONS)
  private List<MediaStreamOutputConfigurationRequest> mediaStreamOutputConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIN_LATENCY = "minLatency";
  @SerializedName(SERIALIZED_NAME_MIN_LATENCY)
  private Integer minLatency;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  /**
   * The protocol to use for the output.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    ZIXI_PUSH("zixi-push"),
    
    RTP_FEC("rtp-fec"),
    
    RTP("rtp"),
    
    ZIXI_PULL("zixi-pull"),
    
    RIST("rist"),
    
    ST2110_JPEGXS("st2110-jpegxs"),
    
    CDI("cdi"),
    
    SRT_LISTENER("srt-listener"),
    
    SRT_CALLER("srt-caller"),
    
    FUJITSU_QOS("fujitsu-qos"),
    
    UDP("udp");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_REMOTE_ID = "remoteId";
  @SerializedName(SERIALIZED_NAME_REMOTE_ID)
  private String remoteId;

  public static final String SERIALIZED_NAME_SENDER_CONTROL_PORT = "senderControlPort";
  @SerializedName(SERIALIZED_NAME_SENDER_CONTROL_PORT)
  private Integer senderControlPort;

  public static final String SERIALIZED_NAME_SENDER_IP_ADDRESS = "senderIpAddress";
  @SerializedName(SERIALIZED_NAME_SENDER_IP_ADDRESS)
  private String senderIpAddress;

  public static final String SERIALIZED_NAME_SMOOTHING_LATENCY = "smoothingLatency";
  @SerializedName(SERIALIZED_NAME_SMOOTHING_LATENCY)
  private Integer smoothingLatency;

  public static final String SERIALIZED_NAME_STREAM_ID = "streamId";
  @SerializedName(SERIALIZED_NAME_STREAM_ID)
  private String streamId;

  public static final String SERIALIZED_NAME_VPC_INTERFACE_ATTACHMENT = "vpcInterfaceAttachment";
  @SerializedName(SERIALIZED_NAME_VPC_INTERFACE_ATTACHMENT)
  private UpdateFlowOutputRequestVpcInterfaceAttachment vpcInterfaceAttachment;

  public UpdateFlowOutputRequest() {
  }

  public UpdateFlowOutputRequest cidrAllowList(List<String> cidrAllowList) {
    this.cidrAllowList = cidrAllowList;
    return this;
  }

  public UpdateFlowOutputRequest addCidrAllowListItem(String cidrAllowListItem) {
    if (this.cidrAllowList == null) {
      this.cidrAllowList = new ArrayList<>();
    }
    this.cidrAllowList.add(cidrAllowListItem);
    return this;
  }

  /**
   * The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
   * @return cidrAllowList
   */
  @javax.annotation.Nullable
  public List<String> getCidrAllowList() {
    return cidrAllowList;
  }

  public void setCidrAllowList(List<String> cidrAllowList) {
    this.cidrAllowList = cidrAllowList;
  }


  public UpdateFlowOutputRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateFlowOutputRequest destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * The IP address where you want to send the output.
   * @return destination
   */
  @javax.annotation.Nullable
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }


  public UpdateFlowOutputRequest encryption(UpdateFlowOutputRequestEncryption encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * Get encryption
   * @return encryption
   */
  @javax.annotation.Nullable
  public UpdateFlowOutputRequestEncryption getEncryption() {
    return encryption;
  }

  public void setEncryption(UpdateFlowOutputRequestEncryption encryption) {
    this.encryption = encryption;
  }


  public UpdateFlowOutputRequest maxLatency(Integer maxLatency) {
    this.maxLatency = maxLatency;
    return this;
  }

  /**
   * The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
   * @return maxLatency
   */
  @javax.annotation.Nullable
  public Integer getMaxLatency() {
    return maxLatency;
  }

  public void setMaxLatency(Integer maxLatency) {
    this.maxLatency = maxLatency;
  }


  public UpdateFlowOutputRequest mediaStreamOutputConfigurations(List<MediaStreamOutputConfigurationRequest> mediaStreamOutputConfigurations) {
    this.mediaStreamOutputConfigurations = mediaStreamOutputConfigurations;
    return this;
  }

  public UpdateFlowOutputRequest addMediaStreamOutputConfigurationsItem(MediaStreamOutputConfigurationRequest mediaStreamOutputConfigurationsItem) {
    if (this.mediaStreamOutputConfigurations == null) {
      this.mediaStreamOutputConfigurations = new ArrayList<>();
    }
    this.mediaStreamOutputConfigurations.add(mediaStreamOutputConfigurationsItem);
    return this;
  }

  /**
   * The media streams that are associated with the output, and the parameters for those associations.
   * @return mediaStreamOutputConfigurations
   */
  @javax.annotation.Nullable
  public List<MediaStreamOutputConfigurationRequest> getMediaStreamOutputConfigurations() {
    return mediaStreamOutputConfigurations;
  }

  public void setMediaStreamOutputConfigurations(List<MediaStreamOutputConfigurationRequest> mediaStreamOutputConfigurations) {
    this.mediaStreamOutputConfigurations = mediaStreamOutputConfigurations;
  }


  public UpdateFlowOutputRequest minLatency(Integer minLatency) {
    this.minLatency = minLatency;
    return this;
  }

  /**
   * The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
   * @return minLatency
   */
  @javax.annotation.Nullable
  public Integer getMinLatency() {
    return minLatency;
  }

  public void setMinLatency(Integer minLatency) {
    this.minLatency = minLatency;
  }


  public UpdateFlowOutputRequest port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * The port to use when content is distributed to this output.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public UpdateFlowOutputRequest protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * The protocol to use for the output.
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public UpdateFlowOutputRequest remoteId(String remoteId) {
    this.remoteId = remoteId;
    return this;
  }

  /**
   * The remote ID for the Zixi-pull stream.
   * @return remoteId
   */
  @javax.annotation.Nullable
  public String getRemoteId() {
    return remoteId;
  }

  public void setRemoteId(String remoteId) {
    this.remoteId = remoteId;
  }


  public UpdateFlowOutputRequest senderControlPort(Integer senderControlPort) {
    this.senderControlPort = senderControlPort;
    return this;
  }

  /**
   * The port that the flow uses to send outbound requests to initiate connection with the sender.
   * @return senderControlPort
   */
  @javax.annotation.Nullable
  public Integer getSenderControlPort() {
    return senderControlPort;
  }

  public void setSenderControlPort(Integer senderControlPort) {
    this.senderControlPort = senderControlPort;
  }


  public UpdateFlowOutputRequest senderIpAddress(String senderIpAddress) {
    this.senderIpAddress = senderIpAddress;
    return this;
  }

  /**
   * The IP address that the flow communicates with to initiate connection with the sender.
   * @return senderIpAddress
   */
  @javax.annotation.Nullable
  public String getSenderIpAddress() {
    return senderIpAddress;
  }

  public void setSenderIpAddress(String senderIpAddress) {
    this.senderIpAddress = senderIpAddress;
  }


  public UpdateFlowOutputRequest smoothingLatency(Integer smoothingLatency) {
    this.smoothingLatency = smoothingLatency;
    return this;
  }

  /**
   * The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
   * @return smoothingLatency
   */
  @javax.annotation.Nullable
  public Integer getSmoothingLatency() {
    return smoothingLatency;
  }

  public void setSmoothingLatency(Integer smoothingLatency) {
    this.smoothingLatency = smoothingLatency;
  }


  public UpdateFlowOutputRequest streamId(String streamId) {
    this.streamId = streamId;
    return this;
  }

  /**
   * The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.
   * @return streamId
   */
  @javax.annotation.Nullable
  public String getStreamId() {
    return streamId;
  }

  public void setStreamId(String streamId) {
    this.streamId = streamId;
  }


  public UpdateFlowOutputRequest vpcInterfaceAttachment(UpdateFlowOutputRequestVpcInterfaceAttachment vpcInterfaceAttachment) {
    this.vpcInterfaceAttachment = vpcInterfaceAttachment;
    return this;
  }

  /**
   * Get vpcInterfaceAttachment
   * @return vpcInterfaceAttachment
   */
  @javax.annotation.Nullable
  public UpdateFlowOutputRequestVpcInterfaceAttachment getVpcInterfaceAttachment() {
    return vpcInterfaceAttachment;
  }

  public void setVpcInterfaceAttachment(UpdateFlowOutputRequestVpcInterfaceAttachment vpcInterfaceAttachment) {
    this.vpcInterfaceAttachment = vpcInterfaceAttachment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFlowOutputRequest updateFlowOutputRequest = (UpdateFlowOutputRequest) o;
    return Objects.equals(this.cidrAllowList, updateFlowOutputRequest.cidrAllowList) &&
        Objects.equals(this.description, updateFlowOutputRequest.description) &&
        Objects.equals(this.destination, updateFlowOutputRequest.destination) &&
        Objects.equals(this.encryption, updateFlowOutputRequest.encryption) &&
        Objects.equals(this.maxLatency, updateFlowOutputRequest.maxLatency) &&
        Objects.equals(this.mediaStreamOutputConfigurations, updateFlowOutputRequest.mediaStreamOutputConfigurations) &&
        Objects.equals(this.minLatency, updateFlowOutputRequest.minLatency) &&
        Objects.equals(this.port, updateFlowOutputRequest.port) &&
        Objects.equals(this.protocol, updateFlowOutputRequest.protocol) &&
        Objects.equals(this.remoteId, updateFlowOutputRequest.remoteId) &&
        Objects.equals(this.senderControlPort, updateFlowOutputRequest.senderControlPort) &&
        Objects.equals(this.senderIpAddress, updateFlowOutputRequest.senderIpAddress) &&
        Objects.equals(this.smoothingLatency, updateFlowOutputRequest.smoothingLatency) &&
        Objects.equals(this.streamId, updateFlowOutputRequest.streamId) &&
        Objects.equals(this.vpcInterfaceAttachment, updateFlowOutputRequest.vpcInterfaceAttachment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cidrAllowList, description, destination, encryption, maxLatency, mediaStreamOutputConfigurations, minLatency, port, protocol, remoteId, senderControlPort, senderIpAddress, smoothingLatency, streamId, vpcInterfaceAttachment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFlowOutputRequest {\n");
    sb.append("    cidrAllowList: ").append(toIndentedString(cidrAllowList)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    maxLatency: ").append(toIndentedString(maxLatency)).append("\n");
    sb.append("    mediaStreamOutputConfigurations: ").append(toIndentedString(mediaStreamOutputConfigurations)).append("\n");
    sb.append("    minLatency: ").append(toIndentedString(minLatency)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    remoteId: ").append(toIndentedString(remoteId)).append("\n");
    sb.append("    senderControlPort: ").append(toIndentedString(senderControlPort)).append("\n");
    sb.append("    senderIpAddress: ").append(toIndentedString(senderIpAddress)).append("\n");
    sb.append("    smoothingLatency: ").append(toIndentedString(smoothingLatency)).append("\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("    vpcInterfaceAttachment: ").append(toIndentedString(vpcInterfaceAttachment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cidrAllowList");
    openapiFields.add("description");
    openapiFields.add("destination");
    openapiFields.add("encryption");
    openapiFields.add("maxLatency");
    openapiFields.add("mediaStreamOutputConfigurations");
    openapiFields.add("minLatency");
    openapiFields.add("port");
    openapiFields.add("protocol");
    openapiFields.add("remoteId");
    openapiFields.add("senderControlPort");
    openapiFields.add("senderIpAddress");
    openapiFields.add("smoothingLatency");
    openapiFields.add("streamId");
    openapiFields.add("vpcInterfaceAttachment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFlowOutputRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFlowOutputRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFlowOutputRequest is not found in the empty JSON string", UpdateFlowOutputRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFlowOutputRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFlowOutputRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("cidrAllowList") != null && !jsonObj.get("cidrAllowList").isJsonNull() && !jsonObj.get("cidrAllowList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cidrAllowList` to be an array in the JSON string but got `%s`", jsonObj.get("cidrAllowList").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) && !jsonObj.get("destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination").toString()));
      }
      // validate the optional field `encryption`
      if (jsonObj.get("encryption") != null && !jsonObj.get("encryption").isJsonNull()) {
        UpdateFlowOutputRequestEncryption.validateJsonElement(jsonObj.get("encryption"));
      }
      if (jsonObj.get("mediaStreamOutputConfigurations") != null && !jsonObj.get("mediaStreamOutputConfigurations").isJsonNull()) {
        JsonArray jsonArraymediaStreamOutputConfigurations = jsonObj.getAsJsonArray("mediaStreamOutputConfigurations");
        if (jsonArraymediaStreamOutputConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mediaStreamOutputConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mediaStreamOutputConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("mediaStreamOutputConfigurations").toString()));
          }

          // validate the optional field `mediaStreamOutputConfigurations` (array)
          for (int i = 0; i < jsonArraymediaStreamOutputConfigurations.size(); i++) {
            MediaStreamOutputConfigurationRequest.validateJsonElement(jsonArraymediaStreamOutputConfigurations.get(i));
          };
        }
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("remoteId") != null && !jsonObj.get("remoteId").isJsonNull()) && !jsonObj.get("remoteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteId").toString()));
      }
      if ((jsonObj.get("senderIpAddress") != null && !jsonObj.get("senderIpAddress").isJsonNull()) && !jsonObj.get("senderIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderIpAddress").toString()));
      }
      if ((jsonObj.get("streamId") != null && !jsonObj.get("streamId").isJsonNull()) && !jsonObj.get("streamId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamId").toString()));
      }
      // validate the optional field `vpcInterfaceAttachment`
      if (jsonObj.get("vpcInterfaceAttachment") != null && !jsonObj.get("vpcInterfaceAttachment").isJsonNull()) {
        UpdateFlowOutputRequestVpcInterfaceAttachment.validateJsonElement(jsonObj.get("vpcInterfaceAttachment"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFlowOutputRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFlowOutputRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFlowOutputRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFlowOutputRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFlowOutputRequest>() {
           @Override
           public void write(JsonWriter out, UpdateFlowOutputRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFlowOutputRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFlowOutputRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFlowOutputRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateFlowOutputRequest
   */
  public static UpdateFlowOutputRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFlowOutputRequest.class);
  }

  /**
   * Convert an instance of UpdateFlowOutputRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

