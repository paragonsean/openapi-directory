/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DurationUnits;
import org.openapitools.client.model.PriceUnits;
import org.openapitools.client.model.ReservationResourceSpecification;
import org.openapitools.client.model.ReservationState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeReservationResponseReservation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeReservationResponseReservation {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DURATION = "Duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_DURATION_UNITS = "DurationUnits";
  @SerializedName(SERIALIZED_NAME_DURATION_UNITS)
  private DurationUnits durationUnits;

  public static final String SERIALIZED_NAME_END = "End";
  @SerializedName(SERIALIZED_NAME_END)
  private String end;

  public static final String SERIALIZED_NAME_OFFERING_ARN = "OfferingArn";
  @SerializedName(SERIALIZED_NAME_OFFERING_ARN)
  private String offeringArn;

  public static final String SERIALIZED_NAME_OFFERING_DESCRIPTION = "OfferingDescription";
  @SerializedName(SERIALIZED_NAME_OFFERING_DESCRIPTION)
  private String offeringDescription;

  public static final String SERIALIZED_NAME_PRICE_PER_UNIT = "PricePerUnit";
  @SerializedName(SERIALIZED_NAME_PRICE_PER_UNIT)
  private String pricePerUnit;

  public static final String SERIALIZED_NAME_PRICE_UNITS = "PriceUnits";
  @SerializedName(SERIALIZED_NAME_PRICE_UNITS)
  private PriceUnits priceUnits;

  public static final String SERIALIZED_NAME_RESERVATION_ARN = "ReservationArn";
  @SerializedName(SERIALIZED_NAME_RESERVATION_ARN)
  private String reservationArn;

  public static final String SERIALIZED_NAME_RESERVATION_NAME = "ReservationName";
  @SerializedName(SERIALIZED_NAME_RESERVATION_NAME)
  private String reservationName;

  public static final String SERIALIZED_NAME_RESERVATION_STATE = "ReservationState";
  @SerializedName(SERIALIZED_NAME_RESERVATION_STATE)
  private ReservationState reservationState;

  public static final String SERIALIZED_NAME_RESOURCE_SPECIFICATION = "ResourceSpecification";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SPECIFICATION)
  private ReservationResourceSpecification resourceSpecification;

  public static final String SERIALIZED_NAME_START = "Start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public DescribeReservationResponseReservation() {
  }

  public DescribeReservationResponseReservation currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public DescribeReservationResponseReservation duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nonnull
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public DescribeReservationResponseReservation durationUnits(DurationUnits durationUnits) {
    this.durationUnits = durationUnits;
    return this;
  }

  /**
   * Get durationUnits
   * @return durationUnits
   */
  @javax.annotation.Nonnull
  public DurationUnits getDurationUnits() {
    return durationUnits;
  }

  public void setDurationUnits(DurationUnits durationUnits) {
    this.durationUnits = durationUnits;
  }


  public DescribeReservationResponseReservation end(String end) {
    this.end = end;
    return this;
  }

  /**
   * Get end
   * @return end
   */
  @javax.annotation.Nonnull
  public String getEnd() {
    return end;
  }

  public void setEnd(String end) {
    this.end = end;
  }


  public DescribeReservationResponseReservation offeringArn(String offeringArn) {
    this.offeringArn = offeringArn;
    return this;
  }

  /**
   * Get offeringArn
   * @return offeringArn
   */
  @javax.annotation.Nonnull
  public String getOfferingArn() {
    return offeringArn;
  }

  public void setOfferingArn(String offeringArn) {
    this.offeringArn = offeringArn;
  }


  public DescribeReservationResponseReservation offeringDescription(String offeringDescription) {
    this.offeringDescription = offeringDescription;
    return this;
  }

  /**
   * Get offeringDescription
   * @return offeringDescription
   */
  @javax.annotation.Nonnull
  public String getOfferingDescription() {
    return offeringDescription;
  }

  public void setOfferingDescription(String offeringDescription) {
    this.offeringDescription = offeringDescription;
  }


  public DescribeReservationResponseReservation pricePerUnit(String pricePerUnit) {
    this.pricePerUnit = pricePerUnit;
    return this;
  }

  /**
   * Get pricePerUnit
   * @return pricePerUnit
   */
  @javax.annotation.Nonnull
  public String getPricePerUnit() {
    return pricePerUnit;
  }

  public void setPricePerUnit(String pricePerUnit) {
    this.pricePerUnit = pricePerUnit;
  }


  public DescribeReservationResponseReservation priceUnits(PriceUnits priceUnits) {
    this.priceUnits = priceUnits;
    return this;
  }

  /**
   * Get priceUnits
   * @return priceUnits
   */
  @javax.annotation.Nonnull
  public PriceUnits getPriceUnits() {
    return priceUnits;
  }

  public void setPriceUnits(PriceUnits priceUnits) {
    this.priceUnits = priceUnits;
  }


  public DescribeReservationResponseReservation reservationArn(String reservationArn) {
    this.reservationArn = reservationArn;
    return this;
  }

  /**
   * Get reservationArn
   * @return reservationArn
   */
  @javax.annotation.Nonnull
  public String getReservationArn() {
    return reservationArn;
  }

  public void setReservationArn(String reservationArn) {
    this.reservationArn = reservationArn;
  }


  public DescribeReservationResponseReservation reservationName(String reservationName) {
    this.reservationName = reservationName;
    return this;
  }

  /**
   * Get reservationName
   * @return reservationName
   */
  @javax.annotation.Nonnull
  public String getReservationName() {
    return reservationName;
  }

  public void setReservationName(String reservationName) {
    this.reservationName = reservationName;
  }


  public DescribeReservationResponseReservation reservationState(ReservationState reservationState) {
    this.reservationState = reservationState;
    return this;
  }

  /**
   * Get reservationState
   * @return reservationState
   */
  @javax.annotation.Nonnull
  public ReservationState getReservationState() {
    return reservationState;
  }

  public void setReservationState(ReservationState reservationState) {
    this.reservationState = reservationState;
  }


  public DescribeReservationResponseReservation resourceSpecification(ReservationResourceSpecification resourceSpecification) {
    this.resourceSpecification = resourceSpecification;
    return this;
  }

  /**
   * Get resourceSpecification
   * @return resourceSpecification
   */
  @javax.annotation.Nonnull
  public ReservationResourceSpecification getResourceSpecification() {
    return resourceSpecification;
  }

  public void setResourceSpecification(ReservationResourceSpecification resourceSpecification) {
    this.resourceSpecification = resourceSpecification;
  }


  public DescribeReservationResponseReservation start(String start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nonnull
  public String getStart() {
    return start;
  }

  public void setStart(String start) {
    this.start = start;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeReservationResponseReservation describeReservationResponseReservation = (DescribeReservationResponseReservation) o;
    return Objects.equals(this.currencyCode, describeReservationResponseReservation.currencyCode) &&
        Objects.equals(this.duration, describeReservationResponseReservation.duration) &&
        Objects.equals(this.durationUnits, describeReservationResponseReservation.durationUnits) &&
        Objects.equals(this.end, describeReservationResponseReservation.end) &&
        Objects.equals(this.offeringArn, describeReservationResponseReservation.offeringArn) &&
        Objects.equals(this.offeringDescription, describeReservationResponseReservation.offeringDescription) &&
        Objects.equals(this.pricePerUnit, describeReservationResponseReservation.pricePerUnit) &&
        Objects.equals(this.priceUnits, describeReservationResponseReservation.priceUnits) &&
        Objects.equals(this.reservationArn, describeReservationResponseReservation.reservationArn) &&
        Objects.equals(this.reservationName, describeReservationResponseReservation.reservationName) &&
        Objects.equals(this.reservationState, describeReservationResponseReservation.reservationState) &&
        Objects.equals(this.resourceSpecification, describeReservationResponseReservation.resourceSpecification) &&
        Objects.equals(this.start, describeReservationResponseReservation.start);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, duration, durationUnits, end, offeringArn, offeringDescription, pricePerUnit, priceUnits, reservationArn, reservationName, reservationState, resourceSpecification, start);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeReservationResponseReservation {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    durationUnits: ").append(toIndentedString(durationUnits)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    offeringArn: ").append(toIndentedString(offeringArn)).append("\n");
    sb.append("    offeringDescription: ").append(toIndentedString(offeringDescription)).append("\n");
    sb.append("    pricePerUnit: ").append(toIndentedString(pricePerUnit)).append("\n");
    sb.append("    priceUnits: ").append(toIndentedString(priceUnits)).append("\n");
    sb.append("    reservationArn: ").append(toIndentedString(reservationArn)).append("\n");
    sb.append("    reservationName: ").append(toIndentedString(reservationName)).append("\n");
    sb.append("    reservationState: ").append(toIndentedString(reservationState)).append("\n");
    sb.append("    resourceSpecification: ").append(toIndentedString(resourceSpecification)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrencyCode");
    openapiFields.add("Duration");
    openapiFields.add("DurationUnits");
    openapiFields.add("End");
    openapiFields.add("OfferingArn");
    openapiFields.add("OfferingDescription");
    openapiFields.add("PricePerUnit");
    openapiFields.add("PriceUnits");
    openapiFields.add("ReservationArn");
    openapiFields.add("ReservationName");
    openapiFields.add("ReservationState");
    openapiFields.add("ResourceSpecification");
    openapiFields.add("Start");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CurrencyCode");
    openapiRequiredFields.add("Duration");
    openapiRequiredFields.add("DurationUnits");
    openapiRequiredFields.add("End");
    openapiRequiredFields.add("OfferingArn");
    openapiRequiredFields.add("OfferingDescription");
    openapiRequiredFields.add("PricePerUnit");
    openapiRequiredFields.add("PriceUnits");
    openapiRequiredFields.add("ReservationArn");
    openapiRequiredFields.add("ReservationName");
    openapiRequiredFields.add("ReservationState");
    openapiRequiredFields.add("ResourceSpecification");
    openapiRequiredFields.add("Start");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeReservationResponseReservation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeReservationResponseReservation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeReservationResponseReservation is not found in the empty JSON string", DescribeReservationResponseReservation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeReservationResponseReservation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeReservationResponseReservation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeReservationResponseReservation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `CurrencyCode`
      String.validateJsonElement(jsonObj.get("CurrencyCode"));
      // validate the required field `Duration`
      Integer.validateJsonElement(jsonObj.get("Duration"));
      // validate the required field `DurationUnits`
      DurationUnits.validateJsonElement(jsonObj.get("DurationUnits"));
      // validate the required field `End`
      String.validateJsonElement(jsonObj.get("End"));
      // validate the required field `OfferingArn`
      String.validateJsonElement(jsonObj.get("OfferingArn"));
      // validate the required field `OfferingDescription`
      String.validateJsonElement(jsonObj.get("OfferingDescription"));
      // validate the required field `PricePerUnit`
      String.validateJsonElement(jsonObj.get("PricePerUnit"));
      // validate the required field `PriceUnits`
      PriceUnits.validateJsonElement(jsonObj.get("PriceUnits"));
      // validate the required field `ReservationArn`
      String.validateJsonElement(jsonObj.get("ReservationArn"));
      // validate the required field `ReservationName`
      String.validateJsonElement(jsonObj.get("ReservationName"));
      // validate the required field `ReservationState`
      ReservationState.validateJsonElement(jsonObj.get("ReservationState"));
      // validate the required field `ResourceSpecification`
      ReservationResourceSpecification.validateJsonElement(jsonObj.get("ResourceSpecification"));
      // validate the required field `Start`
      String.validateJsonElement(jsonObj.get("Start"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeReservationResponseReservation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeReservationResponseReservation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeReservationResponseReservation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeReservationResponseReservation.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeReservationResponseReservation>() {
           @Override
           public void write(JsonWriter out, DescribeReservationResponseReservation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeReservationResponseReservation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeReservationResponseReservation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeReservationResponseReservation
   * @throws IOException if the JSON string is invalid with respect to DescribeReservationResponseReservation
   */
  public static DescribeReservationResponseReservation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeReservationResponseReservation.class);
  }

  /**
   * Convert an instance of DescribeReservationResponseReservation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

