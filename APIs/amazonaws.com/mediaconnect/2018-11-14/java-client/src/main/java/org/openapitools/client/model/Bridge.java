/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BridgeEgressGatewayBridge;
import org.openapitools.client.model.BridgeIngressGatewayBridge;
import org.openapitools.client.model.BridgeSourceFailoverConfig;
import org.openapitools.client.model.BridgeState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Bridge is the connection between your datacenter&#39;s Instances and the AWS cloud. A bridge can be used to send video from the AWS cloud to your datacenter or from your datacenter to the AWS cloud.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Bridge {
  public static final String SERIALIZED_NAME_BRIDGE_ARN = "BridgeArn";
  @SerializedName(SERIALIZED_NAME_BRIDGE_ARN)
  private String bridgeArn;

  public static final String SERIALIZED_NAME_BRIDGE_MESSAGES = "BridgeMessages";
  @SerializedName(SERIALIZED_NAME_BRIDGE_MESSAGES)
  private List bridgeMessages;

  public static final String SERIALIZED_NAME_BRIDGE_STATE = "BridgeState";
  @SerializedName(SERIALIZED_NAME_BRIDGE_STATE)
  private BridgeState bridgeState;

  public static final String SERIALIZED_NAME_EGRESS_GATEWAY_BRIDGE = "EgressGatewayBridge";
  @SerializedName(SERIALIZED_NAME_EGRESS_GATEWAY_BRIDGE)
  private BridgeEgressGatewayBridge egressGatewayBridge;

  public static final String SERIALIZED_NAME_INGRESS_GATEWAY_BRIDGE = "IngressGatewayBridge";
  @SerializedName(SERIALIZED_NAME_INGRESS_GATEWAY_BRIDGE)
  private BridgeIngressGatewayBridge ingressGatewayBridge;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUTS = "Outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List outputs;

  public static final String SERIALIZED_NAME_PLACEMENT_ARN = "PlacementArn";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_ARN)
  private String placementArn;

  public static final String SERIALIZED_NAME_SOURCE_FAILOVER_CONFIG = "SourceFailoverConfig";
  @SerializedName(SERIALIZED_NAME_SOURCE_FAILOVER_CONFIG)
  private BridgeSourceFailoverConfig sourceFailoverConfig;

  public static final String SERIALIZED_NAME_SOURCES = "Sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List sources;

  public Bridge() {
  }

  public Bridge bridgeArn(String bridgeArn) {
    this.bridgeArn = bridgeArn;
    return this;
  }

  /**
   * Get bridgeArn
   * @return bridgeArn
   */
  @javax.annotation.Nonnull
  public String getBridgeArn() {
    return bridgeArn;
  }

  public void setBridgeArn(String bridgeArn) {
    this.bridgeArn = bridgeArn;
  }


  public Bridge bridgeMessages(List bridgeMessages) {
    this.bridgeMessages = bridgeMessages;
    return this;
  }

  /**
   * Get bridgeMessages
   * @return bridgeMessages
   */
  @javax.annotation.Nullable
  public List getBridgeMessages() {
    return bridgeMessages;
  }

  public void setBridgeMessages(List bridgeMessages) {
    this.bridgeMessages = bridgeMessages;
  }


  public Bridge bridgeState(BridgeState bridgeState) {
    this.bridgeState = bridgeState;
    return this;
  }

  /**
   * Get bridgeState
   * @return bridgeState
   */
  @javax.annotation.Nonnull
  public BridgeState getBridgeState() {
    return bridgeState;
  }

  public void setBridgeState(BridgeState bridgeState) {
    this.bridgeState = bridgeState;
  }


  public Bridge egressGatewayBridge(BridgeEgressGatewayBridge egressGatewayBridge) {
    this.egressGatewayBridge = egressGatewayBridge;
    return this;
  }

  /**
   * Get egressGatewayBridge
   * @return egressGatewayBridge
   */
  @javax.annotation.Nullable
  public BridgeEgressGatewayBridge getEgressGatewayBridge() {
    return egressGatewayBridge;
  }

  public void setEgressGatewayBridge(BridgeEgressGatewayBridge egressGatewayBridge) {
    this.egressGatewayBridge = egressGatewayBridge;
  }


  public Bridge ingressGatewayBridge(BridgeIngressGatewayBridge ingressGatewayBridge) {
    this.ingressGatewayBridge = ingressGatewayBridge;
    return this;
  }

  /**
   * Get ingressGatewayBridge
   * @return ingressGatewayBridge
   */
  @javax.annotation.Nullable
  public BridgeIngressGatewayBridge getIngressGatewayBridge() {
    return ingressGatewayBridge;
  }

  public void setIngressGatewayBridge(BridgeIngressGatewayBridge ingressGatewayBridge) {
    this.ingressGatewayBridge = ingressGatewayBridge;
  }


  public Bridge name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Bridge outputs(List outputs) {
    this.outputs = outputs;
    return this;
  }

  /**
   * Get outputs
   * @return outputs
   */
  @javax.annotation.Nullable
  public List getOutputs() {
    return outputs;
  }

  public void setOutputs(List outputs) {
    this.outputs = outputs;
  }


  public Bridge placementArn(String placementArn) {
    this.placementArn = placementArn;
    return this;
  }

  /**
   * Get placementArn
   * @return placementArn
   */
  @javax.annotation.Nonnull
  public String getPlacementArn() {
    return placementArn;
  }

  public void setPlacementArn(String placementArn) {
    this.placementArn = placementArn;
  }


  public Bridge sourceFailoverConfig(BridgeSourceFailoverConfig sourceFailoverConfig) {
    this.sourceFailoverConfig = sourceFailoverConfig;
    return this;
  }

  /**
   * Get sourceFailoverConfig
   * @return sourceFailoverConfig
   */
  @javax.annotation.Nullable
  public BridgeSourceFailoverConfig getSourceFailoverConfig() {
    return sourceFailoverConfig;
  }

  public void setSourceFailoverConfig(BridgeSourceFailoverConfig sourceFailoverConfig) {
    this.sourceFailoverConfig = sourceFailoverConfig;
  }


  public Bridge sources(List sources) {
    this.sources = sources;
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List getSources() {
    return sources;
  }

  public void setSources(List sources) {
    this.sources = sources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bridge bridge = (Bridge) o;
    return Objects.equals(this.bridgeArn, bridge.bridgeArn) &&
        Objects.equals(this.bridgeMessages, bridge.bridgeMessages) &&
        Objects.equals(this.bridgeState, bridge.bridgeState) &&
        Objects.equals(this.egressGatewayBridge, bridge.egressGatewayBridge) &&
        Objects.equals(this.ingressGatewayBridge, bridge.ingressGatewayBridge) &&
        Objects.equals(this.name, bridge.name) &&
        Objects.equals(this.outputs, bridge.outputs) &&
        Objects.equals(this.placementArn, bridge.placementArn) &&
        Objects.equals(this.sourceFailoverConfig, bridge.sourceFailoverConfig) &&
        Objects.equals(this.sources, bridge.sources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bridgeArn, bridgeMessages, bridgeState, egressGatewayBridge, ingressGatewayBridge, name, outputs, placementArn, sourceFailoverConfig, sources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bridge {\n");
    sb.append("    bridgeArn: ").append(toIndentedString(bridgeArn)).append("\n");
    sb.append("    bridgeMessages: ").append(toIndentedString(bridgeMessages)).append("\n");
    sb.append("    bridgeState: ").append(toIndentedString(bridgeState)).append("\n");
    sb.append("    egressGatewayBridge: ").append(toIndentedString(egressGatewayBridge)).append("\n");
    sb.append("    ingressGatewayBridge: ").append(toIndentedString(ingressGatewayBridge)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    placementArn: ").append(toIndentedString(placementArn)).append("\n");
    sb.append("    sourceFailoverConfig: ").append(toIndentedString(sourceFailoverConfig)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BridgeArn");
    openapiFields.add("BridgeMessages");
    openapiFields.add("BridgeState");
    openapiFields.add("EgressGatewayBridge");
    openapiFields.add("IngressGatewayBridge");
    openapiFields.add("Name");
    openapiFields.add("Outputs");
    openapiFields.add("PlacementArn");
    openapiFields.add("SourceFailoverConfig");
    openapiFields.add("Sources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BridgeArn");
    openapiRequiredFields.add("BridgeState");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("PlacementArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Bridge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Bridge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Bridge is not found in the empty JSON string", Bridge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Bridge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Bridge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Bridge.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `BridgeArn`
      String.validateJsonElement(jsonObj.get("BridgeArn"));
      // validate the optional field `BridgeMessages`
      if (jsonObj.get("BridgeMessages") != null && !jsonObj.get("BridgeMessages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("BridgeMessages"));
      }
      // validate the required field `BridgeState`
      BridgeState.validateJsonElement(jsonObj.get("BridgeState"));
      // validate the optional field `EgressGatewayBridge`
      if (jsonObj.get("EgressGatewayBridge") != null && !jsonObj.get("EgressGatewayBridge").isJsonNull()) {
        BridgeEgressGatewayBridge.validateJsonElement(jsonObj.get("EgressGatewayBridge"));
      }
      // validate the optional field `IngressGatewayBridge`
      if (jsonObj.get("IngressGatewayBridge") != null && !jsonObj.get("IngressGatewayBridge").isJsonNull()) {
        BridgeIngressGatewayBridge.validateJsonElement(jsonObj.get("IngressGatewayBridge"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Outputs`
      if (jsonObj.get("Outputs") != null && !jsonObj.get("Outputs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Outputs"));
      }
      // validate the required field `PlacementArn`
      String.validateJsonElement(jsonObj.get("PlacementArn"));
      // validate the optional field `SourceFailoverConfig`
      if (jsonObj.get("SourceFailoverConfig") != null && !jsonObj.get("SourceFailoverConfig").isJsonNull()) {
        BridgeSourceFailoverConfig.validateJsonElement(jsonObj.get("SourceFailoverConfig"));
      }
      // validate the optional field `Sources`
      if (jsonObj.get("Sources") != null && !jsonObj.get("Sources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Sources"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Bridge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Bridge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Bridge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Bridge.class));

       return (TypeAdapter<T>) new TypeAdapter<Bridge>() {
           @Override
           public void write(JsonWriter out, Bridge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Bridge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Bridge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Bridge
   * @throws IOException if the JSON string is invalid with respect to Bridge
   */
  public static Bridge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Bridge.class);
  }

  /**
   * Convert an instance of Bridge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

