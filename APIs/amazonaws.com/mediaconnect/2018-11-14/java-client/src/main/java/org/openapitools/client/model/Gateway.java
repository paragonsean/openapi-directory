/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GatewayState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The settings for a gateway, including its networks.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Gateway {
  public static final String SERIALIZED_NAME_EGRESS_CIDR_BLOCKS = "EgressCidrBlocks";
  @SerializedName(SERIALIZED_NAME_EGRESS_CIDR_BLOCKS)
  private List egressCidrBlocks;

  public static final String SERIALIZED_NAME_GATEWAY_ARN = "GatewayArn";
  @SerializedName(SERIALIZED_NAME_GATEWAY_ARN)
  private String gatewayArn;

  public static final String SERIALIZED_NAME_GATEWAY_MESSAGES = "GatewayMessages";
  @SerializedName(SERIALIZED_NAME_GATEWAY_MESSAGES)
  private List gatewayMessages;

  public static final String SERIALIZED_NAME_GATEWAY_STATE = "GatewayState";
  @SerializedName(SERIALIZED_NAME_GATEWAY_STATE)
  private GatewayState gatewayState;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORKS = "Networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private List networks;

  public Gateway() {
  }

  public Gateway egressCidrBlocks(List egressCidrBlocks) {
    this.egressCidrBlocks = egressCidrBlocks;
    return this;
  }

  /**
   * Get egressCidrBlocks
   * @return egressCidrBlocks
   */
  @javax.annotation.Nonnull
  public List getEgressCidrBlocks() {
    return egressCidrBlocks;
  }

  public void setEgressCidrBlocks(List egressCidrBlocks) {
    this.egressCidrBlocks = egressCidrBlocks;
  }


  public Gateway gatewayArn(String gatewayArn) {
    this.gatewayArn = gatewayArn;
    return this;
  }

  /**
   * Get gatewayArn
   * @return gatewayArn
   */
  @javax.annotation.Nonnull
  public String getGatewayArn() {
    return gatewayArn;
  }

  public void setGatewayArn(String gatewayArn) {
    this.gatewayArn = gatewayArn;
  }


  public Gateway gatewayMessages(List gatewayMessages) {
    this.gatewayMessages = gatewayMessages;
    return this;
  }

  /**
   * Get gatewayMessages
   * @return gatewayMessages
   */
  @javax.annotation.Nullable
  public List getGatewayMessages() {
    return gatewayMessages;
  }

  public void setGatewayMessages(List gatewayMessages) {
    this.gatewayMessages = gatewayMessages;
  }


  public Gateway gatewayState(GatewayState gatewayState) {
    this.gatewayState = gatewayState;
    return this;
  }

  /**
   * Get gatewayState
   * @return gatewayState
   */
  @javax.annotation.Nullable
  public GatewayState getGatewayState() {
    return gatewayState;
  }

  public void setGatewayState(GatewayState gatewayState) {
    this.gatewayState = gatewayState;
  }


  public Gateway name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Gateway networks(List networks) {
    this.networks = networks;
    return this;
  }

  /**
   * Get networks
   * @return networks
   */
  @javax.annotation.Nonnull
  public List getNetworks() {
    return networks;
  }

  public void setNetworks(List networks) {
    this.networks = networks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Gateway gateway = (Gateway) o;
    return Objects.equals(this.egressCidrBlocks, gateway.egressCidrBlocks) &&
        Objects.equals(this.gatewayArn, gateway.gatewayArn) &&
        Objects.equals(this.gatewayMessages, gateway.gatewayMessages) &&
        Objects.equals(this.gatewayState, gateway.gatewayState) &&
        Objects.equals(this.name, gateway.name) &&
        Objects.equals(this.networks, gateway.networks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(egressCidrBlocks, gatewayArn, gatewayMessages, gatewayState, name, networks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Gateway {\n");
    sb.append("    egressCidrBlocks: ").append(toIndentedString(egressCidrBlocks)).append("\n");
    sb.append("    gatewayArn: ").append(toIndentedString(gatewayArn)).append("\n");
    sb.append("    gatewayMessages: ").append(toIndentedString(gatewayMessages)).append("\n");
    sb.append("    gatewayState: ").append(toIndentedString(gatewayState)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EgressCidrBlocks");
    openapiFields.add("GatewayArn");
    openapiFields.add("GatewayMessages");
    openapiFields.add("GatewayState");
    openapiFields.add("Name");
    openapiFields.add("Networks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EgressCidrBlocks");
    openapiRequiredFields.add("GatewayArn");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Networks");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Gateway
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Gateway.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Gateway is not found in the empty JSON string", Gateway.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Gateway.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Gateway` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Gateway.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `EgressCidrBlocks`
      List.validateJsonElement(jsonObj.get("EgressCidrBlocks"));
      // validate the required field `GatewayArn`
      String.validateJsonElement(jsonObj.get("GatewayArn"));
      // validate the optional field `GatewayMessages`
      if (jsonObj.get("GatewayMessages") != null && !jsonObj.get("GatewayMessages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GatewayMessages"));
      }
      // validate the optional field `GatewayState`
      if (jsonObj.get("GatewayState") != null && !jsonObj.get("GatewayState").isJsonNull()) {
        GatewayState.validateJsonElement(jsonObj.get("GatewayState"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `Networks`
      List.validateJsonElement(jsonObj.get("Networks"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Gateway.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Gateway' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Gateway> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Gateway.class));

       return (TypeAdapter<T>) new TypeAdapter<Gateway>() {
           @Override
           public void write(JsonWriter out, Gateway value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Gateway read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Gateway given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Gateway
   * @throws IOException if the JSON string is invalid with respect to Gateway
   */
  public static Gateway fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Gateway.class);
  }

  /**
   * Convert an instance of Gateway to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

