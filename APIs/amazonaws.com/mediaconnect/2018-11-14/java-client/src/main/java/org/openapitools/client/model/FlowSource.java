/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SourceDecryption;
import org.openapitools.client.model.SourceGatewayBridgeSource;
import org.openapitools.client.model.SourceTransport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlowSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlowSource {
  public static final String SERIALIZED_NAME_DATA_TRANSFER_SUBSCRIBER_FEE_PERCENT = "DataTransferSubscriberFeePercent";
  @SerializedName(SERIALIZED_NAME_DATA_TRANSFER_SUBSCRIBER_FEE_PERCENT)
  private Integer dataTransferSubscriberFeePercent;

  public static final String SERIALIZED_NAME_DECRYPTION = "Decryption";
  @SerializedName(SERIALIZED_NAME_DECRYPTION)
  private SourceDecryption decryption;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENTITLEMENT_ARN = "EntitlementArn";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_ARN)
  private String entitlementArn;

  public static final String SERIALIZED_NAME_INGEST_IP = "IngestIp";
  @SerializedName(SERIALIZED_NAME_INGEST_IP)
  private String ingestIp;

  public static final String SERIALIZED_NAME_INGEST_PORT = "IngestPort";
  @SerializedName(SERIALIZED_NAME_INGEST_PORT)
  private Integer ingestPort;

  public static final String SERIALIZED_NAME_MEDIA_STREAM_SOURCE_CONFIGURATIONS = "MediaStreamSourceConfigurations";
  @SerializedName(SERIALIZED_NAME_MEDIA_STREAM_SOURCE_CONFIGURATIONS)
  private List mediaStreamSourceConfigurations;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SENDER_CONTROL_PORT = "SenderControlPort";
  @SerializedName(SERIALIZED_NAME_SENDER_CONTROL_PORT)
  private Integer senderControlPort;

  public static final String SERIALIZED_NAME_SENDER_IP_ADDRESS = "SenderIpAddress";
  @SerializedName(SERIALIZED_NAME_SENDER_IP_ADDRESS)
  private String senderIpAddress;

  public static final String SERIALIZED_NAME_SOURCE_ARN = "SourceArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_ARN)
  private String sourceArn;

  public static final String SERIALIZED_NAME_TRANSPORT = "Transport";
  @SerializedName(SERIALIZED_NAME_TRANSPORT)
  private SourceTransport transport;

  public static final String SERIALIZED_NAME_VPC_INTERFACE_NAME = "VpcInterfaceName";
  @SerializedName(SERIALIZED_NAME_VPC_INTERFACE_NAME)
  private String vpcInterfaceName;

  public static final String SERIALIZED_NAME_WHITELIST_CIDR = "WhitelistCidr";
  @SerializedName(SERIALIZED_NAME_WHITELIST_CIDR)
  private String whitelistCidr;

  public static final String SERIALIZED_NAME_GATEWAY_BRIDGE_SOURCE = "GatewayBridgeSource";
  @SerializedName(SERIALIZED_NAME_GATEWAY_BRIDGE_SOURCE)
  private SourceGatewayBridgeSource gatewayBridgeSource;

  public FlowSource() {
  }

  public FlowSource dataTransferSubscriberFeePercent(Integer dataTransferSubscriberFeePercent) {
    this.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent;
    return this;
  }

  /**
   * Get dataTransferSubscriberFeePercent
   * @return dataTransferSubscriberFeePercent
   */
  @javax.annotation.Nullable
  public Integer getDataTransferSubscriberFeePercent() {
    return dataTransferSubscriberFeePercent;
  }

  public void setDataTransferSubscriberFeePercent(Integer dataTransferSubscriberFeePercent) {
    this.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent;
  }


  public FlowSource decryption(SourceDecryption decryption) {
    this.decryption = decryption;
    return this;
  }

  /**
   * Get decryption
   * @return decryption
   */
  @javax.annotation.Nullable
  public SourceDecryption getDecryption() {
    return decryption;
  }

  public void setDecryption(SourceDecryption decryption) {
    this.decryption = decryption;
  }


  public FlowSource description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FlowSource entitlementArn(String entitlementArn) {
    this.entitlementArn = entitlementArn;
    return this;
  }

  /**
   * Get entitlementArn
   * @return entitlementArn
   */
  @javax.annotation.Nullable
  public String getEntitlementArn() {
    return entitlementArn;
  }

  public void setEntitlementArn(String entitlementArn) {
    this.entitlementArn = entitlementArn;
  }


  public FlowSource ingestIp(String ingestIp) {
    this.ingestIp = ingestIp;
    return this;
  }

  /**
   * Get ingestIp
   * @return ingestIp
   */
  @javax.annotation.Nullable
  public String getIngestIp() {
    return ingestIp;
  }

  public void setIngestIp(String ingestIp) {
    this.ingestIp = ingestIp;
  }


  public FlowSource ingestPort(Integer ingestPort) {
    this.ingestPort = ingestPort;
    return this;
  }

  /**
   * Get ingestPort
   * @return ingestPort
   */
  @javax.annotation.Nullable
  public Integer getIngestPort() {
    return ingestPort;
  }

  public void setIngestPort(Integer ingestPort) {
    this.ingestPort = ingestPort;
  }


  public FlowSource mediaStreamSourceConfigurations(List mediaStreamSourceConfigurations) {
    this.mediaStreamSourceConfigurations = mediaStreamSourceConfigurations;
    return this;
  }

  /**
   * Get mediaStreamSourceConfigurations
   * @return mediaStreamSourceConfigurations
   */
  @javax.annotation.Nullable
  public List getMediaStreamSourceConfigurations() {
    return mediaStreamSourceConfigurations;
  }

  public void setMediaStreamSourceConfigurations(List mediaStreamSourceConfigurations) {
    this.mediaStreamSourceConfigurations = mediaStreamSourceConfigurations;
  }


  public FlowSource name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FlowSource senderControlPort(Integer senderControlPort) {
    this.senderControlPort = senderControlPort;
    return this;
  }

  /**
   * Get senderControlPort
   * @return senderControlPort
   */
  @javax.annotation.Nullable
  public Integer getSenderControlPort() {
    return senderControlPort;
  }

  public void setSenderControlPort(Integer senderControlPort) {
    this.senderControlPort = senderControlPort;
  }


  public FlowSource senderIpAddress(String senderIpAddress) {
    this.senderIpAddress = senderIpAddress;
    return this;
  }

  /**
   * Get senderIpAddress
   * @return senderIpAddress
   */
  @javax.annotation.Nullable
  public String getSenderIpAddress() {
    return senderIpAddress;
  }

  public void setSenderIpAddress(String senderIpAddress) {
    this.senderIpAddress = senderIpAddress;
  }


  public FlowSource sourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
    return this;
  }

  /**
   * Get sourceArn
   * @return sourceArn
   */
  @javax.annotation.Nonnull
  public String getSourceArn() {
    return sourceArn;
  }

  public void setSourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
  }


  public FlowSource transport(SourceTransport transport) {
    this.transport = transport;
    return this;
  }

  /**
   * Get transport
   * @return transport
   */
  @javax.annotation.Nullable
  public SourceTransport getTransport() {
    return transport;
  }

  public void setTransport(SourceTransport transport) {
    this.transport = transport;
  }


  public FlowSource vpcInterfaceName(String vpcInterfaceName) {
    this.vpcInterfaceName = vpcInterfaceName;
    return this;
  }

  /**
   * Get vpcInterfaceName
   * @return vpcInterfaceName
   */
  @javax.annotation.Nullable
  public String getVpcInterfaceName() {
    return vpcInterfaceName;
  }

  public void setVpcInterfaceName(String vpcInterfaceName) {
    this.vpcInterfaceName = vpcInterfaceName;
  }


  public FlowSource whitelistCidr(String whitelistCidr) {
    this.whitelistCidr = whitelistCidr;
    return this;
  }

  /**
   * Get whitelistCidr
   * @return whitelistCidr
   */
  @javax.annotation.Nullable
  public String getWhitelistCidr() {
    return whitelistCidr;
  }

  public void setWhitelistCidr(String whitelistCidr) {
    this.whitelistCidr = whitelistCidr;
  }


  public FlowSource gatewayBridgeSource(SourceGatewayBridgeSource gatewayBridgeSource) {
    this.gatewayBridgeSource = gatewayBridgeSource;
    return this;
  }

  /**
   * Get gatewayBridgeSource
   * @return gatewayBridgeSource
   */
  @javax.annotation.Nullable
  public SourceGatewayBridgeSource getGatewayBridgeSource() {
    return gatewayBridgeSource;
  }

  public void setGatewayBridgeSource(SourceGatewayBridgeSource gatewayBridgeSource) {
    this.gatewayBridgeSource = gatewayBridgeSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowSource flowSource = (FlowSource) o;
    return Objects.equals(this.dataTransferSubscriberFeePercent, flowSource.dataTransferSubscriberFeePercent) &&
        Objects.equals(this.decryption, flowSource.decryption) &&
        Objects.equals(this.description, flowSource.description) &&
        Objects.equals(this.entitlementArn, flowSource.entitlementArn) &&
        Objects.equals(this.ingestIp, flowSource.ingestIp) &&
        Objects.equals(this.ingestPort, flowSource.ingestPort) &&
        Objects.equals(this.mediaStreamSourceConfigurations, flowSource.mediaStreamSourceConfigurations) &&
        Objects.equals(this.name, flowSource.name) &&
        Objects.equals(this.senderControlPort, flowSource.senderControlPort) &&
        Objects.equals(this.senderIpAddress, flowSource.senderIpAddress) &&
        Objects.equals(this.sourceArn, flowSource.sourceArn) &&
        Objects.equals(this.transport, flowSource.transport) &&
        Objects.equals(this.vpcInterfaceName, flowSource.vpcInterfaceName) &&
        Objects.equals(this.whitelistCidr, flowSource.whitelistCidr) &&
        Objects.equals(this.gatewayBridgeSource, flowSource.gatewayBridgeSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataTransferSubscriberFeePercent, decryption, description, entitlementArn, ingestIp, ingestPort, mediaStreamSourceConfigurations, name, senderControlPort, senderIpAddress, sourceArn, transport, vpcInterfaceName, whitelistCidr, gatewayBridgeSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowSource {\n");
    sb.append("    dataTransferSubscriberFeePercent: ").append(toIndentedString(dataTransferSubscriberFeePercent)).append("\n");
    sb.append("    decryption: ").append(toIndentedString(decryption)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entitlementArn: ").append(toIndentedString(entitlementArn)).append("\n");
    sb.append("    ingestIp: ").append(toIndentedString(ingestIp)).append("\n");
    sb.append("    ingestPort: ").append(toIndentedString(ingestPort)).append("\n");
    sb.append("    mediaStreamSourceConfigurations: ").append(toIndentedString(mediaStreamSourceConfigurations)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    senderControlPort: ").append(toIndentedString(senderControlPort)).append("\n");
    sb.append("    senderIpAddress: ").append(toIndentedString(senderIpAddress)).append("\n");
    sb.append("    sourceArn: ").append(toIndentedString(sourceArn)).append("\n");
    sb.append("    transport: ").append(toIndentedString(transport)).append("\n");
    sb.append("    vpcInterfaceName: ").append(toIndentedString(vpcInterfaceName)).append("\n");
    sb.append("    whitelistCidr: ").append(toIndentedString(whitelistCidr)).append("\n");
    sb.append("    gatewayBridgeSource: ").append(toIndentedString(gatewayBridgeSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DataTransferSubscriberFeePercent");
    openapiFields.add("Decryption");
    openapiFields.add("Description");
    openapiFields.add("EntitlementArn");
    openapiFields.add("IngestIp");
    openapiFields.add("IngestPort");
    openapiFields.add("MediaStreamSourceConfigurations");
    openapiFields.add("Name");
    openapiFields.add("SenderControlPort");
    openapiFields.add("SenderIpAddress");
    openapiFields.add("SourceArn");
    openapiFields.add("Transport");
    openapiFields.add("VpcInterfaceName");
    openapiFields.add("WhitelistCidr");
    openapiFields.add("GatewayBridgeSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("SourceArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlowSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowSource is not found in the empty JSON string", FlowSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FlowSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DataTransferSubscriberFeePercent`
      if (jsonObj.get("DataTransferSubscriberFeePercent") != null && !jsonObj.get("DataTransferSubscriberFeePercent").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DataTransferSubscriberFeePercent"));
      }
      // validate the optional field `Decryption`
      if (jsonObj.get("Decryption") != null && !jsonObj.get("Decryption").isJsonNull()) {
        SourceDecryption.validateJsonElement(jsonObj.get("Decryption"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `EntitlementArn`
      if (jsonObj.get("EntitlementArn") != null && !jsonObj.get("EntitlementArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EntitlementArn"));
      }
      // validate the optional field `IngestIp`
      if (jsonObj.get("IngestIp") != null && !jsonObj.get("IngestIp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IngestIp"));
      }
      // validate the optional field `IngestPort`
      if (jsonObj.get("IngestPort") != null && !jsonObj.get("IngestPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("IngestPort"));
      }
      // validate the optional field `MediaStreamSourceConfigurations`
      if (jsonObj.get("MediaStreamSourceConfigurations") != null && !jsonObj.get("MediaStreamSourceConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MediaStreamSourceConfigurations"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `SenderControlPort`
      if (jsonObj.get("SenderControlPort") != null && !jsonObj.get("SenderControlPort").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SenderControlPort"));
      }
      // validate the optional field `SenderIpAddress`
      if (jsonObj.get("SenderIpAddress") != null && !jsonObj.get("SenderIpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SenderIpAddress"));
      }
      // validate the required field `SourceArn`
      String.validateJsonElement(jsonObj.get("SourceArn"));
      // validate the optional field `Transport`
      if (jsonObj.get("Transport") != null && !jsonObj.get("Transport").isJsonNull()) {
        SourceTransport.validateJsonElement(jsonObj.get("Transport"));
      }
      // validate the optional field `VpcInterfaceName`
      if (jsonObj.get("VpcInterfaceName") != null && !jsonObj.get("VpcInterfaceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcInterfaceName"));
      }
      // validate the optional field `WhitelistCidr`
      if (jsonObj.get("WhitelistCidr") != null && !jsonObj.get("WhitelistCidr").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WhitelistCidr"));
      }
      // validate the optional field `GatewayBridgeSource`
      if (jsonObj.get("GatewayBridgeSource") != null && !jsonObj.get("GatewayBridgeSource").isJsonNull()) {
        SourceGatewayBridgeSource.validateJsonElement(jsonObj.get("GatewayBridgeSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowSource.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowSource>() {
           @Override
           public void write(JsonWriter out, FlowSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlowSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlowSource
   * @throws IOException if the JSON string is invalid with respect to FlowSource
   */
  public static FlowSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowSource.class);
  }

  /**
   * Convert an instance of FlowSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

