/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Protocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Update an existing network output.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateBridgeNetworkOutputRequest {
  public static final String SERIALIZED_NAME_IP_ADDRESS = "IpAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_NETWORK_NAME = "NetworkName";
  @SerializedName(SERIALIZED_NAME_NETWORK_NAME)
  private String networkName;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PROTOCOL = "Protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private Protocol protocol;

  public static final String SERIALIZED_NAME_TTL = "Ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  private Integer ttl;

  public UpdateBridgeNetworkOutputRequest() {
  }

  public UpdateBridgeNetworkOutputRequest ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public UpdateBridgeNetworkOutputRequest networkName(String networkName) {
    this.networkName = networkName;
    return this;
  }

  /**
   * Get networkName
   * @return networkName
   */
  @javax.annotation.Nullable
  public String getNetworkName() {
    return networkName;
  }

  public void setNetworkName(String networkName) {
    this.networkName = networkName;
  }


  public UpdateBridgeNetworkOutputRequest port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public UpdateBridgeNetworkOutputRequest protocol(Protocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public Protocol getProtocol() {
    return protocol;
  }

  public void setProtocol(Protocol protocol) {
    this.protocol = protocol;
  }


  public UpdateBridgeNetworkOutputRequest ttl(Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Get ttl
   * @return ttl
   */
  @javax.annotation.Nullable
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateBridgeNetworkOutputRequest updateBridgeNetworkOutputRequest = (UpdateBridgeNetworkOutputRequest) o;
    return Objects.equals(this.ipAddress, updateBridgeNetworkOutputRequest.ipAddress) &&
        Objects.equals(this.networkName, updateBridgeNetworkOutputRequest.networkName) &&
        Objects.equals(this.port, updateBridgeNetworkOutputRequest.port) &&
        Objects.equals(this.protocol, updateBridgeNetworkOutputRequest.protocol) &&
        Objects.equals(this.ttl, updateBridgeNetworkOutputRequest.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipAddress, networkName, port, protocol, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateBridgeNetworkOutputRequest {\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    networkName: ").append(toIndentedString(networkName)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IpAddress");
    openapiFields.add("NetworkName");
    openapiFields.add("Port");
    openapiFields.add("Protocol");
    openapiFields.add("Ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateBridgeNetworkOutputRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateBridgeNetworkOutputRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateBridgeNetworkOutputRequest is not found in the empty JSON string", UpdateBridgeNetworkOutputRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateBridgeNetworkOutputRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateBridgeNetworkOutputRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `IpAddress`
      if (jsonObj.get("IpAddress") != null && !jsonObj.get("IpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IpAddress"));
      }
      // validate the optional field `NetworkName`
      if (jsonObj.get("NetworkName") != null && !jsonObj.get("NetworkName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkName"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `Protocol`
      if (jsonObj.get("Protocol") != null && !jsonObj.get("Protocol").isJsonNull()) {
        Protocol.validateJsonElement(jsonObj.get("Protocol"));
      }
      // validate the optional field `Ttl`
      if (jsonObj.get("Ttl") != null && !jsonObj.get("Ttl").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Ttl"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateBridgeNetworkOutputRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateBridgeNetworkOutputRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateBridgeNetworkOutputRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateBridgeNetworkOutputRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateBridgeNetworkOutputRequest>() {
           @Override
           public void write(JsonWriter out, UpdateBridgeNetworkOutputRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateBridgeNetworkOutputRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateBridgeNetworkOutputRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateBridgeNetworkOutputRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateBridgeNetworkOutputRequest
   */
  public static UpdateBridgeNetworkOutputRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateBridgeNetworkOutputRequest.class);
  }

  /**
   * Convert an instance of UpdateBridgeNetworkOutputRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

