/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FlowMaintenance;
import org.openapitools.client.model.SourceType;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides a summary of a flow, including its ARN, Availability Zone, and source type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListedFlow {
  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "AvailabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FLOW_ARN = "FlowArn";
  @SerializedName(SERIALIZED_NAME_FLOW_ARN)
  private String flowArn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceType sourceType;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_MAINTENANCE = "Maintenance";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE)
  private FlowMaintenance maintenance;

  public ListedFlow() {
  }

  public ListedFlow availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nonnull
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public ListedFlow description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ListedFlow flowArn(String flowArn) {
    this.flowArn = flowArn;
    return this;
  }

  /**
   * Get flowArn
   * @return flowArn
   */
  @javax.annotation.Nonnull
  public String getFlowArn() {
    return flowArn;
  }

  public void setFlowArn(String flowArn) {
    this.flowArn = flowArn;
  }


  public ListedFlow name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ListedFlow sourceType(SourceType sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * Get sourceType
   * @return sourceType
   */
  @javax.annotation.Nonnull
  public SourceType getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceType sourceType) {
    this.sourceType = sourceType;
  }


  public ListedFlow status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public ListedFlow maintenance(FlowMaintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

  /**
   * Get maintenance
   * @return maintenance
   */
  @javax.annotation.Nullable
  public FlowMaintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(FlowMaintenance maintenance) {
    this.maintenance = maintenance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListedFlow listedFlow = (ListedFlow) o;
    return Objects.equals(this.availabilityZone, listedFlow.availabilityZone) &&
        Objects.equals(this.description, listedFlow.description) &&
        Objects.equals(this.flowArn, listedFlow.flowArn) &&
        Objects.equals(this.name, listedFlow.name) &&
        Objects.equals(this.sourceType, listedFlow.sourceType) &&
        Objects.equals(this.status, listedFlow.status) &&
        Objects.equals(this.maintenance, listedFlow.maintenance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityZone, description, flowArn, name, sourceType, status, maintenance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListedFlow {\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    flowArn: ").append(toIndentedString(flowArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailabilityZone");
    openapiFields.add("Description");
    openapiFields.add("FlowArn");
    openapiFields.add("Name");
    openapiFields.add("SourceType");
    openapiFields.add("Status");
    openapiFields.add("Maintenance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AvailabilityZone");
    openapiRequiredFields.add("Description");
    openapiRequiredFields.add("FlowArn");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("SourceType");
    openapiRequiredFields.add("Status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListedFlow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListedFlow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListedFlow is not found in the empty JSON string", ListedFlow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListedFlow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListedFlow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListedFlow.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AvailabilityZone`
      String.validateJsonElement(jsonObj.get("AvailabilityZone"));
      // validate the required field `Description`
      String.validateJsonElement(jsonObj.get("Description"));
      // validate the required field `FlowArn`
      String.validateJsonElement(jsonObj.get("FlowArn"));
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `SourceType`
      SourceType.validateJsonElement(jsonObj.get("SourceType"));
      // validate the required field `Status`
      Status.validateJsonElement(jsonObj.get("Status"));
      // validate the optional field `Maintenance`
      if (jsonObj.get("Maintenance") != null && !jsonObj.get("Maintenance").isJsonNull()) {
        FlowMaintenance.validateJsonElement(jsonObj.get("Maintenance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListedFlow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListedFlow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListedFlow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListedFlow.class));

       return (TypeAdapter<T>) new TypeAdapter<ListedFlow>() {
           @Override
           public void write(JsonWriter out, ListedFlow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListedFlow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListedFlow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListedFlow
   * @throws IOException if the JSON string is invalid with respect to ListedFlow
   */
  public static ListedFlow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListedFlow.class);
  }

  /**
   * Convert an instance of ListedFlow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

