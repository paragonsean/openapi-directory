/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Colorimetry;
import org.openapitools.client.model.Range;
import org.openapitools.client.model.ScanMode;
import org.openapitools.client.model.Tcs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FMTP
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Fmtp {
  public static final String SERIALIZED_NAME_CHANNEL_ORDER = "ChannelOrder";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ORDER)
  private String channelOrder;

  public static final String SERIALIZED_NAME_COLORIMETRY = "Colorimetry";
  @SerializedName(SERIALIZED_NAME_COLORIMETRY)
  private Colorimetry colorimetry;

  public static final String SERIALIZED_NAME_EXACT_FRAMERATE = "ExactFramerate";
  @SerializedName(SERIALIZED_NAME_EXACT_FRAMERATE)
  private String exactFramerate;

  public static final String SERIALIZED_NAME_PAR = "Par";
  @SerializedName(SERIALIZED_NAME_PAR)
  private String par;

  public static final String SERIALIZED_NAME_RANGE = "Range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private Range range;

  public static final String SERIALIZED_NAME_SCAN_MODE = "ScanMode";
  @SerializedName(SERIALIZED_NAME_SCAN_MODE)
  private ScanMode scanMode;

  public static final String SERIALIZED_NAME_TCS = "Tcs";
  @SerializedName(SERIALIZED_NAME_TCS)
  private Tcs tcs;

  public Fmtp() {
  }

  public Fmtp channelOrder(String channelOrder) {
    this.channelOrder = channelOrder;
    return this;
  }

  /**
   * Get channelOrder
   * @return channelOrder
   */
  @javax.annotation.Nullable
  public String getChannelOrder() {
    return channelOrder;
  }

  public void setChannelOrder(String channelOrder) {
    this.channelOrder = channelOrder;
  }


  public Fmtp colorimetry(Colorimetry colorimetry) {
    this.colorimetry = colorimetry;
    return this;
  }

  /**
   * Get colorimetry
   * @return colorimetry
   */
  @javax.annotation.Nullable
  public Colorimetry getColorimetry() {
    return colorimetry;
  }

  public void setColorimetry(Colorimetry colorimetry) {
    this.colorimetry = colorimetry;
  }


  public Fmtp exactFramerate(String exactFramerate) {
    this.exactFramerate = exactFramerate;
    return this;
  }

  /**
   * Get exactFramerate
   * @return exactFramerate
   */
  @javax.annotation.Nullable
  public String getExactFramerate() {
    return exactFramerate;
  }

  public void setExactFramerate(String exactFramerate) {
    this.exactFramerate = exactFramerate;
  }


  public Fmtp par(String par) {
    this.par = par;
    return this;
  }

  /**
   * Get par
   * @return par
   */
  @javax.annotation.Nullable
  public String getPar() {
    return par;
  }

  public void setPar(String par) {
    this.par = par;
  }


  public Fmtp range(Range range) {
    this.range = range;
    return this;
  }

  /**
   * Get range
   * @return range
   */
  @javax.annotation.Nullable
  public Range getRange() {
    return range;
  }

  public void setRange(Range range) {
    this.range = range;
  }


  public Fmtp scanMode(ScanMode scanMode) {
    this.scanMode = scanMode;
    return this;
  }

  /**
   * Get scanMode
   * @return scanMode
   */
  @javax.annotation.Nullable
  public ScanMode getScanMode() {
    return scanMode;
  }

  public void setScanMode(ScanMode scanMode) {
    this.scanMode = scanMode;
  }


  public Fmtp tcs(Tcs tcs) {
    this.tcs = tcs;
    return this;
  }

  /**
   * Get tcs
   * @return tcs
   */
  @javax.annotation.Nullable
  public Tcs getTcs() {
    return tcs;
  }

  public void setTcs(Tcs tcs) {
    this.tcs = tcs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fmtp fmtp = (Fmtp) o;
    return Objects.equals(this.channelOrder, fmtp.channelOrder) &&
        Objects.equals(this.colorimetry, fmtp.colorimetry) &&
        Objects.equals(this.exactFramerate, fmtp.exactFramerate) &&
        Objects.equals(this.par, fmtp.par) &&
        Objects.equals(this.range, fmtp.range) &&
        Objects.equals(this.scanMode, fmtp.scanMode) &&
        Objects.equals(this.tcs, fmtp.tcs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelOrder, colorimetry, exactFramerate, par, range, scanMode, tcs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fmtp {\n");
    sb.append("    channelOrder: ").append(toIndentedString(channelOrder)).append("\n");
    sb.append("    colorimetry: ").append(toIndentedString(colorimetry)).append("\n");
    sb.append("    exactFramerate: ").append(toIndentedString(exactFramerate)).append("\n");
    sb.append("    par: ").append(toIndentedString(par)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    scanMode: ").append(toIndentedString(scanMode)).append("\n");
    sb.append("    tcs: ").append(toIndentedString(tcs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelOrder");
    openapiFields.add("Colorimetry");
    openapiFields.add("ExactFramerate");
    openapiFields.add("Par");
    openapiFields.add("Range");
    openapiFields.add("ScanMode");
    openapiFields.add("Tcs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Fmtp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Fmtp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Fmtp is not found in the empty JSON string", Fmtp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Fmtp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Fmtp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChannelOrder`
      if (jsonObj.get("ChannelOrder") != null && !jsonObj.get("ChannelOrder").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChannelOrder"));
      }
      // validate the optional field `Colorimetry`
      if (jsonObj.get("Colorimetry") != null && !jsonObj.get("Colorimetry").isJsonNull()) {
        Colorimetry.validateJsonElement(jsonObj.get("Colorimetry"));
      }
      // validate the optional field `ExactFramerate`
      if (jsonObj.get("ExactFramerate") != null && !jsonObj.get("ExactFramerate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExactFramerate"));
      }
      // validate the optional field `Par`
      if (jsonObj.get("Par") != null && !jsonObj.get("Par").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Par"));
      }
      // validate the optional field `Range`
      if (jsonObj.get("Range") != null && !jsonObj.get("Range").isJsonNull()) {
        Range.validateJsonElement(jsonObj.get("Range"));
      }
      // validate the optional field `ScanMode`
      if (jsonObj.get("ScanMode") != null && !jsonObj.get("ScanMode").isJsonNull()) {
        ScanMode.validateJsonElement(jsonObj.get("ScanMode"));
      }
      // validate the optional field `Tcs`
      if (jsonObj.get("Tcs") != null && !jsonObj.get("Tcs").isJsonNull()) {
        Tcs.validateJsonElement(jsonObj.get("Tcs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Fmtp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Fmtp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Fmtp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Fmtp.class));

       return (TypeAdapter<T>) new TypeAdapter<Fmtp>() {
           @Override
           public void write(JsonWriter out, Fmtp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Fmtp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Fmtp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Fmtp
   * @throws IOException if the JSON string is invalid with respect to Fmtp
   */
  public static Fmtp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Fmtp.class);
  }

  /**
   * Convert an instance of Fmtp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

