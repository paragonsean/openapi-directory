/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BridgePlacement;
import org.openapitools.client.model.ConnectionStatus;
import org.openapitools.client.model.InstanceState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The settings for an instance in a gateway.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GatewayInstance {
  public static final String SERIALIZED_NAME_BRIDGE_PLACEMENT = "BridgePlacement";
  @SerializedName(SERIALIZED_NAME_BRIDGE_PLACEMENT)
  private BridgePlacement bridgePlacement;

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "ConnectionStatus";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private ConnectionStatus connectionStatus;

  public static final String SERIALIZED_NAME_GATEWAY_ARN = "GatewayArn";
  @SerializedName(SERIALIZED_NAME_GATEWAY_ARN)
  private String gatewayArn;

  public static final String SERIALIZED_NAME_GATEWAY_INSTANCE_ARN = "GatewayInstanceArn";
  @SerializedName(SERIALIZED_NAME_GATEWAY_INSTANCE_ARN)
  private String gatewayInstanceArn;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INSTANCE_MESSAGES = "InstanceMessages";
  @SerializedName(SERIALIZED_NAME_INSTANCE_MESSAGES)
  private List instanceMessages;

  public static final String SERIALIZED_NAME_INSTANCE_STATE = "InstanceState";
  @SerializedName(SERIALIZED_NAME_INSTANCE_STATE)
  private InstanceState instanceState;

  public static final String SERIALIZED_NAME_RUNNING_BRIDGE_COUNT = "RunningBridgeCount";
  @SerializedName(SERIALIZED_NAME_RUNNING_BRIDGE_COUNT)
  private Integer runningBridgeCount;

  public GatewayInstance() {
  }

  public GatewayInstance bridgePlacement(BridgePlacement bridgePlacement) {
    this.bridgePlacement = bridgePlacement;
    return this;
  }

  /**
   * Get bridgePlacement
   * @return bridgePlacement
   */
  @javax.annotation.Nonnull
  public BridgePlacement getBridgePlacement() {
    return bridgePlacement;
  }

  public void setBridgePlacement(BridgePlacement bridgePlacement) {
    this.bridgePlacement = bridgePlacement;
  }


  public GatewayInstance connectionStatus(ConnectionStatus connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

  /**
   * Get connectionStatus
   * @return connectionStatus
   */
  @javax.annotation.Nonnull
  public ConnectionStatus getConnectionStatus() {
    return connectionStatus;
  }

  public void setConnectionStatus(ConnectionStatus connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  public GatewayInstance gatewayArn(String gatewayArn) {
    this.gatewayArn = gatewayArn;
    return this;
  }

  /**
   * Get gatewayArn
   * @return gatewayArn
   */
  @javax.annotation.Nonnull
  public String getGatewayArn() {
    return gatewayArn;
  }

  public void setGatewayArn(String gatewayArn) {
    this.gatewayArn = gatewayArn;
  }


  public GatewayInstance gatewayInstanceArn(String gatewayInstanceArn) {
    this.gatewayInstanceArn = gatewayInstanceArn;
    return this;
  }

  /**
   * Get gatewayInstanceArn
   * @return gatewayInstanceArn
   */
  @javax.annotation.Nonnull
  public String getGatewayInstanceArn() {
    return gatewayInstanceArn;
  }

  public void setGatewayInstanceArn(String gatewayInstanceArn) {
    this.gatewayInstanceArn = gatewayInstanceArn;
  }


  public GatewayInstance instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nonnull
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public GatewayInstance instanceMessages(List instanceMessages) {
    this.instanceMessages = instanceMessages;
    return this;
  }

  /**
   * Get instanceMessages
   * @return instanceMessages
   */
  @javax.annotation.Nullable
  public List getInstanceMessages() {
    return instanceMessages;
  }

  public void setInstanceMessages(List instanceMessages) {
    this.instanceMessages = instanceMessages;
  }


  public GatewayInstance instanceState(InstanceState instanceState) {
    this.instanceState = instanceState;
    return this;
  }

  /**
   * Get instanceState
   * @return instanceState
   */
  @javax.annotation.Nonnull
  public InstanceState getInstanceState() {
    return instanceState;
  }

  public void setInstanceState(InstanceState instanceState) {
    this.instanceState = instanceState;
  }


  public GatewayInstance runningBridgeCount(Integer runningBridgeCount) {
    this.runningBridgeCount = runningBridgeCount;
    return this;
  }

  /**
   * Get runningBridgeCount
   * @return runningBridgeCount
   */
  @javax.annotation.Nonnull
  public Integer getRunningBridgeCount() {
    return runningBridgeCount;
  }

  public void setRunningBridgeCount(Integer runningBridgeCount) {
    this.runningBridgeCount = runningBridgeCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayInstance gatewayInstance = (GatewayInstance) o;
    return Objects.equals(this.bridgePlacement, gatewayInstance.bridgePlacement) &&
        Objects.equals(this.connectionStatus, gatewayInstance.connectionStatus) &&
        Objects.equals(this.gatewayArn, gatewayInstance.gatewayArn) &&
        Objects.equals(this.gatewayInstanceArn, gatewayInstance.gatewayInstanceArn) &&
        Objects.equals(this.instanceId, gatewayInstance.instanceId) &&
        Objects.equals(this.instanceMessages, gatewayInstance.instanceMessages) &&
        Objects.equals(this.instanceState, gatewayInstance.instanceState) &&
        Objects.equals(this.runningBridgeCount, gatewayInstance.runningBridgeCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bridgePlacement, connectionStatus, gatewayArn, gatewayInstanceArn, instanceId, instanceMessages, instanceState, runningBridgeCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayInstance {\n");
    sb.append("    bridgePlacement: ").append(toIndentedString(bridgePlacement)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    gatewayArn: ").append(toIndentedString(gatewayArn)).append("\n");
    sb.append("    gatewayInstanceArn: ").append(toIndentedString(gatewayInstanceArn)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceMessages: ").append(toIndentedString(instanceMessages)).append("\n");
    sb.append("    instanceState: ").append(toIndentedString(instanceState)).append("\n");
    sb.append("    runningBridgeCount: ").append(toIndentedString(runningBridgeCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BridgePlacement");
    openapiFields.add("ConnectionStatus");
    openapiFields.add("GatewayArn");
    openapiFields.add("GatewayInstanceArn");
    openapiFields.add("InstanceId");
    openapiFields.add("InstanceMessages");
    openapiFields.add("InstanceState");
    openapiFields.add("RunningBridgeCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BridgePlacement");
    openapiRequiredFields.add("ConnectionStatus");
    openapiRequiredFields.add("GatewayArn");
    openapiRequiredFields.add("GatewayInstanceArn");
    openapiRequiredFields.add("InstanceId");
    openapiRequiredFields.add("InstanceState");
    openapiRequiredFields.add("RunningBridgeCount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GatewayInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GatewayInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayInstance is not found in the empty JSON string", GatewayInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GatewayInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GatewayInstance.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `BridgePlacement`
      BridgePlacement.validateJsonElement(jsonObj.get("BridgePlacement"));
      // validate the required field `ConnectionStatus`
      ConnectionStatus.validateJsonElement(jsonObj.get("ConnectionStatus"));
      // validate the required field `GatewayArn`
      String.validateJsonElement(jsonObj.get("GatewayArn"));
      // validate the required field `GatewayInstanceArn`
      String.validateJsonElement(jsonObj.get("GatewayInstanceArn"));
      // validate the required field `InstanceId`
      String.validateJsonElement(jsonObj.get("InstanceId"));
      // validate the optional field `InstanceMessages`
      if (jsonObj.get("InstanceMessages") != null && !jsonObj.get("InstanceMessages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InstanceMessages"));
      }
      // validate the required field `InstanceState`
      InstanceState.validateJsonElement(jsonObj.get("InstanceState"));
      // validate the required field `RunningBridgeCount`
      Integer.validateJsonElement(jsonObj.get("RunningBridgeCount"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayInstance>() {
           @Override
           public void write(JsonWriter out, GatewayInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GatewayInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GatewayInstance
   * @throws IOException if the JSON string is invalid with respect to GatewayInstance
   */
  public static GatewayInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayInstance.class);
  }

  /**
   * Convert an instance of GatewayInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

