/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddOutputRequestVpcInterfaceAttachment;
import org.openapitools.client.model.OutputEncryption;
import org.openapitools.client.model.OutputTransport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The settings for an output.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Output {
  public static final String SERIALIZED_NAME_DATA_TRANSFER_SUBSCRIBER_FEE_PERCENT = "DataTransferSubscriberFeePercent";
  @SerializedName(SERIALIZED_NAME_DATA_TRANSFER_SUBSCRIBER_FEE_PERCENT)
  private Integer dataTransferSubscriberFeePercent;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESTINATION = "Destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_ENCRYPTION = "Encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private OutputEncryption encryption;

  public static final String SERIALIZED_NAME_ENTITLEMENT_ARN = "EntitlementArn";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_ARN)
  private String entitlementArn;

  public static final String SERIALIZED_NAME_LISTENER_ADDRESS = "ListenerAddress";
  @SerializedName(SERIALIZED_NAME_LISTENER_ADDRESS)
  private String listenerAddress;

  public static final String SERIALIZED_NAME_MEDIA_LIVE_INPUT_ARN = "MediaLiveInputArn";
  @SerializedName(SERIALIZED_NAME_MEDIA_LIVE_INPUT_ARN)
  private String mediaLiveInputArn;

  public static final String SERIALIZED_NAME_MEDIA_STREAM_OUTPUT_CONFIGURATIONS = "MediaStreamOutputConfigurations";
  @SerializedName(SERIALIZED_NAME_MEDIA_STREAM_OUTPUT_CONFIGURATIONS)
  private List mediaStreamOutputConfigurations;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUT_ARN = "OutputArn";
  @SerializedName(SERIALIZED_NAME_OUTPUT_ARN)
  private String outputArn;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_TRANSPORT = "Transport";
  @SerializedName(SERIALIZED_NAME_TRANSPORT)
  private OutputTransport transport;

  public static final String SERIALIZED_NAME_VPC_INTERFACE_ATTACHMENT = "VpcInterfaceAttachment";
  @SerializedName(SERIALIZED_NAME_VPC_INTERFACE_ATTACHMENT)
  private AddOutputRequestVpcInterfaceAttachment vpcInterfaceAttachment;

  public static final String SERIALIZED_NAME_BRIDGE_ARN = "BridgeArn";
  @SerializedName(SERIALIZED_NAME_BRIDGE_ARN)
  private String bridgeArn;

  public static final String SERIALIZED_NAME_BRIDGE_PORTS = "BridgePorts";
  @SerializedName(SERIALIZED_NAME_BRIDGE_PORTS)
  private List bridgePorts;

  public Output() {
  }

  public Output dataTransferSubscriberFeePercent(Integer dataTransferSubscriberFeePercent) {
    this.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent;
    return this;
  }

  /**
   * Get dataTransferSubscriberFeePercent
   * @return dataTransferSubscriberFeePercent
   */
  @javax.annotation.Nullable
  public Integer getDataTransferSubscriberFeePercent() {
    return dataTransferSubscriberFeePercent;
  }

  public void setDataTransferSubscriberFeePercent(Integer dataTransferSubscriberFeePercent) {
    this.dataTransferSubscriberFeePercent = dataTransferSubscriberFeePercent;
  }


  public Output description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Output destination(String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public String getDestination() {
    return destination;
  }

  public void setDestination(String destination) {
    this.destination = destination;
  }


  public Output encryption(OutputEncryption encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * Get encryption
   * @return encryption
   */
  @javax.annotation.Nullable
  public OutputEncryption getEncryption() {
    return encryption;
  }

  public void setEncryption(OutputEncryption encryption) {
    this.encryption = encryption;
  }


  public Output entitlementArn(String entitlementArn) {
    this.entitlementArn = entitlementArn;
    return this;
  }

  /**
   * Get entitlementArn
   * @return entitlementArn
   */
  @javax.annotation.Nullable
  public String getEntitlementArn() {
    return entitlementArn;
  }

  public void setEntitlementArn(String entitlementArn) {
    this.entitlementArn = entitlementArn;
  }


  public Output listenerAddress(String listenerAddress) {
    this.listenerAddress = listenerAddress;
    return this;
  }

  /**
   * Get listenerAddress
   * @return listenerAddress
   */
  @javax.annotation.Nullable
  public String getListenerAddress() {
    return listenerAddress;
  }

  public void setListenerAddress(String listenerAddress) {
    this.listenerAddress = listenerAddress;
  }


  public Output mediaLiveInputArn(String mediaLiveInputArn) {
    this.mediaLiveInputArn = mediaLiveInputArn;
    return this;
  }

  /**
   * Get mediaLiveInputArn
   * @return mediaLiveInputArn
   */
  @javax.annotation.Nullable
  public String getMediaLiveInputArn() {
    return mediaLiveInputArn;
  }

  public void setMediaLiveInputArn(String mediaLiveInputArn) {
    this.mediaLiveInputArn = mediaLiveInputArn;
  }


  public Output mediaStreamOutputConfigurations(List mediaStreamOutputConfigurations) {
    this.mediaStreamOutputConfigurations = mediaStreamOutputConfigurations;
    return this;
  }

  /**
   * Get mediaStreamOutputConfigurations
   * @return mediaStreamOutputConfigurations
   */
  @javax.annotation.Nullable
  public List getMediaStreamOutputConfigurations() {
    return mediaStreamOutputConfigurations;
  }

  public void setMediaStreamOutputConfigurations(List mediaStreamOutputConfigurations) {
    this.mediaStreamOutputConfigurations = mediaStreamOutputConfigurations;
  }


  public Output name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Output outputArn(String outputArn) {
    this.outputArn = outputArn;
    return this;
  }

  /**
   * Get outputArn
   * @return outputArn
   */
  @javax.annotation.Nonnull
  public String getOutputArn() {
    return outputArn;
  }

  public void setOutputArn(String outputArn) {
    this.outputArn = outputArn;
  }


  public Output port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public Output transport(OutputTransport transport) {
    this.transport = transport;
    return this;
  }

  /**
   * Get transport
   * @return transport
   */
  @javax.annotation.Nullable
  public OutputTransport getTransport() {
    return transport;
  }

  public void setTransport(OutputTransport transport) {
    this.transport = transport;
  }


  public Output vpcInterfaceAttachment(AddOutputRequestVpcInterfaceAttachment vpcInterfaceAttachment) {
    this.vpcInterfaceAttachment = vpcInterfaceAttachment;
    return this;
  }

  /**
   * Get vpcInterfaceAttachment
   * @return vpcInterfaceAttachment
   */
  @javax.annotation.Nullable
  public AddOutputRequestVpcInterfaceAttachment getVpcInterfaceAttachment() {
    return vpcInterfaceAttachment;
  }

  public void setVpcInterfaceAttachment(AddOutputRequestVpcInterfaceAttachment vpcInterfaceAttachment) {
    this.vpcInterfaceAttachment = vpcInterfaceAttachment;
  }


  public Output bridgeArn(String bridgeArn) {
    this.bridgeArn = bridgeArn;
    return this;
  }

  /**
   * Get bridgeArn
   * @return bridgeArn
   */
  @javax.annotation.Nullable
  public String getBridgeArn() {
    return bridgeArn;
  }

  public void setBridgeArn(String bridgeArn) {
    this.bridgeArn = bridgeArn;
  }


  public Output bridgePorts(List bridgePorts) {
    this.bridgePorts = bridgePorts;
    return this;
  }

  /**
   * Get bridgePorts
   * @return bridgePorts
   */
  @javax.annotation.Nullable
  public List getBridgePorts() {
    return bridgePorts;
  }

  public void setBridgePorts(List bridgePorts) {
    this.bridgePorts = bridgePorts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Output output = (Output) o;
    return Objects.equals(this.dataTransferSubscriberFeePercent, output.dataTransferSubscriberFeePercent) &&
        Objects.equals(this.description, output.description) &&
        Objects.equals(this.destination, output.destination) &&
        Objects.equals(this.encryption, output.encryption) &&
        Objects.equals(this.entitlementArn, output.entitlementArn) &&
        Objects.equals(this.listenerAddress, output.listenerAddress) &&
        Objects.equals(this.mediaLiveInputArn, output.mediaLiveInputArn) &&
        Objects.equals(this.mediaStreamOutputConfigurations, output.mediaStreamOutputConfigurations) &&
        Objects.equals(this.name, output.name) &&
        Objects.equals(this.outputArn, output.outputArn) &&
        Objects.equals(this.port, output.port) &&
        Objects.equals(this.transport, output.transport) &&
        Objects.equals(this.vpcInterfaceAttachment, output.vpcInterfaceAttachment) &&
        Objects.equals(this.bridgeArn, output.bridgeArn) &&
        Objects.equals(this.bridgePorts, output.bridgePorts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataTransferSubscriberFeePercent, description, destination, encryption, entitlementArn, listenerAddress, mediaLiveInputArn, mediaStreamOutputConfigurations, name, outputArn, port, transport, vpcInterfaceAttachment, bridgeArn, bridgePorts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Output {\n");
    sb.append("    dataTransferSubscriberFeePercent: ").append(toIndentedString(dataTransferSubscriberFeePercent)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    entitlementArn: ").append(toIndentedString(entitlementArn)).append("\n");
    sb.append("    listenerAddress: ").append(toIndentedString(listenerAddress)).append("\n");
    sb.append("    mediaLiveInputArn: ").append(toIndentedString(mediaLiveInputArn)).append("\n");
    sb.append("    mediaStreamOutputConfigurations: ").append(toIndentedString(mediaStreamOutputConfigurations)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputArn: ").append(toIndentedString(outputArn)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    transport: ").append(toIndentedString(transport)).append("\n");
    sb.append("    vpcInterfaceAttachment: ").append(toIndentedString(vpcInterfaceAttachment)).append("\n");
    sb.append("    bridgeArn: ").append(toIndentedString(bridgeArn)).append("\n");
    sb.append("    bridgePorts: ").append(toIndentedString(bridgePorts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DataTransferSubscriberFeePercent");
    openapiFields.add("Description");
    openapiFields.add("Destination");
    openapiFields.add("Encryption");
    openapiFields.add("EntitlementArn");
    openapiFields.add("ListenerAddress");
    openapiFields.add("MediaLiveInputArn");
    openapiFields.add("MediaStreamOutputConfigurations");
    openapiFields.add("Name");
    openapiFields.add("OutputArn");
    openapiFields.add("Port");
    openapiFields.add("Transport");
    openapiFields.add("VpcInterfaceAttachment");
    openapiFields.add("BridgeArn");
    openapiFields.add("BridgePorts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("OutputArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Output
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Output.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Output is not found in the empty JSON string", Output.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Output.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Output` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Output.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DataTransferSubscriberFeePercent`
      if (jsonObj.get("DataTransferSubscriberFeePercent") != null && !jsonObj.get("DataTransferSubscriberFeePercent").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DataTransferSubscriberFeePercent"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Destination`
      if (jsonObj.get("Destination") != null && !jsonObj.get("Destination").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Destination"));
      }
      // validate the optional field `Encryption`
      if (jsonObj.get("Encryption") != null && !jsonObj.get("Encryption").isJsonNull()) {
        OutputEncryption.validateJsonElement(jsonObj.get("Encryption"));
      }
      // validate the optional field `EntitlementArn`
      if (jsonObj.get("EntitlementArn") != null && !jsonObj.get("EntitlementArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EntitlementArn"));
      }
      // validate the optional field `ListenerAddress`
      if (jsonObj.get("ListenerAddress") != null && !jsonObj.get("ListenerAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ListenerAddress"));
      }
      // validate the optional field `MediaLiveInputArn`
      if (jsonObj.get("MediaLiveInputArn") != null && !jsonObj.get("MediaLiveInputArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MediaLiveInputArn"));
      }
      // validate the optional field `MediaStreamOutputConfigurations`
      if (jsonObj.get("MediaStreamOutputConfigurations") != null && !jsonObj.get("MediaStreamOutputConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MediaStreamOutputConfigurations"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `OutputArn`
      String.validateJsonElement(jsonObj.get("OutputArn"));
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `Transport`
      if (jsonObj.get("Transport") != null && !jsonObj.get("Transport").isJsonNull()) {
        OutputTransport.validateJsonElement(jsonObj.get("Transport"));
      }
      // validate the optional field `VpcInterfaceAttachment`
      if (jsonObj.get("VpcInterfaceAttachment") != null && !jsonObj.get("VpcInterfaceAttachment").isJsonNull()) {
        AddOutputRequestVpcInterfaceAttachment.validateJsonElement(jsonObj.get("VpcInterfaceAttachment"));
      }
      // validate the optional field `BridgeArn`
      if (jsonObj.get("BridgeArn") != null && !jsonObj.get("BridgeArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BridgeArn"));
      }
      // validate the optional field `BridgePorts`
      if (jsonObj.get("BridgePorts") != null && !jsonObj.get("BridgePorts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("BridgePorts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Output.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Output' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Output> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Output.class));

       return (TypeAdapter<T>) new TypeAdapter<Output>() {
           @Override
           public void write(JsonWriter out, Output value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Output read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Output given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Output
   * @throws IOException if the JSON string is invalid with respect to Output
   */
  public static Output fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Output.class);
  }

  /**
   * Convert an instance of Output to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

