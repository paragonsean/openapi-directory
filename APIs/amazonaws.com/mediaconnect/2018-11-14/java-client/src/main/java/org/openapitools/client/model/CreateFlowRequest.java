/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddMediaStreamRequest;
import org.openapitools.client.model.AddOutputRequest;
import org.openapitools.client.model.CreateBridgeRequestSourceFailoverConfig;
import org.openapitools.client.model.CreateFlowRequestMaintenance;
import org.openapitools.client.model.CreateFlowRequestSource;
import org.openapitools.client.model.GrantEntitlementRequest;
import org.openapitools.client.model.SetSourceRequest;
import org.openapitools.client.model.VpcInterfaceRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateFlowRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:07.515051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateFlowRequest {
  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "availabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_ENTITLEMENTS = "entitlements";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENTS)
  private List<GrantEntitlementRequest> entitlements = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_STREAMS = "mediaStreams";
  @SerializedName(SERIALIZED_NAME_MEDIA_STREAMS)
  private List<AddMediaStreamRequest> mediaStreams = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List<AddOutputRequest> outputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private CreateFlowRequestSource source;

  public static final String SERIALIZED_NAME_SOURCE_FAILOVER_CONFIG = "sourceFailoverConfig";
  @SerializedName(SERIALIZED_NAME_SOURCE_FAILOVER_CONFIG)
  private CreateBridgeRequestSourceFailoverConfig sourceFailoverConfig;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<SetSourceRequest> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPC_INTERFACES = "vpcInterfaces";
  @SerializedName(SERIALIZED_NAME_VPC_INTERFACES)
  private List<VpcInterfaceRequest> vpcInterfaces = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAINTENANCE = "maintenance";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE)
  private CreateFlowRequestMaintenance maintenance;

  public CreateFlowRequest() {
  }

  public CreateFlowRequest availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.
   * @return availabilityZone
   */
  @javax.annotation.Nullable
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public CreateFlowRequest entitlements(List<GrantEntitlementRequest> entitlements) {
    this.entitlements = entitlements;
    return this;
  }

  public CreateFlowRequest addEntitlementsItem(GrantEntitlementRequest entitlementsItem) {
    if (this.entitlements == null) {
      this.entitlements = new ArrayList<>();
    }
    this.entitlements.add(entitlementsItem);
    return this;
  }

  /**
   * The entitlements that you want to grant on a flow.
   * @return entitlements
   */
  @javax.annotation.Nullable
  public List<GrantEntitlementRequest> getEntitlements() {
    return entitlements;
  }

  public void setEntitlements(List<GrantEntitlementRequest> entitlements) {
    this.entitlements = entitlements;
  }


  public CreateFlowRequest mediaStreams(List<AddMediaStreamRequest> mediaStreams) {
    this.mediaStreams = mediaStreams;
    return this;
  }

  public CreateFlowRequest addMediaStreamsItem(AddMediaStreamRequest mediaStreamsItem) {
    if (this.mediaStreams == null) {
      this.mediaStreams = new ArrayList<>();
    }
    this.mediaStreams.add(mediaStreamsItem);
    return this;
  }

  /**
   * The media streams that you want to add to the flow. You can associate these media streams with sources and outputs on the flow.
   * @return mediaStreams
   */
  @javax.annotation.Nullable
  public List<AddMediaStreamRequest> getMediaStreams() {
    return mediaStreams;
  }

  public void setMediaStreams(List<AddMediaStreamRequest> mediaStreams) {
    this.mediaStreams = mediaStreams;
  }


  public CreateFlowRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the flow.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateFlowRequest outputs(List<AddOutputRequest> outputs) {
    this.outputs = outputs;
    return this;
  }

  public CreateFlowRequest addOutputsItem(AddOutputRequest outputsItem) {
    if (this.outputs == null) {
      this.outputs = new ArrayList<>();
    }
    this.outputs.add(outputsItem);
    return this;
  }

  /**
   * The outputs that you want to add to this flow.
   * @return outputs
   */
  @javax.annotation.Nullable
  public List<AddOutputRequest> getOutputs() {
    return outputs;
  }

  public void setOutputs(List<AddOutputRequest> outputs) {
    this.outputs = outputs;
  }


  public CreateFlowRequest source(CreateFlowRequestSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public CreateFlowRequestSource getSource() {
    return source;
  }

  public void setSource(CreateFlowRequestSource source) {
    this.source = source;
  }


  public CreateFlowRequest sourceFailoverConfig(CreateBridgeRequestSourceFailoverConfig sourceFailoverConfig) {
    this.sourceFailoverConfig = sourceFailoverConfig;
    return this;
  }

  /**
   * Get sourceFailoverConfig
   * @return sourceFailoverConfig
   */
  @javax.annotation.Nullable
  public CreateBridgeRequestSourceFailoverConfig getSourceFailoverConfig() {
    return sourceFailoverConfig;
  }

  public void setSourceFailoverConfig(CreateBridgeRequestSourceFailoverConfig sourceFailoverConfig) {
    this.sourceFailoverConfig = sourceFailoverConfig;
  }


  public CreateFlowRequest sources(List<SetSourceRequest> sources) {
    this.sources = sources;
    return this;
  }

  public CreateFlowRequest addSourcesItem(SetSourceRequest sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * 
   * @return sources
   */
  @javax.annotation.Nullable
  public List<SetSourceRequest> getSources() {
    return sources;
  }

  public void setSources(List<SetSourceRequest> sources) {
    this.sources = sources;
  }


  public CreateFlowRequest vpcInterfaces(List<VpcInterfaceRequest> vpcInterfaces) {
    this.vpcInterfaces = vpcInterfaces;
    return this;
  }

  public CreateFlowRequest addVpcInterfacesItem(VpcInterfaceRequest vpcInterfacesItem) {
    if (this.vpcInterfaces == null) {
      this.vpcInterfaces = new ArrayList<>();
    }
    this.vpcInterfaces.add(vpcInterfacesItem);
    return this;
  }

  /**
   * The VPC interfaces you want on the flow.
   * @return vpcInterfaces
   */
  @javax.annotation.Nullable
  public List<VpcInterfaceRequest> getVpcInterfaces() {
    return vpcInterfaces;
  }

  public void setVpcInterfaces(List<VpcInterfaceRequest> vpcInterfaces) {
    this.vpcInterfaces = vpcInterfaces;
  }


  public CreateFlowRequest maintenance(CreateFlowRequestMaintenance maintenance) {
    this.maintenance = maintenance;
    return this;
  }

  /**
   * Get maintenance
   * @return maintenance
   */
  @javax.annotation.Nullable
  public CreateFlowRequestMaintenance getMaintenance() {
    return maintenance;
  }

  public void setMaintenance(CreateFlowRequestMaintenance maintenance) {
    this.maintenance = maintenance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFlowRequest createFlowRequest = (CreateFlowRequest) o;
    return Objects.equals(this.availabilityZone, createFlowRequest.availabilityZone) &&
        Objects.equals(this.entitlements, createFlowRequest.entitlements) &&
        Objects.equals(this.mediaStreams, createFlowRequest.mediaStreams) &&
        Objects.equals(this.name, createFlowRequest.name) &&
        Objects.equals(this.outputs, createFlowRequest.outputs) &&
        Objects.equals(this.source, createFlowRequest.source) &&
        Objects.equals(this.sourceFailoverConfig, createFlowRequest.sourceFailoverConfig) &&
        Objects.equals(this.sources, createFlowRequest.sources) &&
        Objects.equals(this.vpcInterfaces, createFlowRequest.vpcInterfaces) &&
        Objects.equals(this.maintenance, createFlowRequest.maintenance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityZone, entitlements, mediaStreams, name, outputs, source, sourceFailoverConfig, sources, vpcInterfaces, maintenance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFlowRequest {\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    entitlements: ").append(toIndentedString(entitlements)).append("\n");
    sb.append("    mediaStreams: ").append(toIndentedString(mediaStreams)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceFailoverConfig: ").append(toIndentedString(sourceFailoverConfig)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    vpcInterfaces: ").append(toIndentedString(vpcInterfaces)).append("\n");
    sb.append("    maintenance: ").append(toIndentedString(maintenance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availabilityZone");
    openapiFields.add("entitlements");
    openapiFields.add("mediaStreams");
    openapiFields.add("name");
    openapiFields.add("outputs");
    openapiFields.add("source");
    openapiFields.add("sourceFailoverConfig");
    openapiFields.add("sources");
    openapiFields.add("vpcInterfaces");
    openapiFields.add("maintenance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFlowRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFlowRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFlowRequest is not found in the empty JSON string", CreateFlowRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFlowRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFlowRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateFlowRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("availabilityZone") != null && !jsonObj.get("availabilityZone").isJsonNull()) && !jsonObj.get("availabilityZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilityZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availabilityZone").toString()));
      }
      if (jsonObj.get("entitlements") != null && !jsonObj.get("entitlements").isJsonNull()) {
        JsonArray jsonArrayentitlements = jsonObj.getAsJsonArray("entitlements");
        if (jsonArrayentitlements != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entitlements").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entitlements` to be an array in the JSON string but got `%s`", jsonObj.get("entitlements").toString()));
          }

          // validate the optional field `entitlements` (array)
          for (int i = 0; i < jsonArrayentitlements.size(); i++) {
            GrantEntitlementRequest.validateJsonElement(jsonArrayentitlements.get(i));
          };
        }
      }
      if (jsonObj.get("mediaStreams") != null && !jsonObj.get("mediaStreams").isJsonNull()) {
        JsonArray jsonArraymediaStreams = jsonObj.getAsJsonArray("mediaStreams");
        if (jsonArraymediaStreams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mediaStreams").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mediaStreams` to be an array in the JSON string but got `%s`", jsonObj.get("mediaStreams").toString()));
          }

          // validate the optional field `mediaStreams` (array)
          for (int i = 0; i < jsonArraymediaStreams.size(); i++) {
            AddMediaStreamRequest.validateJsonElement(jsonArraymediaStreams.get(i));
          };
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("outputs") != null && !jsonObj.get("outputs").isJsonNull()) {
        JsonArray jsonArrayoutputs = jsonObj.getAsJsonArray("outputs");
        if (jsonArrayoutputs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputs` to be an array in the JSON string but got `%s`", jsonObj.get("outputs").toString()));
          }

          // validate the optional field `outputs` (array)
          for (int i = 0; i < jsonArrayoutputs.size(); i++) {
            AddOutputRequest.validateJsonElement(jsonArrayoutputs.get(i));
          };
        }
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        CreateFlowRequestSource.validateJsonElement(jsonObj.get("source"));
      }
      // validate the optional field `sourceFailoverConfig`
      if (jsonObj.get("sourceFailoverConfig") != null && !jsonObj.get("sourceFailoverConfig").isJsonNull()) {
        CreateBridgeRequestSourceFailoverConfig.validateJsonElement(jsonObj.get("sourceFailoverConfig"));
      }
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        JsonArray jsonArraysources = jsonObj.getAsJsonArray("sources");
        if (jsonArraysources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
          }

          // validate the optional field `sources` (array)
          for (int i = 0; i < jsonArraysources.size(); i++) {
            SetSourceRequest.validateJsonElement(jsonArraysources.get(i));
          };
        }
      }
      if (jsonObj.get("vpcInterfaces") != null && !jsonObj.get("vpcInterfaces").isJsonNull()) {
        JsonArray jsonArrayvpcInterfaces = jsonObj.getAsJsonArray("vpcInterfaces");
        if (jsonArrayvpcInterfaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vpcInterfaces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vpcInterfaces` to be an array in the JSON string but got `%s`", jsonObj.get("vpcInterfaces").toString()));
          }

          // validate the optional field `vpcInterfaces` (array)
          for (int i = 0; i < jsonArrayvpcInterfaces.size(); i++) {
            VpcInterfaceRequest.validateJsonElement(jsonArrayvpcInterfaces.get(i));
          };
        }
      }
      // validate the optional field `maintenance`
      if (jsonObj.get("maintenance") != null && !jsonObj.get("maintenance").isJsonNull()) {
        CreateFlowRequestMaintenance.validateJsonElement(jsonObj.get("maintenance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFlowRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFlowRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFlowRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFlowRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFlowRequest>() {
           @Override
           public void write(JsonWriter out, CreateFlowRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFlowRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFlowRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFlowRequest
   * @throws IOException if the JSON string is invalid with respect to CreateFlowRequest
   */
  public static CreateFlowRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFlowRequest.class);
  }

  /**
   * Convert an instance of CreateFlowRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

