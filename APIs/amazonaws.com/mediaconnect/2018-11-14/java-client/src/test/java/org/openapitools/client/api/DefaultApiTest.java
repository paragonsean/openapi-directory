/*
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddBridgeOutputsRequest;
import org.openapitools.client.model.AddBridgeOutputsResponse;
import org.openapitools.client.model.AddBridgeSourcesRequest;
import org.openapitools.client.model.AddBridgeSourcesResponse;
import org.openapitools.client.model.AddFlowMediaStreamsRequest;
import org.openapitools.client.model.AddFlowMediaStreamsResponse;
import org.openapitools.client.model.AddFlowOutputsRequest;
import org.openapitools.client.model.AddFlowOutputsResponse;
import org.openapitools.client.model.AddFlowSourcesRequest;
import org.openapitools.client.model.AddFlowSourcesResponse;
import org.openapitools.client.model.AddFlowVpcInterfacesRequest;
import org.openapitools.client.model.AddFlowVpcInterfacesResponse;
import org.openapitools.client.model.CreateBridgeRequest;
import org.openapitools.client.model.CreateBridgeResponse;
import org.openapitools.client.model.CreateFlowRequest;
import org.openapitools.client.model.CreateFlowResponse;
import org.openapitools.client.model.CreateGatewayRequest;
import org.openapitools.client.model.CreateGatewayResponse;
import org.openapitools.client.model.DeleteBridgeResponse;
import org.openapitools.client.model.DeleteFlowResponse;
import org.openapitools.client.model.DeleteGatewayResponse;
import org.openapitools.client.model.DeregisterGatewayInstanceResponse;
import org.openapitools.client.model.DescribeBridgeResponse;
import org.openapitools.client.model.DescribeFlowResponse;
import org.openapitools.client.model.DescribeGatewayInstanceResponse;
import org.openapitools.client.model.DescribeGatewayResponse;
import org.openapitools.client.model.DescribeOfferingResponse;
import org.openapitools.client.model.DescribeReservationResponse;
import org.openapitools.client.model.GrantFlowEntitlementsRequest;
import org.openapitools.client.model.GrantFlowEntitlementsResponse;
import org.openapitools.client.model.ListBridgesResponse;
import org.openapitools.client.model.ListEntitlementsResponse;
import org.openapitools.client.model.ListFlowsResponse;
import org.openapitools.client.model.ListGatewayInstancesResponse;
import org.openapitools.client.model.ListGatewaysResponse;
import org.openapitools.client.model.ListOfferingsResponse;
import org.openapitools.client.model.ListReservationsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PurchaseOfferingRequest;
import org.openapitools.client.model.PurchaseOfferingResponse;
import org.openapitools.client.model.RemoveBridgeOutputResponse;
import org.openapitools.client.model.RemoveBridgeSourceResponse;
import org.openapitools.client.model.RemoveFlowMediaStreamResponse;
import org.openapitools.client.model.RemoveFlowOutputResponse;
import org.openapitools.client.model.RemoveFlowSourceResponse;
import org.openapitools.client.model.RemoveFlowVpcInterfaceResponse;
import org.openapitools.client.model.RevokeFlowEntitlementResponse;
import org.openapitools.client.model.StartFlowResponse;
import org.openapitools.client.model.StopFlowResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateBridgeOutputRequest;
import org.openapitools.client.model.UpdateBridgeOutputResponse;
import org.openapitools.client.model.UpdateBridgeRequest;
import org.openapitools.client.model.UpdateBridgeResponse;
import org.openapitools.client.model.UpdateBridgeSourceRequest;
import org.openapitools.client.model.UpdateBridgeSourceResponse;
import org.openapitools.client.model.UpdateBridgeStateRequest;
import org.openapitools.client.model.UpdateBridgeStateResponse;
import org.openapitools.client.model.UpdateFlowEntitlementRequest;
import org.openapitools.client.model.UpdateFlowEntitlementResponse;
import org.openapitools.client.model.UpdateFlowMediaStreamRequest;
import org.openapitools.client.model.UpdateFlowMediaStreamResponse;
import org.openapitools.client.model.UpdateFlowOutputRequest;
import org.openapitools.client.model.UpdateFlowOutputResponse;
import org.openapitools.client.model.UpdateFlowRequest;
import org.openapitools.client.model.UpdateFlowResponse;
import org.openapitools.client.model.UpdateFlowSourceRequest;
import org.openapitools.client.model.UpdateFlowSourceResponse;
import org.openapitools.client.model.UpdateGatewayInstanceRequest;
import org.openapitools.client.model.UpdateGatewayInstanceResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Adds outputs to an existing bridge.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addBridgeOutputsTest() throws ApiException {
        String bridgeArn = null;
        AddBridgeOutputsRequest addBridgeOutputsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddBridgeOutputsResponse response = api.addBridgeOutputs(bridgeArn, addBridgeOutputsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds sources to an existing bridge.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addBridgeSourcesTest() throws ApiException {
        String bridgeArn = null;
        AddBridgeSourcesRequest addBridgeSourcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddBridgeSourcesResponse response = api.addBridgeSources(bridgeArn, addBridgeSourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds media streams to an existing flow. After you add a media stream to a flow, you can associate it with a source and/or an output that uses the ST 2110 JPEG XS or CDI protocol.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFlowMediaStreamsTest() throws ApiException {
        String flowArn = null;
        AddFlowMediaStreamsRequest addFlowMediaStreamsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddFlowMediaStreamsResponse response = api.addFlowMediaStreams(flowArn, addFlowMediaStreamsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds outputs to an existing flow. You can create up to 50 outputs per flow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFlowOutputsTest() throws ApiException {
        String flowArn = null;
        AddFlowOutputsRequest addFlowOutputsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddFlowOutputsResponse response = api.addFlowOutputs(flowArn, addFlowOutputsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds Sources to flow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFlowSourcesTest() throws ApiException {
        String flowArn = null;
        AddFlowSourcesRequest addFlowSourcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddFlowSourcesResponse response = api.addFlowSources(flowArn, addFlowSourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds VPC interfaces to flow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFlowVpcInterfacesTest() throws ApiException {
        String flowArn = null;
        AddFlowVpcInterfacesRequest addFlowVpcInterfacesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddFlowVpcInterfacesResponse response = api.addFlowVpcInterfaces(flowArn, addFlowVpcInterfacesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new bridge. The request must include one source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBridgeTest() throws ApiException {
        CreateBridgeRequest createBridgeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateBridgeResponse response = api.createBridge(createBridgeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new flow. The request must include one source. The request optionally can include outputs (up to 50) and entitlements (up to 50).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFlowTest() throws ApiException {
        CreateFlowRequest createFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFlowResponse response = api.createFlow(createFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new gateway. The request must include at least one network (up to 4).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGatewayTest() throws ApiException {
        CreateGatewayRequest createGatewayRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGatewayResponse response = api.createGateway(createGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a bridge. Before you can delete a bridge, you must stop the bridge.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBridgeTest() throws ApiException {
        String bridgeArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBridgeResponse response = api.deleteBridge(bridgeArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a flow. Before you can delete a flow, you must stop the flow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFlowTest() throws ApiException {
        String flowArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteFlowResponse response = api.deleteFlow(flowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a gateway. Before you can delete a gateway, you must deregister its instances and delete its bridges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGatewayTest() throws ApiException {
        String gatewayArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteGatewayResponse response = api.deleteGateway(gatewayArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deregisters an instance. Before you deregister an instance, all bridges running on the instance must be stopped. If you want to deregister an instance without stopping the bridges, you must use the --force option.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterGatewayInstanceTest() throws ApiException {
        String gatewayInstanceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean force = null;
        DeregisterGatewayInstanceResponse response = api.deregisterGatewayInstance(gatewayInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, force);
        // TODO: test validations
    }

    /**
     * Displays the details of a bridge.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeBridgeTest() throws ApiException {
        String bridgeArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeBridgeResponse response = api.describeBridge(bridgeArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Displays the details of a flow. The response includes the flow ARN, name, and Availability Zone, as well as details about the source, outputs, and entitlements.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFlowTest() throws ApiException {
        String flowArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFlowResponse response = api.describeFlow(flowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Displays the details of a gateway. The response includes the gateway ARN, name, and CIDR blocks, as well as details about the networks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeGatewayTest() throws ApiException {
        String gatewayArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeGatewayResponse response = api.describeGateway(gatewayArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Displays the details of an instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeGatewayInstanceTest() throws ApiException {
        String gatewayInstanceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeGatewayInstanceResponse response = api.describeGatewayInstance(gatewayInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Displays the details of an offering. The response includes the offering description, duration, outbound bandwidth, price, and Amazon Resource Name (ARN).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeOfferingTest() throws ApiException {
        String offeringArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeOfferingResponse response = api.describeOffering(offeringArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Displays the details of a reservation. The response includes the reservation name, state, start date and time, and the details of the offering that make up the rest of the reservation (such as price, duration, and outbound bandwidth).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReservationTest() throws ApiException {
        String reservationArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeReservationResponse response = api.describeReservation(reservationArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Grants entitlements to an existing flow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void grantFlowEntitlementsTest() throws ApiException {
        String flowArn = null;
        GrantFlowEntitlementsRequest grantFlowEntitlementsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GrantFlowEntitlementsResponse response = api.grantFlowEntitlements(flowArn, grantFlowEntitlementsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Displays a list of bridges that are associated with this account and an optionally specified Arn. This request returns a paginated result.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBridgesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String filterArn = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListBridgesResponse response = api.listBridges(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filterArn, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Displays a list of all entitlements that have been granted to this account. This request returns 20 results per page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEntitlementsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListEntitlementsResponse response = api.listEntitlements(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Displays a list of flows that are associated with this account. This request returns a paginated result.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFlowsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListFlowsResponse response = api.listFlows(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Displays a list of instances associated with the AWS account. This request returns a paginated result. You can use the filterArn property to display only the instances associated with the selected Gateway Amazon Resource Name (ARN).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGatewayInstancesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String filterArn = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListGatewayInstancesResponse response = api.listGatewayInstances(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filterArn, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Displays a list of gateways that are associated with this account. This request returns a paginated result.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGatewaysTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListGatewaysResponse response = api.listGateways(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Displays a list of all offerings that are available to this account in the current AWS Region. If you have an active reservation (which means you&#39;ve purchased an offering that has already started and hasn&#39;t expired yet), your account isn&#39;t eligible for other offerings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOfferingsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListOfferingsResponse response = api.listOfferings(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Displays a list of all reservations that have been purchased by this account in the current AWS Region. This list includes all reservations in all states (such as active and expired).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReservationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListReservationsResponse response = api.listReservations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * List all tags on an AWS Elemental MediaConnect resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Submits a request to purchase an offering. If you already have an active reservation, you can&#39;t purchase another offering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseOfferingTest() throws ApiException {
        String offeringArn = null;
        PurchaseOfferingRequest purchaseOfferingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PurchaseOfferingResponse response = api.purchaseOffering(offeringArn, purchaseOfferingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes an output from a bridge.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeBridgeOutputTest() throws ApiException {
        String bridgeArn = null;
        String outputName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveBridgeOutputResponse response = api.removeBridgeOutput(bridgeArn, outputName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a source from a bridge.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeBridgeSourceTest() throws ApiException {
        String bridgeArn = null;
        String sourceName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveBridgeSourceResponse response = api.removeBridgeSource(bridgeArn, sourceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a media stream from a flow. This action is only available if the media stream is not associated with a source or output.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFlowMediaStreamTest() throws ApiException {
        String flowArn = null;
        String mediaStreamName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveFlowMediaStreamResponse response = api.removeFlowMediaStream(flowArn, mediaStreamName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes an output from an existing flow. This request can be made only on an output that does not have an entitlement associated with it. If the output has an entitlement, you must revoke the entitlement instead. When an entitlement is revoked from a flow, the service automatically removes the associated output.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFlowOutputTest() throws ApiException {
        String flowArn = null;
        String outputArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveFlowOutputResponse response = api.removeFlowOutput(flowArn, outputArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a source from an existing flow. This request can be made only if there is more than one source on the flow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFlowSourceTest() throws ApiException {
        String flowArn = null;
        String sourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveFlowSourceResponse response = api.removeFlowSource(flowArn, sourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a VPC Interface from an existing flow. This request can be made only on a VPC interface that does not have a Source or Output associated with it. If the VPC interface is referenced by a Source or Output, you must first delete or update the Source or Output to no longer reference the VPC interface.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFlowVpcInterfaceTest() throws ApiException {
        String flowArn = null;
        String vpcInterfaceName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveFlowVpcInterfaceResponse response = api.removeFlowVpcInterface(flowArn, vpcInterfaceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Revokes an entitlement from a flow. Once an entitlement is revoked, the content becomes unavailable to the subscriber and the associated output is removed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeFlowEntitlementTest() throws ApiException {
        String entitlementArn = null;
        String flowArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RevokeFlowEntitlementResponse response = api.revokeFlowEntitlement(entitlementArn, flowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a flow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startFlowTest() throws ApiException {
        String flowArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartFlowResponse response = api.startFlow(flowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a flow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopFlowTest() throws ApiException {
        String flowArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopFlowResponse response = api.stopFlow(flowArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates the specified tags to a resource with the specified resourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes specified tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the bridge
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBridgeTest() throws ApiException {
        String bridgeArn = null;
        UpdateBridgeRequest updateBridgeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBridgeResponse response = api.updateBridge(bridgeArn, updateBridgeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing bridge output.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBridgeOutputTest() throws ApiException {
        String bridgeArn = null;
        String outputName = null;
        UpdateBridgeOutputRequest updateBridgeOutputRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBridgeOutputResponse response = api.updateBridgeOutput(bridgeArn, outputName, updateBridgeOutputRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing bridge source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBridgeSourceTest() throws ApiException {
        String bridgeArn = null;
        String sourceName = null;
        UpdateBridgeSourceRequest updateBridgeSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBridgeSourceResponse response = api.updateBridgeSource(bridgeArn, sourceName, updateBridgeSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the bridge state
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBridgeStateTest() throws ApiException {
        String bridgeArn = null;
        UpdateBridgeStateRequest updateBridgeStateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBridgeStateResponse response = api.updateBridgeState(bridgeArn, updateBridgeStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates flow
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFlowTest() throws ApiException {
        String flowArn = null;
        UpdateFlowRequest updateFlowRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFlowResponse response = api.updateFlow(flowArn, updateFlowRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * You can change an entitlement&#39;s description, subscribers, and encryption. If you change the subscribers, the service will remove the outputs that are are used by the subscribers that are removed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFlowEntitlementTest() throws ApiException {
        String entitlementArn = null;
        String flowArn = null;
        UpdateFlowEntitlementRequest updateFlowEntitlementRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFlowEntitlementResponse response = api.updateFlowEntitlement(entitlementArn, flowArn, updateFlowEntitlementRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing media stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFlowMediaStreamTest() throws ApiException {
        String flowArn = null;
        String mediaStreamName = null;
        UpdateFlowMediaStreamRequest updateFlowMediaStreamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFlowMediaStreamResponse response = api.updateFlowMediaStream(flowArn, mediaStreamName, updateFlowMediaStreamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing flow output.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFlowOutputTest() throws ApiException {
        String flowArn = null;
        String outputArn = null;
        UpdateFlowOutputRequest updateFlowOutputRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFlowOutputResponse response = api.updateFlowOutput(flowArn, outputArn, updateFlowOutputRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the source of a flow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFlowSourceTest() throws ApiException {
        String flowArn = null;
        String sourceArn = null;
        UpdateFlowSourceRequest updateFlowSourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFlowSourceResponse response = api.updateFlowSource(flowArn, sourceArn, updateFlowSourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration of an existing Gateway Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGatewayInstanceTest() throws ApiException {
        String gatewayInstanceArn = null;
        UpdateGatewayInstanceRequest updateGatewayInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateGatewayInstanceResponse response = api.updateGatewayInstance(gatewayInstanceArn, updateGatewayInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
