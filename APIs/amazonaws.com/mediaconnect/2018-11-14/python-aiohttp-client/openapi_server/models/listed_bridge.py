# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bridge_state import BridgeState
from openapi_server import util


class ListedBridge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bridge_arn: str=None, bridge_state: BridgeState=None, bridge_type: str=None, name: str=None, placement_arn: str=None):
        """ListedBridge - a model defined in OpenAPI

        :param bridge_arn: The bridge_arn of this ListedBridge.
        :param bridge_state: The bridge_state of this ListedBridge.
        :param bridge_type: The bridge_type of this ListedBridge.
        :param name: The name of this ListedBridge.
        :param placement_arn: The placement_arn of this ListedBridge.
        """
        self.openapi_types = {
            'bridge_arn': str,
            'bridge_state': BridgeState,
            'bridge_type': str,
            'name': str,
            'placement_arn': str
        }

        self.attribute_map = {
            'bridge_arn': 'BridgeArn',
            'bridge_state': 'BridgeState',
            'bridge_type': 'BridgeType',
            'name': 'Name',
            'placement_arn': 'PlacementArn'
        }

        self._bridge_arn = bridge_arn
        self._bridge_state = bridge_state
        self._bridge_type = bridge_type
        self._name = name
        self._placement_arn = placement_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListedBridge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListedBridge of this ListedBridge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bridge_arn(self):
        """Gets the bridge_arn of this ListedBridge.


        :return: The bridge_arn of this ListedBridge.
        :rtype: str
        """
        return self._bridge_arn

    @bridge_arn.setter
    def bridge_arn(self, bridge_arn):
        """Sets the bridge_arn of this ListedBridge.


        :param bridge_arn: The bridge_arn of this ListedBridge.
        :type bridge_arn: str
        """
        if bridge_arn is None:
            raise ValueError("Invalid value for `bridge_arn`, must not be `None`")

        self._bridge_arn = bridge_arn

    @property
    def bridge_state(self):
        """Gets the bridge_state of this ListedBridge.


        :return: The bridge_state of this ListedBridge.
        :rtype: BridgeState
        """
        return self._bridge_state

    @bridge_state.setter
    def bridge_state(self, bridge_state):
        """Sets the bridge_state of this ListedBridge.


        :param bridge_state: The bridge_state of this ListedBridge.
        :type bridge_state: BridgeState
        """
        if bridge_state is None:
            raise ValueError("Invalid value for `bridge_state`, must not be `None`")

        self._bridge_state = bridge_state

    @property
    def bridge_type(self):
        """Gets the bridge_type of this ListedBridge.


        :return: The bridge_type of this ListedBridge.
        :rtype: str
        """
        return self._bridge_type

    @bridge_type.setter
    def bridge_type(self, bridge_type):
        """Sets the bridge_type of this ListedBridge.


        :param bridge_type: The bridge_type of this ListedBridge.
        :type bridge_type: str
        """
        if bridge_type is None:
            raise ValueError("Invalid value for `bridge_type`, must not be `None`")

        self._bridge_type = bridge_type

    @property
    def name(self):
        """Gets the name of this ListedBridge.


        :return: The name of this ListedBridge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListedBridge.


        :param name: The name of this ListedBridge.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def placement_arn(self):
        """Gets the placement_arn of this ListedBridge.


        :return: The placement_arn of this ListedBridge.
        :rtype: str
        """
        return self._placement_arn

    @placement_arn.setter
    def placement_arn(self, placement_arn):
        """Sets the placement_arn of this ListedBridge.


        :param placement_arn: The placement_arn of this ListedBridge.
        :type placement_arn: str
        """
        if placement_arn is None:
            raise ValueError("Invalid value for `placement_arn`, must not be `None`")

        self._placement_arn = placement_arn
