# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gateway_network import GatewayNetwork
from openapi_server import util


class CreateGatewayRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, egress_cidr_blocks: List[str]=None, name: str=None, networks: List[GatewayNetwork]=None):
        """CreateGatewayRequest - a model defined in OpenAPI

        :param egress_cidr_blocks: The egress_cidr_blocks of this CreateGatewayRequest.
        :param name: The name of this CreateGatewayRequest.
        :param networks: The networks of this CreateGatewayRequest.
        """
        self.openapi_types = {
            'egress_cidr_blocks': List[str],
            'name': str,
            'networks': List[GatewayNetwork]
        }

        self.attribute_map = {
            'egress_cidr_blocks': 'egressCidrBlocks',
            'name': 'name',
            'networks': 'networks'
        }

        self._egress_cidr_blocks = egress_cidr_blocks
        self._name = name
        self._networks = networks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGatewayRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGateway_request of this CreateGatewayRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def egress_cidr_blocks(self):
        """Gets the egress_cidr_blocks of this CreateGatewayRequest.

        The range of IP addresses that are allowed to contribute content or initiate output requests for flows communicating with this gateway. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.

        :return: The egress_cidr_blocks of this CreateGatewayRequest.
        :rtype: List[str]
        """
        return self._egress_cidr_blocks

    @egress_cidr_blocks.setter
    def egress_cidr_blocks(self, egress_cidr_blocks):
        """Sets the egress_cidr_blocks of this CreateGatewayRequest.

        The range of IP addresses that are allowed to contribute content or initiate output requests for flows communicating with this gateway. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.

        :param egress_cidr_blocks: The egress_cidr_blocks of this CreateGatewayRequest.
        :type egress_cidr_blocks: List[str]
        """
        if egress_cidr_blocks is None:
            raise ValueError("Invalid value for `egress_cidr_blocks`, must not be `None`")

        self._egress_cidr_blocks = egress_cidr_blocks

    @property
    def name(self):
        """Gets the name of this CreateGatewayRequest.

        The name of the gateway. This name can not be modified after the gateway is created.

        :return: The name of this CreateGatewayRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateGatewayRequest.

        The name of the gateway. This name can not be modified after the gateway is created.

        :param name: The name of this CreateGatewayRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def networks(self):
        """Gets the networks of this CreateGatewayRequest.

        The list of networks that you want to add.

        :return: The networks of this CreateGatewayRequest.
        :rtype: List[GatewayNetwork]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this CreateGatewayRequest.

        The list of networks that you want to add.

        :param networks: The networks of this CreateGatewayRequest.
        :type networks: List[GatewayNetwork]
        """
        if networks is None:
            raise ValueError("Invalid value for `networks`, must not be `None`")

        self._networks = networks
