# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_bridge_output_request import AddBridgeOutputRequest
from openapi_server.models.add_bridge_source_request import AddBridgeSourceRequest
from openapi_server.models.create_bridge_request_egress_gateway_bridge import CreateBridgeRequestEgressGatewayBridge
from openapi_server.models.create_bridge_request_ingress_gateway_bridge import CreateBridgeRequestIngressGatewayBridge
from openapi_server.models.create_bridge_request_source_failover_config import CreateBridgeRequestSourceFailoverConfig
from openapi_server import util


class CreateBridgeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, egress_gateway_bridge: CreateBridgeRequestEgressGatewayBridge=None, ingress_gateway_bridge: CreateBridgeRequestIngressGatewayBridge=None, name: str=None, outputs: List[AddBridgeOutputRequest]=None, placement_arn: str=None, source_failover_config: CreateBridgeRequestSourceFailoverConfig=None, sources: List[AddBridgeSourceRequest]=None):
        """CreateBridgeRequest - a model defined in OpenAPI

        :param egress_gateway_bridge: The egress_gateway_bridge of this CreateBridgeRequest.
        :param ingress_gateway_bridge: The ingress_gateway_bridge of this CreateBridgeRequest.
        :param name: The name of this CreateBridgeRequest.
        :param outputs: The outputs of this CreateBridgeRequest.
        :param placement_arn: The placement_arn of this CreateBridgeRequest.
        :param source_failover_config: The source_failover_config of this CreateBridgeRequest.
        :param sources: The sources of this CreateBridgeRequest.
        """
        self.openapi_types = {
            'egress_gateway_bridge': CreateBridgeRequestEgressGatewayBridge,
            'ingress_gateway_bridge': CreateBridgeRequestIngressGatewayBridge,
            'name': str,
            'outputs': List[AddBridgeOutputRequest],
            'placement_arn': str,
            'source_failover_config': CreateBridgeRequestSourceFailoverConfig,
            'sources': List[AddBridgeSourceRequest]
        }

        self.attribute_map = {
            'egress_gateway_bridge': 'egressGatewayBridge',
            'ingress_gateway_bridge': 'ingressGatewayBridge',
            'name': 'name',
            'outputs': 'outputs',
            'placement_arn': 'placementArn',
            'source_failover_config': 'sourceFailoverConfig',
            'sources': 'sources'
        }

        self._egress_gateway_bridge = egress_gateway_bridge
        self._ingress_gateway_bridge = ingress_gateway_bridge
        self._name = name
        self._outputs = outputs
        self._placement_arn = placement_arn
        self._source_failover_config = source_failover_config
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBridgeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBridge_request of this CreateBridgeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def egress_gateway_bridge(self):
        """Gets the egress_gateway_bridge of this CreateBridgeRequest.


        :return: The egress_gateway_bridge of this CreateBridgeRequest.
        :rtype: CreateBridgeRequestEgressGatewayBridge
        """
        return self._egress_gateway_bridge

    @egress_gateway_bridge.setter
    def egress_gateway_bridge(self, egress_gateway_bridge):
        """Sets the egress_gateway_bridge of this CreateBridgeRequest.


        :param egress_gateway_bridge: The egress_gateway_bridge of this CreateBridgeRequest.
        :type egress_gateway_bridge: CreateBridgeRequestEgressGatewayBridge
        """

        self._egress_gateway_bridge = egress_gateway_bridge

    @property
    def ingress_gateway_bridge(self):
        """Gets the ingress_gateway_bridge of this CreateBridgeRequest.


        :return: The ingress_gateway_bridge of this CreateBridgeRequest.
        :rtype: CreateBridgeRequestIngressGatewayBridge
        """
        return self._ingress_gateway_bridge

    @ingress_gateway_bridge.setter
    def ingress_gateway_bridge(self, ingress_gateway_bridge):
        """Sets the ingress_gateway_bridge of this CreateBridgeRequest.


        :param ingress_gateway_bridge: The ingress_gateway_bridge of this CreateBridgeRequest.
        :type ingress_gateway_bridge: CreateBridgeRequestIngressGatewayBridge
        """

        self._ingress_gateway_bridge = ingress_gateway_bridge

    @property
    def name(self):
        """Gets the name of this CreateBridgeRequest.

        The name of the bridge. This name can not be modified after the bridge is created.

        :return: The name of this CreateBridgeRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateBridgeRequest.

        The name of the bridge. This name can not be modified after the bridge is created.

        :param name: The name of this CreateBridgeRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def outputs(self):
        """Gets the outputs of this CreateBridgeRequest.

        The outputs that you want to add to this bridge.

        :return: The outputs of this CreateBridgeRequest.
        :rtype: List[AddBridgeOutputRequest]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this CreateBridgeRequest.

        The outputs that you want to add to this bridge.

        :param outputs: The outputs of this CreateBridgeRequest.
        :type outputs: List[AddBridgeOutputRequest]
        """

        self._outputs = outputs

    @property
    def placement_arn(self):
        """Gets the placement_arn of this CreateBridgeRequest.

        The bridge placement Amazon Resource Number (ARN).

        :return: The placement_arn of this CreateBridgeRequest.
        :rtype: str
        """
        return self._placement_arn

    @placement_arn.setter
    def placement_arn(self, placement_arn):
        """Sets the placement_arn of this CreateBridgeRequest.

        The bridge placement Amazon Resource Number (ARN).

        :param placement_arn: The placement_arn of this CreateBridgeRequest.
        :type placement_arn: str
        """
        if placement_arn is None:
            raise ValueError("Invalid value for `placement_arn`, must not be `None`")

        self._placement_arn = placement_arn

    @property
    def source_failover_config(self):
        """Gets the source_failover_config of this CreateBridgeRequest.


        :return: The source_failover_config of this CreateBridgeRequest.
        :rtype: CreateBridgeRequestSourceFailoverConfig
        """
        return self._source_failover_config

    @source_failover_config.setter
    def source_failover_config(self, source_failover_config):
        """Sets the source_failover_config of this CreateBridgeRequest.


        :param source_failover_config: The source_failover_config of this CreateBridgeRequest.
        :type source_failover_config: CreateBridgeRequestSourceFailoverConfig
        """

        self._source_failover_config = source_failover_config

    @property
    def sources(self):
        """Gets the sources of this CreateBridgeRequest.

        The sources that you want to add to this bridge.

        :return: The sources of this CreateBridgeRequest.
        :rtype: List[AddBridgeSourceRequest]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CreateBridgeRequest.

        The sources that you want to add to this bridge.

        :param sources: The sources of this CreateBridgeRequest.
        :type sources: List[AddBridgeSourceRequest]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")

        self._sources = sources
