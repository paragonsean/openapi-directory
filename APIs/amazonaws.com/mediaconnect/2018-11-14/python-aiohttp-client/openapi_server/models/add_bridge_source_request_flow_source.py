# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_bridge_source_request_flow_source_flow_vpc_interface_attachment import UpdateBridgeSourceRequestFlowSourceFlowVpcInterfaceAttachment
from openapi_server import util


class AddBridgeSourceRequestFlowSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flow_arn: str=None, flow_vpc_interface_attachment: UpdateBridgeSourceRequestFlowSourceFlowVpcInterfaceAttachment=None, name: str=None):
        """AddBridgeSourceRequestFlowSource - a model defined in OpenAPI

        :param flow_arn: The flow_arn of this AddBridgeSourceRequestFlowSource.
        :param flow_vpc_interface_attachment: The flow_vpc_interface_attachment of this AddBridgeSourceRequestFlowSource.
        :param name: The name of this AddBridgeSourceRequestFlowSource.
        """
        self.openapi_types = {
            'flow_arn': str,
            'flow_vpc_interface_attachment': UpdateBridgeSourceRequestFlowSourceFlowVpcInterfaceAttachment,
            'name': str
        }

        self.attribute_map = {
            'flow_arn': 'FlowArn',
            'flow_vpc_interface_attachment': 'FlowVpcInterfaceAttachment',
            'name': 'Name'
        }

        self._flow_arn = flow_arn
        self._flow_vpc_interface_attachment = flow_vpc_interface_attachment
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddBridgeSourceRequestFlowSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddBridgeSourceRequest_FlowSource of this AddBridgeSourceRequestFlowSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flow_arn(self):
        """Gets the flow_arn of this AddBridgeSourceRequestFlowSource.


        :return: The flow_arn of this AddBridgeSourceRequestFlowSource.
        :rtype: str
        """
        return self._flow_arn

    @flow_arn.setter
    def flow_arn(self, flow_arn):
        """Sets the flow_arn of this AddBridgeSourceRequestFlowSource.


        :param flow_arn: The flow_arn of this AddBridgeSourceRequestFlowSource.
        :type flow_arn: str
        """
        if flow_arn is None:
            raise ValueError("Invalid value for `flow_arn`, must not be `None`")

        self._flow_arn = flow_arn

    @property
    def flow_vpc_interface_attachment(self):
        """Gets the flow_vpc_interface_attachment of this AddBridgeSourceRequestFlowSource.


        :return: The flow_vpc_interface_attachment of this AddBridgeSourceRequestFlowSource.
        :rtype: UpdateBridgeSourceRequestFlowSourceFlowVpcInterfaceAttachment
        """
        return self._flow_vpc_interface_attachment

    @flow_vpc_interface_attachment.setter
    def flow_vpc_interface_attachment(self, flow_vpc_interface_attachment):
        """Sets the flow_vpc_interface_attachment of this AddBridgeSourceRequestFlowSource.


        :param flow_vpc_interface_attachment: The flow_vpc_interface_attachment of this AddBridgeSourceRequestFlowSource.
        :type flow_vpc_interface_attachment: UpdateBridgeSourceRequestFlowSourceFlowVpcInterfaceAttachment
        """

        self._flow_vpc_interface_attachment = flow_vpc_interface_attachment

    @property
    def name(self):
        """Gets the name of this AddBridgeSourceRequestFlowSource.


        :return: The name of this AddBridgeSourceRequestFlowSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddBridgeSourceRequestFlowSource.


        :param name: The name of this AddBridgeSourceRequestFlowSource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
