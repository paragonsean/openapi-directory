# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListedEntitlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_transfer_subscriber_fee_percent: int=None, entitlement_arn: str=None, entitlement_name: str=None):
        """ListedEntitlement - a model defined in OpenAPI

        :param data_transfer_subscriber_fee_percent: The data_transfer_subscriber_fee_percent of this ListedEntitlement.
        :param entitlement_arn: The entitlement_arn of this ListedEntitlement.
        :param entitlement_name: The entitlement_name of this ListedEntitlement.
        """
        self.openapi_types = {
            'data_transfer_subscriber_fee_percent': int,
            'entitlement_arn': str,
            'entitlement_name': str
        }

        self.attribute_map = {
            'data_transfer_subscriber_fee_percent': 'DataTransferSubscriberFeePercent',
            'entitlement_arn': 'EntitlementArn',
            'entitlement_name': 'EntitlementName'
        }

        self._data_transfer_subscriber_fee_percent = data_transfer_subscriber_fee_percent
        self._entitlement_arn = entitlement_arn
        self._entitlement_name = entitlement_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListedEntitlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListedEntitlement of this ListedEntitlement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_transfer_subscriber_fee_percent(self):
        """Gets the data_transfer_subscriber_fee_percent of this ListedEntitlement.


        :return: The data_transfer_subscriber_fee_percent of this ListedEntitlement.
        :rtype: int
        """
        return self._data_transfer_subscriber_fee_percent

    @data_transfer_subscriber_fee_percent.setter
    def data_transfer_subscriber_fee_percent(self, data_transfer_subscriber_fee_percent):
        """Sets the data_transfer_subscriber_fee_percent of this ListedEntitlement.


        :param data_transfer_subscriber_fee_percent: The data_transfer_subscriber_fee_percent of this ListedEntitlement.
        :type data_transfer_subscriber_fee_percent: int
        """

        self._data_transfer_subscriber_fee_percent = data_transfer_subscriber_fee_percent

    @property
    def entitlement_arn(self):
        """Gets the entitlement_arn of this ListedEntitlement.


        :return: The entitlement_arn of this ListedEntitlement.
        :rtype: str
        """
        return self._entitlement_arn

    @entitlement_arn.setter
    def entitlement_arn(self, entitlement_arn):
        """Sets the entitlement_arn of this ListedEntitlement.


        :param entitlement_arn: The entitlement_arn of this ListedEntitlement.
        :type entitlement_arn: str
        """
        if entitlement_arn is None:
            raise ValueError("Invalid value for `entitlement_arn`, must not be `None`")

        self._entitlement_arn = entitlement_arn

    @property
    def entitlement_name(self):
        """Gets the entitlement_name of this ListedEntitlement.


        :return: The entitlement_name of this ListedEntitlement.
        :rtype: str
        """
        return self._entitlement_name

    @entitlement_name.setter
    def entitlement_name(self, entitlement_name):
        """Sets the entitlement_name of this ListedEntitlement.


        :param entitlement_name: The entitlement_name of this ListedEntitlement.
        :type entitlement_name: str
        """
        if entitlement_name is None:
            raise ValueError("Invalid value for `entitlement_name`, must not be `None`")

        self._entitlement_name = entitlement_name
