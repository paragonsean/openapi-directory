# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encoding_name import EncodingName
from openapi_server import util


class MediaStreamSourceConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoding_name: EncodingName=None, input_configurations: List=None, media_stream_name: str=None):
        """MediaStreamSourceConfigurationRequest - a model defined in OpenAPI

        :param encoding_name: The encoding_name of this MediaStreamSourceConfigurationRequest.
        :param input_configurations: The input_configurations of this MediaStreamSourceConfigurationRequest.
        :param media_stream_name: The media_stream_name of this MediaStreamSourceConfigurationRequest.
        """
        self.openapi_types = {
            'encoding_name': EncodingName,
            'input_configurations': List,
            'media_stream_name': str
        }

        self.attribute_map = {
            'encoding_name': 'EncodingName',
            'input_configurations': 'InputConfigurations',
            'media_stream_name': 'MediaStreamName'
        }

        self._encoding_name = encoding_name
        self._input_configurations = input_configurations
        self._media_stream_name = media_stream_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaStreamSourceConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaStreamSourceConfigurationRequest of this MediaStreamSourceConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoding_name(self):
        """Gets the encoding_name of this MediaStreamSourceConfigurationRequest.


        :return: The encoding_name of this MediaStreamSourceConfigurationRequest.
        :rtype: EncodingName
        """
        return self._encoding_name

    @encoding_name.setter
    def encoding_name(self, encoding_name):
        """Sets the encoding_name of this MediaStreamSourceConfigurationRequest.


        :param encoding_name: The encoding_name of this MediaStreamSourceConfigurationRequest.
        :type encoding_name: EncodingName
        """
        if encoding_name is None:
            raise ValueError("Invalid value for `encoding_name`, must not be `None`")

        self._encoding_name = encoding_name

    @property
    def input_configurations(self):
        """Gets the input_configurations of this MediaStreamSourceConfigurationRequest.


        :return: The input_configurations of this MediaStreamSourceConfigurationRequest.
        :rtype: List
        """
        return self._input_configurations

    @input_configurations.setter
    def input_configurations(self, input_configurations):
        """Sets the input_configurations of this MediaStreamSourceConfigurationRequest.


        :param input_configurations: The input_configurations of this MediaStreamSourceConfigurationRequest.
        :type input_configurations: List
        """

        self._input_configurations = input_configurations

    @property
    def media_stream_name(self):
        """Gets the media_stream_name of this MediaStreamSourceConfigurationRequest.


        :return: The media_stream_name of this MediaStreamSourceConfigurationRequest.
        :rtype: str
        """
        return self._media_stream_name

    @media_stream_name.setter
    def media_stream_name(self, media_stream_name):
        """Sets the media_stream_name of this MediaStreamSourceConfigurationRequest.


        :param media_stream_name: The media_stream_name of this MediaStreamSourceConfigurationRequest.
        :type media_stream_name: str
        """
        if media_stream_name is None:
            raise ValueError("Invalid value for `media_stream_name`, must not be `None`")

        self._media_stream_name = media_stream_name
