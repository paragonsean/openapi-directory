# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gateway_state import GatewayState
from openapi_server import util


class Gateway(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, egress_cidr_blocks: List=None, gateway_arn: str=None, gateway_messages: List=None, gateway_state: GatewayState=None, name: str=None, networks: List=None):
        """Gateway - a model defined in OpenAPI

        :param egress_cidr_blocks: The egress_cidr_blocks of this Gateway.
        :param gateway_arn: The gateway_arn of this Gateway.
        :param gateway_messages: The gateway_messages of this Gateway.
        :param gateway_state: The gateway_state of this Gateway.
        :param name: The name of this Gateway.
        :param networks: The networks of this Gateway.
        """
        self.openapi_types = {
            'egress_cidr_blocks': List,
            'gateway_arn': str,
            'gateway_messages': List,
            'gateway_state': GatewayState,
            'name': str,
            'networks': List
        }

        self.attribute_map = {
            'egress_cidr_blocks': 'EgressCidrBlocks',
            'gateway_arn': 'GatewayArn',
            'gateway_messages': 'GatewayMessages',
            'gateway_state': 'GatewayState',
            'name': 'Name',
            'networks': 'Networks'
        }

        self._egress_cidr_blocks = egress_cidr_blocks
        self._gateway_arn = gateway_arn
        self._gateway_messages = gateway_messages
        self._gateway_state = gateway_state
        self._name = name
        self._networks = networks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Gateway':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Gateway of this Gateway.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def egress_cidr_blocks(self):
        """Gets the egress_cidr_blocks of this Gateway.


        :return: The egress_cidr_blocks of this Gateway.
        :rtype: List
        """
        return self._egress_cidr_blocks

    @egress_cidr_blocks.setter
    def egress_cidr_blocks(self, egress_cidr_blocks):
        """Sets the egress_cidr_blocks of this Gateway.


        :param egress_cidr_blocks: The egress_cidr_blocks of this Gateway.
        :type egress_cidr_blocks: List
        """
        if egress_cidr_blocks is None:
            raise ValueError("Invalid value for `egress_cidr_blocks`, must not be `None`")

        self._egress_cidr_blocks = egress_cidr_blocks

    @property
    def gateway_arn(self):
        """Gets the gateway_arn of this Gateway.


        :return: The gateway_arn of this Gateway.
        :rtype: str
        """
        return self._gateway_arn

    @gateway_arn.setter
    def gateway_arn(self, gateway_arn):
        """Sets the gateway_arn of this Gateway.


        :param gateway_arn: The gateway_arn of this Gateway.
        :type gateway_arn: str
        """
        if gateway_arn is None:
            raise ValueError("Invalid value for `gateway_arn`, must not be `None`")

        self._gateway_arn = gateway_arn

    @property
    def gateway_messages(self):
        """Gets the gateway_messages of this Gateway.


        :return: The gateway_messages of this Gateway.
        :rtype: List
        """
        return self._gateway_messages

    @gateway_messages.setter
    def gateway_messages(self, gateway_messages):
        """Sets the gateway_messages of this Gateway.


        :param gateway_messages: The gateway_messages of this Gateway.
        :type gateway_messages: List
        """

        self._gateway_messages = gateway_messages

    @property
    def gateway_state(self):
        """Gets the gateway_state of this Gateway.


        :return: The gateway_state of this Gateway.
        :rtype: GatewayState
        """
        return self._gateway_state

    @gateway_state.setter
    def gateway_state(self, gateway_state):
        """Sets the gateway_state of this Gateway.


        :param gateway_state: The gateway_state of this Gateway.
        :type gateway_state: GatewayState
        """

        self._gateway_state = gateway_state

    @property
    def name(self):
        """Gets the name of this Gateway.


        :return: The name of this Gateway.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Gateway.


        :param name: The name of this Gateway.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def networks(self):
        """Gets the networks of this Gateway.


        :return: The networks of this Gateway.
        :rtype: List
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this Gateway.


        :param networks: The networks of this Gateway.
        :type networks: List
        """
        if networks is None:
            raise ValueError("Invalid value for `networks`, must not be `None`")

        self._networks = networks
