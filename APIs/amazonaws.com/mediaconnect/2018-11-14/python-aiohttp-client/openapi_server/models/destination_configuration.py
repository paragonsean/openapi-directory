# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_configuration_interface import DestinationConfigurationInterface
from openapi_server import util


class DestinationConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_ip: str=None, destination_port: int=None, interface: DestinationConfigurationInterface=None, outbound_ip: str=None):
        """DestinationConfiguration - a model defined in OpenAPI

        :param destination_ip: The destination_ip of this DestinationConfiguration.
        :param destination_port: The destination_port of this DestinationConfiguration.
        :param interface: The interface of this DestinationConfiguration.
        :param outbound_ip: The outbound_ip of this DestinationConfiguration.
        """
        self.openapi_types = {
            'destination_ip': str,
            'destination_port': int,
            'interface': DestinationConfigurationInterface,
            'outbound_ip': str
        }

        self.attribute_map = {
            'destination_ip': 'DestinationIp',
            'destination_port': 'DestinationPort',
            'interface': 'Interface',
            'outbound_ip': 'OutboundIp'
        }

        self._destination_ip = destination_ip
        self._destination_port = destination_port
        self._interface = interface
        self._outbound_ip = outbound_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationConfiguration of this DestinationConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_ip(self):
        """Gets the destination_ip of this DestinationConfiguration.


        :return: The destination_ip of this DestinationConfiguration.
        :rtype: str
        """
        return self._destination_ip

    @destination_ip.setter
    def destination_ip(self, destination_ip):
        """Sets the destination_ip of this DestinationConfiguration.


        :param destination_ip: The destination_ip of this DestinationConfiguration.
        :type destination_ip: str
        """
        if destination_ip is None:
            raise ValueError("Invalid value for `destination_ip`, must not be `None`")

        self._destination_ip = destination_ip

    @property
    def destination_port(self):
        """Gets the destination_port of this DestinationConfiguration.


        :return: The destination_port of this DestinationConfiguration.
        :rtype: int
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this DestinationConfiguration.


        :param destination_port: The destination_port of this DestinationConfiguration.
        :type destination_port: int
        """
        if destination_port is None:
            raise ValueError("Invalid value for `destination_port`, must not be `None`")

        self._destination_port = destination_port

    @property
    def interface(self):
        """Gets the interface of this DestinationConfiguration.


        :return: The interface of this DestinationConfiguration.
        :rtype: DestinationConfigurationInterface
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this DestinationConfiguration.


        :param interface: The interface of this DestinationConfiguration.
        :type interface: DestinationConfigurationInterface
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")

        self._interface = interface

    @property
    def outbound_ip(self):
        """Gets the outbound_ip of this DestinationConfiguration.


        :return: The outbound_ip of this DestinationConfiguration.
        :rtype: str
        """
        return self._outbound_ip

    @outbound_ip.setter
    def outbound_ip(self, outbound_ip):
        """Sets the outbound_ip of this DestinationConfiguration.


        :param outbound_ip: The outbound_ip of this DestinationConfiguration.
        :type outbound_ip: str
        """
        if outbound_ip is None:
            raise ValueError("Invalid value for `outbound_ip`, must not be `None`")

        self._outbound_ip = outbound_ip
