# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.duration_units import DurationUnits
from openapi_server.models.offering_resource_specification import OfferingResourceSpecification
from openapi_server.models.price_units import PriceUnits
from openapi_server import util


class DescribeOfferingResponseOffering(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, duration: int=None, duration_units: DurationUnits=None, offering_arn: str=None, offering_description: str=None, price_per_unit: str=None, price_units: PriceUnits=None, resource_specification: OfferingResourceSpecification=None):
        """DescribeOfferingResponseOffering - a model defined in OpenAPI

        :param currency_code: The currency_code of this DescribeOfferingResponseOffering.
        :param duration: The duration of this DescribeOfferingResponseOffering.
        :param duration_units: The duration_units of this DescribeOfferingResponseOffering.
        :param offering_arn: The offering_arn of this DescribeOfferingResponseOffering.
        :param offering_description: The offering_description of this DescribeOfferingResponseOffering.
        :param price_per_unit: The price_per_unit of this DescribeOfferingResponseOffering.
        :param price_units: The price_units of this DescribeOfferingResponseOffering.
        :param resource_specification: The resource_specification of this DescribeOfferingResponseOffering.
        """
        self.openapi_types = {
            'currency_code': str,
            'duration': int,
            'duration_units': DurationUnits,
            'offering_arn': str,
            'offering_description': str,
            'price_per_unit': str,
            'price_units': PriceUnits,
            'resource_specification': OfferingResourceSpecification
        }

        self.attribute_map = {
            'currency_code': 'CurrencyCode',
            'duration': 'Duration',
            'duration_units': 'DurationUnits',
            'offering_arn': 'OfferingArn',
            'offering_description': 'OfferingDescription',
            'price_per_unit': 'PricePerUnit',
            'price_units': 'PriceUnits',
            'resource_specification': 'ResourceSpecification'
        }

        self._currency_code = currency_code
        self._duration = duration
        self._duration_units = duration_units
        self._offering_arn = offering_arn
        self._offering_description = offering_description
        self._price_per_unit = price_per_unit
        self._price_units = price_units
        self._resource_specification = resource_specification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeOfferingResponseOffering':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeOfferingResponse_Offering of this DescribeOfferingResponseOffering.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this DescribeOfferingResponseOffering.


        :return: The currency_code of this DescribeOfferingResponseOffering.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this DescribeOfferingResponseOffering.


        :param currency_code: The currency_code of this DescribeOfferingResponseOffering.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def duration(self):
        """Gets the duration of this DescribeOfferingResponseOffering.


        :return: The duration of this DescribeOfferingResponseOffering.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this DescribeOfferingResponseOffering.


        :param duration: The duration of this DescribeOfferingResponseOffering.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def duration_units(self):
        """Gets the duration_units of this DescribeOfferingResponseOffering.


        :return: The duration_units of this DescribeOfferingResponseOffering.
        :rtype: DurationUnits
        """
        return self._duration_units

    @duration_units.setter
    def duration_units(self, duration_units):
        """Sets the duration_units of this DescribeOfferingResponseOffering.


        :param duration_units: The duration_units of this DescribeOfferingResponseOffering.
        :type duration_units: DurationUnits
        """
        if duration_units is None:
            raise ValueError("Invalid value for `duration_units`, must not be `None`")

        self._duration_units = duration_units

    @property
    def offering_arn(self):
        """Gets the offering_arn of this DescribeOfferingResponseOffering.


        :return: The offering_arn of this DescribeOfferingResponseOffering.
        :rtype: str
        """
        return self._offering_arn

    @offering_arn.setter
    def offering_arn(self, offering_arn):
        """Sets the offering_arn of this DescribeOfferingResponseOffering.


        :param offering_arn: The offering_arn of this DescribeOfferingResponseOffering.
        :type offering_arn: str
        """
        if offering_arn is None:
            raise ValueError("Invalid value for `offering_arn`, must not be `None`")

        self._offering_arn = offering_arn

    @property
    def offering_description(self):
        """Gets the offering_description of this DescribeOfferingResponseOffering.


        :return: The offering_description of this DescribeOfferingResponseOffering.
        :rtype: str
        """
        return self._offering_description

    @offering_description.setter
    def offering_description(self, offering_description):
        """Sets the offering_description of this DescribeOfferingResponseOffering.


        :param offering_description: The offering_description of this DescribeOfferingResponseOffering.
        :type offering_description: str
        """
        if offering_description is None:
            raise ValueError("Invalid value for `offering_description`, must not be `None`")

        self._offering_description = offering_description

    @property
    def price_per_unit(self):
        """Gets the price_per_unit of this DescribeOfferingResponseOffering.


        :return: The price_per_unit of this DescribeOfferingResponseOffering.
        :rtype: str
        """
        return self._price_per_unit

    @price_per_unit.setter
    def price_per_unit(self, price_per_unit):
        """Sets the price_per_unit of this DescribeOfferingResponseOffering.


        :param price_per_unit: The price_per_unit of this DescribeOfferingResponseOffering.
        :type price_per_unit: str
        """
        if price_per_unit is None:
            raise ValueError("Invalid value for `price_per_unit`, must not be `None`")

        self._price_per_unit = price_per_unit

    @property
    def price_units(self):
        """Gets the price_units of this DescribeOfferingResponseOffering.


        :return: The price_units of this DescribeOfferingResponseOffering.
        :rtype: PriceUnits
        """
        return self._price_units

    @price_units.setter
    def price_units(self, price_units):
        """Sets the price_units of this DescribeOfferingResponseOffering.


        :param price_units: The price_units of this DescribeOfferingResponseOffering.
        :type price_units: PriceUnits
        """
        if price_units is None:
            raise ValueError("Invalid value for `price_units`, must not be `None`")

        self._price_units = price_units

    @property
    def resource_specification(self):
        """Gets the resource_specification of this DescribeOfferingResponseOffering.


        :return: The resource_specification of this DescribeOfferingResponseOffering.
        :rtype: OfferingResourceSpecification
        """
        return self._resource_specification

    @resource_specification.setter
    def resource_specification(self, resource_specification):
        """Sets the resource_specification of this DescribeOfferingResponseOffering.


        :param resource_specification: The resource_specification of this DescribeOfferingResponseOffering.
        :type resource_specification: OfferingResourceSpecification
        """
        if resource_specification is None:
            raise ValueError("Invalid value for `resource_specification`, must not be `None`")

        self._resource_specification = resource_specification
