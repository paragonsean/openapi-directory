# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_output_request_vpc_interface_attachment import AddOutputRequestVpcInterfaceAttachment
from openapi_server.models.output_encryption import OutputEncryption
from openapi_server.models.output_transport import OutputTransport
from openapi_server import util


class Output(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_transfer_subscriber_fee_percent: int=None, description: str=None, destination: str=None, encryption: OutputEncryption=None, entitlement_arn: str=None, listener_address: str=None, media_live_input_arn: str=None, media_stream_output_configurations: List=None, name: str=None, output_arn: str=None, port: int=None, transport: OutputTransport=None, vpc_interface_attachment: AddOutputRequestVpcInterfaceAttachment=None, bridge_arn: str=None, bridge_ports: List=None):
        """Output - a model defined in OpenAPI

        :param data_transfer_subscriber_fee_percent: The data_transfer_subscriber_fee_percent of this Output.
        :param description: The description of this Output.
        :param destination: The destination of this Output.
        :param encryption: The encryption of this Output.
        :param entitlement_arn: The entitlement_arn of this Output.
        :param listener_address: The listener_address of this Output.
        :param media_live_input_arn: The media_live_input_arn of this Output.
        :param media_stream_output_configurations: The media_stream_output_configurations of this Output.
        :param name: The name of this Output.
        :param output_arn: The output_arn of this Output.
        :param port: The port of this Output.
        :param transport: The transport of this Output.
        :param vpc_interface_attachment: The vpc_interface_attachment of this Output.
        :param bridge_arn: The bridge_arn of this Output.
        :param bridge_ports: The bridge_ports of this Output.
        """
        self.openapi_types = {
            'data_transfer_subscriber_fee_percent': int,
            'description': str,
            'destination': str,
            'encryption': OutputEncryption,
            'entitlement_arn': str,
            'listener_address': str,
            'media_live_input_arn': str,
            'media_stream_output_configurations': List,
            'name': str,
            'output_arn': str,
            'port': int,
            'transport': OutputTransport,
            'vpc_interface_attachment': AddOutputRequestVpcInterfaceAttachment,
            'bridge_arn': str,
            'bridge_ports': List
        }

        self.attribute_map = {
            'data_transfer_subscriber_fee_percent': 'DataTransferSubscriberFeePercent',
            'description': 'Description',
            'destination': 'Destination',
            'encryption': 'Encryption',
            'entitlement_arn': 'EntitlementArn',
            'listener_address': 'ListenerAddress',
            'media_live_input_arn': 'MediaLiveInputArn',
            'media_stream_output_configurations': 'MediaStreamOutputConfigurations',
            'name': 'Name',
            'output_arn': 'OutputArn',
            'port': 'Port',
            'transport': 'Transport',
            'vpc_interface_attachment': 'VpcInterfaceAttachment',
            'bridge_arn': 'BridgeArn',
            'bridge_ports': 'BridgePorts'
        }

        self._data_transfer_subscriber_fee_percent = data_transfer_subscriber_fee_percent
        self._description = description
        self._destination = destination
        self._encryption = encryption
        self._entitlement_arn = entitlement_arn
        self._listener_address = listener_address
        self._media_live_input_arn = media_live_input_arn
        self._media_stream_output_configurations = media_stream_output_configurations
        self._name = name
        self._output_arn = output_arn
        self._port = port
        self._transport = transport
        self._vpc_interface_attachment = vpc_interface_attachment
        self._bridge_arn = bridge_arn
        self._bridge_ports = bridge_ports

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Output':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Output of this Output.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_transfer_subscriber_fee_percent(self):
        """Gets the data_transfer_subscriber_fee_percent of this Output.


        :return: The data_transfer_subscriber_fee_percent of this Output.
        :rtype: int
        """
        return self._data_transfer_subscriber_fee_percent

    @data_transfer_subscriber_fee_percent.setter
    def data_transfer_subscriber_fee_percent(self, data_transfer_subscriber_fee_percent):
        """Sets the data_transfer_subscriber_fee_percent of this Output.


        :param data_transfer_subscriber_fee_percent: The data_transfer_subscriber_fee_percent of this Output.
        :type data_transfer_subscriber_fee_percent: int
        """

        self._data_transfer_subscriber_fee_percent = data_transfer_subscriber_fee_percent

    @property
    def description(self):
        """Gets the description of this Output.


        :return: The description of this Output.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Output.


        :param description: The description of this Output.
        :type description: str
        """

        self._description = description

    @property
    def destination(self):
        """Gets the destination of this Output.


        :return: The destination of this Output.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this Output.


        :param destination: The destination of this Output.
        :type destination: str
        """

        self._destination = destination

    @property
    def encryption(self):
        """Gets the encryption of this Output.


        :return: The encryption of this Output.
        :rtype: OutputEncryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this Output.


        :param encryption: The encryption of this Output.
        :type encryption: OutputEncryption
        """

        self._encryption = encryption

    @property
    def entitlement_arn(self):
        """Gets the entitlement_arn of this Output.


        :return: The entitlement_arn of this Output.
        :rtype: str
        """
        return self._entitlement_arn

    @entitlement_arn.setter
    def entitlement_arn(self, entitlement_arn):
        """Sets the entitlement_arn of this Output.


        :param entitlement_arn: The entitlement_arn of this Output.
        :type entitlement_arn: str
        """

        self._entitlement_arn = entitlement_arn

    @property
    def listener_address(self):
        """Gets the listener_address of this Output.


        :return: The listener_address of this Output.
        :rtype: str
        """
        return self._listener_address

    @listener_address.setter
    def listener_address(self, listener_address):
        """Sets the listener_address of this Output.


        :param listener_address: The listener_address of this Output.
        :type listener_address: str
        """

        self._listener_address = listener_address

    @property
    def media_live_input_arn(self):
        """Gets the media_live_input_arn of this Output.


        :return: The media_live_input_arn of this Output.
        :rtype: str
        """
        return self._media_live_input_arn

    @media_live_input_arn.setter
    def media_live_input_arn(self, media_live_input_arn):
        """Sets the media_live_input_arn of this Output.


        :param media_live_input_arn: The media_live_input_arn of this Output.
        :type media_live_input_arn: str
        """

        self._media_live_input_arn = media_live_input_arn

    @property
    def media_stream_output_configurations(self):
        """Gets the media_stream_output_configurations of this Output.


        :return: The media_stream_output_configurations of this Output.
        :rtype: List
        """
        return self._media_stream_output_configurations

    @media_stream_output_configurations.setter
    def media_stream_output_configurations(self, media_stream_output_configurations):
        """Sets the media_stream_output_configurations of this Output.


        :param media_stream_output_configurations: The media_stream_output_configurations of this Output.
        :type media_stream_output_configurations: List
        """

        self._media_stream_output_configurations = media_stream_output_configurations

    @property
    def name(self):
        """Gets the name of this Output.


        :return: The name of this Output.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Output.


        :param name: The name of this Output.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def output_arn(self):
        """Gets the output_arn of this Output.


        :return: The output_arn of this Output.
        :rtype: str
        """
        return self._output_arn

    @output_arn.setter
    def output_arn(self, output_arn):
        """Sets the output_arn of this Output.


        :param output_arn: The output_arn of this Output.
        :type output_arn: str
        """
        if output_arn is None:
            raise ValueError("Invalid value for `output_arn`, must not be `None`")

        self._output_arn = output_arn

    @property
    def port(self):
        """Gets the port of this Output.


        :return: The port of this Output.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Output.


        :param port: The port of this Output.
        :type port: int
        """

        self._port = port

    @property
    def transport(self):
        """Gets the transport of this Output.


        :return: The transport of this Output.
        :rtype: OutputTransport
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this Output.


        :param transport: The transport of this Output.
        :type transport: OutputTransport
        """

        self._transport = transport

    @property
    def vpc_interface_attachment(self):
        """Gets the vpc_interface_attachment of this Output.


        :return: The vpc_interface_attachment of this Output.
        :rtype: AddOutputRequestVpcInterfaceAttachment
        """
        return self._vpc_interface_attachment

    @vpc_interface_attachment.setter
    def vpc_interface_attachment(self, vpc_interface_attachment):
        """Sets the vpc_interface_attachment of this Output.


        :param vpc_interface_attachment: The vpc_interface_attachment of this Output.
        :type vpc_interface_attachment: AddOutputRequestVpcInterfaceAttachment
        """

        self._vpc_interface_attachment = vpc_interface_attachment

    @property
    def bridge_arn(self):
        """Gets the bridge_arn of this Output.


        :return: The bridge_arn of this Output.
        :rtype: str
        """
        return self._bridge_arn

    @bridge_arn.setter
    def bridge_arn(self, bridge_arn):
        """Sets the bridge_arn of this Output.


        :param bridge_arn: The bridge_arn of this Output.
        :type bridge_arn: str
        """

        self._bridge_arn = bridge_arn

    @property
    def bridge_ports(self):
        """Gets the bridge_ports of this Output.


        :return: The bridge_ports of this Output.
        :rtype: List
        """
        return self._bridge_ports

    @bridge_ports.setter
    def bridge_ports(self, bridge_ports):
        """Sets the bridge_ports of this Output.


        :param bridge_ports: The bridge_ports of this Output.
        :type bridge_ports: List
        """

        self._bridge_ports = bridge_ports
