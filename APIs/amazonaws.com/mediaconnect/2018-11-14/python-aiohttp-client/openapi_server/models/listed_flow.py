# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flow_maintenance import FlowMaintenance
from openapi_server.models.source_type import SourceType
from openapi_server.models.status import Status
from openapi_server import util


class ListedFlow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_zone: str=None, description: str=None, flow_arn: str=None, name: str=None, source_type: SourceType=None, status: Status=None, maintenance: FlowMaintenance=None):
        """ListedFlow - a model defined in OpenAPI

        :param availability_zone: The availability_zone of this ListedFlow.
        :param description: The description of this ListedFlow.
        :param flow_arn: The flow_arn of this ListedFlow.
        :param name: The name of this ListedFlow.
        :param source_type: The source_type of this ListedFlow.
        :param status: The status of this ListedFlow.
        :param maintenance: The maintenance of this ListedFlow.
        """
        self.openapi_types = {
            'availability_zone': str,
            'description': str,
            'flow_arn': str,
            'name': str,
            'source_type': SourceType,
            'status': Status,
            'maintenance': FlowMaintenance
        }

        self.attribute_map = {
            'availability_zone': 'AvailabilityZone',
            'description': 'Description',
            'flow_arn': 'FlowArn',
            'name': 'Name',
            'source_type': 'SourceType',
            'status': 'Status',
            'maintenance': 'Maintenance'
        }

        self._availability_zone = availability_zone
        self._description = description
        self._flow_arn = flow_arn
        self._name = name
        self._source_type = source_type
        self._status = status
        self._maintenance = maintenance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListedFlow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListedFlow of this ListedFlow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_zone(self):
        """Gets the availability_zone of this ListedFlow.


        :return: The availability_zone of this ListedFlow.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this ListedFlow.


        :param availability_zone: The availability_zone of this ListedFlow.
        :type availability_zone: str
        """
        if availability_zone is None:
            raise ValueError("Invalid value for `availability_zone`, must not be `None`")

        self._availability_zone = availability_zone

    @property
    def description(self):
        """Gets the description of this ListedFlow.


        :return: The description of this ListedFlow.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ListedFlow.


        :param description: The description of this ListedFlow.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def flow_arn(self):
        """Gets the flow_arn of this ListedFlow.


        :return: The flow_arn of this ListedFlow.
        :rtype: str
        """
        return self._flow_arn

    @flow_arn.setter
    def flow_arn(self, flow_arn):
        """Sets the flow_arn of this ListedFlow.


        :param flow_arn: The flow_arn of this ListedFlow.
        :type flow_arn: str
        """
        if flow_arn is None:
            raise ValueError("Invalid value for `flow_arn`, must not be `None`")

        self._flow_arn = flow_arn

    @property
    def name(self):
        """Gets the name of this ListedFlow.


        :return: The name of this ListedFlow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListedFlow.


        :param name: The name of this ListedFlow.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def source_type(self):
        """Gets the source_type of this ListedFlow.


        :return: The source_type of this ListedFlow.
        :rtype: SourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this ListedFlow.


        :param source_type: The source_type of this ListedFlow.
        :type source_type: SourceType
        """
        if source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")

        self._source_type = source_type

    @property
    def status(self):
        """Gets the status of this ListedFlow.


        :return: The status of this ListedFlow.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListedFlow.


        :param status: The status of this ListedFlow.
        :type status: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def maintenance(self):
        """Gets the maintenance of this ListedFlow.


        :return: The maintenance of this ListedFlow.
        :rtype: FlowMaintenance
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this ListedFlow.


        :param maintenance: The maintenance of this ListedFlow.
        :type maintenance: FlowMaintenance
        """

        self._maintenance = maintenance
