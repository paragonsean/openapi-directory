# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_media_stream_request import AddMediaStreamRequest
from openapi_server.models.add_output_request import AddOutputRequest
from openapi_server.models.create_bridge_request_source_failover_config import CreateBridgeRequestSourceFailoverConfig
from openapi_server.models.create_flow_request_maintenance import CreateFlowRequestMaintenance
from openapi_server.models.create_flow_request_source import CreateFlowRequestSource
from openapi_server.models.grant_entitlement_request import GrantEntitlementRequest
from openapi_server.models.set_source_request import SetSourceRequest
from openapi_server.models.vpc_interface_request import VpcInterfaceRequest
from openapi_server import util


class CreateFlowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_zone: str=None, entitlements: List[GrantEntitlementRequest]=None, media_streams: List[AddMediaStreamRequest]=None, name: str=None, outputs: List[AddOutputRequest]=None, source: CreateFlowRequestSource=None, source_failover_config: CreateBridgeRequestSourceFailoverConfig=None, sources: List[SetSourceRequest]=None, vpc_interfaces: List[VpcInterfaceRequest]=None, maintenance: CreateFlowRequestMaintenance=None):
        """CreateFlowRequest - a model defined in OpenAPI

        :param availability_zone: The availability_zone of this CreateFlowRequest.
        :param entitlements: The entitlements of this CreateFlowRequest.
        :param media_streams: The media_streams of this CreateFlowRequest.
        :param name: The name of this CreateFlowRequest.
        :param outputs: The outputs of this CreateFlowRequest.
        :param source: The source of this CreateFlowRequest.
        :param source_failover_config: The source_failover_config of this CreateFlowRequest.
        :param sources: The sources of this CreateFlowRequest.
        :param vpc_interfaces: The vpc_interfaces of this CreateFlowRequest.
        :param maintenance: The maintenance of this CreateFlowRequest.
        """
        self.openapi_types = {
            'availability_zone': str,
            'entitlements': List[GrantEntitlementRequest],
            'media_streams': List[AddMediaStreamRequest],
            'name': str,
            'outputs': List[AddOutputRequest],
            'source': CreateFlowRequestSource,
            'source_failover_config': CreateBridgeRequestSourceFailoverConfig,
            'sources': List[SetSourceRequest],
            'vpc_interfaces': List[VpcInterfaceRequest],
            'maintenance': CreateFlowRequestMaintenance
        }

        self.attribute_map = {
            'availability_zone': 'availabilityZone',
            'entitlements': 'entitlements',
            'media_streams': 'mediaStreams',
            'name': 'name',
            'outputs': 'outputs',
            'source': 'source',
            'source_failover_config': 'sourceFailoverConfig',
            'sources': 'sources',
            'vpc_interfaces': 'vpcInterfaces',
            'maintenance': 'maintenance'
        }

        self._availability_zone = availability_zone
        self._entitlements = entitlements
        self._media_streams = media_streams
        self._name = name
        self._outputs = outputs
        self._source = source
        self._source_failover_config = source_failover_config
        self._sources = sources
        self._vpc_interfaces = vpc_interfaces
        self._maintenance = maintenance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFlowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFlow_request of this CreateFlowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_zone(self):
        """Gets the availability_zone of this CreateFlowRequest.

        The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.

        :return: The availability_zone of this CreateFlowRequest.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this CreateFlowRequest.

        The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.

        :param availability_zone: The availability_zone of this CreateFlowRequest.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone

    @property
    def entitlements(self):
        """Gets the entitlements of this CreateFlowRequest.

        The entitlements that you want to grant on a flow.

        :return: The entitlements of this CreateFlowRequest.
        :rtype: List[GrantEntitlementRequest]
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this CreateFlowRequest.

        The entitlements that you want to grant on a flow.

        :param entitlements: The entitlements of this CreateFlowRequest.
        :type entitlements: List[GrantEntitlementRequest]
        """

        self._entitlements = entitlements

    @property
    def media_streams(self):
        """Gets the media_streams of this CreateFlowRequest.

        The media streams that you want to add to the flow. You can associate these media streams with sources and outputs on the flow.

        :return: The media_streams of this CreateFlowRequest.
        :rtype: List[AddMediaStreamRequest]
        """
        return self._media_streams

    @media_streams.setter
    def media_streams(self, media_streams):
        """Sets the media_streams of this CreateFlowRequest.

        The media streams that you want to add to the flow. You can associate these media streams with sources and outputs on the flow.

        :param media_streams: The media_streams of this CreateFlowRequest.
        :type media_streams: List[AddMediaStreamRequest]
        """

        self._media_streams = media_streams

    @property
    def name(self):
        """Gets the name of this CreateFlowRequest.

        The name of the flow.

        :return: The name of this CreateFlowRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFlowRequest.

        The name of the flow.

        :param name: The name of this CreateFlowRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def outputs(self):
        """Gets the outputs of this CreateFlowRequest.

        The outputs that you want to add to this flow.

        :return: The outputs of this CreateFlowRequest.
        :rtype: List[AddOutputRequest]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this CreateFlowRequest.

        The outputs that you want to add to this flow.

        :param outputs: The outputs of this CreateFlowRequest.
        :type outputs: List[AddOutputRequest]
        """

        self._outputs = outputs

    @property
    def source(self):
        """Gets the source of this CreateFlowRequest.


        :return: The source of this CreateFlowRequest.
        :rtype: CreateFlowRequestSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateFlowRequest.


        :param source: The source of this CreateFlowRequest.
        :type source: CreateFlowRequestSource
        """

        self._source = source

    @property
    def source_failover_config(self):
        """Gets the source_failover_config of this CreateFlowRequest.


        :return: The source_failover_config of this CreateFlowRequest.
        :rtype: CreateBridgeRequestSourceFailoverConfig
        """
        return self._source_failover_config

    @source_failover_config.setter
    def source_failover_config(self, source_failover_config):
        """Sets the source_failover_config of this CreateFlowRequest.


        :param source_failover_config: The source_failover_config of this CreateFlowRequest.
        :type source_failover_config: CreateBridgeRequestSourceFailoverConfig
        """

        self._source_failover_config = source_failover_config

    @property
    def sources(self):
        """Gets the sources of this CreateFlowRequest.

        

        :return: The sources of this CreateFlowRequest.
        :rtype: List[SetSourceRequest]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CreateFlowRequest.

        

        :param sources: The sources of this CreateFlowRequest.
        :type sources: List[SetSourceRequest]
        """

        self._sources = sources

    @property
    def vpc_interfaces(self):
        """Gets the vpc_interfaces of this CreateFlowRequest.

        The VPC interfaces you want on the flow.

        :return: The vpc_interfaces of this CreateFlowRequest.
        :rtype: List[VpcInterfaceRequest]
        """
        return self._vpc_interfaces

    @vpc_interfaces.setter
    def vpc_interfaces(self, vpc_interfaces):
        """Sets the vpc_interfaces of this CreateFlowRequest.

        The VPC interfaces you want on the flow.

        :param vpc_interfaces: The vpc_interfaces of this CreateFlowRequest.
        :type vpc_interfaces: List[VpcInterfaceRequest]
        """

        self._vpc_interfaces = vpc_interfaces

    @property
    def maintenance(self):
        """Gets the maintenance of this CreateFlowRequest.


        :return: The maintenance of this CreateFlowRequest.
        :rtype: CreateFlowRequestMaintenance
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this CreateFlowRequest.


        :param maintenance: The maintenance of this CreateFlowRequest.
        :type maintenance: CreateFlowRequestMaintenance
        """

        self._maintenance = maintenance
