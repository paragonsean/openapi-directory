# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bridge_source_failover_config import BridgeSourceFailoverConfig
from openapi_server.models.flow_maintenance import FlowMaintenance
from openapi_server.models.flow_source import FlowSource
from openapi_server.models.status import Status
from openapi_server import util


class Flow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_zone: str=None, description: str=None, egress_ip: str=None, entitlements: List=None, flow_arn: str=None, media_streams: List=None, name: str=None, outputs: List=None, source: FlowSource=None, source_failover_config: BridgeSourceFailoverConfig=None, sources: List=None, status: Status=None, vpc_interfaces: List=None, maintenance: FlowMaintenance=None):
        """Flow - a model defined in OpenAPI

        :param availability_zone: The availability_zone of this Flow.
        :param description: The description of this Flow.
        :param egress_ip: The egress_ip of this Flow.
        :param entitlements: The entitlements of this Flow.
        :param flow_arn: The flow_arn of this Flow.
        :param media_streams: The media_streams of this Flow.
        :param name: The name of this Flow.
        :param outputs: The outputs of this Flow.
        :param source: The source of this Flow.
        :param source_failover_config: The source_failover_config of this Flow.
        :param sources: The sources of this Flow.
        :param status: The status of this Flow.
        :param vpc_interfaces: The vpc_interfaces of this Flow.
        :param maintenance: The maintenance of this Flow.
        """
        self.openapi_types = {
            'availability_zone': str,
            'description': str,
            'egress_ip': str,
            'entitlements': List,
            'flow_arn': str,
            'media_streams': List,
            'name': str,
            'outputs': List,
            'source': FlowSource,
            'source_failover_config': BridgeSourceFailoverConfig,
            'sources': List,
            'status': Status,
            'vpc_interfaces': List,
            'maintenance': FlowMaintenance
        }

        self.attribute_map = {
            'availability_zone': 'AvailabilityZone',
            'description': 'Description',
            'egress_ip': 'EgressIp',
            'entitlements': 'Entitlements',
            'flow_arn': 'FlowArn',
            'media_streams': 'MediaStreams',
            'name': 'Name',
            'outputs': 'Outputs',
            'source': 'Source',
            'source_failover_config': 'SourceFailoverConfig',
            'sources': 'Sources',
            'status': 'Status',
            'vpc_interfaces': 'VpcInterfaces',
            'maintenance': 'Maintenance'
        }

        self._availability_zone = availability_zone
        self._description = description
        self._egress_ip = egress_ip
        self._entitlements = entitlements
        self._flow_arn = flow_arn
        self._media_streams = media_streams
        self._name = name
        self._outputs = outputs
        self._source = source
        self._source_failover_config = source_failover_config
        self._sources = sources
        self._status = status
        self._vpc_interfaces = vpc_interfaces
        self._maintenance = maintenance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Flow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Flow of this Flow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_zone(self):
        """Gets the availability_zone of this Flow.


        :return: The availability_zone of this Flow.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this Flow.


        :param availability_zone: The availability_zone of this Flow.
        :type availability_zone: str
        """
        if availability_zone is None:
            raise ValueError("Invalid value for `availability_zone`, must not be `None`")

        self._availability_zone = availability_zone

    @property
    def description(self):
        """Gets the description of this Flow.


        :return: The description of this Flow.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Flow.


        :param description: The description of this Flow.
        :type description: str
        """

        self._description = description

    @property
    def egress_ip(self):
        """Gets the egress_ip of this Flow.


        :return: The egress_ip of this Flow.
        :rtype: str
        """
        return self._egress_ip

    @egress_ip.setter
    def egress_ip(self, egress_ip):
        """Sets the egress_ip of this Flow.


        :param egress_ip: The egress_ip of this Flow.
        :type egress_ip: str
        """

        self._egress_ip = egress_ip

    @property
    def entitlements(self):
        """Gets the entitlements of this Flow.


        :return: The entitlements of this Flow.
        :rtype: List
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this Flow.


        :param entitlements: The entitlements of this Flow.
        :type entitlements: List
        """
        if entitlements is None:
            raise ValueError("Invalid value for `entitlements`, must not be `None`")

        self._entitlements = entitlements

    @property
    def flow_arn(self):
        """Gets the flow_arn of this Flow.


        :return: The flow_arn of this Flow.
        :rtype: str
        """
        return self._flow_arn

    @flow_arn.setter
    def flow_arn(self, flow_arn):
        """Sets the flow_arn of this Flow.


        :param flow_arn: The flow_arn of this Flow.
        :type flow_arn: str
        """
        if flow_arn is None:
            raise ValueError("Invalid value for `flow_arn`, must not be `None`")

        self._flow_arn = flow_arn

    @property
    def media_streams(self):
        """Gets the media_streams of this Flow.


        :return: The media_streams of this Flow.
        :rtype: List
        """
        return self._media_streams

    @media_streams.setter
    def media_streams(self, media_streams):
        """Sets the media_streams of this Flow.


        :param media_streams: The media_streams of this Flow.
        :type media_streams: List
        """

        self._media_streams = media_streams

    @property
    def name(self):
        """Gets the name of this Flow.


        :return: The name of this Flow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Flow.


        :param name: The name of this Flow.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def outputs(self):
        """Gets the outputs of this Flow.


        :return: The outputs of this Flow.
        :rtype: List
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this Flow.


        :param outputs: The outputs of this Flow.
        :type outputs: List
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")

        self._outputs = outputs

    @property
    def source(self):
        """Gets the source of this Flow.


        :return: The source of this Flow.
        :rtype: FlowSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Flow.


        :param source: The source of this Flow.
        :type source: FlowSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def source_failover_config(self):
        """Gets the source_failover_config of this Flow.


        :return: The source_failover_config of this Flow.
        :rtype: BridgeSourceFailoverConfig
        """
        return self._source_failover_config

    @source_failover_config.setter
    def source_failover_config(self, source_failover_config):
        """Sets the source_failover_config of this Flow.


        :param source_failover_config: The source_failover_config of this Flow.
        :type source_failover_config: BridgeSourceFailoverConfig
        """

        self._source_failover_config = source_failover_config

    @property
    def sources(self):
        """Gets the sources of this Flow.


        :return: The sources of this Flow.
        :rtype: List
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Flow.


        :param sources: The sources of this Flow.
        :type sources: List
        """

        self._sources = sources

    @property
    def status(self):
        """Gets the status of this Flow.


        :return: The status of this Flow.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Flow.


        :param status: The status of this Flow.
        :type status: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def vpc_interfaces(self):
        """Gets the vpc_interfaces of this Flow.


        :return: The vpc_interfaces of this Flow.
        :rtype: List
        """
        return self._vpc_interfaces

    @vpc_interfaces.setter
    def vpc_interfaces(self, vpc_interfaces):
        """Sets the vpc_interfaces of this Flow.


        :param vpc_interfaces: The vpc_interfaces of this Flow.
        :type vpc_interfaces: List
        """

        self._vpc_interfaces = vpc_interfaces

    @property
    def maintenance(self):
        """Gets the maintenance of this Flow.


        :return: The maintenance of this Flow.
        :rtype: FlowMaintenance
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance):
        """Sets the maintenance of this Flow.


        :param maintenance: The maintenance of this Flow.
        :type maintenance: FlowMaintenance
        """

        self._maintenance = maintenance
