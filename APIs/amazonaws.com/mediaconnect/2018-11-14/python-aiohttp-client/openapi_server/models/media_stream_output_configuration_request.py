# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encoding_name import EncodingName
from openapi_server.models.media_stream_output_configuration_request_encoding_parameters import MediaStreamOutputConfigurationRequestEncodingParameters
from openapi_server import util


class MediaStreamOutputConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_configurations: List=None, encoding_name: EncodingName=None, encoding_parameters: MediaStreamOutputConfigurationRequestEncodingParameters=None, media_stream_name: str=None):
        """MediaStreamOutputConfigurationRequest - a model defined in OpenAPI

        :param destination_configurations: The destination_configurations of this MediaStreamOutputConfigurationRequest.
        :param encoding_name: The encoding_name of this MediaStreamOutputConfigurationRequest.
        :param encoding_parameters: The encoding_parameters of this MediaStreamOutputConfigurationRequest.
        :param media_stream_name: The media_stream_name of this MediaStreamOutputConfigurationRequest.
        """
        self.openapi_types = {
            'destination_configurations': List,
            'encoding_name': EncodingName,
            'encoding_parameters': MediaStreamOutputConfigurationRequestEncodingParameters,
            'media_stream_name': str
        }

        self.attribute_map = {
            'destination_configurations': 'DestinationConfigurations',
            'encoding_name': 'EncodingName',
            'encoding_parameters': 'EncodingParameters',
            'media_stream_name': 'MediaStreamName'
        }

        self._destination_configurations = destination_configurations
        self._encoding_name = encoding_name
        self._encoding_parameters = encoding_parameters
        self._media_stream_name = media_stream_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaStreamOutputConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaStreamOutputConfigurationRequest of this MediaStreamOutputConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_configurations(self):
        """Gets the destination_configurations of this MediaStreamOutputConfigurationRequest.


        :return: The destination_configurations of this MediaStreamOutputConfigurationRequest.
        :rtype: List
        """
        return self._destination_configurations

    @destination_configurations.setter
    def destination_configurations(self, destination_configurations):
        """Sets the destination_configurations of this MediaStreamOutputConfigurationRequest.


        :param destination_configurations: The destination_configurations of this MediaStreamOutputConfigurationRequest.
        :type destination_configurations: List
        """

        self._destination_configurations = destination_configurations

    @property
    def encoding_name(self):
        """Gets the encoding_name of this MediaStreamOutputConfigurationRequest.


        :return: The encoding_name of this MediaStreamOutputConfigurationRequest.
        :rtype: EncodingName
        """
        return self._encoding_name

    @encoding_name.setter
    def encoding_name(self, encoding_name):
        """Sets the encoding_name of this MediaStreamOutputConfigurationRequest.


        :param encoding_name: The encoding_name of this MediaStreamOutputConfigurationRequest.
        :type encoding_name: EncodingName
        """
        if encoding_name is None:
            raise ValueError("Invalid value for `encoding_name`, must not be `None`")

        self._encoding_name = encoding_name

    @property
    def encoding_parameters(self):
        """Gets the encoding_parameters of this MediaStreamOutputConfigurationRequest.


        :return: The encoding_parameters of this MediaStreamOutputConfigurationRequest.
        :rtype: MediaStreamOutputConfigurationRequestEncodingParameters
        """
        return self._encoding_parameters

    @encoding_parameters.setter
    def encoding_parameters(self, encoding_parameters):
        """Sets the encoding_parameters of this MediaStreamOutputConfigurationRequest.


        :param encoding_parameters: The encoding_parameters of this MediaStreamOutputConfigurationRequest.
        :type encoding_parameters: MediaStreamOutputConfigurationRequestEncodingParameters
        """

        self._encoding_parameters = encoding_parameters

    @property
    def media_stream_name(self):
        """Gets the media_stream_name of this MediaStreamOutputConfigurationRequest.


        :return: The media_stream_name of this MediaStreamOutputConfigurationRequest.
        :rtype: str
        """
        return self._media_stream_name

    @media_stream_name.setter
    def media_stream_name(self, media_stream_name):
        """Sets the media_stream_name of this MediaStreamOutputConfigurationRequest.


        :param media_stream_name: The media_stream_name of this MediaStreamOutputConfigurationRequest.
        :type media_stream_name: str
        """
        if media_stream_name is None:
            raise ValueError("Invalid value for `media_stream_name`, must not be `None`")

        self._media_stream_name = media_stream_name
