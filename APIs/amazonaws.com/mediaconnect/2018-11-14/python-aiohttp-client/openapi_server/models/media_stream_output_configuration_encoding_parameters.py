# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encoder_profile import EncoderProfile
from openapi_server import util


class MediaStreamOutputConfigurationEncodingParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compression_factor: float=None, encoder_profile: EncoderProfile=None):
        """MediaStreamOutputConfigurationEncodingParameters - a model defined in OpenAPI

        :param compression_factor: The compression_factor of this MediaStreamOutputConfigurationEncodingParameters.
        :param encoder_profile: The encoder_profile of this MediaStreamOutputConfigurationEncodingParameters.
        """
        self.openapi_types = {
            'compression_factor': float,
            'encoder_profile': EncoderProfile
        }

        self.attribute_map = {
            'compression_factor': 'CompressionFactor',
            'encoder_profile': 'EncoderProfile'
        }

        self._compression_factor = compression_factor
        self._encoder_profile = encoder_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaStreamOutputConfigurationEncodingParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaStreamOutputConfiguration_EncodingParameters of this MediaStreamOutputConfigurationEncodingParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compression_factor(self):
        """Gets the compression_factor of this MediaStreamOutputConfigurationEncodingParameters.


        :return: The compression_factor of this MediaStreamOutputConfigurationEncodingParameters.
        :rtype: float
        """
        return self._compression_factor

    @compression_factor.setter
    def compression_factor(self, compression_factor):
        """Sets the compression_factor of this MediaStreamOutputConfigurationEncodingParameters.


        :param compression_factor: The compression_factor of this MediaStreamOutputConfigurationEncodingParameters.
        :type compression_factor: float
        """
        if compression_factor is None:
            raise ValueError("Invalid value for `compression_factor`, must not be `None`")

        self._compression_factor = compression_factor

    @property
    def encoder_profile(self):
        """Gets the encoder_profile of this MediaStreamOutputConfigurationEncodingParameters.


        :return: The encoder_profile of this MediaStreamOutputConfigurationEncodingParameters.
        :rtype: EncoderProfile
        """
        return self._encoder_profile

    @encoder_profile.setter
    def encoder_profile(self, encoder_profile):
        """Sets the encoder_profile of this MediaStreamOutputConfigurationEncodingParameters.


        :param encoder_profile: The encoder_profile of this MediaStreamOutputConfigurationEncodingParameters.
        :type encoder_profile: EncoderProfile
        """
        if encoder_profile is None:
            raise ValueError("Invalid value for `encoder_profile`, must not be `None`")

        self._encoder_profile = encoder_profile
