# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entitlement_status import EntitlementStatus
from openapi_server.models.grant_entitlement_request_encryption import GrantEntitlementRequestEncryption
from openapi_server import util


class GrantEntitlementRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_transfer_subscriber_fee_percent: int=None, description: str=None, encryption: GrantEntitlementRequestEncryption=None, entitlement_status: EntitlementStatus=None, name: str=None, subscribers: List=None):
        """GrantEntitlementRequest - a model defined in OpenAPI

        :param data_transfer_subscriber_fee_percent: The data_transfer_subscriber_fee_percent of this GrantEntitlementRequest.
        :param description: The description of this GrantEntitlementRequest.
        :param encryption: The encryption of this GrantEntitlementRequest.
        :param entitlement_status: The entitlement_status of this GrantEntitlementRequest.
        :param name: The name of this GrantEntitlementRequest.
        :param subscribers: The subscribers of this GrantEntitlementRequest.
        """
        self.openapi_types = {
            'data_transfer_subscriber_fee_percent': int,
            'description': str,
            'encryption': GrantEntitlementRequestEncryption,
            'entitlement_status': EntitlementStatus,
            'name': str,
            'subscribers': List
        }

        self.attribute_map = {
            'data_transfer_subscriber_fee_percent': 'DataTransferSubscriberFeePercent',
            'description': 'Description',
            'encryption': 'Encryption',
            'entitlement_status': 'EntitlementStatus',
            'name': 'Name',
            'subscribers': 'Subscribers'
        }

        self._data_transfer_subscriber_fee_percent = data_transfer_subscriber_fee_percent
        self._description = description
        self._encryption = encryption
        self._entitlement_status = entitlement_status
        self._name = name
        self._subscribers = subscribers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrantEntitlementRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrantEntitlementRequest of this GrantEntitlementRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_transfer_subscriber_fee_percent(self):
        """Gets the data_transfer_subscriber_fee_percent of this GrantEntitlementRequest.


        :return: The data_transfer_subscriber_fee_percent of this GrantEntitlementRequest.
        :rtype: int
        """
        return self._data_transfer_subscriber_fee_percent

    @data_transfer_subscriber_fee_percent.setter
    def data_transfer_subscriber_fee_percent(self, data_transfer_subscriber_fee_percent):
        """Sets the data_transfer_subscriber_fee_percent of this GrantEntitlementRequest.


        :param data_transfer_subscriber_fee_percent: The data_transfer_subscriber_fee_percent of this GrantEntitlementRequest.
        :type data_transfer_subscriber_fee_percent: int
        """

        self._data_transfer_subscriber_fee_percent = data_transfer_subscriber_fee_percent

    @property
    def description(self):
        """Gets the description of this GrantEntitlementRequest.


        :return: The description of this GrantEntitlementRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GrantEntitlementRequest.


        :param description: The description of this GrantEntitlementRequest.
        :type description: str
        """

        self._description = description

    @property
    def encryption(self):
        """Gets the encryption of this GrantEntitlementRequest.


        :return: The encryption of this GrantEntitlementRequest.
        :rtype: GrantEntitlementRequestEncryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this GrantEntitlementRequest.


        :param encryption: The encryption of this GrantEntitlementRequest.
        :type encryption: GrantEntitlementRequestEncryption
        """

        self._encryption = encryption

    @property
    def entitlement_status(self):
        """Gets the entitlement_status of this GrantEntitlementRequest.


        :return: The entitlement_status of this GrantEntitlementRequest.
        :rtype: EntitlementStatus
        """
        return self._entitlement_status

    @entitlement_status.setter
    def entitlement_status(self, entitlement_status):
        """Sets the entitlement_status of this GrantEntitlementRequest.


        :param entitlement_status: The entitlement_status of this GrantEntitlementRequest.
        :type entitlement_status: EntitlementStatus
        """

        self._entitlement_status = entitlement_status

    @property
    def name(self):
        """Gets the name of this GrantEntitlementRequest.


        :return: The name of this GrantEntitlementRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GrantEntitlementRequest.


        :param name: The name of this GrantEntitlementRequest.
        :type name: str
        """

        self._name = name

    @property
    def subscribers(self):
        """Gets the subscribers of this GrantEntitlementRequest.


        :return: The subscribers of this GrantEntitlementRequest.
        :rtype: List
        """
        return self._subscribers

    @subscribers.setter
    def subscribers(self, subscribers):
        """Sets the subscribers of this GrantEntitlementRequest.


        :param subscribers: The subscribers of this GrantEntitlementRequest.
        :type subscribers: List
        """
        if subscribers is None:
            raise ValueError("Invalid value for `subscribers`, must not be `None`")

        self._subscribers = subscribers
