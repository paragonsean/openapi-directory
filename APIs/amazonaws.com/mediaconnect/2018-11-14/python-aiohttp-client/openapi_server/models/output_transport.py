# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protocol import Protocol
from openapi_server import util


class OutputTransport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cidr_allow_list: List=None, max_bitrate: int=None, max_latency: int=None, max_sync_buffer: int=None, min_latency: int=None, protocol: Protocol=None, remote_id: str=None, sender_control_port: int=None, sender_ip_address: str=None, smoothing_latency: int=None, source_listener_address: str=None, source_listener_port: int=None, stream_id: str=None):
        """OutputTransport - a model defined in OpenAPI

        :param cidr_allow_list: The cidr_allow_list of this OutputTransport.
        :param max_bitrate: The max_bitrate of this OutputTransport.
        :param max_latency: The max_latency of this OutputTransport.
        :param max_sync_buffer: The max_sync_buffer of this OutputTransport.
        :param min_latency: The min_latency of this OutputTransport.
        :param protocol: The protocol of this OutputTransport.
        :param remote_id: The remote_id of this OutputTransport.
        :param sender_control_port: The sender_control_port of this OutputTransport.
        :param sender_ip_address: The sender_ip_address of this OutputTransport.
        :param smoothing_latency: The smoothing_latency of this OutputTransport.
        :param source_listener_address: The source_listener_address of this OutputTransport.
        :param source_listener_port: The source_listener_port of this OutputTransport.
        :param stream_id: The stream_id of this OutputTransport.
        """
        self.openapi_types = {
            'cidr_allow_list': List,
            'max_bitrate': int,
            'max_latency': int,
            'max_sync_buffer': int,
            'min_latency': int,
            'protocol': Protocol,
            'remote_id': str,
            'sender_control_port': int,
            'sender_ip_address': str,
            'smoothing_latency': int,
            'source_listener_address': str,
            'source_listener_port': int,
            'stream_id': str
        }

        self.attribute_map = {
            'cidr_allow_list': 'CidrAllowList',
            'max_bitrate': 'MaxBitrate',
            'max_latency': 'MaxLatency',
            'max_sync_buffer': 'MaxSyncBuffer',
            'min_latency': 'MinLatency',
            'protocol': 'Protocol',
            'remote_id': 'RemoteId',
            'sender_control_port': 'SenderControlPort',
            'sender_ip_address': 'SenderIpAddress',
            'smoothing_latency': 'SmoothingLatency',
            'source_listener_address': 'SourceListenerAddress',
            'source_listener_port': 'SourceListenerPort',
            'stream_id': 'StreamId'
        }

        self._cidr_allow_list = cidr_allow_list
        self._max_bitrate = max_bitrate
        self._max_latency = max_latency
        self._max_sync_buffer = max_sync_buffer
        self._min_latency = min_latency
        self._protocol = protocol
        self._remote_id = remote_id
        self._sender_control_port = sender_control_port
        self._sender_ip_address = sender_ip_address
        self._smoothing_latency = smoothing_latency
        self._source_listener_address = source_listener_address
        self._source_listener_port = source_listener_port
        self._stream_id = stream_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputTransport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Output_Transport of this OutputTransport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cidr_allow_list(self):
        """Gets the cidr_allow_list of this OutputTransport.


        :return: The cidr_allow_list of this OutputTransport.
        :rtype: List
        """
        return self._cidr_allow_list

    @cidr_allow_list.setter
    def cidr_allow_list(self, cidr_allow_list):
        """Sets the cidr_allow_list of this OutputTransport.


        :param cidr_allow_list: The cidr_allow_list of this OutputTransport.
        :type cidr_allow_list: List
        """

        self._cidr_allow_list = cidr_allow_list

    @property
    def max_bitrate(self):
        """Gets the max_bitrate of this OutputTransport.


        :return: The max_bitrate of this OutputTransport.
        :rtype: int
        """
        return self._max_bitrate

    @max_bitrate.setter
    def max_bitrate(self, max_bitrate):
        """Sets the max_bitrate of this OutputTransport.


        :param max_bitrate: The max_bitrate of this OutputTransport.
        :type max_bitrate: int
        """

        self._max_bitrate = max_bitrate

    @property
    def max_latency(self):
        """Gets the max_latency of this OutputTransport.


        :return: The max_latency of this OutputTransport.
        :rtype: int
        """
        return self._max_latency

    @max_latency.setter
    def max_latency(self, max_latency):
        """Sets the max_latency of this OutputTransport.


        :param max_latency: The max_latency of this OutputTransport.
        :type max_latency: int
        """

        self._max_latency = max_latency

    @property
    def max_sync_buffer(self):
        """Gets the max_sync_buffer of this OutputTransport.


        :return: The max_sync_buffer of this OutputTransport.
        :rtype: int
        """
        return self._max_sync_buffer

    @max_sync_buffer.setter
    def max_sync_buffer(self, max_sync_buffer):
        """Sets the max_sync_buffer of this OutputTransport.


        :param max_sync_buffer: The max_sync_buffer of this OutputTransport.
        :type max_sync_buffer: int
        """

        self._max_sync_buffer = max_sync_buffer

    @property
    def min_latency(self):
        """Gets the min_latency of this OutputTransport.


        :return: The min_latency of this OutputTransport.
        :rtype: int
        """
        return self._min_latency

    @min_latency.setter
    def min_latency(self, min_latency):
        """Sets the min_latency of this OutputTransport.


        :param min_latency: The min_latency of this OutputTransport.
        :type min_latency: int
        """

        self._min_latency = min_latency

    @property
    def protocol(self):
        """Gets the protocol of this OutputTransport.


        :return: The protocol of this OutputTransport.
        :rtype: Protocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this OutputTransport.


        :param protocol: The protocol of this OutputTransport.
        :type protocol: Protocol
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol

    @property
    def remote_id(self):
        """Gets the remote_id of this OutputTransport.


        :return: The remote_id of this OutputTransport.
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this OutputTransport.


        :param remote_id: The remote_id of this OutputTransport.
        :type remote_id: str
        """

        self._remote_id = remote_id

    @property
    def sender_control_port(self):
        """Gets the sender_control_port of this OutputTransport.


        :return: The sender_control_port of this OutputTransport.
        :rtype: int
        """
        return self._sender_control_port

    @sender_control_port.setter
    def sender_control_port(self, sender_control_port):
        """Sets the sender_control_port of this OutputTransport.


        :param sender_control_port: The sender_control_port of this OutputTransport.
        :type sender_control_port: int
        """

        self._sender_control_port = sender_control_port

    @property
    def sender_ip_address(self):
        """Gets the sender_ip_address of this OutputTransport.


        :return: The sender_ip_address of this OutputTransport.
        :rtype: str
        """
        return self._sender_ip_address

    @sender_ip_address.setter
    def sender_ip_address(self, sender_ip_address):
        """Sets the sender_ip_address of this OutputTransport.


        :param sender_ip_address: The sender_ip_address of this OutputTransport.
        :type sender_ip_address: str
        """

        self._sender_ip_address = sender_ip_address

    @property
    def smoothing_latency(self):
        """Gets the smoothing_latency of this OutputTransport.


        :return: The smoothing_latency of this OutputTransport.
        :rtype: int
        """
        return self._smoothing_latency

    @smoothing_latency.setter
    def smoothing_latency(self, smoothing_latency):
        """Sets the smoothing_latency of this OutputTransport.


        :param smoothing_latency: The smoothing_latency of this OutputTransport.
        :type smoothing_latency: int
        """

        self._smoothing_latency = smoothing_latency

    @property
    def source_listener_address(self):
        """Gets the source_listener_address of this OutputTransport.


        :return: The source_listener_address of this OutputTransport.
        :rtype: str
        """
        return self._source_listener_address

    @source_listener_address.setter
    def source_listener_address(self, source_listener_address):
        """Sets the source_listener_address of this OutputTransport.


        :param source_listener_address: The source_listener_address of this OutputTransport.
        :type source_listener_address: str
        """

        self._source_listener_address = source_listener_address

    @property
    def source_listener_port(self):
        """Gets the source_listener_port of this OutputTransport.


        :return: The source_listener_port of this OutputTransport.
        :rtype: int
        """
        return self._source_listener_port

    @source_listener_port.setter
    def source_listener_port(self, source_listener_port):
        """Sets the source_listener_port of this OutputTransport.


        :param source_listener_port: The source_listener_port of this OutputTransport.
        :type source_listener_port: int
        """

        self._source_listener_port = source_listener_port

    @property
    def stream_id(self):
        """Gets the stream_id of this OutputTransport.


        :return: The stream_id of this OutputTransport.
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this OutputTransport.


        :param stream_id: The stream_id of this OutputTransport.
        :type stream_id: str
        """

        self._stream_id = stream_id
