# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gateway_state import GatewayState
from openapi_server import util


class ListedGateway(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_arn: str=None, gateway_state: GatewayState=None, name: str=None):
        """ListedGateway - a model defined in OpenAPI

        :param gateway_arn: The gateway_arn of this ListedGateway.
        :param gateway_state: The gateway_state of this ListedGateway.
        :param name: The name of this ListedGateway.
        """
        self.openapi_types = {
            'gateway_arn': str,
            'gateway_state': GatewayState,
            'name': str
        }

        self.attribute_map = {
            'gateway_arn': 'GatewayArn',
            'gateway_state': 'GatewayState',
            'name': 'Name'
        }

        self._gateway_arn = gateway_arn
        self._gateway_state = gateway_state
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListedGateway':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListedGateway of this ListedGateway.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_arn(self):
        """Gets the gateway_arn of this ListedGateway.


        :return: The gateway_arn of this ListedGateway.
        :rtype: str
        """
        return self._gateway_arn

    @gateway_arn.setter
    def gateway_arn(self, gateway_arn):
        """Sets the gateway_arn of this ListedGateway.


        :param gateway_arn: The gateway_arn of this ListedGateway.
        :type gateway_arn: str
        """
        if gateway_arn is None:
            raise ValueError("Invalid value for `gateway_arn`, must not be `None`")

        self._gateway_arn = gateway_arn

    @property
    def gateway_state(self):
        """Gets the gateway_state of this ListedGateway.


        :return: The gateway_state of this ListedGateway.
        :rtype: GatewayState
        """
        return self._gateway_state

    @gateway_state.setter
    def gateway_state(self, gateway_state):
        """Sets the gateway_state of this ListedGateway.


        :param gateway_state: The gateway_state of this ListedGateway.
        :type gateway_state: GatewayState
        """
        if gateway_state is None:
            raise ValueError("Invalid value for `gateway_state`, must not be `None`")

        self._gateway_state = gateway_state

    @property
    def name(self):
        """Gets the name of this ListedGateway.


        :return: The name of this ListedGateway.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListedGateway.


        :param name: The name of this ListedGateway.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
