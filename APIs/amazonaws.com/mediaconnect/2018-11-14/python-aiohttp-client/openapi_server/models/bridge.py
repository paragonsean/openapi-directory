# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bridge_egress_gateway_bridge import BridgeEgressGatewayBridge
from openapi_server.models.bridge_ingress_gateway_bridge import BridgeIngressGatewayBridge
from openapi_server.models.bridge_source_failover_config import BridgeSourceFailoverConfig
from openapi_server.models.bridge_state import BridgeState
from openapi_server import util


class Bridge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bridge_arn: str=None, bridge_messages: List=None, bridge_state: BridgeState=None, egress_gateway_bridge: BridgeEgressGatewayBridge=None, ingress_gateway_bridge: BridgeIngressGatewayBridge=None, name: str=None, outputs: List=None, placement_arn: str=None, source_failover_config: BridgeSourceFailoverConfig=None, sources: List=None):
        """Bridge - a model defined in OpenAPI

        :param bridge_arn: The bridge_arn of this Bridge.
        :param bridge_messages: The bridge_messages of this Bridge.
        :param bridge_state: The bridge_state of this Bridge.
        :param egress_gateway_bridge: The egress_gateway_bridge of this Bridge.
        :param ingress_gateway_bridge: The ingress_gateway_bridge of this Bridge.
        :param name: The name of this Bridge.
        :param outputs: The outputs of this Bridge.
        :param placement_arn: The placement_arn of this Bridge.
        :param source_failover_config: The source_failover_config of this Bridge.
        :param sources: The sources of this Bridge.
        """
        self.openapi_types = {
            'bridge_arn': str,
            'bridge_messages': List,
            'bridge_state': BridgeState,
            'egress_gateway_bridge': BridgeEgressGatewayBridge,
            'ingress_gateway_bridge': BridgeIngressGatewayBridge,
            'name': str,
            'outputs': List,
            'placement_arn': str,
            'source_failover_config': BridgeSourceFailoverConfig,
            'sources': List
        }

        self.attribute_map = {
            'bridge_arn': 'BridgeArn',
            'bridge_messages': 'BridgeMessages',
            'bridge_state': 'BridgeState',
            'egress_gateway_bridge': 'EgressGatewayBridge',
            'ingress_gateway_bridge': 'IngressGatewayBridge',
            'name': 'Name',
            'outputs': 'Outputs',
            'placement_arn': 'PlacementArn',
            'source_failover_config': 'SourceFailoverConfig',
            'sources': 'Sources'
        }

        self._bridge_arn = bridge_arn
        self._bridge_messages = bridge_messages
        self._bridge_state = bridge_state
        self._egress_gateway_bridge = egress_gateway_bridge
        self._ingress_gateway_bridge = ingress_gateway_bridge
        self._name = name
        self._outputs = outputs
        self._placement_arn = placement_arn
        self._source_failover_config = source_failover_config
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bridge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bridge of this Bridge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bridge_arn(self):
        """Gets the bridge_arn of this Bridge.


        :return: The bridge_arn of this Bridge.
        :rtype: str
        """
        return self._bridge_arn

    @bridge_arn.setter
    def bridge_arn(self, bridge_arn):
        """Sets the bridge_arn of this Bridge.


        :param bridge_arn: The bridge_arn of this Bridge.
        :type bridge_arn: str
        """
        if bridge_arn is None:
            raise ValueError("Invalid value for `bridge_arn`, must not be `None`")

        self._bridge_arn = bridge_arn

    @property
    def bridge_messages(self):
        """Gets the bridge_messages of this Bridge.


        :return: The bridge_messages of this Bridge.
        :rtype: List
        """
        return self._bridge_messages

    @bridge_messages.setter
    def bridge_messages(self, bridge_messages):
        """Sets the bridge_messages of this Bridge.


        :param bridge_messages: The bridge_messages of this Bridge.
        :type bridge_messages: List
        """

        self._bridge_messages = bridge_messages

    @property
    def bridge_state(self):
        """Gets the bridge_state of this Bridge.


        :return: The bridge_state of this Bridge.
        :rtype: BridgeState
        """
        return self._bridge_state

    @bridge_state.setter
    def bridge_state(self, bridge_state):
        """Sets the bridge_state of this Bridge.


        :param bridge_state: The bridge_state of this Bridge.
        :type bridge_state: BridgeState
        """
        if bridge_state is None:
            raise ValueError("Invalid value for `bridge_state`, must not be `None`")

        self._bridge_state = bridge_state

    @property
    def egress_gateway_bridge(self):
        """Gets the egress_gateway_bridge of this Bridge.


        :return: The egress_gateway_bridge of this Bridge.
        :rtype: BridgeEgressGatewayBridge
        """
        return self._egress_gateway_bridge

    @egress_gateway_bridge.setter
    def egress_gateway_bridge(self, egress_gateway_bridge):
        """Sets the egress_gateway_bridge of this Bridge.


        :param egress_gateway_bridge: The egress_gateway_bridge of this Bridge.
        :type egress_gateway_bridge: BridgeEgressGatewayBridge
        """

        self._egress_gateway_bridge = egress_gateway_bridge

    @property
    def ingress_gateway_bridge(self):
        """Gets the ingress_gateway_bridge of this Bridge.


        :return: The ingress_gateway_bridge of this Bridge.
        :rtype: BridgeIngressGatewayBridge
        """
        return self._ingress_gateway_bridge

    @ingress_gateway_bridge.setter
    def ingress_gateway_bridge(self, ingress_gateway_bridge):
        """Sets the ingress_gateway_bridge of this Bridge.


        :param ingress_gateway_bridge: The ingress_gateway_bridge of this Bridge.
        :type ingress_gateway_bridge: BridgeIngressGatewayBridge
        """

        self._ingress_gateway_bridge = ingress_gateway_bridge

    @property
    def name(self):
        """Gets the name of this Bridge.


        :return: The name of this Bridge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Bridge.


        :param name: The name of this Bridge.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def outputs(self):
        """Gets the outputs of this Bridge.


        :return: The outputs of this Bridge.
        :rtype: List
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this Bridge.


        :param outputs: The outputs of this Bridge.
        :type outputs: List
        """

        self._outputs = outputs

    @property
    def placement_arn(self):
        """Gets the placement_arn of this Bridge.


        :return: The placement_arn of this Bridge.
        :rtype: str
        """
        return self._placement_arn

    @placement_arn.setter
    def placement_arn(self, placement_arn):
        """Sets the placement_arn of this Bridge.


        :param placement_arn: The placement_arn of this Bridge.
        :type placement_arn: str
        """
        if placement_arn is None:
            raise ValueError("Invalid value for `placement_arn`, must not be `None`")

        self._placement_arn = placement_arn

    @property
    def source_failover_config(self):
        """Gets the source_failover_config of this Bridge.


        :return: The source_failover_config of this Bridge.
        :rtype: BridgeSourceFailoverConfig
        """
        return self._source_failover_config

    @source_failover_config.setter
    def source_failover_config(self, source_failover_config):
        """Sets the source_failover_config of this Bridge.


        :param source_failover_config: The source_failover_config of this Bridge.
        :type source_failover_config: BridgeSourceFailoverConfig
        """

        self._source_failover_config = source_failover_config

    @property
    def sources(self):
        """Gets the sources of this Bridge.


        :return: The sources of this Bridge.
        :rtype: List
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Bridge.


        :param sources: The sources of this Bridge.
        :type sources: List
        """

        self._sources = sources
