# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bridge_placement import BridgePlacement
from openapi_server.models.connection_status import ConnectionStatus
from openapi_server.models.instance_state import InstanceState
from openapi_server import util


class DescribeGatewayInstanceResponseGatewayInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bridge_placement: BridgePlacement=None, connection_status: ConnectionStatus=None, gateway_arn: str=None, gateway_instance_arn: str=None, instance_id: str=None, instance_messages: List=None, instance_state: InstanceState=None, running_bridge_count: int=None):
        """DescribeGatewayInstanceResponseGatewayInstance - a model defined in OpenAPI

        :param bridge_placement: The bridge_placement of this DescribeGatewayInstanceResponseGatewayInstance.
        :param connection_status: The connection_status of this DescribeGatewayInstanceResponseGatewayInstance.
        :param gateway_arn: The gateway_arn of this DescribeGatewayInstanceResponseGatewayInstance.
        :param gateway_instance_arn: The gateway_instance_arn of this DescribeGatewayInstanceResponseGatewayInstance.
        :param instance_id: The instance_id of this DescribeGatewayInstanceResponseGatewayInstance.
        :param instance_messages: The instance_messages of this DescribeGatewayInstanceResponseGatewayInstance.
        :param instance_state: The instance_state of this DescribeGatewayInstanceResponseGatewayInstance.
        :param running_bridge_count: The running_bridge_count of this DescribeGatewayInstanceResponseGatewayInstance.
        """
        self.openapi_types = {
            'bridge_placement': BridgePlacement,
            'connection_status': ConnectionStatus,
            'gateway_arn': str,
            'gateway_instance_arn': str,
            'instance_id': str,
            'instance_messages': List,
            'instance_state': InstanceState,
            'running_bridge_count': int
        }

        self.attribute_map = {
            'bridge_placement': 'BridgePlacement',
            'connection_status': 'ConnectionStatus',
            'gateway_arn': 'GatewayArn',
            'gateway_instance_arn': 'GatewayInstanceArn',
            'instance_id': 'InstanceId',
            'instance_messages': 'InstanceMessages',
            'instance_state': 'InstanceState',
            'running_bridge_count': 'RunningBridgeCount'
        }

        self._bridge_placement = bridge_placement
        self._connection_status = connection_status
        self._gateway_arn = gateway_arn
        self._gateway_instance_arn = gateway_instance_arn
        self._instance_id = instance_id
        self._instance_messages = instance_messages
        self._instance_state = instance_state
        self._running_bridge_count = running_bridge_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeGatewayInstanceResponseGatewayInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeGatewayInstanceResponse_GatewayInstance of this DescribeGatewayInstanceResponseGatewayInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bridge_placement(self):
        """Gets the bridge_placement of this DescribeGatewayInstanceResponseGatewayInstance.


        :return: The bridge_placement of this DescribeGatewayInstanceResponseGatewayInstance.
        :rtype: BridgePlacement
        """
        return self._bridge_placement

    @bridge_placement.setter
    def bridge_placement(self, bridge_placement):
        """Sets the bridge_placement of this DescribeGatewayInstanceResponseGatewayInstance.


        :param bridge_placement: The bridge_placement of this DescribeGatewayInstanceResponseGatewayInstance.
        :type bridge_placement: BridgePlacement
        """
        if bridge_placement is None:
            raise ValueError("Invalid value for `bridge_placement`, must not be `None`")

        self._bridge_placement = bridge_placement

    @property
    def connection_status(self):
        """Gets the connection_status of this DescribeGatewayInstanceResponseGatewayInstance.


        :return: The connection_status of this DescribeGatewayInstanceResponseGatewayInstance.
        :rtype: ConnectionStatus
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this DescribeGatewayInstanceResponseGatewayInstance.


        :param connection_status: The connection_status of this DescribeGatewayInstanceResponseGatewayInstance.
        :type connection_status: ConnectionStatus
        """
        if connection_status is None:
            raise ValueError("Invalid value for `connection_status`, must not be `None`")

        self._connection_status = connection_status

    @property
    def gateway_arn(self):
        """Gets the gateway_arn of this DescribeGatewayInstanceResponseGatewayInstance.


        :return: The gateway_arn of this DescribeGatewayInstanceResponseGatewayInstance.
        :rtype: str
        """
        return self._gateway_arn

    @gateway_arn.setter
    def gateway_arn(self, gateway_arn):
        """Sets the gateway_arn of this DescribeGatewayInstanceResponseGatewayInstance.


        :param gateway_arn: The gateway_arn of this DescribeGatewayInstanceResponseGatewayInstance.
        :type gateway_arn: str
        """
        if gateway_arn is None:
            raise ValueError("Invalid value for `gateway_arn`, must not be `None`")

        self._gateway_arn = gateway_arn

    @property
    def gateway_instance_arn(self):
        """Gets the gateway_instance_arn of this DescribeGatewayInstanceResponseGatewayInstance.


        :return: The gateway_instance_arn of this DescribeGatewayInstanceResponseGatewayInstance.
        :rtype: str
        """
        return self._gateway_instance_arn

    @gateway_instance_arn.setter
    def gateway_instance_arn(self, gateway_instance_arn):
        """Sets the gateway_instance_arn of this DescribeGatewayInstanceResponseGatewayInstance.


        :param gateway_instance_arn: The gateway_instance_arn of this DescribeGatewayInstanceResponseGatewayInstance.
        :type gateway_instance_arn: str
        """
        if gateway_instance_arn is None:
            raise ValueError("Invalid value for `gateway_instance_arn`, must not be `None`")

        self._gateway_instance_arn = gateway_instance_arn

    @property
    def instance_id(self):
        """Gets the instance_id of this DescribeGatewayInstanceResponseGatewayInstance.


        :return: The instance_id of this DescribeGatewayInstanceResponseGatewayInstance.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this DescribeGatewayInstanceResponseGatewayInstance.


        :param instance_id: The instance_id of this DescribeGatewayInstanceResponseGatewayInstance.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def instance_messages(self):
        """Gets the instance_messages of this DescribeGatewayInstanceResponseGatewayInstance.


        :return: The instance_messages of this DescribeGatewayInstanceResponseGatewayInstance.
        :rtype: List
        """
        return self._instance_messages

    @instance_messages.setter
    def instance_messages(self, instance_messages):
        """Sets the instance_messages of this DescribeGatewayInstanceResponseGatewayInstance.


        :param instance_messages: The instance_messages of this DescribeGatewayInstanceResponseGatewayInstance.
        :type instance_messages: List
        """

        self._instance_messages = instance_messages

    @property
    def instance_state(self):
        """Gets the instance_state of this DescribeGatewayInstanceResponseGatewayInstance.


        :return: The instance_state of this DescribeGatewayInstanceResponseGatewayInstance.
        :rtype: InstanceState
        """
        return self._instance_state

    @instance_state.setter
    def instance_state(self, instance_state):
        """Sets the instance_state of this DescribeGatewayInstanceResponseGatewayInstance.


        :param instance_state: The instance_state of this DescribeGatewayInstanceResponseGatewayInstance.
        :type instance_state: InstanceState
        """
        if instance_state is None:
            raise ValueError("Invalid value for `instance_state`, must not be `None`")

        self._instance_state = instance_state

    @property
    def running_bridge_count(self):
        """Gets the running_bridge_count of this DescribeGatewayInstanceResponseGatewayInstance.


        :return: The running_bridge_count of this DescribeGatewayInstanceResponseGatewayInstance.
        :rtype: int
        """
        return self._running_bridge_count

    @running_bridge_count.setter
    def running_bridge_count(self, running_bridge_count):
        """Sets the running_bridge_count of this DescribeGatewayInstanceResponseGatewayInstance.


        :param running_bridge_count: The running_bridge_count of this DescribeGatewayInstanceResponseGatewayInstance.
        :type running_bridge_count: int
        """
        if running_bridge_count is None:
            raise ValueError("Invalid value for `running_bridge_count`, must not be `None`")

        self._running_bridge_count = running_bridge_count
