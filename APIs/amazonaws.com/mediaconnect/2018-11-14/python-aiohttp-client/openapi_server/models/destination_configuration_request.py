# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_configuration_request_interface import DestinationConfigurationRequestInterface
from openapi_server import util


class DestinationConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_ip: str=None, destination_port: int=None, interface: DestinationConfigurationRequestInterface=None):
        """DestinationConfigurationRequest - a model defined in OpenAPI

        :param destination_ip: The destination_ip of this DestinationConfigurationRequest.
        :param destination_port: The destination_port of this DestinationConfigurationRequest.
        :param interface: The interface of this DestinationConfigurationRequest.
        """
        self.openapi_types = {
            'destination_ip': str,
            'destination_port': int,
            'interface': DestinationConfigurationRequestInterface
        }

        self.attribute_map = {
            'destination_ip': 'DestinationIp',
            'destination_port': 'DestinationPort',
            'interface': 'Interface'
        }

        self._destination_ip = destination_ip
        self._destination_port = destination_port
        self._interface = interface

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationConfigurationRequest of this DestinationConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_ip(self):
        """Gets the destination_ip of this DestinationConfigurationRequest.


        :return: The destination_ip of this DestinationConfigurationRequest.
        :rtype: str
        """
        return self._destination_ip

    @destination_ip.setter
    def destination_ip(self, destination_ip):
        """Sets the destination_ip of this DestinationConfigurationRequest.


        :param destination_ip: The destination_ip of this DestinationConfigurationRequest.
        :type destination_ip: str
        """
        if destination_ip is None:
            raise ValueError("Invalid value for `destination_ip`, must not be `None`")

        self._destination_ip = destination_ip

    @property
    def destination_port(self):
        """Gets the destination_port of this DestinationConfigurationRequest.


        :return: The destination_port of this DestinationConfigurationRequest.
        :rtype: int
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this DestinationConfigurationRequest.


        :param destination_port: The destination_port of this DestinationConfigurationRequest.
        :type destination_port: int
        """
        if destination_port is None:
            raise ValueError("Invalid value for `destination_port`, must not be `None`")

        self._destination_port = destination_port

    @property
    def interface(self):
        """Gets the interface of this DestinationConfigurationRequest.


        :return: The interface of this DestinationConfigurationRequest.
        :rtype: DestinationConfigurationRequestInterface
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this DestinationConfigurationRequest.


        :param interface: The interface of this DestinationConfigurationRequest.
        :type interface: DestinationConfigurationRequestInterface
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")

        self._interface = interface
