# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.colorimetry import Colorimetry
from openapi_server.models.range import Range
from openapi_server.models.scan_mode import ScanMode
from openapi_server.models.tcs import Tcs
from openapi_server import util


class FmtpRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_order: str=None, colorimetry: Colorimetry=None, exact_framerate: str=None, par: str=None, range: Range=None, scan_mode: ScanMode=None, tcs: Tcs=None):
        """FmtpRequest - a model defined in OpenAPI

        :param channel_order: The channel_order of this FmtpRequest.
        :param colorimetry: The colorimetry of this FmtpRequest.
        :param exact_framerate: The exact_framerate of this FmtpRequest.
        :param par: The par of this FmtpRequest.
        :param range: The range of this FmtpRequest.
        :param scan_mode: The scan_mode of this FmtpRequest.
        :param tcs: The tcs of this FmtpRequest.
        """
        self.openapi_types = {
            'channel_order': str,
            'colorimetry': Colorimetry,
            'exact_framerate': str,
            'par': str,
            'range': Range,
            'scan_mode': ScanMode,
            'tcs': Tcs
        }

        self.attribute_map = {
            'channel_order': 'ChannelOrder',
            'colorimetry': 'Colorimetry',
            'exact_framerate': 'ExactFramerate',
            'par': 'Par',
            'range': 'Range',
            'scan_mode': 'ScanMode',
            'tcs': 'Tcs'
        }

        self._channel_order = channel_order
        self._colorimetry = colorimetry
        self._exact_framerate = exact_framerate
        self._par = par
        self._range = range
        self._scan_mode = scan_mode
        self._tcs = tcs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FmtpRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FmtpRequest of this FmtpRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_order(self):
        """Gets the channel_order of this FmtpRequest.


        :return: The channel_order of this FmtpRequest.
        :rtype: str
        """
        return self._channel_order

    @channel_order.setter
    def channel_order(self, channel_order):
        """Sets the channel_order of this FmtpRequest.


        :param channel_order: The channel_order of this FmtpRequest.
        :type channel_order: str
        """

        self._channel_order = channel_order

    @property
    def colorimetry(self):
        """Gets the colorimetry of this FmtpRequest.


        :return: The colorimetry of this FmtpRequest.
        :rtype: Colorimetry
        """
        return self._colorimetry

    @colorimetry.setter
    def colorimetry(self, colorimetry):
        """Sets the colorimetry of this FmtpRequest.


        :param colorimetry: The colorimetry of this FmtpRequest.
        :type colorimetry: Colorimetry
        """

        self._colorimetry = colorimetry

    @property
    def exact_framerate(self):
        """Gets the exact_framerate of this FmtpRequest.


        :return: The exact_framerate of this FmtpRequest.
        :rtype: str
        """
        return self._exact_framerate

    @exact_framerate.setter
    def exact_framerate(self, exact_framerate):
        """Sets the exact_framerate of this FmtpRequest.


        :param exact_framerate: The exact_framerate of this FmtpRequest.
        :type exact_framerate: str
        """

        self._exact_framerate = exact_framerate

    @property
    def par(self):
        """Gets the par of this FmtpRequest.


        :return: The par of this FmtpRequest.
        :rtype: str
        """
        return self._par

    @par.setter
    def par(self, par):
        """Sets the par of this FmtpRequest.


        :param par: The par of this FmtpRequest.
        :type par: str
        """

        self._par = par

    @property
    def range(self):
        """Gets the range of this FmtpRequest.


        :return: The range of this FmtpRequest.
        :rtype: Range
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this FmtpRequest.


        :param range: The range of this FmtpRequest.
        :type range: Range
        """

        self._range = range

    @property
    def scan_mode(self):
        """Gets the scan_mode of this FmtpRequest.


        :return: The scan_mode of this FmtpRequest.
        :rtype: ScanMode
        """
        return self._scan_mode

    @scan_mode.setter
    def scan_mode(self, scan_mode):
        """Sets the scan_mode of this FmtpRequest.


        :param scan_mode: The scan_mode of this FmtpRequest.
        :type scan_mode: ScanMode
        """

        self._scan_mode = scan_mode

    @property
    def tcs(self):
        """Gets the tcs of this FmtpRequest.


        :return: The tcs of this FmtpRequest.
        :rtype: Tcs
        """
        return self._tcs

    @tcs.setter
    def tcs(self, tcs):
        """Sets the tcs of this FmtpRequest.


        :param tcs: The tcs of this FmtpRequest.
        :type tcs: Tcs
        """

        self._tcs = tcs
