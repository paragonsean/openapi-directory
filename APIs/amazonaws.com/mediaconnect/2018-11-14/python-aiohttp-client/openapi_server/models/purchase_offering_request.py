# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PurchaseOfferingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reservation_name: str=None, start: str=None):
        """PurchaseOfferingRequest - a model defined in OpenAPI

        :param reservation_name: The reservation_name of this PurchaseOfferingRequest.
        :param start: The start of this PurchaseOfferingRequest.
        """
        self.openapi_types = {
            'reservation_name': str,
            'start': str
        }

        self.attribute_map = {
            'reservation_name': 'reservationName',
            'start': 'start'
        }

        self._reservation_name = reservation_name
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseOfferingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseOffering_request of this PurchaseOfferingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reservation_name(self):
        """Gets the reservation_name of this PurchaseOfferingRequest.

        The name that you want to use for the reservation.

        :return: The reservation_name of this PurchaseOfferingRequest.
        :rtype: str
        """
        return self._reservation_name

    @reservation_name.setter
    def reservation_name(self, reservation_name):
        """Sets the reservation_name of this PurchaseOfferingRequest.

        The name that you want to use for the reservation.

        :param reservation_name: The reservation_name of this PurchaseOfferingRequest.
        :type reservation_name: str
        """
        if reservation_name is None:
            raise ValueError("Invalid value for `reservation_name`, must not be `None`")

        self._reservation_name = reservation_name

    @property
    def start(self):
        """Gets the start of this PurchaseOfferingRequest.

        The date and time that you want the reservation to begin, in Coordinated Universal Time (UTC). You can specify any date and time between 12:00am on the first day of the current month to the current time on today's date, inclusive. Specify the start in a 24-hour notation. Use the following format: YYYY-MM-DDTHH:mm:SSZ, where T and Z are literal characters. For example, to specify 11:30pm on March 5, 2020, enter 2020-03-05T23:30:00Z.

        :return: The start of this PurchaseOfferingRequest.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this PurchaseOfferingRequest.

        The date and time that you want the reservation to begin, in Coordinated Universal Time (UTC). You can specify any date and time between 12:00am on the first day of the current month to the current time on today's date, inclusive. Specify the start in a 24-hour notation. Use the following format: YYYY-MM-DDTHH:mm:SSZ, where T and Z are literal characters. For example, to specify 11:30pm on March 5, 2020, enter 2020-03-05T23:30:00Z.

        :param start: The start of this PurchaseOfferingRequest.
        :type start: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start
