# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_type import ResourceType
from openapi_server import util


class ResourceSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reserved_bitrate: int=None, resource_type: ResourceType=None):
        """ResourceSpecification - a model defined in OpenAPI

        :param reserved_bitrate: The reserved_bitrate of this ResourceSpecification.
        :param resource_type: The resource_type of this ResourceSpecification.
        """
        self.openapi_types = {
            'reserved_bitrate': int,
            'resource_type': ResourceType
        }

        self.attribute_map = {
            'reserved_bitrate': 'ReservedBitrate',
            'resource_type': 'ResourceType'
        }

        self._reserved_bitrate = reserved_bitrate
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceSpecification of this ResourceSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reserved_bitrate(self):
        """Gets the reserved_bitrate of this ResourceSpecification.


        :return: The reserved_bitrate of this ResourceSpecification.
        :rtype: int
        """
        return self._reserved_bitrate

    @reserved_bitrate.setter
    def reserved_bitrate(self, reserved_bitrate):
        """Sets the reserved_bitrate of this ResourceSpecification.


        :param reserved_bitrate: The reserved_bitrate of this ResourceSpecification.
        :type reserved_bitrate: int
        """

        self._reserved_bitrate = reserved_bitrate

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceSpecification.


        :return: The resource_type of this ResourceSpecification.
        :rtype: ResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceSpecification.


        :param resource_type: The resource_type of this ResourceSpecification.
        :type resource_type: ResourceType
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type
