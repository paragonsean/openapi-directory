# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_stream_output_configuration_request import MediaStreamOutputConfigurationRequest
from openapi_server.models.update_flow_output_request_encryption import UpdateFlowOutputRequestEncryption
from openapi_server.models.update_flow_output_request_vpc_interface_attachment import UpdateFlowOutputRequestVpcInterfaceAttachment
from openapi_server import util


class UpdateFlowOutputRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cidr_allow_list: List[str]=None, description: str=None, destination: str=None, encryption: UpdateFlowOutputRequestEncryption=None, max_latency: int=None, media_stream_output_configurations: List[MediaStreamOutputConfigurationRequest]=None, min_latency: int=None, port: int=None, protocol: str=None, remote_id: str=None, sender_control_port: int=None, sender_ip_address: str=None, smoothing_latency: int=None, stream_id: str=None, vpc_interface_attachment: UpdateFlowOutputRequestVpcInterfaceAttachment=None):
        """UpdateFlowOutputRequest - a model defined in OpenAPI

        :param cidr_allow_list: The cidr_allow_list of this UpdateFlowOutputRequest.
        :param description: The description of this UpdateFlowOutputRequest.
        :param destination: The destination of this UpdateFlowOutputRequest.
        :param encryption: The encryption of this UpdateFlowOutputRequest.
        :param max_latency: The max_latency of this UpdateFlowOutputRequest.
        :param media_stream_output_configurations: The media_stream_output_configurations of this UpdateFlowOutputRequest.
        :param min_latency: The min_latency of this UpdateFlowOutputRequest.
        :param port: The port of this UpdateFlowOutputRequest.
        :param protocol: The protocol of this UpdateFlowOutputRequest.
        :param remote_id: The remote_id of this UpdateFlowOutputRequest.
        :param sender_control_port: The sender_control_port of this UpdateFlowOutputRequest.
        :param sender_ip_address: The sender_ip_address of this UpdateFlowOutputRequest.
        :param smoothing_latency: The smoothing_latency of this UpdateFlowOutputRequest.
        :param stream_id: The stream_id of this UpdateFlowOutputRequest.
        :param vpc_interface_attachment: The vpc_interface_attachment of this UpdateFlowOutputRequest.
        """
        self.openapi_types = {
            'cidr_allow_list': List[str],
            'description': str,
            'destination': str,
            'encryption': UpdateFlowOutputRequestEncryption,
            'max_latency': int,
            'media_stream_output_configurations': List[MediaStreamOutputConfigurationRequest],
            'min_latency': int,
            'port': int,
            'protocol': str,
            'remote_id': str,
            'sender_control_port': int,
            'sender_ip_address': str,
            'smoothing_latency': int,
            'stream_id': str,
            'vpc_interface_attachment': UpdateFlowOutputRequestVpcInterfaceAttachment
        }

        self.attribute_map = {
            'cidr_allow_list': 'cidrAllowList',
            'description': 'description',
            'destination': 'destination',
            'encryption': 'encryption',
            'max_latency': 'maxLatency',
            'media_stream_output_configurations': 'mediaStreamOutputConfigurations',
            'min_latency': 'minLatency',
            'port': 'port',
            'protocol': 'protocol',
            'remote_id': 'remoteId',
            'sender_control_port': 'senderControlPort',
            'sender_ip_address': 'senderIpAddress',
            'smoothing_latency': 'smoothingLatency',
            'stream_id': 'streamId',
            'vpc_interface_attachment': 'vpcInterfaceAttachment'
        }

        self._cidr_allow_list = cidr_allow_list
        self._description = description
        self._destination = destination
        self._encryption = encryption
        self._max_latency = max_latency
        self._media_stream_output_configurations = media_stream_output_configurations
        self._min_latency = min_latency
        self._port = port
        self._protocol = protocol
        self._remote_id = remote_id
        self._sender_control_port = sender_control_port
        self._sender_ip_address = sender_ip_address
        self._smoothing_latency = smoothing_latency
        self._stream_id = stream_id
        self._vpc_interface_attachment = vpc_interface_attachment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFlowOutputRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFlowOutput_request of this UpdateFlowOutputRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cidr_allow_list(self):
        """Gets the cidr_allow_list of this UpdateFlowOutputRequest.

        The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.

        :return: The cidr_allow_list of this UpdateFlowOutputRequest.
        :rtype: List[str]
        """
        return self._cidr_allow_list

    @cidr_allow_list.setter
    def cidr_allow_list(self, cidr_allow_list):
        """Sets the cidr_allow_list of this UpdateFlowOutputRequest.

        The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.

        :param cidr_allow_list: The cidr_allow_list of this UpdateFlowOutputRequest.
        :type cidr_allow_list: List[str]
        """

        self._cidr_allow_list = cidr_allow_list

    @property
    def description(self):
        """Gets the description of this UpdateFlowOutputRequest.

        A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.

        :return: The description of this UpdateFlowOutputRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateFlowOutputRequest.

        A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.

        :param description: The description of this UpdateFlowOutputRequest.
        :type description: str
        """

        self._description = description

    @property
    def destination(self):
        """Gets the destination of this UpdateFlowOutputRequest.

        The IP address where you want to send the output.

        :return: The destination of this UpdateFlowOutputRequest.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this UpdateFlowOutputRequest.

        The IP address where you want to send the output.

        :param destination: The destination of this UpdateFlowOutputRequest.
        :type destination: str
        """

        self._destination = destination

    @property
    def encryption(self):
        """Gets the encryption of this UpdateFlowOutputRequest.


        :return: The encryption of this UpdateFlowOutputRequest.
        :rtype: UpdateFlowOutputRequestEncryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this UpdateFlowOutputRequest.


        :param encryption: The encryption of this UpdateFlowOutputRequest.
        :type encryption: UpdateFlowOutputRequestEncryption
        """

        self._encryption = encryption

    @property
    def max_latency(self):
        """Gets the max_latency of this UpdateFlowOutputRequest.

        The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.

        :return: The max_latency of this UpdateFlowOutputRequest.
        :rtype: int
        """
        return self._max_latency

    @max_latency.setter
    def max_latency(self, max_latency):
        """Sets the max_latency of this UpdateFlowOutputRequest.

        The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.

        :param max_latency: The max_latency of this UpdateFlowOutputRequest.
        :type max_latency: int
        """

        self._max_latency = max_latency

    @property
    def media_stream_output_configurations(self):
        """Gets the media_stream_output_configurations of this UpdateFlowOutputRequest.

        The media streams that are associated with the output, and the parameters for those associations.

        :return: The media_stream_output_configurations of this UpdateFlowOutputRequest.
        :rtype: List[MediaStreamOutputConfigurationRequest]
        """
        return self._media_stream_output_configurations

    @media_stream_output_configurations.setter
    def media_stream_output_configurations(self, media_stream_output_configurations):
        """Sets the media_stream_output_configurations of this UpdateFlowOutputRequest.

        The media streams that are associated with the output, and the parameters for those associations.

        :param media_stream_output_configurations: The media_stream_output_configurations of this UpdateFlowOutputRequest.
        :type media_stream_output_configurations: List[MediaStreamOutputConfigurationRequest]
        """

        self._media_stream_output_configurations = media_stream_output_configurations

    @property
    def min_latency(self):
        """Gets the min_latency of this UpdateFlowOutputRequest.

        The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.

        :return: The min_latency of this UpdateFlowOutputRequest.
        :rtype: int
        """
        return self._min_latency

    @min_latency.setter
    def min_latency(self, min_latency):
        """Sets the min_latency of this UpdateFlowOutputRequest.

        The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.

        :param min_latency: The min_latency of this UpdateFlowOutputRequest.
        :type min_latency: int
        """

        self._min_latency = min_latency

    @property
    def port(self):
        """Gets the port of this UpdateFlowOutputRequest.

        The port to use when content is distributed to this output.

        :return: The port of this UpdateFlowOutputRequest.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this UpdateFlowOutputRequest.

        The port to use when content is distributed to this output.

        :param port: The port of this UpdateFlowOutputRequest.
        :type port: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this UpdateFlowOutputRequest.

        The protocol to use for the output.

        :return: The protocol of this UpdateFlowOutputRequest.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this UpdateFlowOutputRequest.

        The protocol to use for the output.

        :param protocol: The protocol of this UpdateFlowOutputRequest.
        :type protocol: str
        """
        allowed_values = ["zixi-push", "rtp-fec", "rtp", "zixi-pull", "rist", "st2110-jpegxs", "cdi", "srt-listener", "srt-caller", "fujitsu-qos", "udp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def remote_id(self):
        """Gets the remote_id of this UpdateFlowOutputRequest.

        The remote ID for the Zixi-pull stream.

        :return: The remote_id of this UpdateFlowOutputRequest.
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this UpdateFlowOutputRequest.

        The remote ID for the Zixi-pull stream.

        :param remote_id: The remote_id of this UpdateFlowOutputRequest.
        :type remote_id: str
        """

        self._remote_id = remote_id

    @property
    def sender_control_port(self):
        """Gets the sender_control_port of this UpdateFlowOutputRequest.

        The port that the flow uses to send outbound requests to initiate connection with the sender.

        :return: The sender_control_port of this UpdateFlowOutputRequest.
        :rtype: int
        """
        return self._sender_control_port

    @sender_control_port.setter
    def sender_control_port(self, sender_control_port):
        """Sets the sender_control_port of this UpdateFlowOutputRequest.

        The port that the flow uses to send outbound requests to initiate connection with the sender.

        :param sender_control_port: The sender_control_port of this UpdateFlowOutputRequest.
        :type sender_control_port: int
        """

        self._sender_control_port = sender_control_port

    @property
    def sender_ip_address(self):
        """Gets the sender_ip_address of this UpdateFlowOutputRequest.

        The IP address that the flow communicates with to initiate connection with the sender.

        :return: The sender_ip_address of this UpdateFlowOutputRequest.
        :rtype: str
        """
        return self._sender_ip_address

    @sender_ip_address.setter
    def sender_ip_address(self, sender_ip_address):
        """Sets the sender_ip_address of this UpdateFlowOutputRequest.

        The IP address that the flow communicates with to initiate connection with the sender.

        :param sender_ip_address: The sender_ip_address of this UpdateFlowOutputRequest.
        :type sender_ip_address: str
        """

        self._sender_ip_address = sender_ip_address

    @property
    def smoothing_latency(self):
        """Gets the smoothing_latency of this UpdateFlowOutputRequest.

        The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.

        :return: The smoothing_latency of this UpdateFlowOutputRequest.
        :rtype: int
        """
        return self._smoothing_latency

    @smoothing_latency.setter
    def smoothing_latency(self, smoothing_latency):
        """Sets the smoothing_latency of this UpdateFlowOutputRequest.

        The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.

        :param smoothing_latency: The smoothing_latency of this UpdateFlowOutputRequest.
        :type smoothing_latency: int
        """

        self._smoothing_latency = smoothing_latency

    @property
    def stream_id(self):
        """Gets the stream_id of this UpdateFlowOutputRequest.

        The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.

        :return: The stream_id of this UpdateFlowOutputRequest.
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this UpdateFlowOutputRequest.

        The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.

        :param stream_id: The stream_id of this UpdateFlowOutputRequest.
        :type stream_id: str
        """

        self._stream_id = stream_id

    @property
    def vpc_interface_attachment(self):
        """Gets the vpc_interface_attachment of this UpdateFlowOutputRequest.


        :return: The vpc_interface_attachment of this UpdateFlowOutputRequest.
        :rtype: UpdateFlowOutputRequestVpcInterfaceAttachment
        """
        return self._vpc_interface_attachment

    @vpc_interface_attachment.setter
    def vpc_interface_attachment(self, vpc_interface_attachment):
        """Sets the vpc_interface_attachment of this UpdateFlowOutputRequest.


        :param vpc_interface_attachment: The vpc_interface_attachment of this UpdateFlowOutputRequest.
        :type vpc_interface_attachment: UpdateFlowOutputRequestVpcInterfaceAttachment
        """

        self._vpc_interface_attachment = vpc_interface_attachment
