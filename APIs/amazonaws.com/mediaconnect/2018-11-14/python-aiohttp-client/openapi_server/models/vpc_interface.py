# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_interface_type import NetworkInterfaceType
from openapi_server import util


class VpcInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, network_interface_ids: List=None, network_interface_type: NetworkInterfaceType=None, role_arn: str=None, security_group_ids: List=None, subnet_id: str=None):
        """VpcInterface - a model defined in OpenAPI

        :param name: The name of this VpcInterface.
        :param network_interface_ids: The network_interface_ids of this VpcInterface.
        :param network_interface_type: The network_interface_type of this VpcInterface.
        :param role_arn: The role_arn of this VpcInterface.
        :param security_group_ids: The security_group_ids of this VpcInterface.
        :param subnet_id: The subnet_id of this VpcInterface.
        """
        self.openapi_types = {
            'name': str,
            'network_interface_ids': List,
            'network_interface_type': NetworkInterfaceType,
            'role_arn': str,
            'security_group_ids': List,
            'subnet_id': str
        }

        self.attribute_map = {
            'name': 'Name',
            'network_interface_ids': 'NetworkInterfaceIds',
            'network_interface_type': 'NetworkInterfaceType',
            'role_arn': 'RoleArn',
            'security_group_ids': 'SecurityGroupIds',
            'subnet_id': 'SubnetId'
        }

        self._name = name
        self._network_interface_ids = network_interface_ids
        self._network_interface_type = network_interface_type
        self._role_arn = role_arn
        self._security_group_ids = security_group_ids
        self._subnet_id = subnet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VpcInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VpcInterface of this VpcInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this VpcInterface.


        :return: The name of this VpcInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VpcInterface.


        :param name: The name of this VpcInterface.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def network_interface_ids(self):
        """Gets the network_interface_ids of this VpcInterface.


        :return: The network_interface_ids of this VpcInterface.
        :rtype: List
        """
        return self._network_interface_ids

    @network_interface_ids.setter
    def network_interface_ids(self, network_interface_ids):
        """Sets the network_interface_ids of this VpcInterface.


        :param network_interface_ids: The network_interface_ids of this VpcInterface.
        :type network_interface_ids: List
        """
        if network_interface_ids is None:
            raise ValueError("Invalid value for `network_interface_ids`, must not be `None`")

        self._network_interface_ids = network_interface_ids

    @property
    def network_interface_type(self):
        """Gets the network_interface_type of this VpcInterface.


        :return: The network_interface_type of this VpcInterface.
        :rtype: NetworkInterfaceType
        """
        return self._network_interface_type

    @network_interface_type.setter
    def network_interface_type(self, network_interface_type):
        """Sets the network_interface_type of this VpcInterface.


        :param network_interface_type: The network_interface_type of this VpcInterface.
        :type network_interface_type: NetworkInterfaceType
        """
        if network_interface_type is None:
            raise ValueError("Invalid value for `network_interface_type`, must not be `None`")

        self._network_interface_type = network_interface_type

    @property
    def role_arn(self):
        """Gets the role_arn of this VpcInterface.


        :return: The role_arn of this VpcInterface.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this VpcInterface.


        :param role_arn: The role_arn of this VpcInterface.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this VpcInterface.


        :return: The security_group_ids of this VpcInterface.
        :rtype: List
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this VpcInterface.


        :param security_group_ids: The security_group_ids of this VpcInterface.
        :type security_group_ids: List
        """
        if security_group_ids is None:
            raise ValueError("Invalid value for `security_group_ids`, must not be `None`")

        self._security_group_ids = security_group_ids

    @property
    def subnet_id(self):
        """Gets the subnet_id of this VpcInterface.


        :return: The subnet_id of this VpcInterface.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this VpcInterface.


        :param subnet_id: The subnet_id of this VpcInterface.
        :type subnet_id: str
        """
        if subnet_id is None:
            raise ValueError("Invalid value for `subnet_id`, must not be `None`")

        self._subnet_id = subnet_id
