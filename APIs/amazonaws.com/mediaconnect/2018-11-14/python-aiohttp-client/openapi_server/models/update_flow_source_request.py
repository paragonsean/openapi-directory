# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_stream_source_configuration_request import MediaStreamSourceConfigurationRequest
from openapi_server.models.update_flow_output_request_encryption import UpdateFlowOutputRequestEncryption
from openapi_server.models.update_flow_source_request_gateway_bridge_source import UpdateFlowSourceRequestGatewayBridgeSource
from openapi_server import util


class UpdateFlowSourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, decryption: UpdateFlowOutputRequestEncryption=None, description: str=None, entitlement_arn: str=None, ingest_port: int=None, max_bitrate: int=None, max_latency: int=None, max_sync_buffer: int=None, media_stream_source_configurations: List[MediaStreamSourceConfigurationRequest]=None, min_latency: int=None, protocol: str=None, sender_control_port: int=None, sender_ip_address: str=None, source_listener_address: str=None, source_listener_port: int=None, stream_id: str=None, vpc_interface_name: str=None, whitelist_cidr: str=None, gateway_bridge_source: UpdateFlowSourceRequestGatewayBridgeSource=None):
        """UpdateFlowSourceRequest - a model defined in OpenAPI

        :param decryption: The decryption of this UpdateFlowSourceRequest.
        :param description: The description of this UpdateFlowSourceRequest.
        :param entitlement_arn: The entitlement_arn of this UpdateFlowSourceRequest.
        :param ingest_port: The ingest_port of this UpdateFlowSourceRequest.
        :param max_bitrate: The max_bitrate of this UpdateFlowSourceRequest.
        :param max_latency: The max_latency of this UpdateFlowSourceRequest.
        :param max_sync_buffer: The max_sync_buffer of this UpdateFlowSourceRequest.
        :param media_stream_source_configurations: The media_stream_source_configurations of this UpdateFlowSourceRequest.
        :param min_latency: The min_latency of this UpdateFlowSourceRequest.
        :param protocol: The protocol of this UpdateFlowSourceRequest.
        :param sender_control_port: The sender_control_port of this UpdateFlowSourceRequest.
        :param sender_ip_address: The sender_ip_address of this UpdateFlowSourceRequest.
        :param source_listener_address: The source_listener_address of this UpdateFlowSourceRequest.
        :param source_listener_port: The source_listener_port of this UpdateFlowSourceRequest.
        :param stream_id: The stream_id of this UpdateFlowSourceRequest.
        :param vpc_interface_name: The vpc_interface_name of this UpdateFlowSourceRequest.
        :param whitelist_cidr: The whitelist_cidr of this UpdateFlowSourceRequest.
        :param gateway_bridge_source: The gateway_bridge_source of this UpdateFlowSourceRequest.
        """
        self.openapi_types = {
            'decryption': UpdateFlowOutputRequestEncryption,
            'description': str,
            'entitlement_arn': str,
            'ingest_port': int,
            'max_bitrate': int,
            'max_latency': int,
            'max_sync_buffer': int,
            'media_stream_source_configurations': List[MediaStreamSourceConfigurationRequest],
            'min_latency': int,
            'protocol': str,
            'sender_control_port': int,
            'sender_ip_address': str,
            'source_listener_address': str,
            'source_listener_port': int,
            'stream_id': str,
            'vpc_interface_name': str,
            'whitelist_cidr': str,
            'gateway_bridge_source': UpdateFlowSourceRequestGatewayBridgeSource
        }

        self.attribute_map = {
            'decryption': 'decryption',
            'description': 'description',
            'entitlement_arn': 'entitlementArn',
            'ingest_port': 'ingestPort',
            'max_bitrate': 'maxBitrate',
            'max_latency': 'maxLatency',
            'max_sync_buffer': 'maxSyncBuffer',
            'media_stream_source_configurations': 'mediaStreamSourceConfigurations',
            'min_latency': 'minLatency',
            'protocol': 'protocol',
            'sender_control_port': 'senderControlPort',
            'sender_ip_address': 'senderIpAddress',
            'source_listener_address': 'sourceListenerAddress',
            'source_listener_port': 'sourceListenerPort',
            'stream_id': 'streamId',
            'vpc_interface_name': 'vpcInterfaceName',
            'whitelist_cidr': 'whitelistCidr',
            'gateway_bridge_source': 'gatewayBridgeSource'
        }

        self._decryption = decryption
        self._description = description
        self._entitlement_arn = entitlement_arn
        self._ingest_port = ingest_port
        self._max_bitrate = max_bitrate
        self._max_latency = max_latency
        self._max_sync_buffer = max_sync_buffer
        self._media_stream_source_configurations = media_stream_source_configurations
        self._min_latency = min_latency
        self._protocol = protocol
        self._sender_control_port = sender_control_port
        self._sender_ip_address = sender_ip_address
        self._source_listener_address = source_listener_address
        self._source_listener_port = source_listener_port
        self._stream_id = stream_id
        self._vpc_interface_name = vpc_interface_name
        self._whitelist_cidr = whitelist_cidr
        self._gateway_bridge_source = gateway_bridge_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFlowSourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFlowSource_request of this UpdateFlowSourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def decryption(self):
        """Gets the decryption of this UpdateFlowSourceRequest.


        :return: The decryption of this UpdateFlowSourceRequest.
        :rtype: UpdateFlowOutputRequestEncryption
        """
        return self._decryption

    @decryption.setter
    def decryption(self, decryption):
        """Sets the decryption of this UpdateFlowSourceRequest.


        :param decryption: The decryption of this UpdateFlowSourceRequest.
        :type decryption: UpdateFlowOutputRequestEncryption
        """

        self._decryption = decryption

    @property
    def description(self):
        """Gets the description of this UpdateFlowSourceRequest.

        A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.

        :return: The description of this UpdateFlowSourceRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateFlowSourceRequest.

        A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.

        :param description: The description of this UpdateFlowSourceRequest.
        :type description: str
        """

        self._description = description

    @property
    def entitlement_arn(self):
        """Gets the entitlement_arn of this UpdateFlowSourceRequest.

        The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.

        :return: The entitlement_arn of this UpdateFlowSourceRequest.
        :rtype: str
        """
        return self._entitlement_arn

    @entitlement_arn.setter
    def entitlement_arn(self, entitlement_arn):
        """Sets the entitlement_arn of this UpdateFlowSourceRequest.

        The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.

        :param entitlement_arn: The entitlement_arn of this UpdateFlowSourceRequest.
        :type entitlement_arn: str
        """

        self._entitlement_arn = entitlement_arn

    @property
    def ingest_port(self):
        """Gets the ingest_port of this UpdateFlowSourceRequest.

        The port that the flow will be listening on for incoming content.

        :return: The ingest_port of this UpdateFlowSourceRequest.
        :rtype: int
        """
        return self._ingest_port

    @ingest_port.setter
    def ingest_port(self, ingest_port):
        """Sets the ingest_port of this UpdateFlowSourceRequest.

        The port that the flow will be listening on for incoming content.

        :param ingest_port: The ingest_port of this UpdateFlowSourceRequest.
        :type ingest_port: int
        """

        self._ingest_port = ingest_port

    @property
    def max_bitrate(self):
        """Gets the max_bitrate of this UpdateFlowSourceRequest.

        The smoothing max bitrate (in bps) for RIST, RTP, and RTP-FEC streams.

        :return: The max_bitrate of this UpdateFlowSourceRequest.
        :rtype: int
        """
        return self._max_bitrate

    @max_bitrate.setter
    def max_bitrate(self, max_bitrate):
        """Sets the max_bitrate of this UpdateFlowSourceRequest.

        The smoothing max bitrate (in bps) for RIST, RTP, and RTP-FEC streams.

        :param max_bitrate: The max_bitrate of this UpdateFlowSourceRequest.
        :type max_bitrate: int
        """

        self._max_bitrate = max_bitrate

    @property
    def max_latency(self):
        """Gets the max_latency of this UpdateFlowSourceRequest.

        The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.

        :return: The max_latency of this UpdateFlowSourceRequest.
        :rtype: int
        """
        return self._max_latency

    @max_latency.setter
    def max_latency(self, max_latency):
        """Sets the max_latency of this UpdateFlowSourceRequest.

        The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.

        :param max_latency: The max_latency of this UpdateFlowSourceRequest.
        :type max_latency: int
        """

        self._max_latency = max_latency

    @property
    def max_sync_buffer(self):
        """Gets the max_sync_buffer of this UpdateFlowSourceRequest.

        The size of the buffer (in milliseconds) to use to sync incoming source data.

        :return: The max_sync_buffer of this UpdateFlowSourceRequest.
        :rtype: int
        """
        return self._max_sync_buffer

    @max_sync_buffer.setter
    def max_sync_buffer(self, max_sync_buffer):
        """Sets the max_sync_buffer of this UpdateFlowSourceRequest.

        The size of the buffer (in milliseconds) to use to sync incoming source data.

        :param max_sync_buffer: The max_sync_buffer of this UpdateFlowSourceRequest.
        :type max_sync_buffer: int
        """

        self._max_sync_buffer = max_sync_buffer

    @property
    def media_stream_source_configurations(self):
        """Gets the media_stream_source_configurations of this UpdateFlowSourceRequest.

        The media streams that are associated with the source, and the parameters for those associations.

        :return: The media_stream_source_configurations of this UpdateFlowSourceRequest.
        :rtype: List[MediaStreamSourceConfigurationRequest]
        """
        return self._media_stream_source_configurations

    @media_stream_source_configurations.setter
    def media_stream_source_configurations(self, media_stream_source_configurations):
        """Sets the media_stream_source_configurations of this UpdateFlowSourceRequest.

        The media streams that are associated with the source, and the parameters for those associations.

        :param media_stream_source_configurations: The media_stream_source_configurations of this UpdateFlowSourceRequest.
        :type media_stream_source_configurations: List[MediaStreamSourceConfigurationRequest]
        """

        self._media_stream_source_configurations = media_stream_source_configurations

    @property
    def min_latency(self):
        """Gets the min_latency of this UpdateFlowSourceRequest.

        The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.

        :return: The min_latency of this UpdateFlowSourceRequest.
        :rtype: int
        """
        return self._min_latency

    @min_latency.setter
    def min_latency(self, min_latency):
        """Sets the min_latency of this UpdateFlowSourceRequest.

        The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.

        :param min_latency: The min_latency of this UpdateFlowSourceRequest.
        :type min_latency: int
        """

        self._min_latency = min_latency

    @property
    def protocol(self):
        """Gets the protocol of this UpdateFlowSourceRequest.

        The protocol that is used by the source.

        :return: The protocol of this UpdateFlowSourceRequest.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this UpdateFlowSourceRequest.

        The protocol that is used by the source.

        :param protocol: The protocol of this UpdateFlowSourceRequest.
        :type protocol: str
        """
        allowed_values = ["zixi-push", "rtp-fec", "rtp", "zixi-pull", "rist", "st2110-jpegxs", "cdi", "srt-listener", "srt-caller", "fujitsu-qos", "udp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def sender_control_port(self):
        """Gets the sender_control_port of this UpdateFlowSourceRequest.

        The port that the flow uses to send outbound requests to initiate connection with the sender.

        :return: The sender_control_port of this UpdateFlowSourceRequest.
        :rtype: int
        """
        return self._sender_control_port

    @sender_control_port.setter
    def sender_control_port(self, sender_control_port):
        """Sets the sender_control_port of this UpdateFlowSourceRequest.

        The port that the flow uses to send outbound requests to initiate connection with the sender.

        :param sender_control_port: The sender_control_port of this UpdateFlowSourceRequest.
        :type sender_control_port: int
        """

        self._sender_control_port = sender_control_port

    @property
    def sender_ip_address(self):
        """Gets the sender_ip_address of this UpdateFlowSourceRequest.

        The IP address that the flow communicates with to initiate connection with the sender.

        :return: The sender_ip_address of this UpdateFlowSourceRequest.
        :rtype: str
        """
        return self._sender_ip_address

    @sender_ip_address.setter
    def sender_ip_address(self, sender_ip_address):
        """Sets the sender_ip_address of this UpdateFlowSourceRequest.

        The IP address that the flow communicates with to initiate connection with the sender.

        :param sender_ip_address: The sender_ip_address of this UpdateFlowSourceRequest.
        :type sender_ip_address: str
        """

        self._sender_ip_address = sender_ip_address

    @property
    def source_listener_address(self):
        """Gets the source_listener_address of this UpdateFlowSourceRequest.

        Source IP or domain name for SRT-caller protocol.

        :return: The source_listener_address of this UpdateFlowSourceRequest.
        :rtype: str
        """
        return self._source_listener_address

    @source_listener_address.setter
    def source_listener_address(self, source_listener_address):
        """Sets the source_listener_address of this UpdateFlowSourceRequest.

        Source IP or domain name for SRT-caller protocol.

        :param source_listener_address: The source_listener_address of this UpdateFlowSourceRequest.
        :type source_listener_address: str
        """

        self._source_listener_address = source_listener_address

    @property
    def source_listener_port(self):
        """Gets the source_listener_port of this UpdateFlowSourceRequest.

        Source port for SRT-caller protocol.

        :return: The source_listener_port of this UpdateFlowSourceRequest.
        :rtype: int
        """
        return self._source_listener_port

    @source_listener_port.setter
    def source_listener_port(self, source_listener_port):
        """Sets the source_listener_port of this UpdateFlowSourceRequest.

        Source port for SRT-caller protocol.

        :param source_listener_port: The source_listener_port of this UpdateFlowSourceRequest.
        :type source_listener_port: int
        """

        self._source_listener_port = source_listener_port

    @property
    def stream_id(self):
        """Gets the stream_id of this UpdateFlowSourceRequest.

        The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.

        :return: The stream_id of this UpdateFlowSourceRequest.
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this UpdateFlowSourceRequest.

        The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.

        :param stream_id: The stream_id of this UpdateFlowSourceRequest.
        :type stream_id: str
        """

        self._stream_id = stream_id

    @property
    def vpc_interface_name(self):
        """Gets the vpc_interface_name of this UpdateFlowSourceRequest.

        The name of the VPC interface to use for this source.

        :return: The vpc_interface_name of this UpdateFlowSourceRequest.
        :rtype: str
        """
        return self._vpc_interface_name

    @vpc_interface_name.setter
    def vpc_interface_name(self, vpc_interface_name):
        """Sets the vpc_interface_name of this UpdateFlowSourceRequest.

        The name of the VPC interface to use for this source.

        :param vpc_interface_name: The vpc_interface_name of this UpdateFlowSourceRequest.
        :type vpc_interface_name: str
        """

        self._vpc_interface_name = vpc_interface_name

    @property
    def whitelist_cidr(self):
        """Gets the whitelist_cidr of this UpdateFlowSourceRequest.

        The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.

        :return: The whitelist_cidr of this UpdateFlowSourceRequest.
        :rtype: str
        """
        return self._whitelist_cidr

    @whitelist_cidr.setter
    def whitelist_cidr(self, whitelist_cidr):
        """Sets the whitelist_cidr of this UpdateFlowSourceRequest.

        The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.

        :param whitelist_cidr: The whitelist_cidr of this UpdateFlowSourceRequest.
        :type whitelist_cidr: str
        """

        self._whitelist_cidr = whitelist_cidr

    @property
    def gateway_bridge_source(self):
        """Gets the gateway_bridge_source of this UpdateFlowSourceRequest.


        :return: The gateway_bridge_source of this UpdateFlowSourceRequest.
        :rtype: UpdateFlowSourceRequestGatewayBridgeSource
        """
        return self._gateway_bridge_source

    @gateway_bridge_source.setter
    def gateway_bridge_source(self, gateway_bridge_source):
        """Sets the gateway_bridge_source of this UpdateFlowSourceRequest.


        :param gateway_bridge_source: The gateway_bridge_source of this UpdateFlowSourceRequest.
        :type gateway_bridge_source: UpdateFlowSourceRequestGatewayBridgeSource
        """

        self._gateway_bridge_source = gateway_bridge_source
