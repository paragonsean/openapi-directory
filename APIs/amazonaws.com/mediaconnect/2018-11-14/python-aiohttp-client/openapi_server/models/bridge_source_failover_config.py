# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_bridge_request_source_failover_config_source_priority import CreateBridgeRequestSourceFailoverConfigSourcePriority
from openapi_server.models.failover_mode import FailoverMode
from openapi_server.models.state import State
from openapi_server import util


class BridgeSourceFailoverConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failover_mode: FailoverMode=None, recovery_window: int=None, source_priority: CreateBridgeRequestSourceFailoverConfigSourcePriority=None, state: State=None):
        """BridgeSourceFailoverConfig - a model defined in OpenAPI

        :param failover_mode: The failover_mode of this BridgeSourceFailoverConfig.
        :param recovery_window: The recovery_window of this BridgeSourceFailoverConfig.
        :param source_priority: The source_priority of this BridgeSourceFailoverConfig.
        :param state: The state of this BridgeSourceFailoverConfig.
        """
        self.openapi_types = {
            'failover_mode': FailoverMode,
            'recovery_window': int,
            'source_priority': CreateBridgeRequestSourceFailoverConfigSourcePriority,
            'state': State
        }

        self.attribute_map = {
            'failover_mode': 'FailoverMode',
            'recovery_window': 'RecoveryWindow',
            'source_priority': 'SourcePriority',
            'state': 'State'
        }

        self._failover_mode = failover_mode
        self._recovery_window = recovery_window
        self._source_priority = source_priority
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BridgeSourceFailoverConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bridge_SourceFailoverConfig of this BridgeSourceFailoverConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failover_mode(self):
        """Gets the failover_mode of this BridgeSourceFailoverConfig.


        :return: The failover_mode of this BridgeSourceFailoverConfig.
        :rtype: FailoverMode
        """
        return self._failover_mode

    @failover_mode.setter
    def failover_mode(self, failover_mode):
        """Sets the failover_mode of this BridgeSourceFailoverConfig.


        :param failover_mode: The failover_mode of this BridgeSourceFailoverConfig.
        :type failover_mode: FailoverMode
        """

        self._failover_mode = failover_mode

    @property
    def recovery_window(self):
        """Gets the recovery_window of this BridgeSourceFailoverConfig.


        :return: The recovery_window of this BridgeSourceFailoverConfig.
        :rtype: int
        """
        return self._recovery_window

    @recovery_window.setter
    def recovery_window(self, recovery_window):
        """Sets the recovery_window of this BridgeSourceFailoverConfig.


        :param recovery_window: The recovery_window of this BridgeSourceFailoverConfig.
        :type recovery_window: int
        """

        self._recovery_window = recovery_window

    @property
    def source_priority(self):
        """Gets the source_priority of this BridgeSourceFailoverConfig.


        :return: The source_priority of this BridgeSourceFailoverConfig.
        :rtype: CreateBridgeRequestSourceFailoverConfigSourcePriority
        """
        return self._source_priority

    @source_priority.setter
    def source_priority(self, source_priority):
        """Sets the source_priority of this BridgeSourceFailoverConfig.


        :param source_priority: The source_priority of this BridgeSourceFailoverConfig.
        :type source_priority: CreateBridgeRequestSourceFailoverConfigSourcePriority
        """

        self._source_priority = source_priority

    @property
    def state(self):
        """Gets the state of this BridgeSourceFailoverConfig.


        :return: The state of this BridgeSourceFailoverConfig.
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BridgeSourceFailoverConfig.


        :param state: The state of this BridgeSourceFailoverConfig.
        :type state: State
        """

        self._state = state
