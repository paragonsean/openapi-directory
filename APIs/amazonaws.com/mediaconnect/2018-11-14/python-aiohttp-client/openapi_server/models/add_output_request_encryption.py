# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.algorithm import Algorithm
from openapi_server.models.key_type import KeyType
from openapi_server import util


class AddOutputRequestEncryption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: Algorithm=None, constant_initialization_vector: str=None, device_id: str=None, key_type: KeyType=None, region: str=None, resource_id: str=None, role_arn: str=None, secret_arn: str=None, url: str=None):
        """AddOutputRequestEncryption - a model defined in OpenAPI

        :param algorithm: The algorithm of this AddOutputRequestEncryption.
        :param constant_initialization_vector: The constant_initialization_vector of this AddOutputRequestEncryption.
        :param device_id: The device_id of this AddOutputRequestEncryption.
        :param key_type: The key_type of this AddOutputRequestEncryption.
        :param region: The region of this AddOutputRequestEncryption.
        :param resource_id: The resource_id of this AddOutputRequestEncryption.
        :param role_arn: The role_arn of this AddOutputRequestEncryption.
        :param secret_arn: The secret_arn of this AddOutputRequestEncryption.
        :param url: The url of this AddOutputRequestEncryption.
        """
        self.openapi_types = {
            'algorithm': Algorithm,
            'constant_initialization_vector': str,
            'device_id': str,
            'key_type': KeyType,
            'region': str,
            'resource_id': str,
            'role_arn': str,
            'secret_arn': str,
            'url': str
        }

        self.attribute_map = {
            'algorithm': 'Algorithm',
            'constant_initialization_vector': 'ConstantInitializationVector',
            'device_id': 'DeviceId',
            'key_type': 'KeyType',
            'region': 'Region',
            'resource_id': 'ResourceId',
            'role_arn': 'RoleArn',
            'secret_arn': 'SecretArn',
            'url': 'Url'
        }

        self._algorithm = algorithm
        self._constant_initialization_vector = constant_initialization_vector
        self._device_id = device_id
        self._key_type = key_type
        self._region = region
        self._resource_id = resource_id
        self._role_arn = role_arn
        self._secret_arn = secret_arn
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddOutputRequestEncryption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddOutputRequest_Encryption of this AddOutputRequestEncryption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this AddOutputRequestEncryption.


        :return: The algorithm of this AddOutputRequestEncryption.
        :rtype: Algorithm
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this AddOutputRequestEncryption.


        :param algorithm: The algorithm of this AddOutputRequestEncryption.
        :type algorithm: Algorithm
        """

        self._algorithm = algorithm

    @property
    def constant_initialization_vector(self):
        """Gets the constant_initialization_vector of this AddOutputRequestEncryption.


        :return: The constant_initialization_vector of this AddOutputRequestEncryption.
        :rtype: str
        """
        return self._constant_initialization_vector

    @constant_initialization_vector.setter
    def constant_initialization_vector(self, constant_initialization_vector):
        """Sets the constant_initialization_vector of this AddOutputRequestEncryption.


        :param constant_initialization_vector: The constant_initialization_vector of this AddOutputRequestEncryption.
        :type constant_initialization_vector: str
        """

        self._constant_initialization_vector = constant_initialization_vector

    @property
    def device_id(self):
        """Gets the device_id of this AddOutputRequestEncryption.


        :return: The device_id of this AddOutputRequestEncryption.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this AddOutputRequestEncryption.


        :param device_id: The device_id of this AddOutputRequestEncryption.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def key_type(self):
        """Gets the key_type of this AddOutputRequestEncryption.


        :return: The key_type of this AddOutputRequestEncryption.
        :rtype: KeyType
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this AddOutputRequestEncryption.


        :param key_type: The key_type of this AddOutputRequestEncryption.
        :type key_type: KeyType
        """

        self._key_type = key_type

    @property
    def region(self):
        """Gets the region of this AddOutputRequestEncryption.


        :return: The region of this AddOutputRequestEncryption.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AddOutputRequestEncryption.


        :param region: The region of this AddOutputRequestEncryption.
        :type region: str
        """

        self._region = region

    @property
    def resource_id(self):
        """Gets the resource_id of this AddOutputRequestEncryption.


        :return: The resource_id of this AddOutputRequestEncryption.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AddOutputRequestEncryption.


        :param resource_id: The resource_id of this AddOutputRequestEncryption.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def role_arn(self):
        """Gets the role_arn of this AddOutputRequestEncryption.


        :return: The role_arn of this AddOutputRequestEncryption.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this AddOutputRequestEncryption.


        :param role_arn: The role_arn of this AddOutputRequestEncryption.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def secret_arn(self):
        """Gets the secret_arn of this AddOutputRequestEncryption.


        :return: The secret_arn of this AddOutputRequestEncryption.
        :rtype: str
        """
        return self._secret_arn

    @secret_arn.setter
    def secret_arn(self, secret_arn):
        """Sets the secret_arn of this AddOutputRequestEncryption.


        :param secret_arn: The secret_arn of this AddOutputRequestEncryption.
        :type secret_arn: str
        """

        self._secret_arn = secret_arn

    @property
    def url(self):
        """Gets the url of this AddOutputRequestEncryption.


        :return: The url of this AddOutputRequestEncryption.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AddOutputRequestEncryption.


        :param url: The url of this AddOutputRequestEncryption.
        :type url: str
        """

        self._url = url
