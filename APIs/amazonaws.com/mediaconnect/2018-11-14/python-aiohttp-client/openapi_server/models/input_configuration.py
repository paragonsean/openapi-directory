# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_configuration_interface import InputConfigurationInterface
from openapi_server import util


class InputConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_ip: str=None, input_port: int=None, interface: InputConfigurationInterface=None):
        """InputConfiguration - a model defined in OpenAPI

        :param input_ip: The input_ip of this InputConfiguration.
        :param input_port: The input_port of this InputConfiguration.
        :param interface: The interface of this InputConfiguration.
        """
        self.openapi_types = {
            'input_ip': str,
            'input_port': int,
            'interface': InputConfigurationInterface
        }

        self.attribute_map = {
            'input_ip': 'InputIp',
            'input_port': 'InputPort',
            'interface': 'Interface'
        }

        self._input_ip = input_ip
        self._input_port = input_port
        self._interface = interface

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputConfiguration of this InputConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_ip(self):
        """Gets the input_ip of this InputConfiguration.


        :return: The input_ip of this InputConfiguration.
        :rtype: str
        """
        return self._input_ip

    @input_ip.setter
    def input_ip(self, input_ip):
        """Sets the input_ip of this InputConfiguration.


        :param input_ip: The input_ip of this InputConfiguration.
        :type input_ip: str
        """
        if input_ip is None:
            raise ValueError("Invalid value for `input_ip`, must not be `None`")

        self._input_ip = input_ip

    @property
    def input_port(self):
        """Gets the input_port of this InputConfiguration.


        :return: The input_port of this InputConfiguration.
        :rtype: int
        """
        return self._input_port

    @input_port.setter
    def input_port(self, input_port):
        """Sets the input_port of this InputConfiguration.


        :param input_port: The input_port of this InputConfiguration.
        :type input_port: int
        """
        if input_port is None:
            raise ValueError("Invalid value for `input_port`, must not be `None`")

        self._input_port = input_port

    @property
    def interface(self):
        """Gets the interface of this InputConfiguration.


        :return: The interface of this InputConfiguration.
        :rtype: InputConfigurationInterface
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this InputConfiguration.


        :param interface: The interface of this InputConfiguration.
        :type interface: InputConfigurationInterface
        """
        if interface is None:
            raise ValueError("Invalid value for `interface`, must not be `None`")

        self._interface = interface
