# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protocol import Protocol
from openapi_server import util


class AddBridgeNetworkOutputRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, name: str=None, network_name: str=None, port: int=None, protocol: Protocol=None, ttl: int=None):
        """AddBridgeNetworkOutputRequest - a model defined in OpenAPI

        :param ip_address: The ip_address of this AddBridgeNetworkOutputRequest.
        :param name: The name of this AddBridgeNetworkOutputRequest.
        :param network_name: The network_name of this AddBridgeNetworkOutputRequest.
        :param port: The port of this AddBridgeNetworkOutputRequest.
        :param protocol: The protocol of this AddBridgeNetworkOutputRequest.
        :param ttl: The ttl of this AddBridgeNetworkOutputRequest.
        """
        self.openapi_types = {
            'ip_address': str,
            'name': str,
            'network_name': str,
            'port': int,
            'protocol': Protocol,
            'ttl': int
        }

        self.attribute_map = {
            'ip_address': 'IpAddress',
            'name': 'Name',
            'network_name': 'NetworkName',
            'port': 'Port',
            'protocol': 'Protocol',
            'ttl': 'Ttl'
        }

        self._ip_address = ip_address
        self._name = name
        self._network_name = network_name
        self._port = port
        self._protocol = protocol
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddBridgeNetworkOutputRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddBridgeNetworkOutputRequest of this AddBridgeNetworkOutputRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this AddBridgeNetworkOutputRequest.


        :return: The ip_address of this AddBridgeNetworkOutputRequest.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this AddBridgeNetworkOutputRequest.


        :param ip_address: The ip_address of this AddBridgeNetworkOutputRequest.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address

    @property
    def name(self):
        """Gets the name of this AddBridgeNetworkOutputRequest.


        :return: The name of this AddBridgeNetworkOutputRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddBridgeNetworkOutputRequest.


        :param name: The name of this AddBridgeNetworkOutputRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def network_name(self):
        """Gets the network_name of this AddBridgeNetworkOutputRequest.


        :return: The network_name of this AddBridgeNetworkOutputRequest.
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this AddBridgeNetworkOutputRequest.


        :param network_name: The network_name of this AddBridgeNetworkOutputRequest.
        :type network_name: str
        """
        if network_name is None:
            raise ValueError("Invalid value for `network_name`, must not be `None`")

        self._network_name = network_name

    @property
    def port(self):
        """Gets the port of this AddBridgeNetworkOutputRequest.


        :return: The port of this AddBridgeNetworkOutputRequest.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this AddBridgeNetworkOutputRequest.


        :param port: The port of this AddBridgeNetworkOutputRequest.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this AddBridgeNetworkOutputRequest.


        :return: The protocol of this AddBridgeNetworkOutputRequest.
        :rtype: Protocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this AddBridgeNetworkOutputRequest.


        :param protocol: The protocol of this AddBridgeNetworkOutputRequest.
        :type protocol: Protocol
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol

    @property
    def ttl(self):
        """Gets the ttl of this AddBridgeNetworkOutputRequest.


        :return: The ttl of this AddBridgeNetworkOutputRequest.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this AddBridgeNetworkOutputRequest.


        :param ttl: The ttl of this AddBridgeNetworkOutputRequest.
        :type ttl: int
        """
        if ttl is None:
            raise ValueError("Invalid value for `ttl`, must not be `None`")

        self._ttl = ttl
