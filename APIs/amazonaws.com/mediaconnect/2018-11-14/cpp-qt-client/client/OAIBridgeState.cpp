/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBridgeState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBridgeState::OAIBridgeState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBridgeState::OAIBridgeState() {
    this->initializeModel();
}

OAIBridgeState::~OAIBridgeState() {}

void OAIBridgeState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBridgeState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBridgeState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBridgeState::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STANDBY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBridgeState::STANDBY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STARTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBridgeState::STARTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEPLOYING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBridgeState::DEPLOYING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBridgeState::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBridgeState::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBridgeState::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBridgeState::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("START_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBridgeState::START_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("START_PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBridgeState::START_PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOP_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBridgeState::STOP_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBridgeState::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBridgeState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBridgeState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBridgeState::CREATING:
            val = "CREATING";
            break;
        case eOAIBridgeState::STANDBY:
            val = "STANDBY";
            break;
        case eOAIBridgeState::STARTING:
            val = "STARTING";
            break;
        case eOAIBridgeState::DEPLOYING:
            val = "DEPLOYING";
            break;
        case eOAIBridgeState::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAIBridgeState::STOPPING:
            val = "STOPPING";
            break;
        case eOAIBridgeState::DELETING:
            val = "DELETING";
            break;
        case eOAIBridgeState::DELETED:
            val = "DELETED";
            break;
        case eOAIBridgeState::START_FAILED:
            val = "START_FAILED";
            break;
        case eOAIBridgeState::START_PENDING:
            val = "START_PENDING";
            break;
        case eOAIBridgeState::STOP_FAILED:
            val = "STOP_FAILED";
            break;
        case eOAIBridgeState::UPDATING:
            val = "UPDATING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBridgeState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBridgeState::eOAIBridgeState OAIBridgeState::getValue() const {
    return m_value;
}

void OAIBridgeState::setValue(const OAIBridgeState::eOAIBridgeState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBridgeState::isSet() const {
    
    return m_value_isSet;
}

bool OAIBridgeState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
