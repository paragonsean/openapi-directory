/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBridgeRequest_SourceFailoverConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBridgeRequest_SourceFailoverConfig::OAICreateBridgeRequest_SourceFailoverConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBridgeRequest_SourceFailoverConfig::OAICreateBridgeRequest_SourceFailoverConfig() {
    this->initializeModel();
}

OAICreateBridgeRequest_SourceFailoverConfig::~OAICreateBridgeRequest_SourceFailoverConfig() {}

void OAICreateBridgeRequest_SourceFailoverConfig::initializeModel() {

    m_failover_mode_isSet = false;
    m_failover_mode_isValid = false;

    m_recovery_window_isSet = false;
    m_recovery_window_isValid = false;

    m_source_priority_isSet = false;
    m_source_priority_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICreateBridgeRequest_SourceFailoverConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBridgeRequest_SourceFailoverConfig::fromJsonObject(QJsonObject json) {

    m_failover_mode_isValid = ::OpenAPI::fromJsonValue(m_failover_mode, json[QString("FailoverMode")]);
    m_failover_mode_isSet = !json[QString("FailoverMode")].isNull() && m_failover_mode_isValid;

    m_recovery_window_isValid = ::OpenAPI::fromJsonValue(m_recovery_window, json[QString("RecoveryWindow")]);
    m_recovery_window_isSet = !json[QString("RecoveryWindow")].isNull() && m_recovery_window_isValid;

    m_source_priority_isValid = ::OpenAPI::fromJsonValue(m_source_priority, json[QString("SourcePriority")]);
    m_source_priority_isSet = !json[QString("SourcePriority")].isNull() && m_source_priority_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;
}

QString OAICreateBridgeRequest_SourceFailoverConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBridgeRequest_SourceFailoverConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_failover_mode.isSet()) {
        obj.insert(QString("FailoverMode"), ::OpenAPI::toJsonValue(m_failover_mode));
    }
    if (m_recovery_window_isSet) {
        obj.insert(QString("RecoveryWindow"), ::OpenAPI::toJsonValue(m_recovery_window));
    }
    if (m_source_priority.isSet()) {
        obj.insert(QString("SourcePriority"), ::OpenAPI::toJsonValue(m_source_priority));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIFailoverMode OAICreateBridgeRequest_SourceFailoverConfig::getFailoverMode() const {
    return m_failover_mode;
}
void OAICreateBridgeRequest_SourceFailoverConfig::setFailoverMode(const OAIFailoverMode &failover_mode) {
    m_failover_mode = failover_mode;
    m_failover_mode_isSet = true;
}

bool OAICreateBridgeRequest_SourceFailoverConfig::is_failover_mode_Set() const{
    return m_failover_mode_isSet;
}

bool OAICreateBridgeRequest_SourceFailoverConfig::is_failover_mode_Valid() const{
    return m_failover_mode_isValid;
}

qint32 OAICreateBridgeRequest_SourceFailoverConfig::getRecoveryWindow() const {
    return m_recovery_window;
}
void OAICreateBridgeRequest_SourceFailoverConfig::setRecoveryWindow(const qint32 &recovery_window) {
    m_recovery_window = recovery_window;
    m_recovery_window_isSet = true;
}

bool OAICreateBridgeRequest_SourceFailoverConfig::is_recovery_window_Set() const{
    return m_recovery_window_isSet;
}

bool OAICreateBridgeRequest_SourceFailoverConfig::is_recovery_window_Valid() const{
    return m_recovery_window_isValid;
}

OAICreateBridge_request_sourceFailoverConfig_SourcePriority OAICreateBridgeRequest_SourceFailoverConfig::getSourcePriority() const {
    return m_source_priority;
}
void OAICreateBridgeRequest_SourceFailoverConfig::setSourcePriority(const OAICreateBridge_request_sourceFailoverConfig_SourcePriority &source_priority) {
    m_source_priority = source_priority;
    m_source_priority_isSet = true;
}

bool OAICreateBridgeRequest_SourceFailoverConfig::is_source_priority_Set() const{
    return m_source_priority_isSet;
}

bool OAICreateBridgeRequest_SourceFailoverConfig::is_source_priority_Valid() const{
    return m_source_priority_isValid;
}

OAIState OAICreateBridgeRequest_SourceFailoverConfig::getState() const {
    return m_state;
}
void OAICreateBridgeRequest_SourceFailoverConfig::setState(const OAIState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICreateBridgeRequest_SourceFailoverConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAICreateBridgeRequest_SourceFailoverConfig::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICreateBridgeRequest_SourceFailoverConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failover_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBridgeRequest_SourceFailoverConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
