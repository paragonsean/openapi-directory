/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputConfigurationRequest::OAIInputConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputConfigurationRequest::OAIInputConfigurationRequest() {
    this->initializeModel();
}

OAIInputConfigurationRequest::~OAIInputConfigurationRequest() {}

void OAIInputConfigurationRequest::initializeModel() {

    m_input_port_isSet = false;
    m_input_port_isValid = false;

    m_interface_isSet = false;
    m_interface_isValid = false;
}

void OAIInputConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_input_port_isValid = ::OpenAPI::fromJsonValue(m_input_port, json[QString("InputPort")]);
    m_input_port_isSet = !json[QString("InputPort")].isNull() && m_input_port_isValid;

    m_interface_isValid = ::OpenAPI::fromJsonValue(m_interface, json[QString("Interface")]);
    m_interface_isSet = !json[QString("Interface")].isNull() && m_interface_isValid;
}

QString OAIInputConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_input_port_isSet) {
        obj.insert(QString("InputPort"), ::OpenAPI::toJsonValue(m_input_port));
    }
    if (m_interface.isSet()) {
        obj.insert(QString("Interface"), ::OpenAPI::toJsonValue(m_interface));
    }
    return obj;
}

qint32 OAIInputConfigurationRequest::getInputPort() const {
    return m_input_port;
}
void OAIInputConfigurationRequest::setInputPort(const qint32 &input_port) {
    m_input_port = input_port;
    m_input_port_isSet = true;
}

bool OAIInputConfigurationRequest::is_input_port_Set() const{
    return m_input_port_isSet;
}

bool OAIInputConfigurationRequest::is_input_port_Valid() const{
    return m_input_port_isValid;
}

OAIInputConfigurationRequest_Interface OAIInputConfigurationRequest::getInterface() const {
    return m_interface;
}
void OAIInputConfigurationRequest::setInterface(const OAIInputConfigurationRequest_Interface &interface) {
    m_interface = interface;
    m_interface_isSet = true;
}

bool OAIInputConfigurationRequest::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAIInputConfigurationRequest::is_interface_Valid() const{
    return m_interface_isValid;
}

bool OAIInputConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_port_isValid && m_interface_isValid && true;
}

} // namespace OpenAPI
