/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestinationConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestinationConfigurationRequest::OAIDestinationConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestinationConfigurationRequest::OAIDestinationConfigurationRequest() {
    this->initializeModel();
}

OAIDestinationConfigurationRequest::~OAIDestinationConfigurationRequest() {}

void OAIDestinationConfigurationRequest::initializeModel() {

    m_destination_ip_isSet = false;
    m_destination_ip_isValid = false;

    m_destination_port_isSet = false;
    m_destination_port_isValid = false;

    m_interface_isSet = false;
    m_interface_isValid = false;
}

void OAIDestinationConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestinationConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_destination_ip_isValid = ::OpenAPI::fromJsonValue(m_destination_ip, json[QString("DestinationIp")]);
    m_destination_ip_isSet = !json[QString("DestinationIp")].isNull() && m_destination_ip_isValid;

    m_destination_port_isValid = ::OpenAPI::fromJsonValue(m_destination_port, json[QString("DestinationPort")]);
    m_destination_port_isSet = !json[QString("DestinationPort")].isNull() && m_destination_port_isValid;

    m_interface_isValid = ::OpenAPI::fromJsonValue(m_interface, json[QString("Interface")]);
    m_interface_isSet = !json[QString("Interface")].isNull() && m_interface_isValid;
}

QString OAIDestinationConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestinationConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_ip_isSet) {
        obj.insert(QString("DestinationIp"), ::OpenAPI::toJsonValue(m_destination_ip));
    }
    if (m_destination_port_isSet) {
        obj.insert(QString("DestinationPort"), ::OpenAPI::toJsonValue(m_destination_port));
    }
    if (m_interface.isSet()) {
        obj.insert(QString("Interface"), ::OpenAPI::toJsonValue(m_interface));
    }
    return obj;
}

QString OAIDestinationConfigurationRequest::getDestinationIp() const {
    return m_destination_ip;
}
void OAIDestinationConfigurationRequest::setDestinationIp(const QString &destination_ip) {
    m_destination_ip = destination_ip;
    m_destination_ip_isSet = true;
}

bool OAIDestinationConfigurationRequest::is_destination_ip_Set() const{
    return m_destination_ip_isSet;
}

bool OAIDestinationConfigurationRequest::is_destination_ip_Valid() const{
    return m_destination_ip_isValid;
}

qint32 OAIDestinationConfigurationRequest::getDestinationPort() const {
    return m_destination_port;
}
void OAIDestinationConfigurationRequest::setDestinationPort(const qint32 &destination_port) {
    m_destination_port = destination_port;
    m_destination_port_isSet = true;
}

bool OAIDestinationConfigurationRequest::is_destination_port_Set() const{
    return m_destination_port_isSet;
}

bool OAIDestinationConfigurationRequest::is_destination_port_Valid() const{
    return m_destination_port_isValid;
}

OAIDestinationConfigurationRequest_Interface OAIDestinationConfigurationRequest::getInterface() const {
    return m_interface;
}
void OAIDestinationConfigurationRequest::setInterface(const OAIDestinationConfigurationRequest_Interface &interface) {
    m_interface = interface;
    m_interface_isSet = true;
}

bool OAIDestinationConfigurationRequest::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAIDestinationConfigurationRequest::is_interface_Valid() const{
    return m_interface_isValid;
}

bool OAIDestinationConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestinationConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_ip_isValid && m_destination_port_isValid && m_interface_isValid && true;
}

} // namespace OpenAPI
