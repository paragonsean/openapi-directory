/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAddOutputRequest.h
 *
 * The output that you want to add to this flow.
 */

#ifndef OAIAddOutputRequest_H
#define OAIAddOutputRequest_H

#include <QJsonObject>

#include "OAIAddOutputRequest_Encryption.h"
#include "OAIAddOutputRequest_VpcInterfaceAttachment.h"
#include "OAIProtocol.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAddOutputRequest_Encryption;
class OAIAddOutputRequest_VpcInterfaceAttachment;

class OAIAddOutputRequest : public OAIObject {
public:
    OAIAddOutputRequest();
    OAIAddOutputRequest(QString json);
    ~OAIAddOutputRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCidrAllowList() const;
    void setCidrAllowList(const QList &cidr_allow_list);
    bool is_cidr_allow_list_Set() const;
    bool is_cidr_allow_list_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDestination() const;
    void setDestination(const QString &destination);
    bool is_destination_Set() const;
    bool is_destination_Valid() const;

    OAIAddOutputRequest_Encryption getEncryption() const;
    void setEncryption(const OAIAddOutputRequest_Encryption &encryption);
    bool is_encryption_Set() const;
    bool is_encryption_Valid() const;

    qint32 getMaxLatency() const;
    void setMaxLatency(const qint32 &max_latency);
    bool is_max_latency_Set() const;
    bool is_max_latency_Valid() const;

    QList getMediaStreamOutputConfigurations() const;
    void setMediaStreamOutputConfigurations(const QList &media_stream_output_configurations);
    bool is_media_stream_output_configurations_Set() const;
    bool is_media_stream_output_configurations_Valid() const;

    qint32 getMinLatency() const;
    void setMinLatency(const qint32 &min_latency);
    bool is_min_latency_Set() const;
    bool is_min_latency_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    OAIProtocol getProtocol() const;
    void setProtocol(const OAIProtocol &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getRemoteId() const;
    void setRemoteId(const QString &remote_id);
    bool is_remote_id_Set() const;
    bool is_remote_id_Valid() const;

    qint32 getSenderControlPort() const;
    void setSenderControlPort(const qint32 &sender_control_port);
    bool is_sender_control_port_Set() const;
    bool is_sender_control_port_Valid() const;

    qint32 getSmoothingLatency() const;
    void setSmoothingLatency(const qint32 &smoothing_latency);
    bool is_smoothing_latency_Set() const;
    bool is_smoothing_latency_Valid() const;

    QString getStreamId() const;
    void setStreamId(const QString &stream_id);
    bool is_stream_id_Set() const;
    bool is_stream_id_Valid() const;

    OAIAddOutputRequest_VpcInterfaceAttachment getVpcInterfaceAttachment() const;
    void setVpcInterfaceAttachment(const OAIAddOutputRequest_VpcInterfaceAttachment &vpc_interface_attachment);
    bool is_vpc_interface_attachment_Set() const;
    bool is_vpc_interface_attachment_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_cidr_allow_list;
    bool m_cidr_allow_list_isSet;
    bool m_cidr_allow_list_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_destination;
    bool m_destination_isSet;
    bool m_destination_isValid;

    OAIAddOutputRequest_Encryption m_encryption;
    bool m_encryption_isSet;
    bool m_encryption_isValid;

    qint32 m_max_latency;
    bool m_max_latency_isSet;
    bool m_max_latency_isValid;

    QList m_media_stream_output_configurations;
    bool m_media_stream_output_configurations_isSet;
    bool m_media_stream_output_configurations_isValid;

    qint32 m_min_latency;
    bool m_min_latency_isSet;
    bool m_min_latency_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    OAIProtocol m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_remote_id;
    bool m_remote_id_isSet;
    bool m_remote_id_isValid;

    qint32 m_sender_control_port;
    bool m_sender_control_port_isSet;
    bool m_sender_control_port_isValid;

    qint32 m_smoothing_latency;
    bool m_smoothing_latency_isSet;
    bool m_smoothing_latency_isValid;

    QString m_stream_id;
    bool m_stream_id_isSet;
    bool m_stream_id_isValid;

    OAIAddOutputRequest_VpcInterfaceAttachment m_vpc_interface_attachment;
    bool m_vpc_interface_attachment_isSet;
    bool m_vpc_interface_attachment_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAddOutputRequest)

#endif // OAIAddOutputRequest_H
