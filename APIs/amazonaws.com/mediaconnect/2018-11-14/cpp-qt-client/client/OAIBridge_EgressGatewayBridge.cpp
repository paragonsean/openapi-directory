/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBridge_EgressGatewayBridge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBridge_EgressGatewayBridge::OAIBridge_EgressGatewayBridge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBridge_EgressGatewayBridge::OAIBridge_EgressGatewayBridge() {
    this->initializeModel();
}

OAIBridge_EgressGatewayBridge::~OAIBridge_EgressGatewayBridge() {}

void OAIBridge_EgressGatewayBridge::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_max_bitrate_isSet = false;
    m_max_bitrate_isValid = false;
}

void OAIBridge_EgressGatewayBridge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBridge_EgressGatewayBridge::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_max_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_bitrate, json[QString("MaxBitrate")]);
    m_max_bitrate_isSet = !json[QString("MaxBitrate")].isNull() && m_max_bitrate_isValid;
}

QString OAIBridge_EgressGatewayBridge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBridge_EgressGatewayBridge::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_max_bitrate_isSet) {
        obj.insert(QString("MaxBitrate"), ::OpenAPI::toJsonValue(m_max_bitrate));
    }
    return obj;
}

QString OAIBridge_EgressGatewayBridge::getInstanceId() const {
    return m_instance_id;
}
void OAIBridge_EgressGatewayBridge::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIBridge_EgressGatewayBridge::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIBridge_EgressGatewayBridge::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

qint32 OAIBridge_EgressGatewayBridge::getMaxBitrate() const {
    return m_max_bitrate;
}
void OAIBridge_EgressGatewayBridge::setMaxBitrate(const qint32 &max_bitrate) {
    m_max_bitrate = max_bitrate;
    m_max_bitrate_isSet = true;
}

bool OAIBridge_EgressGatewayBridge::is_max_bitrate_Set() const{
    return m_max_bitrate_isSet;
}

bool OAIBridge_EgressGatewayBridge::is_max_bitrate_Valid() const{
    return m_max_bitrate_isValid;
}

bool OAIBridge_EgressGatewayBridge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBridge_EgressGatewayBridge::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_bitrate_isValid && true;
}

} // namespace OpenAPI
