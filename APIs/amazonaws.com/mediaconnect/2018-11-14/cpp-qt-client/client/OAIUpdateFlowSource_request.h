/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateFlowSource_request.h
 *
 * 
 */

#ifndef OAIUpdateFlowSource_request_H
#define OAIUpdateFlowSource_request_H

#include <QJsonObject>

#include "OAIMediaStreamSourceConfigurationRequest.h"
#include "OAIUpdateFlowOutput_request_encryption.h"
#include "OAIUpdateFlowSource_request_gatewayBridgeSource.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateFlowOutput_request_encryption;
class OAIMediaStreamSourceConfigurationRequest;
class OAIUpdateFlowSource_request_gatewayBridgeSource;

class OAIUpdateFlowSource_request : public OAIObject {
public:
    OAIUpdateFlowSource_request();
    OAIUpdateFlowSource_request(QString json);
    ~OAIUpdateFlowSource_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIUpdateFlowOutput_request_encryption getDecryption() const;
    void setDecryption(const OAIUpdateFlowOutput_request_encryption &decryption);
    bool is_decryption_Set() const;
    bool is_decryption_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEntitlementArn() const;
    void setEntitlementArn(const QString &entitlement_arn);
    bool is_entitlement_arn_Set() const;
    bool is_entitlement_arn_Valid() const;

    qint32 getIngestPort() const;
    void setIngestPort(const qint32 &ingest_port);
    bool is_ingest_port_Set() const;
    bool is_ingest_port_Valid() const;

    qint32 getMaxBitrate() const;
    void setMaxBitrate(const qint32 &max_bitrate);
    bool is_max_bitrate_Set() const;
    bool is_max_bitrate_Valid() const;

    qint32 getMaxLatency() const;
    void setMaxLatency(const qint32 &max_latency);
    bool is_max_latency_Set() const;
    bool is_max_latency_Valid() const;

    qint32 getMaxSyncBuffer() const;
    void setMaxSyncBuffer(const qint32 &max_sync_buffer);
    bool is_max_sync_buffer_Set() const;
    bool is_max_sync_buffer_Valid() const;

    QList<OAIMediaStreamSourceConfigurationRequest> getMediaStreamSourceConfigurations() const;
    void setMediaStreamSourceConfigurations(const QList<OAIMediaStreamSourceConfigurationRequest> &media_stream_source_configurations);
    bool is_media_stream_source_configurations_Set() const;
    bool is_media_stream_source_configurations_Valid() const;

    qint32 getMinLatency() const;
    void setMinLatency(const qint32 &min_latency);
    bool is_min_latency_Set() const;
    bool is_min_latency_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    qint32 getSenderControlPort() const;
    void setSenderControlPort(const qint32 &sender_control_port);
    bool is_sender_control_port_Set() const;
    bool is_sender_control_port_Valid() const;

    QString getSenderIpAddress() const;
    void setSenderIpAddress(const QString &sender_ip_address);
    bool is_sender_ip_address_Set() const;
    bool is_sender_ip_address_Valid() const;

    QString getSourceListenerAddress() const;
    void setSourceListenerAddress(const QString &source_listener_address);
    bool is_source_listener_address_Set() const;
    bool is_source_listener_address_Valid() const;

    qint32 getSourceListenerPort() const;
    void setSourceListenerPort(const qint32 &source_listener_port);
    bool is_source_listener_port_Set() const;
    bool is_source_listener_port_Valid() const;

    QString getStreamId() const;
    void setStreamId(const QString &stream_id);
    bool is_stream_id_Set() const;
    bool is_stream_id_Valid() const;

    QString getVpcInterfaceName() const;
    void setVpcInterfaceName(const QString &vpc_interface_name);
    bool is_vpc_interface_name_Set() const;
    bool is_vpc_interface_name_Valid() const;

    QString getWhitelistCidr() const;
    void setWhitelistCidr(const QString &whitelist_cidr);
    bool is_whitelist_cidr_Set() const;
    bool is_whitelist_cidr_Valid() const;

    OAIUpdateFlowSource_request_gatewayBridgeSource getGatewayBridgeSource() const;
    void setGatewayBridgeSource(const OAIUpdateFlowSource_request_gatewayBridgeSource &gateway_bridge_source);
    bool is_gateway_bridge_source_Set() const;
    bool is_gateway_bridge_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIUpdateFlowOutput_request_encryption m_decryption;
    bool m_decryption_isSet;
    bool m_decryption_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_entitlement_arn;
    bool m_entitlement_arn_isSet;
    bool m_entitlement_arn_isValid;

    qint32 m_ingest_port;
    bool m_ingest_port_isSet;
    bool m_ingest_port_isValid;

    qint32 m_max_bitrate;
    bool m_max_bitrate_isSet;
    bool m_max_bitrate_isValid;

    qint32 m_max_latency;
    bool m_max_latency_isSet;
    bool m_max_latency_isValid;

    qint32 m_max_sync_buffer;
    bool m_max_sync_buffer_isSet;
    bool m_max_sync_buffer_isValid;

    QList<OAIMediaStreamSourceConfigurationRequest> m_media_stream_source_configurations;
    bool m_media_stream_source_configurations_isSet;
    bool m_media_stream_source_configurations_isValid;

    qint32 m_min_latency;
    bool m_min_latency_isSet;
    bool m_min_latency_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    qint32 m_sender_control_port;
    bool m_sender_control_port_isSet;
    bool m_sender_control_port_isValid;

    QString m_sender_ip_address;
    bool m_sender_ip_address_isSet;
    bool m_sender_ip_address_isValid;

    QString m_source_listener_address;
    bool m_source_listener_address_isSet;
    bool m_source_listener_address_isValid;

    qint32 m_source_listener_port;
    bool m_source_listener_port_isSet;
    bool m_source_listener_port_isValid;

    QString m_stream_id;
    bool m_stream_id_isSet;
    bool m_stream_id_isValid;

    QString m_vpc_interface_name;
    bool m_vpc_interface_name_isSet;
    bool m_vpc_interface_name_isValid;

    QString m_whitelist_cidr;
    bool m_whitelist_cidr_isSet;
    bool m_whitelist_cidr_isValid;

    OAIUpdateFlowSource_request_gatewayBridgeSource m_gateway_bridge_source;
    bool m_gateway_bridge_source_isSet;
    bool m_gateway_bridge_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateFlowSource_request)

#endif // OAIUpdateFlowSource_request_H
