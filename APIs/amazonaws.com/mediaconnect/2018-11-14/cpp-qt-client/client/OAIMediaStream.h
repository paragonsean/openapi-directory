/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMediaStream.h
 *
 * A single track or stream of media that contains video, audio, or ancillary data. After you add a media stream to a flow, you can associate it with sources and outputs on that flow, as long as they use the CDI protocol or the ST 2110 JPEG XS protocol. Each source or output can consist of one or many media streams.
 */

#ifndef OAIMediaStream_H
#define OAIMediaStream_H

#include <QJsonObject>

#include "OAIMediaStreamType.h"
#include "OAIMediaStream_Attributes.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMediaStream_Attributes;

class OAIMediaStream : public OAIObject {
public:
    OAIMediaStream();
    OAIMediaStream(QString json);
    ~OAIMediaStream() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMediaStream_Attributes getAttributes() const;
    void setAttributes(const OAIMediaStream_Attributes &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    qint32 getClockRate() const;
    void setClockRate(const qint32 &clock_rate);
    bool is_clock_rate_Set() const;
    bool is_clock_rate_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getFmt() const;
    void setFmt(const qint32 &fmt);
    bool is_fmt_Set() const;
    bool is_fmt_Valid() const;

    qint32 getMediaStreamId() const;
    void setMediaStreamId(const qint32 &media_stream_id);
    bool is_media_stream_id_Set() const;
    bool is_media_stream_id_Valid() const;

    QString getMediaStreamName() const;
    void setMediaStreamName(const QString &media_stream_name);
    bool is_media_stream_name_Set() const;
    bool is_media_stream_name_Valid() const;

    OAIMediaStreamType getMediaStreamType() const;
    void setMediaStreamType(const OAIMediaStreamType &media_stream_type);
    bool is_media_stream_type_Set() const;
    bool is_media_stream_type_Valid() const;

    QString getVideoFormat() const;
    void setVideoFormat(const QString &video_format);
    bool is_video_format_Set() const;
    bool is_video_format_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMediaStream_Attributes m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    qint32 m_clock_rate;
    bool m_clock_rate_isSet;
    bool m_clock_rate_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_fmt;
    bool m_fmt_isSet;
    bool m_fmt_isValid;

    qint32 m_media_stream_id;
    bool m_media_stream_id_isSet;
    bool m_media_stream_id_isValid;

    QString m_media_stream_name;
    bool m_media_stream_name_isSet;
    bool m_media_stream_name_isValid;

    OAIMediaStreamType m_media_stream_type;
    bool m_media_stream_type_isSet;
    bool m_media_stream_type_isValid;

    QString m_video_format;
    bool m_video_format_isSet;
    bool m_video_format_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMediaStream)

#endif // OAIMediaStream_H
