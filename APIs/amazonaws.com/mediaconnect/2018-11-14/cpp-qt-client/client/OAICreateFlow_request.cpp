/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFlow_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFlow_request::OAICreateFlow_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFlow_request::OAICreateFlow_request() {
    this->initializeModel();
}

OAICreateFlow_request::~OAICreateFlow_request() {}

void OAICreateFlow_request::initializeModel() {

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_entitlements_isSet = false;
    m_entitlements_isValid = false;

    m_media_streams_isSet = false;
    m_media_streams_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_failover_config_isSet = false;
    m_source_failover_config_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_vpc_interfaces_isSet = false;
    m_vpc_interfaces_isValid = false;

    m_maintenance_isSet = false;
    m_maintenance_isValid = false;
}

void OAICreateFlow_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFlow_request::fromJsonObject(QJsonObject json) {

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("availabilityZone")]);
    m_availability_zone_isSet = !json[QString("availabilityZone")].isNull() && m_availability_zone_isValid;

    m_entitlements_isValid = ::OpenAPI::fromJsonValue(m_entitlements, json[QString("entitlements")]);
    m_entitlements_isSet = !json[QString("entitlements")].isNull() && m_entitlements_isValid;

    m_media_streams_isValid = ::OpenAPI::fromJsonValue(m_media_streams, json[QString("mediaStreams")]);
    m_media_streams_isSet = !json[QString("mediaStreams")].isNull() && m_media_streams_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_failover_config_isValid = ::OpenAPI::fromJsonValue(m_source_failover_config, json[QString("sourceFailoverConfig")]);
    m_source_failover_config_isSet = !json[QString("sourceFailoverConfig")].isNull() && m_source_failover_config_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_vpc_interfaces_isValid = ::OpenAPI::fromJsonValue(m_vpc_interfaces, json[QString("vpcInterfaces")]);
    m_vpc_interfaces_isSet = !json[QString("vpcInterfaces")].isNull() && m_vpc_interfaces_isValid;

    m_maintenance_isValid = ::OpenAPI::fromJsonValue(m_maintenance, json[QString("maintenance")]);
    m_maintenance_isSet = !json[QString("maintenance")].isNull() && m_maintenance_isValid;
}

QString OAICreateFlow_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFlow_request::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_zone_isSet) {
        obj.insert(QString("availabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_entitlements.size() > 0) {
        obj.insert(QString("entitlements"), ::OpenAPI::toJsonValue(m_entitlements));
    }
    if (m_media_streams.size() > 0) {
        obj.insert(QString("mediaStreams"), ::OpenAPI::toJsonValue(m_media_streams));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_outputs.size() > 0) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_failover_config.isSet()) {
        obj.insert(QString("sourceFailoverConfig"), ::OpenAPI::toJsonValue(m_source_failover_config));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_vpc_interfaces.size() > 0) {
        obj.insert(QString("vpcInterfaces"), ::OpenAPI::toJsonValue(m_vpc_interfaces));
    }
    if (m_maintenance.isSet()) {
        obj.insert(QString("maintenance"), ::OpenAPI::toJsonValue(m_maintenance));
    }
    return obj;
}

QString OAICreateFlow_request::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAICreateFlow_request::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAICreateFlow_request::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAICreateFlow_request::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QList<OAIGrantEntitlementRequest> OAICreateFlow_request::getEntitlements() const {
    return m_entitlements;
}
void OAICreateFlow_request::setEntitlements(const QList<OAIGrantEntitlementRequest> &entitlements) {
    m_entitlements = entitlements;
    m_entitlements_isSet = true;
}

bool OAICreateFlow_request::is_entitlements_Set() const{
    return m_entitlements_isSet;
}

bool OAICreateFlow_request::is_entitlements_Valid() const{
    return m_entitlements_isValid;
}

QList<OAIAddMediaStreamRequest> OAICreateFlow_request::getMediaStreams() const {
    return m_media_streams;
}
void OAICreateFlow_request::setMediaStreams(const QList<OAIAddMediaStreamRequest> &media_streams) {
    m_media_streams = media_streams;
    m_media_streams_isSet = true;
}

bool OAICreateFlow_request::is_media_streams_Set() const{
    return m_media_streams_isSet;
}

bool OAICreateFlow_request::is_media_streams_Valid() const{
    return m_media_streams_isValid;
}

QString OAICreateFlow_request::getName() const {
    return m_name;
}
void OAICreateFlow_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateFlow_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateFlow_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIAddOutputRequest> OAICreateFlow_request::getOutputs() const {
    return m_outputs;
}
void OAICreateFlow_request::setOutputs(const QList<OAIAddOutputRequest> &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAICreateFlow_request::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAICreateFlow_request::is_outputs_Valid() const{
    return m_outputs_isValid;
}

OAICreateFlow_request_source OAICreateFlow_request::getSource() const {
    return m_source;
}
void OAICreateFlow_request::setSource(const OAICreateFlow_request_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICreateFlow_request::is_source_Set() const{
    return m_source_isSet;
}

bool OAICreateFlow_request::is_source_Valid() const{
    return m_source_isValid;
}

OAICreateBridge_request_sourceFailoverConfig OAICreateFlow_request::getSourceFailoverConfig() const {
    return m_source_failover_config;
}
void OAICreateFlow_request::setSourceFailoverConfig(const OAICreateBridge_request_sourceFailoverConfig &source_failover_config) {
    m_source_failover_config = source_failover_config;
    m_source_failover_config_isSet = true;
}

bool OAICreateFlow_request::is_source_failover_config_Set() const{
    return m_source_failover_config_isSet;
}

bool OAICreateFlow_request::is_source_failover_config_Valid() const{
    return m_source_failover_config_isValid;
}

QList<OAISetSourceRequest> OAICreateFlow_request::getSources() const {
    return m_sources;
}
void OAICreateFlow_request::setSources(const QList<OAISetSourceRequest> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAICreateFlow_request::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAICreateFlow_request::is_sources_Valid() const{
    return m_sources_isValid;
}

QList<OAIVpcInterfaceRequest> OAICreateFlow_request::getVpcInterfaces() const {
    return m_vpc_interfaces;
}
void OAICreateFlow_request::setVpcInterfaces(const QList<OAIVpcInterfaceRequest> &vpc_interfaces) {
    m_vpc_interfaces = vpc_interfaces;
    m_vpc_interfaces_isSet = true;
}

bool OAICreateFlow_request::is_vpc_interfaces_Set() const{
    return m_vpc_interfaces_isSet;
}

bool OAICreateFlow_request::is_vpc_interfaces_Valid() const{
    return m_vpc_interfaces_isValid;
}

OAICreateFlow_request_maintenance OAICreateFlow_request::getMaintenance() const {
    return m_maintenance;
}
void OAICreateFlow_request::setMaintenance(const OAICreateFlow_request_maintenance &maintenance) {
    m_maintenance = maintenance;
    m_maintenance_isSet = true;
}

bool OAICreateFlow_request::is_maintenance_Set() const{
    return m_maintenance_isSet;
}

bool OAICreateFlow_request::is_maintenance_Valid() const{
    return m_maintenance_isValid;
}

bool OAICreateFlow_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitlements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_streams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_failover_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_interfaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFlow_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
