/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeReservationResponse_Reservation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeReservationResponse_Reservation::OAIDescribeReservationResponse_Reservation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeReservationResponse_Reservation::OAIDescribeReservationResponse_Reservation() {
    this->initializeModel();
}

OAIDescribeReservationResponse_Reservation::~OAIDescribeReservationResponse_Reservation() {}

void OAIDescribeReservationResponse_Reservation::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_duration_units_isSet = false;
    m_duration_units_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_offering_arn_isSet = false;
    m_offering_arn_isValid = false;

    m_offering_description_isSet = false;
    m_offering_description_isValid = false;

    m_price_per_unit_isSet = false;
    m_price_per_unit_isValid = false;

    m_price_units_isSet = false;
    m_price_units_isValid = false;

    m_reservation_arn_isSet = false;
    m_reservation_arn_isValid = false;

    m_reservation_name_isSet = false;
    m_reservation_name_isValid = false;

    m_reservation_state_isSet = false;
    m_reservation_state_isValid = false;

    m_resource_specification_isSet = false;
    m_resource_specification_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;
}

void OAIDescribeReservationResponse_Reservation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeReservationResponse_Reservation::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_duration_units_isValid = ::OpenAPI::fromJsonValue(m_duration_units, json[QString("DurationUnits")]);
    m_duration_units_isSet = !json[QString("DurationUnits")].isNull() && m_duration_units_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("End")]);
    m_end_isSet = !json[QString("End")].isNull() && m_end_isValid;

    m_offering_arn_isValid = ::OpenAPI::fromJsonValue(m_offering_arn, json[QString("OfferingArn")]);
    m_offering_arn_isSet = !json[QString("OfferingArn")].isNull() && m_offering_arn_isValid;

    m_offering_description_isValid = ::OpenAPI::fromJsonValue(m_offering_description, json[QString("OfferingDescription")]);
    m_offering_description_isSet = !json[QString("OfferingDescription")].isNull() && m_offering_description_isValid;

    m_price_per_unit_isValid = ::OpenAPI::fromJsonValue(m_price_per_unit, json[QString("PricePerUnit")]);
    m_price_per_unit_isSet = !json[QString("PricePerUnit")].isNull() && m_price_per_unit_isValid;

    m_price_units_isValid = ::OpenAPI::fromJsonValue(m_price_units, json[QString("PriceUnits")]);
    m_price_units_isSet = !json[QString("PriceUnits")].isNull() && m_price_units_isValid;

    m_reservation_arn_isValid = ::OpenAPI::fromJsonValue(m_reservation_arn, json[QString("ReservationArn")]);
    m_reservation_arn_isSet = !json[QString("ReservationArn")].isNull() && m_reservation_arn_isValid;

    m_reservation_name_isValid = ::OpenAPI::fromJsonValue(m_reservation_name, json[QString("ReservationName")]);
    m_reservation_name_isSet = !json[QString("ReservationName")].isNull() && m_reservation_name_isValid;

    m_reservation_state_isValid = ::OpenAPI::fromJsonValue(m_reservation_state, json[QString("ReservationState")]);
    m_reservation_state_isSet = !json[QString("ReservationState")].isNull() && m_reservation_state_isValid;

    m_resource_specification_isValid = ::OpenAPI::fromJsonValue(m_resource_specification, json[QString("ResourceSpecification")]);
    m_resource_specification_isSet = !json[QString("ResourceSpecification")].isNull() && m_resource_specification_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("Start")]);
    m_start_isSet = !json[QString("Start")].isNull() && m_start_isValid;
}

QString OAIDescribeReservationResponse_Reservation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeReservationResponse_Reservation::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_duration_units.isSet()) {
        obj.insert(QString("DurationUnits"), ::OpenAPI::toJsonValue(m_duration_units));
    }
    if (m_end_isSet) {
        obj.insert(QString("End"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_offering_arn_isSet) {
        obj.insert(QString("OfferingArn"), ::OpenAPI::toJsonValue(m_offering_arn));
    }
    if (m_offering_description_isSet) {
        obj.insert(QString("OfferingDescription"), ::OpenAPI::toJsonValue(m_offering_description));
    }
    if (m_price_per_unit_isSet) {
        obj.insert(QString("PricePerUnit"), ::OpenAPI::toJsonValue(m_price_per_unit));
    }
    if (m_price_units.isSet()) {
        obj.insert(QString("PriceUnits"), ::OpenAPI::toJsonValue(m_price_units));
    }
    if (m_reservation_arn_isSet) {
        obj.insert(QString("ReservationArn"), ::OpenAPI::toJsonValue(m_reservation_arn));
    }
    if (m_reservation_name_isSet) {
        obj.insert(QString("ReservationName"), ::OpenAPI::toJsonValue(m_reservation_name));
    }
    if (m_reservation_state.isSet()) {
        obj.insert(QString("ReservationState"), ::OpenAPI::toJsonValue(m_reservation_state));
    }
    if (m_resource_specification.isSet()) {
        obj.insert(QString("ResourceSpecification"), ::OpenAPI::toJsonValue(m_resource_specification));
    }
    if (m_start_isSet) {
        obj.insert(QString("Start"), ::OpenAPI::toJsonValue(m_start));
    }
    return obj;
}

QString OAIDescribeReservationResponse_Reservation::getCurrencyCode() const {
    return m_currency_code;
}
void OAIDescribeReservationResponse_Reservation::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

qint32 OAIDescribeReservationResponse_Reservation::getDuration() const {
    return m_duration;
}
void OAIDescribeReservationResponse_Reservation::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIDurationUnits OAIDescribeReservationResponse_Reservation::getDurationUnits() const {
    return m_duration_units;
}
void OAIDescribeReservationResponse_Reservation::setDurationUnits(const OAIDurationUnits &duration_units) {
    m_duration_units = duration_units;
    m_duration_units_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_duration_units_Set() const{
    return m_duration_units_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_duration_units_Valid() const{
    return m_duration_units_isValid;
}

QString OAIDescribeReservationResponse_Reservation::getEnd() const {
    return m_end;
}
void OAIDescribeReservationResponse_Reservation::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_end_Set() const{
    return m_end_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIDescribeReservationResponse_Reservation::getOfferingArn() const {
    return m_offering_arn;
}
void OAIDescribeReservationResponse_Reservation::setOfferingArn(const QString &offering_arn) {
    m_offering_arn = offering_arn;
    m_offering_arn_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_offering_arn_Set() const{
    return m_offering_arn_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_offering_arn_Valid() const{
    return m_offering_arn_isValid;
}

QString OAIDescribeReservationResponse_Reservation::getOfferingDescription() const {
    return m_offering_description;
}
void OAIDescribeReservationResponse_Reservation::setOfferingDescription(const QString &offering_description) {
    m_offering_description = offering_description;
    m_offering_description_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_offering_description_Set() const{
    return m_offering_description_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_offering_description_Valid() const{
    return m_offering_description_isValid;
}

QString OAIDescribeReservationResponse_Reservation::getPricePerUnit() const {
    return m_price_per_unit;
}
void OAIDescribeReservationResponse_Reservation::setPricePerUnit(const QString &price_per_unit) {
    m_price_per_unit = price_per_unit;
    m_price_per_unit_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_price_per_unit_Set() const{
    return m_price_per_unit_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_price_per_unit_Valid() const{
    return m_price_per_unit_isValid;
}

OAIPriceUnits OAIDescribeReservationResponse_Reservation::getPriceUnits() const {
    return m_price_units;
}
void OAIDescribeReservationResponse_Reservation::setPriceUnits(const OAIPriceUnits &price_units) {
    m_price_units = price_units;
    m_price_units_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_price_units_Set() const{
    return m_price_units_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_price_units_Valid() const{
    return m_price_units_isValid;
}

QString OAIDescribeReservationResponse_Reservation::getReservationArn() const {
    return m_reservation_arn;
}
void OAIDescribeReservationResponse_Reservation::setReservationArn(const QString &reservation_arn) {
    m_reservation_arn = reservation_arn;
    m_reservation_arn_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_reservation_arn_Set() const{
    return m_reservation_arn_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_reservation_arn_Valid() const{
    return m_reservation_arn_isValid;
}

QString OAIDescribeReservationResponse_Reservation::getReservationName() const {
    return m_reservation_name;
}
void OAIDescribeReservationResponse_Reservation::setReservationName(const QString &reservation_name) {
    m_reservation_name = reservation_name;
    m_reservation_name_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_reservation_name_Set() const{
    return m_reservation_name_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_reservation_name_Valid() const{
    return m_reservation_name_isValid;
}

OAIReservationState OAIDescribeReservationResponse_Reservation::getReservationState() const {
    return m_reservation_state;
}
void OAIDescribeReservationResponse_Reservation::setReservationState(const OAIReservationState &reservation_state) {
    m_reservation_state = reservation_state;
    m_reservation_state_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_reservation_state_Set() const{
    return m_reservation_state_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_reservation_state_Valid() const{
    return m_reservation_state_isValid;
}

OAIReservation_ResourceSpecification OAIDescribeReservationResponse_Reservation::getResourceSpecification() const {
    return m_resource_specification;
}
void OAIDescribeReservationResponse_Reservation::setResourceSpecification(const OAIReservation_ResourceSpecification &resource_specification) {
    m_resource_specification = resource_specification;
    m_resource_specification_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_resource_specification_Set() const{
    return m_resource_specification_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_resource_specification_Valid() const{
    return m_resource_specification_isValid;
}

QString OAIDescribeReservationResponse_Reservation::getStart() const {
    return m_start;
}
void OAIDescribeReservationResponse_Reservation::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIDescribeReservationResponse_Reservation::is_start_Set() const{
    return m_start_isSet;
}

bool OAIDescribeReservationResponse_Reservation::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIDescribeReservationResponse_Reservation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offering_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_per_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_units.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeReservationResponse_Reservation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_code_isValid && m_duration_isValid && m_duration_units_isValid && m_end_isValid && m_offering_arn_isValid && m_offering_description_isValid && m_price_per_unit_isValid && m_price_units_isValid && m_reservation_arn_isValid && m_reservation_name_isValid && m_reservation_state_isValid && m_resource_specification_isValid && m_start_isValid && true;
}

} // namespace OpenAPI
