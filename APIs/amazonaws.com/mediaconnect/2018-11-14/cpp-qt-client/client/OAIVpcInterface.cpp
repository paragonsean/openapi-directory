/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcInterface::OAIVpcInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcInterface::OAIVpcInterface() {
    this->initializeModel();
}

OAIVpcInterface::~OAIVpcInterface() {}

void OAIVpcInterface::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_interface_ids_isSet = false;
    m_network_interface_ids_isValid = false;

    m_network_interface_type_isSet = false;
    m_network_interface_type_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;
}

void OAIVpcInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpcInterface::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_network_interface_ids_isValid = ::OpenAPI::fromJsonValue(m_network_interface_ids, json[QString("NetworkInterfaceIds")]);
    m_network_interface_ids_isSet = !json[QString("NetworkInterfaceIds")].isNull() && m_network_interface_ids_isValid;

    m_network_interface_type_isValid = ::OpenAPI::fromJsonValue(m_network_interface_type, json[QString("NetworkInterfaceType")]);
    m_network_interface_type_isSet = !json[QString("NetworkInterfaceType")].isNull() && m_network_interface_type_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("SubnetId")]);
    m_subnet_id_isSet = !json[QString("SubnetId")].isNull() && m_subnet_id_isValid;
}

QString OAIVpcInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpcInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_interface_ids.isSet()) {
        obj.insert(QString("NetworkInterfaceIds"), ::OpenAPI::toJsonValue(m_network_interface_ids));
    }
    if (m_network_interface_type.isSet()) {
        obj.insert(QString("NetworkInterfaceType"), ::OpenAPI::toJsonValue(m_network_interface_type));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("SubnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    return obj;
}

QString OAIVpcInterface::getName() const {
    return m_name;
}
void OAIVpcInterface::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVpcInterface::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVpcInterface::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIVpcInterface::getNetworkInterfaceIds() const {
    return m_network_interface_ids;
}
void OAIVpcInterface::setNetworkInterfaceIds(const QList &network_interface_ids) {
    m_network_interface_ids = network_interface_ids;
    m_network_interface_ids_isSet = true;
}

bool OAIVpcInterface::is_network_interface_ids_Set() const{
    return m_network_interface_ids_isSet;
}

bool OAIVpcInterface::is_network_interface_ids_Valid() const{
    return m_network_interface_ids_isValid;
}

OAINetworkInterfaceType OAIVpcInterface::getNetworkInterfaceType() const {
    return m_network_interface_type;
}
void OAIVpcInterface::setNetworkInterfaceType(const OAINetworkInterfaceType &network_interface_type) {
    m_network_interface_type = network_interface_type;
    m_network_interface_type_isSet = true;
}

bool OAIVpcInterface::is_network_interface_type_Set() const{
    return m_network_interface_type_isSet;
}

bool OAIVpcInterface::is_network_interface_type_Valid() const{
    return m_network_interface_type_isValid;
}

QString OAIVpcInterface::getRoleArn() const {
    return m_role_arn;
}
void OAIVpcInterface::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIVpcInterface::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIVpcInterface::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAIVpcInterface::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIVpcInterface::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIVpcInterface::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIVpcInterface::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QString OAIVpcInterface::getSubnetId() const {
    return m_subnet_id;
}
void OAIVpcInterface::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIVpcInterface::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIVpcInterface::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

bool OAIVpcInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interface_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpcInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_network_interface_ids_isValid && m_network_interface_type_isValid && m_role_arn_isValid && m_security_group_ids_isValid && m_subnet_id_isValid && true;
}

} // namespace OpenAPI
