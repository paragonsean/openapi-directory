/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColorimetry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColorimetry::OAIColorimetry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColorimetry::OAIColorimetry() {
    this->initializeModel();
}

OAIColorimetry::~OAIColorimetry() {}

void OAIColorimetry::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIColorimetry::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIColorimetry::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BT601", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorimetry::BT601;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BT709", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorimetry::BT709;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BT2020", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorimetry::BT2020;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BT2100", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorimetry::BT2100;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ST2065-1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorimetry::ST2065_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ST2065-3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorimetry::ST2065_3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("XYZ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIColorimetry::XYZ;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIColorimetry::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIColorimetry::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIColorimetry::BT601:
            val = "BT601";
            break;
        case eOAIColorimetry::BT709:
            val = "BT709";
            break;
        case eOAIColorimetry::BT2020:
            val = "BT2020";
            break;
        case eOAIColorimetry::BT2100:
            val = "BT2100";
            break;
        case eOAIColorimetry::ST2065_1:
            val = "ST2065-1";
            break;
        case eOAIColorimetry::ST2065_3:
            val = "ST2065-3";
            break;
        case eOAIColorimetry::XYZ:
            val = "XYZ";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIColorimetry::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIColorimetry::eOAIColorimetry OAIColorimetry::getValue() const {
    return m_value;
}

void OAIColorimetry::setValue(const OAIColorimetry::eOAIColorimetry& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIColorimetry::isSet() const {
    
    return m_value_isSet;
}

bool OAIColorimetry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
