/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFlowMediaStreamRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFlowMediaStreamRequest::OAIUpdateFlowMediaStreamRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFlowMediaStreamRequest::OAIUpdateFlowMediaStreamRequest() {
    this->initializeModel();
}

OAIUpdateFlowMediaStreamRequest::~OAIUpdateFlowMediaStreamRequest() {}

void OAIUpdateFlowMediaStreamRequest::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_clock_rate_isSet = false;
    m_clock_rate_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_media_stream_type_isSet = false;
    m_media_stream_type_isValid = false;

    m_video_format_isSet = false;
    m_video_format_isValid = false;
}

void OAIUpdateFlowMediaStreamRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFlowMediaStreamRequest::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_clock_rate_isValid = ::OpenAPI::fromJsonValue(m_clock_rate, json[QString("ClockRate")]);
    m_clock_rate_isSet = !json[QString("ClockRate")].isNull() && m_clock_rate_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_media_stream_type_isValid = ::OpenAPI::fromJsonValue(m_media_stream_type, json[QString("MediaStreamType")]);
    m_media_stream_type_isSet = !json[QString("MediaStreamType")].isNull() && m_media_stream_type_isValid;

    m_video_format_isValid = ::OpenAPI::fromJsonValue(m_video_format, json[QString("VideoFormat")]);
    m_video_format_isSet = !json[QString("VideoFormat")].isNull() && m_video_format_isValid;
}

QString OAIUpdateFlowMediaStreamRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFlowMediaStreamRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_clock_rate_isSet) {
        obj.insert(QString("ClockRate"), ::OpenAPI::toJsonValue(m_clock_rate));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_media_stream_type.isSet()) {
        obj.insert(QString("MediaStreamType"), ::OpenAPI::toJsonValue(m_media_stream_type));
    }
    if (m_video_format_isSet) {
        obj.insert(QString("VideoFormat"), ::OpenAPI::toJsonValue(m_video_format));
    }
    return obj;
}

OAIUpdateFlowMediaStreamRequest_Attributes OAIUpdateFlowMediaStreamRequest::getAttributes() const {
    return m_attributes;
}
void OAIUpdateFlowMediaStreamRequest::setAttributes(const OAIUpdateFlowMediaStreamRequest_Attributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIUpdateFlowMediaStreamRequest::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIUpdateFlowMediaStreamRequest::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint32 OAIUpdateFlowMediaStreamRequest::getClockRate() const {
    return m_clock_rate;
}
void OAIUpdateFlowMediaStreamRequest::setClockRate(const qint32 &clock_rate) {
    m_clock_rate = clock_rate;
    m_clock_rate_isSet = true;
}

bool OAIUpdateFlowMediaStreamRequest::is_clock_rate_Set() const{
    return m_clock_rate_isSet;
}

bool OAIUpdateFlowMediaStreamRequest::is_clock_rate_Valid() const{
    return m_clock_rate_isValid;
}

QString OAIUpdateFlowMediaStreamRequest::getDescription() const {
    return m_description;
}
void OAIUpdateFlowMediaStreamRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateFlowMediaStreamRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateFlowMediaStreamRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIMediaStreamType OAIUpdateFlowMediaStreamRequest::getMediaStreamType() const {
    return m_media_stream_type;
}
void OAIUpdateFlowMediaStreamRequest::setMediaStreamType(const OAIMediaStreamType &media_stream_type) {
    m_media_stream_type = media_stream_type;
    m_media_stream_type_isSet = true;
}

bool OAIUpdateFlowMediaStreamRequest::is_media_stream_type_Set() const{
    return m_media_stream_type_isSet;
}

bool OAIUpdateFlowMediaStreamRequest::is_media_stream_type_Valid() const{
    return m_media_stream_type_isValid;
}

QString OAIUpdateFlowMediaStreamRequest::getVideoFormat() const {
    return m_video_format;
}
void OAIUpdateFlowMediaStreamRequest::setVideoFormat(const QString &video_format) {
    m_video_format = video_format;
    m_video_format_isSet = true;
}

bool OAIUpdateFlowMediaStreamRequest::is_video_format_Set() const{
    return m_video_format_isSet;
}

bool OAIUpdateFlowMediaStreamRequest::is_video_format_Valid() const{
    return m_video_format_isValid;
}

bool OAIUpdateFlowMediaStreamRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clock_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_stream_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFlowMediaStreamRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
