/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaStreamOutputConfiguration_EncodingParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaStreamOutputConfiguration_EncodingParameters::OAIMediaStreamOutputConfiguration_EncodingParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaStreamOutputConfiguration_EncodingParameters::OAIMediaStreamOutputConfiguration_EncodingParameters() {
    this->initializeModel();
}

OAIMediaStreamOutputConfiguration_EncodingParameters::~OAIMediaStreamOutputConfiguration_EncodingParameters() {}

void OAIMediaStreamOutputConfiguration_EncodingParameters::initializeModel() {

    m_compression_factor_isSet = false;
    m_compression_factor_isValid = false;

    m_encoder_profile_isSet = false;
    m_encoder_profile_isValid = false;
}

void OAIMediaStreamOutputConfiguration_EncodingParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaStreamOutputConfiguration_EncodingParameters::fromJsonObject(QJsonObject json) {

    m_compression_factor_isValid = ::OpenAPI::fromJsonValue(m_compression_factor, json[QString("CompressionFactor")]);
    m_compression_factor_isSet = !json[QString("CompressionFactor")].isNull() && m_compression_factor_isValid;

    m_encoder_profile_isValid = ::OpenAPI::fromJsonValue(m_encoder_profile, json[QString("EncoderProfile")]);
    m_encoder_profile_isSet = !json[QString("EncoderProfile")].isNull() && m_encoder_profile_isValid;
}

QString OAIMediaStreamOutputConfiguration_EncodingParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaStreamOutputConfiguration_EncodingParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_compression_factor_isSet) {
        obj.insert(QString("CompressionFactor"), ::OpenAPI::toJsonValue(m_compression_factor));
    }
    if (m_encoder_profile.isSet()) {
        obj.insert(QString("EncoderProfile"), ::OpenAPI::toJsonValue(m_encoder_profile));
    }
    return obj;
}

double OAIMediaStreamOutputConfiguration_EncodingParameters::getCompressionFactor() const {
    return m_compression_factor;
}
void OAIMediaStreamOutputConfiguration_EncodingParameters::setCompressionFactor(const double &compression_factor) {
    m_compression_factor = compression_factor;
    m_compression_factor_isSet = true;
}

bool OAIMediaStreamOutputConfiguration_EncodingParameters::is_compression_factor_Set() const{
    return m_compression_factor_isSet;
}

bool OAIMediaStreamOutputConfiguration_EncodingParameters::is_compression_factor_Valid() const{
    return m_compression_factor_isValid;
}

OAIEncoderProfile OAIMediaStreamOutputConfiguration_EncodingParameters::getEncoderProfile() const {
    return m_encoder_profile;
}
void OAIMediaStreamOutputConfiguration_EncodingParameters::setEncoderProfile(const OAIEncoderProfile &encoder_profile) {
    m_encoder_profile = encoder_profile;
    m_encoder_profile_isSet = true;
}

bool OAIMediaStreamOutputConfiguration_EncodingParameters::is_encoder_profile_Set() const{
    return m_encoder_profile_isSet;
}

bool OAIMediaStreamOutputConfiguration_EncodingParameters::is_encoder_profile_Valid() const{
    return m_encoder_profile_isValid;
}

bool OAIMediaStreamOutputConfiguration_EncodingParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compression_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoder_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaStreamOutputConfiguration_EncodingParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_compression_factor_isValid && m_encoder_profile_isValid && true;
}

} // namespace OpenAPI
