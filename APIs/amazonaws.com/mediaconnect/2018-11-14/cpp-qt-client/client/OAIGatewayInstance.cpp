/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGatewayInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGatewayInstance::OAIGatewayInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGatewayInstance::OAIGatewayInstance() {
    this->initializeModel();
}

OAIGatewayInstance::~OAIGatewayInstance() {}

void OAIGatewayInstance::initializeModel() {

    m_bridge_placement_isSet = false;
    m_bridge_placement_isValid = false;

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_gateway_arn_isSet = false;
    m_gateway_arn_isValid = false;

    m_gateway_instance_arn_isSet = false;
    m_gateway_instance_arn_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_messages_isSet = false;
    m_instance_messages_isValid = false;

    m_instance_state_isSet = false;
    m_instance_state_isValid = false;

    m_running_bridge_count_isSet = false;
    m_running_bridge_count_isValid = false;
}

void OAIGatewayInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGatewayInstance::fromJsonObject(QJsonObject json) {

    m_bridge_placement_isValid = ::OpenAPI::fromJsonValue(m_bridge_placement, json[QString("BridgePlacement")]);
    m_bridge_placement_isSet = !json[QString("BridgePlacement")].isNull() && m_bridge_placement_isValid;

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("ConnectionStatus")]);
    m_connection_status_isSet = !json[QString("ConnectionStatus")].isNull() && m_connection_status_isValid;

    m_gateway_arn_isValid = ::OpenAPI::fromJsonValue(m_gateway_arn, json[QString("GatewayArn")]);
    m_gateway_arn_isSet = !json[QString("GatewayArn")].isNull() && m_gateway_arn_isValid;

    m_gateway_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_gateway_instance_arn, json[QString("GatewayInstanceArn")]);
    m_gateway_instance_arn_isSet = !json[QString("GatewayInstanceArn")].isNull() && m_gateway_instance_arn_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_instance_messages_isValid = ::OpenAPI::fromJsonValue(m_instance_messages, json[QString("InstanceMessages")]);
    m_instance_messages_isSet = !json[QString("InstanceMessages")].isNull() && m_instance_messages_isValid;

    m_instance_state_isValid = ::OpenAPI::fromJsonValue(m_instance_state, json[QString("InstanceState")]);
    m_instance_state_isSet = !json[QString("InstanceState")].isNull() && m_instance_state_isValid;

    m_running_bridge_count_isValid = ::OpenAPI::fromJsonValue(m_running_bridge_count, json[QString("RunningBridgeCount")]);
    m_running_bridge_count_isSet = !json[QString("RunningBridgeCount")].isNull() && m_running_bridge_count_isValid;
}

QString OAIGatewayInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGatewayInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_bridge_placement.isSet()) {
        obj.insert(QString("BridgePlacement"), ::OpenAPI::toJsonValue(m_bridge_placement));
    }
    if (m_connection_status.isSet()) {
        obj.insert(QString("ConnectionStatus"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_gateway_arn_isSet) {
        obj.insert(QString("GatewayArn"), ::OpenAPI::toJsonValue(m_gateway_arn));
    }
    if (m_gateway_instance_arn_isSet) {
        obj.insert(QString("GatewayInstanceArn"), ::OpenAPI::toJsonValue(m_gateway_instance_arn));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_messages.isSet()) {
        obj.insert(QString("InstanceMessages"), ::OpenAPI::toJsonValue(m_instance_messages));
    }
    if (m_instance_state.isSet()) {
        obj.insert(QString("InstanceState"), ::OpenAPI::toJsonValue(m_instance_state));
    }
    if (m_running_bridge_count_isSet) {
        obj.insert(QString("RunningBridgeCount"), ::OpenAPI::toJsonValue(m_running_bridge_count));
    }
    return obj;
}

OAIBridgePlacement OAIGatewayInstance::getBridgePlacement() const {
    return m_bridge_placement;
}
void OAIGatewayInstance::setBridgePlacement(const OAIBridgePlacement &bridge_placement) {
    m_bridge_placement = bridge_placement;
    m_bridge_placement_isSet = true;
}

bool OAIGatewayInstance::is_bridge_placement_Set() const{
    return m_bridge_placement_isSet;
}

bool OAIGatewayInstance::is_bridge_placement_Valid() const{
    return m_bridge_placement_isValid;
}

OAIConnectionStatus OAIGatewayInstance::getConnectionStatus() const {
    return m_connection_status;
}
void OAIGatewayInstance::setConnectionStatus(const OAIConnectionStatus &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAIGatewayInstance::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAIGatewayInstance::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

QString OAIGatewayInstance::getGatewayArn() const {
    return m_gateway_arn;
}
void OAIGatewayInstance::setGatewayArn(const QString &gateway_arn) {
    m_gateway_arn = gateway_arn;
    m_gateway_arn_isSet = true;
}

bool OAIGatewayInstance::is_gateway_arn_Set() const{
    return m_gateway_arn_isSet;
}

bool OAIGatewayInstance::is_gateway_arn_Valid() const{
    return m_gateway_arn_isValid;
}

QString OAIGatewayInstance::getGatewayInstanceArn() const {
    return m_gateway_instance_arn;
}
void OAIGatewayInstance::setGatewayInstanceArn(const QString &gateway_instance_arn) {
    m_gateway_instance_arn = gateway_instance_arn;
    m_gateway_instance_arn_isSet = true;
}

bool OAIGatewayInstance::is_gateway_instance_arn_Set() const{
    return m_gateway_instance_arn_isSet;
}

bool OAIGatewayInstance::is_gateway_instance_arn_Valid() const{
    return m_gateway_instance_arn_isValid;
}

QString OAIGatewayInstance::getInstanceId() const {
    return m_instance_id;
}
void OAIGatewayInstance::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIGatewayInstance::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIGatewayInstance::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QList OAIGatewayInstance::getInstanceMessages() const {
    return m_instance_messages;
}
void OAIGatewayInstance::setInstanceMessages(const QList &instance_messages) {
    m_instance_messages = instance_messages;
    m_instance_messages_isSet = true;
}

bool OAIGatewayInstance::is_instance_messages_Set() const{
    return m_instance_messages_isSet;
}

bool OAIGatewayInstance::is_instance_messages_Valid() const{
    return m_instance_messages_isValid;
}

OAIInstanceState OAIGatewayInstance::getInstanceState() const {
    return m_instance_state;
}
void OAIGatewayInstance::setInstanceState(const OAIInstanceState &instance_state) {
    m_instance_state = instance_state;
    m_instance_state_isSet = true;
}

bool OAIGatewayInstance::is_instance_state_Set() const{
    return m_instance_state_isSet;
}

bool OAIGatewayInstance::is_instance_state_Valid() const{
    return m_instance_state_isValid;
}

qint32 OAIGatewayInstance::getRunningBridgeCount() const {
    return m_running_bridge_count;
}
void OAIGatewayInstance::setRunningBridgeCount(const qint32 &running_bridge_count) {
    m_running_bridge_count = running_bridge_count;
    m_running_bridge_count_isSet = true;
}

bool OAIGatewayInstance::is_running_bridge_count_Set() const{
    return m_running_bridge_count_isSet;
}

bool OAIGatewayInstance::is_running_bridge_count_Valid() const{
    return m_running_bridge_count_isValid;
}

bool OAIGatewayInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bridge_placement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_bridge_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGatewayInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bridge_placement_isValid && m_connection_status_isValid && m_gateway_arn_isValid && m_gateway_instance_arn_isValid && m_instance_id_isValid && m_instance_state_isValid && m_running_bridge_count_isValid && true;
}

} // namespace OpenAPI
