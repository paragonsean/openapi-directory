/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource_Transport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource_Transport::OAISource_Transport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource_Transport::OAISource_Transport() {
    this->initializeModel();
}

OAISource_Transport::~OAISource_Transport() {}

void OAISource_Transport::initializeModel() {

    m_cidr_allow_list_isSet = false;
    m_cidr_allow_list_isValid = false;

    m_max_bitrate_isSet = false;
    m_max_bitrate_isValid = false;

    m_max_latency_isSet = false;
    m_max_latency_isValid = false;

    m_max_sync_buffer_isSet = false;
    m_max_sync_buffer_isValid = false;

    m_min_latency_isSet = false;
    m_min_latency_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_remote_id_isSet = false;
    m_remote_id_isValid = false;

    m_sender_control_port_isSet = false;
    m_sender_control_port_isValid = false;

    m_sender_ip_address_isSet = false;
    m_sender_ip_address_isValid = false;

    m_smoothing_latency_isSet = false;
    m_smoothing_latency_isValid = false;

    m_source_listener_address_isSet = false;
    m_source_listener_address_isValid = false;

    m_source_listener_port_isSet = false;
    m_source_listener_port_isValid = false;

    m_stream_id_isSet = false;
    m_stream_id_isValid = false;
}

void OAISource_Transport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource_Transport::fromJsonObject(QJsonObject json) {

    m_cidr_allow_list_isValid = ::OpenAPI::fromJsonValue(m_cidr_allow_list, json[QString("CidrAllowList")]);
    m_cidr_allow_list_isSet = !json[QString("CidrAllowList")].isNull() && m_cidr_allow_list_isValid;

    m_max_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_bitrate, json[QString("MaxBitrate")]);
    m_max_bitrate_isSet = !json[QString("MaxBitrate")].isNull() && m_max_bitrate_isValid;

    m_max_latency_isValid = ::OpenAPI::fromJsonValue(m_max_latency, json[QString("MaxLatency")]);
    m_max_latency_isSet = !json[QString("MaxLatency")].isNull() && m_max_latency_isValid;

    m_max_sync_buffer_isValid = ::OpenAPI::fromJsonValue(m_max_sync_buffer, json[QString("MaxSyncBuffer")]);
    m_max_sync_buffer_isSet = !json[QString("MaxSyncBuffer")].isNull() && m_max_sync_buffer_isValid;

    m_min_latency_isValid = ::OpenAPI::fromJsonValue(m_min_latency, json[QString("MinLatency")]);
    m_min_latency_isSet = !json[QString("MinLatency")].isNull() && m_min_latency_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("Protocol")]);
    m_protocol_isSet = !json[QString("Protocol")].isNull() && m_protocol_isValid;

    m_remote_id_isValid = ::OpenAPI::fromJsonValue(m_remote_id, json[QString("RemoteId")]);
    m_remote_id_isSet = !json[QString("RemoteId")].isNull() && m_remote_id_isValid;

    m_sender_control_port_isValid = ::OpenAPI::fromJsonValue(m_sender_control_port, json[QString("SenderControlPort")]);
    m_sender_control_port_isSet = !json[QString("SenderControlPort")].isNull() && m_sender_control_port_isValid;

    m_sender_ip_address_isValid = ::OpenAPI::fromJsonValue(m_sender_ip_address, json[QString("SenderIpAddress")]);
    m_sender_ip_address_isSet = !json[QString("SenderIpAddress")].isNull() && m_sender_ip_address_isValid;

    m_smoothing_latency_isValid = ::OpenAPI::fromJsonValue(m_smoothing_latency, json[QString("SmoothingLatency")]);
    m_smoothing_latency_isSet = !json[QString("SmoothingLatency")].isNull() && m_smoothing_latency_isValid;

    m_source_listener_address_isValid = ::OpenAPI::fromJsonValue(m_source_listener_address, json[QString("SourceListenerAddress")]);
    m_source_listener_address_isSet = !json[QString("SourceListenerAddress")].isNull() && m_source_listener_address_isValid;

    m_source_listener_port_isValid = ::OpenAPI::fromJsonValue(m_source_listener_port, json[QString("SourceListenerPort")]);
    m_source_listener_port_isSet = !json[QString("SourceListenerPort")].isNull() && m_source_listener_port_isValid;

    m_stream_id_isValid = ::OpenAPI::fromJsonValue(m_stream_id, json[QString("StreamId")]);
    m_stream_id_isSet = !json[QString("StreamId")].isNull() && m_stream_id_isValid;
}

QString OAISource_Transport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource_Transport::asJsonObject() const {
    QJsonObject obj;
    if (m_cidr_allow_list.isSet()) {
        obj.insert(QString("CidrAllowList"), ::OpenAPI::toJsonValue(m_cidr_allow_list));
    }
    if (m_max_bitrate_isSet) {
        obj.insert(QString("MaxBitrate"), ::OpenAPI::toJsonValue(m_max_bitrate));
    }
    if (m_max_latency_isSet) {
        obj.insert(QString("MaxLatency"), ::OpenAPI::toJsonValue(m_max_latency));
    }
    if (m_max_sync_buffer_isSet) {
        obj.insert(QString("MaxSyncBuffer"), ::OpenAPI::toJsonValue(m_max_sync_buffer));
    }
    if (m_min_latency_isSet) {
        obj.insert(QString("MinLatency"), ::OpenAPI::toJsonValue(m_min_latency));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("Protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_remote_id_isSet) {
        obj.insert(QString("RemoteId"), ::OpenAPI::toJsonValue(m_remote_id));
    }
    if (m_sender_control_port_isSet) {
        obj.insert(QString("SenderControlPort"), ::OpenAPI::toJsonValue(m_sender_control_port));
    }
    if (m_sender_ip_address_isSet) {
        obj.insert(QString("SenderIpAddress"), ::OpenAPI::toJsonValue(m_sender_ip_address));
    }
    if (m_smoothing_latency_isSet) {
        obj.insert(QString("SmoothingLatency"), ::OpenAPI::toJsonValue(m_smoothing_latency));
    }
    if (m_source_listener_address_isSet) {
        obj.insert(QString("SourceListenerAddress"), ::OpenAPI::toJsonValue(m_source_listener_address));
    }
    if (m_source_listener_port_isSet) {
        obj.insert(QString("SourceListenerPort"), ::OpenAPI::toJsonValue(m_source_listener_port));
    }
    if (m_stream_id_isSet) {
        obj.insert(QString("StreamId"), ::OpenAPI::toJsonValue(m_stream_id));
    }
    return obj;
}

QList OAISource_Transport::getCidrAllowList() const {
    return m_cidr_allow_list;
}
void OAISource_Transport::setCidrAllowList(const QList &cidr_allow_list) {
    m_cidr_allow_list = cidr_allow_list;
    m_cidr_allow_list_isSet = true;
}

bool OAISource_Transport::is_cidr_allow_list_Set() const{
    return m_cidr_allow_list_isSet;
}

bool OAISource_Transport::is_cidr_allow_list_Valid() const{
    return m_cidr_allow_list_isValid;
}

qint32 OAISource_Transport::getMaxBitrate() const {
    return m_max_bitrate;
}
void OAISource_Transport::setMaxBitrate(const qint32 &max_bitrate) {
    m_max_bitrate = max_bitrate;
    m_max_bitrate_isSet = true;
}

bool OAISource_Transport::is_max_bitrate_Set() const{
    return m_max_bitrate_isSet;
}

bool OAISource_Transport::is_max_bitrate_Valid() const{
    return m_max_bitrate_isValid;
}

qint32 OAISource_Transport::getMaxLatency() const {
    return m_max_latency;
}
void OAISource_Transport::setMaxLatency(const qint32 &max_latency) {
    m_max_latency = max_latency;
    m_max_latency_isSet = true;
}

bool OAISource_Transport::is_max_latency_Set() const{
    return m_max_latency_isSet;
}

bool OAISource_Transport::is_max_latency_Valid() const{
    return m_max_latency_isValid;
}

qint32 OAISource_Transport::getMaxSyncBuffer() const {
    return m_max_sync_buffer;
}
void OAISource_Transport::setMaxSyncBuffer(const qint32 &max_sync_buffer) {
    m_max_sync_buffer = max_sync_buffer;
    m_max_sync_buffer_isSet = true;
}

bool OAISource_Transport::is_max_sync_buffer_Set() const{
    return m_max_sync_buffer_isSet;
}

bool OAISource_Transport::is_max_sync_buffer_Valid() const{
    return m_max_sync_buffer_isValid;
}

qint32 OAISource_Transport::getMinLatency() const {
    return m_min_latency;
}
void OAISource_Transport::setMinLatency(const qint32 &min_latency) {
    m_min_latency = min_latency;
    m_min_latency_isSet = true;
}

bool OAISource_Transport::is_min_latency_Set() const{
    return m_min_latency_isSet;
}

bool OAISource_Transport::is_min_latency_Valid() const{
    return m_min_latency_isValid;
}

OAIProtocol OAISource_Transport::getProtocol() const {
    return m_protocol;
}
void OAISource_Transport::setProtocol(const OAIProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAISource_Transport::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAISource_Transport::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAISource_Transport::getRemoteId() const {
    return m_remote_id;
}
void OAISource_Transport::setRemoteId(const QString &remote_id) {
    m_remote_id = remote_id;
    m_remote_id_isSet = true;
}

bool OAISource_Transport::is_remote_id_Set() const{
    return m_remote_id_isSet;
}

bool OAISource_Transport::is_remote_id_Valid() const{
    return m_remote_id_isValid;
}

qint32 OAISource_Transport::getSenderControlPort() const {
    return m_sender_control_port;
}
void OAISource_Transport::setSenderControlPort(const qint32 &sender_control_port) {
    m_sender_control_port = sender_control_port;
    m_sender_control_port_isSet = true;
}

bool OAISource_Transport::is_sender_control_port_Set() const{
    return m_sender_control_port_isSet;
}

bool OAISource_Transport::is_sender_control_port_Valid() const{
    return m_sender_control_port_isValid;
}

QString OAISource_Transport::getSenderIpAddress() const {
    return m_sender_ip_address;
}
void OAISource_Transport::setSenderIpAddress(const QString &sender_ip_address) {
    m_sender_ip_address = sender_ip_address;
    m_sender_ip_address_isSet = true;
}

bool OAISource_Transport::is_sender_ip_address_Set() const{
    return m_sender_ip_address_isSet;
}

bool OAISource_Transport::is_sender_ip_address_Valid() const{
    return m_sender_ip_address_isValid;
}

qint32 OAISource_Transport::getSmoothingLatency() const {
    return m_smoothing_latency;
}
void OAISource_Transport::setSmoothingLatency(const qint32 &smoothing_latency) {
    m_smoothing_latency = smoothing_latency;
    m_smoothing_latency_isSet = true;
}

bool OAISource_Transport::is_smoothing_latency_Set() const{
    return m_smoothing_latency_isSet;
}

bool OAISource_Transport::is_smoothing_latency_Valid() const{
    return m_smoothing_latency_isValid;
}

QString OAISource_Transport::getSourceListenerAddress() const {
    return m_source_listener_address;
}
void OAISource_Transport::setSourceListenerAddress(const QString &source_listener_address) {
    m_source_listener_address = source_listener_address;
    m_source_listener_address_isSet = true;
}

bool OAISource_Transport::is_source_listener_address_Set() const{
    return m_source_listener_address_isSet;
}

bool OAISource_Transport::is_source_listener_address_Valid() const{
    return m_source_listener_address_isValid;
}

qint32 OAISource_Transport::getSourceListenerPort() const {
    return m_source_listener_port;
}
void OAISource_Transport::setSourceListenerPort(const qint32 &source_listener_port) {
    m_source_listener_port = source_listener_port;
    m_source_listener_port_isSet = true;
}

bool OAISource_Transport::is_source_listener_port_Set() const{
    return m_source_listener_port_isSet;
}

bool OAISource_Transport::is_source_listener_port_Valid() const{
    return m_source_listener_port_isValid;
}

QString OAISource_Transport::getStreamId() const {
    return m_stream_id;
}
void OAISource_Transport::setStreamId(const QString &stream_id) {
    m_stream_id = stream_id;
    m_stream_id_isSet = true;
}

bool OAISource_Transport::is_stream_id_Set() const{
    return m_stream_id_isSet;
}

bool OAISource_Transport::is_stream_id_Valid() const{
    return m_stream_id_isValid;
}

bool OAISource_Transport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cidr_allow_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_sync_buffer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_control_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smoothing_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_listener_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_listener_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource_Transport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_protocol_isValid && true;
}

} // namespace OpenAPI
