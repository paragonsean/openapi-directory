/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGatewayResponse_Gateway.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGatewayResponse_Gateway::OAICreateGatewayResponse_Gateway(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGatewayResponse_Gateway::OAICreateGatewayResponse_Gateway() {
    this->initializeModel();
}

OAICreateGatewayResponse_Gateway::~OAICreateGatewayResponse_Gateway() {}

void OAICreateGatewayResponse_Gateway::initializeModel() {

    m_egress_cidr_blocks_isSet = false;
    m_egress_cidr_blocks_isValid = false;

    m_gateway_arn_isSet = false;
    m_gateway_arn_isValid = false;

    m_gateway_messages_isSet = false;
    m_gateway_messages_isValid = false;

    m_gateway_state_isSet = false;
    m_gateway_state_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_networks_isSet = false;
    m_networks_isValid = false;
}

void OAICreateGatewayResponse_Gateway::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGatewayResponse_Gateway::fromJsonObject(QJsonObject json) {

    m_egress_cidr_blocks_isValid = ::OpenAPI::fromJsonValue(m_egress_cidr_blocks, json[QString("EgressCidrBlocks")]);
    m_egress_cidr_blocks_isSet = !json[QString("EgressCidrBlocks")].isNull() && m_egress_cidr_blocks_isValid;

    m_gateway_arn_isValid = ::OpenAPI::fromJsonValue(m_gateway_arn, json[QString("GatewayArn")]);
    m_gateway_arn_isSet = !json[QString("GatewayArn")].isNull() && m_gateway_arn_isValid;

    m_gateway_messages_isValid = ::OpenAPI::fromJsonValue(m_gateway_messages, json[QString("GatewayMessages")]);
    m_gateway_messages_isSet = !json[QString("GatewayMessages")].isNull() && m_gateway_messages_isValid;

    m_gateway_state_isValid = ::OpenAPI::fromJsonValue(m_gateway_state, json[QString("GatewayState")]);
    m_gateway_state_isSet = !json[QString("GatewayState")].isNull() && m_gateway_state_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_networks_isValid = ::OpenAPI::fromJsonValue(m_networks, json[QString("Networks")]);
    m_networks_isSet = !json[QString("Networks")].isNull() && m_networks_isValid;
}

QString OAICreateGatewayResponse_Gateway::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGatewayResponse_Gateway::asJsonObject() const {
    QJsonObject obj;
    if (m_egress_cidr_blocks.isSet()) {
        obj.insert(QString("EgressCidrBlocks"), ::OpenAPI::toJsonValue(m_egress_cidr_blocks));
    }
    if (m_gateway_arn_isSet) {
        obj.insert(QString("GatewayArn"), ::OpenAPI::toJsonValue(m_gateway_arn));
    }
    if (m_gateway_messages.isSet()) {
        obj.insert(QString("GatewayMessages"), ::OpenAPI::toJsonValue(m_gateway_messages));
    }
    if (m_gateway_state.isSet()) {
        obj.insert(QString("GatewayState"), ::OpenAPI::toJsonValue(m_gateway_state));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_networks.isSet()) {
        obj.insert(QString("Networks"), ::OpenAPI::toJsonValue(m_networks));
    }
    return obj;
}

QList OAICreateGatewayResponse_Gateway::getEgressCidrBlocks() const {
    return m_egress_cidr_blocks;
}
void OAICreateGatewayResponse_Gateway::setEgressCidrBlocks(const QList &egress_cidr_blocks) {
    m_egress_cidr_blocks = egress_cidr_blocks;
    m_egress_cidr_blocks_isSet = true;
}

bool OAICreateGatewayResponse_Gateway::is_egress_cidr_blocks_Set() const{
    return m_egress_cidr_blocks_isSet;
}

bool OAICreateGatewayResponse_Gateway::is_egress_cidr_blocks_Valid() const{
    return m_egress_cidr_blocks_isValid;
}

QString OAICreateGatewayResponse_Gateway::getGatewayArn() const {
    return m_gateway_arn;
}
void OAICreateGatewayResponse_Gateway::setGatewayArn(const QString &gateway_arn) {
    m_gateway_arn = gateway_arn;
    m_gateway_arn_isSet = true;
}

bool OAICreateGatewayResponse_Gateway::is_gateway_arn_Set() const{
    return m_gateway_arn_isSet;
}

bool OAICreateGatewayResponse_Gateway::is_gateway_arn_Valid() const{
    return m_gateway_arn_isValid;
}

QList OAICreateGatewayResponse_Gateway::getGatewayMessages() const {
    return m_gateway_messages;
}
void OAICreateGatewayResponse_Gateway::setGatewayMessages(const QList &gateway_messages) {
    m_gateway_messages = gateway_messages;
    m_gateway_messages_isSet = true;
}

bool OAICreateGatewayResponse_Gateway::is_gateway_messages_Set() const{
    return m_gateway_messages_isSet;
}

bool OAICreateGatewayResponse_Gateway::is_gateway_messages_Valid() const{
    return m_gateway_messages_isValid;
}

OAIGatewayState OAICreateGatewayResponse_Gateway::getGatewayState() const {
    return m_gateway_state;
}
void OAICreateGatewayResponse_Gateway::setGatewayState(const OAIGatewayState &gateway_state) {
    m_gateway_state = gateway_state;
    m_gateway_state_isSet = true;
}

bool OAICreateGatewayResponse_Gateway::is_gateway_state_Set() const{
    return m_gateway_state_isSet;
}

bool OAICreateGatewayResponse_Gateway::is_gateway_state_Valid() const{
    return m_gateway_state_isValid;
}

QString OAICreateGatewayResponse_Gateway::getName() const {
    return m_name;
}
void OAICreateGatewayResponse_Gateway::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateGatewayResponse_Gateway::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateGatewayResponse_Gateway::is_name_Valid() const{
    return m_name_isValid;
}

QList OAICreateGatewayResponse_Gateway::getNetworks() const {
    return m_networks;
}
void OAICreateGatewayResponse_Gateway::setNetworks(const QList &networks) {
    m_networks = networks;
    m_networks_isSet = true;
}

bool OAICreateGatewayResponse_Gateway::is_networks_Set() const{
    return m_networks_isSet;
}

bool OAICreateGatewayResponse_Gateway::is_networks_Valid() const{
    return m_networks_isValid;
}

bool OAICreateGatewayResponse_Gateway::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_egress_cidr_blocks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGatewayResponse_Gateway::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_egress_cidr_blocks_isValid && m_gateway_arn_isValid && m_name_isValid && m_networks_isValid && true;
}

} // namespace OpenAPI
