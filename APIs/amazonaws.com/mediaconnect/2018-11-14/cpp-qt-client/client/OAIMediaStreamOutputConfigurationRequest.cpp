/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaStreamOutputConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaStreamOutputConfigurationRequest::OAIMediaStreamOutputConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaStreamOutputConfigurationRequest::OAIMediaStreamOutputConfigurationRequest() {
    this->initializeModel();
}

OAIMediaStreamOutputConfigurationRequest::~OAIMediaStreamOutputConfigurationRequest() {}

void OAIMediaStreamOutputConfigurationRequest::initializeModel() {

    m_destination_configurations_isSet = false;
    m_destination_configurations_isValid = false;

    m_encoding_name_isSet = false;
    m_encoding_name_isValid = false;

    m_encoding_parameters_isSet = false;
    m_encoding_parameters_isValid = false;

    m_media_stream_name_isSet = false;
    m_media_stream_name_isValid = false;
}

void OAIMediaStreamOutputConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaStreamOutputConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_destination_configurations_isValid = ::OpenAPI::fromJsonValue(m_destination_configurations, json[QString("DestinationConfigurations")]);
    m_destination_configurations_isSet = !json[QString("DestinationConfigurations")].isNull() && m_destination_configurations_isValid;

    m_encoding_name_isValid = ::OpenAPI::fromJsonValue(m_encoding_name, json[QString("EncodingName")]);
    m_encoding_name_isSet = !json[QString("EncodingName")].isNull() && m_encoding_name_isValid;

    m_encoding_parameters_isValid = ::OpenAPI::fromJsonValue(m_encoding_parameters, json[QString("EncodingParameters")]);
    m_encoding_parameters_isSet = !json[QString("EncodingParameters")].isNull() && m_encoding_parameters_isValid;

    m_media_stream_name_isValid = ::OpenAPI::fromJsonValue(m_media_stream_name, json[QString("MediaStreamName")]);
    m_media_stream_name_isSet = !json[QString("MediaStreamName")].isNull() && m_media_stream_name_isValid;
}

QString OAIMediaStreamOutputConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaStreamOutputConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_configurations.isSet()) {
        obj.insert(QString("DestinationConfigurations"), ::OpenAPI::toJsonValue(m_destination_configurations));
    }
    if (m_encoding_name.isSet()) {
        obj.insert(QString("EncodingName"), ::OpenAPI::toJsonValue(m_encoding_name));
    }
    if (m_encoding_parameters.isSet()) {
        obj.insert(QString("EncodingParameters"), ::OpenAPI::toJsonValue(m_encoding_parameters));
    }
    if (m_media_stream_name_isSet) {
        obj.insert(QString("MediaStreamName"), ::OpenAPI::toJsonValue(m_media_stream_name));
    }
    return obj;
}

QList OAIMediaStreamOutputConfigurationRequest::getDestinationConfigurations() const {
    return m_destination_configurations;
}
void OAIMediaStreamOutputConfigurationRequest::setDestinationConfigurations(const QList &destination_configurations) {
    m_destination_configurations = destination_configurations;
    m_destination_configurations_isSet = true;
}

bool OAIMediaStreamOutputConfigurationRequest::is_destination_configurations_Set() const{
    return m_destination_configurations_isSet;
}

bool OAIMediaStreamOutputConfigurationRequest::is_destination_configurations_Valid() const{
    return m_destination_configurations_isValid;
}

OAIEncodingName OAIMediaStreamOutputConfigurationRequest::getEncodingName() const {
    return m_encoding_name;
}
void OAIMediaStreamOutputConfigurationRequest::setEncodingName(const OAIEncodingName &encoding_name) {
    m_encoding_name = encoding_name;
    m_encoding_name_isSet = true;
}

bool OAIMediaStreamOutputConfigurationRequest::is_encoding_name_Set() const{
    return m_encoding_name_isSet;
}

bool OAIMediaStreamOutputConfigurationRequest::is_encoding_name_Valid() const{
    return m_encoding_name_isValid;
}

OAIMediaStreamOutputConfigurationRequest_EncodingParameters OAIMediaStreamOutputConfigurationRequest::getEncodingParameters() const {
    return m_encoding_parameters;
}
void OAIMediaStreamOutputConfigurationRequest::setEncodingParameters(const OAIMediaStreamOutputConfigurationRequest_EncodingParameters &encoding_parameters) {
    m_encoding_parameters = encoding_parameters;
    m_encoding_parameters_isSet = true;
}

bool OAIMediaStreamOutputConfigurationRequest::is_encoding_parameters_Set() const{
    return m_encoding_parameters_isSet;
}

bool OAIMediaStreamOutputConfigurationRequest::is_encoding_parameters_Valid() const{
    return m_encoding_parameters_isValid;
}

QString OAIMediaStreamOutputConfigurationRequest::getMediaStreamName() const {
    return m_media_stream_name;
}
void OAIMediaStreamOutputConfigurationRequest::setMediaStreamName(const QString &media_stream_name) {
    m_media_stream_name = media_stream_name;
    m_media_stream_name_isSet = true;
}

bool OAIMediaStreamOutputConfigurationRequest::is_media_stream_name_Set() const{
    return m_media_stream_name_isSet;
}

bool OAIMediaStreamOutputConfigurationRequest::is_media_stream_name_Valid() const{
    return m_media_stream_name_isValid;
}

bool OAIMediaStreamOutputConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaStreamOutputConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encoding_name_isValid && m_media_stream_name_isValid && true;
}

} // namespace OpenAPI
