/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddOutputRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddOutputRequest::OAIAddOutputRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddOutputRequest::OAIAddOutputRequest() {
    this->initializeModel();
}

OAIAddOutputRequest::~OAIAddOutputRequest() {}

void OAIAddOutputRequest::initializeModel() {

    m_cidr_allow_list_isSet = false;
    m_cidr_allow_list_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_max_latency_isSet = false;
    m_max_latency_isValid = false;

    m_media_stream_output_configurations_isSet = false;
    m_media_stream_output_configurations_isValid = false;

    m_min_latency_isSet = false;
    m_min_latency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_remote_id_isSet = false;
    m_remote_id_isValid = false;

    m_sender_control_port_isSet = false;
    m_sender_control_port_isValid = false;

    m_smoothing_latency_isSet = false;
    m_smoothing_latency_isValid = false;

    m_stream_id_isSet = false;
    m_stream_id_isValid = false;

    m_vpc_interface_attachment_isSet = false;
    m_vpc_interface_attachment_isValid = false;
}

void OAIAddOutputRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddOutputRequest::fromJsonObject(QJsonObject json) {

    m_cidr_allow_list_isValid = ::OpenAPI::fromJsonValue(m_cidr_allow_list, json[QString("CidrAllowList")]);
    m_cidr_allow_list_isSet = !json[QString("CidrAllowList")].isNull() && m_cidr_allow_list_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;

    m_max_latency_isValid = ::OpenAPI::fromJsonValue(m_max_latency, json[QString("MaxLatency")]);
    m_max_latency_isSet = !json[QString("MaxLatency")].isNull() && m_max_latency_isValid;

    m_media_stream_output_configurations_isValid = ::OpenAPI::fromJsonValue(m_media_stream_output_configurations, json[QString("MediaStreamOutputConfigurations")]);
    m_media_stream_output_configurations_isSet = !json[QString("MediaStreamOutputConfigurations")].isNull() && m_media_stream_output_configurations_isValid;

    m_min_latency_isValid = ::OpenAPI::fromJsonValue(m_min_latency, json[QString("MinLatency")]);
    m_min_latency_isSet = !json[QString("MinLatency")].isNull() && m_min_latency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("Protocol")]);
    m_protocol_isSet = !json[QString("Protocol")].isNull() && m_protocol_isValid;

    m_remote_id_isValid = ::OpenAPI::fromJsonValue(m_remote_id, json[QString("RemoteId")]);
    m_remote_id_isSet = !json[QString("RemoteId")].isNull() && m_remote_id_isValid;

    m_sender_control_port_isValid = ::OpenAPI::fromJsonValue(m_sender_control_port, json[QString("SenderControlPort")]);
    m_sender_control_port_isSet = !json[QString("SenderControlPort")].isNull() && m_sender_control_port_isValid;

    m_smoothing_latency_isValid = ::OpenAPI::fromJsonValue(m_smoothing_latency, json[QString("SmoothingLatency")]);
    m_smoothing_latency_isSet = !json[QString("SmoothingLatency")].isNull() && m_smoothing_latency_isValid;

    m_stream_id_isValid = ::OpenAPI::fromJsonValue(m_stream_id, json[QString("StreamId")]);
    m_stream_id_isSet = !json[QString("StreamId")].isNull() && m_stream_id_isValid;

    m_vpc_interface_attachment_isValid = ::OpenAPI::fromJsonValue(m_vpc_interface_attachment, json[QString("VpcInterfaceAttachment")]);
    m_vpc_interface_attachment_isSet = !json[QString("VpcInterfaceAttachment")].isNull() && m_vpc_interface_attachment_isValid;
}

QString OAIAddOutputRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddOutputRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cidr_allow_list.isSet()) {
        obj.insert(QString("CidrAllowList"), ::OpenAPI::toJsonValue(m_cidr_allow_list));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_isSet) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_max_latency_isSet) {
        obj.insert(QString("MaxLatency"), ::OpenAPI::toJsonValue(m_max_latency));
    }
    if (m_media_stream_output_configurations.isSet()) {
        obj.insert(QString("MediaStreamOutputConfigurations"), ::OpenAPI::toJsonValue(m_media_stream_output_configurations));
    }
    if (m_min_latency_isSet) {
        obj.insert(QString("MinLatency"), ::OpenAPI::toJsonValue(m_min_latency));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("Protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_remote_id_isSet) {
        obj.insert(QString("RemoteId"), ::OpenAPI::toJsonValue(m_remote_id));
    }
    if (m_sender_control_port_isSet) {
        obj.insert(QString("SenderControlPort"), ::OpenAPI::toJsonValue(m_sender_control_port));
    }
    if (m_smoothing_latency_isSet) {
        obj.insert(QString("SmoothingLatency"), ::OpenAPI::toJsonValue(m_smoothing_latency));
    }
    if (m_stream_id_isSet) {
        obj.insert(QString("StreamId"), ::OpenAPI::toJsonValue(m_stream_id));
    }
    if (m_vpc_interface_attachment.isSet()) {
        obj.insert(QString("VpcInterfaceAttachment"), ::OpenAPI::toJsonValue(m_vpc_interface_attachment));
    }
    return obj;
}

QList OAIAddOutputRequest::getCidrAllowList() const {
    return m_cidr_allow_list;
}
void OAIAddOutputRequest::setCidrAllowList(const QList &cidr_allow_list) {
    m_cidr_allow_list = cidr_allow_list;
    m_cidr_allow_list_isSet = true;
}

bool OAIAddOutputRequest::is_cidr_allow_list_Set() const{
    return m_cidr_allow_list_isSet;
}

bool OAIAddOutputRequest::is_cidr_allow_list_Valid() const{
    return m_cidr_allow_list_isValid;
}

QString OAIAddOutputRequest::getDescription() const {
    return m_description;
}
void OAIAddOutputRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAddOutputRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAddOutputRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAddOutputRequest::getDestination() const {
    return m_destination;
}
void OAIAddOutputRequest::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIAddOutputRequest::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIAddOutputRequest::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIAddOutputRequest_Encryption OAIAddOutputRequest::getEncryption() const {
    return m_encryption;
}
void OAIAddOutputRequest::setEncryption(const OAIAddOutputRequest_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIAddOutputRequest::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIAddOutputRequest::is_encryption_Valid() const{
    return m_encryption_isValid;
}

qint32 OAIAddOutputRequest::getMaxLatency() const {
    return m_max_latency;
}
void OAIAddOutputRequest::setMaxLatency(const qint32 &max_latency) {
    m_max_latency = max_latency;
    m_max_latency_isSet = true;
}

bool OAIAddOutputRequest::is_max_latency_Set() const{
    return m_max_latency_isSet;
}

bool OAIAddOutputRequest::is_max_latency_Valid() const{
    return m_max_latency_isValid;
}

QList OAIAddOutputRequest::getMediaStreamOutputConfigurations() const {
    return m_media_stream_output_configurations;
}
void OAIAddOutputRequest::setMediaStreamOutputConfigurations(const QList &media_stream_output_configurations) {
    m_media_stream_output_configurations = media_stream_output_configurations;
    m_media_stream_output_configurations_isSet = true;
}

bool OAIAddOutputRequest::is_media_stream_output_configurations_Set() const{
    return m_media_stream_output_configurations_isSet;
}

bool OAIAddOutputRequest::is_media_stream_output_configurations_Valid() const{
    return m_media_stream_output_configurations_isValid;
}

qint32 OAIAddOutputRequest::getMinLatency() const {
    return m_min_latency;
}
void OAIAddOutputRequest::setMinLatency(const qint32 &min_latency) {
    m_min_latency = min_latency;
    m_min_latency_isSet = true;
}

bool OAIAddOutputRequest::is_min_latency_Set() const{
    return m_min_latency_isSet;
}

bool OAIAddOutputRequest::is_min_latency_Valid() const{
    return m_min_latency_isValid;
}

QString OAIAddOutputRequest::getName() const {
    return m_name;
}
void OAIAddOutputRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAddOutputRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAddOutputRequest::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIAddOutputRequest::getPort() const {
    return m_port;
}
void OAIAddOutputRequest::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIAddOutputRequest::is_port_Set() const{
    return m_port_isSet;
}

bool OAIAddOutputRequest::is_port_Valid() const{
    return m_port_isValid;
}

OAIProtocol OAIAddOutputRequest::getProtocol() const {
    return m_protocol;
}
void OAIAddOutputRequest::setProtocol(const OAIProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIAddOutputRequest::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIAddOutputRequest::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIAddOutputRequest::getRemoteId() const {
    return m_remote_id;
}
void OAIAddOutputRequest::setRemoteId(const QString &remote_id) {
    m_remote_id = remote_id;
    m_remote_id_isSet = true;
}

bool OAIAddOutputRequest::is_remote_id_Set() const{
    return m_remote_id_isSet;
}

bool OAIAddOutputRequest::is_remote_id_Valid() const{
    return m_remote_id_isValid;
}

qint32 OAIAddOutputRequest::getSenderControlPort() const {
    return m_sender_control_port;
}
void OAIAddOutputRequest::setSenderControlPort(const qint32 &sender_control_port) {
    m_sender_control_port = sender_control_port;
    m_sender_control_port_isSet = true;
}

bool OAIAddOutputRequest::is_sender_control_port_Set() const{
    return m_sender_control_port_isSet;
}

bool OAIAddOutputRequest::is_sender_control_port_Valid() const{
    return m_sender_control_port_isValid;
}

qint32 OAIAddOutputRequest::getSmoothingLatency() const {
    return m_smoothing_latency;
}
void OAIAddOutputRequest::setSmoothingLatency(const qint32 &smoothing_latency) {
    m_smoothing_latency = smoothing_latency;
    m_smoothing_latency_isSet = true;
}

bool OAIAddOutputRequest::is_smoothing_latency_Set() const{
    return m_smoothing_latency_isSet;
}

bool OAIAddOutputRequest::is_smoothing_latency_Valid() const{
    return m_smoothing_latency_isValid;
}

QString OAIAddOutputRequest::getStreamId() const {
    return m_stream_id;
}
void OAIAddOutputRequest::setStreamId(const QString &stream_id) {
    m_stream_id = stream_id;
    m_stream_id_isSet = true;
}

bool OAIAddOutputRequest::is_stream_id_Set() const{
    return m_stream_id_isSet;
}

bool OAIAddOutputRequest::is_stream_id_Valid() const{
    return m_stream_id_isValid;
}

OAIAddOutputRequest_VpcInterfaceAttachment OAIAddOutputRequest::getVpcInterfaceAttachment() const {
    return m_vpc_interface_attachment;
}
void OAIAddOutputRequest::setVpcInterfaceAttachment(const OAIAddOutputRequest_VpcInterfaceAttachment &vpc_interface_attachment) {
    m_vpc_interface_attachment = vpc_interface_attachment;
    m_vpc_interface_attachment_isSet = true;
}

bool OAIAddOutputRequest::is_vpc_interface_attachment_Set() const{
    return m_vpc_interface_attachment_isSet;
}

bool OAIAddOutputRequest::is_vpc_interface_attachment_Valid() const{
    return m_vpc_interface_attachment_isValid;
}

bool OAIAddOutputRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cidr_allow_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_stream_output_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_control_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smoothing_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_interface_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddOutputRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_protocol_isValid && true;
}

} // namespace OpenAPI
