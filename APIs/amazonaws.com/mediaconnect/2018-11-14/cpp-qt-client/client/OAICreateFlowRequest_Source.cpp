/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFlowRequest_Source.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFlowRequest_Source::OAICreateFlowRequest_Source(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFlowRequest_Source::OAICreateFlowRequest_Source() {
    this->initializeModel();
}

OAICreateFlowRequest_Source::~OAICreateFlowRequest_Source() {}

void OAICreateFlowRequest_Source::initializeModel() {

    m_decryption_isSet = false;
    m_decryption_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_entitlement_arn_isSet = false;
    m_entitlement_arn_isValid = false;

    m_ingest_port_isSet = false;
    m_ingest_port_isValid = false;

    m_max_bitrate_isSet = false;
    m_max_bitrate_isValid = false;

    m_max_latency_isSet = false;
    m_max_latency_isValid = false;

    m_max_sync_buffer_isSet = false;
    m_max_sync_buffer_isValid = false;

    m_media_stream_source_configurations_isSet = false;
    m_media_stream_source_configurations_isValid = false;

    m_min_latency_isSet = false;
    m_min_latency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_sender_control_port_isSet = false;
    m_sender_control_port_isValid = false;

    m_sender_ip_address_isSet = false;
    m_sender_ip_address_isValid = false;

    m_source_listener_address_isSet = false;
    m_source_listener_address_isValid = false;

    m_source_listener_port_isSet = false;
    m_source_listener_port_isValid = false;

    m_stream_id_isSet = false;
    m_stream_id_isValid = false;

    m_vpc_interface_name_isSet = false;
    m_vpc_interface_name_isValid = false;

    m_whitelist_cidr_isSet = false;
    m_whitelist_cidr_isValid = false;

    m_gateway_bridge_source_isSet = false;
    m_gateway_bridge_source_isValid = false;
}

void OAICreateFlowRequest_Source::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFlowRequest_Source::fromJsonObject(QJsonObject json) {

    m_decryption_isValid = ::OpenAPI::fromJsonValue(m_decryption, json[QString("Decryption")]);
    m_decryption_isSet = !json[QString("Decryption")].isNull() && m_decryption_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_entitlement_arn_isValid = ::OpenAPI::fromJsonValue(m_entitlement_arn, json[QString("EntitlementArn")]);
    m_entitlement_arn_isSet = !json[QString("EntitlementArn")].isNull() && m_entitlement_arn_isValid;

    m_ingest_port_isValid = ::OpenAPI::fromJsonValue(m_ingest_port, json[QString("IngestPort")]);
    m_ingest_port_isSet = !json[QString("IngestPort")].isNull() && m_ingest_port_isValid;

    m_max_bitrate_isValid = ::OpenAPI::fromJsonValue(m_max_bitrate, json[QString("MaxBitrate")]);
    m_max_bitrate_isSet = !json[QString("MaxBitrate")].isNull() && m_max_bitrate_isValid;

    m_max_latency_isValid = ::OpenAPI::fromJsonValue(m_max_latency, json[QString("MaxLatency")]);
    m_max_latency_isSet = !json[QString("MaxLatency")].isNull() && m_max_latency_isValid;

    m_max_sync_buffer_isValid = ::OpenAPI::fromJsonValue(m_max_sync_buffer, json[QString("MaxSyncBuffer")]);
    m_max_sync_buffer_isSet = !json[QString("MaxSyncBuffer")].isNull() && m_max_sync_buffer_isValid;

    m_media_stream_source_configurations_isValid = ::OpenAPI::fromJsonValue(m_media_stream_source_configurations, json[QString("MediaStreamSourceConfigurations")]);
    m_media_stream_source_configurations_isSet = !json[QString("MediaStreamSourceConfigurations")].isNull() && m_media_stream_source_configurations_isValid;

    m_min_latency_isValid = ::OpenAPI::fromJsonValue(m_min_latency, json[QString("MinLatency")]);
    m_min_latency_isSet = !json[QString("MinLatency")].isNull() && m_min_latency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("Protocol")]);
    m_protocol_isSet = !json[QString("Protocol")].isNull() && m_protocol_isValid;

    m_sender_control_port_isValid = ::OpenAPI::fromJsonValue(m_sender_control_port, json[QString("SenderControlPort")]);
    m_sender_control_port_isSet = !json[QString("SenderControlPort")].isNull() && m_sender_control_port_isValid;

    m_sender_ip_address_isValid = ::OpenAPI::fromJsonValue(m_sender_ip_address, json[QString("SenderIpAddress")]);
    m_sender_ip_address_isSet = !json[QString("SenderIpAddress")].isNull() && m_sender_ip_address_isValid;

    m_source_listener_address_isValid = ::OpenAPI::fromJsonValue(m_source_listener_address, json[QString("SourceListenerAddress")]);
    m_source_listener_address_isSet = !json[QString("SourceListenerAddress")].isNull() && m_source_listener_address_isValid;

    m_source_listener_port_isValid = ::OpenAPI::fromJsonValue(m_source_listener_port, json[QString("SourceListenerPort")]);
    m_source_listener_port_isSet = !json[QString("SourceListenerPort")].isNull() && m_source_listener_port_isValid;

    m_stream_id_isValid = ::OpenAPI::fromJsonValue(m_stream_id, json[QString("StreamId")]);
    m_stream_id_isSet = !json[QString("StreamId")].isNull() && m_stream_id_isValid;

    m_vpc_interface_name_isValid = ::OpenAPI::fromJsonValue(m_vpc_interface_name, json[QString("VpcInterfaceName")]);
    m_vpc_interface_name_isSet = !json[QString("VpcInterfaceName")].isNull() && m_vpc_interface_name_isValid;

    m_whitelist_cidr_isValid = ::OpenAPI::fromJsonValue(m_whitelist_cidr, json[QString("WhitelistCidr")]);
    m_whitelist_cidr_isSet = !json[QString("WhitelistCidr")].isNull() && m_whitelist_cidr_isValid;

    m_gateway_bridge_source_isValid = ::OpenAPI::fromJsonValue(m_gateway_bridge_source, json[QString("GatewayBridgeSource")]);
    m_gateway_bridge_source_isSet = !json[QString("GatewayBridgeSource")].isNull() && m_gateway_bridge_source_isValid;
}

QString OAICreateFlowRequest_Source::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFlowRequest_Source::asJsonObject() const {
    QJsonObject obj;
    if (m_decryption.isSet()) {
        obj.insert(QString("Decryption"), ::OpenAPI::toJsonValue(m_decryption));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_entitlement_arn_isSet) {
        obj.insert(QString("EntitlementArn"), ::OpenAPI::toJsonValue(m_entitlement_arn));
    }
    if (m_ingest_port_isSet) {
        obj.insert(QString("IngestPort"), ::OpenAPI::toJsonValue(m_ingest_port));
    }
    if (m_max_bitrate_isSet) {
        obj.insert(QString("MaxBitrate"), ::OpenAPI::toJsonValue(m_max_bitrate));
    }
    if (m_max_latency_isSet) {
        obj.insert(QString("MaxLatency"), ::OpenAPI::toJsonValue(m_max_latency));
    }
    if (m_max_sync_buffer_isSet) {
        obj.insert(QString("MaxSyncBuffer"), ::OpenAPI::toJsonValue(m_max_sync_buffer));
    }
    if (m_media_stream_source_configurations.isSet()) {
        obj.insert(QString("MediaStreamSourceConfigurations"), ::OpenAPI::toJsonValue(m_media_stream_source_configurations));
    }
    if (m_min_latency_isSet) {
        obj.insert(QString("MinLatency"), ::OpenAPI::toJsonValue(m_min_latency));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("Protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_sender_control_port_isSet) {
        obj.insert(QString("SenderControlPort"), ::OpenAPI::toJsonValue(m_sender_control_port));
    }
    if (m_sender_ip_address_isSet) {
        obj.insert(QString("SenderIpAddress"), ::OpenAPI::toJsonValue(m_sender_ip_address));
    }
    if (m_source_listener_address_isSet) {
        obj.insert(QString("SourceListenerAddress"), ::OpenAPI::toJsonValue(m_source_listener_address));
    }
    if (m_source_listener_port_isSet) {
        obj.insert(QString("SourceListenerPort"), ::OpenAPI::toJsonValue(m_source_listener_port));
    }
    if (m_stream_id_isSet) {
        obj.insert(QString("StreamId"), ::OpenAPI::toJsonValue(m_stream_id));
    }
    if (m_vpc_interface_name_isSet) {
        obj.insert(QString("VpcInterfaceName"), ::OpenAPI::toJsonValue(m_vpc_interface_name));
    }
    if (m_whitelist_cidr_isSet) {
        obj.insert(QString("WhitelistCidr"), ::OpenAPI::toJsonValue(m_whitelist_cidr));
    }
    if (m_gateway_bridge_source.isSet()) {
        obj.insert(QString("GatewayBridgeSource"), ::OpenAPI::toJsonValue(m_gateway_bridge_source));
    }
    return obj;
}

OAICreateFlow_request_source_Decryption OAICreateFlowRequest_Source::getDecryption() const {
    return m_decryption;
}
void OAICreateFlowRequest_Source::setDecryption(const OAICreateFlow_request_source_Decryption &decryption) {
    m_decryption = decryption;
    m_decryption_isSet = true;
}

bool OAICreateFlowRequest_Source::is_decryption_Set() const{
    return m_decryption_isSet;
}

bool OAICreateFlowRequest_Source::is_decryption_Valid() const{
    return m_decryption_isValid;
}

QString OAICreateFlowRequest_Source::getDescription() const {
    return m_description;
}
void OAICreateFlowRequest_Source::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateFlowRequest_Source::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateFlowRequest_Source::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateFlowRequest_Source::getEntitlementArn() const {
    return m_entitlement_arn;
}
void OAICreateFlowRequest_Source::setEntitlementArn(const QString &entitlement_arn) {
    m_entitlement_arn = entitlement_arn;
    m_entitlement_arn_isSet = true;
}

bool OAICreateFlowRequest_Source::is_entitlement_arn_Set() const{
    return m_entitlement_arn_isSet;
}

bool OAICreateFlowRequest_Source::is_entitlement_arn_Valid() const{
    return m_entitlement_arn_isValid;
}

qint32 OAICreateFlowRequest_Source::getIngestPort() const {
    return m_ingest_port;
}
void OAICreateFlowRequest_Source::setIngestPort(const qint32 &ingest_port) {
    m_ingest_port = ingest_port;
    m_ingest_port_isSet = true;
}

bool OAICreateFlowRequest_Source::is_ingest_port_Set() const{
    return m_ingest_port_isSet;
}

bool OAICreateFlowRequest_Source::is_ingest_port_Valid() const{
    return m_ingest_port_isValid;
}

qint32 OAICreateFlowRequest_Source::getMaxBitrate() const {
    return m_max_bitrate;
}
void OAICreateFlowRequest_Source::setMaxBitrate(const qint32 &max_bitrate) {
    m_max_bitrate = max_bitrate;
    m_max_bitrate_isSet = true;
}

bool OAICreateFlowRequest_Source::is_max_bitrate_Set() const{
    return m_max_bitrate_isSet;
}

bool OAICreateFlowRequest_Source::is_max_bitrate_Valid() const{
    return m_max_bitrate_isValid;
}

qint32 OAICreateFlowRequest_Source::getMaxLatency() const {
    return m_max_latency;
}
void OAICreateFlowRequest_Source::setMaxLatency(const qint32 &max_latency) {
    m_max_latency = max_latency;
    m_max_latency_isSet = true;
}

bool OAICreateFlowRequest_Source::is_max_latency_Set() const{
    return m_max_latency_isSet;
}

bool OAICreateFlowRequest_Source::is_max_latency_Valid() const{
    return m_max_latency_isValid;
}

qint32 OAICreateFlowRequest_Source::getMaxSyncBuffer() const {
    return m_max_sync_buffer;
}
void OAICreateFlowRequest_Source::setMaxSyncBuffer(const qint32 &max_sync_buffer) {
    m_max_sync_buffer = max_sync_buffer;
    m_max_sync_buffer_isSet = true;
}

bool OAICreateFlowRequest_Source::is_max_sync_buffer_Set() const{
    return m_max_sync_buffer_isSet;
}

bool OAICreateFlowRequest_Source::is_max_sync_buffer_Valid() const{
    return m_max_sync_buffer_isValid;
}

QList OAICreateFlowRequest_Source::getMediaStreamSourceConfigurations() const {
    return m_media_stream_source_configurations;
}
void OAICreateFlowRequest_Source::setMediaStreamSourceConfigurations(const QList &media_stream_source_configurations) {
    m_media_stream_source_configurations = media_stream_source_configurations;
    m_media_stream_source_configurations_isSet = true;
}

bool OAICreateFlowRequest_Source::is_media_stream_source_configurations_Set() const{
    return m_media_stream_source_configurations_isSet;
}

bool OAICreateFlowRequest_Source::is_media_stream_source_configurations_Valid() const{
    return m_media_stream_source_configurations_isValid;
}

qint32 OAICreateFlowRequest_Source::getMinLatency() const {
    return m_min_latency;
}
void OAICreateFlowRequest_Source::setMinLatency(const qint32 &min_latency) {
    m_min_latency = min_latency;
    m_min_latency_isSet = true;
}

bool OAICreateFlowRequest_Source::is_min_latency_Set() const{
    return m_min_latency_isSet;
}

bool OAICreateFlowRequest_Source::is_min_latency_Valid() const{
    return m_min_latency_isValid;
}

QString OAICreateFlowRequest_Source::getName() const {
    return m_name;
}
void OAICreateFlowRequest_Source::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateFlowRequest_Source::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateFlowRequest_Source::is_name_Valid() const{
    return m_name_isValid;
}

OAIProtocol OAICreateFlowRequest_Source::getProtocol() const {
    return m_protocol;
}
void OAICreateFlowRequest_Source::setProtocol(const OAIProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAICreateFlowRequest_Source::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAICreateFlowRequest_Source::is_protocol_Valid() const{
    return m_protocol_isValid;
}

qint32 OAICreateFlowRequest_Source::getSenderControlPort() const {
    return m_sender_control_port;
}
void OAICreateFlowRequest_Source::setSenderControlPort(const qint32 &sender_control_port) {
    m_sender_control_port = sender_control_port;
    m_sender_control_port_isSet = true;
}

bool OAICreateFlowRequest_Source::is_sender_control_port_Set() const{
    return m_sender_control_port_isSet;
}

bool OAICreateFlowRequest_Source::is_sender_control_port_Valid() const{
    return m_sender_control_port_isValid;
}

QString OAICreateFlowRequest_Source::getSenderIpAddress() const {
    return m_sender_ip_address;
}
void OAICreateFlowRequest_Source::setSenderIpAddress(const QString &sender_ip_address) {
    m_sender_ip_address = sender_ip_address;
    m_sender_ip_address_isSet = true;
}

bool OAICreateFlowRequest_Source::is_sender_ip_address_Set() const{
    return m_sender_ip_address_isSet;
}

bool OAICreateFlowRequest_Source::is_sender_ip_address_Valid() const{
    return m_sender_ip_address_isValid;
}

QString OAICreateFlowRequest_Source::getSourceListenerAddress() const {
    return m_source_listener_address;
}
void OAICreateFlowRequest_Source::setSourceListenerAddress(const QString &source_listener_address) {
    m_source_listener_address = source_listener_address;
    m_source_listener_address_isSet = true;
}

bool OAICreateFlowRequest_Source::is_source_listener_address_Set() const{
    return m_source_listener_address_isSet;
}

bool OAICreateFlowRequest_Source::is_source_listener_address_Valid() const{
    return m_source_listener_address_isValid;
}

qint32 OAICreateFlowRequest_Source::getSourceListenerPort() const {
    return m_source_listener_port;
}
void OAICreateFlowRequest_Source::setSourceListenerPort(const qint32 &source_listener_port) {
    m_source_listener_port = source_listener_port;
    m_source_listener_port_isSet = true;
}

bool OAICreateFlowRequest_Source::is_source_listener_port_Set() const{
    return m_source_listener_port_isSet;
}

bool OAICreateFlowRequest_Source::is_source_listener_port_Valid() const{
    return m_source_listener_port_isValid;
}

QString OAICreateFlowRequest_Source::getStreamId() const {
    return m_stream_id;
}
void OAICreateFlowRequest_Source::setStreamId(const QString &stream_id) {
    m_stream_id = stream_id;
    m_stream_id_isSet = true;
}

bool OAICreateFlowRequest_Source::is_stream_id_Set() const{
    return m_stream_id_isSet;
}

bool OAICreateFlowRequest_Source::is_stream_id_Valid() const{
    return m_stream_id_isValid;
}

QString OAICreateFlowRequest_Source::getVpcInterfaceName() const {
    return m_vpc_interface_name;
}
void OAICreateFlowRequest_Source::setVpcInterfaceName(const QString &vpc_interface_name) {
    m_vpc_interface_name = vpc_interface_name;
    m_vpc_interface_name_isSet = true;
}

bool OAICreateFlowRequest_Source::is_vpc_interface_name_Set() const{
    return m_vpc_interface_name_isSet;
}

bool OAICreateFlowRequest_Source::is_vpc_interface_name_Valid() const{
    return m_vpc_interface_name_isValid;
}

QString OAICreateFlowRequest_Source::getWhitelistCidr() const {
    return m_whitelist_cidr;
}
void OAICreateFlowRequest_Source::setWhitelistCidr(const QString &whitelist_cidr) {
    m_whitelist_cidr = whitelist_cidr;
    m_whitelist_cidr_isSet = true;
}

bool OAICreateFlowRequest_Source::is_whitelist_cidr_Set() const{
    return m_whitelist_cidr_isSet;
}

bool OAICreateFlowRequest_Source::is_whitelist_cidr_Valid() const{
    return m_whitelist_cidr_isValid;
}

OAICreateFlow_request_source_GatewayBridgeSource OAICreateFlowRequest_Source::getGatewayBridgeSource() const {
    return m_gateway_bridge_source;
}
void OAICreateFlowRequest_Source::setGatewayBridgeSource(const OAICreateFlow_request_source_GatewayBridgeSource &gateway_bridge_source) {
    m_gateway_bridge_source = gateway_bridge_source;
    m_gateway_bridge_source_isSet = true;
}

bool OAICreateFlowRequest_Source::is_gateway_bridge_source_Set() const{
    return m_gateway_bridge_source_isSet;
}

bool OAICreateFlowRequest_Source::is_gateway_bridge_source_Valid() const{
    return m_gateway_bridge_source_isValid;
}

bool OAICreateFlowRequest_Source::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_decryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitlement_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingest_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_sync_buffer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_stream_source_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_control_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_listener_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_listener_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_interface_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelist_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_bridge_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFlowRequest_Source::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
