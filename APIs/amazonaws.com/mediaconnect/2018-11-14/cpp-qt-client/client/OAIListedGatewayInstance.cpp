/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListedGatewayInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListedGatewayInstance::OAIListedGatewayInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListedGatewayInstance::OAIListedGatewayInstance() {
    this->initializeModel();
}

OAIListedGatewayInstance::~OAIListedGatewayInstance() {}

void OAIListedGatewayInstance::initializeModel() {

    m_gateway_arn_isSet = false;
    m_gateway_arn_isValid = false;

    m_gateway_instance_arn_isSet = false;
    m_gateway_instance_arn_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_instance_state_isSet = false;
    m_instance_state_isValid = false;
}

void OAIListedGatewayInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListedGatewayInstance::fromJsonObject(QJsonObject json) {

    m_gateway_arn_isValid = ::OpenAPI::fromJsonValue(m_gateway_arn, json[QString("GatewayArn")]);
    m_gateway_arn_isSet = !json[QString("GatewayArn")].isNull() && m_gateway_arn_isValid;

    m_gateway_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_gateway_instance_arn, json[QString("GatewayInstanceArn")]);
    m_gateway_instance_arn_isSet = !json[QString("GatewayInstanceArn")].isNull() && m_gateway_instance_arn_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_instance_state_isValid = ::OpenAPI::fromJsonValue(m_instance_state, json[QString("InstanceState")]);
    m_instance_state_isSet = !json[QString("InstanceState")].isNull() && m_instance_state_isValid;
}

QString OAIListedGatewayInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListedGatewayInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_gateway_arn_isSet) {
        obj.insert(QString("GatewayArn"), ::OpenAPI::toJsonValue(m_gateway_arn));
    }
    if (m_gateway_instance_arn_isSet) {
        obj.insert(QString("GatewayInstanceArn"), ::OpenAPI::toJsonValue(m_gateway_instance_arn));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_instance_state.isSet()) {
        obj.insert(QString("InstanceState"), ::OpenAPI::toJsonValue(m_instance_state));
    }
    return obj;
}

QString OAIListedGatewayInstance::getGatewayArn() const {
    return m_gateway_arn;
}
void OAIListedGatewayInstance::setGatewayArn(const QString &gateway_arn) {
    m_gateway_arn = gateway_arn;
    m_gateway_arn_isSet = true;
}

bool OAIListedGatewayInstance::is_gateway_arn_Set() const{
    return m_gateway_arn_isSet;
}

bool OAIListedGatewayInstance::is_gateway_arn_Valid() const{
    return m_gateway_arn_isValid;
}

QString OAIListedGatewayInstance::getGatewayInstanceArn() const {
    return m_gateway_instance_arn;
}
void OAIListedGatewayInstance::setGatewayInstanceArn(const QString &gateway_instance_arn) {
    m_gateway_instance_arn = gateway_instance_arn;
    m_gateway_instance_arn_isSet = true;
}

bool OAIListedGatewayInstance::is_gateway_instance_arn_Set() const{
    return m_gateway_instance_arn_isSet;
}

bool OAIListedGatewayInstance::is_gateway_instance_arn_Valid() const{
    return m_gateway_instance_arn_isValid;
}

QString OAIListedGatewayInstance::getInstanceId() const {
    return m_instance_id;
}
void OAIListedGatewayInstance::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIListedGatewayInstance::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIListedGatewayInstance::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

OAIInstanceState OAIListedGatewayInstance::getInstanceState() const {
    return m_instance_state;
}
void OAIListedGatewayInstance::setInstanceState(const OAIInstanceState &instance_state) {
    m_instance_state = instance_state;
    m_instance_state_isSet = true;
}

bool OAIListedGatewayInstance::is_instance_state_Set() const{
    return m_instance_state_isSet;
}

bool OAIListedGatewayInstance::is_instance_state_Valid() const{
    return m_instance_state_isValid;
}

bool OAIListedGatewayInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gateway_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListedGatewayInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gateway_arn_isValid && m_gateway_instance_arn_isValid && m_instance_id_isValid && true;
}

} // namespace OpenAPI
