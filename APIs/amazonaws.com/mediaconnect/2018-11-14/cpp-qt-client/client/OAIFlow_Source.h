/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFlow_Source.h
 *
 * 
 */

#ifndef OAIFlow_Source_H
#define OAIFlow_Source_H

#include <QJsonObject>

#include "OAISource_Decryption.h"
#include "OAISource_GatewayBridgeSource.h"
#include "OAISource_Transport.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISource_Decryption;
class OAISource_Transport;
class OAISource_GatewayBridgeSource;

class OAIFlow_Source : public OAIObject {
public:
    OAIFlow_Source();
    OAIFlow_Source(QString json);
    ~OAIFlow_Source() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDataTransferSubscriberFeePercent() const;
    void setDataTransferSubscriberFeePercent(const qint32 &data_transfer_subscriber_fee_percent);
    bool is_data_transfer_subscriber_fee_percent_Set() const;
    bool is_data_transfer_subscriber_fee_percent_Valid() const;

    OAISource_Decryption getDecryption() const;
    void setDecryption(const OAISource_Decryption &decryption);
    bool is_decryption_Set() const;
    bool is_decryption_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEntitlementArn() const;
    void setEntitlementArn(const QString &entitlement_arn);
    bool is_entitlement_arn_Set() const;
    bool is_entitlement_arn_Valid() const;

    QString getIngestIp() const;
    void setIngestIp(const QString &ingest_ip);
    bool is_ingest_ip_Set() const;
    bool is_ingest_ip_Valid() const;

    qint32 getIngestPort() const;
    void setIngestPort(const qint32 &ingest_port);
    bool is_ingest_port_Set() const;
    bool is_ingest_port_Valid() const;

    QList getMediaStreamSourceConfigurations() const;
    void setMediaStreamSourceConfigurations(const QList &media_stream_source_configurations);
    bool is_media_stream_source_configurations_Set() const;
    bool is_media_stream_source_configurations_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getSenderControlPort() const;
    void setSenderControlPort(const qint32 &sender_control_port);
    bool is_sender_control_port_Set() const;
    bool is_sender_control_port_Valid() const;

    QString getSenderIpAddress() const;
    void setSenderIpAddress(const QString &sender_ip_address);
    bool is_sender_ip_address_Set() const;
    bool is_sender_ip_address_Valid() const;

    QString getSourceArn() const;
    void setSourceArn(const QString &source_arn);
    bool is_source_arn_Set() const;
    bool is_source_arn_Valid() const;

    OAISource_Transport getTransport() const;
    void setTransport(const OAISource_Transport &transport);
    bool is_transport_Set() const;
    bool is_transport_Valid() const;

    QString getVpcInterfaceName() const;
    void setVpcInterfaceName(const QString &vpc_interface_name);
    bool is_vpc_interface_name_Set() const;
    bool is_vpc_interface_name_Valid() const;

    QString getWhitelistCidr() const;
    void setWhitelistCidr(const QString &whitelist_cidr);
    bool is_whitelist_cidr_Set() const;
    bool is_whitelist_cidr_Valid() const;

    OAISource_GatewayBridgeSource getGatewayBridgeSource() const;
    void setGatewayBridgeSource(const OAISource_GatewayBridgeSource &gateway_bridge_source);
    bool is_gateway_bridge_source_Set() const;
    bool is_gateway_bridge_source_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_data_transfer_subscriber_fee_percent;
    bool m_data_transfer_subscriber_fee_percent_isSet;
    bool m_data_transfer_subscriber_fee_percent_isValid;

    OAISource_Decryption m_decryption;
    bool m_decryption_isSet;
    bool m_decryption_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_entitlement_arn;
    bool m_entitlement_arn_isSet;
    bool m_entitlement_arn_isValid;

    QString m_ingest_ip;
    bool m_ingest_ip_isSet;
    bool m_ingest_ip_isValid;

    qint32 m_ingest_port;
    bool m_ingest_port_isSet;
    bool m_ingest_port_isValid;

    QList m_media_stream_source_configurations;
    bool m_media_stream_source_configurations_isSet;
    bool m_media_stream_source_configurations_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_sender_control_port;
    bool m_sender_control_port_isSet;
    bool m_sender_control_port_isValid;

    QString m_sender_ip_address;
    bool m_sender_ip_address_isSet;
    bool m_sender_ip_address_isValid;

    QString m_source_arn;
    bool m_source_arn_isSet;
    bool m_source_arn_isValid;

    OAISource_Transport m_transport;
    bool m_transport_isSet;
    bool m_transport_isValid;

    QString m_vpc_interface_name;
    bool m_vpc_interface_name_isSet;
    bool m_vpc_interface_name_isValid;

    QString m_whitelist_cidr;
    bool m_whitelist_cidr_isSet;
    bool m_whitelist_cidr_isValid;

    OAISource_GatewayBridgeSource m_gateway_bridge_source;
    bool m_gateway_bridge_source_isSet;
    bool m_gateway_bridge_source_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFlow_Source)

#endif // OAIFlow_Source_H
