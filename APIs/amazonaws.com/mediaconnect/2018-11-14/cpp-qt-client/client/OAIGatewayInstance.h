/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGatewayInstance.h
 *
 * The settings for an instance in a gateway.
 */

#ifndef OAIGatewayInstance_H
#define OAIGatewayInstance_H

#include <QJsonObject>

#include "OAIBridgePlacement.h"
#include "OAIConnectionStatus.h"
#include "OAIInstanceState.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGatewayInstance : public OAIObject {
public:
    OAIGatewayInstance();
    OAIGatewayInstance(QString json);
    ~OAIGatewayInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBridgePlacement getBridgePlacement() const;
    void setBridgePlacement(const OAIBridgePlacement &bridge_placement);
    bool is_bridge_placement_Set() const;
    bool is_bridge_placement_Valid() const;

    OAIConnectionStatus getConnectionStatus() const;
    void setConnectionStatus(const OAIConnectionStatus &connection_status);
    bool is_connection_status_Set() const;
    bool is_connection_status_Valid() const;

    QString getGatewayArn() const;
    void setGatewayArn(const QString &gateway_arn);
    bool is_gateway_arn_Set() const;
    bool is_gateway_arn_Valid() const;

    QString getGatewayInstanceArn() const;
    void setGatewayInstanceArn(const QString &gateway_instance_arn);
    bool is_gateway_instance_arn_Set() const;
    bool is_gateway_instance_arn_Valid() const;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    QList getInstanceMessages() const;
    void setInstanceMessages(const QList &instance_messages);
    bool is_instance_messages_Set() const;
    bool is_instance_messages_Valid() const;

    OAIInstanceState getInstanceState() const;
    void setInstanceState(const OAIInstanceState &instance_state);
    bool is_instance_state_Set() const;
    bool is_instance_state_Valid() const;

    qint32 getRunningBridgeCount() const;
    void setRunningBridgeCount(const qint32 &running_bridge_count);
    bool is_running_bridge_count_Set() const;
    bool is_running_bridge_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBridgePlacement m_bridge_placement;
    bool m_bridge_placement_isSet;
    bool m_bridge_placement_isValid;

    OAIConnectionStatus m_connection_status;
    bool m_connection_status_isSet;
    bool m_connection_status_isValid;

    QString m_gateway_arn;
    bool m_gateway_arn_isSet;
    bool m_gateway_arn_isValid;

    QString m_gateway_instance_arn;
    bool m_gateway_instance_arn_isSet;
    bool m_gateway_instance_arn_isValid;

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    QList m_instance_messages;
    bool m_instance_messages_isSet;
    bool m_instance_messages_isValid;

    OAIInstanceState m_instance_state;
    bool m_instance_state_isSet;
    bool m_instance_state_isValid;

    qint32 m_running_bridge_count;
    bool m_running_bridge_count_isSet;
    bool m_running_bridge_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGatewayInstance)

#endif // OAIGatewayInstance_H
