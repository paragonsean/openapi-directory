/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBridge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBridge::OAIBridge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBridge::OAIBridge() {
    this->initializeModel();
}

OAIBridge::~OAIBridge() {}

void OAIBridge::initializeModel() {

    m_bridge_arn_isSet = false;
    m_bridge_arn_isValid = false;

    m_bridge_messages_isSet = false;
    m_bridge_messages_isValid = false;

    m_bridge_state_isSet = false;
    m_bridge_state_isValid = false;

    m_egress_gateway_bridge_isSet = false;
    m_egress_gateway_bridge_isValid = false;

    m_ingress_gateway_bridge_isSet = false;
    m_ingress_gateway_bridge_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_placement_arn_isSet = false;
    m_placement_arn_isValid = false;

    m_source_failover_config_isSet = false;
    m_source_failover_config_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIBridge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBridge::fromJsonObject(QJsonObject json) {

    m_bridge_arn_isValid = ::OpenAPI::fromJsonValue(m_bridge_arn, json[QString("BridgeArn")]);
    m_bridge_arn_isSet = !json[QString("BridgeArn")].isNull() && m_bridge_arn_isValid;

    m_bridge_messages_isValid = ::OpenAPI::fromJsonValue(m_bridge_messages, json[QString("BridgeMessages")]);
    m_bridge_messages_isSet = !json[QString("BridgeMessages")].isNull() && m_bridge_messages_isValid;

    m_bridge_state_isValid = ::OpenAPI::fromJsonValue(m_bridge_state, json[QString("BridgeState")]);
    m_bridge_state_isSet = !json[QString("BridgeState")].isNull() && m_bridge_state_isValid;

    m_egress_gateway_bridge_isValid = ::OpenAPI::fromJsonValue(m_egress_gateway_bridge, json[QString("EgressGatewayBridge")]);
    m_egress_gateway_bridge_isSet = !json[QString("EgressGatewayBridge")].isNull() && m_egress_gateway_bridge_isValid;

    m_ingress_gateway_bridge_isValid = ::OpenAPI::fromJsonValue(m_ingress_gateway_bridge, json[QString("IngressGatewayBridge")]);
    m_ingress_gateway_bridge_isSet = !json[QString("IngressGatewayBridge")].isNull() && m_ingress_gateway_bridge_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("Outputs")]);
    m_outputs_isSet = !json[QString("Outputs")].isNull() && m_outputs_isValid;

    m_placement_arn_isValid = ::OpenAPI::fromJsonValue(m_placement_arn, json[QString("PlacementArn")]);
    m_placement_arn_isSet = !json[QString("PlacementArn")].isNull() && m_placement_arn_isValid;

    m_source_failover_config_isValid = ::OpenAPI::fromJsonValue(m_source_failover_config, json[QString("SourceFailoverConfig")]);
    m_source_failover_config_isSet = !json[QString("SourceFailoverConfig")].isNull() && m_source_failover_config_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("Sources")]);
    m_sources_isSet = !json[QString("Sources")].isNull() && m_sources_isValid;
}

QString OAIBridge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBridge::asJsonObject() const {
    QJsonObject obj;
    if (m_bridge_arn_isSet) {
        obj.insert(QString("BridgeArn"), ::OpenAPI::toJsonValue(m_bridge_arn));
    }
    if (m_bridge_messages.isSet()) {
        obj.insert(QString("BridgeMessages"), ::OpenAPI::toJsonValue(m_bridge_messages));
    }
    if (m_bridge_state.isSet()) {
        obj.insert(QString("BridgeState"), ::OpenAPI::toJsonValue(m_bridge_state));
    }
    if (m_egress_gateway_bridge.isSet()) {
        obj.insert(QString("EgressGatewayBridge"), ::OpenAPI::toJsonValue(m_egress_gateway_bridge));
    }
    if (m_ingress_gateway_bridge.isSet()) {
        obj.insert(QString("IngressGatewayBridge"), ::OpenAPI::toJsonValue(m_ingress_gateway_bridge));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_outputs.isSet()) {
        obj.insert(QString("Outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_placement_arn_isSet) {
        obj.insert(QString("PlacementArn"), ::OpenAPI::toJsonValue(m_placement_arn));
    }
    if (m_source_failover_config.isSet()) {
        obj.insert(QString("SourceFailoverConfig"), ::OpenAPI::toJsonValue(m_source_failover_config));
    }
    if (m_sources.isSet()) {
        obj.insert(QString("Sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QString OAIBridge::getBridgeArn() const {
    return m_bridge_arn;
}
void OAIBridge::setBridgeArn(const QString &bridge_arn) {
    m_bridge_arn = bridge_arn;
    m_bridge_arn_isSet = true;
}

bool OAIBridge::is_bridge_arn_Set() const{
    return m_bridge_arn_isSet;
}

bool OAIBridge::is_bridge_arn_Valid() const{
    return m_bridge_arn_isValid;
}

QList OAIBridge::getBridgeMessages() const {
    return m_bridge_messages;
}
void OAIBridge::setBridgeMessages(const QList &bridge_messages) {
    m_bridge_messages = bridge_messages;
    m_bridge_messages_isSet = true;
}

bool OAIBridge::is_bridge_messages_Set() const{
    return m_bridge_messages_isSet;
}

bool OAIBridge::is_bridge_messages_Valid() const{
    return m_bridge_messages_isValid;
}

OAIBridgeState OAIBridge::getBridgeState() const {
    return m_bridge_state;
}
void OAIBridge::setBridgeState(const OAIBridgeState &bridge_state) {
    m_bridge_state = bridge_state;
    m_bridge_state_isSet = true;
}

bool OAIBridge::is_bridge_state_Set() const{
    return m_bridge_state_isSet;
}

bool OAIBridge::is_bridge_state_Valid() const{
    return m_bridge_state_isValid;
}

OAIBridge_EgressGatewayBridge OAIBridge::getEgressGatewayBridge() const {
    return m_egress_gateway_bridge;
}
void OAIBridge::setEgressGatewayBridge(const OAIBridge_EgressGatewayBridge &egress_gateway_bridge) {
    m_egress_gateway_bridge = egress_gateway_bridge;
    m_egress_gateway_bridge_isSet = true;
}

bool OAIBridge::is_egress_gateway_bridge_Set() const{
    return m_egress_gateway_bridge_isSet;
}

bool OAIBridge::is_egress_gateway_bridge_Valid() const{
    return m_egress_gateway_bridge_isValid;
}

OAIBridge_IngressGatewayBridge OAIBridge::getIngressGatewayBridge() const {
    return m_ingress_gateway_bridge;
}
void OAIBridge::setIngressGatewayBridge(const OAIBridge_IngressGatewayBridge &ingress_gateway_bridge) {
    m_ingress_gateway_bridge = ingress_gateway_bridge;
    m_ingress_gateway_bridge_isSet = true;
}

bool OAIBridge::is_ingress_gateway_bridge_Set() const{
    return m_ingress_gateway_bridge_isSet;
}

bool OAIBridge::is_ingress_gateway_bridge_Valid() const{
    return m_ingress_gateway_bridge_isValid;
}

QString OAIBridge::getName() const {
    return m_name;
}
void OAIBridge::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBridge::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBridge::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIBridge::getOutputs() const {
    return m_outputs;
}
void OAIBridge::setOutputs(const QList &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIBridge::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIBridge::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QString OAIBridge::getPlacementArn() const {
    return m_placement_arn;
}
void OAIBridge::setPlacementArn(const QString &placement_arn) {
    m_placement_arn = placement_arn;
    m_placement_arn_isSet = true;
}

bool OAIBridge::is_placement_arn_Set() const{
    return m_placement_arn_isSet;
}

bool OAIBridge::is_placement_arn_Valid() const{
    return m_placement_arn_isValid;
}

OAIBridge_SourceFailoverConfig OAIBridge::getSourceFailoverConfig() const {
    return m_source_failover_config;
}
void OAIBridge::setSourceFailoverConfig(const OAIBridge_SourceFailoverConfig &source_failover_config) {
    m_source_failover_config = source_failover_config;
    m_source_failover_config_isSet = true;
}

bool OAIBridge::is_source_failover_config_Set() const{
    return m_source_failover_config_isSet;
}

bool OAIBridge::is_source_failover_config_Valid() const{
    return m_source_failover_config_isValid;
}

QList OAIBridge::getSources() const {
    return m_sources;
}
void OAIBridge::setSources(const QList &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIBridge::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIBridge::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIBridge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bridge_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bridge_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bridge_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_egress_gateway_bridge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingress_gateway_bridge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_failover_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBridge::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bridge_arn_isValid && m_bridge_state_isValid && m_name_isValid && m_placement_arn_isValid && true;
}

} // namespace OpenAPI
