/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFlowSourceRequest_Decryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFlowSourceRequest_Decryption::OAIUpdateFlowSourceRequest_Decryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFlowSourceRequest_Decryption::OAIUpdateFlowSourceRequest_Decryption() {
    this->initializeModel();
}

OAIUpdateFlowSourceRequest_Decryption::~OAIUpdateFlowSourceRequest_Decryption() {}

void OAIUpdateFlowSourceRequest_Decryption::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_constant_initialization_vector_isSet = false;
    m_constant_initialization_vector_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_key_type_isSet = false;
    m_key_type_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_secret_arn_isSet = false;
    m_secret_arn_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUpdateFlowSourceRequest_Decryption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFlowSourceRequest_Decryption::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("Algorithm")]);
    m_algorithm_isSet = !json[QString("Algorithm")].isNull() && m_algorithm_isValid;

    m_constant_initialization_vector_isValid = ::OpenAPI::fromJsonValue(m_constant_initialization_vector, json[QString("ConstantInitializationVector")]);
    m_constant_initialization_vector_isSet = !json[QString("ConstantInitializationVector")].isNull() && m_constant_initialization_vector_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_key_type_isValid = ::OpenAPI::fromJsonValue(m_key_type, json[QString("KeyType")]);
    m_key_type_isSet = !json[QString("KeyType")].isNull() && m_key_type_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_secret_arn_isValid = ::OpenAPI::fromJsonValue(m_secret_arn, json[QString("SecretArn")]);
    m_secret_arn_isSet = !json[QString("SecretArn")].isNull() && m_secret_arn_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;
}

QString OAIUpdateFlowSourceRequest_Decryption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFlowSourceRequest_Decryption::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm.isSet()) {
        obj.insert(QString("Algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_constant_initialization_vector_isSet) {
        obj.insert(QString("ConstantInitializationVector"), ::OpenAPI::toJsonValue(m_constant_initialization_vector));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_key_type.isSet()) {
        obj.insert(QString("KeyType"), ::OpenAPI::toJsonValue(m_key_type));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_secret_arn_isSet) {
        obj.insert(QString("SecretArn"), ::OpenAPI::toJsonValue(m_secret_arn));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIAlgorithm OAIUpdateFlowSourceRequest_Decryption::getAlgorithm() const {
    return m_algorithm;
}
void OAIUpdateFlowSourceRequest_Decryption::setAlgorithm(const OAIAlgorithm &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

QString OAIUpdateFlowSourceRequest_Decryption::getConstantInitializationVector() const {
    return m_constant_initialization_vector;
}
void OAIUpdateFlowSourceRequest_Decryption::setConstantInitializationVector(const QString &constant_initialization_vector) {
    m_constant_initialization_vector = constant_initialization_vector;
    m_constant_initialization_vector_isSet = true;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_constant_initialization_vector_Set() const{
    return m_constant_initialization_vector_isSet;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_constant_initialization_vector_Valid() const{
    return m_constant_initialization_vector_isValid;
}

QString OAIUpdateFlowSourceRequest_Decryption::getDeviceId() const {
    return m_device_id;
}
void OAIUpdateFlowSourceRequest_Decryption::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_device_id_Valid() const{
    return m_device_id_isValid;
}

OAIKeyType OAIUpdateFlowSourceRequest_Decryption::getKeyType() const {
    return m_key_type;
}
void OAIUpdateFlowSourceRequest_Decryption::setKeyType(const OAIKeyType &key_type) {
    m_key_type = key_type;
    m_key_type_isSet = true;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_key_type_Set() const{
    return m_key_type_isSet;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_key_type_Valid() const{
    return m_key_type_isValid;
}

QString OAIUpdateFlowSourceRequest_Decryption::getRegion() const {
    return m_region;
}
void OAIUpdateFlowSourceRequest_Decryption::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_region_Set() const{
    return m_region_isSet;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIUpdateFlowSourceRequest_Decryption::getResourceId() const {
    return m_resource_id;
}
void OAIUpdateFlowSourceRequest_Decryption::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIUpdateFlowSourceRequest_Decryption::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateFlowSourceRequest_Decryption::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIUpdateFlowSourceRequest_Decryption::getSecretArn() const {
    return m_secret_arn;
}
void OAIUpdateFlowSourceRequest_Decryption::setSecretArn(const QString &secret_arn) {
    m_secret_arn = secret_arn;
    m_secret_arn_isSet = true;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_secret_arn_Set() const{
    return m_secret_arn_isSet;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_secret_arn_Valid() const{
    return m_secret_arn_isValid;
}

QString OAIUpdateFlowSourceRequest_Decryption::getUrl() const {
    return m_url;
}
void OAIUpdateFlowSourceRequest_Decryption::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUpdateFlowSourceRequest_Decryption::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUpdateFlowSourceRequest_Decryption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_constant_initialization_vector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFlowSourceRequest_Decryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
