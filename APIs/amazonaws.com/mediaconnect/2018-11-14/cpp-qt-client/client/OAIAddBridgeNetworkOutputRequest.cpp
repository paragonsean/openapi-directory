/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddBridgeNetworkOutputRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddBridgeNetworkOutputRequest::OAIAddBridgeNetworkOutputRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddBridgeNetworkOutputRequest::OAIAddBridgeNetworkOutputRequest() {
    this->initializeModel();
}

OAIAddBridgeNetworkOutputRequest::~OAIAddBridgeNetworkOutputRequest() {}

void OAIAddBridgeNetworkOutputRequest::initializeModel() {

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_name_isSet = false;
    m_network_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIAddBridgeNetworkOutputRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddBridgeNetworkOutputRequest::fromJsonObject(QJsonObject json) {

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IpAddress")]);
    m_ip_address_isSet = !json[QString("IpAddress")].isNull() && m_ip_address_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_network_name_isValid = ::OpenAPI::fromJsonValue(m_network_name, json[QString("NetworkName")]);
    m_network_name_isSet = !json[QString("NetworkName")].isNull() && m_network_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("Protocol")]);
    m_protocol_isSet = !json[QString("Protocol")].isNull() && m_protocol_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("Ttl")]);
    m_ttl_isSet = !json[QString("Ttl")].isNull() && m_ttl_isValid;
}

QString OAIAddBridgeNetworkOutputRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddBridgeNetworkOutputRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_address_isSet) {
        obj.insert(QString("IpAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_name_isSet) {
        obj.insert(QString("NetworkName"), ::OpenAPI::toJsonValue(m_network_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("Protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("Ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

QString OAIAddBridgeNetworkOutputRequest::getIpAddress() const {
    return m_ip_address;
}
void OAIAddBridgeNetworkOutputRequest::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIAddBridgeNetworkOutputRequest::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIAddBridgeNetworkOutputRequest::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIAddBridgeNetworkOutputRequest::getName() const {
    return m_name;
}
void OAIAddBridgeNetworkOutputRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAddBridgeNetworkOutputRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAddBridgeNetworkOutputRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAddBridgeNetworkOutputRequest::getNetworkName() const {
    return m_network_name;
}
void OAIAddBridgeNetworkOutputRequest::setNetworkName(const QString &network_name) {
    m_network_name = network_name;
    m_network_name_isSet = true;
}

bool OAIAddBridgeNetworkOutputRequest::is_network_name_Set() const{
    return m_network_name_isSet;
}

bool OAIAddBridgeNetworkOutputRequest::is_network_name_Valid() const{
    return m_network_name_isValid;
}

qint32 OAIAddBridgeNetworkOutputRequest::getPort() const {
    return m_port;
}
void OAIAddBridgeNetworkOutputRequest::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIAddBridgeNetworkOutputRequest::is_port_Set() const{
    return m_port_isSet;
}

bool OAIAddBridgeNetworkOutputRequest::is_port_Valid() const{
    return m_port_isValid;
}

OAIProtocol OAIAddBridgeNetworkOutputRequest::getProtocol() const {
    return m_protocol;
}
void OAIAddBridgeNetworkOutputRequest::setProtocol(const OAIProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIAddBridgeNetworkOutputRequest::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIAddBridgeNetworkOutputRequest::is_protocol_Valid() const{
    return m_protocol_isValid;
}

qint32 OAIAddBridgeNetworkOutputRequest::getTtl() const {
    return m_ttl;
}
void OAIAddBridgeNetworkOutputRequest::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIAddBridgeNetworkOutputRequest::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIAddBridgeNetworkOutputRequest::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIAddBridgeNetworkOutputRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddBridgeNetworkOutputRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ip_address_isValid && m_name_isValid && m_network_name_isValid && m_port_isValid && m_protocol_isValid && m_ttl_isValid && true;
}

} // namespace OpenAPI
