/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFlowEntitlementRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFlowEntitlementRequest::OAIUpdateFlowEntitlementRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFlowEntitlementRequest::OAIUpdateFlowEntitlementRequest() {
    this->initializeModel();
}

OAIUpdateFlowEntitlementRequest::~OAIUpdateFlowEntitlementRequest() {}

void OAIUpdateFlowEntitlementRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_entitlement_status_isSet = false;
    m_entitlement_status_isValid = false;

    m_subscribers_isSet = false;
    m_subscribers_isValid = false;
}

void OAIUpdateFlowEntitlementRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFlowEntitlementRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;

    m_entitlement_status_isValid = ::OpenAPI::fromJsonValue(m_entitlement_status, json[QString("EntitlementStatus")]);
    m_entitlement_status_isSet = !json[QString("EntitlementStatus")].isNull() && m_entitlement_status_isValid;

    m_subscribers_isValid = ::OpenAPI::fromJsonValue(m_subscribers, json[QString("Subscribers")]);
    m_subscribers_isSet = !json[QString("Subscribers")].isNull() && m_subscribers_isValid;
}

QString OAIUpdateFlowEntitlementRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFlowEntitlementRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_entitlement_status.isSet()) {
        obj.insert(QString("EntitlementStatus"), ::OpenAPI::toJsonValue(m_entitlement_status));
    }
    if (m_subscribers.isSet()) {
        obj.insert(QString("Subscribers"), ::OpenAPI::toJsonValue(m_subscribers));
    }
    return obj;
}

QString OAIUpdateFlowEntitlementRequest::getDescription() const {
    return m_description;
}
void OAIUpdateFlowEntitlementRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateFlowEntitlementRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateFlowEntitlementRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIUpdateFlowEntitlementRequest_Encryption OAIUpdateFlowEntitlementRequest::getEncryption() const {
    return m_encryption;
}
void OAIUpdateFlowEntitlementRequest::setEncryption(const OAIUpdateFlowEntitlementRequest_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIUpdateFlowEntitlementRequest::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIUpdateFlowEntitlementRequest::is_encryption_Valid() const{
    return m_encryption_isValid;
}

OAIEntitlementStatus OAIUpdateFlowEntitlementRequest::getEntitlementStatus() const {
    return m_entitlement_status;
}
void OAIUpdateFlowEntitlementRequest::setEntitlementStatus(const OAIEntitlementStatus &entitlement_status) {
    m_entitlement_status = entitlement_status;
    m_entitlement_status_isSet = true;
}

bool OAIUpdateFlowEntitlementRequest::is_entitlement_status_Set() const{
    return m_entitlement_status_isSet;
}

bool OAIUpdateFlowEntitlementRequest::is_entitlement_status_Valid() const{
    return m_entitlement_status_isValid;
}

QList OAIUpdateFlowEntitlementRequest::getSubscribers() const {
    return m_subscribers;
}
void OAIUpdateFlowEntitlementRequest::setSubscribers(const QList &subscribers) {
    m_subscribers = subscribers;
    m_subscribers_isSet = true;
}

bool OAIUpdateFlowEntitlementRequest::is_subscribers_Set() const{
    return m_subscribers_isSet;
}

bool OAIUpdateFlowEntitlementRequest::is_subscribers_Valid() const{
    return m_subscribers_isValid;
}

bool OAIUpdateFlowEntitlementRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitlement_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFlowEntitlementRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
