/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyType::OAIKeyType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyType::OAIKeyType() {
    this->initializeModel();
}

OAIKeyType::~OAIKeyType() {}

void OAIKeyType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIKeyType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIKeyType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("speke", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyType::SPEKE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("static-key", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyType::STATIC_KEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("srt-password", Qt::CaseInsensitive) == 0) {
        m_value = eOAIKeyType::SRT_PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIKeyType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIKeyType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIKeyType::SPEKE:
            val = "speke";
            break;
        case eOAIKeyType::STATIC_KEY:
            val = "static-key";
            break;
        case eOAIKeyType::SRT_PASSWORD:
            val = "srt-password";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIKeyType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIKeyType::eOAIKeyType OAIKeyType::getValue() const {
    return m_value;
}

void OAIKeyType::setValue(const OAIKeyType::eOAIKeyType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIKeyType::isSet() const {
    
    return m_value_isSet;
}

bool OAIKeyType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
