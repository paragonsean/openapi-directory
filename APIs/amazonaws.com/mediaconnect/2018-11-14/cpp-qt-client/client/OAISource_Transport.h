/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISource_Transport.h
 *
 * 
 */

#ifndef OAISource_Transport_H
#define OAISource_Transport_H

#include <QJsonObject>

#include "OAIProtocol.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISource_Transport : public OAIObject {
public:
    OAISource_Transport();
    OAISource_Transport(QString json);
    ~OAISource_Transport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCidrAllowList() const;
    void setCidrAllowList(const QList &cidr_allow_list);
    bool is_cidr_allow_list_Set() const;
    bool is_cidr_allow_list_Valid() const;

    qint32 getMaxBitrate() const;
    void setMaxBitrate(const qint32 &max_bitrate);
    bool is_max_bitrate_Set() const;
    bool is_max_bitrate_Valid() const;

    qint32 getMaxLatency() const;
    void setMaxLatency(const qint32 &max_latency);
    bool is_max_latency_Set() const;
    bool is_max_latency_Valid() const;

    qint32 getMaxSyncBuffer() const;
    void setMaxSyncBuffer(const qint32 &max_sync_buffer);
    bool is_max_sync_buffer_Set() const;
    bool is_max_sync_buffer_Valid() const;

    qint32 getMinLatency() const;
    void setMinLatency(const qint32 &min_latency);
    bool is_min_latency_Set() const;
    bool is_min_latency_Valid() const;

    OAIProtocol getProtocol() const;
    void setProtocol(const OAIProtocol &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getRemoteId() const;
    void setRemoteId(const QString &remote_id);
    bool is_remote_id_Set() const;
    bool is_remote_id_Valid() const;

    qint32 getSenderControlPort() const;
    void setSenderControlPort(const qint32 &sender_control_port);
    bool is_sender_control_port_Set() const;
    bool is_sender_control_port_Valid() const;

    QString getSenderIpAddress() const;
    void setSenderIpAddress(const QString &sender_ip_address);
    bool is_sender_ip_address_Set() const;
    bool is_sender_ip_address_Valid() const;

    qint32 getSmoothingLatency() const;
    void setSmoothingLatency(const qint32 &smoothing_latency);
    bool is_smoothing_latency_Set() const;
    bool is_smoothing_latency_Valid() const;

    QString getSourceListenerAddress() const;
    void setSourceListenerAddress(const QString &source_listener_address);
    bool is_source_listener_address_Set() const;
    bool is_source_listener_address_Valid() const;

    qint32 getSourceListenerPort() const;
    void setSourceListenerPort(const qint32 &source_listener_port);
    bool is_source_listener_port_Set() const;
    bool is_source_listener_port_Valid() const;

    QString getStreamId() const;
    void setStreamId(const QString &stream_id);
    bool is_stream_id_Set() const;
    bool is_stream_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_cidr_allow_list;
    bool m_cidr_allow_list_isSet;
    bool m_cidr_allow_list_isValid;

    qint32 m_max_bitrate;
    bool m_max_bitrate_isSet;
    bool m_max_bitrate_isValid;

    qint32 m_max_latency;
    bool m_max_latency_isSet;
    bool m_max_latency_isValid;

    qint32 m_max_sync_buffer;
    bool m_max_sync_buffer_isSet;
    bool m_max_sync_buffer_isValid;

    qint32 m_min_latency;
    bool m_min_latency_isSet;
    bool m_min_latency_isValid;

    OAIProtocol m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_remote_id;
    bool m_remote_id_isSet;
    bool m_remote_id_isValid;

    qint32 m_sender_control_port;
    bool m_sender_control_port_isSet;
    bool m_sender_control_port_isValid;

    QString m_sender_ip_address;
    bool m_sender_ip_address_isSet;
    bool m_sender_ip_address_isValid;

    qint32 m_smoothing_latency;
    bool m_smoothing_latency_isSet;
    bool m_smoothing_latency_isValid;

    QString m_source_listener_address;
    bool m_source_listener_address_isSet;
    bool m_source_listener_address_isValid;

    qint32 m_source_listener_port;
    bool m_source_listener_port_isSet;
    bool m_source_listener_port_isValid;

    QString m_stream_id;
    bool m_stream_id_isSet;
    bool m_stream_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISource_Transport)

#endif // OAISource_Transport_H
