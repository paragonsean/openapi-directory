/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutput::OAIOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutput::OAIOutput() {
    this->initializeModel();
}

OAIOutput::~OAIOutput() {}

void OAIOutput::initializeModel() {

    m_data_transfer_subscriber_fee_percent_isSet = false;
    m_data_transfer_subscriber_fee_percent_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_entitlement_arn_isSet = false;
    m_entitlement_arn_isValid = false;

    m_listener_address_isSet = false;
    m_listener_address_isValid = false;

    m_media_live_input_arn_isSet = false;
    m_media_live_input_arn_isValid = false;

    m_media_stream_output_configurations_isSet = false;
    m_media_stream_output_configurations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_arn_isSet = false;
    m_output_arn_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_transport_isSet = false;
    m_transport_isValid = false;

    m_vpc_interface_attachment_isSet = false;
    m_vpc_interface_attachment_isValid = false;

    m_bridge_arn_isSet = false;
    m_bridge_arn_isValid = false;

    m_bridge_ports_isSet = false;
    m_bridge_ports_isValid = false;
}

void OAIOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutput::fromJsonObject(QJsonObject json) {

    m_data_transfer_subscriber_fee_percent_isValid = ::OpenAPI::fromJsonValue(m_data_transfer_subscriber_fee_percent, json[QString("DataTransferSubscriberFeePercent")]);
    m_data_transfer_subscriber_fee_percent_isSet = !json[QString("DataTransferSubscriberFeePercent")].isNull() && m_data_transfer_subscriber_fee_percent_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("Destination")]);
    m_destination_isSet = !json[QString("Destination")].isNull() && m_destination_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;

    m_entitlement_arn_isValid = ::OpenAPI::fromJsonValue(m_entitlement_arn, json[QString("EntitlementArn")]);
    m_entitlement_arn_isSet = !json[QString("EntitlementArn")].isNull() && m_entitlement_arn_isValid;

    m_listener_address_isValid = ::OpenAPI::fromJsonValue(m_listener_address, json[QString("ListenerAddress")]);
    m_listener_address_isSet = !json[QString("ListenerAddress")].isNull() && m_listener_address_isValid;

    m_media_live_input_arn_isValid = ::OpenAPI::fromJsonValue(m_media_live_input_arn, json[QString("MediaLiveInputArn")]);
    m_media_live_input_arn_isSet = !json[QString("MediaLiveInputArn")].isNull() && m_media_live_input_arn_isValid;

    m_media_stream_output_configurations_isValid = ::OpenAPI::fromJsonValue(m_media_stream_output_configurations, json[QString("MediaStreamOutputConfigurations")]);
    m_media_stream_output_configurations_isSet = !json[QString("MediaStreamOutputConfigurations")].isNull() && m_media_stream_output_configurations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_output_arn_isValid = ::OpenAPI::fromJsonValue(m_output_arn, json[QString("OutputArn")]);
    m_output_arn_isSet = !json[QString("OutputArn")].isNull() && m_output_arn_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("Port")]);
    m_port_isSet = !json[QString("Port")].isNull() && m_port_isValid;

    m_transport_isValid = ::OpenAPI::fromJsonValue(m_transport, json[QString("Transport")]);
    m_transport_isSet = !json[QString("Transport")].isNull() && m_transport_isValid;

    m_vpc_interface_attachment_isValid = ::OpenAPI::fromJsonValue(m_vpc_interface_attachment, json[QString("VpcInterfaceAttachment")]);
    m_vpc_interface_attachment_isSet = !json[QString("VpcInterfaceAttachment")].isNull() && m_vpc_interface_attachment_isValid;

    m_bridge_arn_isValid = ::OpenAPI::fromJsonValue(m_bridge_arn, json[QString("BridgeArn")]);
    m_bridge_arn_isSet = !json[QString("BridgeArn")].isNull() && m_bridge_arn_isValid;

    m_bridge_ports_isValid = ::OpenAPI::fromJsonValue(m_bridge_ports, json[QString("BridgePorts")]);
    m_bridge_ports_isSet = !json[QString("BridgePorts")].isNull() && m_bridge_ports_isValid;
}

QString OAIOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_data_transfer_subscriber_fee_percent_isSet) {
        obj.insert(QString("DataTransferSubscriberFeePercent"), ::OpenAPI::toJsonValue(m_data_transfer_subscriber_fee_percent));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_isSet) {
        obj.insert(QString("Destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_entitlement_arn_isSet) {
        obj.insert(QString("EntitlementArn"), ::OpenAPI::toJsonValue(m_entitlement_arn));
    }
    if (m_listener_address_isSet) {
        obj.insert(QString("ListenerAddress"), ::OpenAPI::toJsonValue(m_listener_address));
    }
    if (m_media_live_input_arn_isSet) {
        obj.insert(QString("MediaLiveInputArn"), ::OpenAPI::toJsonValue(m_media_live_input_arn));
    }
    if (m_media_stream_output_configurations.isSet()) {
        obj.insert(QString("MediaStreamOutputConfigurations"), ::OpenAPI::toJsonValue(m_media_stream_output_configurations));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_arn_isSet) {
        obj.insert(QString("OutputArn"), ::OpenAPI::toJsonValue(m_output_arn));
    }
    if (m_port_isSet) {
        obj.insert(QString("Port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_transport.isSet()) {
        obj.insert(QString("Transport"), ::OpenAPI::toJsonValue(m_transport));
    }
    if (m_vpc_interface_attachment.isSet()) {
        obj.insert(QString("VpcInterfaceAttachment"), ::OpenAPI::toJsonValue(m_vpc_interface_attachment));
    }
    if (m_bridge_arn_isSet) {
        obj.insert(QString("BridgeArn"), ::OpenAPI::toJsonValue(m_bridge_arn));
    }
    if (m_bridge_ports.isSet()) {
        obj.insert(QString("BridgePorts"), ::OpenAPI::toJsonValue(m_bridge_ports));
    }
    return obj;
}

qint32 OAIOutput::getDataTransferSubscriberFeePercent() const {
    return m_data_transfer_subscriber_fee_percent;
}
void OAIOutput::setDataTransferSubscriberFeePercent(const qint32 &data_transfer_subscriber_fee_percent) {
    m_data_transfer_subscriber_fee_percent = data_transfer_subscriber_fee_percent;
    m_data_transfer_subscriber_fee_percent_isSet = true;
}

bool OAIOutput::is_data_transfer_subscriber_fee_percent_Set() const{
    return m_data_transfer_subscriber_fee_percent_isSet;
}

bool OAIOutput::is_data_transfer_subscriber_fee_percent_Valid() const{
    return m_data_transfer_subscriber_fee_percent_isValid;
}

QString OAIOutput::getDescription() const {
    return m_description;
}
void OAIOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOutput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOutput::getDestination() const {
    return m_destination;
}
void OAIOutput::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIOutput::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIOutput::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIOutput_Encryption OAIOutput::getEncryption() const {
    return m_encryption;
}
void OAIOutput::setEncryption(const OAIOutput_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIOutput::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIOutput::is_encryption_Valid() const{
    return m_encryption_isValid;
}

QString OAIOutput::getEntitlementArn() const {
    return m_entitlement_arn;
}
void OAIOutput::setEntitlementArn(const QString &entitlement_arn) {
    m_entitlement_arn = entitlement_arn;
    m_entitlement_arn_isSet = true;
}

bool OAIOutput::is_entitlement_arn_Set() const{
    return m_entitlement_arn_isSet;
}

bool OAIOutput::is_entitlement_arn_Valid() const{
    return m_entitlement_arn_isValid;
}

QString OAIOutput::getListenerAddress() const {
    return m_listener_address;
}
void OAIOutput::setListenerAddress(const QString &listener_address) {
    m_listener_address = listener_address;
    m_listener_address_isSet = true;
}

bool OAIOutput::is_listener_address_Set() const{
    return m_listener_address_isSet;
}

bool OAIOutput::is_listener_address_Valid() const{
    return m_listener_address_isValid;
}

QString OAIOutput::getMediaLiveInputArn() const {
    return m_media_live_input_arn;
}
void OAIOutput::setMediaLiveInputArn(const QString &media_live_input_arn) {
    m_media_live_input_arn = media_live_input_arn;
    m_media_live_input_arn_isSet = true;
}

bool OAIOutput::is_media_live_input_arn_Set() const{
    return m_media_live_input_arn_isSet;
}

bool OAIOutput::is_media_live_input_arn_Valid() const{
    return m_media_live_input_arn_isValid;
}

QList OAIOutput::getMediaStreamOutputConfigurations() const {
    return m_media_stream_output_configurations;
}
void OAIOutput::setMediaStreamOutputConfigurations(const QList &media_stream_output_configurations) {
    m_media_stream_output_configurations = media_stream_output_configurations;
    m_media_stream_output_configurations_isSet = true;
}

bool OAIOutput::is_media_stream_output_configurations_Set() const{
    return m_media_stream_output_configurations_isSet;
}

bool OAIOutput::is_media_stream_output_configurations_Valid() const{
    return m_media_stream_output_configurations_isValid;
}

QString OAIOutput::getName() const {
    return m_name;
}
void OAIOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOutput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOutput::getOutputArn() const {
    return m_output_arn;
}
void OAIOutput::setOutputArn(const QString &output_arn) {
    m_output_arn = output_arn;
    m_output_arn_isSet = true;
}

bool OAIOutput::is_output_arn_Set() const{
    return m_output_arn_isSet;
}

bool OAIOutput::is_output_arn_Valid() const{
    return m_output_arn_isValid;
}

qint32 OAIOutput::getPort() const {
    return m_port;
}
void OAIOutput::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIOutput::is_port_Set() const{
    return m_port_isSet;
}

bool OAIOutput::is_port_Valid() const{
    return m_port_isValid;
}

OAIOutput_Transport OAIOutput::getTransport() const {
    return m_transport;
}
void OAIOutput::setTransport(const OAIOutput_Transport &transport) {
    m_transport = transport;
    m_transport_isSet = true;
}

bool OAIOutput::is_transport_Set() const{
    return m_transport_isSet;
}

bool OAIOutput::is_transport_Valid() const{
    return m_transport_isValid;
}

OAIAddOutputRequest_VpcInterfaceAttachment OAIOutput::getVpcInterfaceAttachment() const {
    return m_vpc_interface_attachment;
}
void OAIOutput::setVpcInterfaceAttachment(const OAIAddOutputRequest_VpcInterfaceAttachment &vpc_interface_attachment) {
    m_vpc_interface_attachment = vpc_interface_attachment;
    m_vpc_interface_attachment_isSet = true;
}

bool OAIOutput::is_vpc_interface_attachment_Set() const{
    return m_vpc_interface_attachment_isSet;
}

bool OAIOutput::is_vpc_interface_attachment_Valid() const{
    return m_vpc_interface_attachment_isValid;
}

QString OAIOutput::getBridgeArn() const {
    return m_bridge_arn;
}
void OAIOutput::setBridgeArn(const QString &bridge_arn) {
    m_bridge_arn = bridge_arn;
    m_bridge_arn_isSet = true;
}

bool OAIOutput::is_bridge_arn_Set() const{
    return m_bridge_arn_isSet;
}

bool OAIOutput::is_bridge_arn_Valid() const{
    return m_bridge_arn_isValid;
}

QList OAIOutput::getBridgePorts() const {
    return m_bridge_ports;
}
void OAIOutput::setBridgePorts(const QList &bridge_ports) {
    m_bridge_ports = bridge_ports;
    m_bridge_ports_isSet = true;
}

bool OAIOutput::is_bridge_ports_Set() const{
    return m_bridge_ports_isSet;
}

bool OAIOutput::is_bridge_ports_Valid() const{
    return m_bridge_ports_isValid;
}

bool OAIOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_transfer_subscriber_fee_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitlement_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listener_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_live_input_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_stream_output_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_interface_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bridge_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bridge_ports.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_output_arn_isValid && true;
}

} // namespace OpenAPI
