/**
 * AWS MediaConnect
 * API for AWS Elemental MediaConnect
 *
 * The version of the OpenAPI document: 2018-11-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFlowOutput_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFlowOutput_request::OAIUpdateFlowOutput_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFlowOutput_request::OAIUpdateFlowOutput_request() {
    this->initializeModel();
}

OAIUpdateFlowOutput_request::~OAIUpdateFlowOutput_request() {}

void OAIUpdateFlowOutput_request::initializeModel() {

    m_cidr_allow_list_isSet = false;
    m_cidr_allow_list_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_max_latency_isSet = false;
    m_max_latency_isValid = false;

    m_media_stream_output_configurations_isSet = false;
    m_media_stream_output_configurations_isValid = false;

    m_min_latency_isSet = false;
    m_min_latency_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_remote_id_isSet = false;
    m_remote_id_isValid = false;

    m_sender_control_port_isSet = false;
    m_sender_control_port_isValid = false;

    m_sender_ip_address_isSet = false;
    m_sender_ip_address_isValid = false;

    m_smoothing_latency_isSet = false;
    m_smoothing_latency_isValid = false;

    m_stream_id_isSet = false;
    m_stream_id_isValid = false;

    m_vpc_interface_attachment_isSet = false;
    m_vpc_interface_attachment_isValid = false;
}

void OAIUpdateFlowOutput_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFlowOutput_request::fromJsonObject(QJsonObject json) {

    m_cidr_allow_list_isValid = ::OpenAPI::fromJsonValue(m_cidr_allow_list, json[QString("cidrAllowList")]);
    m_cidr_allow_list_isSet = !json[QString("cidrAllowList")].isNull() && m_cidr_allow_list_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("encryption")]);
    m_encryption_isSet = !json[QString("encryption")].isNull() && m_encryption_isValid;

    m_max_latency_isValid = ::OpenAPI::fromJsonValue(m_max_latency, json[QString("maxLatency")]);
    m_max_latency_isSet = !json[QString("maxLatency")].isNull() && m_max_latency_isValid;

    m_media_stream_output_configurations_isValid = ::OpenAPI::fromJsonValue(m_media_stream_output_configurations, json[QString("mediaStreamOutputConfigurations")]);
    m_media_stream_output_configurations_isSet = !json[QString("mediaStreamOutputConfigurations")].isNull() && m_media_stream_output_configurations_isValid;

    m_min_latency_isValid = ::OpenAPI::fromJsonValue(m_min_latency, json[QString("minLatency")]);
    m_min_latency_isSet = !json[QString("minLatency")].isNull() && m_min_latency_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_remote_id_isValid = ::OpenAPI::fromJsonValue(m_remote_id, json[QString("remoteId")]);
    m_remote_id_isSet = !json[QString("remoteId")].isNull() && m_remote_id_isValid;

    m_sender_control_port_isValid = ::OpenAPI::fromJsonValue(m_sender_control_port, json[QString("senderControlPort")]);
    m_sender_control_port_isSet = !json[QString("senderControlPort")].isNull() && m_sender_control_port_isValid;

    m_sender_ip_address_isValid = ::OpenAPI::fromJsonValue(m_sender_ip_address, json[QString("senderIpAddress")]);
    m_sender_ip_address_isSet = !json[QString("senderIpAddress")].isNull() && m_sender_ip_address_isValid;

    m_smoothing_latency_isValid = ::OpenAPI::fromJsonValue(m_smoothing_latency, json[QString("smoothingLatency")]);
    m_smoothing_latency_isSet = !json[QString("smoothingLatency")].isNull() && m_smoothing_latency_isValid;

    m_stream_id_isValid = ::OpenAPI::fromJsonValue(m_stream_id, json[QString("streamId")]);
    m_stream_id_isSet = !json[QString("streamId")].isNull() && m_stream_id_isValid;

    m_vpc_interface_attachment_isValid = ::OpenAPI::fromJsonValue(m_vpc_interface_attachment, json[QString("vpcInterfaceAttachment")]);
    m_vpc_interface_attachment_isSet = !json[QString("vpcInterfaceAttachment")].isNull() && m_vpc_interface_attachment_isValid;
}

QString OAIUpdateFlowOutput_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFlowOutput_request::asJsonObject() const {
    QJsonObject obj;
    if (m_cidr_allow_list.size() > 0) {
        obj.insert(QString("cidrAllowList"), ::OpenAPI::toJsonValue(m_cidr_allow_list));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_max_latency_isSet) {
        obj.insert(QString("maxLatency"), ::OpenAPI::toJsonValue(m_max_latency));
    }
    if (m_media_stream_output_configurations.size() > 0) {
        obj.insert(QString("mediaStreamOutputConfigurations"), ::OpenAPI::toJsonValue(m_media_stream_output_configurations));
    }
    if (m_min_latency_isSet) {
        obj.insert(QString("minLatency"), ::OpenAPI::toJsonValue(m_min_latency));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_remote_id_isSet) {
        obj.insert(QString("remoteId"), ::OpenAPI::toJsonValue(m_remote_id));
    }
    if (m_sender_control_port_isSet) {
        obj.insert(QString("senderControlPort"), ::OpenAPI::toJsonValue(m_sender_control_port));
    }
    if (m_sender_ip_address_isSet) {
        obj.insert(QString("senderIpAddress"), ::OpenAPI::toJsonValue(m_sender_ip_address));
    }
    if (m_smoothing_latency_isSet) {
        obj.insert(QString("smoothingLatency"), ::OpenAPI::toJsonValue(m_smoothing_latency));
    }
    if (m_stream_id_isSet) {
        obj.insert(QString("streamId"), ::OpenAPI::toJsonValue(m_stream_id));
    }
    if (m_vpc_interface_attachment.isSet()) {
        obj.insert(QString("vpcInterfaceAttachment"), ::OpenAPI::toJsonValue(m_vpc_interface_attachment));
    }
    return obj;
}

QList<QString> OAIUpdateFlowOutput_request::getCidrAllowList() const {
    return m_cidr_allow_list;
}
void OAIUpdateFlowOutput_request::setCidrAllowList(const QList<QString> &cidr_allow_list) {
    m_cidr_allow_list = cidr_allow_list;
    m_cidr_allow_list_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_cidr_allow_list_Set() const{
    return m_cidr_allow_list_isSet;
}

bool OAIUpdateFlowOutput_request::is_cidr_allow_list_Valid() const{
    return m_cidr_allow_list_isValid;
}

QString OAIUpdateFlowOutput_request::getDescription() const {
    return m_description;
}
void OAIUpdateFlowOutput_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateFlowOutput_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateFlowOutput_request::getDestination() const {
    return m_destination;
}
void OAIUpdateFlowOutput_request::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIUpdateFlowOutput_request::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIUpdateFlowOutput_request_encryption OAIUpdateFlowOutput_request::getEncryption() const {
    return m_encryption;
}
void OAIUpdateFlowOutput_request::setEncryption(const OAIUpdateFlowOutput_request_encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIUpdateFlowOutput_request::is_encryption_Valid() const{
    return m_encryption_isValid;
}

qint32 OAIUpdateFlowOutput_request::getMaxLatency() const {
    return m_max_latency;
}
void OAIUpdateFlowOutput_request::setMaxLatency(const qint32 &max_latency) {
    m_max_latency = max_latency;
    m_max_latency_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_max_latency_Set() const{
    return m_max_latency_isSet;
}

bool OAIUpdateFlowOutput_request::is_max_latency_Valid() const{
    return m_max_latency_isValid;
}

QList<OAIMediaStreamOutputConfigurationRequest> OAIUpdateFlowOutput_request::getMediaStreamOutputConfigurations() const {
    return m_media_stream_output_configurations;
}
void OAIUpdateFlowOutput_request::setMediaStreamOutputConfigurations(const QList<OAIMediaStreamOutputConfigurationRequest> &media_stream_output_configurations) {
    m_media_stream_output_configurations = media_stream_output_configurations;
    m_media_stream_output_configurations_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_media_stream_output_configurations_Set() const{
    return m_media_stream_output_configurations_isSet;
}

bool OAIUpdateFlowOutput_request::is_media_stream_output_configurations_Valid() const{
    return m_media_stream_output_configurations_isValid;
}

qint32 OAIUpdateFlowOutput_request::getMinLatency() const {
    return m_min_latency;
}
void OAIUpdateFlowOutput_request::setMinLatency(const qint32 &min_latency) {
    m_min_latency = min_latency;
    m_min_latency_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_min_latency_Set() const{
    return m_min_latency_isSet;
}

bool OAIUpdateFlowOutput_request::is_min_latency_Valid() const{
    return m_min_latency_isValid;
}

qint32 OAIUpdateFlowOutput_request::getPort() const {
    return m_port;
}
void OAIUpdateFlowOutput_request::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_port_Set() const{
    return m_port_isSet;
}

bool OAIUpdateFlowOutput_request::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIUpdateFlowOutput_request::getProtocol() const {
    return m_protocol;
}
void OAIUpdateFlowOutput_request::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIUpdateFlowOutput_request::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIUpdateFlowOutput_request::getRemoteId() const {
    return m_remote_id;
}
void OAIUpdateFlowOutput_request::setRemoteId(const QString &remote_id) {
    m_remote_id = remote_id;
    m_remote_id_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_remote_id_Set() const{
    return m_remote_id_isSet;
}

bool OAIUpdateFlowOutput_request::is_remote_id_Valid() const{
    return m_remote_id_isValid;
}

qint32 OAIUpdateFlowOutput_request::getSenderControlPort() const {
    return m_sender_control_port;
}
void OAIUpdateFlowOutput_request::setSenderControlPort(const qint32 &sender_control_port) {
    m_sender_control_port = sender_control_port;
    m_sender_control_port_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_sender_control_port_Set() const{
    return m_sender_control_port_isSet;
}

bool OAIUpdateFlowOutput_request::is_sender_control_port_Valid() const{
    return m_sender_control_port_isValid;
}

QString OAIUpdateFlowOutput_request::getSenderIpAddress() const {
    return m_sender_ip_address;
}
void OAIUpdateFlowOutput_request::setSenderIpAddress(const QString &sender_ip_address) {
    m_sender_ip_address = sender_ip_address;
    m_sender_ip_address_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_sender_ip_address_Set() const{
    return m_sender_ip_address_isSet;
}

bool OAIUpdateFlowOutput_request::is_sender_ip_address_Valid() const{
    return m_sender_ip_address_isValid;
}

qint32 OAIUpdateFlowOutput_request::getSmoothingLatency() const {
    return m_smoothing_latency;
}
void OAIUpdateFlowOutput_request::setSmoothingLatency(const qint32 &smoothing_latency) {
    m_smoothing_latency = smoothing_latency;
    m_smoothing_latency_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_smoothing_latency_Set() const{
    return m_smoothing_latency_isSet;
}

bool OAIUpdateFlowOutput_request::is_smoothing_latency_Valid() const{
    return m_smoothing_latency_isValid;
}

QString OAIUpdateFlowOutput_request::getStreamId() const {
    return m_stream_id;
}
void OAIUpdateFlowOutput_request::setStreamId(const QString &stream_id) {
    m_stream_id = stream_id;
    m_stream_id_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_stream_id_Set() const{
    return m_stream_id_isSet;
}

bool OAIUpdateFlowOutput_request::is_stream_id_Valid() const{
    return m_stream_id_isValid;
}

OAIUpdateFlowOutput_request_vpcInterfaceAttachment OAIUpdateFlowOutput_request::getVpcInterfaceAttachment() const {
    return m_vpc_interface_attachment;
}
void OAIUpdateFlowOutput_request::setVpcInterfaceAttachment(const OAIUpdateFlowOutput_request_vpcInterfaceAttachment &vpc_interface_attachment) {
    m_vpc_interface_attachment = vpc_interface_attachment;
    m_vpc_interface_attachment_isSet = true;
}

bool OAIUpdateFlowOutput_request::is_vpc_interface_attachment_Set() const{
    return m_vpc_interface_attachment_isSet;
}

bool OAIUpdateFlowOutput_request::is_vpc_interface_attachment_Valid() const{
    return m_vpc_interface_attachment_isValid;
}

bool OAIUpdateFlowOutput_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cidr_allow_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_stream_output_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_control_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smoothing_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_interface_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFlowOutput_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
