/**
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNodeSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNodeSpec::OAIVirtualNodeSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNodeSpec::OAIVirtualNodeSpec() {
    this->initializeModel();
}

OAIVirtualNodeSpec::~OAIVirtualNodeSpec() {}

void OAIVirtualNodeSpec::initializeModel() {

    m_backends_isSet = false;
    m_backends_isValid = false;

    m_listeners_isSet = false;
    m_listeners_isValid = false;

    m_service_discovery_isSet = false;
    m_service_discovery_isValid = false;
}

void OAIVirtualNodeSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNodeSpec::fromJsonObject(QJsonObject json) {

    m_backends_isValid = ::OpenAPI::fromJsonValue(m_backends, json[QString("backends")]);
    m_backends_isSet = !json[QString("backends")].isNull() && m_backends_isValid;

    m_listeners_isValid = ::OpenAPI::fromJsonValue(m_listeners, json[QString("listeners")]);
    m_listeners_isSet = !json[QString("listeners")].isNull() && m_listeners_isValid;

    m_service_discovery_isValid = ::OpenAPI::fromJsonValue(m_service_discovery, json[QString("serviceDiscovery")]);
    m_service_discovery_isSet = !json[QString("serviceDiscovery")].isNull() && m_service_discovery_isValid;
}

QString OAIVirtualNodeSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNodeSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_backends.isSet()) {
        obj.insert(QString("backends"), ::OpenAPI::toJsonValue(m_backends));
    }
    if (m_listeners.isSet()) {
        obj.insert(QString("listeners"), ::OpenAPI::toJsonValue(m_listeners));
    }
    if (m_service_discovery.isSet()) {
        obj.insert(QString("serviceDiscovery"), ::OpenAPI::toJsonValue(m_service_discovery));
    }
    return obj;
}

QList OAIVirtualNodeSpec::getBackends() const {
    return m_backends;
}
void OAIVirtualNodeSpec::setBackends(const QList &backends) {
    m_backends = backends;
    m_backends_isSet = true;
}

bool OAIVirtualNodeSpec::is_backends_Set() const{
    return m_backends_isSet;
}

bool OAIVirtualNodeSpec::is_backends_Valid() const{
    return m_backends_isValid;
}

QList OAIVirtualNodeSpec::getListeners() const {
    return m_listeners;
}
void OAIVirtualNodeSpec::setListeners(const QList &listeners) {
    m_listeners = listeners;
    m_listeners_isSet = true;
}

bool OAIVirtualNodeSpec::is_listeners_Set() const{
    return m_listeners_isSet;
}

bool OAIVirtualNodeSpec::is_listeners_Valid() const{
    return m_listeners_isValid;
}

OAICreateVirtualNode_request_spec_serviceDiscovery OAIVirtualNodeSpec::getServiceDiscovery() const {
    return m_service_discovery;
}
void OAIVirtualNodeSpec::setServiceDiscovery(const OAICreateVirtualNode_request_spec_serviceDiscovery &service_discovery) {
    m_service_discovery = service_discovery;
    m_service_discovery_isSet = true;
}

bool OAIVirtualNodeSpec::is_service_discovery_Set() const{
    return m_service_discovery_isSet;
}

bool OAIVirtualNodeSpec::is_service_discovery_Valid() const{
    return m_service_discovery_isValid;
}

bool OAIVirtualNodeSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backends.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_listeners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_discovery.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNodeSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
