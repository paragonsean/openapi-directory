/**
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListener.h
 *
 * An object representing a listener for a virtual node.
 */

#ifndef OAIListener_H
#define OAIListener_H

#include <QJsonObject>

#include "OAIListener_healthCheck.h"
#include "OAIListener_portMapping.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIListener_healthCheck;
class OAIListener_portMapping;

class OAIListener : public OAIObject {
public:
    OAIListener();
    OAIListener(QString json);
    ~OAIListener() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIListener_healthCheck getHealthCheck() const;
    void setHealthCheck(const OAIListener_healthCheck &health_check);
    bool is_health_check_Set() const;
    bool is_health_check_Valid() const;

    OAIListener_portMapping getPortMapping() const;
    void setPortMapping(const OAIListener_portMapping &port_mapping);
    bool is_port_mapping_Set() const;
    bool is_port_mapping_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIListener_healthCheck m_health_check;
    bool m_health_check_isSet;
    bool m_health_check_isValid;

    OAIListener_portMapping m_port_mapping;
    bool m_port_mapping_isSet;
    bool m_port_mapping_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListener)

#endif // OAIListener_H
