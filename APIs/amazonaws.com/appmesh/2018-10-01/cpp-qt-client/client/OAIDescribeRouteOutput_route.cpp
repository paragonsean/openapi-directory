/**
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRouteOutput_route.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRouteOutput_route::OAIDescribeRouteOutput_route(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRouteOutput_route::OAIDescribeRouteOutput_route() {
    this->initializeModel();
}

OAIDescribeRouteOutput_route::~OAIDescribeRouteOutput_route() {}

void OAIDescribeRouteOutput_route::initializeModel() {

    m_mesh_name_isSet = false;
    m_mesh_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_route_name_isSet = false;
    m_route_name_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_virtual_router_name_isSet = false;
    m_virtual_router_name_isValid = false;
}

void OAIDescribeRouteOutput_route::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRouteOutput_route::fromJsonObject(QJsonObject json) {

    m_mesh_name_isValid = ::OpenAPI::fromJsonValue(m_mesh_name, json[QString("meshName")]);
    m_mesh_name_isSet = !json[QString("meshName")].isNull() && m_mesh_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_route_name_isValid = ::OpenAPI::fromJsonValue(m_route_name, json[QString("routeName")]);
    m_route_name_isSet = !json[QString("routeName")].isNull() && m_route_name_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_virtual_router_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_router_name, json[QString("virtualRouterName")]);
    m_virtual_router_name_isSet = !json[QString("virtualRouterName")].isNull() && m_virtual_router_name_isValid;
}

QString OAIDescribeRouteOutput_route::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRouteOutput_route::asJsonObject() const {
    QJsonObject obj;
    if (m_mesh_name_isSet) {
        obj.insert(QString("meshName"), ::OpenAPI::toJsonValue(m_mesh_name));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_route_name_isSet) {
        obj.insert(QString("routeName"), ::OpenAPI::toJsonValue(m_route_name));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_virtual_router_name_isSet) {
        obj.insert(QString("virtualRouterName"), ::OpenAPI::toJsonValue(m_virtual_router_name));
    }
    return obj;
}

QString OAIDescribeRouteOutput_route::getMeshName() const {
    return m_mesh_name;
}
void OAIDescribeRouteOutput_route::setMeshName(const QString &mesh_name) {
    m_mesh_name = mesh_name;
    m_mesh_name_isSet = true;
}

bool OAIDescribeRouteOutput_route::is_mesh_name_Set() const{
    return m_mesh_name_isSet;
}

bool OAIDescribeRouteOutput_route::is_mesh_name_Valid() const{
    return m_mesh_name_isValid;
}

OAIRouteData_metadata OAIDescribeRouteOutput_route::getMetadata() const {
    return m_metadata;
}
void OAIDescribeRouteOutput_route::setMetadata(const OAIRouteData_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDescribeRouteOutput_route::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDescribeRouteOutput_route::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIDescribeRouteOutput_route::getRouteName() const {
    return m_route_name;
}
void OAIDescribeRouteOutput_route::setRouteName(const QString &route_name) {
    m_route_name = route_name;
    m_route_name_isSet = true;
}

bool OAIDescribeRouteOutput_route::is_route_name_Set() const{
    return m_route_name_isSet;
}

bool OAIDescribeRouteOutput_route::is_route_name_Valid() const{
    return m_route_name_isValid;
}

OAIRouteData_spec OAIDescribeRouteOutput_route::getSpec() const {
    return m_spec;
}
void OAIDescribeRouteOutput_route::setSpec(const OAIRouteData_spec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIDescribeRouteOutput_route::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIDescribeRouteOutput_route::is_spec_Valid() const{
    return m_spec_isValid;
}

OAIRouteData_status OAIDescribeRouteOutput_route::getStatus() const {
    return m_status;
}
void OAIDescribeRouteOutput_route::setStatus(const OAIRouteData_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeRouteOutput_route::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeRouteOutput_route::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeRouteOutput_route::getVirtualRouterName() const {
    return m_virtual_router_name;
}
void OAIDescribeRouteOutput_route::setVirtualRouterName(const QString &virtual_router_name) {
    m_virtual_router_name = virtual_router_name;
    m_virtual_router_name_isSet = true;
}

bool OAIDescribeRouteOutput_route::is_virtual_router_name_Set() const{
    return m_virtual_router_name_isSet;
}

bool OAIDescribeRouteOutput_route::is_virtual_router_name_Valid() const{
    return m_virtual_router_name_isValid;
}

bool OAIDescribeRouteOutput_route::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mesh_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_router_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRouteOutput_route::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mesh_name_isValid && m_route_name_isValid && m_virtual_router_name_isValid && true;
}

} // namespace OpenAPI
