/**
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualRouterData.h
 *
 * An object representing a virtual router returned by a describe operation.
 */

#ifndef OAIVirtualRouterData_H
#define OAIVirtualRouterData_H

#include <QJsonObject>

#include "OAIVirtualRouterData_metadata.h"
#include "OAIVirtualRouterData_spec.h"
#include "OAIVirtualRouterData_status.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVirtualRouterData_metadata;
class OAIVirtualRouterData_spec;
class OAIVirtualRouterData_status;

class OAIVirtualRouterData : public OAIObject {
public:
    OAIVirtualRouterData();
    OAIVirtualRouterData(QString json);
    ~OAIVirtualRouterData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMeshName() const;
    void setMeshName(const QString &mesh_name);
    bool is_mesh_name_Set() const;
    bool is_mesh_name_Valid() const;

    OAIVirtualRouterData_metadata getMetadata() const;
    void setMetadata(const OAIVirtualRouterData_metadata &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    OAIVirtualRouterData_spec getSpec() const;
    void setSpec(const OAIVirtualRouterData_spec &spec);
    bool is_spec_Set() const;
    bool is_spec_Valid() const;

    OAIVirtualRouterData_status getStatus() const;
    void setStatus(const OAIVirtualRouterData_status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getVirtualRouterName() const;
    void setVirtualRouterName(const QString &virtual_router_name);
    bool is_virtual_router_name_Set() const;
    bool is_virtual_router_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_mesh_name;
    bool m_mesh_name_isSet;
    bool m_mesh_name_isValid;

    OAIVirtualRouterData_metadata m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    OAIVirtualRouterData_spec m_spec;
    bool m_spec_isSet;
    bool m_spec_isValid;

    OAIVirtualRouterData_status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_virtual_router_name;
    bool m_virtual_router_name_isSet;
    bool m_virtual_router_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualRouterData)

#endif // OAIVirtualRouterData_H
