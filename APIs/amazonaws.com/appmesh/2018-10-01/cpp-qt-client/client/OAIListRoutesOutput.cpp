/**
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRoutesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRoutesOutput::OAIListRoutesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRoutesOutput::OAIListRoutesOutput() {
    this->initializeModel();
}

OAIListRoutesOutput::~OAIListRoutesOutput() {}

void OAIListRoutesOutput::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_routes_isSet = false;
    m_routes_isValid = false;
}

void OAIListRoutesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRoutesOutput::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_routes_isValid = ::OpenAPI::fromJsonValue(m_routes, json[QString("routes")]);
    m_routes_isSet = !json[QString("routes")].isNull() && m_routes_isValid;
}

QString OAIListRoutesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRoutesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_routes.isSet()) {
        obj.insert(QString("routes"), ::OpenAPI::toJsonValue(m_routes));
    }
    return obj;
}

QString OAIListRoutesOutput::getNextToken() const {
    return m_next_token;
}
void OAIListRoutesOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListRoutesOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListRoutesOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListRoutesOutput::getRoutes() const {
    return m_routes;
}
void OAIListRoutesOutput::setRoutes(const QList &routes) {
    m_routes = routes;
    m_routes_isSet = true;
}

bool OAIListRoutesOutput::is_routes_Set() const{
    return m_routes_isSet;
}

bool OAIListRoutesOutput::is_routes_Valid() const{
    return m_routes_isValid;
}

bool OAIListRoutesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRoutesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_routes_isValid && true;
}

} // namespace OpenAPI
