/**
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPortProtocol.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPortProtocol::OAIPortProtocol(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPortProtocol::OAIPortProtocol() {
    this->initializeModel();
}

OAIPortProtocol::~OAIPortProtocol() {}

void OAIPortProtocol::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPortProtocol::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPortProtocol::fromJson(QString jsonString) {
    
    if ( jsonString.compare("http", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPortProtocol::HTTP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tcp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPortProtocol::TCP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPortProtocol::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPortProtocol::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPortProtocol::HTTP:
            val = "http";
            break;
        case eOAIPortProtocol::TCP:
            val = "tcp";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPortProtocol::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPortProtocol::eOAIPortProtocol OAIPortProtocol::getValue() const {
    return m_value;
}

void OAIPortProtocol::setValue(const OAIPortProtocol::eOAIPortProtocol& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPortProtocol::isSet() const {
    
    return m_value_isSet;
}

bool OAIPortProtocol::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
