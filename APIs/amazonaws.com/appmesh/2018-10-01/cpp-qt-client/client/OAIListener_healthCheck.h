/**
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListener_healthCheck.h
 *
 * 
 */

#ifndef OAIListener_healthCheck_H
#define OAIListener_healthCheck_H

#include <QJsonObject>

#include "OAIPortProtocol.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListener_healthCheck : public OAIObject {
public:
    OAIListener_healthCheck();
    OAIListener_healthCheck(QString json);
    ~OAIListener_healthCheck() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getHealthyThreshold() const;
    void setHealthyThreshold(const qint32 &healthy_threshold);
    bool is_healthy_threshold_Set() const;
    bool is_healthy_threshold_Valid() const;

    qint32 getIntervalMillis() const;
    void setIntervalMillis(const qint32 &interval_millis);
    bool is_interval_millis_Set() const;
    bool is_interval_millis_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    OAIPortProtocol getProtocol() const;
    void setProtocol(const OAIPortProtocol &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    qint32 getTimeoutMillis() const;
    void setTimeoutMillis(const qint32 &timeout_millis);
    bool is_timeout_millis_Set() const;
    bool is_timeout_millis_Valid() const;

    qint32 getUnhealthyThreshold() const;
    void setUnhealthyThreshold(const qint32 &unhealthy_threshold);
    bool is_unhealthy_threshold_Set() const;
    bool is_unhealthy_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_healthy_threshold;
    bool m_healthy_threshold_isSet;
    bool m_healthy_threshold_isValid;

    qint32 m_interval_millis;
    bool m_interval_millis_isSet;
    bool m_interval_millis_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    OAIPortProtocol m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    qint32 m_timeout_millis;
    bool m_timeout_millis_isSet;
    bool m_timeout_millis_isValid;

    qint32 m_unhealthy_threshold;
    bool m_unhealthy_threshold_isSet;
    bool m_unhealthy_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListener_healthCheck)

#endif // OAIListener_healthCheck_H
