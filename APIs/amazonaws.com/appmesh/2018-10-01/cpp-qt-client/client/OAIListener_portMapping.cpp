/**
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListener_portMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListener_portMapping::OAIListener_portMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListener_portMapping::OAIListener_portMapping() {
    this->initializeModel();
}

OAIListener_portMapping::~OAIListener_portMapping() {}

void OAIListener_portMapping::initializeModel() {

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OAIListener_portMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListener_portMapping::fromJsonObject(QJsonObject json) {

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;
}

QString OAIListener_portMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListener_portMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    return obj;
}

qint32 OAIListener_portMapping::getPort() const {
    return m_port;
}
void OAIListener_portMapping::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIListener_portMapping::is_port_Set() const{
    return m_port_isSet;
}

bool OAIListener_portMapping::is_port_Valid() const{
    return m_port_isValid;
}

OAIPortProtocol OAIListener_portMapping::getProtocol() const {
    return m_protocol;
}
void OAIListener_portMapping::setProtocol(const OAIPortProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIListener_portMapping::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIListener_portMapping::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAIListener_portMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListener_portMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
