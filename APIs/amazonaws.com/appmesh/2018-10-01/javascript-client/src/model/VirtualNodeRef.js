/**
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VirtualNodeRef model module.
 * @module model/VirtualNodeRef
 * @version 2018-10-01
 */
class VirtualNodeRef {
    /**
     * Constructs a new <code>VirtualNodeRef</code>.
     * An object representing a virtual node returned by a list operation.
     * @alias module:model/VirtualNodeRef
     */
    constructor() { 
        
        VirtualNodeRef.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualNodeRef</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualNodeRef} obj Optional instance to populate.
     * @return {module:model/VirtualNodeRef} The populated <code>VirtualNodeRef</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualNodeRef();

            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('meshName')) {
                obj['meshName'] = ApiClient.convertToType(data['meshName'], 'String');
            }
            if (data.hasOwnProperty('virtualNodeName')) {
                obj['virtualNodeName'] = ApiClient.convertToType(data['virtualNodeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualNodeRef</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualNodeRef</code>.
     */
    static validateJSON(data) {
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `meshName`
        if (data['meshName']) { // data not null
          String.validateJSON(data['meshName']);
        }
        // validate the optional field `virtualNodeName`
        if (data['virtualNodeName']) { // data not null
          String.validateJSON(data['virtualNodeName']);
        }

        return true;
    }


}



/**
 * @member {String} arn
 */
VirtualNodeRef.prototype['arn'] = undefined;

/**
 * @member {String} meshName
 */
VirtualNodeRef.prototype['meshName'] = undefined;

/**
 * @member {String} virtualNodeName
 */
VirtualNodeRef.prototype['virtualNodeName'] = undefined;






export default VirtualNodeRef;

