/**
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import CreateMeshInput from './model/CreateMeshInput';
import CreateMeshOutput from './model/CreateMeshOutput';
import CreateMeshOutputMesh from './model/CreateMeshOutputMesh';
import CreateMeshRequest from './model/CreateMeshRequest';
import CreateRouteInput from './model/CreateRouteInput';
import CreateRouteInputSpec from './model/CreateRouteInputSpec';
import CreateRouteOutput from './model/CreateRouteOutput';
import CreateRouteOutputRoute from './model/CreateRouteOutputRoute';
import CreateRouteRequest from './model/CreateRouteRequest';
import CreateRouteRequestSpec from './model/CreateRouteRequestSpec';
import CreateRouteRequestSpecHttpRoute from './model/CreateRouteRequestSpecHttpRoute';
import CreateVirtualNodeInput from './model/CreateVirtualNodeInput';
import CreateVirtualNodeInputSpec from './model/CreateVirtualNodeInputSpec';
import CreateVirtualNodeOutput from './model/CreateVirtualNodeOutput';
import CreateVirtualNodeOutputVirtualNode from './model/CreateVirtualNodeOutputVirtualNode';
import CreateVirtualNodeRequest from './model/CreateVirtualNodeRequest';
import CreateVirtualNodeRequestSpec from './model/CreateVirtualNodeRequestSpec';
import CreateVirtualNodeRequestSpecServiceDiscovery from './model/CreateVirtualNodeRequestSpecServiceDiscovery';
import CreateVirtualRouterInput from './model/CreateVirtualRouterInput';
import CreateVirtualRouterInputSpec from './model/CreateVirtualRouterInputSpec';
import CreateVirtualRouterOutput from './model/CreateVirtualRouterOutput';
import CreateVirtualRouterOutputVirtualRouter from './model/CreateVirtualRouterOutputVirtualRouter';
import CreateVirtualRouterRequest from './model/CreateVirtualRouterRequest';
import CreateVirtualRouterRequestSpec from './model/CreateVirtualRouterRequestSpec';
import DeleteMeshOutput from './model/DeleteMeshOutput';
import DeleteMeshOutputMesh from './model/DeleteMeshOutputMesh';
import DeleteRouteOutput from './model/DeleteRouteOutput';
import DeleteRouteOutputRoute from './model/DeleteRouteOutputRoute';
import DeleteVirtualNodeOutput from './model/DeleteVirtualNodeOutput';
import DeleteVirtualNodeOutputVirtualNode from './model/DeleteVirtualNodeOutputVirtualNode';
import DeleteVirtualRouterOutput from './model/DeleteVirtualRouterOutput';
import DeleteVirtualRouterOutputVirtualRouter from './model/DeleteVirtualRouterOutputVirtualRouter';
import DescribeMeshOutput from './model/DescribeMeshOutput';
import DescribeMeshOutputMesh from './model/DescribeMeshOutputMesh';
import DescribeRouteOutput from './model/DescribeRouteOutput';
import DescribeRouteOutputRoute from './model/DescribeRouteOutputRoute';
import DescribeVirtualNodeOutput from './model/DescribeVirtualNodeOutput';
import DescribeVirtualNodeOutputVirtualNode from './model/DescribeVirtualNodeOutputVirtualNode';
import DescribeVirtualRouterOutput from './model/DescribeVirtualRouterOutput';
import DescribeVirtualRouterOutputVirtualRouter from './model/DescribeVirtualRouterOutputVirtualRouter';
import DnsServiceDiscovery from './model/DnsServiceDiscovery';
import HealthCheckPolicy from './model/HealthCheckPolicy';
import HttpRoute from './model/HttpRoute';
import HttpRouteAction from './model/HttpRouteAction';
import HttpRouteMatch from './model/HttpRouteMatch';
import ListMeshesOutput from './model/ListMeshesOutput';
import ListRoutesOutput from './model/ListRoutesOutput';
import ListVirtualNodesOutput from './model/ListVirtualNodesOutput';
import ListVirtualRoutersOutput from './model/ListVirtualRoutersOutput';
import Listener from './model/Listener';
import ListenerHealthCheck from './model/ListenerHealthCheck';
import ListenerPortMapping from './model/ListenerPortMapping';
import MeshData from './model/MeshData';
import MeshDataMetadata from './model/MeshDataMetadata';
import MeshDataStatus from './model/MeshDataStatus';
import MeshRef from './model/MeshRef';
import MeshStatus from './model/MeshStatus';
import MeshStatusCode from './model/MeshStatusCode';
import PortMapping from './model/PortMapping';
import PortProtocol from './model/PortProtocol';
import ResourceMetadata from './model/ResourceMetadata';
import RouteData from './model/RouteData';
import RouteDataMetadata from './model/RouteDataMetadata';
import RouteDataSpec from './model/RouteDataSpec';
import RouteDataStatus from './model/RouteDataStatus';
import RouteRef from './model/RouteRef';
import RouteSpec from './model/RouteSpec';
import RouteStatus from './model/RouteStatus';
import RouteStatusCode from './model/RouteStatusCode';
import ServiceDiscovery from './model/ServiceDiscovery';
import ServiceDiscoveryDns from './model/ServiceDiscoveryDns';
import UpdateRouteInput from './model/UpdateRouteInput';
import UpdateRouteInputSpec from './model/UpdateRouteInputSpec';
import UpdateRouteOutput from './model/UpdateRouteOutput';
import UpdateRouteOutputRoute from './model/UpdateRouteOutputRoute';
import UpdateRouteRequest from './model/UpdateRouteRequest';
import UpdateVirtualNodeInput from './model/UpdateVirtualNodeInput';
import UpdateVirtualNodeInputSpec from './model/UpdateVirtualNodeInputSpec';
import UpdateVirtualNodeOutput from './model/UpdateVirtualNodeOutput';
import UpdateVirtualNodeOutputVirtualNode from './model/UpdateVirtualNodeOutputVirtualNode';
import UpdateVirtualNodeRequest from './model/UpdateVirtualNodeRequest';
import UpdateVirtualRouterInput from './model/UpdateVirtualRouterInput';
import UpdateVirtualRouterInputSpec from './model/UpdateVirtualRouterInputSpec';
import UpdateVirtualRouterOutput from './model/UpdateVirtualRouterOutput';
import UpdateVirtualRouterOutputVirtualRouter from './model/UpdateVirtualRouterOutputVirtualRouter';
import UpdateVirtualRouterRequest from './model/UpdateVirtualRouterRequest';
import VirtualNodeData from './model/VirtualNodeData';
import VirtualNodeDataMetadata from './model/VirtualNodeDataMetadata';
import VirtualNodeDataSpec from './model/VirtualNodeDataSpec';
import VirtualNodeDataStatus from './model/VirtualNodeDataStatus';
import VirtualNodeRef from './model/VirtualNodeRef';
import VirtualNodeSpec from './model/VirtualNodeSpec';
import VirtualNodeStatus from './model/VirtualNodeStatus';
import VirtualNodeStatusCode from './model/VirtualNodeStatusCode';
import VirtualRouterData from './model/VirtualRouterData';
import VirtualRouterDataMetadata from './model/VirtualRouterDataMetadata';
import VirtualRouterDataSpec from './model/VirtualRouterDataSpec';
import VirtualRouterDataStatus from './model/VirtualRouterDataStatus';
import VirtualRouterRef from './model/VirtualRouterRef';
import VirtualRouterSpec from './model/VirtualRouterSpec';
import VirtualRouterStatus from './model/VirtualRouterStatus';
import VirtualRouterStatusCode from './model/VirtualRouterStatusCode';
import WeightedTarget from './model/WeightedTarget';
import DefaultApi from './api/DefaultApi';


/**
* &lt;p&gt;AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.&lt;/p&gt;          &lt;p&gt;App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.&lt;/p&gt;          &lt;note&gt;             &lt;p&gt;App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\&quot;&gt;Service Discovery&lt;/a&gt; in the                &lt;i&gt;Amazon Elastic Container Service Developer Guide&lt;/i&gt;. Kubernetes &lt;code&gt;kube-dns&lt;/code&gt; is supported.             For more information, see &lt;a href&#x3D;\&quot;https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\&quot;&gt;DNS                for Services and Pods&lt;/a&gt; in the Kubernetes documentation.&lt;/p&gt;          &lt;/note&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AwsAppMesh = require('index'); // See note below*.
* var xxxSvc = new AwsAppMesh.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AwsAppMesh.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AwsAppMesh.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AwsAppMesh.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2018-10-01
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CreateMeshInput model constructor.
     * @property {module:model/CreateMeshInput}
     */
    CreateMeshInput,

    /**
     * The CreateMeshOutput model constructor.
     * @property {module:model/CreateMeshOutput}
     */
    CreateMeshOutput,

    /**
     * The CreateMeshOutputMesh model constructor.
     * @property {module:model/CreateMeshOutputMesh}
     */
    CreateMeshOutputMesh,

    /**
     * The CreateMeshRequest model constructor.
     * @property {module:model/CreateMeshRequest}
     */
    CreateMeshRequest,

    /**
     * The CreateRouteInput model constructor.
     * @property {module:model/CreateRouteInput}
     */
    CreateRouteInput,

    /**
     * The CreateRouteInputSpec model constructor.
     * @property {module:model/CreateRouteInputSpec}
     */
    CreateRouteInputSpec,

    /**
     * The CreateRouteOutput model constructor.
     * @property {module:model/CreateRouteOutput}
     */
    CreateRouteOutput,

    /**
     * The CreateRouteOutputRoute model constructor.
     * @property {module:model/CreateRouteOutputRoute}
     */
    CreateRouteOutputRoute,

    /**
     * The CreateRouteRequest model constructor.
     * @property {module:model/CreateRouteRequest}
     */
    CreateRouteRequest,

    /**
     * The CreateRouteRequestSpec model constructor.
     * @property {module:model/CreateRouteRequestSpec}
     */
    CreateRouteRequestSpec,

    /**
     * The CreateRouteRequestSpecHttpRoute model constructor.
     * @property {module:model/CreateRouteRequestSpecHttpRoute}
     */
    CreateRouteRequestSpecHttpRoute,

    /**
     * The CreateVirtualNodeInput model constructor.
     * @property {module:model/CreateVirtualNodeInput}
     */
    CreateVirtualNodeInput,

    /**
     * The CreateVirtualNodeInputSpec model constructor.
     * @property {module:model/CreateVirtualNodeInputSpec}
     */
    CreateVirtualNodeInputSpec,

    /**
     * The CreateVirtualNodeOutput model constructor.
     * @property {module:model/CreateVirtualNodeOutput}
     */
    CreateVirtualNodeOutput,

    /**
     * The CreateVirtualNodeOutputVirtualNode model constructor.
     * @property {module:model/CreateVirtualNodeOutputVirtualNode}
     */
    CreateVirtualNodeOutputVirtualNode,

    /**
     * The CreateVirtualNodeRequest model constructor.
     * @property {module:model/CreateVirtualNodeRequest}
     */
    CreateVirtualNodeRequest,

    /**
     * The CreateVirtualNodeRequestSpec model constructor.
     * @property {module:model/CreateVirtualNodeRequestSpec}
     */
    CreateVirtualNodeRequestSpec,

    /**
     * The CreateVirtualNodeRequestSpecServiceDiscovery model constructor.
     * @property {module:model/CreateVirtualNodeRequestSpecServiceDiscovery}
     */
    CreateVirtualNodeRequestSpecServiceDiscovery,

    /**
     * The CreateVirtualRouterInput model constructor.
     * @property {module:model/CreateVirtualRouterInput}
     */
    CreateVirtualRouterInput,

    /**
     * The CreateVirtualRouterInputSpec model constructor.
     * @property {module:model/CreateVirtualRouterInputSpec}
     */
    CreateVirtualRouterInputSpec,

    /**
     * The CreateVirtualRouterOutput model constructor.
     * @property {module:model/CreateVirtualRouterOutput}
     */
    CreateVirtualRouterOutput,

    /**
     * The CreateVirtualRouterOutputVirtualRouter model constructor.
     * @property {module:model/CreateVirtualRouterOutputVirtualRouter}
     */
    CreateVirtualRouterOutputVirtualRouter,

    /**
     * The CreateVirtualRouterRequest model constructor.
     * @property {module:model/CreateVirtualRouterRequest}
     */
    CreateVirtualRouterRequest,

    /**
     * The CreateVirtualRouterRequestSpec model constructor.
     * @property {module:model/CreateVirtualRouterRequestSpec}
     */
    CreateVirtualRouterRequestSpec,

    /**
     * The DeleteMeshOutput model constructor.
     * @property {module:model/DeleteMeshOutput}
     */
    DeleteMeshOutput,

    /**
     * The DeleteMeshOutputMesh model constructor.
     * @property {module:model/DeleteMeshOutputMesh}
     */
    DeleteMeshOutputMesh,

    /**
     * The DeleteRouteOutput model constructor.
     * @property {module:model/DeleteRouteOutput}
     */
    DeleteRouteOutput,

    /**
     * The DeleteRouteOutputRoute model constructor.
     * @property {module:model/DeleteRouteOutputRoute}
     */
    DeleteRouteOutputRoute,

    /**
     * The DeleteVirtualNodeOutput model constructor.
     * @property {module:model/DeleteVirtualNodeOutput}
     */
    DeleteVirtualNodeOutput,

    /**
     * The DeleteVirtualNodeOutputVirtualNode model constructor.
     * @property {module:model/DeleteVirtualNodeOutputVirtualNode}
     */
    DeleteVirtualNodeOutputVirtualNode,

    /**
     * The DeleteVirtualRouterOutput model constructor.
     * @property {module:model/DeleteVirtualRouterOutput}
     */
    DeleteVirtualRouterOutput,

    /**
     * The DeleteVirtualRouterOutputVirtualRouter model constructor.
     * @property {module:model/DeleteVirtualRouterOutputVirtualRouter}
     */
    DeleteVirtualRouterOutputVirtualRouter,

    /**
     * The DescribeMeshOutput model constructor.
     * @property {module:model/DescribeMeshOutput}
     */
    DescribeMeshOutput,

    /**
     * The DescribeMeshOutputMesh model constructor.
     * @property {module:model/DescribeMeshOutputMesh}
     */
    DescribeMeshOutputMesh,

    /**
     * The DescribeRouteOutput model constructor.
     * @property {module:model/DescribeRouteOutput}
     */
    DescribeRouteOutput,

    /**
     * The DescribeRouteOutputRoute model constructor.
     * @property {module:model/DescribeRouteOutputRoute}
     */
    DescribeRouteOutputRoute,

    /**
     * The DescribeVirtualNodeOutput model constructor.
     * @property {module:model/DescribeVirtualNodeOutput}
     */
    DescribeVirtualNodeOutput,

    /**
     * The DescribeVirtualNodeOutputVirtualNode model constructor.
     * @property {module:model/DescribeVirtualNodeOutputVirtualNode}
     */
    DescribeVirtualNodeOutputVirtualNode,

    /**
     * The DescribeVirtualRouterOutput model constructor.
     * @property {module:model/DescribeVirtualRouterOutput}
     */
    DescribeVirtualRouterOutput,

    /**
     * The DescribeVirtualRouterOutputVirtualRouter model constructor.
     * @property {module:model/DescribeVirtualRouterOutputVirtualRouter}
     */
    DescribeVirtualRouterOutputVirtualRouter,

    /**
     * The DnsServiceDiscovery model constructor.
     * @property {module:model/DnsServiceDiscovery}
     */
    DnsServiceDiscovery,

    /**
     * The HealthCheckPolicy model constructor.
     * @property {module:model/HealthCheckPolicy}
     */
    HealthCheckPolicy,

    /**
     * The HttpRoute model constructor.
     * @property {module:model/HttpRoute}
     */
    HttpRoute,

    /**
     * The HttpRouteAction model constructor.
     * @property {module:model/HttpRouteAction}
     */
    HttpRouteAction,

    /**
     * The HttpRouteMatch model constructor.
     * @property {module:model/HttpRouteMatch}
     */
    HttpRouteMatch,

    /**
     * The ListMeshesOutput model constructor.
     * @property {module:model/ListMeshesOutput}
     */
    ListMeshesOutput,

    /**
     * The ListRoutesOutput model constructor.
     * @property {module:model/ListRoutesOutput}
     */
    ListRoutesOutput,

    /**
     * The ListVirtualNodesOutput model constructor.
     * @property {module:model/ListVirtualNodesOutput}
     */
    ListVirtualNodesOutput,

    /**
     * The ListVirtualRoutersOutput model constructor.
     * @property {module:model/ListVirtualRoutersOutput}
     */
    ListVirtualRoutersOutput,

    /**
     * The Listener model constructor.
     * @property {module:model/Listener}
     */
    Listener,

    /**
     * The ListenerHealthCheck model constructor.
     * @property {module:model/ListenerHealthCheck}
     */
    ListenerHealthCheck,

    /**
     * The ListenerPortMapping model constructor.
     * @property {module:model/ListenerPortMapping}
     */
    ListenerPortMapping,

    /**
     * The MeshData model constructor.
     * @property {module:model/MeshData}
     */
    MeshData,

    /**
     * The MeshDataMetadata model constructor.
     * @property {module:model/MeshDataMetadata}
     */
    MeshDataMetadata,

    /**
     * The MeshDataStatus model constructor.
     * @property {module:model/MeshDataStatus}
     */
    MeshDataStatus,

    /**
     * The MeshRef model constructor.
     * @property {module:model/MeshRef}
     */
    MeshRef,

    /**
     * The MeshStatus model constructor.
     * @property {module:model/MeshStatus}
     */
    MeshStatus,

    /**
     * The MeshStatusCode model constructor.
     * @property {module:model/MeshStatusCode}
     */
    MeshStatusCode,

    /**
     * The PortMapping model constructor.
     * @property {module:model/PortMapping}
     */
    PortMapping,

    /**
     * The PortProtocol model constructor.
     * @property {module:model/PortProtocol}
     */
    PortProtocol,

    /**
     * The ResourceMetadata model constructor.
     * @property {module:model/ResourceMetadata}
     */
    ResourceMetadata,

    /**
     * The RouteData model constructor.
     * @property {module:model/RouteData}
     */
    RouteData,

    /**
     * The RouteDataMetadata model constructor.
     * @property {module:model/RouteDataMetadata}
     */
    RouteDataMetadata,

    /**
     * The RouteDataSpec model constructor.
     * @property {module:model/RouteDataSpec}
     */
    RouteDataSpec,

    /**
     * The RouteDataStatus model constructor.
     * @property {module:model/RouteDataStatus}
     */
    RouteDataStatus,

    /**
     * The RouteRef model constructor.
     * @property {module:model/RouteRef}
     */
    RouteRef,

    /**
     * The RouteSpec model constructor.
     * @property {module:model/RouteSpec}
     */
    RouteSpec,

    /**
     * The RouteStatus model constructor.
     * @property {module:model/RouteStatus}
     */
    RouteStatus,

    /**
     * The RouteStatusCode model constructor.
     * @property {module:model/RouteStatusCode}
     */
    RouteStatusCode,

    /**
     * The ServiceDiscovery model constructor.
     * @property {module:model/ServiceDiscovery}
     */
    ServiceDiscovery,

    /**
     * The ServiceDiscoveryDns model constructor.
     * @property {module:model/ServiceDiscoveryDns}
     */
    ServiceDiscoveryDns,

    /**
     * The UpdateRouteInput model constructor.
     * @property {module:model/UpdateRouteInput}
     */
    UpdateRouteInput,

    /**
     * The UpdateRouteInputSpec model constructor.
     * @property {module:model/UpdateRouteInputSpec}
     */
    UpdateRouteInputSpec,

    /**
     * The UpdateRouteOutput model constructor.
     * @property {module:model/UpdateRouteOutput}
     */
    UpdateRouteOutput,

    /**
     * The UpdateRouteOutputRoute model constructor.
     * @property {module:model/UpdateRouteOutputRoute}
     */
    UpdateRouteOutputRoute,

    /**
     * The UpdateRouteRequest model constructor.
     * @property {module:model/UpdateRouteRequest}
     */
    UpdateRouteRequest,

    /**
     * The UpdateVirtualNodeInput model constructor.
     * @property {module:model/UpdateVirtualNodeInput}
     */
    UpdateVirtualNodeInput,

    /**
     * The UpdateVirtualNodeInputSpec model constructor.
     * @property {module:model/UpdateVirtualNodeInputSpec}
     */
    UpdateVirtualNodeInputSpec,

    /**
     * The UpdateVirtualNodeOutput model constructor.
     * @property {module:model/UpdateVirtualNodeOutput}
     */
    UpdateVirtualNodeOutput,

    /**
     * The UpdateVirtualNodeOutputVirtualNode model constructor.
     * @property {module:model/UpdateVirtualNodeOutputVirtualNode}
     */
    UpdateVirtualNodeOutputVirtualNode,

    /**
     * The UpdateVirtualNodeRequest model constructor.
     * @property {module:model/UpdateVirtualNodeRequest}
     */
    UpdateVirtualNodeRequest,

    /**
     * The UpdateVirtualRouterInput model constructor.
     * @property {module:model/UpdateVirtualRouterInput}
     */
    UpdateVirtualRouterInput,

    /**
     * The UpdateVirtualRouterInputSpec model constructor.
     * @property {module:model/UpdateVirtualRouterInputSpec}
     */
    UpdateVirtualRouterInputSpec,

    /**
     * The UpdateVirtualRouterOutput model constructor.
     * @property {module:model/UpdateVirtualRouterOutput}
     */
    UpdateVirtualRouterOutput,

    /**
     * The UpdateVirtualRouterOutputVirtualRouter model constructor.
     * @property {module:model/UpdateVirtualRouterOutputVirtualRouter}
     */
    UpdateVirtualRouterOutputVirtualRouter,

    /**
     * The UpdateVirtualRouterRequest model constructor.
     * @property {module:model/UpdateVirtualRouterRequest}
     */
    UpdateVirtualRouterRequest,

    /**
     * The VirtualNodeData model constructor.
     * @property {module:model/VirtualNodeData}
     */
    VirtualNodeData,

    /**
     * The VirtualNodeDataMetadata model constructor.
     * @property {module:model/VirtualNodeDataMetadata}
     */
    VirtualNodeDataMetadata,

    /**
     * The VirtualNodeDataSpec model constructor.
     * @property {module:model/VirtualNodeDataSpec}
     */
    VirtualNodeDataSpec,

    /**
     * The VirtualNodeDataStatus model constructor.
     * @property {module:model/VirtualNodeDataStatus}
     */
    VirtualNodeDataStatus,

    /**
     * The VirtualNodeRef model constructor.
     * @property {module:model/VirtualNodeRef}
     */
    VirtualNodeRef,

    /**
     * The VirtualNodeSpec model constructor.
     * @property {module:model/VirtualNodeSpec}
     */
    VirtualNodeSpec,

    /**
     * The VirtualNodeStatus model constructor.
     * @property {module:model/VirtualNodeStatus}
     */
    VirtualNodeStatus,

    /**
     * The VirtualNodeStatusCode model constructor.
     * @property {module:model/VirtualNodeStatusCode}
     */
    VirtualNodeStatusCode,

    /**
     * The VirtualRouterData model constructor.
     * @property {module:model/VirtualRouterData}
     */
    VirtualRouterData,

    /**
     * The VirtualRouterDataMetadata model constructor.
     * @property {module:model/VirtualRouterDataMetadata}
     */
    VirtualRouterDataMetadata,

    /**
     * The VirtualRouterDataSpec model constructor.
     * @property {module:model/VirtualRouterDataSpec}
     */
    VirtualRouterDataSpec,

    /**
     * The VirtualRouterDataStatus model constructor.
     * @property {module:model/VirtualRouterDataStatus}
     */
    VirtualRouterDataStatus,

    /**
     * The VirtualRouterRef model constructor.
     * @property {module:model/VirtualRouterRef}
     */
    VirtualRouterRef,

    /**
     * The VirtualRouterSpec model constructor.
     * @property {module:model/VirtualRouterSpec}
     */
    VirtualRouterSpec,

    /**
     * The VirtualRouterStatus model constructor.
     * @property {module:model/VirtualRouterStatus}
     */
    VirtualRouterStatus,

    /**
     * The VirtualRouterStatusCode model constructor.
     * @property {module:model/VirtualRouterStatusCode}
     */
    VirtualRouterStatusCode,

    /**
     * The WeightedTarget model constructor.
     * @property {module:model/WeightedTarget}
     */
    WeightedTarget,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
