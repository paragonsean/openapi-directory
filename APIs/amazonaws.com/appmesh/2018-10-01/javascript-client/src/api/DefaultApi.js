/**
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateMeshOutput from '../model/CreateMeshOutput';
import CreateMeshRequest from '../model/CreateMeshRequest';
import CreateRouteOutput from '../model/CreateRouteOutput';
import CreateRouteRequest from '../model/CreateRouteRequest';
import CreateVirtualNodeOutput from '../model/CreateVirtualNodeOutput';
import CreateVirtualNodeRequest from '../model/CreateVirtualNodeRequest';
import CreateVirtualRouterOutput from '../model/CreateVirtualRouterOutput';
import CreateVirtualRouterRequest from '../model/CreateVirtualRouterRequest';
import DeleteMeshOutput from '../model/DeleteMeshOutput';
import DeleteRouteOutput from '../model/DeleteRouteOutput';
import DeleteVirtualNodeOutput from '../model/DeleteVirtualNodeOutput';
import DeleteVirtualRouterOutput from '../model/DeleteVirtualRouterOutput';
import DescribeMeshOutput from '../model/DescribeMeshOutput';
import DescribeRouteOutput from '../model/DescribeRouteOutput';
import DescribeVirtualNodeOutput from '../model/DescribeVirtualNodeOutput';
import DescribeVirtualRouterOutput from '../model/DescribeVirtualRouterOutput';
import ListMeshesOutput from '../model/ListMeshesOutput';
import ListRoutesOutput from '../model/ListRoutesOutput';
import ListVirtualNodesOutput from '../model/ListVirtualNodesOutput';
import ListVirtualRoutersOutput from '../model/ListVirtualRoutersOutput';
import UpdateRouteOutput from '../model/UpdateRouteOutput';
import UpdateRouteRequest from '../model/UpdateRouteRequest';
import UpdateVirtualNodeOutput from '../model/UpdateVirtualNodeOutput';
import UpdateVirtualNodeRequest from '../model/UpdateVirtualNodeRequest';
import UpdateVirtualRouterOutput from '../model/UpdateVirtualRouterOutput';
import UpdateVirtualRouterRequest from '../model/UpdateVirtualRouterRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-10-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMesh operation.
     * @callback module:api/DefaultApi~createMeshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMeshOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new service mesh. A service mesh is a logical boundary for network traffic          between the services that reside within it.</p>          <p>After you create your service mesh, you can create virtual nodes, virtual routers, and          routes to distribute traffic between the applications in your mesh.</p>
     * @param {module:model/CreateMeshRequest} createMeshRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMeshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMeshOutput}
     */
    createMesh(createMeshRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMeshRequest;
      // verify the required parameter 'createMeshRequest' is set
      if (createMeshRequest === undefined || createMeshRequest === null) {
        throw new Error("Missing the required parameter 'createMeshRequest' when calling createMesh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMeshOutput;
      return this.apiClient.callApi(
        '/meshes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRoute operation.
     * @callback module:api/DefaultApi~createRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRouteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new route that is associated with a virtual router.</p>          <p>You can use the <code>prefix</code> parameter in your route specification for path-based          routing of requests. For example, if your virtual router service name is             <code>my-service.local</code>, and you want the route to match requests to             <code>my-service.local/metrics</code>, then your prefix should be          <code>/metrics</code>.</p>          <p>If your route matches a request, you can distribute traffic to one or more target          virtual nodes with relative weighting.</p>
     * @param {String} meshName The name of the service mesh in which to create the route.
     * @param {String} virtualRouterName The name of the virtual router in which to create the route.
     * @param {module:model/CreateRouteRequest} createRouteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRouteOutput}
     */
    createRoute(meshName, virtualRouterName, createRouteRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRouteRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling createRoute");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling createRoute");
      }
      // verify the required parameter 'createRouteRequest' is set
      if (createRouteRequest === undefined || createRouteRequest === null) {
        throw new Error("Missing the required parameter 'createRouteRequest' when calling createRoute");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRouteOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVirtualNode operation.
     * @callback module:api/DefaultApi~createVirtualNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVirtualNodeOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new virtual node within a service mesh.</p>          <p>A virtual node acts as logical pointer to a particular task group, such as an Amazon ECS          service or a Kubernetes deployment. When you create a virtual node, you must specify the          DNS service discovery name for your task group.</p>          <p>Any inbound traffic that your virtual node expects should be specified as a             <code>listener</code>. Any outbound traffic that your virtual node expects to reach          should be specified as a <code>backend</code>.</p>          <p>The response metadata for your new virtual node contains the <code>arn</code> that is          associated with the virtual node. Set this value (either the full ARN or the truncated          resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>, as the             <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy          proxy container in your task definition or pod spec. This is then mapped to the             <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>          <note>             <p>If you require your Envoy stats or tracing to use a different name, you can override             the <code>node.cluster</code> value that is set by                <code>APPMESH_VIRTUAL_NODE_NAME</code> with the                <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>          </note>
     * @param {String} meshName The name of the service mesh in which to create the virtual node.
     * @param {module:model/CreateVirtualNodeRequest} createVirtualNodeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVirtualNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVirtualNodeOutput}
     */
    createVirtualNode(meshName, createVirtualNodeRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVirtualNodeRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling createVirtualNode");
      }
      // verify the required parameter 'createVirtualNodeRequest' is set
      if (createVirtualNodeRequest === undefined || createVirtualNodeRequest === null) {
        throw new Error("Missing the required parameter 'createVirtualNodeRequest' when calling createVirtualNode");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVirtualNodeOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualNodes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVirtualRouter operation.
     * @callback module:api/DefaultApi~createVirtualRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVirtualRouterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new virtual router within a service mesh.</p>          <p>Virtual routers handle traffic for one or more service names within your mesh. After you          create your virtual router, create and associate routes for your virtual router that direct          incoming requests to different virtual nodes.</p>
     * @param {String} meshName The name of the service mesh in which to create the virtual router.
     * @param {module:model/CreateVirtualRouterRequest} createVirtualRouterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVirtualRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVirtualRouterOutput}
     */
    createVirtualRouter(meshName, createVirtualRouterRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVirtualRouterRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling createVirtualRouter");
      }
      // verify the required parameter 'createVirtualRouterRequest' is set
      if (createVirtualRouterRequest === undefined || createVirtualRouterRequest === null) {
        throw new Error("Missing the required parameter 'createVirtualRouterRequest' when calling createVirtualRouter");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVirtualRouterOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualRouters', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMesh operation.
     * @callback module:api/DefaultApi~deleteMeshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteMeshOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an existing service mesh.</p>          <p>You must delete all resources (routes, virtual routers, virtual nodes) in the service          mesh before you can delete the mesh itself.</p>
     * @param {String} meshName The name of the service mesh to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMeshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteMeshOutput}
     */
    deleteMesh(meshName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling deleteMesh");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteMeshOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoute operation.
     * @callback module:api/DefaultApi~deleteRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRouteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing route.
     * @param {String} meshName The name of the service mesh in which to delete the route.
     * @param {String} routeName The name of the route to delete.
     * @param {String} virtualRouterName The name of the virtual router in which to delete the route.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRouteOutput}
     */
    deleteRoute(meshName, routeName, virtualRouterName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling deleteRoute");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling deleteRoute");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling deleteRoute");
      }

      let pathParams = {
        'meshName': meshName,
        'routeName': routeName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteRouteOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVirtualNode operation.
     * @callback module:api/DefaultApi~deleteVirtualNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVirtualNodeOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing virtual node.
     * @param {String} meshName The name of the service mesh in which to delete the virtual node.
     * @param {String} virtualNodeName The name of the virtual node to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVirtualNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVirtualNodeOutput}
     */
    deleteVirtualNode(meshName, virtualNodeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling deleteVirtualNode");
      }
      // verify the required parameter 'virtualNodeName' is set
      if (virtualNodeName === undefined || virtualNodeName === null) {
        throw new Error("Missing the required parameter 'virtualNodeName' when calling deleteVirtualNode");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualNodeName': virtualNodeName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVirtualNodeOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualNodes/{virtualNodeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVirtualRouter operation.
     * @callback module:api/DefaultApi~deleteVirtualRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVirtualRouterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an existing virtual router.</p>          <p>You must delete any routes associated with the virtual router before you can delete the          router itself.</p>
     * @param {String} meshName The name of the service mesh in which to delete the virtual router.
     * @param {String} virtualRouterName The name of the virtual router to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVirtualRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVirtualRouterOutput}
     */
    deleteVirtualRouter(meshName, virtualRouterName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling deleteVirtualRouter");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling deleteVirtualRouter");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVirtualRouterOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualRouters/{virtualRouterName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeMesh operation.
     * @callback module:api/DefaultApi~describeMeshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeMeshOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing service mesh.
     * @param {String} meshName The name of the service mesh to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeMeshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeMeshOutput}
     */
    describeMesh(meshName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling describeMesh");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeMeshOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRoute operation.
     * @callback module:api/DefaultApi~describeRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRouteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing route.
     * @param {String} meshName The name of the service mesh in which the route resides.
     * @param {String} routeName The name of the route to describe.
     * @param {String} virtualRouterName The name of the virtual router with which the route is associated.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRouteOutput}
     */
    describeRoute(meshName, routeName, virtualRouterName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling describeRoute");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling describeRoute");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling describeRoute");
      }

      let pathParams = {
        'meshName': meshName,
        'routeName': routeName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeRouteOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVirtualNode operation.
     * @callback module:api/DefaultApi~describeVirtualNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVirtualNodeOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing virtual node.
     * @param {String} meshName The name of the service mesh in which the virtual node resides.
     * @param {String} virtualNodeName The name of the virtual node to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeVirtualNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVirtualNodeOutput}
     */
    describeVirtualNode(meshName, virtualNodeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling describeVirtualNode");
      }
      // verify the required parameter 'virtualNodeName' is set
      if (virtualNodeName === undefined || virtualNodeName === null) {
        throw new Error("Missing the required parameter 'virtualNodeName' when calling describeVirtualNode");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualNodeName': virtualNodeName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeVirtualNodeOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualNodes/{virtualNodeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVirtualRouter operation.
     * @callback module:api/DefaultApi~describeVirtualRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVirtualRouterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing virtual router.
     * @param {String} meshName The name of the service mesh in which the virtual router resides.
     * @param {String} virtualRouterName The name of the virtual router to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeVirtualRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVirtualRouterOutput}
     */
    describeVirtualRouter(meshName, virtualRouterName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling describeVirtualRouter");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling describeVirtualRouter");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeVirtualRouterOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualRouters/{virtualRouterName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMeshes operation.
     * @callback module:api/DefaultApi~listMeshesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMeshesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing service meshes.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] The maximum number of mesh results returned by <code>ListMeshes</code> in paginated          output. When this parameter is used, <code>ListMeshes</code> only returns             <code>limit</code> results in a single page along with a <code>nextToken</code> response          element. The remaining results of the initial request can be seen by sending another             <code>ListMeshes</code> request with the returned <code>nextToken</code> value. This          value can be between 1 and 100. If this parameter is not          used, then <code>ListMeshes</code> returns up to 100 results and a             <code>nextToken</code> value if applicable.
     * @param {String} [nextToken] <p>The <code>nextToken</code> value returned from a previous paginated          <code>ListMeshes</code> request where <code>limit</code> was used and the          results exceeded the value of that parameter. Pagination continues from the end of the          previous results that returned the <code>nextToken</code> value.</p>          <note>             <p>This token should be treated as an opaque identifier that is only used to                 retrieve the next items in a list and not for other programmatic purposes.</p>         </note>
     * @param {module:api/DefaultApi~listMeshesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMeshesOutput}
     */
    listMeshes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMeshesOutput;
      return this.apiClient.callApi(
        '/meshes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoutes operation.
     * @callback module:api/DefaultApi~listRoutesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRoutesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing routes in a service mesh.
     * @param {String} meshName The name of the service mesh in which to list routes.
     * @param {String} virtualRouterName The name of the virtual router in which to list routes.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] The maximum number of mesh results returned by <code>ListRoutes</code> in paginated          output. When this parameter is used, <code>ListRoutes</code> only returns             <code>limit</code> results in a single page along with a <code>nextToken</code> response          element. The remaining results of the initial request can be seen by sending another             <code>ListRoutes</code> request with the returned <code>nextToken</code> value. This          value can be between 1 and 100. If this parameter is not          used, then <code>ListRoutes</code> returns up to 100 results and a             <code>nextToken</code> value if applicable.
     * @param {String} [nextToken] The <code>nextToken</code> value returned from a previous paginated          <code>ListRoutes</code> request where <code>limit</code> was used and the          results exceeded the value of that parameter. Pagination continues from the end of the          previous results that returned the <code>nextToken</code> value.
     * @param {module:api/DefaultApi~listRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRoutesOutput}
     */
    listRoutes(meshName, virtualRouterName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling listRoutes");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling listRoutes");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
        'limit': opts['limit'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRoutesOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVirtualNodes operation.
     * @callback module:api/DefaultApi~listVirtualNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVirtualNodesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing virtual nodes.
     * @param {String} meshName The name of the service mesh in which to list virtual nodes.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] The maximum number of mesh results returned by <code>ListVirtualNodes</code> in          paginated output. When this parameter is used, <code>ListVirtualNodes</code> only returns          <code>limit</code> results in a single page along with a <code>nextToken</code>          response element. The remaining results of the initial request can be seen by sending          another <code>ListVirtualNodes</code> request with the returned <code>nextToken</code>          value. This value can be between 1 and 100. If this          parameter is not used, then <code>ListVirtualNodes</code> returns up to          100 results and a <code>nextToken</code> value if applicable.
     * @param {String} [nextToken] The <code>nextToken</code> value returned from a previous paginated          <code>ListVirtualNodes</code> request where <code>limit</code> was used and the          results exceeded the value of that parameter. Pagination continues from the end of the          previous results that returned the <code>nextToken</code> value.
     * @param {module:api/DefaultApi~listVirtualNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVirtualNodesOutput}
     */
    listVirtualNodes(meshName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling listVirtualNodes");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
        'limit': opts['limit'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVirtualNodesOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualNodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVirtualRouters operation.
     * @callback module:api/DefaultApi~listVirtualRoutersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVirtualRoutersOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing virtual routers in a service mesh.
     * @param {String} meshName The name of the service mesh in which to list virtual routers.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] The maximum number of mesh results returned by <code>ListVirtualRouters</code> in          paginated output. When this parameter is used, <code>ListVirtualRouters</code> only returns          <code>limit</code> results in a single page along with a <code>nextToken</code>          response element. The remaining results of the initial request can be seen by sending          another <code>ListVirtualRouters</code> request with the returned <code>nextToken</code>          value. This value can be between 1 and 100. If this          parameter is not used, then <code>ListVirtualRouters</code> returns up to          100 results and a <code>nextToken</code> value if applicable.
     * @param {String} [nextToken] The <code>nextToken</code> value returned from a previous paginated          <code>ListVirtualRouters</code> request where <code>limit</code> was used and the          results exceeded the value of that parameter. Pagination continues from the end of the          previous results that returned the <code>nextToken</code> value.
     * @param {module:api/DefaultApi~listVirtualRoutersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVirtualRoutersOutput}
     */
    listVirtualRouters(meshName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling listVirtualRouters");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
        'limit': opts['limit'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVirtualRoutersOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualRouters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoute operation.
     * @callback module:api/DefaultApi~updateRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRouteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing route for a specified service mesh and virtual router.
     * @param {String} meshName The name of the service mesh in which the route resides.
     * @param {String} routeName The name of the route to update.
     * @param {String} virtualRouterName The name of the virtual router with which the route is associated.
     * @param {module:model/UpdateRouteRequest} updateRouteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRouteOutput}
     */
    updateRoute(meshName, routeName, virtualRouterName, updateRouteRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRouteRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling updateRoute");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling updateRoute");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling updateRoute");
      }
      // verify the required parameter 'updateRouteRequest' is set
      if (updateRouteRequest === undefined || updateRouteRequest === null) {
        throw new Error("Missing the required parameter 'updateRouteRequest' when calling updateRoute");
      }

      let pathParams = {
        'meshName': meshName,
        'routeName': routeName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRouteOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVirtualNode operation.
     * @callback module:api/DefaultApi~updateVirtualNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVirtualNodeOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing virtual node in a specified service mesh.
     * @param {String} meshName The name of the service mesh in which the virtual node resides.
     * @param {String} virtualNodeName The name of the virtual node to update.
     * @param {module:model/UpdateVirtualNodeRequest} updateVirtualNodeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVirtualNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVirtualNodeOutput}
     */
    updateVirtualNode(meshName, virtualNodeName, updateVirtualNodeRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVirtualNodeRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling updateVirtualNode");
      }
      // verify the required parameter 'virtualNodeName' is set
      if (virtualNodeName === undefined || virtualNodeName === null) {
        throw new Error("Missing the required parameter 'virtualNodeName' when calling updateVirtualNode");
      }
      // verify the required parameter 'updateVirtualNodeRequest' is set
      if (updateVirtualNodeRequest === undefined || updateVirtualNodeRequest === null) {
        throw new Error("Missing the required parameter 'updateVirtualNodeRequest' when calling updateVirtualNode");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualNodeName': virtualNodeName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVirtualNodeOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualNodes/{virtualNodeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVirtualRouter operation.
     * @callback module:api/DefaultApi~updateVirtualRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVirtualRouterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing virtual router in a specified service mesh.
     * @param {String} meshName The name of the service mesh in which the virtual router resides.
     * @param {String} virtualRouterName The name of the virtual router to update.
     * @param {module:model/UpdateVirtualRouterRequest} updateVirtualRouterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVirtualRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVirtualRouterOutput}
     */
    updateVirtualRouter(meshName, virtualRouterName, updateVirtualRouterRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVirtualRouterRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling updateVirtualRouter");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling updateVirtualRouter");
      }
      // verify the required parameter 'updateVirtualRouterRequest' is set
      if (updateVirtualRouterRequest === undefined || updateVirtualRouterRequest === null) {
        throw new Error("Missing the required parameter 'updateVirtualRouterRequest' when calling updateVirtualRouter");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVirtualRouterOutput;
      return this.apiClient.callApi(
        '/meshes/{meshName}/virtualRouters/{virtualRouterName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
