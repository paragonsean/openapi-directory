/**
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsAppMesh);
  }
}(this, function(expect, AwsAppMesh) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsAppMesh.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createMesh', function() {
      it('should call createMesh successfully', function(done) {
        //uncomment below and update the code to test createMesh
        //instance.createMesh(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRoute', function() {
      it('should call createRoute successfully', function(done) {
        //uncomment below and update the code to test createRoute
        //instance.createRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVirtualNode', function() {
      it('should call createVirtualNode successfully', function(done) {
        //uncomment below and update the code to test createVirtualNode
        //instance.createVirtualNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVirtualRouter', function() {
      it('should call createVirtualRouter successfully', function(done) {
        //uncomment below and update the code to test createVirtualRouter
        //instance.createVirtualRouter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMesh', function() {
      it('should call deleteMesh successfully', function(done) {
        //uncomment below and update the code to test deleteMesh
        //instance.deleteMesh(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRoute', function() {
      it('should call deleteRoute successfully', function(done) {
        //uncomment below and update the code to test deleteRoute
        //instance.deleteRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVirtualNode', function() {
      it('should call deleteVirtualNode successfully', function(done) {
        //uncomment below and update the code to test deleteVirtualNode
        //instance.deleteVirtualNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVirtualRouter', function() {
      it('should call deleteVirtualRouter successfully', function(done) {
        //uncomment below and update the code to test deleteVirtualRouter
        //instance.deleteVirtualRouter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMesh', function() {
      it('should call describeMesh successfully', function(done) {
        //uncomment below and update the code to test describeMesh
        //instance.describeMesh(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRoute', function() {
      it('should call describeRoute successfully', function(done) {
        //uncomment below and update the code to test describeRoute
        //instance.describeRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVirtualNode', function() {
      it('should call describeVirtualNode successfully', function(done) {
        //uncomment below and update the code to test describeVirtualNode
        //instance.describeVirtualNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVirtualRouter', function() {
      it('should call describeVirtualRouter successfully', function(done) {
        //uncomment below and update the code to test describeVirtualRouter
        //instance.describeVirtualRouter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMeshes', function() {
      it('should call listMeshes successfully', function(done) {
        //uncomment below and update the code to test listMeshes
        //instance.listMeshes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRoutes', function() {
      it('should call listRoutes successfully', function(done) {
        //uncomment below and update the code to test listRoutes
        //instance.listRoutes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVirtualNodes', function() {
      it('should call listVirtualNodes successfully', function(done) {
        //uncomment below and update the code to test listVirtualNodes
        //instance.listVirtualNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVirtualRouters', function() {
      it('should call listVirtualRouters successfully', function(done) {
        //uncomment below and update the code to test listVirtualRouters
        //instance.listVirtualRouters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoute', function() {
      it('should call updateRoute successfully', function(done) {
        //uncomment below and update the code to test updateRoute
        //instance.updateRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVirtualNode', function() {
      it('should call updateVirtualNode successfully', function(done) {
        //uncomment below and update the code to test updateVirtualNode
        //instance.updateVirtualNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVirtualRouter', function() {
      it('should call updateVirtualRouter successfully', function(done) {
        //uncomment below and update the code to test updateVirtualRouter
        //instance.updateVirtualRouter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
