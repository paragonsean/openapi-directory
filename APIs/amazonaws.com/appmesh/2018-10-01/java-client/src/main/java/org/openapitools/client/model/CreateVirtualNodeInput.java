/*
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateVirtualNodeInputSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:06:57.155098-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateVirtualNodeInput {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_SPEC = "spec";
  @SerializedName(SERIALIZED_NAME_SPEC)
  private CreateVirtualNodeInputSpec spec;

  public static final String SERIALIZED_NAME_VIRTUAL_NODE_NAME = "virtualNodeName";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NODE_NAME)
  private String virtualNodeName;

  public CreateVirtualNodeInput() {
  }

  public CreateVirtualNodeInput clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateVirtualNodeInput spec(CreateVirtualNodeInputSpec spec) {
    this.spec = spec;
    return this;
  }

  /**
   * Get spec
   * @return spec
   */
  @javax.annotation.Nonnull
  public CreateVirtualNodeInputSpec getSpec() {
    return spec;
  }

  public void setSpec(CreateVirtualNodeInputSpec spec) {
    this.spec = spec;
  }


  public CreateVirtualNodeInput virtualNodeName(String virtualNodeName) {
    this.virtualNodeName = virtualNodeName;
    return this;
  }

  /**
   * Get virtualNodeName
   * @return virtualNodeName
   */
  @javax.annotation.Nonnull
  public String getVirtualNodeName() {
    return virtualNodeName;
  }

  public void setVirtualNodeName(String virtualNodeName) {
    this.virtualNodeName = virtualNodeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateVirtualNodeInput createVirtualNodeInput = (CreateVirtualNodeInput) o;
    return Objects.equals(this.clientToken, createVirtualNodeInput.clientToken) &&
        Objects.equals(this.spec, createVirtualNodeInput.spec) &&
        Objects.equals(this.virtualNodeName, createVirtualNodeInput.virtualNodeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, spec, virtualNodeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateVirtualNodeInput {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    spec: ").append(toIndentedString(spec)).append("\n");
    sb.append("    virtualNodeName: ").append(toIndentedString(virtualNodeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("spec");
    openapiFields.add("virtualNodeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("spec");
    openapiRequiredFields.add("virtualNodeName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateVirtualNodeInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateVirtualNodeInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateVirtualNodeInput is not found in the empty JSON string", CreateVirtualNodeInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateVirtualNodeInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateVirtualNodeInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateVirtualNodeInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clientToken`
      if (jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clientToken"));
      }
      // validate the required field `spec`
      CreateVirtualNodeInputSpec.validateJsonElement(jsonObj.get("spec"));
      // validate the required field `virtualNodeName`
      String.validateJsonElement(jsonObj.get("virtualNodeName"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateVirtualNodeInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateVirtualNodeInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateVirtualNodeInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateVirtualNodeInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateVirtualNodeInput>() {
           @Override
           public void write(JsonWriter out, CreateVirtualNodeInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateVirtualNodeInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateVirtualNodeInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateVirtualNodeInput
   * @throws IOException if the JSON string is invalid with respect to CreateVirtualNodeInput
   */
  public static CreateVirtualNodeInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateVirtualNodeInput.class);
  }

  /**
   * Convert an instance of CreateVirtualNodeInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

