/*
 * AWS App Mesh
 * <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and          control containerized microservices. App Mesh standardizes how your microservices          communicate, giving you end-to-end visibility and helping to ensure high-availability for          your applications.</p>          <p>App Mesh gives you consistent visibility and network traffic controls for every          microservice in an application. You can use App Mesh with Amazon ECS          (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>          <note>             <p>App Mesh supports containerized microservice applications that use service discovery             naming for their components. To use App Mesh, you must have a containerized application             running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For             more information about service discovery on Amazon ECS, see <a href=\"http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the                <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.             For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS                for Services and Pods</a> in the Kubernetes documentation.</p>          </note>
 *
 * The version of the OpenAPI document: 2018-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateMeshOutput;
import org.openapitools.client.model.CreateMeshRequest;
import org.openapitools.client.model.CreateRouteOutput;
import org.openapitools.client.model.CreateRouteRequest;
import org.openapitools.client.model.CreateVirtualNodeOutput;
import org.openapitools.client.model.CreateVirtualNodeRequest;
import org.openapitools.client.model.CreateVirtualRouterOutput;
import org.openapitools.client.model.CreateVirtualRouterRequest;
import org.openapitools.client.model.DeleteMeshOutput;
import org.openapitools.client.model.DeleteRouteOutput;
import org.openapitools.client.model.DeleteVirtualNodeOutput;
import org.openapitools.client.model.DeleteVirtualRouterOutput;
import org.openapitools.client.model.DescribeMeshOutput;
import org.openapitools.client.model.DescribeRouteOutput;
import org.openapitools.client.model.DescribeVirtualNodeOutput;
import org.openapitools.client.model.DescribeVirtualRouterOutput;
import org.openapitools.client.model.ListMeshesOutput;
import org.openapitools.client.model.ListRoutesOutput;
import org.openapitools.client.model.ListVirtualNodesOutput;
import org.openapitools.client.model.ListVirtualRoutersOutput;
import org.openapitools.client.model.UpdateRouteOutput;
import org.openapitools.client.model.UpdateRouteRequest;
import org.openapitools.client.model.UpdateVirtualNodeOutput;
import org.openapitools.client.model.UpdateVirtualNodeRequest;
import org.openapitools.client.model.UpdateVirtualRouterOutput;
import org.openapitools.client.model.UpdateVirtualRouterRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Creates a new service mesh. A service mesh is a logical boundary for network traffic          between the services that reside within it.&lt;/p&gt;          &lt;p&gt;After you create your service mesh, you can create virtual nodes, virtual routers, and          routes to distribute traffic between the applications in your mesh.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMeshTest() throws ApiException {
        CreateMeshRequest createMeshRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMeshOutput response = api.createMesh(createMeshRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new route that is associated with a virtual router.&lt;/p&gt;          &lt;p&gt;You can use the &lt;code&gt;prefix&lt;/code&gt; parameter in your route specification for path-based          routing of requests. For example, if your virtual router service name is             &lt;code&gt;my-service.local&lt;/code&gt;, and you want the route to match requests to             &lt;code&gt;my-service.local/metrics&lt;/code&gt;, then your prefix should be          &lt;code&gt;/metrics&lt;/code&gt;.&lt;/p&gt;          &lt;p&gt;If your route matches a request, you can distribute traffic to one or more target          virtual nodes with relative weighting.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRouteTest() throws ApiException {
        String meshName = null;
        String virtualRouterName = null;
        CreateRouteRequest createRouteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRouteOutput response = api.createRoute(meshName, virtualRouterName, createRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new virtual node within a service mesh.&lt;/p&gt;          &lt;p&gt;A virtual node acts as logical pointer to a particular task group, such as an Amazon ECS          service or a Kubernetes deployment. When you create a virtual node, you must specify the          DNS service discovery name for your task group.&lt;/p&gt;          &lt;p&gt;Any inbound traffic that your virtual node expects should be specified as a             &lt;code&gt;listener&lt;/code&gt;. Any outbound traffic that your virtual node expects to reach          should be specified as a &lt;code&gt;backend&lt;/code&gt;.&lt;/p&gt;          &lt;p&gt;The response metadata for your new virtual node contains the &lt;code&gt;arn&lt;/code&gt; that is          associated with the virtual node. Set this value (either the full ARN or the truncated          resource name, for example, &lt;code&gt;mesh/default/virtualNode/simpleapp&lt;/code&gt;, as the             &lt;code&gt;APPMESH_VIRTUAL_NODE_NAME&lt;/code&gt; environment variable for your task group&#39;s Envoy          proxy container in your task definition or pod spec. This is then mapped to the             &lt;code&gt;node.id&lt;/code&gt; and &lt;code&gt;node.cluster&lt;/code&gt; Envoy parameters.&lt;/p&gt;          &lt;note&gt;             &lt;p&gt;If you require your Envoy stats or tracing to use a different name, you can override             the &lt;code&gt;node.cluster&lt;/code&gt; value that is set by                &lt;code&gt;APPMESH_VIRTUAL_NODE_NAME&lt;/code&gt; with the                &lt;code&gt;APPMESH_VIRTUAL_NODE_CLUSTER&lt;/code&gt; environment variable.&lt;/p&gt;          &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVirtualNodeTest() throws ApiException {
        String meshName = null;
        CreateVirtualNodeRequest createVirtualNodeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateVirtualNodeOutput response = api.createVirtualNode(meshName, createVirtualNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new virtual router within a service mesh.&lt;/p&gt;          &lt;p&gt;Virtual routers handle traffic for one or more service names within your mesh. After you          create your virtual router, create and associate routes for your virtual router that direct          incoming requests to different virtual nodes.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVirtualRouterTest() throws ApiException {
        String meshName = null;
        CreateVirtualRouterRequest createVirtualRouterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateVirtualRouterOutput response = api.createVirtualRouter(meshName, createVirtualRouterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an existing service mesh.&lt;/p&gt;          &lt;p&gt;You must delete all resources (routes, virtual routers, virtual nodes) in the service          mesh before you can delete the mesh itself.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMeshTest() throws ApiException {
        String meshName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteMeshOutput response = api.deleteMesh(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRouteTest() throws ApiException {
        String meshName = null;
        String routeName = null;
        String virtualRouterName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRouteOutput response = api.deleteRoute(meshName, routeName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing virtual node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVirtualNodeTest() throws ApiException {
        String meshName = null;
        String virtualNodeName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteVirtualNodeOutput response = api.deleteVirtualNode(meshName, virtualNodeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an existing virtual router.&lt;/p&gt;          &lt;p&gt;You must delete any routes associated with the virtual router before you can delete the          router itself.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVirtualRouterTest() throws ApiException {
        String meshName = null;
        String virtualRouterName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteVirtualRouterOutput response = api.deleteVirtualRouter(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an existing service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeMeshTest() throws ApiException {
        String meshName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeMeshOutput response = api.describeMesh(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an existing route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRouteTest() throws ApiException {
        String meshName = null;
        String routeName = null;
        String virtualRouterName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRouteOutput response = api.describeRoute(meshName, routeName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an existing virtual node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVirtualNodeTest() throws ApiException {
        String meshName = null;
        String virtualNodeName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeVirtualNodeOutput response = api.describeVirtualNode(meshName, virtualNodeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an existing virtual router.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVirtualRouterTest() throws ApiException {
        String meshName = null;
        String virtualRouterName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeVirtualRouterOutput response = api.describeVirtualRouter(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of existing service meshes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMeshesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String nextToken = null;
        ListMeshesOutput response = api.listMeshes(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of existing routes in a service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRoutesTest() throws ApiException {
        String meshName = null;
        String virtualRouterName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String nextToken = null;
        ListRoutesOutput response = api.listRoutes(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of existing virtual nodes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVirtualNodesTest() throws ApiException {
        String meshName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String nextToken = null;
        ListVirtualNodesOutput response = api.listVirtualNodes(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of existing virtual routers in a service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVirtualRoutersTest() throws ApiException {
        String meshName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String nextToken = null;
        ListVirtualRoutersOutput response = api.listVirtualRouters(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * Updates an existing route for a specified service mesh and virtual router.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRouteTest() throws ApiException {
        String meshName = null;
        String routeName = null;
        String virtualRouterName = null;
        UpdateRouteRequest updateRouteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRouteOutput response = api.updateRoute(meshName, routeName, virtualRouterName, updateRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing virtual node in a specified service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVirtualNodeTest() throws ApiException {
        String meshName = null;
        String virtualNodeName = null;
        UpdateVirtualNodeRequest updateVirtualNodeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateVirtualNodeOutput response = api.updateVirtualNode(meshName, virtualNodeName, updateVirtualNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing virtual router in a specified service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVirtualRouterTest() throws ApiException {
        String meshName = null;
        String virtualRouterName = null;
        UpdateVirtualRouterRequest updateVirtualRouterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateVirtualRouterOutput response = api.updateVirtualRouter(meshName, virtualRouterName, updateVirtualRouterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
