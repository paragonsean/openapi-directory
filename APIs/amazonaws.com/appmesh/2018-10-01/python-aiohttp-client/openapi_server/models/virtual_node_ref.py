# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualNodeRef(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, mesh_name: str=None, virtual_node_name: str=None):
        """VirtualNodeRef - a model defined in OpenAPI

        :param arn: The arn of this VirtualNodeRef.
        :param mesh_name: The mesh_name of this VirtualNodeRef.
        :param virtual_node_name: The virtual_node_name of this VirtualNodeRef.
        """
        self.openapi_types = {
            'arn': str,
            'mesh_name': str,
            'virtual_node_name': str
        }

        self.attribute_map = {
            'arn': 'arn',
            'mesh_name': 'meshName',
            'virtual_node_name': 'virtualNodeName'
        }

        self._arn = arn
        self._mesh_name = mesh_name
        self._virtual_node_name = virtual_node_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualNodeRef':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualNodeRef of this VirtualNodeRef.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this VirtualNodeRef.


        :return: The arn of this VirtualNodeRef.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this VirtualNodeRef.


        :param arn: The arn of this VirtualNodeRef.
        :type arn: str
        """

        self._arn = arn

    @property
    def mesh_name(self):
        """Gets the mesh_name of this VirtualNodeRef.


        :return: The mesh_name of this VirtualNodeRef.
        :rtype: str
        """
        return self._mesh_name

    @mesh_name.setter
    def mesh_name(self, mesh_name):
        """Sets the mesh_name of this VirtualNodeRef.


        :param mesh_name: The mesh_name of this VirtualNodeRef.
        :type mesh_name: str
        """

        self._mesh_name = mesh_name

    @property
    def virtual_node_name(self):
        """Gets the virtual_node_name of this VirtualNodeRef.


        :return: The virtual_node_name of this VirtualNodeRef.
        :rtype: str
        """
        return self._virtual_node_name

    @virtual_node_name.setter
    def virtual_node_name(self, virtual_node_name):
        """Sets the virtual_node_name of this VirtualNodeRef.


        :param virtual_node_name: The virtual_node_name of this VirtualNodeRef.
        :type virtual_node_name: str
        """

        self._virtual_node_name = virtual_node_name
