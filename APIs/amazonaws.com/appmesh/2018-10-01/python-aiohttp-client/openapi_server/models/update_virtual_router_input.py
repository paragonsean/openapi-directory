# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_virtual_router_input_spec import UpdateVirtualRouterInputSpec
from openapi_server import util


class UpdateVirtualRouterInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, spec: UpdateVirtualRouterInputSpec=None):
        """UpdateVirtualRouterInput - a model defined in OpenAPI

        :param client_token: The client_token of this UpdateVirtualRouterInput.
        :param spec: The spec of this UpdateVirtualRouterInput.
        """
        self.openapi_types = {
            'client_token': str,
            'spec': UpdateVirtualRouterInputSpec
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'spec': 'spec'
        }

        self._client_token = client_token
        self._spec = spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateVirtualRouterInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateVirtualRouterInput of this UpdateVirtualRouterInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this UpdateVirtualRouterInput.


        :return: The client_token of this UpdateVirtualRouterInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateVirtualRouterInput.


        :param client_token: The client_token of this UpdateVirtualRouterInput.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def spec(self):
        """Gets the spec of this UpdateVirtualRouterInput.


        :return: The spec of this UpdateVirtualRouterInput.
        :rtype: UpdateVirtualRouterInputSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this UpdateVirtualRouterInput.


        :param spec: The spec of this UpdateVirtualRouterInput.
        :type spec: UpdateVirtualRouterInputSpec
        """
        if spec is None:
            raise ValueError("Invalid value for `spec`, must not be `None`")

        self._spec = spec
