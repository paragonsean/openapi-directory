# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateMeshRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, mesh_name: str=None):
        """CreateMeshRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateMeshRequest.
        :param mesh_name: The mesh_name of this CreateMeshRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'mesh_name': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'mesh_name': 'meshName'
        }

        self._client_token = client_token
        self._mesh_name = mesh_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMeshRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMesh_request of this CreateMeshRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateMeshRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

        :return: The client_token of this CreateMeshRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateMeshRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

        :param client_token: The client_token of this CreateMeshRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def mesh_name(self):
        """Gets the mesh_name of this CreateMeshRequest.

        The name to use for the service mesh.

        :return: The mesh_name of this CreateMeshRequest.
        :rtype: str
        """
        return self._mesh_name

    @mesh_name.setter
    def mesh_name(self, mesh_name):
        """Sets the mesh_name of this CreateMeshRequest.

        The name to use for the service mesh.

        :param mesh_name: The mesh_name of this CreateMeshRequest.
        :type mesh_name: str
        """
        if mesh_name is None:
            raise ValueError("Invalid value for `mesh_name`, must not be `None`")
        if mesh_name is not None and len(mesh_name) > 255:
            raise ValueError("Invalid value for `mesh_name`, length must be less than or equal to `255`")
        if mesh_name is not None and len(mesh_name) < 1:
            raise ValueError("Invalid value for `mesh_name`, length must be greater than or equal to `1`")

        self._mesh_name = mesh_name
