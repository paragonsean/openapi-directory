# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.port_protocol import PortProtocol
from openapi_server import util


class ListenerHealthCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, healthy_threshold: int=None, interval_millis: int=None, path: str=None, port: int=None, protocol: PortProtocol=None, timeout_millis: int=None, unhealthy_threshold: int=None):
        """ListenerHealthCheck - a model defined in OpenAPI

        :param healthy_threshold: The healthy_threshold of this ListenerHealthCheck.
        :param interval_millis: The interval_millis of this ListenerHealthCheck.
        :param path: The path of this ListenerHealthCheck.
        :param port: The port of this ListenerHealthCheck.
        :param protocol: The protocol of this ListenerHealthCheck.
        :param timeout_millis: The timeout_millis of this ListenerHealthCheck.
        :param unhealthy_threshold: The unhealthy_threshold of this ListenerHealthCheck.
        """
        self.openapi_types = {
            'healthy_threshold': int,
            'interval_millis': int,
            'path': str,
            'port': int,
            'protocol': PortProtocol,
            'timeout_millis': int,
            'unhealthy_threshold': int
        }

        self.attribute_map = {
            'healthy_threshold': 'healthyThreshold',
            'interval_millis': 'intervalMillis',
            'path': 'path',
            'port': 'port',
            'protocol': 'protocol',
            'timeout_millis': 'timeoutMillis',
            'unhealthy_threshold': 'unhealthyThreshold'
        }

        self._healthy_threshold = healthy_threshold
        self._interval_millis = interval_millis
        self._path = path
        self._port = port
        self._protocol = protocol
        self._timeout_millis = timeout_millis
        self._unhealthy_threshold = unhealthy_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListenerHealthCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Listener_healthCheck of this ListenerHealthCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def healthy_threshold(self):
        """Gets the healthy_threshold of this ListenerHealthCheck.


        :return: The healthy_threshold of this ListenerHealthCheck.
        :rtype: int
        """
        return self._healthy_threshold

    @healthy_threshold.setter
    def healthy_threshold(self, healthy_threshold):
        """Sets the healthy_threshold of this ListenerHealthCheck.


        :param healthy_threshold: The healthy_threshold of this ListenerHealthCheck.
        :type healthy_threshold: int
        """
        if healthy_threshold is None:
            raise ValueError("Invalid value for `healthy_threshold`, must not be `None`")

        self._healthy_threshold = healthy_threshold

    @property
    def interval_millis(self):
        """Gets the interval_millis of this ListenerHealthCheck.


        :return: The interval_millis of this ListenerHealthCheck.
        :rtype: int
        """
        return self._interval_millis

    @interval_millis.setter
    def interval_millis(self, interval_millis):
        """Sets the interval_millis of this ListenerHealthCheck.


        :param interval_millis: The interval_millis of this ListenerHealthCheck.
        :type interval_millis: int
        """
        if interval_millis is None:
            raise ValueError("Invalid value for `interval_millis`, must not be `None`")

        self._interval_millis = interval_millis

    @property
    def path(self):
        """Gets the path of this ListenerHealthCheck.


        :return: The path of this ListenerHealthCheck.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ListenerHealthCheck.


        :param path: The path of this ListenerHealthCheck.
        :type path: str
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this ListenerHealthCheck.


        :return: The port of this ListenerHealthCheck.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ListenerHealthCheck.


        :param port: The port of this ListenerHealthCheck.
        :type port: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this ListenerHealthCheck.


        :return: The protocol of this ListenerHealthCheck.
        :rtype: PortProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ListenerHealthCheck.


        :param protocol: The protocol of this ListenerHealthCheck.
        :type protocol: PortProtocol
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol

    @property
    def timeout_millis(self):
        """Gets the timeout_millis of this ListenerHealthCheck.


        :return: The timeout_millis of this ListenerHealthCheck.
        :rtype: int
        """
        return self._timeout_millis

    @timeout_millis.setter
    def timeout_millis(self, timeout_millis):
        """Sets the timeout_millis of this ListenerHealthCheck.


        :param timeout_millis: The timeout_millis of this ListenerHealthCheck.
        :type timeout_millis: int
        """
        if timeout_millis is None:
            raise ValueError("Invalid value for `timeout_millis`, must not be `None`")

        self._timeout_millis = timeout_millis

    @property
    def unhealthy_threshold(self):
        """Gets the unhealthy_threshold of this ListenerHealthCheck.


        :return: The unhealthy_threshold of this ListenerHealthCheck.
        :rtype: int
        """
        return self._unhealthy_threshold

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, unhealthy_threshold):
        """Sets the unhealthy_threshold of this ListenerHealthCheck.


        :param unhealthy_threshold: The unhealthy_threshold of this ListenerHealthCheck.
        :type unhealthy_threshold: int
        """
        if unhealthy_threshold is None:
            raise ValueError("Invalid value for `unhealthy_threshold`, must not be `None`")

        self._unhealthy_threshold = unhealthy_threshold
