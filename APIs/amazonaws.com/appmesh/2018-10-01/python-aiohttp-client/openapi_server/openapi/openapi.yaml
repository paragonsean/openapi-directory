openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: |-
    <p>AWS App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and
             control containerized microservices. App Mesh standardizes how your microservices
             communicate, giving you end-to-end visibility and helping to ensure high-availability for
             your applications.</p>
             <p>App Mesh gives you consistent visibility and network traffic controls for every
             microservice in an application. You can use App Mesh with Amazon ECS
             (using the Amazon EC2 launch type), Amazon EKS, and Kubernetes on AWS.</p>
             <note>
                <p>App Mesh supports containerized microservice applications that use service discovery
                naming for their components. To use App Mesh, you must have a containerized application
                running on Amazon EC2 instances, hosted in either Amazon ECS, Amazon EKS, or Kubernetes on AWS. For
                more information about service discovery on Amazon ECS, see <a href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html">Service Discovery</a> in the
                   <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> is supported.
                For more information, see <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/">DNS
                   for Services and Pods</a> in the Kubernetes documentation.</p>
             </note>
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: AWS App Mesh
  version: 2018-10-01
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: appmesh
  x-aws-signingName: appmesh
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2018-10-01.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: false
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/appmesh/
servers:
- description: The AWS App Mesh multi-region endpoint
  url: "http://appmesh.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AWS App Mesh multi-region endpoint
  url: "https://appmesh.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)
  url: "http://appmesh.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)
  url: "https://appmesh.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /meshes:
    get:
      description: Returns a list of existing service meshes.
      operationId: list_meshes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: |-
          The maximum number of mesh results returned by <code>ListMeshes</code> in paginated
                   output. When this parameter is used, <code>ListMeshes</code> only returns
                      <code>limit</code> results in a single page along with a <code>nextToken</code> response
                   element. The remaining results of the initial request can be seen by sending another
                      <code>ListMeshes</code> request with the returned <code>nextToken</code> value. This
                   value can be between 1 and 100. If this parameter is not
                   used, then <code>ListMeshes</code> returns up to 100 results and a
                      <code>nextToken</code> value if applicable.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          <p>The <code>nextToken</code> value returned from a previous paginated
                   <code>ListMeshes</code> request where <code>limit</code> was used and the
                   results exceeded the value of that parameter. Pagination continues from the end of the
                   previous results that returned the <code>nextToken</code> value.</p>
                   <note>
                      <p>This token should be treated as an opaque identifier that is only used to
                          retrieve the next items in a list and not for other programmatic purposes.</p>
                  </note>
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMeshesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        <p>Creates a new service mesh. A service mesh is a logical boundary for network traffic
                 between the services that reside within it.</p>
                 <p>After you create your service mesh, you can create virtual nodes, virtual routers, and
                 routes to distribute traffic between the applications in your mesh.</p>
      operationId: create_mesh
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMesh_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMeshOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /meshes/{meshName}:
    delete:
      description: |-
        <p>Deletes an existing service mesh.</p>
                 <p>You must delete all resources (routes, virtual routers, virtual nodes) in the service
                 mesh before you can delete the mesh itself.</p>
      operationId: delete_mesh
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to delete.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMeshOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Describes an existing service mesh.
      operationId: describe_mesh
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to describe.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeMeshOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
  /meshes/{meshName}/virtualNodes:
    get:
      description: Returns a list of existing virtual nodes.
      operationId: list_virtual_nodes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: |-
          The maximum number of mesh results returned by <code>ListVirtualNodes</code> in
                   paginated output. When this parameter is used, <code>ListVirtualNodes</code> only returns
                   <code>limit</code> results in a single page along with a <code>nextToken</code>
                   response element. The remaining results of the initial request can be seen by sending
                   another <code>ListVirtualNodes</code> request with the returned <code>nextToken</code>
                   value. This value can be between 1 and 100. If this
                   parameter is not used, then <code>ListVirtualNodes</code> returns up to
                   100 results and a <code>nextToken</code> value if applicable.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The name of the service mesh in which to list virtual nodes.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: |-
          The <code>nextToken</code> value returned from a previous paginated
                   <code>ListVirtualNodes</code> request where <code>limit</code> was used and the
                   results exceeded the value of that parameter. Pagination continues from the end of the
                   previous results that returned the <code>nextToken</code> value.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualNodesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        <p>Creates a new virtual node within a service mesh.</p>
                 <p>A virtual node acts as logical pointer to a particular task group, such as an Amazon ECS
                 service or a Kubernetes deployment. When you create a virtual node, you must specify the
                 DNS service discovery name for your task group.</p>
                 <p>Any inbound traffic that your virtual node expects should be specified as a
                    <code>listener</code>. Any outbound traffic that your virtual node expects to reach
                 should be specified as a <code>backend</code>.</p>
                 <p>The response metadata for your new virtual node contains the <code>arn</code> that is
                 associated with the virtual node. Set this value (either the full ARN or the truncated
                 resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>, as the
                    <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's Envoy
                 proxy container in your task definition or pod spec. This is then mapped to the
                    <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
                 <note>
                    <p>If you require your Envoy stats or tracing to use a different name, you can override
                    the <code>node.cluster</code> value that is set by
                       <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
                       <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
                 </note>
      operationId: create_virtual_node
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh in which to create the virtual node.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualNode_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualNodeOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /meshes/{meshName}/virtualNodes/{virtualNodeName}:
    delete:
      description: Deletes an existing virtual node.
      operationId: delete_virtual_node
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh in which to delete the virtual node.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual node to delete.
        explode: false
        in: path
        name: virtualNodeName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualNodeOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Describes an existing virtual node.
      operationId: describe_virtual_node
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh in which the virtual node resides.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual node to describe.
        explode: false
        in: path
        name: virtualNodeName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualNodeOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Updates an existing virtual node in a specified service mesh.
      operationId: update_virtual_node
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh in which the virtual node resides.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual node to update.
        explode: false
        in: path
        name: virtualNodeName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVirtualNode_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualNodeOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /meshes/{meshName}/virtualRouter/{virtualRouterName}/routes:
    get:
      description: Returns a list of existing routes in a service mesh.
      operationId: list_routes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: |-
          The maximum number of mesh results returned by <code>ListRoutes</code> in paginated
                   output. When this parameter is used, <code>ListRoutes</code> only returns
                      <code>limit</code> results in a single page along with a <code>nextToken</code> response
                   element. The remaining results of the initial request can be seen by sending another
                      <code>ListRoutes</code> request with the returned <code>nextToken</code> value. This
                   value can be between 1 and 100. If this parameter is not
                   used, then <code>ListRoutes</code> returns up to 100 results and a
                      <code>nextToken</code> value if applicable.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The name of the service mesh in which to list routes.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: |-
          The <code>nextToken</code> value returned from a previous paginated
                   <code>ListRoutes</code> request where <code>limit</code> was used and the
                   results exceeded the value of that parameter. Pagination continues from the end of the
                   previous results that returned the <code>nextToken</code> value.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The name of the virtual router in which to list routes.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoutesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        <p>Creates a new route that is associated with a virtual router.</p>
                 <p>You can use the <code>prefix</code> parameter in your route specification for path-based
                 routing of requests. For example, if your virtual router service name is
                    <code>my-service.local</code>, and you want the route to match requests to
                    <code>my-service.local/metrics</code>, then your prefix should be
                 <code>/metrics</code>.</p>
                 <p>If your route matches a request, you can distribute traffic to one or more target
                 virtual nodes with relative weighting.</p>
      operationId: create_route
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh in which to create the route.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual router in which to create the route.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoute_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}:
    delete:
      description: Deletes an existing route.
      operationId: delete_route
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh in which to delete the route.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the route to delete.
        explode: false
        in: path
        name: routeName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual router in which to delete the route.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRouteOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Describes an existing route.
      operationId: describe_route
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh in which the route resides.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the route to describe.
        explode: false
        in: path
        name: routeName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual router with which the route is associated.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeRouteOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Updates an existing route for a specified service mesh and virtual
        router.
      operationId: update_route
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh in which the route resides.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the route to update.
        explode: false
        in: path
        name: routeName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual router with which the route is associated.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoute_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /meshes/{meshName}/virtualRouters:
    get:
      description: Returns a list of existing virtual routers in a service mesh.
      operationId: list_virtual_routers
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: |-
          The maximum number of mesh results returned by <code>ListVirtualRouters</code> in
                   paginated output. When this parameter is used, <code>ListVirtualRouters</code> only returns
                   <code>limit</code> results in a single page along with a <code>nextToken</code>
                   response element. The remaining results of the initial request can be seen by sending
                   another <code>ListVirtualRouters</code> request with the returned <code>nextToken</code>
                   value. This value can be between 1 and 100. If this
                   parameter is not used, then <code>ListVirtualRouters</code> returns up to
                   100 results and a <code>nextToken</code> value if applicable.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The name of the service mesh in which to list virtual routers.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: |-
          The <code>nextToken</code> value returned from a previous paginated
                   <code>ListVirtualRouters</code> request where <code>limit</code> was used and the
                   results exceeded the value of that parameter. Pagination continues from the end of the
                   previous results that returned the <code>nextToken</code> value.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualRoutersOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: |-
        <p>Creates a new virtual router within a service mesh.</p>
                 <p>Virtual routers handle traffic for one or more service names within your mesh. After you
                 create your virtual router, create and associate routes for your virtual router that direct
                 incoming requests to different virtual nodes.</p>
      operationId: create_virtual_router
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh in which to create the virtual router.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualRouter_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualRouterOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
  /meshes/{meshName}/virtualRouters/{virtualRouterName}:
    delete:
      description: |-
        <p>Deletes an existing virtual router.</p>
                 <p>You must delete any routes associated with the virtual router before you can delete the
                 router itself.</p>
      operationId: delete_virtual_router
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh in which to delete the virtual router.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual router to delete.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualRouterOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    get:
      description: Describes an existing virtual router.
      operationId: describe_virtual_router
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh in which the virtual router resides.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual router to describe.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualRouterOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
    put:
      description: Updates an existing virtual router in a specified service mesh.
      operationId: update_virtual_router
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh in which the virtual router resides.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual router to update.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVirtualRouter_request'
        required: true
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualRouterOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
      x-openapi-router-controller: openapi_server.controllers.default_controller
      x-codegen-request-body-name: body
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    CreateMeshOutput:
      description: ""
      example:
        mesh:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          status:
            status: ""
      properties:
        mesh:
          $ref: '#/components/schemas/CreateMeshOutput_mesh'
      title: CreateMeshOutput
      type: object
    BadRequestException: {}
    ConflictException: {}
    ForbiddenException: {}
    InternalServerErrorException: {}
    LimitExceededException: {}
    NotFoundException: {}
    ServiceUnavailableException: {}
    TooManyRequestsException: {}
    CreateRouteOutput:
      description: ""
      example:
        route:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            httpRoute:
              match:
                prefix: ""
              action:
                weightedTargets: ""
          routeName: ""
          status:
            status: ""
      properties:
        route:
          $ref: '#/components/schemas/CreateRouteOutput_route'
      title: CreateRouteOutput
      type: object
    HttpRoute:
      description: An object representing the HTTP routing specification for a route.
      properties:
        action:
          $ref: '#/components/schemas/HttpRoute_action'
        match:
          $ref: '#/components/schemas/HttpRoute_match'
      title: HttpRoute
      type: object
    CreateVirtualNodeOutput:
      description: ""
      example:
        virtualNode:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          virtualNodeName: ""
          spec:
            listeners: ""
            serviceDiscovery:
              dns:
                serviceName: ""
            backends: ""
          status:
            status: ""
      properties:
        virtualNode:
          $ref: '#/components/schemas/CreateVirtualNodeOutput_virtualNode'
      title: CreateVirtualNodeOutput
      type: object
    Backends:
      items:
        $ref: '#/components/schemas/ServiceName'
      type: array
    Listeners:
      items:
        $ref: '#/components/schemas/Listener'
      type: array
    ServiceDiscovery:
      description: An object representing the service discovery information for a
        virtual node.
      properties:
        dns:
          $ref: '#/components/schemas/ServiceDiscovery_dns'
      title: ServiceDiscovery
      type: object
    CreateVirtualRouterOutput:
      description: ""
      example:
        virtualRouter:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            serviceNames: ""
          status:
            status: ""
      properties:
        virtualRouter:
          $ref: '#/components/schemas/CreateVirtualRouterOutput_virtualRouter'
      title: CreateVirtualRouterOutput
      type: object
    ServiceNames:
      items:
        $ref: '#/components/schemas/ServiceName'
      maxItems: 10
      type: array
    DeleteMeshOutput:
      description: ""
      example:
        mesh:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          status:
            status: ""
      properties:
        mesh:
          $ref: '#/components/schemas/DeleteMeshOutput_mesh'
      title: DeleteMeshOutput
      type: object
    ResourceInUseException: {}
    DeleteRouteOutput:
      description: ""
      example:
        route:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            httpRoute:
              match:
                prefix: ""
              action:
                weightedTargets: ""
          routeName: ""
          status:
            status: ""
      properties:
        route:
          $ref: '#/components/schemas/DeleteRouteOutput_route'
      title: DeleteRouteOutput
      type: object
    DeleteVirtualNodeOutput:
      description: ""
      example:
        virtualNode:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          virtualNodeName: ""
          spec:
            listeners: ""
            serviceDiscovery:
              dns:
                serviceName: ""
            backends: ""
          status:
            status: ""
      properties:
        virtualNode:
          $ref: '#/components/schemas/DeleteVirtualNodeOutput_virtualNode'
      title: DeleteVirtualNodeOutput
      type: object
    DeleteVirtualRouterOutput:
      description: ""
      example:
        virtualRouter:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            serviceNames: ""
          status:
            status: ""
      properties:
        virtualRouter:
          $ref: '#/components/schemas/DeleteVirtualRouterOutput_virtualRouter'
      title: DeleteVirtualRouterOutput
      type: object
    DescribeMeshOutput:
      description: ""
      example:
        mesh:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          status:
            status: ""
      properties:
        mesh:
          $ref: '#/components/schemas/DescribeMeshOutput_mesh'
      title: DescribeMeshOutput
      type: object
    DescribeRouteOutput:
      description: ""
      example:
        route:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            httpRoute:
              match:
                prefix: ""
              action:
                weightedTargets: ""
          routeName: ""
          status:
            status: ""
      properties:
        route:
          $ref: '#/components/schemas/DescribeRouteOutput_route'
      title: DescribeRouteOutput
      type: object
    DescribeVirtualNodeOutput:
      description: ""
      example:
        virtualNode:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          virtualNodeName: ""
          spec:
            listeners: ""
            serviceDiscovery:
              dns:
                serviceName: ""
            backends: ""
          status:
            status: ""
      properties:
        virtualNode:
          $ref: '#/components/schemas/DescribeVirtualNodeOutput_virtualNode'
      title: DescribeVirtualNodeOutput
      type: object
    DescribeVirtualRouterOutput:
      description: ""
      example:
        virtualRouter:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            serviceNames: ""
          status:
            status: ""
      properties:
        virtualRouter:
          $ref: '#/components/schemas/DescribeVirtualRouterOutput_virtualRouter'
      title: DescribeVirtualRouterOutput
      type: object
    ListMeshesOutput:
      description: ""
      example:
        nextToken: ""
        meshes: ""
      properties:
        meshes:
          allOf:
          - $ref: '#/components/schemas/MeshList'
          - description: The list of existing service meshes.
          title: meshes
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              The <code>nextToken</code> value to include in a future <code>ListMeshes</code>
                       request. When the results of a <code>ListMeshes</code> request exceed
                       <code>limit</code>, this value can be used to retrieve the next page of
                       results. This value is <code>null</code> when there are no more results to
                       return.
          title: nextToken
      required:
      - meshes
      title: ListMeshesOutput
      type: object
    ListRoutesOutput:
      description: ""
      example:
        routes: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              The <code>nextToken</code> value to include in a future <code>ListRoutes</code>
                       request. When the results of a <code>ListRoutes</code> request exceed
                       <code>limit</code>, this value can be used to retrieve the next page of
                       results. This value is <code>null</code> when there are no more results to
                       return.
          title: nextToken
        routes:
          allOf:
          - $ref: '#/components/schemas/RouteList'
          - description: The list of existing routes for the specified service mesh
              and virtual router.
          title: routes
      required:
      - routes
      title: ListRoutesOutput
      type: object
    ListVirtualNodesOutput:
      description: ""
      example:
        virtualNodes: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              The <code>nextToken</code> value to include in a future <code>ListVirtualNodes</code>
                       request. When the results of a <code>ListVirtualNodes</code> request exceed
                       <code>limit</code>, this value can be used to retrieve the next page of
                       results. This value is <code>null</code> when there are no more results to
                       return.
          title: nextToken
        virtualNodes:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeList'
          - description: The list of existing virtual nodes for the specified service
              mesh.
          title: virtualNodes
      required:
      - virtualNodes
      title: ListVirtualNodesOutput
      type: object
    ListVirtualRoutersOutput:
      description: ""
      example:
        nextToken: ""
        virtualRouters: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              The <code>nextToken</code> value to include in a future <code>ListVirtualRouters</code>
                       request. When the results of a <code>ListVirtualRouters</code> request exceed
                       <code>limit</code>, this value can be used to retrieve the next page of
                       results. This value is <code>null</code> when there are no more results to
                       return.
          title: nextToken
        virtualRouters:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterList'
          - description: The list of existing virtual routers for the specified service
              mesh.
          title: virtualRouters
      required:
      - virtualRouters
      title: ListVirtualRoutersOutput
      type: object
    UpdateRouteOutput:
      description: ""
      example:
        route:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            httpRoute:
              match:
                prefix: ""
              action:
                weightedTargets: ""
          routeName: ""
          status:
            status: ""
      properties:
        route:
          $ref: '#/components/schemas/UpdateRouteOutput_route'
      title: UpdateRouteOutput
      type: object
    UpdateVirtualNodeOutput:
      description: ""
      example:
        virtualNode:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          virtualNodeName: ""
          spec:
            listeners: ""
            serviceDiscovery:
              dns:
                serviceName: ""
            backends: ""
          status:
            status: ""
      properties:
        virtualNode:
          $ref: '#/components/schemas/UpdateVirtualNodeOutput_virtualNode'
      title: UpdateVirtualNodeOutput
      type: object
    UpdateVirtualRouterOutput:
      description: ""
      example:
        virtualRouter:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            serviceNames: ""
          status:
            status: ""
      properties:
        virtualRouter:
          $ref: '#/components/schemas/UpdateVirtualRouterOutput_virtualRouter'
      title: UpdateVirtualRouterOutput
      type: object
    ServiceName:
      title: ServiceName
      type: string
    HealthCheckThreshold:
      maximum: 10
      minimum: 2
      type: integer
    MeshData:
      description: An object representing a service mesh returned by a describe operation.
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh.
          title: meshName
        metadata:
          $ref: '#/components/schemas/MeshData_metadata'
        status:
          $ref: '#/components/schemas/MeshData_status'
      required:
      - meshName
      - metadata
      title: MeshData
      type: object
    Long:
      type: integer
    VirtualRouterData:
      description: An object representing a virtual router returned by a describe
        operation.
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh in which the virtual router
              resides.
          title: meshName
        metadata:
          $ref: '#/components/schemas/VirtualRouterData_metadata'
        spec:
          $ref: '#/components/schemas/VirtualRouterData_spec'
        status:
          $ref: '#/components/schemas/VirtualRouterData_status'
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the virtual router.
          title: virtualRouterName
      required:
      - meshName
      - virtualRouterName
      title: VirtualRouterData
      type: object
    MeshStatusCode:
      enum:
      - ACTIVE
      - DELETED
      - INACTIVE
      title: MeshStatusCode
      type: string
    PortNumber:
      maximum: 65535
      minimum: 1
      type: integer
    ResourceName:
      maxLength: 255
      minLength: 1
      type: string
    PercentInt:
      maximum: 100
      minimum: 0
      type: integer
    WeightedTarget:
      description: |-
        An object representing a target and its relative weight. Traffic is distributed across
                 targets according to their relative weight. For example, a weighted target with a relative
                 weight of 50 receives five times as much traffic as one with a relative weight of
                 10.
      properties:
        virtualNode:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The virtual node to associate with the weighted target.
          title: virtualNode
        weight:
          allOf:
          - $ref: '#/components/schemas/PercentInt'
          - description: The relative weight of the weighted target.
          title: weight
      title: WeightedTarget
      type: object
    VirtualNodeRef:
      description: An object representing a virtual node returned by a list operation.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The full Amazon Resource Name (ARN) for the virtual node.
          title: arn
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh in which the virtual node resides.
          title: meshName
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the virtual node.
          title: virtualNodeName
      title: VirtualNodeRef
      type: object
    VirtualNodeList:
      items:
        $ref: '#/components/schemas/VirtualNodeRef'
      type: array
    RouteData:
      description: An object representing a route returned by a describe operation.
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh in which the route resides.
          title: meshName
        metadata:
          $ref: '#/components/schemas/RouteData_metadata'
        routeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the route.
          title: routeName
        spec:
          $ref: '#/components/schemas/RouteData_spec'
        status:
          $ref: '#/components/schemas/RouteData_status'
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The virtual router with which the route is associated.
          title: virtualRouterName
      required:
      - meshName
      - routeName
      - virtualRouterName
      title: RouteData
      type: object
    RouteRef:
      description: An object representing a route returned by a list operation.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The full Amazon Resource Name (ARN) for the route.
          title: arn
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh in which the route resides.
          title: meshName
        routeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the route.
          title: routeName
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The virtual router with which the route is associated.
          title: virtualRouterName
      title: RouteRef
      type: object
    RouteList:
      items:
        $ref: '#/components/schemas/RouteRef'
      type: array
    DeleteVirtualNodeInput:
      description: ""
      properties: {}
      title: DeleteVirtualNodeInput
      type: object
    ListVirtualRoutersLimit:
      maximum: 100
      minimum: 1
      type: integer
    DnsServiceDiscovery:
      description: The DNS service discovery information for your virtual node.
      properties:
        serviceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          - description: The DNS service name for your virtual node.
          title: serviceName
      title: DnsServiceDiscovery
      type: object
    HealthCheckIntervalMillis:
      maximum: 300000
      minimum: 5000
      type: integer
    Arn:
      type: string
    MeshStatus:
      description: An object representing the status of a service mesh.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/MeshStatusCode'
          - description: The current mesh status.
          title: status
      title: MeshStatus
      type: object
    ResourceMetadata:
      description: An object representing metadata for a resource.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: |-
              <p>The full Amazon Resource Name (ARN) for the resource.</p>
                       <note>
                          <p>After you create a virtual node, set this value (either the full ARN or the
                          truncated resource name, for example, <code>mesh/default/virtualNode/simpleapp</code>,
                          as the <code>APPMESH_VIRTUAL_NODE_NAME</code> environment variable for your task group's
                          Envoy proxy container in your task definition or pod spec. This is then mapped to the
                             <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
                          <p>If you require your Envoy stats or tracing to use a different name, you can override
                          the <code>node.cluster</code> value that is set by
                             <code>APPMESH_VIRTUAL_NODE_NAME</code> with the
                             <code>APPMESH_VIRTUAL_NODE_CLUSTER</code> environment variable.</p>
                       </note>
          title: arn
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was created.
          title: createdAt
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was last updated.
          title: lastUpdatedAt
        uid:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The unique identifier for the resource.
          title: uid
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: |-
              The version of the resource. Resources are created at version 1, and this version is
                       incremented each time they are updated.
          title: version
      title: ResourceMetadata
      type: object
    VirtualNodeSpec:
      description: An object representing the specification of a virtual node.
      properties:
        backends:
          allOf:
          - $ref: '#/components/schemas/Backends'
          - description: The backends to which the virtual node is expected to send
              outbound traffic.
          title: backends
        listeners:
          allOf:
          - $ref: '#/components/schemas/Listeners'
          - description: The listeners from which the virtual node is expected to
              receive inbound traffic.
          title: listeners
        serviceDiscovery:
          $ref: '#/components/schemas/CreateVirtualNode_request_spec_serviceDiscovery'
      title: VirtualNodeSpec
      type: object
    VirtualNodeStatus:
      description: An object representing the current status of the virtual node.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeStatusCode'
          - description: The current status of the virtual node.
          title: status
      title: VirtualNodeStatus
      type: object
    VirtualNodeData:
      description: An object representing a virtual node returned by a describe operation.
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh in which the virtual node resides.
          title: meshName
        metadata:
          $ref: '#/components/schemas/VirtualNodeData_metadata'
        spec:
          $ref: '#/components/schemas/VirtualNodeData_spec'
        status:
          $ref: '#/components/schemas/VirtualNodeData_status'
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the virtual node.
          title: virtualNodeName
      required:
      - meshName
      - virtualNodeName
      title: VirtualNodeData
      type: object
    MeshRef:
      description: An object representing a service mesh returned by a list operation.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The full Amazon Resource Name (ARN) of the service mesh.
          title: arn
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh.
          title: meshName
      title: MeshRef
      type: object
    DescribeVirtualRouterInput:
      description: ""
      properties: {}
      title: DescribeVirtualRouterInput
      type: object
    WeightedTargets:
      items:
        $ref: '#/components/schemas/WeightedTarget'
      type: array
    HttpRouteAction:
      description: |-
        An object representing the traffic distribution requirements for matched HTTP
                 requests.
      properties:
        weightedTargets:
          allOf:
          - $ref: '#/components/schemas/WeightedTargets'
          - description: |-
              The targets that traffic is routed to when a request matches the route. You can specify
                       one or more targets and their relative weights with which to distribute traffic.
          title: weightedTargets
      title: HttpRouteAction
      type: object
    HealthCheckTimeoutMillis:
      maximum: 60000
      minimum: 2000
      type: integer
    String:
      type: string
    VirtualRouterSpec:
      description: An object representing the specification of a virtual router.
      properties:
        serviceNames:
          allOf:
          - $ref: '#/components/schemas/ServiceNames'
          - description: The service mesh service names to associate with the virtual
              router.
          title: serviceNames
      title: VirtualRouterSpec
      type: object
    CreateVirtualRouterInput:
      description: ""
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              Unique, case-sensitive identifier that you provide to ensure the idempotency of the
              request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/CreateVirtualRouterInput_spec'
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name to use for the virtual router.
      required:
      - spec
      - virtualRouterName
      title: CreateVirtualRouterInput
      type: object
    RouteStatusCode:
      enum:
      - ACTIVE
      - DELETED
      - INACTIVE
      title: RouteStatusCode
      type: string
    RouteStatus:
      description: An object representing the current status of a route.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/RouteStatusCode'
          - description: The current status for the route.
          title: status
      title: RouteStatus
      type: object
    ListMeshesLimit:
      maximum: 100
      minimum: 1
      type: integer
    ListMeshesInput:
      description: ""
      properties: {}
      title: ListMeshesInput
      type: object
    VirtualRouterStatusCode:
      enum:
      - ACTIVE
      - DELETED
      - INACTIVE
      title: VirtualRouterStatusCode
      type: string
    VirtualRouterStatus:
      description: 'An object representing the status of a virtual router. '
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterStatusCode'
          - description: The current status of the virtual router.
          title: status
      title: VirtualRouterStatus
      type: object
    MeshList:
      items:
        $ref: '#/components/schemas/MeshRef'
      type: array
    RouteSpec:
      description: An object representing the specification of a route.
      properties:
        httpRoute:
          $ref: '#/components/schemas/CreateRoute_request_spec_httpRoute'
      title: RouteSpec
      type: object
    UpdateVirtualNodeInput:
      description: ""
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              Unique, case-sensitive identifier that you provide to ensure the idempotency of the
              request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/UpdateVirtualNodeInput_spec'
      required:
      - spec
      title: UpdateVirtualNodeInput
      type: object
    DeleteRouteInput:
      description: ""
      properties: {}
      title: DeleteRouteInput
      type: object
    Listener:
      description: An object representing a listener for a virtual node.
      properties:
        healthCheck:
          $ref: '#/components/schemas/Listener_healthCheck'
        portMapping:
          $ref: '#/components/schemas/Listener_portMapping'
      title: Listener
      type: object
    ListRoutesLimit:
      maximum: 100
      minimum: 1
      type: integer
    ListRoutesInput:
      description: ""
      properties: {}
      title: ListRoutesInput
      type: object
    HttpRouteMatch:
      description: |-
        An object representing the requirements for a route to match HTTP requests for a virtual
                 router.
      properties:
        prefix:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              Specifies the path with which to match requests. This parameter must always start with
                          <code>/</code>, which by itself matches all requests to the virtual router service name.
                       You can also match for path-based routing of requests. For example, if your virtual router
                       service name is <code>my-service.local</code>, and you want the route to match requests to
                          <code>my-service.local/metrics</code>, then your prefix should be
                       <code>/metrics</code>.
          title: prefix
      title: HttpRouteMatch
      type: object
    Timestamp:
      format: date-time
      type: string
    DescribeVirtualNodeInput:
      description: ""
      properties: {}
      title: DescribeVirtualNodeInput
      type: object
    VirtualRouterRef:
      description: An object representing a virtual router returned by a list operation.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The full Amazon Resource Name (ARN) for the virtual router.
          title: arn
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh in which the virtual router
              resides.
          title: meshName
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the virtual router.
          title: virtualRouterName
      title: VirtualRouterRef
      type: object
    UpdateVirtualRouterInput:
      description: ""
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              Unique, case-sensitive identifier that you provide to ensure the idempotency of the
              request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/UpdateVirtualRouterInput_spec'
      required:
      - spec
      title: UpdateVirtualRouterInput
      type: object
    DescribeRouteInput:
      description: ""
      properties: {}
      title: DescribeRouteInput
      type: object
    VirtualRouterList:
      items:
        $ref: '#/components/schemas/VirtualRouterRef'
      type: array
    PortProtocol:
      enum:
      - http
      - tcp
      title: PortProtocol
      type: string
    CreateMeshInput:
      description: ""
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              Unique, case-sensitive identifier that you provide to ensure the idempotency of the
              request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name to use for the service mesh.
      required:
      - meshName
      title: CreateMeshInput
      type: object
    PortMapping:
      description: An object representing a virtual node listener port mapping.
      properties:
        port:
          allOf:
          - $ref: '#/components/schemas/PortNumber'
          - description: The port used for the port mapping.
          title: port
        protocol:
          allOf:
          - $ref: '#/components/schemas/PortProtocol'
          - description: The protocol used for the port mapping.
          title: protocol
      title: PortMapping
      type: object
    VirtualNodeStatusCode:
      enum:
      - ACTIVE
      - DELETED
      - INACTIVE
      title: VirtualNodeStatusCode
      type: string
    DeleteVirtualRouterInput:
      description: ""
      properties: {}
      title: DeleteVirtualRouterInput
      type: object
    UpdateRouteInput:
      description: ""
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              Unique, case-sensitive identifier that you provide to ensure the idempotency of the
              request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/UpdateRouteInput_spec'
      required:
      - spec
      title: UpdateRouteInput
      type: object
    DescribeMeshInput:
      description: ""
      properties: {}
      title: DescribeMeshInput
      type: object
    HealthCheckPolicy:
      description: An object representing the health check policy for a virtual node's
        listener.
      properties:
        healthyThreshold:
          allOf:
          - $ref: '#/components/schemas/HealthCheckThreshold'
          - description: |-
              The number of consecutive successful health checks that must occur before declaring
                       listener healthy.
          title: healthyThreshold
        intervalMillis:
          allOf:
          - $ref: '#/components/schemas/HealthCheckIntervalMillis'
          - description: The time period in milliseconds between each health check
              execution.
          title: intervalMillis
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              The destination path for the health check request. This is only required if the
                       specified protocol is HTTP; if the protocol is TCP, then this parameter is ignored.
          title: path
        port:
          allOf:
          - $ref: '#/components/schemas/PortNumber'
          - description: |-
              The destination port for the health check request. This port must match the port defined
                       in the <a>PortMapping</a> for the listener.
          title: port
        protocol:
          allOf:
          - $ref: '#/components/schemas/PortProtocol'
          - description: The protocol for the health check request.
          title: protocol
        timeoutMillis:
          allOf:
          - $ref: '#/components/schemas/HealthCheckTimeoutMillis'
          - description: |-
              The amount of time to wait when receiving a response from the health check, in
                       milliseconds.
          title: timeoutMillis
        unhealthyThreshold:
          allOf:
          - $ref: '#/components/schemas/HealthCheckThreshold'
          - description: "The number of consecutive failed health checks that must\
              \ occur before declaring a\n         virtual node unhealthy. "
          title: unhealthyThreshold
      required:
      - healthyThreshold
      - intervalMillis
      - protocol
      - timeoutMillis
      - unhealthyThreshold
      title: HealthCheckPolicy
      type: object
    ListVirtualRoutersInput:
      description: ""
      properties: {}
      title: ListVirtualRoutersInput
      type: object
    CreateVirtualNodeInput:
      description: ""
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              Unique, case-sensitive identifier that you provide to ensure the idempotency of the
              request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        spec:
          $ref: '#/components/schemas/CreateVirtualNodeInput_spec'
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name to use for the virtual node.
      required:
      - spec
      - virtualNodeName
      title: CreateVirtualNodeInput
      type: object
    ListVirtualNodesLimit:
      maximum: 100
      minimum: 1
      type: integer
    DeleteMeshInput:
      description: ""
      properties: {}
      title: DeleteMeshInput
      type: object
    CreateRouteInput:
      description: ""
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: |-
              Unique, case-sensitive identifier that you provide to ensure the idempotency of the
              request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
        routeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name to use for the route.
        spec:
          $ref: '#/components/schemas/CreateRouteInput_spec'
      required:
      - routeName
      - spec
      title: CreateRouteInput
      type: object
    ListVirtualNodesInput:
      description: ""
      properties: {}
      title: ListVirtualNodesInput
      type: object
    CreateMesh_request:
      properties:
        clientToken:
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
          title: clientToken
          type: string
        meshName:
          description: The name to use for the service mesh.
          maxLength: 255
          minLength: 1
          title: meshName
          type: string
      required:
      - meshName
      title: CreateMesh_request
      type: object
    CreateRoute_request_spec_httpRoute:
      allOf:
      - $ref: '#/components/schemas/HttpRoute'
      - description: The HTTP routing information for the route.
      example:
        match:
          prefix: ""
        action:
          weightedTargets: ""
      title: CreateRoute_request_spec_httpRoute
    CreateRoute_request_spec:
      description: An object representing the specification of a route.
      properties:
        httpRoute:
          $ref: '#/components/schemas/CreateRoute_request_spec_httpRoute'
      title: CreateRoute_request_spec
      type: object
    CreateRoute_request:
      properties:
        clientToken:
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
          title: clientToken
          type: string
        routeName:
          description: The name to use for the route.
          maxLength: 255
          minLength: 1
          title: routeName
          type: string
        spec:
          $ref: '#/components/schemas/CreateRoute_request_spec'
      required:
      - routeName
      - spec
      title: CreateRoute_request
      type: object
    CreateVirtualNode_request_spec_serviceDiscovery:
      allOf:
      - $ref: '#/components/schemas/ServiceDiscovery'
      - description: The service discovery information for the virtual node.
      example:
        dns:
          serviceName: ""
      title: CreateVirtualNode_request_spec_serviceDiscovery
    CreateVirtualNode_request_spec:
      description: An object representing the specification of a virtual node.
      properties:
        backends:
          allOf:
          - $ref: '#/components/schemas/Backends'
          - description: The backends to which the virtual node is expected to send
              outbound traffic.
          title: backends
        listeners:
          allOf:
          - $ref: '#/components/schemas/Listeners'
          - description: The listeners from which the virtual node is expected to
              receive inbound traffic.
          title: listeners
        serviceDiscovery:
          $ref: '#/components/schemas/CreateVirtualNode_request_spec_serviceDiscovery'
      title: CreateVirtualNode_request_spec
      type: object
    CreateVirtualNode_request:
      properties:
        clientToken:
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
          title: clientToken
          type: string
        spec:
          $ref: '#/components/schemas/CreateVirtualNode_request_spec'
        virtualNodeName:
          description: The name to use for the virtual node.
          maxLength: 255
          minLength: 1
          title: virtualNodeName
          type: string
      required:
      - spec
      - virtualNodeName
      title: CreateVirtualNode_request
      type: object
    CreateVirtualRouter_request_spec:
      description: An object representing the specification of a virtual router.
      properties:
        serviceNames:
          allOf:
          - $ref: '#/components/schemas/ServiceNames'
          - description: The service mesh service names to associate with the virtual
              router.
          title: serviceNames
      title: CreateVirtualRouter_request_spec
      type: object
    CreateVirtualRouter_request:
      properties:
        clientToken:
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
          title: clientToken
          type: string
        spec:
          $ref: '#/components/schemas/CreateVirtualRouter_request_spec'
        virtualRouterName:
          description: The name to use for the virtual router.
          maxLength: 255
          minLength: 1
          title: virtualRouterName
          type: string
      required:
      - spec
      - virtualRouterName
      title: CreateVirtualRouter_request
      type: object
    UpdateRoute_request:
      properties:
        clientToken:
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
          title: clientToken
          type: string
        spec:
          $ref: '#/components/schemas/CreateRoute_request_spec'
      required:
      - spec
      title: UpdateRoute_request
      type: object
    UpdateVirtualNode_request:
      properties:
        clientToken:
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
          title: clientToken
          type: string
        spec:
          $ref: '#/components/schemas/CreateVirtualNode_request_spec'
      required:
      - spec
      title: UpdateVirtualNode_request
      type: object
    UpdateVirtualRouter_request:
      properties:
        clientToken:
          description: |-
            Unique, case-sensitive identifier that you provide to ensure the idempotency of the
            request. Up to 36 letters, numbers, hyphens, and underscores are allowed.
          title: clientToken
          type: string
        spec:
          $ref: '#/components/schemas/CreateVirtualRouter_request_spec'
      required:
      - spec
      title: UpdateVirtualRouter_request
      type: object
    CreateMeshOutput_mesh:
      allOf:
      - $ref: '#/components/schemas/MeshData'
      - description: The full description of your service mesh following the create
          call.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        status:
          status: ""
      title: CreateMeshOutput_mesh
    CreateRouteOutput_route:
      allOf:
      - $ref: '#/components/schemas/RouteData'
      - description: The full description of your mesh following the create call.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          httpRoute:
            match:
              prefix: ""
            action:
              weightedTargets: ""
        routeName: ""
        status:
          status: ""
      title: CreateRouteOutput_route
    HttpRoute_action:
      allOf:
      - $ref: '#/components/schemas/HttpRouteAction'
      - description: The action to take if a match is determined.
      example:
        weightedTargets: ""
      title: HttpRoute_action
    HttpRoute_match:
      allOf:
      - $ref: '#/components/schemas/HttpRouteMatch'
      - description: The criteria for determining an HTTP request match.
      example:
        prefix: ""
      title: HttpRoute_match
    CreateVirtualNodeOutput_virtualNode:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeData'
      - description: The full description of your virtual node following the create
          call.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        virtualNodeName: ""
        spec:
          listeners: ""
          serviceDiscovery:
            dns:
              serviceName: ""
          backends: ""
        status:
          status: ""
      title: CreateVirtualNodeOutput_virtualNode
    ServiceDiscovery_dns:
      allOf:
      - $ref: '#/components/schemas/DnsServiceDiscovery'
      - description: Specifies the DNS service name for the virtual node.
      example:
        serviceName: ""
      title: ServiceDiscovery_dns
    CreateVirtualRouterOutput_virtualRouter:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterData'
      - description: The full description of your virtual router following the create
          call.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          serviceNames: ""
        status:
          status: ""
      title: CreateVirtualRouterOutput_virtualRouter
    DeleteMeshOutput_mesh:
      allOf:
      - $ref: '#/components/schemas/MeshData'
      - description: The service mesh that was deleted.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        status:
          status: ""
      title: DeleteMeshOutput_mesh
    DeleteRouteOutput_route:
      allOf:
      - $ref: '#/components/schemas/RouteData'
      - description: The route that was deleted.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          httpRoute:
            match:
              prefix: ""
            action:
              weightedTargets: ""
        routeName: ""
        status:
          status: ""
      title: DeleteRouteOutput_route
    DeleteVirtualNodeOutput_virtualNode:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeData'
      - description: The virtual node that was deleted.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        virtualNodeName: ""
        spec:
          listeners: ""
          serviceDiscovery:
            dns:
              serviceName: ""
          backends: ""
        status:
          status: ""
      title: DeleteVirtualNodeOutput_virtualNode
    DeleteVirtualRouterOutput_virtualRouter:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterData'
      - description: The virtual router that was deleted.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          serviceNames: ""
        status:
          status: ""
      title: DeleteVirtualRouterOutput_virtualRouter
    DescribeMeshOutput_mesh:
      allOf:
      - $ref: '#/components/schemas/MeshData'
      - description: The full description of your service mesh.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        status:
          status: ""
      title: DescribeMeshOutput_mesh
    DescribeRouteOutput_route:
      allOf:
      - $ref: '#/components/schemas/RouteData'
      - description: The full description of your route.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          httpRoute:
            match:
              prefix: ""
            action:
              weightedTargets: ""
        routeName: ""
        status:
          status: ""
      title: DescribeRouteOutput_route
    DescribeVirtualNodeOutput_virtualNode:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeData'
      - description: The full description of your virtual node.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        virtualNodeName: ""
        spec:
          listeners: ""
          serviceDiscovery:
            dns:
              serviceName: ""
          backends: ""
        status:
          status: ""
      title: DescribeVirtualNodeOutput_virtualNode
    DescribeVirtualRouterOutput_virtualRouter:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterData'
      - description: The full description of your virtual router.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          serviceNames: ""
        status:
          status: ""
      title: DescribeVirtualRouterOutput_virtualRouter
    UpdateRouteOutput_route:
      allOf:
      - $ref: '#/components/schemas/RouteData'
      - description: A full description of the route that was updated.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          httpRoute:
            match:
              prefix: ""
            action:
              weightedTargets: ""
        routeName: ""
        status:
          status: ""
      title: UpdateRouteOutput_route
    UpdateVirtualNodeOutput_virtualNode:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeData'
      - description: A full description of the virtual node that was updated.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        virtualNodeName: ""
        spec:
          listeners: ""
          serviceDiscovery:
            dns:
              serviceName: ""
          backends: ""
        status:
          status: ""
      title: UpdateVirtualNodeOutput_virtualNode
    UpdateVirtualRouterOutput_virtualRouter:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterData'
      - description: A full description of the virtual router that was updated.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          serviceNames: ""
        status:
          status: ""
      title: UpdateVirtualRouterOutput_virtualRouter
    MeshData_metadata:
      allOf:
      - $ref: '#/components/schemas/ResourceMetadata'
      - description: The associated metadata for the service mesh.
      example:
        createdAt: ""
        uid: ""
        lastUpdatedAt: ""
        arn: ""
        version: ""
      title: MeshData_metadata
    MeshData_status:
      allOf:
      - $ref: '#/components/schemas/MeshStatus'
      - description: The status of the service mesh.
      example:
        status: ""
      title: MeshData_status
    VirtualRouterData_metadata:
      allOf:
      - $ref: '#/components/schemas/ResourceMetadata'
      - description: The associated metadata for the virtual router.
      example:
        createdAt: ""
        uid: ""
        lastUpdatedAt: ""
        arn: ""
        version: ""
      title: VirtualRouterData_metadata
    VirtualRouterData_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterSpec'
      - description: The specifications of the virtual router.
      example:
        serviceNames: ""
      title: VirtualRouterData_spec
    VirtualRouterData_status:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterStatus'
      - description: The current status of the virtual router.
      example:
        status: ""
      title: VirtualRouterData_status
    RouteData_metadata:
      allOf:
      - $ref: '#/components/schemas/ResourceMetadata'
      - description: The associated metadata for the route.
      example:
        createdAt: ""
        uid: ""
        lastUpdatedAt: ""
        arn: ""
        version: ""
      title: RouteData_metadata
    RouteData_spec:
      allOf:
      - $ref: '#/components/schemas/RouteSpec'
      - description: The specifications of the route.
      example:
        httpRoute:
          match:
            prefix: ""
          action:
            weightedTargets: ""
      title: RouteData_spec
    RouteData_status:
      allOf:
      - $ref: '#/components/schemas/RouteStatus'
      - description: The status of the route.
      example:
        status: ""
      title: RouteData_status
    VirtualNodeData_metadata:
      allOf:
      - $ref: '#/components/schemas/ResourceMetadata'
      - description: The associated metadata for the virtual node.
      example:
        createdAt: ""
        uid: ""
        lastUpdatedAt: ""
        arn: ""
        version: ""
      title: VirtualNodeData_metadata
    VirtualNodeData_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeSpec'
      - description: The specifications of the virtual node.
      example:
        listeners: ""
        serviceDiscovery:
          dns:
            serviceName: ""
        backends: ""
      title: VirtualNodeData_spec
    VirtualNodeData_status:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeStatus'
      - description: The current status for the virtual node.
      example:
        status: ""
      title: VirtualNodeData_status
    CreateVirtualRouterInput_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterSpec'
      - description: The virtual router specification to apply.
      title: CreateVirtualRouterInput_spec
    UpdateVirtualNodeInput_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeSpec'
      - description: The new virtual node specification to apply. This overwrites
          the existing data.
      title: UpdateVirtualNodeInput_spec
    Listener_healthCheck:
      allOf:
      - $ref: '#/components/schemas/HealthCheckPolicy'
      - description: The health check information for the listener.
      title: Listener_healthCheck
    Listener_portMapping:
      allOf:
      - $ref: '#/components/schemas/PortMapping'
      - description: The port mapping information for the listener.
      title: Listener_portMapping
    UpdateVirtualRouterInput_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterSpec'
      - description: The new virtual router specification to apply. This overwrites
          the existing data.
      title: UpdateVirtualRouterInput_spec
    UpdateRouteInput_spec:
      allOf:
      - $ref: '#/components/schemas/RouteSpec'
      - description: The new route specification to apply. This overwrites the existing
          data.
      title: UpdateRouteInput_spec
    CreateVirtualNodeInput_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeSpec'
      - description: The virtual node specification to apply.
      title: CreateVirtualNodeInput_spec
    CreateRouteInput_spec:
      allOf:
      - $ref: '#/components/schemas/RouteSpec'
      - description: The route specification to apply.
      title: CreateRouteInput_spec
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_hmac
