/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpGatewayRouteRewrite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpGatewayRouteRewrite::OAIHttpGatewayRouteRewrite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpGatewayRouteRewrite::OAIHttpGatewayRouteRewrite() {
    this->initializeModel();
}

OAIHttpGatewayRouteRewrite::~OAIHttpGatewayRouteRewrite() {}

void OAIHttpGatewayRouteRewrite::initializeModel() {

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAIHttpGatewayRouteRewrite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpGatewayRouteRewrite::fromJsonObject(QJsonObject json) {

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;
}

QString OAIHttpGatewayRouteRewrite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpGatewayRouteRewrite::asJsonObject() const {
    QJsonObject obj;
    if (m_hostname.isSet()) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_path.isSet()) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_prefix.isSet()) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

OAIHttpGatewayRouteRewrite_hostname OAIHttpGatewayRouteRewrite::getHostname() const {
    return m_hostname;
}
void OAIHttpGatewayRouteRewrite::setHostname(const OAIHttpGatewayRouteRewrite_hostname &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIHttpGatewayRouteRewrite::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIHttpGatewayRouteRewrite::is_hostname_Valid() const{
    return m_hostname_isValid;
}

OAIHttpGatewayRouteRewrite_path OAIHttpGatewayRouteRewrite::getPath() const {
    return m_path;
}
void OAIHttpGatewayRouteRewrite::setPath(const OAIHttpGatewayRouteRewrite_path &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIHttpGatewayRouteRewrite::is_path_Set() const{
    return m_path_isSet;
}

bool OAIHttpGatewayRouteRewrite::is_path_Valid() const{
    return m_path_isValid;
}

OAIHttpGatewayRouteRewrite_prefix OAIHttpGatewayRouteRewrite::getPrefix() const {
    return m_prefix;
}
void OAIHttpGatewayRouteRewrite::setPrefix(const OAIHttpGatewayRouteRewrite_prefix &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIHttpGatewayRouteRewrite::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIHttpGatewayRouteRewrite::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIHttpGatewayRouteRewrite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hostname.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpGatewayRouteRewrite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
