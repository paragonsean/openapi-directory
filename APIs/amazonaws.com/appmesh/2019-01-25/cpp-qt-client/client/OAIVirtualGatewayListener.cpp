/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualGatewayListener.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualGatewayListener::OAIVirtualGatewayListener(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualGatewayListener::OAIVirtualGatewayListener() {
    this->initializeModel();
}

OAIVirtualGatewayListener::~OAIVirtualGatewayListener() {}

void OAIVirtualGatewayListener::initializeModel() {

    m_connection_pool_isSet = false;
    m_connection_pool_isValid = false;

    m_health_check_isSet = false;
    m_health_check_isValid = false;

    m_port_mapping_isSet = false;
    m_port_mapping_isValid = false;

    m_tls_isSet = false;
    m_tls_isValid = false;
}

void OAIVirtualGatewayListener::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualGatewayListener::fromJsonObject(QJsonObject json) {

    m_connection_pool_isValid = ::OpenAPI::fromJsonValue(m_connection_pool, json[QString("connectionPool")]);
    m_connection_pool_isSet = !json[QString("connectionPool")].isNull() && m_connection_pool_isValid;

    m_health_check_isValid = ::OpenAPI::fromJsonValue(m_health_check, json[QString("healthCheck")]);
    m_health_check_isSet = !json[QString("healthCheck")].isNull() && m_health_check_isValid;

    m_port_mapping_isValid = ::OpenAPI::fromJsonValue(m_port_mapping, json[QString("portMapping")]);
    m_port_mapping_isSet = !json[QString("portMapping")].isNull() && m_port_mapping_isValid;

    m_tls_isValid = ::OpenAPI::fromJsonValue(m_tls, json[QString("tls")]);
    m_tls_isSet = !json[QString("tls")].isNull() && m_tls_isValid;
}

QString OAIVirtualGatewayListener::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualGatewayListener::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_pool.isSet()) {
        obj.insert(QString("connectionPool"), ::OpenAPI::toJsonValue(m_connection_pool));
    }
    if (m_health_check.isSet()) {
        obj.insert(QString("healthCheck"), ::OpenAPI::toJsonValue(m_health_check));
    }
    if (m_port_mapping.isSet()) {
        obj.insert(QString("portMapping"), ::OpenAPI::toJsonValue(m_port_mapping));
    }
    if (m_tls.isSet()) {
        obj.insert(QString("tls"), ::OpenAPI::toJsonValue(m_tls));
    }
    return obj;
}

OAIVirtualGatewayListener_connectionPool OAIVirtualGatewayListener::getConnectionPool() const {
    return m_connection_pool;
}
void OAIVirtualGatewayListener::setConnectionPool(const OAIVirtualGatewayListener_connectionPool &connection_pool) {
    m_connection_pool = connection_pool;
    m_connection_pool_isSet = true;
}

bool OAIVirtualGatewayListener::is_connection_pool_Set() const{
    return m_connection_pool_isSet;
}

bool OAIVirtualGatewayListener::is_connection_pool_Valid() const{
    return m_connection_pool_isValid;
}

OAIVirtualGatewayListener_healthCheck OAIVirtualGatewayListener::getHealthCheck() const {
    return m_health_check;
}
void OAIVirtualGatewayListener::setHealthCheck(const OAIVirtualGatewayListener_healthCheck &health_check) {
    m_health_check = health_check;
    m_health_check_isSet = true;
}

bool OAIVirtualGatewayListener::is_health_check_Set() const{
    return m_health_check_isSet;
}

bool OAIVirtualGatewayListener::is_health_check_Valid() const{
    return m_health_check_isValid;
}

OAIVirtualGatewayListener_portMapping OAIVirtualGatewayListener::getPortMapping() const {
    return m_port_mapping;
}
void OAIVirtualGatewayListener::setPortMapping(const OAIVirtualGatewayListener_portMapping &port_mapping) {
    m_port_mapping = port_mapping;
    m_port_mapping_isSet = true;
}

bool OAIVirtualGatewayListener::is_port_mapping_Set() const{
    return m_port_mapping_isSet;
}

bool OAIVirtualGatewayListener::is_port_mapping_Valid() const{
    return m_port_mapping_isValid;
}

OAIVirtualGatewayListener_tls OAIVirtualGatewayListener::getTls() const {
    return m_tls;
}
void OAIVirtualGatewayListener::setTls(const OAIVirtualGatewayListener_tls &tls) {
    m_tls = tls;
    m_tls_isSet = true;
}

bool OAIVirtualGatewayListener::is_tls_Set() const{
    return m_tls_isSet;
}

bool OAIVirtualGatewayListener::is_tls_Valid() const{
    return m_tls_isValid;
}

bool OAIVirtualGatewayListener::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualGatewayListener::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_port_mapping_isValid && true;
}

} // namespace OpenAPI
