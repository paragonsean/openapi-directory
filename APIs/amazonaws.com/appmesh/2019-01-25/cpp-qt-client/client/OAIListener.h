/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListener.h
 *
 * An object that represents a listener for a virtual node.
 */

#ifndef OAIListener_H
#define OAIListener_H

#include <QJsonObject>

#include "OAIListener_connectionPool.h"
#include "OAIListener_healthCheck.h"
#include "OAIListener_outlierDetection.h"
#include "OAIListener_portMapping.h"
#include "OAIListener_timeout.h"
#include "OAIListener_tls.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIListener_connectionPool;
class OAIListener_healthCheck;
class OAIListener_outlierDetection;
class OAIListener_portMapping;
class OAIListener_timeout;
class OAIListener_tls;

class OAIListener : public OAIObject {
public:
    OAIListener();
    OAIListener(QString json);
    ~OAIListener() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIListener_connectionPool getConnectionPool() const;
    void setConnectionPool(const OAIListener_connectionPool &connection_pool);
    bool is_connection_pool_Set() const;
    bool is_connection_pool_Valid() const;

    OAIListener_healthCheck getHealthCheck() const;
    void setHealthCheck(const OAIListener_healthCheck &health_check);
    bool is_health_check_Set() const;
    bool is_health_check_Valid() const;

    OAIListener_outlierDetection getOutlierDetection() const;
    void setOutlierDetection(const OAIListener_outlierDetection &outlier_detection);
    bool is_outlier_detection_Set() const;
    bool is_outlier_detection_Valid() const;

    OAIListener_portMapping getPortMapping() const;
    void setPortMapping(const OAIListener_portMapping &port_mapping);
    bool is_port_mapping_Set() const;
    bool is_port_mapping_Valid() const;

    OAIListener_timeout getTimeout() const;
    void setTimeout(const OAIListener_timeout &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    OAIListener_tls getTls() const;
    void setTls(const OAIListener_tls &tls);
    bool is_tls_Set() const;
    bool is_tls_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIListener_connectionPool m_connection_pool;
    bool m_connection_pool_isSet;
    bool m_connection_pool_isValid;

    OAIListener_healthCheck m_health_check;
    bool m_health_check_isSet;
    bool m_health_check_isValid;

    OAIListener_outlierDetection m_outlier_detection;
    bool m_outlier_detection_isSet;
    bool m_outlier_detection_isValid;

    OAIListener_portMapping m_port_mapping;
    bool m_port_mapping_isSet;
    bool m_port_mapping_isValid;

    OAIListener_timeout m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    OAIListener_tls m_tls;
    bool m_tls_isSet;
    bool m_tls_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListener)

#endif // OAIListener_H
