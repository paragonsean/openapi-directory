/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrpcRoute_match.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrpcRoute_match::OAIGrpcRoute_match(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrpcRoute_match::OAIGrpcRoute_match() {
    this->initializeModel();
}

OAIGrpcRoute_match::~OAIGrpcRoute_match() {}

void OAIGrpcRoute_match::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_method_name_isSet = false;
    m_method_name_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIGrpcRoute_match::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrpcRoute_match::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_method_name_isValid = ::OpenAPI::fromJsonValue(m_method_name, json[QString("methodName")]);
    m_method_name_isSet = !json[QString("methodName")].isNull() && m_method_name_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;
}

QString OAIGrpcRoute_match::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrpcRoute_match::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_method_name_isSet) {
        obj.insert(QString("methodName"), ::OpenAPI::toJsonValue(m_method_name));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

QList OAIGrpcRoute_match::getMetadata() const {
    return m_metadata;
}
void OAIGrpcRoute_match::setMetadata(const QList &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGrpcRoute_match::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGrpcRoute_match::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIGrpcRoute_match::getMethodName() const {
    return m_method_name;
}
void OAIGrpcRoute_match::setMethodName(const QString &method_name) {
    m_method_name = method_name;
    m_method_name_isSet = true;
}

bool OAIGrpcRoute_match::is_method_name_Set() const{
    return m_method_name_isSet;
}

bool OAIGrpcRoute_match::is_method_name_Valid() const{
    return m_method_name_isValid;
}

qint32 OAIGrpcRoute_match::getPort() const {
    return m_port;
}
void OAIGrpcRoute_match::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIGrpcRoute_match::is_port_Set() const{
    return m_port_isSet;
}

bool OAIGrpcRoute_match::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIGrpcRoute_match::getServiceName() const {
    return m_service_name;
}
void OAIGrpcRoute_match::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIGrpcRoute_match::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIGrpcRoute_match::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIGrpcRoute_match::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrpcRoute_match::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
