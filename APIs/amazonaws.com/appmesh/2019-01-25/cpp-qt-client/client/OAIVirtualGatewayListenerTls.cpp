/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualGatewayListenerTls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualGatewayListenerTls::OAIVirtualGatewayListenerTls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualGatewayListenerTls::OAIVirtualGatewayListenerTls() {
    this->initializeModel();
}

OAIVirtualGatewayListenerTls::~OAIVirtualGatewayListenerTls() {}

void OAIVirtualGatewayListenerTls::initializeModel() {

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_validation_isSet = false;
    m_validation_isValid = false;
}

void OAIVirtualGatewayListenerTls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualGatewayListenerTls::fromJsonObject(QJsonObject json) {

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_validation_isValid = ::OpenAPI::fromJsonValue(m_validation, json[QString("validation")]);
    m_validation_isSet = !json[QString("validation")].isNull() && m_validation_isValid;
}

QString OAIVirtualGatewayListenerTls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualGatewayListenerTls::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate.isSet()) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_validation.isSet()) {
        obj.insert(QString("validation"), ::OpenAPI::toJsonValue(m_validation));
    }
    return obj;
}

OAIVirtualGatewayListenerTls_certificate OAIVirtualGatewayListenerTls::getCertificate() const {
    return m_certificate;
}
void OAIVirtualGatewayListenerTls::setCertificate(const OAIVirtualGatewayListenerTls_certificate &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIVirtualGatewayListenerTls::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIVirtualGatewayListenerTls::is_certificate_Valid() const{
    return m_certificate_isValid;
}

OAIVirtualGatewayListenerTlsMode OAIVirtualGatewayListenerTls::getMode() const {
    return m_mode;
}
void OAIVirtualGatewayListenerTls::setMode(const OAIVirtualGatewayListenerTlsMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIVirtualGatewayListenerTls::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIVirtualGatewayListenerTls::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIVirtualGatewayListenerTls_validation OAIVirtualGatewayListenerTls::getValidation() const {
    return m_validation;
}
void OAIVirtualGatewayListenerTls::setValidation(const OAIVirtualGatewayListenerTls_validation &validation) {
    m_validation = validation;
    m_validation_isSet = true;
}

bool OAIVirtualGatewayListenerTls::is_validation_Set() const{
    return m_validation_isSet;
}

bool OAIVirtualGatewayListenerTls::is_validation_Valid() const{
    return m_validation_isValid;
}

bool OAIVirtualGatewayListenerTls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualGatewayListenerTls::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_isValid && m_mode_isValid && true;
}

} // namespace OpenAPI
