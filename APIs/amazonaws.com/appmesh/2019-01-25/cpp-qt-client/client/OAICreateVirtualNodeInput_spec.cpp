/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVirtualNodeInput_spec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVirtualNodeInput_spec::OAICreateVirtualNodeInput_spec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVirtualNodeInput_spec::OAICreateVirtualNodeInput_spec() {
    this->initializeModel();
}

OAICreateVirtualNodeInput_spec::~OAICreateVirtualNodeInput_spec() {}

void OAICreateVirtualNodeInput_spec::initializeModel() {

    m_backend_defaults_isSet = false;
    m_backend_defaults_isValid = false;

    m_backends_isSet = false;
    m_backends_isValid = false;

    m_listeners_isSet = false;
    m_listeners_isValid = false;

    m_logging_isSet = false;
    m_logging_isValid = false;

    m_service_discovery_isSet = false;
    m_service_discovery_isValid = false;
}

void OAICreateVirtualNodeInput_spec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVirtualNodeInput_spec::fromJsonObject(QJsonObject json) {

    m_backend_defaults_isValid = ::OpenAPI::fromJsonValue(m_backend_defaults, json[QString("backendDefaults")]);
    m_backend_defaults_isSet = !json[QString("backendDefaults")].isNull() && m_backend_defaults_isValid;

    m_backends_isValid = ::OpenAPI::fromJsonValue(m_backends, json[QString("backends")]);
    m_backends_isSet = !json[QString("backends")].isNull() && m_backends_isValid;

    m_listeners_isValid = ::OpenAPI::fromJsonValue(m_listeners, json[QString("listeners")]);
    m_listeners_isSet = !json[QString("listeners")].isNull() && m_listeners_isValid;

    m_logging_isValid = ::OpenAPI::fromJsonValue(m_logging, json[QString("logging")]);
    m_logging_isSet = !json[QString("logging")].isNull() && m_logging_isValid;

    m_service_discovery_isValid = ::OpenAPI::fromJsonValue(m_service_discovery, json[QString("serviceDiscovery")]);
    m_service_discovery_isSet = !json[QString("serviceDiscovery")].isNull() && m_service_discovery_isValid;
}

QString OAICreateVirtualNodeInput_spec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVirtualNodeInput_spec::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_defaults.isSet()) {
        obj.insert(QString("backendDefaults"), ::OpenAPI::toJsonValue(m_backend_defaults));
    }
    if (m_backends.isSet()) {
        obj.insert(QString("backends"), ::OpenAPI::toJsonValue(m_backends));
    }
    if (m_listeners.isSet()) {
        obj.insert(QString("listeners"), ::OpenAPI::toJsonValue(m_listeners));
    }
    if (m_logging.isSet()) {
        obj.insert(QString("logging"), ::OpenAPI::toJsonValue(m_logging));
    }
    if (m_service_discovery.isSet()) {
        obj.insert(QString("serviceDiscovery"), ::OpenAPI::toJsonValue(m_service_discovery));
    }
    return obj;
}

OAICreateVirtualNode_request_spec_backendDefaults OAICreateVirtualNodeInput_spec::getBackendDefaults() const {
    return m_backend_defaults;
}
void OAICreateVirtualNodeInput_spec::setBackendDefaults(const OAICreateVirtualNode_request_spec_backendDefaults &backend_defaults) {
    m_backend_defaults = backend_defaults;
    m_backend_defaults_isSet = true;
}

bool OAICreateVirtualNodeInput_spec::is_backend_defaults_Set() const{
    return m_backend_defaults_isSet;
}

bool OAICreateVirtualNodeInput_spec::is_backend_defaults_Valid() const{
    return m_backend_defaults_isValid;
}

QList OAICreateVirtualNodeInput_spec::getBackends() const {
    return m_backends;
}
void OAICreateVirtualNodeInput_spec::setBackends(const QList &backends) {
    m_backends = backends;
    m_backends_isSet = true;
}

bool OAICreateVirtualNodeInput_spec::is_backends_Set() const{
    return m_backends_isSet;
}

bool OAICreateVirtualNodeInput_spec::is_backends_Valid() const{
    return m_backends_isValid;
}

QList OAICreateVirtualNodeInput_spec::getListeners() const {
    return m_listeners;
}
void OAICreateVirtualNodeInput_spec::setListeners(const QList &listeners) {
    m_listeners = listeners;
    m_listeners_isSet = true;
}

bool OAICreateVirtualNodeInput_spec::is_listeners_Set() const{
    return m_listeners_isSet;
}

bool OAICreateVirtualNodeInput_spec::is_listeners_Valid() const{
    return m_listeners_isValid;
}

OAICreateVirtualNode_request_spec_logging OAICreateVirtualNodeInput_spec::getLogging() const {
    return m_logging;
}
void OAICreateVirtualNodeInput_spec::setLogging(const OAICreateVirtualNode_request_spec_logging &logging) {
    m_logging = logging;
    m_logging_isSet = true;
}

bool OAICreateVirtualNodeInput_spec::is_logging_Set() const{
    return m_logging_isSet;
}

bool OAICreateVirtualNodeInput_spec::is_logging_Valid() const{
    return m_logging_isValid;
}

OAICreateVirtualNode_request_spec_serviceDiscovery OAICreateVirtualNodeInput_spec::getServiceDiscovery() const {
    return m_service_discovery;
}
void OAICreateVirtualNodeInput_spec::setServiceDiscovery(const OAICreateVirtualNode_request_spec_serviceDiscovery &service_discovery) {
    m_service_discovery = service_discovery;
    m_service_discovery_isSet = true;
}

bool OAICreateVirtualNodeInput_spec::is_service_discovery_Set() const{
    return m_service_discovery_isSet;
}

bool OAICreateVirtualNodeInput_spec::is_service_discovery_Valid() const{
    return m_service_discovery_isValid;
}

bool OAICreateVirtualNodeInput_spec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backends.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_listeners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_discovery.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVirtualNodeInput_spec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
