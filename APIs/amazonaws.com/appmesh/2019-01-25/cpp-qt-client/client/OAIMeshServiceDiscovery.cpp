/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeshServiceDiscovery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeshServiceDiscovery::OAIMeshServiceDiscovery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeshServiceDiscovery::OAIMeshServiceDiscovery() {
    this->initializeModel();
}

OAIMeshServiceDiscovery::~OAIMeshServiceDiscovery() {}

void OAIMeshServiceDiscovery::initializeModel() {

    m_ip_preference_isSet = false;
    m_ip_preference_isValid = false;
}

void OAIMeshServiceDiscovery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeshServiceDiscovery::fromJsonObject(QJsonObject json) {

    m_ip_preference_isValid = ::OpenAPI::fromJsonValue(m_ip_preference, json[QString("ipPreference")]);
    m_ip_preference_isSet = !json[QString("ipPreference")].isNull() && m_ip_preference_isValid;
}

QString OAIMeshServiceDiscovery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeshServiceDiscovery::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_preference.isSet()) {
        obj.insert(QString("ipPreference"), ::OpenAPI::toJsonValue(m_ip_preference));
    }
    return obj;
}

OAIIpPreference OAIMeshServiceDiscovery::getIpPreference() const {
    return m_ip_preference;
}
void OAIMeshServiceDiscovery::setIpPreference(const OAIIpPreference &ip_preference) {
    m_ip_preference = ip_preference;
    m_ip_preference_isSet = true;
}

bool OAIMeshServiceDiscovery::is_ip_preference_Set() const{
    return m_ip_preference_isSet;
}

bool OAIMeshServiceDiscovery::is_ip_preference_Valid() const{
    return m_ip_preference_isValid;
}

bool OAIMeshServiceDiscovery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeshServiceDiscovery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
