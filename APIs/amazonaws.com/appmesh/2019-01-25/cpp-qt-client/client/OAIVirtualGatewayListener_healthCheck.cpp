/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualGatewayListener_healthCheck.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualGatewayListener_healthCheck::OAIVirtualGatewayListener_healthCheck(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualGatewayListener_healthCheck::OAIVirtualGatewayListener_healthCheck() {
    this->initializeModel();
}

OAIVirtualGatewayListener_healthCheck::~OAIVirtualGatewayListener_healthCheck() {}

void OAIVirtualGatewayListener_healthCheck::initializeModel() {

    m_healthy_threshold_isSet = false;
    m_healthy_threshold_isValid = false;

    m_interval_millis_isSet = false;
    m_interval_millis_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_timeout_millis_isSet = false;
    m_timeout_millis_isValid = false;

    m_unhealthy_threshold_isSet = false;
    m_unhealthy_threshold_isValid = false;
}

void OAIVirtualGatewayListener_healthCheck::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualGatewayListener_healthCheck::fromJsonObject(QJsonObject json) {

    m_healthy_threshold_isValid = ::OpenAPI::fromJsonValue(m_healthy_threshold, json[QString("healthyThreshold")]);
    m_healthy_threshold_isSet = !json[QString("healthyThreshold")].isNull() && m_healthy_threshold_isValid;

    m_interval_millis_isValid = ::OpenAPI::fromJsonValue(m_interval_millis, json[QString("intervalMillis")]);
    m_interval_millis_isSet = !json[QString("intervalMillis")].isNull() && m_interval_millis_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_timeout_millis_isValid = ::OpenAPI::fromJsonValue(m_timeout_millis, json[QString("timeoutMillis")]);
    m_timeout_millis_isSet = !json[QString("timeoutMillis")].isNull() && m_timeout_millis_isValid;

    m_unhealthy_threshold_isValid = ::OpenAPI::fromJsonValue(m_unhealthy_threshold, json[QString("unhealthyThreshold")]);
    m_unhealthy_threshold_isSet = !json[QString("unhealthyThreshold")].isNull() && m_unhealthy_threshold_isValid;
}

QString OAIVirtualGatewayListener_healthCheck::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualGatewayListener_healthCheck::asJsonObject() const {
    QJsonObject obj;
    if (m_healthy_threshold_isSet) {
        obj.insert(QString("healthyThreshold"), ::OpenAPI::toJsonValue(m_healthy_threshold));
    }
    if (m_interval_millis_isSet) {
        obj.insert(QString("intervalMillis"), ::OpenAPI::toJsonValue(m_interval_millis));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol.isSet()) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_timeout_millis_isSet) {
        obj.insert(QString("timeoutMillis"), ::OpenAPI::toJsonValue(m_timeout_millis));
    }
    if (m_unhealthy_threshold_isSet) {
        obj.insert(QString("unhealthyThreshold"), ::OpenAPI::toJsonValue(m_unhealthy_threshold));
    }
    return obj;
}

qint32 OAIVirtualGatewayListener_healthCheck::getHealthyThreshold() const {
    return m_healthy_threshold;
}
void OAIVirtualGatewayListener_healthCheck::setHealthyThreshold(const qint32 &healthy_threshold) {
    m_healthy_threshold = healthy_threshold;
    m_healthy_threshold_isSet = true;
}

bool OAIVirtualGatewayListener_healthCheck::is_healthy_threshold_Set() const{
    return m_healthy_threshold_isSet;
}

bool OAIVirtualGatewayListener_healthCheck::is_healthy_threshold_Valid() const{
    return m_healthy_threshold_isValid;
}

qint32 OAIVirtualGatewayListener_healthCheck::getIntervalMillis() const {
    return m_interval_millis;
}
void OAIVirtualGatewayListener_healthCheck::setIntervalMillis(const qint32 &interval_millis) {
    m_interval_millis = interval_millis;
    m_interval_millis_isSet = true;
}

bool OAIVirtualGatewayListener_healthCheck::is_interval_millis_Set() const{
    return m_interval_millis_isSet;
}

bool OAIVirtualGatewayListener_healthCheck::is_interval_millis_Valid() const{
    return m_interval_millis_isValid;
}

QString OAIVirtualGatewayListener_healthCheck::getPath() const {
    return m_path;
}
void OAIVirtualGatewayListener_healthCheck::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIVirtualGatewayListener_healthCheck::is_path_Set() const{
    return m_path_isSet;
}

bool OAIVirtualGatewayListener_healthCheck::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIVirtualGatewayListener_healthCheck::getPort() const {
    return m_port;
}
void OAIVirtualGatewayListener_healthCheck::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIVirtualGatewayListener_healthCheck::is_port_Set() const{
    return m_port_isSet;
}

bool OAIVirtualGatewayListener_healthCheck::is_port_Valid() const{
    return m_port_isValid;
}

OAIVirtualGatewayPortProtocol OAIVirtualGatewayListener_healthCheck::getProtocol() const {
    return m_protocol;
}
void OAIVirtualGatewayListener_healthCheck::setProtocol(const OAIVirtualGatewayPortProtocol &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIVirtualGatewayListener_healthCheck::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIVirtualGatewayListener_healthCheck::is_protocol_Valid() const{
    return m_protocol_isValid;
}

qint32 OAIVirtualGatewayListener_healthCheck::getTimeoutMillis() const {
    return m_timeout_millis;
}
void OAIVirtualGatewayListener_healthCheck::setTimeoutMillis(const qint32 &timeout_millis) {
    m_timeout_millis = timeout_millis;
    m_timeout_millis_isSet = true;
}

bool OAIVirtualGatewayListener_healthCheck::is_timeout_millis_Set() const{
    return m_timeout_millis_isSet;
}

bool OAIVirtualGatewayListener_healthCheck::is_timeout_millis_Valid() const{
    return m_timeout_millis_isValid;
}

qint32 OAIVirtualGatewayListener_healthCheck::getUnhealthyThreshold() const {
    return m_unhealthy_threshold;
}
void OAIVirtualGatewayListener_healthCheck::setUnhealthyThreshold(const qint32 &unhealthy_threshold) {
    m_unhealthy_threshold = unhealthy_threshold;
    m_unhealthy_threshold_isSet = true;
}

bool OAIVirtualGatewayListener_healthCheck::is_unhealthy_threshold_Set() const{
    return m_unhealthy_threshold_isSet;
}

bool OAIVirtualGatewayListener_healthCheck::is_unhealthy_threshold_Valid() const{
    return m_unhealthy_threshold_isValid;
}

bool OAIVirtualGatewayListener_healthCheck::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_healthy_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unhealthy_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualGatewayListener_healthCheck::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_healthy_threshold_isValid && m_interval_millis_isValid && m_protocol_isValid && m_timeout_millis_isValid && m_unhealthy_threshold_isValid && true;
}

} // namespace OpenAPI
