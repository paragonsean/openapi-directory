/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListenerTlsCertificate_file.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListenerTlsCertificate_file::OAIListenerTlsCertificate_file(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListenerTlsCertificate_file::OAIListenerTlsCertificate_file() {
    this->initializeModel();
}

OAIListenerTlsCertificate_file::~OAIListenerTlsCertificate_file() {}

void OAIListenerTlsCertificate_file::initializeModel() {

    m_certificate_chain_isSet = false;
    m_certificate_chain_isValid = false;

    m_private_key_isSet = false;
    m_private_key_isValid = false;
}

void OAIListenerTlsCertificate_file::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListenerTlsCertificate_file::fromJsonObject(QJsonObject json) {

    m_certificate_chain_isValid = ::OpenAPI::fromJsonValue(m_certificate_chain, json[QString("certificateChain")]);
    m_certificate_chain_isSet = !json[QString("certificateChain")].isNull() && m_certificate_chain_isValid;

    m_private_key_isValid = ::OpenAPI::fromJsonValue(m_private_key, json[QString("privateKey")]);
    m_private_key_isSet = !json[QString("privateKey")].isNull() && m_private_key_isValid;
}

QString OAIListenerTlsCertificate_file::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListenerTlsCertificate_file::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_chain_isSet) {
        obj.insert(QString("certificateChain"), ::OpenAPI::toJsonValue(m_certificate_chain));
    }
    if (m_private_key_isSet) {
        obj.insert(QString("privateKey"), ::OpenAPI::toJsonValue(m_private_key));
    }
    return obj;
}

QString OAIListenerTlsCertificate_file::getCertificateChain() const {
    return m_certificate_chain;
}
void OAIListenerTlsCertificate_file::setCertificateChain(const QString &certificate_chain) {
    m_certificate_chain = certificate_chain;
    m_certificate_chain_isSet = true;
}

bool OAIListenerTlsCertificate_file::is_certificate_chain_Set() const{
    return m_certificate_chain_isSet;
}

bool OAIListenerTlsCertificate_file::is_certificate_chain_Valid() const{
    return m_certificate_chain_isValid;
}

QString OAIListenerTlsCertificate_file::getPrivateKey() const {
    return m_private_key;
}
void OAIListenerTlsCertificate_file::setPrivateKey(const QString &private_key) {
    m_private_key = private_key;
    m_private_key_isSet = true;
}

bool OAIListenerTlsCertificate_file::is_private_key_Set() const{
    return m_private_key_isSet;
}

bool OAIListenerTlsCertificate_file::is_private_key_Valid() const{
    return m_private_key_isValid;
}

bool OAIListenerTlsCertificate_file::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_chain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListenerTlsCertificate_file::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_chain_isValid && m_private_key_isValid && true;
}

} // namespace OpenAPI
