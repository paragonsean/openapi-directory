/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteVirtualRouterOutput_virtualRouter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteVirtualRouterOutput_virtualRouter::OAIDeleteVirtualRouterOutput_virtualRouter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteVirtualRouterOutput_virtualRouter::OAIDeleteVirtualRouterOutput_virtualRouter() {
    this->initializeModel();
}

OAIDeleteVirtualRouterOutput_virtualRouter::~OAIDeleteVirtualRouterOutput_virtualRouter() {}

void OAIDeleteVirtualRouterOutput_virtualRouter::initializeModel() {

    m_mesh_name_isSet = false;
    m_mesh_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_virtual_router_name_isSet = false;
    m_virtual_router_name_isValid = false;
}

void OAIDeleteVirtualRouterOutput_virtualRouter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteVirtualRouterOutput_virtualRouter::fromJsonObject(QJsonObject json) {

    m_mesh_name_isValid = ::OpenAPI::fromJsonValue(m_mesh_name, json[QString("meshName")]);
    m_mesh_name_isSet = !json[QString("meshName")].isNull() && m_mesh_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_virtual_router_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_router_name, json[QString("virtualRouterName")]);
    m_virtual_router_name_isSet = !json[QString("virtualRouterName")].isNull() && m_virtual_router_name_isValid;
}

QString OAIDeleteVirtualRouterOutput_virtualRouter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteVirtualRouterOutput_virtualRouter::asJsonObject() const {
    QJsonObject obj;
    if (m_mesh_name_isSet) {
        obj.insert(QString("meshName"), ::OpenAPI::toJsonValue(m_mesh_name));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_virtual_router_name_isSet) {
        obj.insert(QString("virtualRouterName"), ::OpenAPI::toJsonValue(m_virtual_router_name));
    }
    return obj;
}

QString OAIDeleteVirtualRouterOutput_virtualRouter::getMeshName() const {
    return m_mesh_name;
}
void OAIDeleteVirtualRouterOutput_virtualRouter::setMeshName(const QString &mesh_name) {
    m_mesh_name = mesh_name;
    m_mesh_name_isSet = true;
}

bool OAIDeleteVirtualRouterOutput_virtualRouter::is_mesh_name_Set() const{
    return m_mesh_name_isSet;
}

bool OAIDeleteVirtualRouterOutput_virtualRouter::is_mesh_name_Valid() const{
    return m_mesh_name_isValid;
}

OAIVirtualRouterData_metadata OAIDeleteVirtualRouterOutput_virtualRouter::getMetadata() const {
    return m_metadata;
}
void OAIDeleteVirtualRouterOutput_virtualRouter::setMetadata(const OAIVirtualRouterData_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDeleteVirtualRouterOutput_virtualRouter::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDeleteVirtualRouterOutput_virtualRouter::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIVirtualRouterData_spec OAIDeleteVirtualRouterOutput_virtualRouter::getSpec() const {
    return m_spec;
}
void OAIDeleteVirtualRouterOutput_virtualRouter::setSpec(const OAIVirtualRouterData_spec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIDeleteVirtualRouterOutput_virtualRouter::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIDeleteVirtualRouterOutput_virtualRouter::is_spec_Valid() const{
    return m_spec_isValid;
}

OAIVirtualRouterData_status OAIDeleteVirtualRouterOutput_virtualRouter::getStatus() const {
    return m_status;
}
void OAIDeleteVirtualRouterOutput_virtualRouter::setStatus(const OAIVirtualRouterData_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeleteVirtualRouterOutput_virtualRouter::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeleteVirtualRouterOutput_virtualRouter::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeleteVirtualRouterOutput_virtualRouter::getVirtualRouterName() const {
    return m_virtual_router_name;
}
void OAIDeleteVirtualRouterOutput_virtualRouter::setVirtualRouterName(const QString &virtual_router_name) {
    m_virtual_router_name = virtual_router_name;
    m_virtual_router_name_isSet = true;
}

bool OAIDeleteVirtualRouterOutput_virtualRouter::is_virtual_router_name_Set() const{
    return m_virtual_router_name_isSet;
}

bool OAIDeleteVirtualRouterOutput_virtualRouter::is_virtual_router_name_Valid() const{
    return m_virtual_router_name_isValid;
}

bool OAIDeleteVirtualRouterOutput_virtualRouter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mesh_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_router_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteVirtualRouterOutput_virtualRouter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mesh_name_isValid && m_metadata_isValid && m_spec_isValid && m_status_isValid && m_virtual_router_name_isValid && true;
}

} // namespace OpenAPI
