/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeVirtualServiceOutput_virtualService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeVirtualServiceOutput_virtualService::OAIDescribeVirtualServiceOutput_virtualService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeVirtualServiceOutput_virtualService::OAIDescribeVirtualServiceOutput_virtualService() {
    this->initializeModel();
}

OAIDescribeVirtualServiceOutput_virtualService::~OAIDescribeVirtualServiceOutput_virtualService() {}

void OAIDescribeVirtualServiceOutput_virtualService::initializeModel() {

    m_mesh_name_isSet = false;
    m_mesh_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_virtual_service_name_isSet = false;
    m_virtual_service_name_isValid = false;
}

void OAIDescribeVirtualServiceOutput_virtualService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeVirtualServiceOutput_virtualService::fromJsonObject(QJsonObject json) {

    m_mesh_name_isValid = ::OpenAPI::fromJsonValue(m_mesh_name, json[QString("meshName")]);
    m_mesh_name_isSet = !json[QString("meshName")].isNull() && m_mesh_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_virtual_service_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_service_name, json[QString("virtualServiceName")]);
    m_virtual_service_name_isSet = !json[QString("virtualServiceName")].isNull() && m_virtual_service_name_isValid;
}

QString OAIDescribeVirtualServiceOutput_virtualService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeVirtualServiceOutput_virtualService::asJsonObject() const {
    QJsonObject obj;
    if (m_mesh_name_isSet) {
        obj.insert(QString("meshName"), ::OpenAPI::toJsonValue(m_mesh_name));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_virtual_service_name_isSet) {
        obj.insert(QString("virtualServiceName"), ::OpenAPI::toJsonValue(m_virtual_service_name));
    }
    return obj;
}

QString OAIDescribeVirtualServiceOutput_virtualService::getMeshName() const {
    return m_mesh_name;
}
void OAIDescribeVirtualServiceOutput_virtualService::setMeshName(const QString &mesh_name) {
    m_mesh_name = mesh_name;
    m_mesh_name_isSet = true;
}

bool OAIDescribeVirtualServiceOutput_virtualService::is_mesh_name_Set() const{
    return m_mesh_name_isSet;
}

bool OAIDescribeVirtualServiceOutput_virtualService::is_mesh_name_Valid() const{
    return m_mesh_name_isValid;
}

OAIResourceMetadata OAIDescribeVirtualServiceOutput_virtualService::getMetadata() const {
    return m_metadata;
}
void OAIDescribeVirtualServiceOutput_virtualService::setMetadata(const OAIResourceMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDescribeVirtualServiceOutput_virtualService::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDescribeVirtualServiceOutput_virtualService::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIVirtualServiceData_spec OAIDescribeVirtualServiceOutput_virtualService::getSpec() const {
    return m_spec;
}
void OAIDescribeVirtualServiceOutput_virtualService::setSpec(const OAIVirtualServiceData_spec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIDescribeVirtualServiceOutput_virtualService::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIDescribeVirtualServiceOutput_virtualService::is_spec_Valid() const{
    return m_spec_isValid;
}

OAIVirtualServiceData_status OAIDescribeVirtualServiceOutput_virtualService::getStatus() const {
    return m_status;
}
void OAIDescribeVirtualServiceOutput_virtualService::setStatus(const OAIVirtualServiceData_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeVirtualServiceOutput_virtualService::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeVirtualServiceOutput_virtualService::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeVirtualServiceOutput_virtualService::getVirtualServiceName() const {
    return m_virtual_service_name;
}
void OAIDescribeVirtualServiceOutput_virtualService::setVirtualServiceName(const QString &virtual_service_name) {
    m_virtual_service_name = virtual_service_name;
    m_virtual_service_name_isSet = true;
}

bool OAIDescribeVirtualServiceOutput_virtualService::is_virtual_service_name_Set() const{
    return m_virtual_service_name_isSet;
}

bool OAIDescribeVirtualServiceOutput_virtualService::is_virtual_service_name_Valid() const{
    return m_virtual_service_name_isValid;
}

bool OAIDescribeVirtualServiceOutput_virtualService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mesh_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeVirtualServiceOutput_virtualService::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mesh_name_isValid && m_metadata_isValid && m_spec_isValid && m_status_isValid && m_virtual_service_name_isValid && true;
}

} // namespace OpenAPI
