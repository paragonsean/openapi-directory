/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateVirtualRouterInput.h
 *
 * &lt;zonbook&gt;&lt;/zonbook&gt;&lt;xhtml&gt;&lt;/xhtml&gt;
 */

#ifndef OAICreateVirtualRouterInput_H
#define OAICreateVirtualRouterInput_H

#include <QJsonObject>

#include "OAICreateVirtualRouterInput_spec.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateVirtualRouterInput_spec;

class OAICreateVirtualRouterInput : public OAIObject {
public:
    OAICreateVirtualRouterInput();
    OAICreateVirtualRouterInput(QString json);
    ~OAICreateVirtualRouterInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    OAICreateVirtualRouterInput_spec getSpec() const;
    void setSpec(const OAICreateVirtualRouterInput_spec &spec);
    bool is_spec_Set() const;
    bool is_spec_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getVirtualRouterName() const;
    void setVirtualRouterName(const QString &virtual_router_name);
    bool is_virtual_router_name_Set() const;
    bool is_virtual_router_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    OAICreateVirtualRouterInput_spec m_spec;
    bool m_spec_isSet;
    bool m_spec_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_virtual_router_name;
    bool m_virtual_router_name_isSet;
    bool m_virtual_router_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateVirtualRouterInput)

#endif // OAICreateVirtualRouterInput_H
