/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpGatewayRouteMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpGatewayRouteMatch::OAIHttpGatewayRouteMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpGatewayRouteMatch::OAIHttpGatewayRouteMatch() {
    this->initializeModel();
}

OAIHttpGatewayRouteMatch::~OAIHttpGatewayRouteMatch() {}

void OAIHttpGatewayRouteMatch::initializeModel() {

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_query_parameters_isSet = false;
    m_query_parameters_isValid = false;
}

void OAIHttpGatewayRouteMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpGatewayRouteMatch::fromJsonObject(QJsonObject json) {

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_query_parameters_isValid = ::OpenAPI::fromJsonValue(m_query_parameters, json[QString("queryParameters")]);
    m_query_parameters_isSet = !json[QString("queryParameters")].isNull() && m_query_parameters_isValid;
}

QString OAIHttpGatewayRouteMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpGatewayRouteMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_headers.isSet()) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_hostname.isSet()) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_method.isSet()) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_path.isSet()) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_query_parameters.isSet()) {
        obj.insert(QString("queryParameters"), ::OpenAPI::toJsonValue(m_query_parameters));
    }
    return obj;
}

QList OAIHttpGatewayRouteMatch::getHeaders() const {
    return m_headers;
}
void OAIHttpGatewayRouteMatch::setHeaders(const QList &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIHttpGatewayRouteMatch::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIHttpGatewayRouteMatch::is_headers_Valid() const{
    return m_headers_isValid;
}

OAIHttpGatewayRouteMatch_hostname OAIHttpGatewayRouteMatch::getHostname() const {
    return m_hostname;
}
void OAIHttpGatewayRouteMatch::setHostname(const OAIHttpGatewayRouteMatch_hostname &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIHttpGatewayRouteMatch::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIHttpGatewayRouteMatch::is_hostname_Valid() const{
    return m_hostname_isValid;
}

OAIHttpMethod OAIHttpGatewayRouteMatch::getMethod() const {
    return m_method;
}
void OAIHttpGatewayRouteMatch::setMethod(const OAIHttpMethod &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIHttpGatewayRouteMatch::is_method_Set() const{
    return m_method_isSet;
}

bool OAIHttpGatewayRouteMatch::is_method_Valid() const{
    return m_method_isValid;
}

OAIHttpGatewayRouteMatch_path OAIHttpGatewayRouteMatch::getPath() const {
    return m_path;
}
void OAIHttpGatewayRouteMatch::setPath(const OAIHttpGatewayRouteMatch_path &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIHttpGatewayRouteMatch::is_path_Set() const{
    return m_path_isSet;
}

bool OAIHttpGatewayRouteMatch::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIHttpGatewayRouteMatch::getPort() const {
    return m_port;
}
void OAIHttpGatewayRouteMatch::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIHttpGatewayRouteMatch::is_port_Set() const{
    return m_port_isSet;
}

bool OAIHttpGatewayRouteMatch::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIHttpGatewayRouteMatch::getPrefix() const {
    return m_prefix;
}
void OAIHttpGatewayRouteMatch::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIHttpGatewayRouteMatch::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIHttpGatewayRouteMatch::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QList OAIHttpGatewayRouteMatch::getQueryParameters() const {
    return m_query_parameters;
}
void OAIHttpGatewayRouteMatch::setQueryParameters(const QList &query_parameters) {
    m_query_parameters = query_parameters;
    m_query_parameters_isSet = true;
}

bool OAIHttpGatewayRouteMatch::is_query_parameters_Set() const{
    return m_query_parameters_isSet;
}

bool OAIHttpGatewayRouteMatch::is_query_parameters_Valid() const{
    return m_query_parameters_isValid;
}

bool OAIHttpGatewayRouteMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpGatewayRouteMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
