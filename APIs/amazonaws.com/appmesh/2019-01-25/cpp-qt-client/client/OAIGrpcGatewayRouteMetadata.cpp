/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrpcGatewayRouteMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrpcGatewayRouteMetadata::OAIGrpcGatewayRouteMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrpcGatewayRouteMetadata::OAIGrpcGatewayRouteMetadata() {
    this->initializeModel();
}

OAIGrpcGatewayRouteMetadata::~OAIGrpcGatewayRouteMetadata() {}

void OAIGrpcGatewayRouteMetadata::initializeModel() {

    m_invert_isSet = false;
    m_invert_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGrpcGatewayRouteMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrpcGatewayRouteMetadata::fromJsonObject(QJsonObject json) {

    m_invert_isValid = ::OpenAPI::fromJsonValue(m_invert, json[QString("invert")]);
    m_invert_isSet = !json[QString("invert")].isNull() && m_invert_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGrpcGatewayRouteMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrpcGatewayRouteMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_invert_isSet) {
        obj.insert(QString("invert"), ::OpenAPI::toJsonValue(m_invert));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

bool OAIGrpcGatewayRouteMetadata::getInvert() const {
    return m_invert;
}
void OAIGrpcGatewayRouteMetadata::setInvert(const bool &invert) {
    m_invert = invert;
    m_invert_isSet = true;
}

bool OAIGrpcGatewayRouteMetadata::is_invert_Set() const{
    return m_invert_isSet;
}

bool OAIGrpcGatewayRouteMetadata::is_invert_Valid() const{
    return m_invert_isValid;
}

OAIGrpcGatewayRouteMetadata_match OAIGrpcGatewayRouteMetadata::getMatch() const {
    return m_match;
}
void OAIGrpcGatewayRouteMetadata::setMatch(const OAIGrpcGatewayRouteMetadata_match &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIGrpcGatewayRouteMetadata::is_match_Set() const{
    return m_match_isSet;
}

bool OAIGrpcGatewayRouteMetadata::is_match_Valid() const{
    return m_match_isValid;
}

QString OAIGrpcGatewayRouteMetadata::getName() const {
    return m_name;
}
void OAIGrpcGatewayRouteMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGrpcGatewayRouteMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGrpcGatewayRouteMetadata::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGrpcGatewayRouteMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrpcGatewayRouteMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
