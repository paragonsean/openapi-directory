/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrpcGatewayRoute_match.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrpcGatewayRoute_match::OAIGrpcGatewayRoute_match(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrpcGatewayRoute_match::OAIGrpcGatewayRoute_match() {
    this->initializeModel();
}

OAIGrpcGatewayRoute_match::~OAIGrpcGatewayRoute_match() {}

void OAIGrpcGatewayRoute_match::initializeModel() {

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIGrpcGatewayRoute_match::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrpcGatewayRoute_match::fromJsonObject(QJsonObject json) {

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;
}

QString OAIGrpcGatewayRoute_match::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrpcGatewayRoute_match::asJsonObject() const {
    QJsonObject obj;
    if (m_hostname.isSet()) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

OAIGrpcGatewayRouteMatch_hostname OAIGrpcGatewayRoute_match::getHostname() const {
    return m_hostname;
}
void OAIGrpcGatewayRoute_match::setHostname(const OAIGrpcGatewayRouteMatch_hostname &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIGrpcGatewayRoute_match::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIGrpcGatewayRoute_match::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QList OAIGrpcGatewayRoute_match::getMetadata() const {
    return m_metadata;
}
void OAIGrpcGatewayRoute_match::setMetadata(const QList &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGrpcGatewayRoute_match::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGrpcGatewayRoute_match::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint32 OAIGrpcGatewayRoute_match::getPort() const {
    return m_port;
}
void OAIGrpcGatewayRoute_match::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIGrpcGatewayRoute_match::is_port_Set() const{
    return m_port_isSet;
}

bool OAIGrpcGatewayRoute_match::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIGrpcGatewayRoute_match::getServiceName() const {
    return m_service_name;
}
void OAIGrpcGatewayRoute_match::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIGrpcGatewayRoute_match::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIGrpcGatewayRoute_match::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIGrpcGatewayRoute_match::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hostname.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrpcGatewayRoute_match::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
