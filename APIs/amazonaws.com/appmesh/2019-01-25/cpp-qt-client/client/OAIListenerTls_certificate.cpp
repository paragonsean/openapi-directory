/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListenerTls_certificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListenerTls_certificate::OAIListenerTls_certificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListenerTls_certificate::OAIListenerTls_certificate() {
    this->initializeModel();
}

OAIListenerTls_certificate::~OAIListenerTls_certificate() {}

void OAIListenerTls_certificate::initializeModel() {

    m_acm_isSet = false;
    m_acm_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_sds_isSet = false;
    m_sds_isValid = false;
}

void OAIListenerTls_certificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListenerTls_certificate::fromJsonObject(QJsonObject json) {

    m_acm_isValid = ::OpenAPI::fromJsonValue(m_acm, json[QString("acm")]);
    m_acm_isSet = !json[QString("acm")].isNull() && m_acm_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_sds_isValid = ::OpenAPI::fromJsonValue(m_sds, json[QString("sds")]);
    m_sds_isSet = !json[QString("sds")].isNull() && m_sds_isValid;
}

QString OAIListenerTls_certificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListenerTls_certificate::asJsonObject() const {
    QJsonObject obj;
    if (m_acm.isSet()) {
        obj.insert(QString("acm"), ::OpenAPI::toJsonValue(m_acm));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_sds.isSet()) {
        obj.insert(QString("sds"), ::OpenAPI::toJsonValue(m_sds));
    }
    return obj;
}

OAIListenerTlsCertificate_acm OAIListenerTls_certificate::getAcm() const {
    return m_acm;
}
void OAIListenerTls_certificate::setAcm(const OAIListenerTlsCertificate_acm &acm) {
    m_acm = acm;
    m_acm_isSet = true;
}

bool OAIListenerTls_certificate::is_acm_Set() const{
    return m_acm_isSet;
}

bool OAIListenerTls_certificate::is_acm_Valid() const{
    return m_acm_isValid;
}

OAIListenerTlsCertificate_file OAIListenerTls_certificate::getFile() const {
    return m_file;
}
void OAIListenerTls_certificate::setFile(const OAIListenerTlsCertificate_file &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIListenerTls_certificate::is_file_Set() const{
    return m_file_isSet;
}

bool OAIListenerTls_certificate::is_file_Valid() const{
    return m_file_isValid;
}

OAIListenerTlsCertificate_sds OAIListenerTls_certificate::getSds() const {
    return m_sds;
}
void OAIListenerTls_certificate::setSds(const OAIListenerTlsCertificate_sds &sds) {
    m_sds = sds;
    m_sds_isSet = true;
}

bool OAIListenerTls_certificate::is_sds_Set() const{
    return m_sds_isSet;
}

bool OAIListenerTls_certificate::is_sds_Valid() const{
    return m_sds_isValid;
}

bool OAIListenerTls_certificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sds.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListenerTls_certificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
