/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListener.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListener::OAIListener(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListener::OAIListener() {
    this->initializeModel();
}

OAIListener::~OAIListener() {}

void OAIListener::initializeModel() {

    m_connection_pool_isSet = false;
    m_connection_pool_isValid = false;

    m_health_check_isSet = false;
    m_health_check_isValid = false;

    m_outlier_detection_isSet = false;
    m_outlier_detection_isValid = false;

    m_port_mapping_isSet = false;
    m_port_mapping_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_tls_isSet = false;
    m_tls_isValid = false;
}

void OAIListener::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListener::fromJsonObject(QJsonObject json) {

    m_connection_pool_isValid = ::OpenAPI::fromJsonValue(m_connection_pool, json[QString("connectionPool")]);
    m_connection_pool_isSet = !json[QString("connectionPool")].isNull() && m_connection_pool_isValid;

    m_health_check_isValid = ::OpenAPI::fromJsonValue(m_health_check, json[QString("healthCheck")]);
    m_health_check_isSet = !json[QString("healthCheck")].isNull() && m_health_check_isValid;

    m_outlier_detection_isValid = ::OpenAPI::fromJsonValue(m_outlier_detection, json[QString("outlierDetection")]);
    m_outlier_detection_isSet = !json[QString("outlierDetection")].isNull() && m_outlier_detection_isValid;

    m_port_mapping_isValid = ::OpenAPI::fromJsonValue(m_port_mapping, json[QString("portMapping")]);
    m_port_mapping_isSet = !json[QString("portMapping")].isNull() && m_port_mapping_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_tls_isValid = ::OpenAPI::fromJsonValue(m_tls, json[QString("tls")]);
    m_tls_isSet = !json[QString("tls")].isNull() && m_tls_isValid;
}

QString OAIListener::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListener::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_pool.isSet()) {
        obj.insert(QString("connectionPool"), ::OpenAPI::toJsonValue(m_connection_pool));
    }
    if (m_health_check.isSet()) {
        obj.insert(QString("healthCheck"), ::OpenAPI::toJsonValue(m_health_check));
    }
    if (m_outlier_detection.isSet()) {
        obj.insert(QString("outlierDetection"), ::OpenAPI::toJsonValue(m_outlier_detection));
    }
    if (m_port_mapping.isSet()) {
        obj.insert(QString("portMapping"), ::OpenAPI::toJsonValue(m_port_mapping));
    }
    if (m_timeout.isSet()) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_tls.isSet()) {
        obj.insert(QString("tls"), ::OpenAPI::toJsonValue(m_tls));
    }
    return obj;
}

OAIListener_connectionPool OAIListener::getConnectionPool() const {
    return m_connection_pool;
}
void OAIListener::setConnectionPool(const OAIListener_connectionPool &connection_pool) {
    m_connection_pool = connection_pool;
    m_connection_pool_isSet = true;
}

bool OAIListener::is_connection_pool_Set() const{
    return m_connection_pool_isSet;
}

bool OAIListener::is_connection_pool_Valid() const{
    return m_connection_pool_isValid;
}

OAIListener_healthCheck OAIListener::getHealthCheck() const {
    return m_health_check;
}
void OAIListener::setHealthCheck(const OAIListener_healthCheck &health_check) {
    m_health_check = health_check;
    m_health_check_isSet = true;
}

bool OAIListener::is_health_check_Set() const{
    return m_health_check_isSet;
}

bool OAIListener::is_health_check_Valid() const{
    return m_health_check_isValid;
}

OAIListener_outlierDetection OAIListener::getOutlierDetection() const {
    return m_outlier_detection;
}
void OAIListener::setOutlierDetection(const OAIListener_outlierDetection &outlier_detection) {
    m_outlier_detection = outlier_detection;
    m_outlier_detection_isSet = true;
}

bool OAIListener::is_outlier_detection_Set() const{
    return m_outlier_detection_isSet;
}

bool OAIListener::is_outlier_detection_Valid() const{
    return m_outlier_detection_isValid;
}

OAIListener_portMapping OAIListener::getPortMapping() const {
    return m_port_mapping;
}
void OAIListener::setPortMapping(const OAIListener_portMapping &port_mapping) {
    m_port_mapping = port_mapping;
    m_port_mapping_isSet = true;
}

bool OAIListener::is_port_mapping_Set() const{
    return m_port_mapping_isSet;
}

bool OAIListener::is_port_mapping_Valid() const{
    return m_port_mapping_isValid;
}

OAIListener_timeout OAIListener::getTimeout() const {
    return m_timeout;
}
void OAIListener::setTimeout(const OAIListener_timeout &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIListener::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIListener::is_timeout_Valid() const{
    return m_timeout_isValid;
}

OAIListener_tls OAIListener::getTls() const {
    return m_tls;
}
void OAIListener::setTls(const OAIListener_tls &tls) {
    m_tls = tls;
    m_tls_isSet = true;
}

bool OAIListener::is_tls_Set() const{
    return m_tls_isSet;
}

bool OAIListener::is_tls_Valid() const{
    return m_tls_isValid;
}

bool OAIListener::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outlier_detection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListener::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_port_mapping_isValid && true;
}

} // namespace OpenAPI
