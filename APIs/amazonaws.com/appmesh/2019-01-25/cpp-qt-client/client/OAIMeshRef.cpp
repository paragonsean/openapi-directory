/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeshRef.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeshRef::OAIMeshRef(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeshRef::OAIMeshRef() {
    this->initializeModel();
}

OAIMeshRef::~OAIMeshRef() {}

void OAIMeshRef::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_mesh_name_isSet = false;
    m_mesh_name_isValid = false;

    m_mesh_owner_isSet = false;
    m_mesh_owner_isValid = false;

    m_resource_owner_isSet = false;
    m_resource_owner_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIMeshRef::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeshRef::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_mesh_name_isValid = ::OpenAPI::fromJsonValue(m_mesh_name, json[QString("meshName")]);
    m_mesh_name_isSet = !json[QString("meshName")].isNull() && m_mesh_name_isValid;

    m_mesh_owner_isValid = ::OpenAPI::fromJsonValue(m_mesh_owner, json[QString("meshOwner")]);
    m_mesh_owner_isSet = !json[QString("meshOwner")].isNull() && m_mesh_owner_isValid;

    m_resource_owner_isValid = ::OpenAPI::fromJsonValue(m_resource_owner, json[QString("resourceOwner")]);
    m_resource_owner_isSet = !json[QString("resourceOwner")].isNull() && m_resource_owner_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIMeshRef::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeshRef::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_mesh_name_isSet) {
        obj.insert(QString("meshName"), ::OpenAPI::toJsonValue(m_mesh_name));
    }
    if (m_mesh_owner_isSet) {
        obj.insert(QString("meshOwner"), ::OpenAPI::toJsonValue(m_mesh_owner));
    }
    if (m_resource_owner_isSet) {
        obj.insert(QString("resourceOwner"), ::OpenAPI::toJsonValue(m_resource_owner));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIMeshRef::getArn() const {
    return m_arn;
}
void OAIMeshRef::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIMeshRef::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIMeshRef::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIMeshRef::getCreatedAt() const {
    return m_created_at;
}
void OAIMeshRef::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMeshRef::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMeshRef::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIMeshRef::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIMeshRef::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIMeshRef::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIMeshRef::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIMeshRef::getMeshName() const {
    return m_mesh_name;
}
void OAIMeshRef::setMeshName(const QString &mesh_name) {
    m_mesh_name = mesh_name;
    m_mesh_name_isSet = true;
}

bool OAIMeshRef::is_mesh_name_Set() const{
    return m_mesh_name_isSet;
}

bool OAIMeshRef::is_mesh_name_Valid() const{
    return m_mesh_name_isValid;
}

QString OAIMeshRef::getMeshOwner() const {
    return m_mesh_owner;
}
void OAIMeshRef::setMeshOwner(const QString &mesh_owner) {
    m_mesh_owner = mesh_owner;
    m_mesh_owner_isSet = true;
}

bool OAIMeshRef::is_mesh_owner_Set() const{
    return m_mesh_owner_isSet;
}

bool OAIMeshRef::is_mesh_owner_Valid() const{
    return m_mesh_owner_isValid;
}

QString OAIMeshRef::getResourceOwner() const {
    return m_resource_owner;
}
void OAIMeshRef::setResourceOwner(const QString &resource_owner) {
    m_resource_owner = resource_owner;
    m_resource_owner_isSet = true;
}

bool OAIMeshRef::is_resource_owner_Set() const{
    return m_resource_owner_isSet;
}

bool OAIMeshRef::is_resource_owner_Valid() const{
    return m_resource_owner_isValid;
}

qint32 OAIMeshRef::getVersion() const {
    return m_version;
}
void OAIMeshRef::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIMeshRef::is_version_Set() const{
    return m_version_isSet;
}

bool OAIMeshRef::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIMeshRef::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeshRef::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_created_at_isValid && m_last_updated_at_isValid && m_mesh_name_isValid && m_mesh_owner_isValid && m_resource_owner_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
