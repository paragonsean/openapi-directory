/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateVirtualServiceOutput_virtualService.h
 *
 * 
 */

#ifndef OAIUpdateVirtualServiceOutput_virtualService_H
#define OAIUpdateVirtualServiceOutput_virtualService_H

#include <QJsonObject>

#include "OAIResourceMetadata.h"
#include "OAIVirtualServiceData_spec.h"
#include "OAIVirtualServiceData_status.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIResourceMetadata;
class OAIVirtualServiceData_spec;
class OAIVirtualServiceData_status;

class OAIUpdateVirtualServiceOutput_virtualService : public OAIObject {
public:
    OAIUpdateVirtualServiceOutput_virtualService();
    OAIUpdateVirtualServiceOutput_virtualService(QString json);
    ~OAIUpdateVirtualServiceOutput_virtualService() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMeshName() const;
    void setMeshName(const QString &mesh_name);
    bool is_mesh_name_Set() const;
    bool is_mesh_name_Valid() const;

    OAIResourceMetadata getMetadata() const;
    void setMetadata(const OAIResourceMetadata &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    OAIVirtualServiceData_spec getSpec() const;
    void setSpec(const OAIVirtualServiceData_spec &spec);
    bool is_spec_Set() const;
    bool is_spec_Valid() const;

    OAIVirtualServiceData_status getStatus() const;
    void setStatus(const OAIVirtualServiceData_status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getVirtualServiceName() const;
    void setVirtualServiceName(const QString &virtual_service_name);
    bool is_virtual_service_name_Set() const;
    bool is_virtual_service_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_mesh_name;
    bool m_mesh_name_isSet;
    bool m_mesh_name_isValid;

    OAIResourceMetadata m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    OAIVirtualServiceData_spec m_spec;
    bool m_spec_isSet;
    bool m_spec_isValid;

    OAIVirtualServiceData_status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_virtual_service_name;
    bool m_virtual_service_name_isSet;
    bool m_virtual_service_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateVirtualServiceOutput_virtualService)

#endif // OAIUpdateVirtualServiceOutput_virtualService_H
