/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVirtualRouter_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVirtualRouter_request::OAICreateVirtualRouter_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVirtualRouter_request::OAICreateVirtualRouter_request() {
    this->initializeModel();
}

OAICreateVirtualRouter_request::~OAICreateVirtualRouter_request() {}

void OAICreateVirtualRouter_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_virtual_router_name_isSet = false;
    m_virtual_router_name_isValid = false;
}

void OAICreateVirtualRouter_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVirtualRouter_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_virtual_router_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_router_name, json[QString("virtualRouterName")]);
    m_virtual_router_name_isSet = !json[QString("virtualRouterName")].isNull() && m_virtual_router_name_isValid;
}

QString OAICreateVirtualRouter_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVirtualRouter_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_virtual_router_name_isSet) {
        obj.insert(QString("virtualRouterName"), ::OpenAPI::toJsonValue(m_virtual_router_name));
    }
    return obj;
}

QString OAICreateVirtualRouter_request::getClientToken() const {
    return m_client_token;
}
void OAICreateVirtualRouter_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateVirtualRouter_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateVirtualRouter_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateVirtualRouter_request_spec OAICreateVirtualRouter_request::getSpec() const {
    return m_spec;
}
void OAICreateVirtualRouter_request::setSpec(const OAICreateVirtualRouter_request_spec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAICreateVirtualRouter_request::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAICreateVirtualRouter_request::is_spec_Valid() const{
    return m_spec_isValid;
}

QList<OAITagRef> OAICreateVirtualRouter_request::getTags() const {
    return m_tags;
}
void OAICreateVirtualRouter_request::setTags(const QList<OAITagRef> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateVirtualRouter_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateVirtualRouter_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateVirtualRouter_request::getVirtualRouterName() const {
    return m_virtual_router_name;
}
void OAICreateVirtualRouter_request::setVirtualRouterName(const QString &virtual_router_name) {
    m_virtual_router_name = virtual_router_name;
    m_virtual_router_name_isSet = true;
}

bool OAICreateVirtualRouter_request::is_virtual_router_name_Set() const{
    return m_virtual_router_name_isSet;
}

bool OAICreateVirtualRouter_request::is_virtual_router_name_Valid() const{
    return m_virtual_router_name_isValid;
}

bool OAICreateVirtualRouter_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_router_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVirtualRouter_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_spec_isValid && m_virtual_router_name_isValid && true;
}

} // namespace OpenAPI
