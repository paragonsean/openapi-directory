/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListener_connectionPool.h
 *
 * 
 */

#ifndef OAIListener_connectionPool_H
#define OAIListener_connectionPool_H

#include <QJsonObject>

#include "OAIVirtualNodeConnectionPool_grpc.h"
#include "OAIVirtualNodeConnectionPool_http.h"
#include "OAIVirtualNodeConnectionPool_http2.h"
#include "OAIVirtualNodeConnectionPool_tcp.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVirtualNodeConnectionPool_grpc;
class OAIVirtualNodeConnectionPool_http;
class OAIVirtualNodeConnectionPool_http2;
class OAIVirtualNodeConnectionPool_tcp;

class OAIListener_connectionPool : public OAIObject {
public:
    OAIListener_connectionPool();
    OAIListener_connectionPool(QString json);
    ~OAIListener_connectionPool() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIVirtualNodeConnectionPool_grpc getGrpc() const;
    void setGrpc(const OAIVirtualNodeConnectionPool_grpc &grpc);
    bool is_grpc_Set() const;
    bool is_grpc_Valid() const;

    OAIVirtualNodeConnectionPool_http getHttp() const;
    void setHttp(const OAIVirtualNodeConnectionPool_http &http);
    bool is_http_Set() const;
    bool is_http_Valid() const;

    OAIVirtualNodeConnectionPool_http2 getHttp2() const;
    void setHttp2(const OAIVirtualNodeConnectionPool_http2 &http2);
    bool is_http2_Set() const;
    bool is_http2_Valid() const;

    OAIVirtualNodeConnectionPool_tcp getTcp() const;
    void setTcp(const OAIVirtualNodeConnectionPool_tcp &tcp);
    bool is_tcp_Set() const;
    bool is_tcp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIVirtualNodeConnectionPool_grpc m_grpc;
    bool m_grpc_isSet;
    bool m_grpc_isValid;

    OAIVirtualNodeConnectionPool_http m_http;
    bool m_http_isSet;
    bool m_http_isValid;

    OAIVirtualNodeConnectionPool_http2 m_http2;
    bool m_http2_isSet;
    bool m_http2_isValid;

    OAIVirtualNodeConnectionPool_tcp m_tcp;
    bool m_tcp_isSet;
    bool m_tcp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListener_connectionPool)

#endif // OAIListener_connectionPool_H
