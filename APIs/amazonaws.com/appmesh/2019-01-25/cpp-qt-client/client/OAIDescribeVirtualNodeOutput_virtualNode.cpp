/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeVirtualNodeOutput_virtualNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeVirtualNodeOutput_virtualNode::OAIDescribeVirtualNodeOutput_virtualNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeVirtualNodeOutput_virtualNode::OAIDescribeVirtualNodeOutput_virtualNode() {
    this->initializeModel();
}

OAIDescribeVirtualNodeOutput_virtualNode::~OAIDescribeVirtualNodeOutput_virtualNode() {}

void OAIDescribeVirtualNodeOutput_virtualNode::initializeModel() {

    m_mesh_name_isSet = false;
    m_mesh_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_virtual_node_name_isSet = false;
    m_virtual_node_name_isValid = false;
}

void OAIDescribeVirtualNodeOutput_virtualNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeVirtualNodeOutput_virtualNode::fromJsonObject(QJsonObject json) {

    m_mesh_name_isValid = ::OpenAPI::fromJsonValue(m_mesh_name, json[QString("meshName")]);
    m_mesh_name_isSet = !json[QString("meshName")].isNull() && m_mesh_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_virtual_node_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_node_name, json[QString("virtualNodeName")]);
    m_virtual_node_name_isSet = !json[QString("virtualNodeName")].isNull() && m_virtual_node_name_isValid;
}

QString OAIDescribeVirtualNodeOutput_virtualNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeVirtualNodeOutput_virtualNode::asJsonObject() const {
    QJsonObject obj;
    if (m_mesh_name_isSet) {
        obj.insert(QString("meshName"), ::OpenAPI::toJsonValue(m_mesh_name));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_virtual_node_name_isSet) {
        obj.insert(QString("virtualNodeName"), ::OpenAPI::toJsonValue(m_virtual_node_name));
    }
    return obj;
}

QString OAIDescribeVirtualNodeOutput_virtualNode::getMeshName() const {
    return m_mesh_name;
}
void OAIDescribeVirtualNodeOutput_virtualNode::setMeshName(const QString &mesh_name) {
    m_mesh_name = mesh_name;
    m_mesh_name_isSet = true;
}

bool OAIDescribeVirtualNodeOutput_virtualNode::is_mesh_name_Set() const{
    return m_mesh_name_isSet;
}

bool OAIDescribeVirtualNodeOutput_virtualNode::is_mesh_name_Valid() const{
    return m_mesh_name_isValid;
}

OAIVirtualNodeData_metadata OAIDescribeVirtualNodeOutput_virtualNode::getMetadata() const {
    return m_metadata;
}
void OAIDescribeVirtualNodeOutput_virtualNode::setMetadata(const OAIVirtualNodeData_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDescribeVirtualNodeOutput_virtualNode::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDescribeVirtualNodeOutput_virtualNode::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIVirtualNodeData_spec OAIDescribeVirtualNodeOutput_virtualNode::getSpec() const {
    return m_spec;
}
void OAIDescribeVirtualNodeOutput_virtualNode::setSpec(const OAIVirtualNodeData_spec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIDescribeVirtualNodeOutput_virtualNode::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIDescribeVirtualNodeOutput_virtualNode::is_spec_Valid() const{
    return m_spec_isValid;
}

OAIVirtualNodeData_status OAIDescribeVirtualNodeOutput_virtualNode::getStatus() const {
    return m_status;
}
void OAIDescribeVirtualNodeOutput_virtualNode::setStatus(const OAIVirtualNodeData_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeVirtualNodeOutput_virtualNode::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeVirtualNodeOutput_virtualNode::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeVirtualNodeOutput_virtualNode::getVirtualNodeName() const {
    return m_virtual_node_name;
}
void OAIDescribeVirtualNodeOutput_virtualNode::setVirtualNodeName(const QString &virtual_node_name) {
    m_virtual_node_name = virtual_node_name;
    m_virtual_node_name_isSet = true;
}

bool OAIDescribeVirtualNodeOutput_virtualNode::is_virtual_node_name_Set() const{
    return m_virtual_node_name_isSet;
}

bool OAIDescribeVirtualNodeOutput_virtualNode::is_virtual_node_name_Valid() const{
    return m_virtual_node_name_isValid;
}

bool OAIDescribeVirtualNodeOutput_virtualNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mesh_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeVirtualNodeOutput_virtualNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mesh_name_isValid && m_metadata_isValid && m_spec_isValid && m_status_isValid && m_virtual_node_name_isValid && true;
}

} // namespace OpenAPI
