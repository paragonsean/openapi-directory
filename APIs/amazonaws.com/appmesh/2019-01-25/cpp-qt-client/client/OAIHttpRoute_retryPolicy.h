/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHttpRoute_retryPolicy.h
 *
 * 
 */

#ifndef OAIHttpRoute_retryPolicy_H
#define OAIHttpRoute_retryPolicy_H

#include <QJsonObject>

#include "OAIGrpcRetryPolicy_perRetryTimeout.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGrpcRetryPolicy_perRetryTimeout;

class OAIHttpRoute_retryPolicy : public OAIObject {
public:
    OAIHttpRoute_retryPolicy();
    OAIHttpRoute_retryPolicy(QString json);
    ~OAIHttpRoute_retryPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getHttpRetryEvents() const;
    void setHttpRetryEvents(const QList &http_retry_events);
    bool is_http_retry_events_Set() const;
    bool is_http_retry_events_Valid() const;

    qint32 getMaxRetries() const;
    void setMaxRetries(const qint32 &max_retries);
    bool is_max_retries_Set() const;
    bool is_max_retries_Valid() const;

    OAIGrpcRetryPolicy_perRetryTimeout getPerRetryTimeout() const;
    void setPerRetryTimeout(const OAIGrpcRetryPolicy_perRetryTimeout &per_retry_timeout);
    bool is_per_retry_timeout_Set() const;
    bool is_per_retry_timeout_Valid() const;

    QList getTcpRetryEvents() const;
    void setTcpRetryEvents(const QList &tcp_retry_events);
    bool is_tcp_retry_events_Set() const;
    bool is_tcp_retry_events_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_http_retry_events;
    bool m_http_retry_events_isSet;
    bool m_http_retry_events_isValid;

    qint32 m_max_retries;
    bool m_max_retries_isSet;
    bool m_max_retries_isValid;

    OAIGrpcRetryPolicy_perRetryTimeout m_per_retry_timeout;
    bool m_per_retry_timeout_isSet;
    bool m_per_retry_timeout_isValid;

    QList m_tcp_retry_events;
    bool m_tcp_retry_events_isSet;
    bool m_tcp_retry_events_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHttpRoute_retryPolicy)

#endif // OAIHttpRoute_retryPolicy_H
