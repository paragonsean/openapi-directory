/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRoute_timeout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRoute_timeout::OAIHttpRoute_timeout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRoute_timeout::OAIHttpRoute_timeout() {
    this->initializeModel();
}

OAIHttpRoute_timeout::~OAIHttpRoute_timeout() {}

void OAIHttpRoute_timeout::initializeModel() {

    m_idle_isSet = false;
    m_idle_isValid = false;

    m_per_request_isSet = false;
    m_per_request_isValid = false;
}

void OAIHttpRoute_timeout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRoute_timeout::fromJsonObject(QJsonObject json) {

    m_idle_isValid = ::OpenAPI::fromJsonValue(m_idle, json[QString("idle")]);
    m_idle_isSet = !json[QString("idle")].isNull() && m_idle_isValid;

    m_per_request_isValid = ::OpenAPI::fromJsonValue(m_per_request, json[QString("perRequest")]);
    m_per_request_isSet = !json[QString("perRequest")].isNull() && m_per_request_isValid;
}

QString OAIHttpRoute_timeout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRoute_timeout::asJsonObject() const {
    QJsonObject obj;
    if (m_idle.isSet()) {
        obj.insert(QString("idle"), ::OpenAPI::toJsonValue(m_idle));
    }
    if (m_per_request.isSet()) {
        obj.insert(QString("perRequest"), ::OpenAPI::toJsonValue(m_per_request));
    }
    return obj;
}

OAIGrpcTimeout_idle OAIHttpRoute_timeout::getIdle() const {
    return m_idle;
}
void OAIHttpRoute_timeout::setIdle(const OAIGrpcTimeout_idle &idle) {
    m_idle = idle;
    m_idle_isSet = true;
}

bool OAIHttpRoute_timeout::is_idle_Set() const{
    return m_idle_isSet;
}

bool OAIHttpRoute_timeout::is_idle_Valid() const{
    return m_idle_isValid;
}

OAIGrpcTimeout_perRequest OAIHttpRoute_timeout::getPerRequest() const {
    return m_per_request;
}
void OAIHttpRoute_timeout::setPerRequest(const OAIGrpcTimeout_perRequest &per_request) {
    m_per_request = per_request;
    m_per_request_isSet = true;
}

bool OAIHttpRoute_timeout::is_per_request_Set() const{
    return m_per_request_isSet;
}

bool OAIHttpRoute_timeout::is_per_request_Valid() const{
    return m_per_request_isValid;
}

bool OAIHttpRoute_timeout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_idle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_request.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRoute_timeout::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
