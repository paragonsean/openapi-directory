/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGatewayRoute_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGatewayRoute_request::OAICreateGatewayRoute_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGatewayRoute_request::OAICreateGatewayRoute_request() {
    this->initializeModel();
}

OAICreateGatewayRoute_request::~OAICreateGatewayRoute_request() {}

void OAICreateGatewayRoute_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_gateway_route_name_isSet = false;
    m_gateway_route_name_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateGatewayRoute_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGatewayRoute_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_gateway_route_name_isValid = ::OpenAPI::fromJsonValue(m_gateway_route_name, json[QString("gatewayRouteName")]);
    m_gateway_route_name_isSet = !json[QString("gatewayRouteName")].isNull() && m_gateway_route_name_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateGatewayRoute_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGatewayRoute_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_gateway_route_name_isSet) {
        obj.insert(QString("gatewayRouteName"), ::OpenAPI::toJsonValue(m_gateway_route_name));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateGatewayRoute_request::getClientToken() const {
    return m_client_token;
}
void OAICreateGatewayRoute_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateGatewayRoute_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateGatewayRoute_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateGatewayRoute_request::getGatewayRouteName() const {
    return m_gateway_route_name;
}
void OAICreateGatewayRoute_request::setGatewayRouteName(const QString &gateway_route_name) {
    m_gateway_route_name = gateway_route_name;
    m_gateway_route_name_isSet = true;
}

bool OAICreateGatewayRoute_request::is_gateway_route_name_Set() const{
    return m_gateway_route_name_isSet;
}

bool OAICreateGatewayRoute_request::is_gateway_route_name_Valid() const{
    return m_gateway_route_name_isValid;
}

OAICreateGatewayRoute_request_spec OAICreateGatewayRoute_request::getSpec() const {
    return m_spec;
}
void OAICreateGatewayRoute_request::setSpec(const OAICreateGatewayRoute_request_spec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAICreateGatewayRoute_request::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAICreateGatewayRoute_request::is_spec_Valid() const{
    return m_spec_isValid;
}

QList<OAITagRef> OAICreateGatewayRoute_request::getTags() const {
    return m_tags;
}
void OAICreateGatewayRoute_request::setTags(const QList<OAITagRef> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateGatewayRoute_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateGatewayRoute_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateGatewayRoute_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_route_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGatewayRoute_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gateway_route_name_isValid && m_spec_isValid && true;
}

} // namespace OpenAPI
