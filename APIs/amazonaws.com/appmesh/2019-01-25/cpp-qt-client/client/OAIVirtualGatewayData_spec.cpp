/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualGatewayData_spec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualGatewayData_spec::OAIVirtualGatewayData_spec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualGatewayData_spec::OAIVirtualGatewayData_spec() {
    this->initializeModel();
}

OAIVirtualGatewayData_spec::~OAIVirtualGatewayData_spec() {}

void OAIVirtualGatewayData_spec::initializeModel() {

    m_backend_defaults_isSet = false;
    m_backend_defaults_isValid = false;

    m_listeners_isSet = false;
    m_listeners_isValid = false;

    m_logging_isSet = false;
    m_logging_isValid = false;
}

void OAIVirtualGatewayData_spec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualGatewayData_spec::fromJsonObject(QJsonObject json) {

    m_backend_defaults_isValid = ::OpenAPI::fromJsonValue(m_backend_defaults, json[QString("backendDefaults")]);
    m_backend_defaults_isSet = !json[QString("backendDefaults")].isNull() && m_backend_defaults_isValid;

    m_listeners_isValid = ::OpenAPI::fromJsonValue(m_listeners, json[QString("listeners")]);
    m_listeners_isSet = !json[QString("listeners")].isNull() && m_listeners_isValid;

    m_logging_isValid = ::OpenAPI::fromJsonValue(m_logging, json[QString("logging")]);
    m_logging_isSet = !json[QString("logging")].isNull() && m_logging_isValid;
}

QString OAIVirtualGatewayData_spec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualGatewayData_spec::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_defaults.isSet()) {
        obj.insert(QString("backendDefaults"), ::OpenAPI::toJsonValue(m_backend_defaults));
    }
    if (m_listeners.isSet()) {
        obj.insert(QString("listeners"), ::OpenAPI::toJsonValue(m_listeners));
    }
    if (m_logging.isSet()) {
        obj.insert(QString("logging"), ::OpenAPI::toJsonValue(m_logging));
    }
    return obj;
}

OAICreateVirtualGateway_request_spec_backendDefaults OAIVirtualGatewayData_spec::getBackendDefaults() const {
    return m_backend_defaults;
}
void OAIVirtualGatewayData_spec::setBackendDefaults(const OAICreateVirtualGateway_request_spec_backendDefaults &backend_defaults) {
    m_backend_defaults = backend_defaults;
    m_backend_defaults_isSet = true;
}

bool OAIVirtualGatewayData_spec::is_backend_defaults_Set() const{
    return m_backend_defaults_isSet;
}

bool OAIVirtualGatewayData_spec::is_backend_defaults_Valid() const{
    return m_backend_defaults_isValid;
}

QList OAIVirtualGatewayData_spec::getListeners() const {
    return m_listeners;
}
void OAIVirtualGatewayData_spec::setListeners(const QList &listeners) {
    m_listeners = listeners;
    m_listeners_isSet = true;
}

bool OAIVirtualGatewayData_spec::is_listeners_Set() const{
    return m_listeners_isSet;
}

bool OAIVirtualGatewayData_spec::is_listeners_Valid() const{
    return m_listeners_isValid;
}

OAIVirtualGatewayLogging OAIVirtualGatewayData_spec::getLogging() const {
    return m_logging;
}
void OAIVirtualGatewayData_spec::setLogging(const OAIVirtualGatewayLogging &logging) {
    m_logging = logging;
    m_logging_isSet = true;
}

bool OAIVirtualGatewayData_spec::is_logging_Set() const{
    return m_logging_isSet;
}

bool OAIVirtualGatewayData_spec::is_logging_Valid() const{
    return m_logging_isValid;
}

bool OAIVirtualGatewayData_spec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_listeners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualGatewayData_spec::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_listeners_isValid && true;
}

} // namespace OpenAPI
