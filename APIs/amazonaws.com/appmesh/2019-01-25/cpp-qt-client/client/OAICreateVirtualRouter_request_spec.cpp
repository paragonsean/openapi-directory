/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVirtualRouter_request_spec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVirtualRouter_request_spec::OAICreateVirtualRouter_request_spec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVirtualRouter_request_spec::OAICreateVirtualRouter_request_spec() {
    this->initializeModel();
}

OAICreateVirtualRouter_request_spec::~OAICreateVirtualRouter_request_spec() {}

void OAICreateVirtualRouter_request_spec::initializeModel() {

    m_listeners_isSet = false;
    m_listeners_isValid = false;
}

void OAICreateVirtualRouter_request_spec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVirtualRouter_request_spec::fromJsonObject(QJsonObject json) {

    m_listeners_isValid = ::OpenAPI::fromJsonValue(m_listeners, json[QString("listeners")]);
    m_listeners_isSet = !json[QString("listeners")].isNull() && m_listeners_isValid;
}

QString OAICreateVirtualRouter_request_spec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVirtualRouter_request_spec::asJsonObject() const {
    QJsonObject obj;
    if (m_listeners.isSet()) {
        obj.insert(QString("listeners"), ::OpenAPI::toJsonValue(m_listeners));
    }
    return obj;
}

QList OAICreateVirtualRouter_request_spec::getListeners() const {
    return m_listeners;
}
void OAICreateVirtualRouter_request_spec::setListeners(const QList &listeners) {
    m_listeners = listeners;
    m_listeners_isSet = true;
}

bool OAICreateVirtualRouter_request_spec::is_listeners_Set() const{
    return m_listeners_isSet;
}

bool OAICreateVirtualRouter_request_spec::is_listeners_Valid() const{
    return m_listeners_isValid;
}

bool OAICreateVirtualRouter_request_spec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_listeners.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVirtualRouter_request_spec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
