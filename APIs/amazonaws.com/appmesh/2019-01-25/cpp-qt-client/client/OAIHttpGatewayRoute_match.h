/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHttpGatewayRoute_match.h
 *
 * 
 */

#ifndef OAIHttpGatewayRoute_match_H
#define OAIHttpGatewayRoute_match_H

#include <QJsonObject>

#include "OAIHttpGatewayRouteMatch_hostname.h"
#include "OAIHttpGatewayRouteMatch_path.h"
#include "OAIHttpMethod.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHttpGatewayRouteMatch_hostname;
class OAIHttpGatewayRouteMatch_path;

class OAIHttpGatewayRoute_match : public OAIObject {
public:
    OAIHttpGatewayRoute_match();
    OAIHttpGatewayRoute_match(QString json);
    ~OAIHttpGatewayRoute_match() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getHeaders() const;
    void setHeaders(const QList &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    OAIHttpGatewayRouteMatch_hostname getHostname() const;
    void setHostname(const OAIHttpGatewayRouteMatch_hostname &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    OAIHttpMethod getMethod() const;
    void setMethod(const OAIHttpMethod &method);
    bool is_method_Set() const;
    bool is_method_Valid() const;

    OAIHttpGatewayRouteMatch_path getPath() const;
    void setPath(const OAIHttpGatewayRouteMatch_path &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getPrefix() const;
    void setPrefix(const QString &prefix);
    bool is_prefix_Set() const;
    bool is_prefix_Valid() const;

    QList getQueryParameters() const;
    void setQueryParameters(const QList &query_parameters);
    bool is_query_parameters_Set() const;
    bool is_query_parameters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;

    OAIHttpGatewayRouteMatch_hostname m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    OAIHttpMethod m_method;
    bool m_method_isSet;
    bool m_method_isValid;

    OAIHttpGatewayRouteMatch_path m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_prefix;
    bool m_prefix_isSet;
    bool m_prefix_isValid;

    QList m_query_parameters;
    bool m_query_parameters_isSet;
    bool m_query_parameters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHttpGatewayRoute_match)

#endif // OAIHttpGatewayRoute_match_H
