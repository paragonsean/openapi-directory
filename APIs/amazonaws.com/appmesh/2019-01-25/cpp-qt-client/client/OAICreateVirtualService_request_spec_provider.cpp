/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVirtualService_request_spec_provider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVirtualService_request_spec_provider::OAICreateVirtualService_request_spec_provider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVirtualService_request_spec_provider::OAICreateVirtualService_request_spec_provider() {
    this->initializeModel();
}

OAICreateVirtualService_request_spec_provider::~OAICreateVirtualService_request_spec_provider() {}

void OAICreateVirtualService_request_spec_provider::initializeModel() {

    m_virtual_node_isSet = false;
    m_virtual_node_isValid = false;

    m_virtual_router_isSet = false;
    m_virtual_router_isValid = false;
}

void OAICreateVirtualService_request_spec_provider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVirtualService_request_spec_provider::fromJsonObject(QJsonObject json) {

    m_virtual_node_isValid = ::OpenAPI::fromJsonValue(m_virtual_node, json[QString("virtualNode")]);
    m_virtual_node_isSet = !json[QString("virtualNode")].isNull() && m_virtual_node_isValid;

    m_virtual_router_isValid = ::OpenAPI::fromJsonValue(m_virtual_router, json[QString("virtualRouter")]);
    m_virtual_router_isSet = !json[QString("virtualRouter")].isNull() && m_virtual_router_isValid;
}

QString OAICreateVirtualService_request_spec_provider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVirtualService_request_spec_provider::asJsonObject() const {
    QJsonObject obj;
    if (m_virtual_node.isSet()) {
        obj.insert(QString("virtualNode"), ::OpenAPI::toJsonValue(m_virtual_node));
    }
    if (m_virtual_router.isSet()) {
        obj.insert(QString("virtualRouter"), ::OpenAPI::toJsonValue(m_virtual_router));
    }
    return obj;
}

OAIVirtualServiceProvider_virtualNode OAICreateVirtualService_request_spec_provider::getVirtualNode() const {
    return m_virtual_node;
}
void OAICreateVirtualService_request_spec_provider::setVirtualNode(const OAIVirtualServiceProvider_virtualNode &virtual_node) {
    m_virtual_node = virtual_node;
    m_virtual_node_isSet = true;
}

bool OAICreateVirtualService_request_spec_provider::is_virtual_node_Set() const{
    return m_virtual_node_isSet;
}

bool OAICreateVirtualService_request_spec_provider::is_virtual_node_Valid() const{
    return m_virtual_node_isValid;
}

OAIVirtualServiceProvider_virtualRouter OAICreateVirtualService_request_spec_provider::getVirtualRouter() const {
    return m_virtual_router;
}
void OAICreateVirtualService_request_spec_provider::setVirtualRouter(const OAIVirtualServiceProvider_virtualRouter &virtual_router) {
    m_virtual_router = virtual_router;
    m_virtual_router_isSet = true;
}

bool OAICreateVirtualService_request_spec_provider::is_virtual_router_Set() const{
    return m_virtual_router_isSet;
}

bool OAICreateVirtualService_request_spec_provider::is_virtual_router_Valid() const{
    return m_virtual_router_isValid;
}

bool OAICreateVirtualService_request_spec_provider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_virtual_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_router.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVirtualService_request_spec_provider::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
