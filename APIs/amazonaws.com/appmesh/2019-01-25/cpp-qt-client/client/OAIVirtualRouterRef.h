/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualRouterRef.h
 *
 * An object that represents a virtual router returned by a list operation.
 */

#ifndef OAIVirtualRouterRef_H
#define OAIVirtualRouterRef_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVirtualRouterRef : public OAIObject {
public:
    OAIVirtualRouterRef();
    OAIVirtualRouterRef(QString json);
    ~OAIVirtualRouterRef() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getLastUpdatedAt() const;
    void setLastUpdatedAt(const QDateTime &last_updated_at);
    bool is_last_updated_at_Set() const;
    bool is_last_updated_at_Valid() const;

    QString getMeshName() const;
    void setMeshName(const QString &mesh_name);
    bool is_mesh_name_Set() const;
    bool is_mesh_name_Valid() const;

    QString getMeshOwner() const;
    void setMeshOwner(const QString &mesh_owner);
    bool is_mesh_owner_Set() const;
    bool is_mesh_owner_Valid() const;

    QString getResourceOwner() const;
    void setResourceOwner(const QString &resource_owner);
    bool is_resource_owner_Set() const;
    bool is_resource_owner_Valid() const;

    qint32 getVersion() const;
    void setVersion(const qint32 &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    QString getVirtualRouterName() const;
    void setVirtualRouterName(const QString &virtual_router_name);
    bool is_virtual_router_name_Set() const;
    bool is_virtual_router_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_last_updated_at;
    bool m_last_updated_at_isSet;
    bool m_last_updated_at_isValid;

    QString m_mesh_name;
    bool m_mesh_name_isSet;
    bool m_mesh_name_isValid;

    QString m_mesh_owner;
    bool m_mesh_owner_isSet;
    bool m_mesh_owner_isValid;

    QString m_resource_owner;
    bool m_resource_owner_isSet;
    bool m_resource_owner_isValid;

    qint32 m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    QString m_virtual_router_name;
    bool m_virtual_router_name_isSet;
    bool m_virtual_router_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualRouterRef)

#endif // OAIVirtualRouterRef_H
