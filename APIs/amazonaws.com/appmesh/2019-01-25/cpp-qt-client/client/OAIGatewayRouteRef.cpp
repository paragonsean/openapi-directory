/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGatewayRouteRef.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGatewayRouteRef::OAIGatewayRouteRef(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGatewayRouteRef::OAIGatewayRouteRef() {
    this->initializeModel();
}

OAIGatewayRouteRef::~OAIGatewayRouteRef() {}

void OAIGatewayRouteRef::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_gateway_route_name_isSet = false;
    m_gateway_route_name_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_mesh_name_isSet = false;
    m_mesh_name_isValid = false;

    m_mesh_owner_isSet = false;
    m_mesh_owner_isValid = false;

    m_resource_owner_isSet = false;
    m_resource_owner_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_virtual_gateway_name_isSet = false;
    m_virtual_gateway_name_isValid = false;
}

void OAIGatewayRouteRef::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGatewayRouteRef::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_gateway_route_name_isValid = ::OpenAPI::fromJsonValue(m_gateway_route_name, json[QString("gatewayRouteName")]);
    m_gateway_route_name_isSet = !json[QString("gatewayRouteName")].isNull() && m_gateway_route_name_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_mesh_name_isValid = ::OpenAPI::fromJsonValue(m_mesh_name, json[QString("meshName")]);
    m_mesh_name_isSet = !json[QString("meshName")].isNull() && m_mesh_name_isValid;

    m_mesh_owner_isValid = ::OpenAPI::fromJsonValue(m_mesh_owner, json[QString("meshOwner")]);
    m_mesh_owner_isSet = !json[QString("meshOwner")].isNull() && m_mesh_owner_isValid;

    m_resource_owner_isValid = ::OpenAPI::fromJsonValue(m_resource_owner, json[QString("resourceOwner")]);
    m_resource_owner_isSet = !json[QString("resourceOwner")].isNull() && m_resource_owner_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_virtual_gateway_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_gateway_name, json[QString("virtualGatewayName")]);
    m_virtual_gateway_name_isSet = !json[QString("virtualGatewayName")].isNull() && m_virtual_gateway_name_isValid;
}

QString OAIGatewayRouteRef::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGatewayRouteRef::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_gateway_route_name_isSet) {
        obj.insert(QString("gatewayRouteName"), ::OpenAPI::toJsonValue(m_gateway_route_name));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_mesh_name_isSet) {
        obj.insert(QString("meshName"), ::OpenAPI::toJsonValue(m_mesh_name));
    }
    if (m_mesh_owner_isSet) {
        obj.insert(QString("meshOwner"), ::OpenAPI::toJsonValue(m_mesh_owner));
    }
    if (m_resource_owner_isSet) {
        obj.insert(QString("resourceOwner"), ::OpenAPI::toJsonValue(m_resource_owner));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_virtual_gateway_name_isSet) {
        obj.insert(QString("virtualGatewayName"), ::OpenAPI::toJsonValue(m_virtual_gateway_name));
    }
    return obj;
}

QString OAIGatewayRouteRef::getArn() const {
    return m_arn;
}
void OAIGatewayRouteRef::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGatewayRouteRef::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGatewayRouteRef::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIGatewayRouteRef::getCreatedAt() const {
    return m_created_at;
}
void OAIGatewayRouteRef::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGatewayRouteRef::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGatewayRouteRef::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIGatewayRouteRef::getGatewayRouteName() const {
    return m_gateway_route_name;
}
void OAIGatewayRouteRef::setGatewayRouteName(const QString &gateway_route_name) {
    m_gateway_route_name = gateway_route_name;
    m_gateway_route_name_isSet = true;
}

bool OAIGatewayRouteRef::is_gateway_route_name_Set() const{
    return m_gateway_route_name_isSet;
}

bool OAIGatewayRouteRef::is_gateway_route_name_Valid() const{
    return m_gateway_route_name_isValid;
}

QDateTime OAIGatewayRouteRef::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIGatewayRouteRef::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIGatewayRouteRef::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIGatewayRouteRef::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIGatewayRouteRef::getMeshName() const {
    return m_mesh_name;
}
void OAIGatewayRouteRef::setMeshName(const QString &mesh_name) {
    m_mesh_name = mesh_name;
    m_mesh_name_isSet = true;
}

bool OAIGatewayRouteRef::is_mesh_name_Set() const{
    return m_mesh_name_isSet;
}

bool OAIGatewayRouteRef::is_mesh_name_Valid() const{
    return m_mesh_name_isValid;
}

QString OAIGatewayRouteRef::getMeshOwner() const {
    return m_mesh_owner;
}
void OAIGatewayRouteRef::setMeshOwner(const QString &mesh_owner) {
    m_mesh_owner = mesh_owner;
    m_mesh_owner_isSet = true;
}

bool OAIGatewayRouteRef::is_mesh_owner_Set() const{
    return m_mesh_owner_isSet;
}

bool OAIGatewayRouteRef::is_mesh_owner_Valid() const{
    return m_mesh_owner_isValid;
}

QString OAIGatewayRouteRef::getResourceOwner() const {
    return m_resource_owner;
}
void OAIGatewayRouteRef::setResourceOwner(const QString &resource_owner) {
    m_resource_owner = resource_owner;
    m_resource_owner_isSet = true;
}

bool OAIGatewayRouteRef::is_resource_owner_Set() const{
    return m_resource_owner_isSet;
}

bool OAIGatewayRouteRef::is_resource_owner_Valid() const{
    return m_resource_owner_isValid;
}

qint32 OAIGatewayRouteRef::getVersion() const {
    return m_version;
}
void OAIGatewayRouteRef::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGatewayRouteRef::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGatewayRouteRef::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIGatewayRouteRef::getVirtualGatewayName() const {
    return m_virtual_gateway_name;
}
void OAIGatewayRouteRef::setVirtualGatewayName(const QString &virtual_gateway_name) {
    m_virtual_gateway_name = virtual_gateway_name;
    m_virtual_gateway_name_isSet = true;
}

bool OAIGatewayRouteRef::is_virtual_gateway_name_Set() const{
    return m_virtual_gateway_name_isSet;
}

bool OAIGatewayRouteRef::is_virtual_gateway_name_Valid() const{
    return m_virtual_gateway_name_isValid;
}

bool OAIGatewayRouteRef::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_route_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_gateway_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGatewayRouteRef::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_created_at_isValid && m_gateway_route_name_isValid && m_last_updated_at_isValid && m_mesh_name_isValid && m_mesh_owner_isValid && m_resource_owner_isValid && m_version_isValid && m_virtual_gateway_name_isValid && true;
}

} // namespace OpenAPI
