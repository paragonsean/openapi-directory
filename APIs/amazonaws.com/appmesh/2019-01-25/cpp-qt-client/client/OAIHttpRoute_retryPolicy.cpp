/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRoute_retryPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRoute_retryPolicy::OAIHttpRoute_retryPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRoute_retryPolicy::OAIHttpRoute_retryPolicy() {
    this->initializeModel();
}

OAIHttpRoute_retryPolicy::~OAIHttpRoute_retryPolicy() {}

void OAIHttpRoute_retryPolicy::initializeModel() {

    m_http_retry_events_isSet = false;
    m_http_retry_events_isValid = false;

    m_max_retries_isSet = false;
    m_max_retries_isValid = false;

    m_per_retry_timeout_isSet = false;
    m_per_retry_timeout_isValid = false;

    m_tcp_retry_events_isSet = false;
    m_tcp_retry_events_isValid = false;
}

void OAIHttpRoute_retryPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRoute_retryPolicy::fromJsonObject(QJsonObject json) {

    m_http_retry_events_isValid = ::OpenAPI::fromJsonValue(m_http_retry_events, json[QString("httpRetryEvents")]);
    m_http_retry_events_isSet = !json[QString("httpRetryEvents")].isNull() && m_http_retry_events_isValid;

    m_max_retries_isValid = ::OpenAPI::fromJsonValue(m_max_retries, json[QString("maxRetries")]);
    m_max_retries_isSet = !json[QString("maxRetries")].isNull() && m_max_retries_isValid;

    m_per_retry_timeout_isValid = ::OpenAPI::fromJsonValue(m_per_retry_timeout, json[QString("perRetryTimeout")]);
    m_per_retry_timeout_isSet = !json[QString("perRetryTimeout")].isNull() && m_per_retry_timeout_isValid;

    m_tcp_retry_events_isValid = ::OpenAPI::fromJsonValue(m_tcp_retry_events, json[QString("tcpRetryEvents")]);
    m_tcp_retry_events_isSet = !json[QString("tcpRetryEvents")].isNull() && m_tcp_retry_events_isValid;
}

QString OAIHttpRoute_retryPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRoute_retryPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_http_retry_events.isSet()) {
        obj.insert(QString("httpRetryEvents"), ::OpenAPI::toJsonValue(m_http_retry_events));
    }
    if (m_max_retries_isSet) {
        obj.insert(QString("maxRetries"), ::OpenAPI::toJsonValue(m_max_retries));
    }
    if (m_per_retry_timeout.isSet()) {
        obj.insert(QString("perRetryTimeout"), ::OpenAPI::toJsonValue(m_per_retry_timeout));
    }
    if (m_tcp_retry_events.isSet()) {
        obj.insert(QString("tcpRetryEvents"), ::OpenAPI::toJsonValue(m_tcp_retry_events));
    }
    return obj;
}

QList OAIHttpRoute_retryPolicy::getHttpRetryEvents() const {
    return m_http_retry_events;
}
void OAIHttpRoute_retryPolicy::setHttpRetryEvents(const QList &http_retry_events) {
    m_http_retry_events = http_retry_events;
    m_http_retry_events_isSet = true;
}

bool OAIHttpRoute_retryPolicy::is_http_retry_events_Set() const{
    return m_http_retry_events_isSet;
}

bool OAIHttpRoute_retryPolicy::is_http_retry_events_Valid() const{
    return m_http_retry_events_isValid;
}

qint32 OAIHttpRoute_retryPolicy::getMaxRetries() const {
    return m_max_retries;
}
void OAIHttpRoute_retryPolicy::setMaxRetries(const qint32 &max_retries) {
    m_max_retries = max_retries;
    m_max_retries_isSet = true;
}

bool OAIHttpRoute_retryPolicy::is_max_retries_Set() const{
    return m_max_retries_isSet;
}

bool OAIHttpRoute_retryPolicy::is_max_retries_Valid() const{
    return m_max_retries_isValid;
}

OAIGrpcRetryPolicy_perRetryTimeout OAIHttpRoute_retryPolicy::getPerRetryTimeout() const {
    return m_per_retry_timeout;
}
void OAIHttpRoute_retryPolicy::setPerRetryTimeout(const OAIGrpcRetryPolicy_perRetryTimeout &per_retry_timeout) {
    m_per_retry_timeout = per_retry_timeout;
    m_per_retry_timeout_isSet = true;
}

bool OAIHttpRoute_retryPolicy::is_per_retry_timeout_Set() const{
    return m_per_retry_timeout_isSet;
}

bool OAIHttpRoute_retryPolicy::is_per_retry_timeout_Valid() const{
    return m_per_retry_timeout_isValid;
}

QList OAIHttpRoute_retryPolicy::getTcpRetryEvents() const {
    return m_tcp_retry_events;
}
void OAIHttpRoute_retryPolicy::setTcpRetryEvents(const QList &tcp_retry_events) {
    m_tcp_retry_events = tcp_retry_events;
    m_tcp_retry_events_isSet = true;
}

bool OAIHttpRoute_retryPolicy::is_tcp_retry_events_Set() const{
    return m_tcp_retry_events_isSet;
}

bool OAIHttpRoute_retryPolicy::is_tcp_retry_events_Valid() const{
    return m_tcp_retry_events_isValid;
}

bool OAIHttpRoute_retryPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_retry_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_retries_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_retry_timeout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tcp_retry_events.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRoute_retryPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_max_retries_isValid && m_per_retry_timeout_isValid && true;
}

} // namespace OpenAPI
