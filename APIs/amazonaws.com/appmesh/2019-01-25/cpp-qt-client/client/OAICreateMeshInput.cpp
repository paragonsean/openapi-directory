/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMeshInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMeshInput::OAICreateMeshInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMeshInput::OAICreateMeshInput() {
    this->initializeModel();
}

OAICreateMeshInput::~OAICreateMeshInput() {}

void OAICreateMeshInput::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_mesh_name_isSet = false;
    m_mesh_name_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateMeshInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMeshInput::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_mesh_name_isValid = ::OpenAPI::fromJsonValue(m_mesh_name, json[QString("meshName")]);
    m_mesh_name_isSet = !json[QString("meshName")].isNull() && m_mesh_name_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateMeshInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMeshInput::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_mesh_name_isSet) {
        obj.insert(QString("meshName"), ::OpenAPI::toJsonValue(m_mesh_name));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateMeshInput::getClientToken() const {
    return m_client_token;
}
void OAICreateMeshInput::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateMeshInput::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateMeshInput::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateMeshInput::getMeshName() const {
    return m_mesh_name;
}
void OAICreateMeshInput::setMeshName(const QString &mesh_name) {
    m_mesh_name = mesh_name;
    m_mesh_name_isSet = true;
}

bool OAICreateMeshInput::is_mesh_name_Set() const{
    return m_mesh_name_isSet;
}

bool OAICreateMeshInput::is_mesh_name_Valid() const{
    return m_mesh_name_isValid;
}

OAICreateMeshInput_spec OAICreateMeshInput::getSpec() const {
    return m_spec;
}
void OAICreateMeshInput::setSpec(const OAICreateMeshInput_spec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAICreateMeshInput::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAICreateMeshInput::is_spec_Valid() const{
    return m_spec_isValid;
}

QList OAICreateMeshInput::getTags() const {
    return m_tags;
}
void OAICreateMeshInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateMeshInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateMeshInput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateMeshInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMeshInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mesh_name_isValid && true;
}

} // namespace OpenAPI
