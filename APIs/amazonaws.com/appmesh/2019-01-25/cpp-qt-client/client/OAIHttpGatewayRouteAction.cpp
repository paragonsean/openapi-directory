/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpGatewayRouteAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpGatewayRouteAction::OAIHttpGatewayRouteAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpGatewayRouteAction::OAIHttpGatewayRouteAction() {
    this->initializeModel();
}

OAIHttpGatewayRouteAction::~OAIHttpGatewayRouteAction() {}

void OAIHttpGatewayRouteAction::initializeModel() {

    m_rewrite_isSet = false;
    m_rewrite_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIHttpGatewayRouteAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpGatewayRouteAction::fromJsonObject(QJsonObject json) {

    m_rewrite_isValid = ::OpenAPI::fromJsonValue(m_rewrite, json[QString("rewrite")]);
    m_rewrite_isSet = !json[QString("rewrite")].isNull() && m_rewrite_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIHttpGatewayRouteAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpGatewayRouteAction::asJsonObject() const {
    QJsonObject obj;
    if (m_rewrite.isSet()) {
        obj.insert(QString("rewrite"), ::OpenAPI::toJsonValue(m_rewrite));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

OAIHttpGatewayRouteAction_rewrite OAIHttpGatewayRouteAction::getRewrite() const {
    return m_rewrite;
}
void OAIHttpGatewayRouteAction::setRewrite(const OAIHttpGatewayRouteAction_rewrite &rewrite) {
    m_rewrite = rewrite;
    m_rewrite_isSet = true;
}

bool OAIHttpGatewayRouteAction::is_rewrite_Set() const{
    return m_rewrite_isSet;
}

bool OAIHttpGatewayRouteAction::is_rewrite_Valid() const{
    return m_rewrite_isValid;
}

OAIGrpcGatewayRouteAction_target OAIHttpGatewayRouteAction::getTarget() const {
    return m_target;
}
void OAIHttpGatewayRouteAction::setTarget(const OAIGrpcGatewayRouteAction_target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIHttpGatewayRouteAction::is_target_Set() const{
    return m_target_isSet;
}

bool OAIHttpGatewayRouteAction::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIHttpGatewayRouteAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rewrite.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpGatewayRouteAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_isValid && true;
}

} // namespace OpenAPI
