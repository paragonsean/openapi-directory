/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOutlierDetection.h
 *
 * An object that represents the outlier detection for a virtual node&#39;s listener.
 */

#ifndef OAIOutlierDetection_H
#define OAIOutlierDetection_H

#include <QJsonObject>

#include "OAIOutlierDetection_baseEjectionDuration.h"
#include "OAIOutlierDetection_interval.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOutlierDetection_baseEjectionDuration;
class OAIOutlierDetection_interval;

class OAIOutlierDetection : public OAIObject {
public:
    OAIOutlierDetection();
    OAIOutlierDetection(QString json);
    ~OAIOutlierDetection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIOutlierDetection_baseEjectionDuration getBaseEjectionDuration() const;
    void setBaseEjectionDuration(const OAIOutlierDetection_baseEjectionDuration &base_ejection_duration);
    bool is_base_ejection_duration_Set() const;
    bool is_base_ejection_duration_Valid() const;

    OAIOutlierDetection_interval getInterval() const;
    void setInterval(const OAIOutlierDetection_interval &interval);
    bool is_interval_Set() const;
    bool is_interval_Valid() const;

    qint32 getMaxEjectionPercent() const;
    void setMaxEjectionPercent(const qint32 &max_ejection_percent);
    bool is_max_ejection_percent_Set() const;
    bool is_max_ejection_percent_Valid() const;

    qint32 getMaxServerErrors() const;
    void setMaxServerErrors(const qint32 &max_server_errors);
    bool is_max_server_errors_Set() const;
    bool is_max_server_errors_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIOutlierDetection_baseEjectionDuration m_base_ejection_duration;
    bool m_base_ejection_duration_isSet;
    bool m_base_ejection_duration_isValid;

    OAIOutlierDetection_interval m_interval;
    bool m_interval_isSet;
    bool m_interval_isValid;

    qint32 m_max_ejection_percent;
    bool m_max_ejection_percent_isSet;
    bool m_max_ejection_percent_isValid;

    qint32 m_max_server_errors;
    bool m_max_server_errors_isSet;
    bool m_max_server_errors_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOutlierDetection)

#endif // OAIOutlierDetection_H
