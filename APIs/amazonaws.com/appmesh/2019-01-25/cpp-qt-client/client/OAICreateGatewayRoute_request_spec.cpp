/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGatewayRoute_request_spec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGatewayRoute_request_spec::OAICreateGatewayRoute_request_spec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGatewayRoute_request_spec::OAICreateGatewayRoute_request_spec() {
    this->initializeModel();
}

OAICreateGatewayRoute_request_spec::~OAICreateGatewayRoute_request_spec() {}

void OAICreateGatewayRoute_request_spec::initializeModel() {

    m_grpc_route_isSet = false;
    m_grpc_route_isValid = false;

    m_http2_route_isSet = false;
    m_http2_route_isValid = false;

    m_http_route_isSet = false;
    m_http_route_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;
}

void OAICreateGatewayRoute_request_spec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGatewayRoute_request_spec::fromJsonObject(QJsonObject json) {

    m_grpc_route_isValid = ::OpenAPI::fromJsonValue(m_grpc_route, json[QString("grpcRoute")]);
    m_grpc_route_isSet = !json[QString("grpcRoute")].isNull() && m_grpc_route_isValid;

    m_http2_route_isValid = ::OpenAPI::fromJsonValue(m_http2_route, json[QString("http2Route")]);
    m_http2_route_isSet = !json[QString("http2Route")].isNull() && m_http2_route_isValid;

    m_http_route_isValid = ::OpenAPI::fromJsonValue(m_http_route, json[QString("httpRoute")]);
    m_http_route_isSet = !json[QString("httpRoute")].isNull() && m_http_route_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;
}

QString OAICreateGatewayRoute_request_spec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGatewayRoute_request_spec::asJsonObject() const {
    QJsonObject obj;
    if (m_grpc_route.isSet()) {
        obj.insert(QString("grpcRoute"), ::OpenAPI::toJsonValue(m_grpc_route));
    }
    if (m_http2_route.isSet()) {
        obj.insert(QString("http2Route"), ::OpenAPI::toJsonValue(m_http2_route));
    }
    if (m_http_route.isSet()) {
        obj.insert(QString("httpRoute"), ::OpenAPI::toJsonValue(m_http_route));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    return obj;
}

OAICreateGatewayRoute_request_spec_grpcRoute OAICreateGatewayRoute_request_spec::getGrpcRoute() const {
    return m_grpc_route;
}
void OAICreateGatewayRoute_request_spec::setGrpcRoute(const OAICreateGatewayRoute_request_spec_grpcRoute &grpc_route) {
    m_grpc_route = grpc_route;
    m_grpc_route_isSet = true;
}

bool OAICreateGatewayRoute_request_spec::is_grpc_route_Set() const{
    return m_grpc_route_isSet;
}

bool OAICreateGatewayRoute_request_spec::is_grpc_route_Valid() const{
    return m_grpc_route_isValid;
}

OAICreateGatewayRoute_request_spec_http2Route OAICreateGatewayRoute_request_spec::getHttp2Route() const {
    return m_http2_route;
}
void OAICreateGatewayRoute_request_spec::setHttp2Route(const OAICreateGatewayRoute_request_spec_http2Route &http2_route) {
    m_http2_route = http2_route;
    m_http2_route_isSet = true;
}

bool OAICreateGatewayRoute_request_spec::is_http2_route_Set() const{
    return m_http2_route_isSet;
}

bool OAICreateGatewayRoute_request_spec::is_http2_route_Valid() const{
    return m_http2_route_isValid;
}

OAICreateGatewayRoute_request_spec_httpRoute OAICreateGatewayRoute_request_spec::getHttpRoute() const {
    return m_http_route;
}
void OAICreateGatewayRoute_request_spec::setHttpRoute(const OAICreateGatewayRoute_request_spec_httpRoute &http_route) {
    m_http_route = http_route;
    m_http_route_isSet = true;
}

bool OAICreateGatewayRoute_request_spec::is_http_route_Set() const{
    return m_http_route_isSet;
}

bool OAICreateGatewayRoute_request_spec::is_http_route_Valid() const{
    return m_http_route_isValid;
}

qint32 OAICreateGatewayRoute_request_spec::getPriority() const {
    return m_priority;
}
void OAICreateGatewayRoute_request_spec::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAICreateGatewayRoute_request_spec::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAICreateGatewayRoute_request_spec::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAICreateGatewayRoute_request_spec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grpc_route.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http2_route.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_route.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGatewayRoute_request_spec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
