/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualGatewayClientPolicy_tls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualGatewayClientPolicy_tls::OAIVirtualGatewayClientPolicy_tls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualGatewayClientPolicy_tls::OAIVirtualGatewayClientPolicy_tls() {
    this->initializeModel();
}

OAIVirtualGatewayClientPolicy_tls::~OAIVirtualGatewayClientPolicy_tls() {}

void OAIVirtualGatewayClientPolicy_tls::initializeModel() {

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_enforce_isSet = false;
    m_enforce_isValid = false;

    m_ports_isSet = false;
    m_ports_isValid = false;

    m_validation_isSet = false;
    m_validation_isValid = false;
}

void OAIVirtualGatewayClientPolicy_tls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualGatewayClientPolicy_tls::fromJsonObject(QJsonObject json) {

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_enforce_isValid = ::OpenAPI::fromJsonValue(m_enforce, json[QString("enforce")]);
    m_enforce_isSet = !json[QString("enforce")].isNull() && m_enforce_isValid;

    m_ports_isValid = ::OpenAPI::fromJsonValue(m_ports, json[QString("ports")]);
    m_ports_isSet = !json[QString("ports")].isNull() && m_ports_isValid;

    m_validation_isValid = ::OpenAPI::fromJsonValue(m_validation, json[QString("validation")]);
    m_validation_isSet = !json[QString("validation")].isNull() && m_validation_isValid;
}

QString OAIVirtualGatewayClientPolicy_tls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualGatewayClientPolicy_tls::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate.isSet()) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_enforce_isSet) {
        obj.insert(QString("enforce"), ::OpenAPI::toJsonValue(m_enforce));
    }
    if (m_ports.isSet()) {
        obj.insert(QString("ports"), ::OpenAPI::toJsonValue(m_ports));
    }
    if (m_validation.isSet()) {
        obj.insert(QString("validation"), ::OpenAPI::toJsonValue(m_validation));
    }
    return obj;
}

OAIVirtualGatewayClientPolicyTls_certificate OAIVirtualGatewayClientPolicy_tls::getCertificate() const {
    return m_certificate;
}
void OAIVirtualGatewayClientPolicy_tls::setCertificate(const OAIVirtualGatewayClientPolicyTls_certificate &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIVirtualGatewayClientPolicy_tls::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIVirtualGatewayClientPolicy_tls::is_certificate_Valid() const{
    return m_certificate_isValid;
}

bool OAIVirtualGatewayClientPolicy_tls::getEnforce() const {
    return m_enforce;
}
void OAIVirtualGatewayClientPolicy_tls::setEnforce(const bool &enforce) {
    m_enforce = enforce;
    m_enforce_isSet = true;
}

bool OAIVirtualGatewayClientPolicy_tls::is_enforce_Set() const{
    return m_enforce_isSet;
}

bool OAIVirtualGatewayClientPolicy_tls::is_enforce_Valid() const{
    return m_enforce_isValid;
}

QList OAIVirtualGatewayClientPolicy_tls::getPorts() const {
    return m_ports;
}
void OAIVirtualGatewayClientPolicy_tls::setPorts(const QList &ports) {
    m_ports = ports;
    m_ports_isSet = true;
}

bool OAIVirtualGatewayClientPolicy_tls::is_ports_Set() const{
    return m_ports_isSet;
}

bool OAIVirtualGatewayClientPolicy_tls::is_ports_Valid() const{
    return m_ports_isValid;
}

OAIVirtualGatewayClientPolicyTls_validation OAIVirtualGatewayClientPolicy_tls::getValidation() const {
    return m_validation;
}
void OAIVirtualGatewayClientPolicy_tls::setValidation(const OAIVirtualGatewayClientPolicyTls_validation &validation) {
    m_validation = validation;
    m_validation_isSet = true;
}

bool OAIVirtualGatewayClientPolicy_tls::is_validation_Set() const{
    return m_validation_isSet;
}

bool OAIVirtualGatewayClientPolicy_tls::is_validation_Valid() const{
    return m_validation_isValid;
}

bool OAIVirtualGatewayClientPolicy_tls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualGatewayClientPolicy_tls::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_validation_isValid && true;
}

} // namespace OpenAPI
