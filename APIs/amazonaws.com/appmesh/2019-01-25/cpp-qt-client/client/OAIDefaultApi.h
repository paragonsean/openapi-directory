/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateGatewayRouteOutput.h"
#include "OAICreateGatewayRoute_request.h"
#include "OAICreateMeshOutput.h"
#include "OAICreateMesh_request.h"
#include "OAICreateRouteOutput.h"
#include "OAICreateRoute_request.h"
#include "OAICreateVirtualGatewayOutput.h"
#include "OAICreateVirtualGateway_request.h"
#include "OAICreateVirtualNodeOutput.h"
#include "OAICreateVirtualNode_request.h"
#include "OAICreateVirtualRouterOutput.h"
#include "OAICreateVirtualRouter_request.h"
#include "OAICreateVirtualServiceOutput.h"
#include "OAICreateVirtualService_request.h"
#include "OAIDeleteGatewayRouteOutput.h"
#include "OAIDeleteMeshOutput.h"
#include "OAIDeleteRouteOutput.h"
#include "OAIDeleteVirtualGatewayOutput.h"
#include "OAIDeleteVirtualNodeOutput.h"
#include "OAIDeleteVirtualRouterOutput.h"
#include "OAIDeleteVirtualServiceOutput.h"
#include "OAIDescribeGatewayRouteOutput.h"
#include "OAIDescribeMeshOutput.h"
#include "OAIDescribeRouteOutput.h"
#include "OAIDescribeVirtualGatewayOutput.h"
#include "OAIDescribeVirtualNodeOutput.h"
#include "OAIDescribeVirtualRouterOutput.h"
#include "OAIDescribeVirtualServiceOutput.h"
#include "OAIListGatewayRoutesOutput.h"
#include "OAIListMeshesOutput.h"
#include "OAIListRoutesOutput.h"
#include "OAIListTagsForResourceOutput.h"
#include "OAIListVirtualGatewaysOutput.h"
#include "OAIListVirtualNodesOutput.h"
#include "OAIListVirtualRoutersOutput.h"
#include "OAIListVirtualServicesOutput.h"
#include "OAIObject.h"
#include "OAITagResource_request.h"
#include "OAIUntagResource_request.h"
#include "OAIUpdateGatewayRouteOutput.h"
#include "OAIUpdateGatewayRoute_request.h"
#include "OAIUpdateMeshOutput.h"
#include "OAIUpdateMesh_request.h"
#include "OAIUpdateRouteOutput.h"
#include "OAIUpdateRoute_request.h"
#include "OAIUpdateVirtualGatewayOutput.h"
#include "OAIUpdateVirtualGateway_request.h"
#include "OAIUpdateVirtualNodeOutput.h"
#include "OAIUpdateVirtualNode_request.h"
#include "OAIUpdateVirtualRouterOutput.h"
#include "OAIUpdateVirtualRouter_request.h"
#include "OAIUpdateVirtualServiceOutput.h"
#include "OAIUpdateVirtualService_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_gateway_name QString [required]
    * @param[in]  oai_create_gateway_route_request OAICreateGatewayRoute_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void createGatewayRoute(const QString &mesh_name, const QString &virtual_gateway_name, const OAICreateGatewayRoute_request &oai_create_gateway_route_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_mesh_request OAICreateMesh_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createMesh(const OAICreateMesh_request &oai_create_mesh_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  oai_create_route_request OAICreateRoute_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void createRoute(const QString &mesh_name, const QString &virtual_router_name, const OAICreateRoute_request &oai_create_route_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  oai_create_virtual_gateway_request OAICreateVirtualGateway_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void createVirtualGateway(const QString &mesh_name, const OAICreateVirtualGateway_request &oai_create_virtual_gateway_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  oai_create_virtual_node_request OAICreateVirtualNode_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void createVirtualNode(const QString &mesh_name, const OAICreateVirtualNode_request &oai_create_virtual_node_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  oai_create_virtual_router_request OAICreateVirtualRouter_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void createVirtualRouter(const QString &mesh_name, const OAICreateVirtualRouter_request &oai_create_virtual_router_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  oai_create_virtual_service_request OAICreateVirtualService_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void createVirtualService(const QString &mesh_name, const OAICreateVirtualService_request &oai_create_virtual_service_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  gateway_route_name QString [required]
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_gateway_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void deleteGatewayRoute(const QString &gateway_route_name, const QString &mesh_name, const QString &virtual_gateway_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteMesh(const QString &mesh_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void deleteRoute(const QString &mesh_name, const QString &route_name, const QString &virtual_router_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_gateway_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void deleteVirtualGateway(const QString &mesh_name, const QString &virtual_gateway_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_node_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void deleteVirtualNode(const QString &mesh_name, const QString &virtual_node_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void deleteVirtualRouter(const QString &mesh_name, const QString &virtual_router_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_service_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void deleteVirtualService(const QString &mesh_name, const QString &virtual_service_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  gateway_route_name QString [required]
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_gateway_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void describeGatewayRoute(const QString &gateway_route_name, const QString &mesh_name, const QString &virtual_gateway_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void describeMesh(const QString &mesh_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void describeRoute(const QString &mesh_name, const QString &route_name, const QString &virtual_router_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_gateway_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void describeVirtualGateway(const QString &mesh_name, const QString &virtual_gateway_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_node_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void describeVirtualNode(const QString &mesh_name, const QString &virtual_node_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void describeVirtualRouter(const QString &mesh_name, const QString &virtual_router_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_service_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void describeVirtualService(const QString &mesh_name, const QString &virtual_service_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_gateway_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  mesh_owner QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listGatewayRoutes(const QString &mesh_name, const QString &virtual_gateway_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listMeshes(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  mesh_owner QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listRoutes(const QString &mesh_name, const QString &virtual_router_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listTagsForResource(const QString &resource_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  mesh_owner QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listVirtualGateways(const QString &mesh_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  mesh_owner QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listVirtualNodes(const QString &mesh_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  mesh_owner QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listVirtualRouters(const QString &mesh_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  mesh_owner QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void listVirtualServices(const QString &mesh_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  oai_tag_resource_request OAITagResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource(const QString &resource_arn, const OAITagResource_request &oai_tag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  oai_untag_resource_request OAIUntagResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource(const QString &resource_arn, const OAIUntagResource_request &oai_untag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  gateway_route_name QString [required]
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_gateway_name QString [required]
    * @param[in]  oai_update_gateway_route_request OAIUpdateGatewayRoute_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void updateGatewayRoute(const QString &gateway_route_name, const QString &mesh_name, const QString &virtual_gateway_name, const OAIUpdateGatewayRoute_request &oai_update_gateway_route_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  oai_update_mesh_request OAIUpdateMesh_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateMesh(const QString &mesh_name, const OAIUpdateMesh_request &oai_update_mesh_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  oai_update_route_request OAIUpdateRoute_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void updateRoute(const QString &mesh_name, const QString &route_name, const QString &virtual_router_name, const OAIUpdateRoute_request &oai_update_route_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_gateway_name QString [required]
    * @param[in]  oai_update_virtual_gateway_request OAIUpdateVirtualGateway_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void updateVirtualGateway(const QString &mesh_name, const QString &virtual_gateway_name, const OAIUpdateVirtualGateway_request &oai_update_virtual_gateway_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_node_name QString [required]
    * @param[in]  oai_update_virtual_node_request OAIUpdateVirtualNode_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void updateVirtualNode(const QString &mesh_name, const QString &virtual_node_name, const OAIUpdateVirtualNode_request &oai_update_virtual_node_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  oai_update_virtual_router_request OAIUpdateVirtualRouter_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void updateVirtualRouter(const QString &mesh_name, const QString &virtual_router_name, const OAIUpdateVirtualRouter_request &oai_update_virtual_router_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  mesh_name QString [required]
    * @param[in]  virtual_service_name QString [required]
    * @param[in]  oai_update_virtual_service_request OAIUpdateVirtualService_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mesh_owner QString [optional]
    */
    virtual void updateVirtualService(const QString &mesh_name, const QString &virtual_service_name, const OAIUpdateVirtualService_request &oai_update_virtual_service_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mesh_owner = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createGatewayRouteCallback(OAIHttpRequestWorker *worker);
    void createMeshCallback(OAIHttpRequestWorker *worker);
    void createRouteCallback(OAIHttpRequestWorker *worker);
    void createVirtualGatewayCallback(OAIHttpRequestWorker *worker);
    void createVirtualNodeCallback(OAIHttpRequestWorker *worker);
    void createVirtualRouterCallback(OAIHttpRequestWorker *worker);
    void createVirtualServiceCallback(OAIHttpRequestWorker *worker);
    void deleteGatewayRouteCallback(OAIHttpRequestWorker *worker);
    void deleteMeshCallback(OAIHttpRequestWorker *worker);
    void deleteRouteCallback(OAIHttpRequestWorker *worker);
    void deleteVirtualGatewayCallback(OAIHttpRequestWorker *worker);
    void deleteVirtualNodeCallback(OAIHttpRequestWorker *worker);
    void deleteVirtualRouterCallback(OAIHttpRequestWorker *worker);
    void deleteVirtualServiceCallback(OAIHttpRequestWorker *worker);
    void describeGatewayRouteCallback(OAIHttpRequestWorker *worker);
    void describeMeshCallback(OAIHttpRequestWorker *worker);
    void describeRouteCallback(OAIHttpRequestWorker *worker);
    void describeVirtualGatewayCallback(OAIHttpRequestWorker *worker);
    void describeVirtualNodeCallback(OAIHttpRequestWorker *worker);
    void describeVirtualRouterCallback(OAIHttpRequestWorker *worker);
    void describeVirtualServiceCallback(OAIHttpRequestWorker *worker);
    void listGatewayRoutesCallback(OAIHttpRequestWorker *worker);
    void listMeshesCallback(OAIHttpRequestWorker *worker);
    void listRoutesCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void listVirtualGatewaysCallback(OAIHttpRequestWorker *worker);
    void listVirtualNodesCallback(OAIHttpRequestWorker *worker);
    void listVirtualRoutersCallback(OAIHttpRequestWorker *worker);
    void listVirtualServicesCallback(OAIHttpRequestWorker *worker);
    void tagResourceCallback(OAIHttpRequestWorker *worker);
    void untagResourceCallback(OAIHttpRequestWorker *worker);
    void updateGatewayRouteCallback(OAIHttpRequestWorker *worker);
    void updateMeshCallback(OAIHttpRequestWorker *worker);
    void updateRouteCallback(OAIHttpRequestWorker *worker);
    void updateVirtualGatewayCallback(OAIHttpRequestWorker *worker);
    void updateVirtualNodeCallback(OAIHttpRequestWorker *worker);
    void updateVirtualRouterCallback(OAIHttpRequestWorker *worker);
    void updateVirtualServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createGatewayRouteSignal(OAICreateGatewayRouteOutput summary);
    void createMeshSignal(OAICreateMeshOutput summary);
    void createRouteSignal(OAICreateRouteOutput summary);
    void createVirtualGatewaySignal(OAICreateVirtualGatewayOutput summary);
    void createVirtualNodeSignal(OAICreateVirtualNodeOutput summary);
    void createVirtualRouterSignal(OAICreateVirtualRouterOutput summary);
    void createVirtualServiceSignal(OAICreateVirtualServiceOutput summary);
    void deleteGatewayRouteSignal(OAIDeleteGatewayRouteOutput summary);
    void deleteMeshSignal(OAIDeleteMeshOutput summary);
    void deleteRouteSignal(OAIDeleteRouteOutput summary);
    void deleteVirtualGatewaySignal(OAIDeleteVirtualGatewayOutput summary);
    void deleteVirtualNodeSignal(OAIDeleteVirtualNodeOutput summary);
    void deleteVirtualRouterSignal(OAIDeleteVirtualRouterOutput summary);
    void deleteVirtualServiceSignal(OAIDeleteVirtualServiceOutput summary);
    void describeGatewayRouteSignal(OAIDescribeGatewayRouteOutput summary);
    void describeMeshSignal(OAIDescribeMeshOutput summary);
    void describeRouteSignal(OAIDescribeRouteOutput summary);
    void describeVirtualGatewaySignal(OAIDescribeVirtualGatewayOutput summary);
    void describeVirtualNodeSignal(OAIDescribeVirtualNodeOutput summary);
    void describeVirtualRouterSignal(OAIDescribeVirtualRouterOutput summary);
    void describeVirtualServiceSignal(OAIDescribeVirtualServiceOutput summary);
    void listGatewayRoutesSignal(OAIListGatewayRoutesOutput summary);
    void listMeshesSignal(OAIListMeshesOutput summary);
    void listRoutesSignal(OAIListRoutesOutput summary);
    void listTagsForResourceSignal(OAIListTagsForResourceOutput summary);
    void listVirtualGatewaysSignal(OAIListVirtualGatewaysOutput summary);
    void listVirtualNodesSignal(OAIListVirtualNodesOutput summary);
    void listVirtualRoutersSignal(OAIListVirtualRoutersOutput summary);
    void listVirtualServicesSignal(OAIListVirtualServicesOutput summary);
    void tagResourceSignal(OAIObject summary);
    void untagResourceSignal(OAIObject summary);
    void updateGatewayRouteSignal(OAIUpdateGatewayRouteOutput summary);
    void updateMeshSignal(OAIUpdateMeshOutput summary);
    void updateRouteSignal(OAIUpdateRouteOutput summary);
    void updateVirtualGatewaySignal(OAIUpdateVirtualGatewayOutput summary);
    void updateVirtualNodeSignal(OAIUpdateVirtualNodeOutput summary);
    void updateVirtualRouterSignal(OAIUpdateVirtualRouterOutput summary);
    void updateVirtualServiceSignal(OAIUpdateVirtualServiceOutput summary);


    void createGatewayRouteSignalFull(OAIHttpRequestWorker *worker, OAICreateGatewayRouteOutput summary);
    void createMeshSignalFull(OAIHttpRequestWorker *worker, OAICreateMeshOutput summary);
    void createRouteSignalFull(OAIHttpRequestWorker *worker, OAICreateRouteOutput summary);
    void createVirtualGatewaySignalFull(OAIHttpRequestWorker *worker, OAICreateVirtualGatewayOutput summary);
    void createVirtualNodeSignalFull(OAIHttpRequestWorker *worker, OAICreateVirtualNodeOutput summary);
    void createVirtualRouterSignalFull(OAIHttpRequestWorker *worker, OAICreateVirtualRouterOutput summary);
    void createVirtualServiceSignalFull(OAIHttpRequestWorker *worker, OAICreateVirtualServiceOutput summary);
    void deleteGatewayRouteSignalFull(OAIHttpRequestWorker *worker, OAIDeleteGatewayRouteOutput summary);
    void deleteMeshSignalFull(OAIHttpRequestWorker *worker, OAIDeleteMeshOutput summary);
    void deleteRouteSignalFull(OAIHttpRequestWorker *worker, OAIDeleteRouteOutput summary);
    void deleteVirtualGatewaySignalFull(OAIHttpRequestWorker *worker, OAIDeleteVirtualGatewayOutput summary);
    void deleteVirtualNodeSignalFull(OAIHttpRequestWorker *worker, OAIDeleteVirtualNodeOutput summary);
    void deleteVirtualRouterSignalFull(OAIHttpRequestWorker *worker, OAIDeleteVirtualRouterOutput summary);
    void deleteVirtualServiceSignalFull(OAIHttpRequestWorker *worker, OAIDeleteVirtualServiceOutput summary);
    void describeGatewayRouteSignalFull(OAIHttpRequestWorker *worker, OAIDescribeGatewayRouteOutput summary);
    void describeMeshSignalFull(OAIHttpRequestWorker *worker, OAIDescribeMeshOutput summary);
    void describeRouteSignalFull(OAIHttpRequestWorker *worker, OAIDescribeRouteOutput summary);
    void describeVirtualGatewaySignalFull(OAIHttpRequestWorker *worker, OAIDescribeVirtualGatewayOutput summary);
    void describeVirtualNodeSignalFull(OAIHttpRequestWorker *worker, OAIDescribeVirtualNodeOutput summary);
    void describeVirtualRouterSignalFull(OAIHttpRequestWorker *worker, OAIDescribeVirtualRouterOutput summary);
    void describeVirtualServiceSignalFull(OAIHttpRequestWorker *worker, OAIDescribeVirtualServiceOutput summary);
    void listGatewayRoutesSignalFull(OAIHttpRequestWorker *worker, OAIListGatewayRoutesOutput summary);
    void listMeshesSignalFull(OAIHttpRequestWorker *worker, OAIListMeshesOutput summary);
    void listRoutesSignalFull(OAIHttpRequestWorker *worker, OAIListRoutesOutput summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceOutput summary);
    void listVirtualGatewaysSignalFull(OAIHttpRequestWorker *worker, OAIListVirtualGatewaysOutput summary);
    void listVirtualNodesSignalFull(OAIHttpRequestWorker *worker, OAIListVirtualNodesOutput summary);
    void listVirtualRoutersSignalFull(OAIHttpRequestWorker *worker, OAIListVirtualRoutersOutput summary);
    void listVirtualServicesSignalFull(OAIHttpRequestWorker *worker, OAIListVirtualServicesOutput summary);
    void tagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void untagResourceSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateGatewayRouteSignalFull(OAIHttpRequestWorker *worker, OAIUpdateGatewayRouteOutput summary);
    void updateMeshSignalFull(OAIHttpRequestWorker *worker, OAIUpdateMeshOutput summary);
    void updateRouteSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRouteOutput summary);
    void updateVirtualGatewaySignalFull(OAIHttpRequestWorker *worker, OAIUpdateVirtualGatewayOutput summary);
    void updateVirtualNodeSignalFull(OAIHttpRequestWorker *worker, OAIUpdateVirtualNodeOutput summary);
    void updateVirtualRouterSignalFull(OAIHttpRequestWorker *worker, OAIUpdateVirtualRouterOutput summary);
    void updateVirtualServiceSignalFull(OAIHttpRequestWorker *worker, OAIUpdateVirtualServiceOutput summary);

    Q_DECL_DEPRECATED_X("Use createGatewayRouteSignalError() instead")
    void createGatewayRouteSignalE(OAICreateGatewayRouteOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGatewayRouteSignalError(OAICreateGatewayRouteOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMeshSignalError() instead")
    void createMeshSignalE(OAICreateMeshOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMeshSignalError(OAICreateMeshOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRouteSignalError() instead")
    void createRouteSignalE(OAICreateRouteOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRouteSignalError(OAICreateRouteOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVirtualGatewaySignalError() instead")
    void createVirtualGatewaySignalE(OAICreateVirtualGatewayOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVirtualGatewaySignalError(OAICreateVirtualGatewayOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVirtualNodeSignalError() instead")
    void createVirtualNodeSignalE(OAICreateVirtualNodeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVirtualNodeSignalError(OAICreateVirtualNodeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVirtualRouterSignalError() instead")
    void createVirtualRouterSignalE(OAICreateVirtualRouterOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVirtualRouterSignalError(OAICreateVirtualRouterOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVirtualServiceSignalError() instead")
    void createVirtualServiceSignalE(OAICreateVirtualServiceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVirtualServiceSignalError(OAICreateVirtualServiceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGatewayRouteSignalError() instead")
    void deleteGatewayRouteSignalE(OAIDeleteGatewayRouteOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGatewayRouteSignalError(OAIDeleteGatewayRouteOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMeshSignalError() instead")
    void deleteMeshSignalE(OAIDeleteMeshOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMeshSignalError(OAIDeleteMeshOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRouteSignalError() instead")
    void deleteRouteSignalE(OAIDeleteRouteOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRouteSignalError(OAIDeleteRouteOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVirtualGatewaySignalError() instead")
    void deleteVirtualGatewaySignalE(OAIDeleteVirtualGatewayOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVirtualGatewaySignalError(OAIDeleteVirtualGatewayOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVirtualNodeSignalError() instead")
    void deleteVirtualNodeSignalE(OAIDeleteVirtualNodeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVirtualNodeSignalError(OAIDeleteVirtualNodeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVirtualRouterSignalError() instead")
    void deleteVirtualRouterSignalE(OAIDeleteVirtualRouterOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVirtualRouterSignalError(OAIDeleteVirtualRouterOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVirtualServiceSignalError() instead")
    void deleteVirtualServiceSignalE(OAIDeleteVirtualServiceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVirtualServiceSignalError(OAIDeleteVirtualServiceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeGatewayRouteSignalError() instead")
    void describeGatewayRouteSignalE(OAIDescribeGatewayRouteOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeGatewayRouteSignalError(OAIDescribeGatewayRouteOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeMeshSignalError() instead")
    void describeMeshSignalE(OAIDescribeMeshOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeMeshSignalError(OAIDescribeMeshOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeRouteSignalError() instead")
    void describeRouteSignalE(OAIDescribeRouteOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeRouteSignalError(OAIDescribeRouteOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVirtualGatewaySignalError() instead")
    void describeVirtualGatewaySignalE(OAIDescribeVirtualGatewayOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVirtualGatewaySignalError(OAIDescribeVirtualGatewayOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVirtualNodeSignalError() instead")
    void describeVirtualNodeSignalE(OAIDescribeVirtualNodeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVirtualNodeSignalError(OAIDescribeVirtualNodeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVirtualRouterSignalError() instead")
    void describeVirtualRouterSignalE(OAIDescribeVirtualRouterOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVirtualRouterSignalError(OAIDescribeVirtualRouterOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVirtualServiceSignalError() instead")
    void describeVirtualServiceSignalE(OAIDescribeVirtualServiceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVirtualServiceSignalError(OAIDescribeVirtualServiceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGatewayRoutesSignalError() instead")
    void listGatewayRoutesSignalE(OAIListGatewayRoutesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGatewayRoutesSignalError(OAIListGatewayRoutesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMeshesSignalError() instead")
    void listMeshesSignalE(OAIListMeshesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMeshesSignalError(OAIListMeshesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoutesSignalError() instead")
    void listRoutesSignalE(OAIListRoutesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoutesSignalError(OAIListRoutesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVirtualGatewaysSignalError() instead")
    void listVirtualGatewaysSignalE(OAIListVirtualGatewaysOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVirtualGatewaysSignalError(OAIListVirtualGatewaysOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVirtualNodesSignalError() instead")
    void listVirtualNodesSignalE(OAIListVirtualNodesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVirtualNodesSignalError(OAIListVirtualNodesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVirtualRoutersSignalError() instead")
    void listVirtualRoutersSignalE(OAIListVirtualRoutersOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVirtualRoutersSignalError(OAIListVirtualRoutersOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVirtualServicesSignalError() instead")
    void listVirtualServicesSignalE(OAIListVirtualServicesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVirtualServicesSignalError(OAIListVirtualServicesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalError() instead")
    void tagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalError() instead")
    void untagResourceSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGatewayRouteSignalError() instead")
    void updateGatewayRouteSignalE(OAIUpdateGatewayRouteOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGatewayRouteSignalError(OAIUpdateGatewayRouteOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMeshSignalError() instead")
    void updateMeshSignalE(OAIUpdateMeshOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMeshSignalError(OAIUpdateMeshOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRouteSignalError() instead")
    void updateRouteSignalE(OAIUpdateRouteOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRouteSignalError(OAIUpdateRouteOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVirtualGatewaySignalError() instead")
    void updateVirtualGatewaySignalE(OAIUpdateVirtualGatewayOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVirtualGatewaySignalError(OAIUpdateVirtualGatewayOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVirtualNodeSignalError() instead")
    void updateVirtualNodeSignalE(OAIUpdateVirtualNodeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVirtualNodeSignalError(OAIUpdateVirtualNodeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVirtualRouterSignalError() instead")
    void updateVirtualRouterSignalE(OAIUpdateVirtualRouterOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVirtualRouterSignalError(OAIUpdateVirtualRouterOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVirtualServiceSignalError() instead")
    void updateVirtualServiceSignalE(OAIUpdateVirtualServiceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVirtualServiceSignalError(OAIUpdateVirtualServiceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createGatewayRouteSignalErrorFull() instead")
    void createGatewayRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGatewayRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMeshSignalErrorFull() instead")
    void createMeshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMeshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRouteSignalErrorFull() instead")
    void createRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVirtualGatewaySignalErrorFull() instead")
    void createVirtualGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVirtualGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVirtualNodeSignalErrorFull() instead")
    void createVirtualNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVirtualNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVirtualRouterSignalErrorFull() instead")
    void createVirtualRouterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVirtualRouterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVirtualServiceSignalErrorFull() instead")
    void createVirtualServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVirtualServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGatewayRouteSignalErrorFull() instead")
    void deleteGatewayRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGatewayRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMeshSignalErrorFull() instead")
    void deleteMeshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMeshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRouteSignalErrorFull() instead")
    void deleteRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVirtualGatewaySignalErrorFull() instead")
    void deleteVirtualGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVirtualGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVirtualNodeSignalErrorFull() instead")
    void deleteVirtualNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVirtualNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVirtualRouterSignalErrorFull() instead")
    void deleteVirtualRouterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVirtualRouterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVirtualServiceSignalErrorFull() instead")
    void deleteVirtualServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVirtualServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeGatewayRouteSignalErrorFull() instead")
    void describeGatewayRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeGatewayRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeMeshSignalErrorFull() instead")
    void describeMeshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeMeshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeRouteSignalErrorFull() instead")
    void describeRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVirtualGatewaySignalErrorFull() instead")
    void describeVirtualGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVirtualGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVirtualNodeSignalErrorFull() instead")
    void describeVirtualNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVirtualNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVirtualRouterSignalErrorFull() instead")
    void describeVirtualRouterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVirtualRouterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVirtualServiceSignalErrorFull() instead")
    void describeVirtualServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVirtualServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGatewayRoutesSignalErrorFull() instead")
    void listGatewayRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGatewayRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMeshesSignalErrorFull() instead")
    void listMeshesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMeshesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoutesSignalErrorFull() instead")
    void listRoutesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoutesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVirtualGatewaysSignalErrorFull() instead")
    void listVirtualGatewaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVirtualGatewaysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVirtualNodesSignalErrorFull() instead")
    void listVirtualNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVirtualNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVirtualRoutersSignalErrorFull() instead")
    void listVirtualRoutersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVirtualRoutersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVirtualServicesSignalErrorFull() instead")
    void listVirtualServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVirtualServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalErrorFull() instead")
    void tagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalErrorFull() instead")
    void untagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGatewayRouteSignalErrorFull() instead")
    void updateGatewayRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGatewayRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMeshSignalErrorFull() instead")
    void updateMeshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMeshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRouteSignalErrorFull() instead")
    void updateRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVirtualGatewaySignalErrorFull() instead")
    void updateVirtualGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVirtualGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVirtualNodeSignalErrorFull() instead")
    void updateVirtualNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVirtualNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVirtualRouterSignalErrorFull() instead")
    void updateVirtualRouterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVirtualRouterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVirtualServiceSignalErrorFull() instead")
    void updateVirtualServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVirtualServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
