/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNodeData_metadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNodeData_metadata::OAIVirtualNodeData_metadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNodeData_metadata::OAIVirtualNodeData_metadata() {
    this->initializeModel();
}

OAIVirtualNodeData_metadata::~OAIVirtualNodeData_metadata() {}

void OAIVirtualNodeData_metadata::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_mesh_owner_isSet = false;
    m_mesh_owner_isValid = false;

    m_resource_owner_isSet = false;
    m_resource_owner_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIVirtualNodeData_metadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNodeData_metadata::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_mesh_owner_isValid = ::OpenAPI::fromJsonValue(m_mesh_owner, json[QString("meshOwner")]);
    m_mesh_owner_isSet = !json[QString("meshOwner")].isNull() && m_mesh_owner_isValid;

    m_resource_owner_isValid = ::OpenAPI::fromJsonValue(m_resource_owner, json[QString("resourceOwner")]);
    m_resource_owner_isSet = !json[QString("resourceOwner")].isNull() && m_resource_owner_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIVirtualNodeData_metadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNodeData_metadata::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_mesh_owner_isSet) {
        obj.insert(QString("meshOwner"), ::OpenAPI::toJsonValue(m_mesh_owner));
    }
    if (m_resource_owner_isSet) {
        obj.insert(QString("resourceOwner"), ::OpenAPI::toJsonValue(m_resource_owner));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIVirtualNodeData_metadata::getArn() const {
    return m_arn;
}
void OAIVirtualNodeData_metadata::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIVirtualNodeData_metadata::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIVirtualNodeData_metadata::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIVirtualNodeData_metadata::getCreatedAt() const {
    return m_created_at;
}
void OAIVirtualNodeData_metadata::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIVirtualNodeData_metadata::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIVirtualNodeData_metadata::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIVirtualNodeData_metadata::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIVirtualNodeData_metadata::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIVirtualNodeData_metadata::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIVirtualNodeData_metadata::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIVirtualNodeData_metadata::getMeshOwner() const {
    return m_mesh_owner;
}
void OAIVirtualNodeData_metadata::setMeshOwner(const QString &mesh_owner) {
    m_mesh_owner = mesh_owner;
    m_mesh_owner_isSet = true;
}

bool OAIVirtualNodeData_metadata::is_mesh_owner_Set() const{
    return m_mesh_owner_isSet;
}

bool OAIVirtualNodeData_metadata::is_mesh_owner_Valid() const{
    return m_mesh_owner_isValid;
}

QString OAIVirtualNodeData_metadata::getResourceOwner() const {
    return m_resource_owner;
}
void OAIVirtualNodeData_metadata::setResourceOwner(const QString &resource_owner) {
    m_resource_owner = resource_owner;
    m_resource_owner_isSet = true;
}

bool OAIVirtualNodeData_metadata::is_resource_owner_Set() const{
    return m_resource_owner_isSet;
}

bool OAIVirtualNodeData_metadata::is_resource_owner_Valid() const{
    return m_resource_owner_isValid;
}

QString OAIVirtualNodeData_metadata::getUid() const {
    return m_uid;
}
void OAIVirtualNodeData_metadata::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIVirtualNodeData_metadata::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIVirtualNodeData_metadata::is_uid_Valid() const{
    return m_uid_isValid;
}

qint32 OAIVirtualNodeData_metadata::getVersion() const {
    return m_version;
}
void OAIVirtualNodeData_metadata::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVirtualNodeData_metadata::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVirtualNodeData_metadata::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIVirtualNodeData_metadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNodeData_metadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_created_at_isValid && m_last_updated_at_isValid && m_mesh_owner_isValid && m_resource_owner_isValid && m_uid_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
