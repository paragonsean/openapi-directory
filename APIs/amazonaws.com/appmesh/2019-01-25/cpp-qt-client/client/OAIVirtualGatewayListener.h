/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualGatewayListener.h
 *
 * An object that represents a listener for a virtual gateway.
 */

#ifndef OAIVirtualGatewayListener_H
#define OAIVirtualGatewayListener_H

#include <QJsonObject>

#include "OAIVirtualGatewayListener_connectionPool.h"
#include "OAIVirtualGatewayListener_healthCheck.h"
#include "OAIVirtualGatewayListener_portMapping.h"
#include "OAIVirtualGatewayListener_tls.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVirtualGatewayListener_connectionPool;
class OAIVirtualGatewayListener_healthCheck;
class OAIVirtualGatewayListener_portMapping;
class OAIVirtualGatewayListener_tls;

class OAIVirtualGatewayListener : public OAIObject {
public:
    OAIVirtualGatewayListener();
    OAIVirtualGatewayListener(QString json);
    ~OAIVirtualGatewayListener() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIVirtualGatewayListener_connectionPool getConnectionPool() const;
    void setConnectionPool(const OAIVirtualGatewayListener_connectionPool &connection_pool);
    bool is_connection_pool_Set() const;
    bool is_connection_pool_Valid() const;

    OAIVirtualGatewayListener_healthCheck getHealthCheck() const;
    void setHealthCheck(const OAIVirtualGatewayListener_healthCheck &health_check);
    bool is_health_check_Set() const;
    bool is_health_check_Valid() const;

    OAIVirtualGatewayListener_portMapping getPortMapping() const;
    void setPortMapping(const OAIVirtualGatewayListener_portMapping &port_mapping);
    bool is_port_mapping_Set() const;
    bool is_port_mapping_Valid() const;

    OAIVirtualGatewayListener_tls getTls() const;
    void setTls(const OAIVirtualGatewayListener_tls &tls);
    bool is_tls_Set() const;
    bool is_tls_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIVirtualGatewayListener_connectionPool m_connection_pool;
    bool m_connection_pool_isSet;
    bool m_connection_pool_isValid;

    OAIVirtualGatewayListener_healthCheck m_health_check;
    bool m_health_check_isSet;
    bool m_health_check_isValid;

    OAIVirtualGatewayListener_portMapping m_port_mapping;
    bool m_port_mapping_isSet;
    bool m_port_mapping_isValid;

    OAIVirtualGatewayListener_tls m_tls;
    bool m_tls_isSet;
    bool m_tls_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualGatewayListener)

#endif // OAIVirtualGatewayListener_H
