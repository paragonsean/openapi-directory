/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVirtualNodeInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVirtualNodeInput::OAICreateVirtualNodeInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVirtualNodeInput::OAICreateVirtualNodeInput() {
    this->initializeModel();
}

OAICreateVirtualNodeInput::~OAICreateVirtualNodeInput() {}

void OAICreateVirtualNodeInput::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_virtual_node_name_isSet = false;
    m_virtual_node_name_isValid = false;
}

void OAICreateVirtualNodeInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVirtualNodeInput::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_virtual_node_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_node_name, json[QString("virtualNodeName")]);
    m_virtual_node_name_isSet = !json[QString("virtualNodeName")].isNull() && m_virtual_node_name_isValid;
}

QString OAICreateVirtualNodeInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVirtualNodeInput::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_virtual_node_name_isSet) {
        obj.insert(QString("virtualNodeName"), ::OpenAPI::toJsonValue(m_virtual_node_name));
    }
    return obj;
}

QString OAICreateVirtualNodeInput::getClientToken() const {
    return m_client_token;
}
void OAICreateVirtualNodeInput::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateVirtualNodeInput::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateVirtualNodeInput::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateVirtualNodeInput_spec OAICreateVirtualNodeInput::getSpec() const {
    return m_spec;
}
void OAICreateVirtualNodeInput::setSpec(const OAICreateVirtualNodeInput_spec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAICreateVirtualNodeInput::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAICreateVirtualNodeInput::is_spec_Valid() const{
    return m_spec_isValid;
}

QList OAICreateVirtualNodeInput::getTags() const {
    return m_tags;
}
void OAICreateVirtualNodeInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateVirtualNodeInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateVirtualNodeInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateVirtualNodeInput::getVirtualNodeName() const {
    return m_virtual_node_name;
}
void OAICreateVirtualNodeInput::setVirtualNodeName(const QString &virtual_node_name) {
    m_virtual_node_name = virtual_node_name;
    m_virtual_node_name_isSet = true;
}

bool OAICreateVirtualNodeInput::is_virtual_node_name_Set() const{
    return m_virtual_node_name_isSet;
}

bool OAICreateVirtualNodeInput::is_virtual_node_name_Valid() const{
    return m_virtual_node_name_isValid;
}

bool OAICreateVirtualNodeInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVirtualNodeInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_spec_isValid && m_virtual_node_name_isValid && true;
}

} // namespace OpenAPI
