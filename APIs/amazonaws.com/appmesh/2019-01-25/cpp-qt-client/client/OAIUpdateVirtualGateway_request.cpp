/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateVirtualGateway_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateVirtualGateway_request::OAIUpdateVirtualGateway_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateVirtualGateway_request::OAIUpdateVirtualGateway_request() {
    this->initializeModel();
}

OAIUpdateVirtualGateway_request::~OAIUpdateVirtualGateway_request() {}

void OAIUpdateVirtualGateway_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;
}

void OAIUpdateVirtualGateway_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateVirtualGateway_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;
}

QString OAIUpdateVirtualGateway_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateVirtualGateway_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    return obj;
}

QString OAIUpdateVirtualGateway_request::getClientToken() const {
    return m_client_token;
}
void OAIUpdateVirtualGateway_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIUpdateVirtualGateway_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIUpdateVirtualGateway_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateVirtualGateway_request_spec OAIUpdateVirtualGateway_request::getSpec() const {
    return m_spec;
}
void OAIUpdateVirtualGateway_request::setSpec(const OAICreateVirtualGateway_request_spec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIUpdateVirtualGateway_request::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIUpdateVirtualGateway_request::is_spec_Valid() const{
    return m_spec_isValid;
}

bool OAIUpdateVirtualGateway_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateVirtualGateway_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_spec_isValid && true;
}

} // namespace OpenAPI
