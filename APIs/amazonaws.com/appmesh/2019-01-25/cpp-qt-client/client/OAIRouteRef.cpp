/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteRef.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteRef::OAIRouteRef(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteRef::OAIRouteRef() {
    this->initializeModel();
}

OAIRouteRef::~OAIRouteRef() {}

void OAIRouteRef::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_mesh_name_isSet = false;
    m_mesh_name_isValid = false;

    m_mesh_owner_isSet = false;
    m_mesh_owner_isValid = false;

    m_resource_owner_isSet = false;
    m_resource_owner_isValid = false;

    m_route_name_isSet = false;
    m_route_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_virtual_router_name_isSet = false;
    m_virtual_router_name_isValid = false;
}

void OAIRouteRef::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouteRef::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("lastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("lastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_mesh_name_isValid = ::OpenAPI::fromJsonValue(m_mesh_name, json[QString("meshName")]);
    m_mesh_name_isSet = !json[QString("meshName")].isNull() && m_mesh_name_isValid;

    m_mesh_owner_isValid = ::OpenAPI::fromJsonValue(m_mesh_owner, json[QString("meshOwner")]);
    m_mesh_owner_isSet = !json[QString("meshOwner")].isNull() && m_mesh_owner_isValid;

    m_resource_owner_isValid = ::OpenAPI::fromJsonValue(m_resource_owner, json[QString("resourceOwner")]);
    m_resource_owner_isSet = !json[QString("resourceOwner")].isNull() && m_resource_owner_isValid;

    m_route_name_isValid = ::OpenAPI::fromJsonValue(m_route_name, json[QString("routeName")]);
    m_route_name_isSet = !json[QString("routeName")].isNull() && m_route_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_virtual_router_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_router_name, json[QString("virtualRouterName")]);
    m_virtual_router_name_isSet = !json[QString("virtualRouterName")].isNull() && m_virtual_router_name_isValid;
}

QString OAIRouteRef::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouteRef::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("lastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_mesh_name_isSet) {
        obj.insert(QString("meshName"), ::OpenAPI::toJsonValue(m_mesh_name));
    }
    if (m_mesh_owner_isSet) {
        obj.insert(QString("meshOwner"), ::OpenAPI::toJsonValue(m_mesh_owner));
    }
    if (m_resource_owner_isSet) {
        obj.insert(QString("resourceOwner"), ::OpenAPI::toJsonValue(m_resource_owner));
    }
    if (m_route_name_isSet) {
        obj.insert(QString("routeName"), ::OpenAPI::toJsonValue(m_route_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_virtual_router_name_isSet) {
        obj.insert(QString("virtualRouterName"), ::OpenAPI::toJsonValue(m_virtual_router_name));
    }
    return obj;
}

QString OAIRouteRef::getArn() const {
    return m_arn;
}
void OAIRouteRef::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIRouteRef::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIRouteRef::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIRouteRef::getCreatedAt() const {
    return m_created_at;
}
void OAIRouteRef::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRouteRef::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRouteRef::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIRouteRef::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIRouteRef::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIRouteRef::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIRouteRef::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIRouteRef::getMeshName() const {
    return m_mesh_name;
}
void OAIRouteRef::setMeshName(const QString &mesh_name) {
    m_mesh_name = mesh_name;
    m_mesh_name_isSet = true;
}

bool OAIRouteRef::is_mesh_name_Set() const{
    return m_mesh_name_isSet;
}

bool OAIRouteRef::is_mesh_name_Valid() const{
    return m_mesh_name_isValid;
}

QString OAIRouteRef::getMeshOwner() const {
    return m_mesh_owner;
}
void OAIRouteRef::setMeshOwner(const QString &mesh_owner) {
    m_mesh_owner = mesh_owner;
    m_mesh_owner_isSet = true;
}

bool OAIRouteRef::is_mesh_owner_Set() const{
    return m_mesh_owner_isSet;
}

bool OAIRouteRef::is_mesh_owner_Valid() const{
    return m_mesh_owner_isValid;
}

QString OAIRouteRef::getResourceOwner() const {
    return m_resource_owner;
}
void OAIRouteRef::setResourceOwner(const QString &resource_owner) {
    m_resource_owner = resource_owner;
    m_resource_owner_isSet = true;
}

bool OAIRouteRef::is_resource_owner_Set() const{
    return m_resource_owner_isSet;
}

bool OAIRouteRef::is_resource_owner_Valid() const{
    return m_resource_owner_isValid;
}

QString OAIRouteRef::getRouteName() const {
    return m_route_name;
}
void OAIRouteRef::setRouteName(const QString &route_name) {
    m_route_name = route_name;
    m_route_name_isSet = true;
}

bool OAIRouteRef::is_route_name_Set() const{
    return m_route_name_isSet;
}

bool OAIRouteRef::is_route_name_Valid() const{
    return m_route_name_isValid;
}

qint32 OAIRouteRef::getVersion() const {
    return m_version;
}
void OAIRouteRef::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRouteRef::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRouteRef::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIRouteRef::getVirtualRouterName() const {
    return m_virtual_router_name;
}
void OAIRouteRef::setVirtualRouterName(const QString &virtual_router_name) {
    m_virtual_router_name = virtual_router_name;
    m_virtual_router_name_isSet = true;
}

bool OAIRouteRef::is_virtual_router_name_Set() const{
    return m_virtual_router_name_isSet;
}

bool OAIRouteRef::is_virtual_router_name_Valid() const{
    return m_virtual_router_name_isValid;
}

bool OAIRouteRef::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_router_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouteRef::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_created_at_isValid && m_last_updated_at_isValid && m_mesh_name_isValid && m_mesh_owner_isValid && m_resource_owner_isValid && m_route_name_isValid && m_version_isValid && m_virtual_router_name_isValid && true;
}

} // namespace OpenAPI
