/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualGatewayListener_connectionPool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualGatewayListener_connectionPool::OAIVirtualGatewayListener_connectionPool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualGatewayListener_connectionPool::OAIVirtualGatewayListener_connectionPool() {
    this->initializeModel();
}

OAIVirtualGatewayListener_connectionPool::~OAIVirtualGatewayListener_connectionPool() {}

void OAIVirtualGatewayListener_connectionPool::initializeModel() {

    m_grpc_isSet = false;
    m_grpc_isValid = false;

    m_http_isSet = false;
    m_http_isValid = false;

    m_http2_isSet = false;
    m_http2_isValid = false;
}

void OAIVirtualGatewayListener_connectionPool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualGatewayListener_connectionPool::fromJsonObject(QJsonObject json) {

    m_grpc_isValid = ::OpenAPI::fromJsonValue(m_grpc, json[QString("grpc")]);
    m_grpc_isSet = !json[QString("grpc")].isNull() && m_grpc_isValid;

    m_http_isValid = ::OpenAPI::fromJsonValue(m_http, json[QString("http")]);
    m_http_isSet = !json[QString("http")].isNull() && m_http_isValid;

    m_http2_isValid = ::OpenAPI::fromJsonValue(m_http2, json[QString("http2")]);
    m_http2_isSet = !json[QString("http2")].isNull() && m_http2_isValid;
}

QString OAIVirtualGatewayListener_connectionPool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualGatewayListener_connectionPool::asJsonObject() const {
    QJsonObject obj;
    if (m_grpc.isSet()) {
        obj.insert(QString("grpc"), ::OpenAPI::toJsonValue(m_grpc));
    }
    if (m_http.isSet()) {
        obj.insert(QString("http"), ::OpenAPI::toJsonValue(m_http));
    }
    if (m_http2.isSet()) {
        obj.insert(QString("http2"), ::OpenAPI::toJsonValue(m_http2));
    }
    return obj;
}

OAIVirtualGatewayConnectionPool_grpc OAIVirtualGatewayListener_connectionPool::getGrpc() const {
    return m_grpc;
}
void OAIVirtualGatewayListener_connectionPool::setGrpc(const OAIVirtualGatewayConnectionPool_grpc &grpc) {
    m_grpc = grpc;
    m_grpc_isSet = true;
}

bool OAIVirtualGatewayListener_connectionPool::is_grpc_Set() const{
    return m_grpc_isSet;
}

bool OAIVirtualGatewayListener_connectionPool::is_grpc_Valid() const{
    return m_grpc_isValid;
}

OAIVirtualGatewayConnectionPool_http OAIVirtualGatewayListener_connectionPool::getHttp() const {
    return m_http;
}
void OAIVirtualGatewayListener_connectionPool::setHttp(const OAIVirtualGatewayConnectionPool_http &http) {
    m_http = http;
    m_http_isSet = true;
}

bool OAIVirtualGatewayListener_connectionPool::is_http_Set() const{
    return m_http_isSet;
}

bool OAIVirtualGatewayListener_connectionPool::is_http_Valid() const{
    return m_http_isValid;
}

OAIVirtualGatewayConnectionPool_http2 OAIVirtualGatewayListener_connectionPool::getHttp2() const {
    return m_http2;
}
void OAIVirtualGatewayListener_connectionPool::setHttp2(const OAIVirtualGatewayConnectionPool_http2 &http2) {
    m_http2 = http2;
    m_http2_isSet = true;
}

bool OAIVirtualGatewayListener_connectionPool::is_http2_Set() const{
    return m_http2_isSet;
}

bool OAIVirtualGatewayListener_connectionPool::is_http2_Valid() const{
    return m_http2_isValid;
}

bool OAIVirtualGatewayListener_connectionPool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grpc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http2.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualGatewayListener_connectionPool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
