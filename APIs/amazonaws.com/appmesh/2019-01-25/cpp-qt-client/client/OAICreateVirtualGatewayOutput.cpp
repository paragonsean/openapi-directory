/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVirtualGatewayOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVirtualGatewayOutput::OAICreateVirtualGatewayOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVirtualGatewayOutput::OAICreateVirtualGatewayOutput() {
    this->initializeModel();
}

OAICreateVirtualGatewayOutput::~OAICreateVirtualGatewayOutput() {}

void OAICreateVirtualGatewayOutput::initializeModel() {

    m_virtual_gateway_isSet = false;
    m_virtual_gateway_isValid = false;
}

void OAICreateVirtualGatewayOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVirtualGatewayOutput::fromJsonObject(QJsonObject json) {

    m_virtual_gateway_isValid = ::OpenAPI::fromJsonValue(m_virtual_gateway, json[QString("virtualGateway")]);
    m_virtual_gateway_isSet = !json[QString("virtualGateway")].isNull() && m_virtual_gateway_isValid;
}

QString OAICreateVirtualGatewayOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVirtualGatewayOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_virtual_gateway.isSet()) {
        obj.insert(QString("virtualGateway"), ::OpenAPI::toJsonValue(m_virtual_gateway));
    }
    return obj;
}

OAICreateVirtualGatewayOutput_virtualGateway OAICreateVirtualGatewayOutput::getVirtualGateway() const {
    return m_virtual_gateway;
}
void OAICreateVirtualGatewayOutput::setVirtualGateway(const OAICreateVirtualGatewayOutput_virtualGateway &virtual_gateway) {
    m_virtual_gateway = virtual_gateway;
    m_virtual_gateway_isSet = true;
}

bool OAICreateVirtualGatewayOutput::is_virtual_gateway_Set() const{
    return m_virtual_gateway_isSet;
}

bool OAICreateVirtualGatewayOutput::is_virtual_gateway_Valid() const{
    return m_virtual_gateway_isValid;
}

bool OAICreateVirtualGatewayOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_virtual_gateway.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVirtualGatewayOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_virtual_gateway_isValid && true;
}

} // namespace OpenAPI
