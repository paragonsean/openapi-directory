/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrpcGatewayRouteAction_target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrpcGatewayRouteAction_target::OAIGrpcGatewayRouteAction_target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrpcGatewayRouteAction_target::OAIGrpcGatewayRouteAction_target() {
    this->initializeModel();
}

OAIGrpcGatewayRouteAction_target::~OAIGrpcGatewayRouteAction_target() {}

void OAIGrpcGatewayRouteAction_target::initializeModel() {

    m_port_isSet = false;
    m_port_isValid = false;

    m_virtual_service_isSet = false;
    m_virtual_service_isValid = false;
}

void OAIGrpcGatewayRouteAction_target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrpcGatewayRouteAction_target::fromJsonObject(QJsonObject json) {

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_virtual_service_isValid = ::OpenAPI::fromJsonValue(m_virtual_service, json[QString("virtualService")]);
    m_virtual_service_isSet = !json[QString("virtualService")].isNull() && m_virtual_service_isValid;
}

QString OAIGrpcGatewayRouteAction_target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrpcGatewayRouteAction_target::asJsonObject() const {
    QJsonObject obj;
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_virtual_service.isSet()) {
        obj.insert(QString("virtualService"), ::OpenAPI::toJsonValue(m_virtual_service));
    }
    return obj;
}

qint32 OAIGrpcGatewayRouteAction_target::getPort() const {
    return m_port;
}
void OAIGrpcGatewayRouteAction_target::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIGrpcGatewayRouteAction_target::is_port_Set() const{
    return m_port_isSet;
}

bool OAIGrpcGatewayRouteAction_target::is_port_Valid() const{
    return m_port_isValid;
}

OAIGatewayRouteTarget_virtualService OAIGrpcGatewayRouteAction_target::getVirtualService() const {
    return m_virtual_service;
}
void OAIGrpcGatewayRouteAction_target::setVirtualService(const OAIGatewayRouteTarget_virtualService &virtual_service) {
    m_virtual_service = virtual_service;
    m_virtual_service_isSet = true;
}

bool OAIGrpcGatewayRouteAction_target::is_virtual_service_Set() const{
    return m_virtual_service_isSet;
}

bool OAIGrpcGatewayRouteAction_target::is_virtual_service_Valid() const{
    return m_virtual_service_isValid;
}

bool OAIGrpcGatewayRouteAction_target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_service.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrpcGatewayRouteAction_target::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_virtual_service_isValid && true;
}

} // namespace OpenAPI
