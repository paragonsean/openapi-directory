/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRoute::OAIHttpRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRoute::OAIHttpRoute() {
    this->initializeModel();
}

OAIHttpRoute::~OAIHttpRoute() {}

void OAIHttpRoute::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_match_isSet = false;
    m_match_isValid = false;

    m_retry_policy_isSet = false;
    m_retry_policy_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIHttpRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRoute::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_retry_policy_isValid = ::OpenAPI::fromJsonValue(m_retry_policy, json[QString("retryPolicy")]);
    m_retry_policy_isSet = !json[QString("retryPolicy")].isNull() && m_retry_policy_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIHttpRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_match.isSet()) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_retry_policy.isSet()) {
        obj.insert(QString("retryPolicy"), ::OpenAPI::toJsonValue(m_retry_policy));
    }
    if (m_timeout.isSet()) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

OAIHttpRoute_action OAIHttpRoute::getAction() const {
    return m_action;
}
void OAIHttpRoute::setAction(const OAIHttpRoute_action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIHttpRoute::is_action_Set() const{
    return m_action_isSet;
}

bool OAIHttpRoute::is_action_Valid() const{
    return m_action_isValid;
}

OAIHttpRoute_match OAIHttpRoute::getMatch() const {
    return m_match;
}
void OAIHttpRoute::setMatch(const OAIHttpRoute_match &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAIHttpRoute::is_match_Set() const{
    return m_match_isSet;
}

bool OAIHttpRoute::is_match_Valid() const{
    return m_match_isValid;
}

OAIHttpRoute_retryPolicy OAIHttpRoute::getRetryPolicy() const {
    return m_retry_policy;
}
void OAIHttpRoute::setRetryPolicy(const OAIHttpRoute_retryPolicy &retry_policy) {
    m_retry_policy = retry_policy;
    m_retry_policy_isSet = true;
}

bool OAIHttpRoute::is_retry_policy_Set() const{
    return m_retry_policy_isSet;
}

bool OAIHttpRoute::is_retry_policy_Valid() const{
    return m_retry_policy_isValid;
}

OAIHttpRoute_timeout OAIHttpRoute::getTimeout() const {
    return m_timeout;
}
void OAIHttpRoute::setTimeout(const OAIHttpRoute_timeout &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIHttpRoute::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIHttpRoute::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIHttpRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_match_isValid && true;
}

} // namespace OpenAPI
