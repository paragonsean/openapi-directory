/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHttpRoute.h
 *
 * An object that represents an HTTP or HTTP/2 route type.
 */

#ifndef OAIHttpRoute_H
#define OAIHttpRoute_H

#include <QJsonObject>

#include "OAIHttpRoute_action.h"
#include "OAIHttpRoute_match.h"
#include "OAIHttpRoute_retryPolicy.h"
#include "OAIHttpRoute_timeout.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHttpRoute_action;
class OAIHttpRoute_match;
class OAIHttpRoute_retryPolicy;
class OAIHttpRoute_timeout;

class OAIHttpRoute : public OAIObject {
public:
    OAIHttpRoute();
    OAIHttpRoute(QString json);
    ~OAIHttpRoute() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIHttpRoute_action getAction() const;
    void setAction(const OAIHttpRoute_action &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    OAIHttpRoute_match getMatch() const;
    void setMatch(const OAIHttpRoute_match &match);
    bool is_match_Set() const;
    bool is_match_Valid() const;

    OAIHttpRoute_retryPolicy getRetryPolicy() const;
    void setRetryPolicy(const OAIHttpRoute_retryPolicy &retry_policy);
    bool is_retry_policy_Set() const;
    bool is_retry_policy_Valid() const;

    OAIHttpRoute_timeout getTimeout() const;
    void setTimeout(const OAIHttpRoute_timeout &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIHttpRoute_action m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    OAIHttpRoute_match m_match;
    bool m_match_isSet;
    bool m_match_isValid;

    OAIHttpRoute_retryPolicy m_retry_policy;
    bool m_retry_policy_isSet;
    bool m_retry_policy_isValid;

    OAIHttpRoute_timeout m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHttpRoute)

#endif // OAIHttpRoute_H
