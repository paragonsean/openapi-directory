/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNodeConnectionPool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNodeConnectionPool::OAIVirtualNodeConnectionPool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNodeConnectionPool::OAIVirtualNodeConnectionPool() {
    this->initializeModel();
}

OAIVirtualNodeConnectionPool::~OAIVirtualNodeConnectionPool() {}

void OAIVirtualNodeConnectionPool::initializeModel() {

    m_grpc_isSet = false;
    m_grpc_isValid = false;

    m_http_isSet = false;
    m_http_isValid = false;

    m_http2_isSet = false;
    m_http2_isValid = false;

    m_tcp_isSet = false;
    m_tcp_isValid = false;
}

void OAIVirtualNodeConnectionPool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNodeConnectionPool::fromJsonObject(QJsonObject json) {

    m_grpc_isValid = ::OpenAPI::fromJsonValue(m_grpc, json[QString("grpc")]);
    m_grpc_isSet = !json[QString("grpc")].isNull() && m_grpc_isValid;

    m_http_isValid = ::OpenAPI::fromJsonValue(m_http, json[QString("http")]);
    m_http_isSet = !json[QString("http")].isNull() && m_http_isValid;

    m_http2_isValid = ::OpenAPI::fromJsonValue(m_http2, json[QString("http2")]);
    m_http2_isSet = !json[QString("http2")].isNull() && m_http2_isValid;

    m_tcp_isValid = ::OpenAPI::fromJsonValue(m_tcp, json[QString("tcp")]);
    m_tcp_isSet = !json[QString("tcp")].isNull() && m_tcp_isValid;
}

QString OAIVirtualNodeConnectionPool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNodeConnectionPool::asJsonObject() const {
    QJsonObject obj;
    if (m_grpc.isSet()) {
        obj.insert(QString("grpc"), ::OpenAPI::toJsonValue(m_grpc));
    }
    if (m_http.isSet()) {
        obj.insert(QString("http"), ::OpenAPI::toJsonValue(m_http));
    }
    if (m_http2.isSet()) {
        obj.insert(QString("http2"), ::OpenAPI::toJsonValue(m_http2));
    }
    if (m_tcp.isSet()) {
        obj.insert(QString("tcp"), ::OpenAPI::toJsonValue(m_tcp));
    }
    return obj;
}

OAIVirtualNodeConnectionPool_grpc OAIVirtualNodeConnectionPool::getGrpc() const {
    return m_grpc;
}
void OAIVirtualNodeConnectionPool::setGrpc(const OAIVirtualNodeConnectionPool_grpc &grpc) {
    m_grpc = grpc;
    m_grpc_isSet = true;
}

bool OAIVirtualNodeConnectionPool::is_grpc_Set() const{
    return m_grpc_isSet;
}

bool OAIVirtualNodeConnectionPool::is_grpc_Valid() const{
    return m_grpc_isValid;
}

OAIVirtualNodeConnectionPool_http OAIVirtualNodeConnectionPool::getHttp() const {
    return m_http;
}
void OAIVirtualNodeConnectionPool::setHttp(const OAIVirtualNodeConnectionPool_http &http) {
    m_http = http;
    m_http_isSet = true;
}

bool OAIVirtualNodeConnectionPool::is_http_Set() const{
    return m_http_isSet;
}

bool OAIVirtualNodeConnectionPool::is_http_Valid() const{
    return m_http_isValid;
}

OAIVirtualNodeConnectionPool_http2 OAIVirtualNodeConnectionPool::getHttp2() const {
    return m_http2;
}
void OAIVirtualNodeConnectionPool::setHttp2(const OAIVirtualNodeConnectionPool_http2 &http2) {
    m_http2 = http2;
    m_http2_isSet = true;
}

bool OAIVirtualNodeConnectionPool::is_http2_Set() const{
    return m_http2_isSet;
}

bool OAIVirtualNodeConnectionPool::is_http2_Valid() const{
    return m_http2_isValid;
}

OAIVirtualNodeConnectionPool_tcp OAIVirtualNodeConnectionPool::getTcp() const {
    return m_tcp;
}
void OAIVirtualNodeConnectionPool::setTcp(const OAIVirtualNodeConnectionPool_tcp &tcp) {
    m_tcp = tcp;
    m_tcp_isSet = true;
}

bool OAIVirtualNodeConnectionPool::is_tcp_Set() const{
    return m_tcp_isSet;
}

bool OAIVirtualNodeConnectionPool::is_tcp_Valid() const{
    return m_tcp_isValid;
}

bool OAIVirtualNodeConnectionPool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grpc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tcp.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNodeConnectionPool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
