/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRoute_match.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRoute_match::OAIHttpRoute_match(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRoute_match::OAIHttpRoute_match() {
    this->initializeModel();
}

OAIHttpRoute_match::~OAIHttpRoute_match() {}

void OAIHttpRoute_match::initializeModel() {

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_query_parameters_isSet = false;
    m_query_parameters_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;
}

void OAIHttpRoute_match::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRoute_match::fromJsonObject(QJsonObject json) {

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_query_parameters_isValid = ::OpenAPI::fromJsonValue(m_query_parameters, json[QString("queryParameters")]);
    m_query_parameters_isSet = !json[QString("queryParameters")].isNull() && m_query_parameters_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;
}

QString OAIHttpRoute_match::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRoute_match::asJsonObject() const {
    QJsonObject obj;
    if (m_headers.isSet()) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_method.isSet()) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_path.isSet()) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_query_parameters.isSet()) {
        obj.insert(QString("queryParameters"), ::OpenAPI::toJsonValue(m_query_parameters));
    }
    if (m_scheme.isSet()) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    return obj;
}

QList OAIHttpRoute_match::getHeaders() const {
    return m_headers;
}
void OAIHttpRoute_match::setHeaders(const QList &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIHttpRoute_match::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIHttpRoute_match::is_headers_Valid() const{
    return m_headers_isValid;
}

OAIHttpMethod OAIHttpRoute_match::getMethod() const {
    return m_method;
}
void OAIHttpRoute_match::setMethod(const OAIHttpMethod &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIHttpRoute_match::is_method_Set() const{
    return m_method_isSet;
}

bool OAIHttpRoute_match::is_method_Valid() const{
    return m_method_isValid;
}

OAIHttpRouteMatch_path OAIHttpRoute_match::getPath() const {
    return m_path;
}
void OAIHttpRoute_match::setPath(const OAIHttpRouteMatch_path &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIHttpRoute_match::is_path_Set() const{
    return m_path_isSet;
}

bool OAIHttpRoute_match::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIHttpRoute_match::getPort() const {
    return m_port;
}
void OAIHttpRoute_match::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIHttpRoute_match::is_port_Set() const{
    return m_port_isSet;
}

bool OAIHttpRoute_match::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIHttpRoute_match::getPrefix() const {
    return m_prefix;
}
void OAIHttpRoute_match::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIHttpRoute_match::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIHttpRoute_match::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QList OAIHttpRoute_match::getQueryParameters() const {
    return m_query_parameters;
}
void OAIHttpRoute_match::setQueryParameters(const QList &query_parameters) {
    m_query_parameters = query_parameters;
    m_query_parameters_isSet = true;
}

bool OAIHttpRoute_match::is_query_parameters_Set() const{
    return m_query_parameters_isSet;
}

bool OAIHttpRoute_match::is_query_parameters_Valid() const{
    return m_query_parameters_isValid;
}

OAIHttpScheme OAIHttpRoute_match::getScheme() const {
    return m_scheme;
}
void OAIHttpRoute_match::setScheme(const OAIHttpScheme &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAIHttpRoute_match::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAIHttpRoute_match::is_scheme_Valid() const{
    return m_scheme_isValid;
}

bool OAIHttpRoute_match::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRoute_match::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
