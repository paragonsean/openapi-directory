/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMeshInput_spec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMeshInput_spec::OAICreateMeshInput_spec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMeshInput_spec::OAICreateMeshInput_spec() {
    this->initializeModel();
}

OAICreateMeshInput_spec::~OAICreateMeshInput_spec() {}

void OAICreateMeshInput_spec::initializeModel() {

    m_egress_filter_isSet = false;
    m_egress_filter_isValid = false;

    m_service_discovery_isSet = false;
    m_service_discovery_isValid = false;
}

void OAICreateMeshInput_spec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMeshInput_spec::fromJsonObject(QJsonObject json) {

    m_egress_filter_isValid = ::OpenAPI::fromJsonValue(m_egress_filter, json[QString("egressFilter")]);
    m_egress_filter_isSet = !json[QString("egressFilter")].isNull() && m_egress_filter_isValid;

    m_service_discovery_isValid = ::OpenAPI::fromJsonValue(m_service_discovery, json[QString("serviceDiscovery")]);
    m_service_discovery_isSet = !json[QString("serviceDiscovery")].isNull() && m_service_discovery_isValid;
}

QString OAICreateMeshInput_spec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMeshInput_spec::asJsonObject() const {
    QJsonObject obj;
    if (m_egress_filter.isSet()) {
        obj.insert(QString("egressFilter"), ::OpenAPI::toJsonValue(m_egress_filter));
    }
    if (m_service_discovery.isSet()) {
        obj.insert(QString("serviceDiscovery"), ::OpenAPI::toJsonValue(m_service_discovery));
    }
    return obj;
}

OAICreateMesh_request_spec_egressFilter OAICreateMeshInput_spec::getEgressFilter() const {
    return m_egress_filter;
}
void OAICreateMeshInput_spec::setEgressFilter(const OAICreateMesh_request_spec_egressFilter &egress_filter) {
    m_egress_filter = egress_filter;
    m_egress_filter_isSet = true;
}

bool OAICreateMeshInput_spec::is_egress_filter_Set() const{
    return m_egress_filter_isSet;
}

bool OAICreateMeshInput_spec::is_egress_filter_Valid() const{
    return m_egress_filter_isValid;
}

OAIMeshServiceDiscovery OAICreateMeshInput_spec::getServiceDiscovery() const {
    return m_service_discovery;
}
void OAICreateMeshInput_spec::setServiceDiscovery(const OAIMeshServiceDiscovery &service_discovery) {
    m_service_discovery = service_discovery;
    m_service_discovery_isSet = true;
}

bool OAICreateMeshInput_spec::is_service_discovery_Set() const{
    return m_service_discovery_isSet;
}

bool OAICreateMeshInput_spec::is_service_discovery_Valid() const{
    return m_service_discovery_isValid;
}

bool OAICreateMeshInput_spec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_egress_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_discovery.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMeshInput_spec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
