/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListener_outlierDetection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListener_outlierDetection::OAIListener_outlierDetection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListener_outlierDetection::OAIListener_outlierDetection() {
    this->initializeModel();
}

OAIListener_outlierDetection::~OAIListener_outlierDetection() {}

void OAIListener_outlierDetection::initializeModel() {

    m_base_ejection_duration_isSet = false;
    m_base_ejection_duration_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_max_ejection_percent_isSet = false;
    m_max_ejection_percent_isValid = false;

    m_max_server_errors_isSet = false;
    m_max_server_errors_isValid = false;
}

void OAIListener_outlierDetection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListener_outlierDetection::fromJsonObject(QJsonObject json) {

    m_base_ejection_duration_isValid = ::OpenAPI::fromJsonValue(m_base_ejection_duration, json[QString("baseEjectionDuration")]);
    m_base_ejection_duration_isSet = !json[QString("baseEjectionDuration")].isNull() && m_base_ejection_duration_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_max_ejection_percent_isValid = ::OpenAPI::fromJsonValue(m_max_ejection_percent, json[QString("maxEjectionPercent")]);
    m_max_ejection_percent_isSet = !json[QString("maxEjectionPercent")].isNull() && m_max_ejection_percent_isValid;

    m_max_server_errors_isValid = ::OpenAPI::fromJsonValue(m_max_server_errors, json[QString("maxServerErrors")]);
    m_max_server_errors_isSet = !json[QString("maxServerErrors")].isNull() && m_max_server_errors_isValid;
}

QString OAIListener_outlierDetection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListener_outlierDetection::asJsonObject() const {
    QJsonObject obj;
    if (m_base_ejection_duration.isSet()) {
        obj.insert(QString("baseEjectionDuration"), ::OpenAPI::toJsonValue(m_base_ejection_duration));
    }
    if (m_interval.isSet()) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_max_ejection_percent_isSet) {
        obj.insert(QString("maxEjectionPercent"), ::OpenAPI::toJsonValue(m_max_ejection_percent));
    }
    if (m_max_server_errors_isSet) {
        obj.insert(QString("maxServerErrors"), ::OpenAPI::toJsonValue(m_max_server_errors));
    }
    return obj;
}

OAIOutlierDetection_baseEjectionDuration OAIListener_outlierDetection::getBaseEjectionDuration() const {
    return m_base_ejection_duration;
}
void OAIListener_outlierDetection::setBaseEjectionDuration(const OAIOutlierDetection_baseEjectionDuration &base_ejection_duration) {
    m_base_ejection_duration = base_ejection_duration;
    m_base_ejection_duration_isSet = true;
}

bool OAIListener_outlierDetection::is_base_ejection_duration_Set() const{
    return m_base_ejection_duration_isSet;
}

bool OAIListener_outlierDetection::is_base_ejection_duration_Valid() const{
    return m_base_ejection_duration_isValid;
}

OAIOutlierDetection_interval OAIListener_outlierDetection::getInterval() const {
    return m_interval;
}
void OAIListener_outlierDetection::setInterval(const OAIOutlierDetection_interval &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIListener_outlierDetection::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIListener_outlierDetection::is_interval_Valid() const{
    return m_interval_isValid;
}

qint32 OAIListener_outlierDetection::getMaxEjectionPercent() const {
    return m_max_ejection_percent;
}
void OAIListener_outlierDetection::setMaxEjectionPercent(const qint32 &max_ejection_percent) {
    m_max_ejection_percent = max_ejection_percent;
    m_max_ejection_percent_isSet = true;
}

bool OAIListener_outlierDetection::is_max_ejection_percent_Set() const{
    return m_max_ejection_percent_isSet;
}

bool OAIListener_outlierDetection::is_max_ejection_percent_Valid() const{
    return m_max_ejection_percent_isValid;
}

qint32 OAIListener_outlierDetection::getMaxServerErrors() const {
    return m_max_server_errors;
}
void OAIListener_outlierDetection::setMaxServerErrors(const qint32 &max_server_errors) {
    m_max_server_errors = max_server_errors;
    m_max_server_errors_isSet = true;
}

bool OAIListener_outlierDetection::is_max_server_errors_Set() const{
    return m_max_server_errors_isSet;
}

bool OAIListener_outlierDetection::is_max_server_errors_Valid() const{
    return m_max_server_errors_isValid;
}

bool OAIListener_outlierDetection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_ejection_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_ejection_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_server_errors_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListener_outlierDetection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_ejection_duration_isValid && m_interval_isValid && m_max_ejection_percent_isValid && m_max_server_errors_isValid && true;
}

} // namespace OpenAPI
