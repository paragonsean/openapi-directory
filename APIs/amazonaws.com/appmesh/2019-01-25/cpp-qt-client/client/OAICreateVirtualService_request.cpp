/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVirtualService_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVirtualService_request::OAICreateVirtualService_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVirtualService_request::OAICreateVirtualService_request() {
    this->initializeModel();
}

OAICreateVirtualService_request::~OAICreateVirtualService_request() {}

void OAICreateVirtualService_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_virtual_service_name_isSet = false;
    m_virtual_service_name_isValid = false;
}

void OAICreateVirtualService_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVirtualService_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_virtual_service_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_service_name, json[QString("virtualServiceName")]);
    m_virtual_service_name_isSet = !json[QString("virtualServiceName")].isNull() && m_virtual_service_name_isValid;
}

QString OAICreateVirtualService_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVirtualService_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_virtual_service_name_isSet) {
        obj.insert(QString("virtualServiceName"), ::OpenAPI::toJsonValue(m_virtual_service_name));
    }
    return obj;
}

QString OAICreateVirtualService_request::getClientToken() const {
    return m_client_token;
}
void OAICreateVirtualService_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateVirtualService_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateVirtualService_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateVirtualService_request_spec OAICreateVirtualService_request::getSpec() const {
    return m_spec;
}
void OAICreateVirtualService_request::setSpec(const OAICreateVirtualService_request_spec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAICreateVirtualService_request::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAICreateVirtualService_request::is_spec_Valid() const{
    return m_spec_isValid;
}

QList<OAITagRef> OAICreateVirtualService_request::getTags() const {
    return m_tags;
}
void OAICreateVirtualService_request::setTags(const QList<OAITagRef> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateVirtualService_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateVirtualService_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateVirtualService_request::getVirtualServiceName() const {
    return m_virtual_service_name;
}
void OAICreateVirtualService_request::setVirtualServiceName(const QString &virtual_service_name) {
    m_virtual_service_name = virtual_service_name;
    m_virtual_service_name_isSet = true;
}

bool OAICreateVirtualService_request::is_virtual_service_name_Set() const{
    return m_virtual_service_name_isSet;
}

bool OAICreateVirtualService_request::is_virtual_service_name_Valid() const{
    return m_virtual_service_name_isValid;
}

bool OAICreateVirtualService_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVirtualService_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_spec_isValid && m_virtual_service_name_isValid && true;
}

} // namespace OpenAPI
