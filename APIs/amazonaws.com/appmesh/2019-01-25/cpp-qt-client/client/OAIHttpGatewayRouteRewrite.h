/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHttpGatewayRouteRewrite.h
 *
 * An object representing the gateway route to rewrite.
 */

#ifndef OAIHttpGatewayRouteRewrite_H
#define OAIHttpGatewayRouteRewrite_H

#include <QJsonObject>

#include "OAIHttpGatewayRouteRewrite_hostname.h"
#include "OAIHttpGatewayRouteRewrite_path.h"
#include "OAIHttpGatewayRouteRewrite_prefix.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHttpGatewayRouteRewrite_hostname;
class OAIHttpGatewayRouteRewrite_path;
class OAIHttpGatewayRouteRewrite_prefix;

class OAIHttpGatewayRouteRewrite : public OAIObject {
public:
    OAIHttpGatewayRouteRewrite();
    OAIHttpGatewayRouteRewrite(QString json);
    ~OAIHttpGatewayRouteRewrite() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIHttpGatewayRouteRewrite_hostname getHostname() const;
    void setHostname(const OAIHttpGatewayRouteRewrite_hostname &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    OAIHttpGatewayRouteRewrite_path getPath() const;
    void setPath(const OAIHttpGatewayRouteRewrite_path &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    OAIHttpGatewayRouteRewrite_prefix getPrefix() const;
    void setPrefix(const OAIHttpGatewayRouteRewrite_prefix &prefix);
    bool is_prefix_Set() const;
    bool is_prefix_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIHttpGatewayRouteRewrite_hostname m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    OAIHttpGatewayRouteRewrite_path m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    OAIHttpGatewayRouteRewrite_prefix m_prefix;
    bool m_prefix_isSet;
    bool m_prefix_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHttpGatewayRouteRewrite)

#endif // OAIHttpGatewayRouteRewrite_H
