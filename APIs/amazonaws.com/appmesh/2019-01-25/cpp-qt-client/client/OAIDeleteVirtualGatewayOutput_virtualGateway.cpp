/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteVirtualGatewayOutput_virtualGateway.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteVirtualGatewayOutput_virtualGateway::OAIDeleteVirtualGatewayOutput_virtualGateway(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteVirtualGatewayOutput_virtualGateway::OAIDeleteVirtualGatewayOutput_virtualGateway() {
    this->initializeModel();
}

OAIDeleteVirtualGatewayOutput_virtualGateway::~OAIDeleteVirtualGatewayOutput_virtualGateway() {}

void OAIDeleteVirtualGatewayOutput_virtualGateway::initializeModel() {

    m_mesh_name_isSet = false;
    m_mesh_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_virtual_gateway_name_isSet = false;
    m_virtual_gateway_name_isValid = false;
}

void OAIDeleteVirtualGatewayOutput_virtualGateway::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteVirtualGatewayOutput_virtualGateway::fromJsonObject(QJsonObject json) {

    m_mesh_name_isValid = ::OpenAPI::fromJsonValue(m_mesh_name, json[QString("meshName")]);
    m_mesh_name_isSet = !json[QString("meshName")].isNull() && m_mesh_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_virtual_gateway_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_gateway_name, json[QString("virtualGatewayName")]);
    m_virtual_gateway_name_isSet = !json[QString("virtualGatewayName")].isNull() && m_virtual_gateway_name_isValid;
}

QString OAIDeleteVirtualGatewayOutput_virtualGateway::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteVirtualGatewayOutput_virtualGateway::asJsonObject() const {
    QJsonObject obj;
    if (m_mesh_name_isSet) {
        obj.insert(QString("meshName"), ::OpenAPI::toJsonValue(m_mesh_name));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_virtual_gateway_name_isSet) {
        obj.insert(QString("virtualGatewayName"), ::OpenAPI::toJsonValue(m_virtual_gateway_name));
    }
    return obj;
}

QString OAIDeleteVirtualGatewayOutput_virtualGateway::getMeshName() const {
    return m_mesh_name;
}
void OAIDeleteVirtualGatewayOutput_virtualGateway::setMeshName(const QString &mesh_name) {
    m_mesh_name = mesh_name;
    m_mesh_name_isSet = true;
}

bool OAIDeleteVirtualGatewayOutput_virtualGateway::is_mesh_name_Set() const{
    return m_mesh_name_isSet;
}

bool OAIDeleteVirtualGatewayOutput_virtualGateway::is_mesh_name_Valid() const{
    return m_mesh_name_isValid;
}

OAIResourceMetadata OAIDeleteVirtualGatewayOutput_virtualGateway::getMetadata() const {
    return m_metadata;
}
void OAIDeleteVirtualGatewayOutput_virtualGateway::setMetadata(const OAIResourceMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDeleteVirtualGatewayOutput_virtualGateway::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDeleteVirtualGatewayOutput_virtualGateway::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIVirtualGatewayData_spec OAIDeleteVirtualGatewayOutput_virtualGateway::getSpec() const {
    return m_spec;
}
void OAIDeleteVirtualGatewayOutput_virtualGateway::setSpec(const OAIVirtualGatewayData_spec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIDeleteVirtualGatewayOutput_virtualGateway::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIDeleteVirtualGatewayOutput_virtualGateway::is_spec_Valid() const{
    return m_spec_isValid;
}

OAIVirtualGatewayData_status OAIDeleteVirtualGatewayOutput_virtualGateway::getStatus() const {
    return m_status;
}
void OAIDeleteVirtualGatewayOutput_virtualGateway::setStatus(const OAIVirtualGatewayData_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeleteVirtualGatewayOutput_virtualGateway::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeleteVirtualGatewayOutput_virtualGateway::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeleteVirtualGatewayOutput_virtualGateway::getVirtualGatewayName() const {
    return m_virtual_gateway_name;
}
void OAIDeleteVirtualGatewayOutput_virtualGateway::setVirtualGatewayName(const QString &virtual_gateway_name) {
    m_virtual_gateway_name = virtual_gateway_name;
    m_virtual_gateway_name_isSet = true;
}

bool OAIDeleteVirtualGatewayOutput_virtualGateway::is_virtual_gateway_name_Set() const{
    return m_virtual_gateway_name_isSet;
}

bool OAIDeleteVirtualGatewayOutput_virtualGateway::is_virtual_gateway_name_Valid() const{
    return m_virtual_gateway_name_isValid;
}

bool OAIDeleteVirtualGatewayOutput_virtualGateway::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mesh_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_gateway_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteVirtualGatewayOutput_virtualGateway::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mesh_name_isValid && m_metadata_isValid && m_spec_isValid && m_status_isValid && m_virtual_gateway_name_isValid && true;
}

} // namespace OpenAPI
