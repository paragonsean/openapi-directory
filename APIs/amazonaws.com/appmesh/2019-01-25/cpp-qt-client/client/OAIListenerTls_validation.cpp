/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListenerTls_validation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListenerTls_validation::OAIListenerTls_validation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListenerTls_validation::OAIListenerTls_validation() {
    this->initializeModel();
}

OAIListenerTls_validation::~OAIListenerTls_validation() {}

void OAIListenerTls_validation::initializeModel() {

    m_subject_alternative_names_isSet = false;
    m_subject_alternative_names_isValid = false;

    m_trust_isSet = false;
    m_trust_isValid = false;
}

void OAIListenerTls_validation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListenerTls_validation::fromJsonObject(QJsonObject json) {

    m_subject_alternative_names_isValid = ::OpenAPI::fromJsonValue(m_subject_alternative_names, json[QString("subjectAlternativeNames")]);
    m_subject_alternative_names_isSet = !json[QString("subjectAlternativeNames")].isNull() && m_subject_alternative_names_isValid;

    m_trust_isValid = ::OpenAPI::fromJsonValue(m_trust, json[QString("trust")]);
    m_trust_isSet = !json[QString("trust")].isNull() && m_trust_isValid;
}

QString OAIListenerTls_validation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListenerTls_validation::asJsonObject() const {
    QJsonObject obj;
    if (m_subject_alternative_names.isSet()) {
        obj.insert(QString("subjectAlternativeNames"), ::OpenAPI::toJsonValue(m_subject_alternative_names));
    }
    if (m_trust.isSet()) {
        obj.insert(QString("trust"), ::OpenAPI::toJsonValue(m_trust));
    }
    return obj;
}

OAIListenerTlsValidationContext_subjectAlternativeNames OAIListenerTls_validation::getSubjectAlternativeNames() const {
    return m_subject_alternative_names;
}
void OAIListenerTls_validation::setSubjectAlternativeNames(const OAIListenerTlsValidationContext_subjectAlternativeNames &subject_alternative_names) {
    m_subject_alternative_names = subject_alternative_names;
    m_subject_alternative_names_isSet = true;
}

bool OAIListenerTls_validation::is_subject_alternative_names_Set() const{
    return m_subject_alternative_names_isSet;
}

bool OAIListenerTls_validation::is_subject_alternative_names_Valid() const{
    return m_subject_alternative_names_isValid;
}

OAIListenerTlsValidationContext_trust OAIListenerTls_validation::getTrust() const {
    return m_trust;
}
void OAIListenerTls_validation::setTrust(const OAIListenerTlsValidationContext_trust &trust) {
    m_trust = trust;
    m_trust_isSet = true;
}

bool OAIListenerTls_validation::is_trust_Set() const{
    return m_trust_isSet;
}

bool OAIListenerTls_validation::is_trust_Valid() const{
    return m_trust_isValid;
}

bool OAIListenerTls_validation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subject_alternative_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trust.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListenerTls_validation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_trust_isValid && true;
}

} // namespace OpenAPI
