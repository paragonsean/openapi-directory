/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that represents a service mesh returned by a list operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.616443-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MeshRef {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "lastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_MESH_NAME = "meshName";
  @SerializedName(SERIALIZED_NAME_MESH_NAME)
  private String meshName;

  public static final String SERIALIZED_NAME_MESH_OWNER = "meshOwner";
  @SerializedName(SERIALIZED_NAME_MESH_OWNER)
  private String meshOwner;

  public static final String SERIALIZED_NAME_RESOURCE_OWNER = "resourceOwner";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER)
  private String resourceOwner;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public MeshRef() {
  }

  public MeshRef arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public MeshRef createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public MeshRef lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public MeshRef meshName(String meshName) {
    this.meshName = meshName;
    return this;
  }

  /**
   * Get meshName
   * @return meshName
   */
  @javax.annotation.Nonnull
  public String getMeshName() {
    return meshName;
  }

  public void setMeshName(String meshName) {
    this.meshName = meshName;
  }


  public MeshRef meshOwner(String meshOwner) {
    this.meshOwner = meshOwner;
    return this;
  }

  /**
   * Get meshOwner
   * @return meshOwner
   */
  @javax.annotation.Nonnull
  public String getMeshOwner() {
    return meshOwner;
  }

  public void setMeshOwner(String meshOwner) {
    this.meshOwner = meshOwner;
  }


  public MeshRef resourceOwner(String resourceOwner) {
    this.resourceOwner = resourceOwner;
    return this;
  }

  /**
   * Get resourceOwner
   * @return resourceOwner
   */
  @javax.annotation.Nonnull
  public String getResourceOwner() {
    return resourceOwner;
  }

  public void setResourceOwner(String resourceOwner) {
    this.resourceOwner = resourceOwner;
  }


  public MeshRef version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeshRef meshRef = (MeshRef) o;
    return Objects.equals(this.arn, meshRef.arn) &&
        Objects.equals(this.createdAt, meshRef.createdAt) &&
        Objects.equals(this.lastUpdatedAt, meshRef.lastUpdatedAt) &&
        Objects.equals(this.meshName, meshRef.meshName) &&
        Objects.equals(this.meshOwner, meshRef.meshOwner) &&
        Objects.equals(this.resourceOwner, meshRef.resourceOwner) &&
        Objects.equals(this.version, meshRef.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, createdAt, lastUpdatedAt, meshName, meshOwner, resourceOwner, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeshRef {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    meshName: ").append(toIndentedString(meshName)).append("\n");
    sb.append("    meshOwner: ").append(toIndentedString(meshOwner)).append("\n");
    sb.append("    resourceOwner: ").append(toIndentedString(resourceOwner)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("createdAt");
    openapiFields.add("lastUpdatedAt");
    openapiFields.add("meshName");
    openapiFields.add("meshOwner");
    openapiFields.add("resourceOwner");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("lastUpdatedAt");
    openapiRequiredFields.add("meshName");
    openapiRequiredFields.add("meshOwner");
    openapiRequiredFields.add("resourceOwner");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MeshRef
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MeshRef.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MeshRef is not found in the empty JSON string", MeshRef.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MeshRef.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MeshRef` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MeshRef.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `createdAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      // validate the required field `lastUpdatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedAt"));
      // validate the required field `meshName`
      String.validateJsonElement(jsonObj.get("meshName"));
      // validate the required field `meshOwner`
      String.validateJsonElement(jsonObj.get("meshOwner"));
      // validate the required field `resourceOwner`
      String.validateJsonElement(jsonObj.get("resourceOwner"));
      // validate the required field `version`
      Integer.validateJsonElement(jsonObj.get("version"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MeshRef.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MeshRef' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MeshRef> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MeshRef.class));

       return (TypeAdapter<T>) new TypeAdapter<MeshRef>() {
           @Override
           public void write(JsonWriter out, MeshRef value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MeshRef read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MeshRef given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MeshRef
   * @throws IOException if the JSON string is invalid with respect to MeshRef
   */
  public static MeshRef fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MeshRef.class);
  }

  /**
   * Convert an instance of MeshRef to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

