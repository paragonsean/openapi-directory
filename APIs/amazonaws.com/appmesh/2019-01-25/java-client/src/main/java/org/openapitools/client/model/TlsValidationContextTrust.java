/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ListenerTlsValidationContextTrustFile;
import org.openapitools.client.model.TlsValidationContextTrustAcm;
import org.openapitools.client.model.TlsValidationContextTrustSds;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TlsValidationContextTrust
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.616443-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TlsValidationContextTrust {
  public static final String SERIALIZED_NAME_ACM = "acm";
  @SerializedName(SERIALIZED_NAME_ACM)
  private TlsValidationContextTrustAcm acm;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private ListenerTlsValidationContextTrustFile _file;

  public static final String SERIALIZED_NAME_SDS = "sds";
  @SerializedName(SERIALIZED_NAME_SDS)
  private TlsValidationContextTrustSds sds;

  public TlsValidationContextTrust() {
  }

  public TlsValidationContextTrust acm(TlsValidationContextTrustAcm acm) {
    this.acm = acm;
    return this;
  }

  /**
   * Get acm
   * @return acm
   */
  @javax.annotation.Nullable
  public TlsValidationContextTrustAcm getAcm() {
    return acm;
  }

  public void setAcm(TlsValidationContextTrustAcm acm) {
    this.acm = acm;
  }


  public TlsValidationContextTrust _file(ListenerTlsValidationContextTrustFile _file) {
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @javax.annotation.Nullable
  public ListenerTlsValidationContextTrustFile getFile() {
    return _file;
  }

  public void setFile(ListenerTlsValidationContextTrustFile _file) {
    this._file = _file;
  }


  public TlsValidationContextTrust sds(TlsValidationContextTrustSds sds) {
    this.sds = sds;
    return this;
  }

  /**
   * Get sds
   * @return sds
   */
  @javax.annotation.Nullable
  public TlsValidationContextTrustSds getSds() {
    return sds;
  }

  public void setSds(TlsValidationContextTrustSds sds) {
    this.sds = sds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TlsValidationContextTrust tlsValidationContextTrust = (TlsValidationContextTrust) o;
    return Objects.equals(this.acm, tlsValidationContextTrust.acm) &&
        Objects.equals(this._file, tlsValidationContextTrust._file) &&
        Objects.equals(this.sds, tlsValidationContextTrust.sds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acm, _file, sds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TlsValidationContextTrust {\n");
    sb.append("    acm: ").append(toIndentedString(acm)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    sds: ").append(toIndentedString(sds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acm");
    openapiFields.add("file");
    openapiFields.add("sds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TlsValidationContextTrust
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TlsValidationContextTrust.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TlsValidationContextTrust is not found in the empty JSON string", TlsValidationContextTrust.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TlsValidationContextTrust.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TlsValidationContextTrust` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `acm`
      if (jsonObj.get("acm") != null && !jsonObj.get("acm").isJsonNull()) {
        TlsValidationContextTrustAcm.validateJsonElement(jsonObj.get("acm"));
      }
      // validate the optional field `file`
      if (jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) {
        ListenerTlsValidationContextTrustFile.validateJsonElement(jsonObj.get("file"));
      }
      // validate the optional field `sds`
      if (jsonObj.get("sds") != null && !jsonObj.get("sds").isJsonNull()) {
        TlsValidationContextTrustSds.validateJsonElement(jsonObj.get("sds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TlsValidationContextTrust.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TlsValidationContextTrust' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TlsValidationContextTrust> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TlsValidationContextTrust.class));

       return (TypeAdapter<T>) new TypeAdapter<TlsValidationContextTrust>() {
           @Override
           public void write(JsonWriter out, TlsValidationContextTrust value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TlsValidationContextTrust read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TlsValidationContextTrust given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TlsValidationContextTrust
   * @throws IOException if the JSON string is invalid with respect to TlsValidationContextTrust
   */
  public static TlsValidationContextTrust fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TlsValidationContextTrust.class);
  }

  /**
   * Convert an instance of TlsValidationContextTrust to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

