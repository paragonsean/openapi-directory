/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OutlierDetectionBaseEjectionDuration;
import org.openapitools.client.model.OutlierDetectionInterval;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that represents the outlier detection for a virtual node&#39;s listener.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.616443-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutlierDetection {
  public static final String SERIALIZED_NAME_BASE_EJECTION_DURATION = "baseEjectionDuration";
  @SerializedName(SERIALIZED_NAME_BASE_EJECTION_DURATION)
  private OutlierDetectionBaseEjectionDuration baseEjectionDuration;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private OutlierDetectionInterval interval;

  public static final String SERIALIZED_NAME_MAX_EJECTION_PERCENT = "maxEjectionPercent";
  @SerializedName(SERIALIZED_NAME_MAX_EJECTION_PERCENT)
  private Integer maxEjectionPercent;

  public static final String SERIALIZED_NAME_MAX_SERVER_ERRORS = "maxServerErrors";
  @SerializedName(SERIALIZED_NAME_MAX_SERVER_ERRORS)
  private Integer maxServerErrors;

  public OutlierDetection() {
  }

  public OutlierDetection baseEjectionDuration(OutlierDetectionBaseEjectionDuration baseEjectionDuration) {
    this.baseEjectionDuration = baseEjectionDuration;
    return this;
  }

  /**
   * Get baseEjectionDuration
   * @return baseEjectionDuration
   */
  @javax.annotation.Nonnull
  public OutlierDetectionBaseEjectionDuration getBaseEjectionDuration() {
    return baseEjectionDuration;
  }

  public void setBaseEjectionDuration(OutlierDetectionBaseEjectionDuration baseEjectionDuration) {
    this.baseEjectionDuration = baseEjectionDuration;
  }


  public OutlierDetection interval(OutlierDetectionInterval interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Get interval
   * @return interval
   */
  @javax.annotation.Nonnull
  public OutlierDetectionInterval getInterval() {
    return interval;
  }

  public void setInterval(OutlierDetectionInterval interval) {
    this.interval = interval;
  }


  public OutlierDetection maxEjectionPercent(Integer maxEjectionPercent) {
    this.maxEjectionPercent = maxEjectionPercent;
    return this;
  }

  /**
   * Get maxEjectionPercent
   * @return maxEjectionPercent
   */
  @javax.annotation.Nonnull
  public Integer getMaxEjectionPercent() {
    return maxEjectionPercent;
  }

  public void setMaxEjectionPercent(Integer maxEjectionPercent) {
    this.maxEjectionPercent = maxEjectionPercent;
  }


  public OutlierDetection maxServerErrors(Integer maxServerErrors) {
    this.maxServerErrors = maxServerErrors;
    return this;
  }

  /**
   * Get maxServerErrors
   * @return maxServerErrors
   */
  @javax.annotation.Nonnull
  public Integer getMaxServerErrors() {
    return maxServerErrors;
  }

  public void setMaxServerErrors(Integer maxServerErrors) {
    this.maxServerErrors = maxServerErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutlierDetection outlierDetection = (OutlierDetection) o;
    return Objects.equals(this.baseEjectionDuration, outlierDetection.baseEjectionDuration) &&
        Objects.equals(this.interval, outlierDetection.interval) &&
        Objects.equals(this.maxEjectionPercent, outlierDetection.maxEjectionPercent) &&
        Objects.equals(this.maxServerErrors, outlierDetection.maxServerErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseEjectionDuration, interval, maxEjectionPercent, maxServerErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutlierDetection {\n");
    sb.append("    baseEjectionDuration: ").append(toIndentedString(baseEjectionDuration)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    maxEjectionPercent: ").append(toIndentedString(maxEjectionPercent)).append("\n");
    sb.append("    maxServerErrors: ").append(toIndentedString(maxServerErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseEjectionDuration");
    openapiFields.add("interval");
    openapiFields.add("maxEjectionPercent");
    openapiFields.add("maxServerErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("baseEjectionDuration");
    openapiRequiredFields.add("interval");
    openapiRequiredFields.add("maxEjectionPercent");
    openapiRequiredFields.add("maxServerErrors");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutlierDetection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutlierDetection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutlierDetection is not found in the empty JSON string", OutlierDetection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutlierDetection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutlierDetection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OutlierDetection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `baseEjectionDuration`
      OutlierDetectionBaseEjectionDuration.validateJsonElement(jsonObj.get("baseEjectionDuration"));
      // validate the required field `interval`
      OutlierDetectionInterval.validateJsonElement(jsonObj.get("interval"));
      // validate the required field `maxEjectionPercent`
      Integer.validateJsonElement(jsonObj.get("maxEjectionPercent"));
      // validate the required field `maxServerErrors`
      Integer.validateJsonElement(jsonObj.get("maxServerErrors"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutlierDetection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutlierDetection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutlierDetection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutlierDetection.class));

       return (TypeAdapter<T>) new TypeAdapter<OutlierDetection>() {
           @Override
           public void write(JsonWriter out, OutlierDetection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutlierDetection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutlierDetection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutlierDetection
   * @throws IOException if the JSON string is invalid with respect to OutlierDetection
   */
  public static OutlierDetection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutlierDetection.class);
  }

  /**
   * Convert an instance of OutlierDetection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

