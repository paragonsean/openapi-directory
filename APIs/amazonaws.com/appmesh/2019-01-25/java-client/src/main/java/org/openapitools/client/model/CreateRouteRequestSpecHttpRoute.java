/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HttpRouteAction;
import org.openapitools.client.model.HttpRouteMatch;
import org.openapitools.client.model.HttpRouteRetryPolicy;
import org.openapitools.client.model.HttpRouteTimeout;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRouteRequestSpecHttpRoute
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.616443-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRouteRequestSpecHttpRoute {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private HttpRouteAction action;

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  private HttpRouteMatch match;

  public static final String SERIALIZED_NAME_RETRY_POLICY = "retryPolicy";
  @SerializedName(SERIALIZED_NAME_RETRY_POLICY)
  private HttpRouteRetryPolicy retryPolicy;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private HttpRouteTimeout timeout;

  public CreateRouteRequestSpecHttpRoute() {
  }

  public CreateRouteRequestSpecHttpRoute action(HttpRouteAction action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nonnull
  public HttpRouteAction getAction() {
    return action;
  }

  public void setAction(HttpRouteAction action) {
    this.action = action;
  }


  public CreateRouteRequestSpecHttpRoute match(HttpRouteMatch match) {
    this.match = match;
    return this;
  }

  /**
   * Get match
   * @return match
   */
  @javax.annotation.Nonnull
  public HttpRouteMatch getMatch() {
    return match;
  }

  public void setMatch(HttpRouteMatch match) {
    this.match = match;
  }


  public CreateRouteRequestSpecHttpRoute retryPolicy(HttpRouteRetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
    return this;
  }

  /**
   * Get retryPolicy
   * @return retryPolicy
   */
  @javax.annotation.Nullable
  public HttpRouteRetryPolicy getRetryPolicy() {
    return retryPolicy;
  }

  public void setRetryPolicy(HttpRouteRetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
  }


  public CreateRouteRequestSpecHttpRoute timeout(HttpRouteTimeout timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Get timeout
   * @return timeout
   */
  @javax.annotation.Nullable
  public HttpRouteTimeout getTimeout() {
    return timeout;
  }

  public void setTimeout(HttpRouteTimeout timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRouteRequestSpecHttpRoute createRouteRequestSpecHttpRoute = (CreateRouteRequestSpecHttpRoute) o;
    return Objects.equals(this.action, createRouteRequestSpecHttpRoute.action) &&
        Objects.equals(this.match, createRouteRequestSpecHttpRoute.match) &&
        Objects.equals(this.retryPolicy, createRouteRequestSpecHttpRoute.retryPolicy) &&
        Objects.equals(this.timeout, createRouteRequestSpecHttpRoute.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, match, retryPolicy, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRouteRequestSpecHttpRoute {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    retryPolicy: ").append(toIndentedString(retryPolicy)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("match");
    openapiFields.add("retryPolicy");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("match");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRouteRequestSpecHttpRoute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRouteRequestSpecHttpRoute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRouteRequestSpecHttpRoute is not found in the empty JSON string", CreateRouteRequestSpecHttpRoute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRouteRequestSpecHttpRoute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRouteRequestSpecHttpRoute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRouteRequestSpecHttpRoute.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `action`
      HttpRouteAction.validateJsonElement(jsonObj.get("action"));
      // validate the required field `match`
      HttpRouteMatch.validateJsonElement(jsonObj.get("match"));
      // validate the optional field `retryPolicy`
      if (jsonObj.get("retryPolicy") != null && !jsonObj.get("retryPolicy").isJsonNull()) {
        HttpRouteRetryPolicy.validateJsonElement(jsonObj.get("retryPolicy"));
      }
      // validate the optional field `timeout`
      if (jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) {
        HttpRouteTimeout.validateJsonElement(jsonObj.get("timeout"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRouteRequestSpecHttpRoute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRouteRequestSpecHttpRoute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRouteRequestSpecHttpRoute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRouteRequestSpecHttpRoute.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRouteRequestSpecHttpRoute>() {
           @Override
           public void write(JsonWriter out, CreateRouteRequestSpecHttpRoute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRouteRequestSpecHttpRoute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRouteRequestSpecHttpRoute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRouteRequestSpecHttpRoute
   * @throws IOException if the JSON string is invalid with respect to CreateRouteRequestSpecHttpRoute
   */
  public static CreateRouteRequestSpecHttpRoute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRouteRequestSpecHttpRoute.class);
  }

  /**
   * Convert an instance of CreateRouteRequestSpecHttpRoute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

