/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HttpGatewayRouteMatchHostname;
import org.openapitools.client.model.HttpGatewayRouteMatchPath;
import org.openapitools.client.model.HttpMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HttpGatewayRouteMatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.616443-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpGatewayRouteMatch {
  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List headers;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private HttpGatewayRouteMatchHostname hostname;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private HttpMethod method;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private HttpGatewayRouteMatchPath path;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_QUERY_PARAMETERS = "queryParameters";
  @SerializedName(SERIALIZED_NAME_QUERY_PARAMETERS)
  private List queryParameters;

  public HttpGatewayRouteMatch() {
  }

  public HttpGatewayRouteMatch headers(List headers) {
    this.headers = headers;
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public List getHeaders() {
    return headers;
  }

  public void setHeaders(List headers) {
    this.headers = headers;
  }


  public HttpGatewayRouteMatch hostname(HttpGatewayRouteMatchHostname hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Get hostname
   * @return hostname
   */
  @javax.annotation.Nullable
  public HttpGatewayRouteMatchHostname getHostname() {
    return hostname;
  }

  public void setHostname(HttpGatewayRouteMatchHostname hostname) {
    this.hostname = hostname;
  }


  public HttpGatewayRouteMatch method(HttpMethod method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public HttpMethod getMethod() {
    return method;
  }

  public void setMethod(HttpMethod method) {
    this.method = method;
  }


  public HttpGatewayRouteMatch path(HttpGatewayRouteMatchPath path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public HttpGatewayRouteMatchPath getPath() {
    return path;
  }

  public void setPath(HttpGatewayRouteMatchPath path) {
    this.path = path;
  }


  public HttpGatewayRouteMatch port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public HttpGatewayRouteMatch prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Get prefix
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public HttpGatewayRouteMatch queryParameters(List queryParameters) {
    this.queryParameters = queryParameters;
    return this;
  }

  /**
   * Get queryParameters
   * @return queryParameters
   */
  @javax.annotation.Nullable
  public List getQueryParameters() {
    return queryParameters;
  }

  public void setQueryParameters(List queryParameters) {
    this.queryParameters = queryParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpGatewayRouteMatch httpGatewayRouteMatch = (HttpGatewayRouteMatch) o;
    return Objects.equals(this.headers, httpGatewayRouteMatch.headers) &&
        Objects.equals(this.hostname, httpGatewayRouteMatch.hostname) &&
        Objects.equals(this.method, httpGatewayRouteMatch.method) &&
        Objects.equals(this.path, httpGatewayRouteMatch.path) &&
        Objects.equals(this.port, httpGatewayRouteMatch.port) &&
        Objects.equals(this.prefix, httpGatewayRouteMatch.prefix) &&
        Objects.equals(this.queryParameters, httpGatewayRouteMatch.queryParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(headers, hostname, method, path, port, prefix, queryParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpGatewayRouteMatch {\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    queryParameters: ").append(toIndentedString(queryParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("headers");
    openapiFields.add("hostname");
    openapiFields.add("method");
    openapiFields.add("path");
    openapiFields.add("port");
    openapiFields.add("prefix");
    openapiFields.add("queryParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpGatewayRouteMatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpGatewayRouteMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpGatewayRouteMatch is not found in the empty JSON string", HttpGatewayRouteMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpGatewayRouteMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpGatewayRouteMatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `headers`
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("headers"));
      }
      // validate the optional field `hostname`
      if (jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) {
        HttpGatewayRouteMatchHostname.validateJsonElement(jsonObj.get("hostname"));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        HttpMethod.validateJsonElement(jsonObj.get("method"));
      }
      // validate the optional field `path`
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) {
        HttpGatewayRouteMatchPath.validateJsonElement(jsonObj.get("path"));
      }
      // validate the optional field `port`
      if (jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("port"));
      }
      // validate the optional field `prefix`
      if (jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("prefix"));
      }
      // validate the optional field `queryParameters`
      if (jsonObj.get("queryParameters") != null && !jsonObj.get("queryParameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("queryParameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpGatewayRouteMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpGatewayRouteMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpGatewayRouteMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpGatewayRouteMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpGatewayRouteMatch>() {
           @Override
           public void write(JsonWriter out, HttpGatewayRouteMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpGatewayRouteMatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpGatewayRouteMatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpGatewayRouteMatch
   * @throws IOException if the JSON string is invalid with respect to HttpGatewayRouteMatch
   */
  public static HttpGatewayRouteMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpGatewayRouteMatch.class);
  }

  /**
   * Convert an instance of HttpGatewayRouteMatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

