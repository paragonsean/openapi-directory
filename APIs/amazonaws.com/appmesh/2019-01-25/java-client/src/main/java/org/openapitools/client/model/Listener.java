/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ListenerConnectionPool;
import org.openapitools.client.model.ListenerHealthCheck;
import org.openapitools.client.model.ListenerOutlierDetection;
import org.openapitools.client.model.ListenerPortMapping;
import org.openapitools.client.model.ListenerTimeout;
import org.openapitools.client.model.ListenerTls;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that represents a listener for a virtual node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.616443-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Listener {
  public static final String SERIALIZED_NAME_CONNECTION_POOL = "connectionPool";
  @SerializedName(SERIALIZED_NAME_CONNECTION_POOL)
  private ListenerConnectionPool connectionPool;

  public static final String SERIALIZED_NAME_HEALTH_CHECK = "healthCheck";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK)
  private ListenerHealthCheck healthCheck;

  public static final String SERIALIZED_NAME_OUTLIER_DETECTION = "outlierDetection";
  @SerializedName(SERIALIZED_NAME_OUTLIER_DETECTION)
  private ListenerOutlierDetection outlierDetection;

  public static final String SERIALIZED_NAME_PORT_MAPPING = "portMapping";
  @SerializedName(SERIALIZED_NAME_PORT_MAPPING)
  private ListenerPortMapping portMapping;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private ListenerTimeout timeout;

  public static final String SERIALIZED_NAME_TLS = "tls";
  @SerializedName(SERIALIZED_NAME_TLS)
  private ListenerTls tls;

  public Listener() {
  }

  public Listener connectionPool(ListenerConnectionPool connectionPool) {
    this.connectionPool = connectionPool;
    return this;
  }

  /**
   * Get connectionPool
   * @return connectionPool
   */
  @javax.annotation.Nullable
  public ListenerConnectionPool getConnectionPool() {
    return connectionPool;
  }

  public void setConnectionPool(ListenerConnectionPool connectionPool) {
    this.connectionPool = connectionPool;
  }


  public Listener healthCheck(ListenerHealthCheck healthCheck) {
    this.healthCheck = healthCheck;
    return this;
  }

  /**
   * Get healthCheck
   * @return healthCheck
   */
  @javax.annotation.Nullable
  public ListenerHealthCheck getHealthCheck() {
    return healthCheck;
  }

  public void setHealthCheck(ListenerHealthCheck healthCheck) {
    this.healthCheck = healthCheck;
  }


  public Listener outlierDetection(ListenerOutlierDetection outlierDetection) {
    this.outlierDetection = outlierDetection;
    return this;
  }

  /**
   * Get outlierDetection
   * @return outlierDetection
   */
  @javax.annotation.Nullable
  public ListenerOutlierDetection getOutlierDetection() {
    return outlierDetection;
  }

  public void setOutlierDetection(ListenerOutlierDetection outlierDetection) {
    this.outlierDetection = outlierDetection;
  }


  public Listener portMapping(ListenerPortMapping portMapping) {
    this.portMapping = portMapping;
    return this;
  }

  /**
   * Get portMapping
   * @return portMapping
   */
  @javax.annotation.Nonnull
  public ListenerPortMapping getPortMapping() {
    return portMapping;
  }

  public void setPortMapping(ListenerPortMapping portMapping) {
    this.portMapping = portMapping;
  }


  public Listener timeout(ListenerTimeout timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Get timeout
   * @return timeout
   */
  @javax.annotation.Nullable
  public ListenerTimeout getTimeout() {
    return timeout;
  }

  public void setTimeout(ListenerTimeout timeout) {
    this.timeout = timeout;
  }


  public Listener tls(ListenerTls tls) {
    this.tls = tls;
    return this;
  }

  /**
   * Get tls
   * @return tls
   */
  @javax.annotation.Nullable
  public ListenerTls getTls() {
    return tls;
  }

  public void setTls(ListenerTls tls) {
    this.tls = tls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Listener listener = (Listener) o;
    return Objects.equals(this.connectionPool, listener.connectionPool) &&
        Objects.equals(this.healthCheck, listener.healthCheck) &&
        Objects.equals(this.outlierDetection, listener.outlierDetection) &&
        Objects.equals(this.portMapping, listener.portMapping) &&
        Objects.equals(this.timeout, listener.timeout) &&
        Objects.equals(this.tls, listener.tls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionPool, healthCheck, outlierDetection, portMapping, timeout, tls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Listener {\n");
    sb.append("    connectionPool: ").append(toIndentedString(connectionPool)).append("\n");
    sb.append("    healthCheck: ").append(toIndentedString(healthCheck)).append("\n");
    sb.append("    outlierDetection: ").append(toIndentedString(outlierDetection)).append("\n");
    sb.append("    portMapping: ").append(toIndentedString(portMapping)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    tls: ").append(toIndentedString(tls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionPool");
    openapiFields.add("healthCheck");
    openapiFields.add("outlierDetection");
    openapiFields.add("portMapping");
    openapiFields.add("timeout");
    openapiFields.add("tls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("portMapping");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Listener
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Listener.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Listener is not found in the empty JSON string", Listener.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Listener.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Listener` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Listener.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `connectionPool`
      if (jsonObj.get("connectionPool") != null && !jsonObj.get("connectionPool").isJsonNull()) {
        ListenerConnectionPool.validateJsonElement(jsonObj.get("connectionPool"));
      }
      // validate the optional field `healthCheck`
      if (jsonObj.get("healthCheck") != null && !jsonObj.get("healthCheck").isJsonNull()) {
        ListenerHealthCheck.validateJsonElement(jsonObj.get("healthCheck"));
      }
      // validate the optional field `outlierDetection`
      if (jsonObj.get("outlierDetection") != null && !jsonObj.get("outlierDetection").isJsonNull()) {
        ListenerOutlierDetection.validateJsonElement(jsonObj.get("outlierDetection"));
      }
      // validate the required field `portMapping`
      ListenerPortMapping.validateJsonElement(jsonObj.get("portMapping"));
      // validate the optional field `timeout`
      if (jsonObj.get("timeout") != null && !jsonObj.get("timeout").isJsonNull()) {
        ListenerTimeout.validateJsonElement(jsonObj.get("timeout"));
      }
      // validate the optional field `tls`
      if (jsonObj.get("tls") != null && !jsonObj.get("tls").isJsonNull()) {
        ListenerTls.validateJsonElement(jsonObj.get("tls"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Listener.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Listener' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Listener> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Listener.class));

       return (TypeAdapter<T>) new TypeAdapter<Listener>() {
           @Override
           public void write(JsonWriter out, Listener value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Listener read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Listener given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Listener
   * @throws IOException if the JSON string is invalid with respect to Listener
   */
  public static Listener fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Listener.class);
  }

  /**
   * Convert an instance of Listener to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

