/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateVirtualNodeRequestSpecBackendDefaults;
import org.openapitools.client.model.CreateVirtualNodeRequestSpecLogging;
import org.openapitools.client.model.CreateVirtualNodeRequestSpecServiceDiscovery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that represents the specification of a virtual node.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.616443-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualNodeSpec {
  public static final String SERIALIZED_NAME_BACKEND_DEFAULTS = "backendDefaults";
  @SerializedName(SERIALIZED_NAME_BACKEND_DEFAULTS)
  private CreateVirtualNodeRequestSpecBackendDefaults backendDefaults;

  public static final String SERIALIZED_NAME_BACKENDS = "backends";
  @SerializedName(SERIALIZED_NAME_BACKENDS)
  private List backends;

  public static final String SERIALIZED_NAME_LISTENERS = "listeners";
  @SerializedName(SERIALIZED_NAME_LISTENERS)
  private List listeners;

  public static final String SERIALIZED_NAME_LOGGING = "logging";
  @SerializedName(SERIALIZED_NAME_LOGGING)
  private CreateVirtualNodeRequestSpecLogging logging;

  public static final String SERIALIZED_NAME_SERVICE_DISCOVERY = "serviceDiscovery";
  @SerializedName(SERIALIZED_NAME_SERVICE_DISCOVERY)
  private CreateVirtualNodeRequestSpecServiceDiscovery serviceDiscovery;

  public VirtualNodeSpec() {
  }

  public VirtualNodeSpec backendDefaults(CreateVirtualNodeRequestSpecBackendDefaults backendDefaults) {
    this.backendDefaults = backendDefaults;
    return this;
  }

  /**
   * Get backendDefaults
   * @return backendDefaults
   */
  @javax.annotation.Nullable
  public CreateVirtualNodeRequestSpecBackendDefaults getBackendDefaults() {
    return backendDefaults;
  }

  public void setBackendDefaults(CreateVirtualNodeRequestSpecBackendDefaults backendDefaults) {
    this.backendDefaults = backendDefaults;
  }


  public VirtualNodeSpec backends(List backends) {
    this.backends = backends;
    return this;
  }

  /**
   * Get backends
   * @return backends
   */
  @javax.annotation.Nullable
  public List getBackends() {
    return backends;
  }

  public void setBackends(List backends) {
    this.backends = backends;
  }


  public VirtualNodeSpec listeners(List listeners) {
    this.listeners = listeners;
    return this;
  }

  /**
   * Get listeners
   * @return listeners
   */
  @javax.annotation.Nullable
  public List getListeners() {
    return listeners;
  }

  public void setListeners(List listeners) {
    this.listeners = listeners;
  }


  public VirtualNodeSpec logging(CreateVirtualNodeRequestSpecLogging logging) {
    this.logging = logging;
    return this;
  }

  /**
   * Get logging
   * @return logging
   */
  @javax.annotation.Nullable
  public CreateVirtualNodeRequestSpecLogging getLogging() {
    return logging;
  }

  public void setLogging(CreateVirtualNodeRequestSpecLogging logging) {
    this.logging = logging;
  }


  public VirtualNodeSpec serviceDiscovery(CreateVirtualNodeRequestSpecServiceDiscovery serviceDiscovery) {
    this.serviceDiscovery = serviceDiscovery;
    return this;
  }

  /**
   * Get serviceDiscovery
   * @return serviceDiscovery
   */
  @javax.annotation.Nullable
  public CreateVirtualNodeRequestSpecServiceDiscovery getServiceDiscovery() {
    return serviceDiscovery;
  }

  public void setServiceDiscovery(CreateVirtualNodeRequestSpecServiceDiscovery serviceDiscovery) {
    this.serviceDiscovery = serviceDiscovery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualNodeSpec virtualNodeSpec = (VirtualNodeSpec) o;
    return Objects.equals(this.backendDefaults, virtualNodeSpec.backendDefaults) &&
        Objects.equals(this.backends, virtualNodeSpec.backends) &&
        Objects.equals(this.listeners, virtualNodeSpec.listeners) &&
        Objects.equals(this.logging, virtualNodeSpec.logging) &&
        Objects.equals(this.serviceDiscovery, virtualNodeSpec.serviceDiscovery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendDefaults, backends, listeners, logging, serviceDiscovery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualNodeSpec {\n");
    sb.append("    backendDefaults: ").append(toIndentedString(backendDefaults)).append("\n");
    sb.append("    backends: ").append(toIndentedString(backends)).append("\n");
    sb.append("    listeners: ").append(toIndentedString(listeners)).append("\n");
    sb.append("    logging: ").append(toIndentedString(logging)).append("\n");
    sb.append("    serviceDiscovery: ").append(toIndentedString(serviceDiscovery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendDefaults");
    openapiFields.add("backends");
    openapiFields.add("listeners");
    openapiFields.add("logging");
    openapiFields.add("serviceDiscovery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualNodeSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualNodeSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualNodeSpec is not found in the empty JSON string", VirtualNodeSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualNodeSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualNodeSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backendDefaults`
      if (jsonObj.get("backendDefaults") != null && !jsonObj.get("backendDefaults").isJsonNull()) {
        CreateVirtualNodeRequestSpecBackendDefaults.validateJsonElement(jsonObj.get("backendDefaults"));
      }
      // validate the optional field `backends`
      if (jsonObj.get("backends") != null && !jsonObj.get("backends").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("backends"));
      }
      // validate the optional field `listeners`
      if (jsonObj.get("listeners") != null && !jsonObj.get("listeners").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("listeners"));
      }
      // validate the optional field `logging`
      if (jsonObj.get("logging") != null && !jsonObj.get("logging").isJsonNull()) {
        CreateVirtualNodeRequestSpecLogging.validateJsonElement(jsonObj.get("logging"));
      }
      // validate the optional field `serviceDiscovery`
      if (jsonObj.get("serviceDiscovery") != null && !jsonObj.get("serviceDiscovery").isJsonNull()) {
        CreateVirtualNodeRequestSpecServiceDiscovery.validateJsonElement(jsonObj.get("serviceDiscovery"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualNodeSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualNodeSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualNodeSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualNodeSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualNodeSpec>() {
           @Override
           public void write(JsonWriter out, VirtualNodeSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualNodeSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualNodeSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualNodeSpec
   * @throws IOException if the JSON string is invalid with respect to VirtualNodeSpec
   */
  public static VirtualNodeSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualNodeSpec.class);
  }

  /**
   * Convert an instance of VirtualNodeSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

