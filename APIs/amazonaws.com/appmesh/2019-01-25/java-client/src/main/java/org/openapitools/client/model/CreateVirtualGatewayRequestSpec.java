/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateVirtualGatewayRequestSpecBackendDefaults;
import org.openapitools.client.model.VirtualGatewayLogging;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that represents the specification of a service mesh resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.616443-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateVirtualGatewayRequestSpec {
  public static final String SERIALIZED_NAME_BACKEND_DEFAULTS = "backendDefaults";
  @SerializedName(SERIALIZED_NAME_BACKEND_DEFAULTS)
  private CreateVirtualGatewayRequestSpecBackendDefaults backendDefaults;

  public static final String SERIALIZED_NAME_LISTENERS = "listeners";
  @SerializedName(SERIALIZED_NAME_LISTENERS)
  private List listeners;

  public static final String SERIALIZED_NAME_LOGGING = "logging";
  @SerializedName(SERIALIZED_NAME_LOGGING)
  private VirtualGatewayLogging logging;

  public CreateVirtualGatewayRequestSpec() {
  }

  public CreateVirtualGatewayRequestSpec backendDefaults(CreateVirtualGatewayRequestSpecBackendDefaults backendDefaults) {
    this.backendDefaults = backendDefaults;
    return this;
  }

  /**
   * Get backendDefaults
   * @return backendDefaults
   */
  @javax.annotation.Nullable
  public CreateVirtualGatewayRequestSpecBackendDefaults getBackendDefaults() {
    return backendDefaults;
  }

  public void setBackendDefaults(CreateVirtualGatewayRequestSpecBackendDefaults backendDefaults) {
    this.backendDefaults = backendDefaults;
  }


  public CreateVirtualGatewayRequestSpec listeners(List listeners) {
    this.listeners = listeners;
    return this;
  }

  /**
   * Get listeners
   * @return listeners
   */
  @javax.annotation.Nullable
  public List getListeners() {
    return listeners;
  }

  public void setListeners(List listeners) {
    this.listeners = listeners;
  }


  public CreateVirtualGatewayRequestSpec logging(VirtualGatewayLogging logging) {
    this.logging = logging;
    return this;
  }

  /**
   * Get logging
   * @return logging
   */
  @javax.annotation.Nullable
  public VirtualGatewayLogging getLogging() {
    return logging;
  }

  public void setLogging(VirtualGatewayLogging logging) {
    this.logging = logging;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateVirtualGatewayRequestSpec createVirtualGatewayRequestSpec = (CreateVirtualGatewayRequestSpec) o;
    return Objects.equals(this.backendDefaults, createVirtualGatewayRequestSpec.backendDefaults) &&
        Objects.equals(this.listeners, createVirtualGatewayRequestSpec.listeners) &&
        Objects.equals(this.logging, createVirtualGatewayRequestSpec.logging);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendDefaults, listeners, logging);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateVirtualGatewayRequestSpec {\n");
    sb.append("    backendDefaults: ").append(toIndentedString(backendDefaults)).append("\n");
    sb.append("    listeners: ").append(toIndentedString(listeners)).append("\n");
    sb.append("    logging: ").append(toIndentedString(logging)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendDefaults");
    openapiFields.add("listeners");
    openapiFields.add("logging");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateVirtualGatewayRequestSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateVirtualGatewayRequestSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateVirtualGatewayRequestSpec is not found in the empty JSON string", CreateVirtualGatewayRequestSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateVirtualGatewayRequestSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateVirtualGatewayRequestSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backendDefaults`
      if (jsonObj.get("backendDefaults") != null && !jsonObj.get("backendDefaults").isJsonNull()) {
        CreateVirtualGatewayRequestSpecBackendDefaults.validateJsonElement(jsonObj.get("backendDefaults"));
      }
      // validate the optional field `listeners`
      if (jsonObj.get("listeners") != null && !jsonObj.get("listeners").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("listeners"));
      }
      // validate the optional field `logging`
      if (jsonObj.get("logging") != null && !jsonObj.get("logging").isJsonNull()) {
        VirtualGatewayLogging.validateJsonElement(jsonObj.get("logging"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateVirtualGatewayRequestSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateVirtualGatewayRequestSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateVirtualGatewayRequestSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateVirtualGatewayRequestSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateVirtualGatewayRequestSpec>() {
           @Override
           public void write(JsonWriter out, CreateVirtualGatewayRequestSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateVirtualGatewayRequestSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateVirtualGatewayRequestSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateVirtualGatewayRequestSpec
   * @throws IOException if the JSON string is invalid with respect to CreateVirtualGatewayRequestSpec
   */
  public static CreateVirtualGatewayRequestSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateVirtualGatewayRequestSpec.class);
  }

  /**
   * Convert an instance of CreateVirtualGatewayRequestSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

