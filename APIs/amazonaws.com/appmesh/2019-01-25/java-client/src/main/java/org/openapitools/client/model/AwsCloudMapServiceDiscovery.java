/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpPreference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;An object that represents the Cloud Map service discovery information for your virtual node.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Cloud Map is not available in the eu-south-1 Region.&lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.616443-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AwsCloudMapServiceDiscovery {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List attributes;

  public static final String SERIALIZED_NAME_IP_PREFERENCE = "ipPreference";
  @SerializedName(SERIALIZED_NAME_IP_PREFERENCE)
  private IpPreference ipPreference;

  public static final String SERIALIZED_NAME_NAMESPACE_NAME = "namespaceName";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_NAME)
  private String namespaceName;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public AwsCloudMapServiceDiscovery() {
  }

  public AwsCloudMapServiceDiscovery attributes(List attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public List getAttributes() {
    return attributes;
  }

  public void setAttributes(List attributes) {
    this.attributes = attributes;
  }


  public AwsCloudMapServiceDiscovery ipPreference(IpPreference ipPreference) {
    this.ipPreference = ipPreference;
    return this;
  }

  /**
   * Get ipPreference
   * @return ipPreference
   */
  @javax.annotation.Nullable
  public IpPreference getIpPreference() {
    return ipPreference;
  }

  public void setIpPreference(IpPreference ipPreference) {
    this.ipPreference = ipPreference;
  }


  public AwsCloudMapServiceDiscovery namespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
    return this;
  }

  /**
   * Get namespaceName
   * @return namespaceName
   */
  @javax.annotation.Nonnull
  public String getNamespaceName() {
    return namespaceName;
  }

  public void setNamespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
  }


  public AwsCloudMapServiceDiscovery serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nonnull
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AwsCloudMapServiceDiscovery awsCloudMapServiceDiscovery = (AwsCloudMapServiceDiscovery) o;
    return Objects.equals(this.attributes, awsCloudMapServiceDiscovery.attributes) &&
        Objects.equals(this.ipPreference, awsCloudMapServiceDiscovery.ipPreference) &&
        Objects.equals(this.namespaceName, awsCloudMapServiceDiscovery.namespaceName) &&
        Objects.equals(this.serviceName, awsCloudMapServiceDiscovery.serviceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, ipPreference, namespaceName, serviceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AwsCloudMapServiceDiscovery {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    ipPreference: ").append(toIndentedString(ipPreference)).append("\n");
    sb.append("    namespaceName: ").append(toIndentedString(namespaceName)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("ipPreference");
    openapiFields.add("namespaceName");
    openapiFields.add("serviceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("namespaceName");
    openapiRequiredFields.add("serviceName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AwsCloudMapServiceDiscovery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AwsCloudMapServiceDiscovery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AwsCloudMapServiceDiscovery is not found in the empty JSON string", AwsCloudMapServiceDiscovery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AwsCloudMapServiceDiscovery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AwsCloudMapServiceDiscovery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AwsCloudMapServiceDiscovery.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("attributes"));
      }
      // validate the optional field `ipPreference`
      if (jsonObj.get("ipPreference") != null && !jsonObj.get("ipPreference").isJsonNull()) {
        IpPreference.validateJsonElement(jsonObj.get("ipPreference"));
      }
      // validate the required field `namespaceName`
      String.validateJsonElement(jsonObj.get("namespaceName"));
      // validate the required field `serviceName`
      String.validateJsonElement(jsonObj.get("serviceName"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AwsCloudMapServiceDiscovery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AwsCloudMapServiceDiscovery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AwsCloudMapServiceDiscovery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AwsCloudMapServiceDiscovery.class));

       return (TypeAdapter<T>) new TypeAdapter<AwsCloudMapServiceDiscovery>() {
           @Override
           public void write(JsonWriter out, AwsCloudMapServiceDiscovery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AwsCloudMapServiceDiscovery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AwsCloudMapServiceDiscovery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AwsCloudMapServiceDiscovery
   * @throws IOException if the JSON string is invalid with respect to AwsCloudMapServiceDiscovery
   */
  public static AwsCloudMapServiceDiscovery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AwsCloudMapServiceDiscovery.class);
  }

  /**
   * Convert an instance of AwsCloudMapServiceDiscovery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

