/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateGatewayRouteOutput;
import org.openapitools.client.model.CreateGatewayRouteRequest;
import org.openapitools.client.model.CreateMeshOutput;
import org.openapitools.client.model.CreateMeshRequest;
import org.openapitools.client.model.CreateRouteOutput;
import org.openapitools.client.model.CreateRouteRequest;
import org.openapitools.client.model.CreateVirtualGatewayOutput;
import org.openapitools.client.model.CreateVirtualGatewayRequest;
import org.openapitools.client.model.CreateVirtualNodeOutput;
import org.openapitools.client.model.CreateVirtualNodeRequest;
import org.openapitools.client.model.CreateVirtualRouterOutput;
import org.openapitools.client.model.CreateVirtualRouterRequest;
import org.openapitools.client.model.CreateVirtualServiceOutput;
import org.openapitools.client.model.CreateVirtualServiceRequest;
import org.openapitools.client.model.DeleteGatewayRouteOutput;
import org.openapitools.client.model.DeleteMeshOutput;
import org.openapitools.client.model.DeleteRouteOutput;
import org.openapitools.client.model.DeleteVirtualGatewayOutput;
import org.openapitools.client.model.DeleteVirtualNodeOutput;
import org.openapitools.client.model.DeleteVirtualRouterOutput;
import org.openapitools.client.model.DeleteVirtualServiceOutput;
import org.openapitools.client.model.DescribeGatewayRouteOutput;
import org.openapitools.client.model.DescribeMeshOutput;
import org.openapitools.client.model.DescribeRouteOutput;
import org.openapitools.client.model.DescribeVirtualGatewayOutput;
import org.openapitools.client.model.DescribeVirtualNodeOutput;
import org.openapitools.client.model.DescribeVirtualRouterOutput;
import org.openapitools.client.model.DescribeVirtualServiceOutput;
import org.openapitools.client.model.ListGatewayRoutesOutput;
import org.openapitools.client.model.ListMeshesOutput;
import org.openapitools.client.model.ListRoutesOutput;
import org.openapitools.client.model.ListTagsForResourceOutput;
import org.openapitools.client.model.ListVirtualGatewaysOutput;
import org.openapitools.client.model.ListVirtualNodesOutput;
import org.openapitools.client.model.ListVirtualRoutersOutput;
import org.openapitools.client.model.ListVirtualServicesOutput;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateGatewayRouteOutput;
import org.openapitools.client.model.UpdateGatewayRouteRequest;
import org.openapitools.client.model.UpdateMeshOutput;
import org.openapitools.client.model.UpdateMeshRequest;
import org.openapitools.client.model.UpdateRouteOutput;
import org.openapitools.client.model.UpdateRouteRequest;
import org.openapitools.client.model.UpdateVirtualGatewayOutput;
import org.openapitools.client.model.UpdateVirtualGatewayRequest;
import org.openapitools.client.model.UpdateVirtualNodeOutput;
import org.openapitools.client.model.UpdateVirtualNodeRequest;
import org.openapitools.client.model.UpdateVirtualRouterOutput;
import org.openapitools.client.model.UpdateVirtualRouterRequest;
import org.openapitools.client.model.UpdateVirtualServiceOutput;
import org.openapitools.client.model.UpdateVirtualServiceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createGatewayRoute
     * @param meshName The name of the service mesh to create the gateway route in. (required)
     * @param virtualGatewayName The name of the virtual gateway to associate the gateway route with. If the virtual gateway is in a shared mesh, then you must be the owner of the virtual gateway resource. (required)
     * @param createGatewayRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGatewayRouteCall(String meshName, String virtualGatewayName, CreateGatewayRouteRequest createGatewayRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGatewayRouteRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualGatewayName" + "}", localVarApiClient.escapeString(virtualGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGatewayRouteValidateBeforeCall(String meshName, String virtualGatewayName, CreateGatewayRouteRequest createGatewayRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling createGatewayRoute(Async)");
        }

        // verify the required parameter 'virtualGatewayName' is set
        if (virtualGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualGatewayName' when calling createGatewayRoute(Async)");
        }

        // verify the required parameter 'createGatewayRouteRequest' is set
        if (createGatewayRouteRequest == null) {
            throw new ApiException("Missing the required parameter 'createGatewayRouteRequest' when calling createGatewayRoute(Async)");
        }

        return createGatewayRouteCall(meshName, virtualGatewayName, createGatewayRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a gateway route.&lt;/p&gt; &lt;p&gt;A gateway route is attached to a virtual gateway and routes traffic to an existing virtual service. If a route matches a request, it can distribute traffic to a target virtual service.&lt;/p&gt; &lt;p&gt;For more information about gateway routes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html\&quot;&gt;Gateway routes&lt;/a&gt;.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the gateway route in. (required)
     * @param virtualGatewayName The name of the virtual gateway to associate the gateway route with. If the virtual gateway is in a shared mesh, then you must be the owner of the virtual gateway resource. (required)
     * @param createGatewayRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return CreateGatewayRouteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateGatewayRouteOutput createGatewayRoute(String meshName, String virtualGatewayName, CreateGatewayRouteRequest createGatewayRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<CreateGatewayRouteOutput> localVarResp = createGatewayRouteWithHttpInfo(meshName, virtualGatewayName, createGatewayRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a gateway route.&lt;/p&gt; &lt;p&gt;A gateway route is attached to a virtual gateway and routes traffic to an existing virtual service. If a route matches a request, it can distribute traffic to a target virtual service.&lt;/p&gt; &lt;p&gt;For more information about gateway routes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html\&quot;&gt;Gateway routes&lt;/a&gt;.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the gateway route in. (required)
     * @param virtualGatewayName The name of the virtual gateway to associate the gateway route with. If the virtual gateway is in a shared mesh, then you must be the owner of the virtual gateway resource. (required)
     * @param createGatewayRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;CreateGatewayRouteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGatewayRouteOutput> createGatewayRouteWithHttpInfo(String meshName, String virtualGatewayName, CreateGatewayRouteRequest createGatewayRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = createGatewayRouteValidateBeforeCall(meshName, virtualGatewayName, createGatewayRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<CreateGatewayRouteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a gateway route.&lt;/p&gt; &lt;p&gt;A gateway route is attached to a virtual gateway and routes traffic to an existing virtual service. If a route matches a request, it can distribute traffic to a target virtual service.&lt;/p&gt; &lt;p&gt;For more information about gateway routes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html\&quot;&gt;Gateway routes&lt;/a&gt;.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the gateway route in. (required)
     * @param virtualGatewayName The name of the virtual gateway to associate the gateway route with. If the virtual gateway is in a shared mesh, then you must be the owner of the virtual gateway resource. (required)
     * @param createGatewayRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGatewayRouteAsync(String meshName, String virtualGatewayName, CreateGatewayRouteRequest createGatewayRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<CreateGatewayRouteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGatewayRouteValidateBeforeCall(meshName, virtualGatewayName, createGatewayRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<CreateGatewayRouteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMesh
     * @param createMeshRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMeshCall(CreateMeshRequest createMeshRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMeshRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMeshValidateBeforeCall(CreateMeshRequest createMeshRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createMeshRequest' is set
        if (createMeshRequest == null) {
            throw new ApiException("Missing the required parameter 'createMeshRequest' when calling createMesh(Async)");
        }

        return createMeshCall(createMeshRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a service mesh.&lt;/p&gt; &lt;p&gt; A service mesh is a logical boundary for network traffic between services that are represented by resources within the mesh. After you create your service mesh, you can create virtual services, virtual nodes, virtual routers, and routes to distribute traffic between the applications in your mesh.&lt;/p&gt; &lt;p&gt;For more information about service meshes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html\&quot;&gt;Service meshes&lt;/a&gt;.&lt;/p&gt;
     * @param createMeshRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateMeshOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateMeshOutput createMesh(CreateMeshRequest createMeshRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateMeshOutput> localVarResp = createMeshWithHttpInfo(createMeshRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a service mesh.&lt;/p&gt; &lt;p&gt; A service mesh is a logical boundary for network traffic between services that are represented by resources within the mesh. After you create your service mesh, you can create virtual services, virtual nodes, virtual routers, and routes to distribute traffic between the applications in your mesh.&lt;/p&gt; &lt;p&gt;For more information about service meshes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html\&quot;&gt;Service meshes&lt;/a&gt;.&lt;/p&gt;
     * @param createMeshRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateMeshOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateMeshOutput> createMeshWithHttpInfo(CreateMeshRequest createMeshRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createMeshValidateBeforeCall(createMeshRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateMeshOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a service mesh.&lt;/p&gt; &lt;p&gt; A service mesh is a logical boundary for network traffic between services that are represented by resources within the mesh. After you create your service mesh, you can create virtual services, virtual nodes, virtual routers, and routes to distribute traffic between the applications in your mesh.&lt;/p&gt; &lt;p&gt;For more information about service meshes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html\&quot;&gt;Service meshes&lt;/a&gt;.&lt;/p&gt;
     * @param createMeshRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMeshAsync(CreateMeshRequest createMeshRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateMeshOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMeshValidateBeforeCall(createMeshRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateMeshOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRoute
     * @param meshName The name of the service mesh to create the route in. (required)
     * @param virtualRouterName The name of the virtual router in which to create the route. If the virtual router is in a shared mesh, then you must be the owner of the virtual router resource. (required)
     * @param createRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRouteCall(String meshName, String virtualRouterName, CreateRouteRequest createRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRouteRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualRouterName" + "}", localVarApiClient.escapeString(virtualRouterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRouteValidateBeforeCall(String meshName, String virtualRouterName, CreateRouteRequest createRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling createRoute(Async)");
        }

        // verify the required parameter 'virtualRouterName' is set
        if (virtualRouterName == null) {
            throw new ApiException("Missing the required parameter 'virtualRouterName' when calling createRoute(Async)");
        }

        // verify the required parameter 'createRouteRequest' is set
        if (createRouteRequest == null) {
            throw new ApiException("Missing the required parameter 'createRouteRequest' when calling createRoute(Async)");
        }

        return createRouteCall(meshName, virtualRouterName, createRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a route that is associated with a virtual router.&lt;/p&gt; &lt;p&gt; You can route several different protocols and define a retry policy for a route. Traffic can be routed to one or more virtual nodes.&lt;/p&gt; &lt;p&gt;For more information about routes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html\&quot;&gt;Routes&lt;/a&gt;.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the route in. (required)
     * @param virtualRouterName The name of the virtual router in which to create the route. If the virtual router is in a shared mesh, then you must be the owner of the virtual router resource. (required)
     * @param createRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return CreateRouteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateRouteOutput createRoute(String meshName, String virtualRouterName, CreateRouteRequest createRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<CreateRouteOutput> localVarResp = createRouteWithHttpInfo(meshName, virtualRouterName, createRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a route that is associated with a virtual router.&lt;/p&gt; &lt;p&gt; You can route several different protocols and define a retry policy for a route. Traffic can be routed to one or more virtual nodes.&lt;/p&gt; &lt;p&gt;For more information about routes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html\&quot;&gt;Routes&lt;/a&gt;.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the route in. (required)
     * @param virtualRouterName The name of the virtual router in which to create the route. If the virtual router is in a shared mesh, then you must be the owner of the virtual router resource. (required)
     * @param createRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;CreateRouteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRouteOutput> createRouteWithHttpInfo(String meshName, String virtualRouterName, CreateRouteRequest createRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = createRouteValidateBeforeCall(meshName, virtualRouterName, createRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<CreateRouteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a route that is associated with a virtual router.&lt;/p&gt; &lt;p&gt; You can route several different protocols and define a retry policy for a route. Traffic can be routed to one or more virtual nodes.&lt;/p&gt; &lt;p&gt;For more information about routes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html\&quot;&gt;Routes&lt;/a&gt;.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the route in. (required)
     * @param virtualRouterName The name of the virtual router in which to create the route. If the virtual router is in a shared mesh, then you must be the owner of the virtual router resource. (required)
     * @param createRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRouteAsync(String meshName, String virtualRouterName, CreateRouteRequest createRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<CreateRouteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRouteValidateBeforeCall(meshName, virtualRouterName, createRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<CreateRouteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVirtualGateway
     * @param meshName The name of the service mesh to create the virtual gateway in. (required)
     * @param createVirtualGatewayRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVirtualGatewayCall(String meshName, CreateVirtualGatewayRequest createVirtualGatewayRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVirtualGatewayRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualGateways"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVirtualGatewayValidateBeforeCall(String meshName, CreateVirtualGatewayRequest createVirtualGatewayRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling createVirtualGateway(Async)");
        }

        // verify the required parameter 'createVirtualGatewayRequest' is set
        if (createVirtualGatewayRequest == null) {
            throw new ApiException("Missing the required parameter 'createVirtualGatewayRequest' when calling createVirtualGateway(Async)");
        }

        return createVirtualGatewayCall(meshName, createVirtualGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a virtual gateway.&lt;/p&gt; &lt;p&gt;A virtual gateway allows resources outside your mesh to communicate to resources that are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which represents an Envoy running with an application, a virtual gateway represents Envoy deployed by itself.&lt;/p&gt; &lt;p&gt;For more information about virtual gateways, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html\&quot;&gt;Virtual gateways&lt;/a&gt;. &lt;/p&gt;
     * @param meshName The name of the service mesh to create the virtual gateway in. (required)
     * @param createVirtualGatewayRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return CreateVirtualGatewayOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateVirtualGatewayOutput createVirtualGateway(String meshName, CreateVirtualGatewayRequest createVirtualGatewayRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<CreateVirtualGatewayOutput> localVarResp = createVirtualGatewayWithHttpInfo(meshName, createVirtualGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a virtual gateway.&lt;/p&gt; &lt;p&gt;A virtual gateway allows resources outside your mesh to communicate to resources that are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which represents an Envoy running with an application, a virtual gateway represents Envoy deployed by itself.&lt;/p&gt; &lt;p&gt;For more information about virtual gateways, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html\&quot;&gt;Virtual gateways&lt;/a&gt;. &lt;/p&gt;
     * @param meshName The name of the service mesh to create the virtual gateway in. (required)
     * @param createVirtualGatewayRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;CreateVirtualGatewayOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateVirtualGatewayOutput> createVirtualGatewayWithHttpInfo(String meshName, CreateVirtualGatewayRequest createVirtualGatewayRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = createVirtualGatewayValidateBeforeCall(meshName, createVirtualGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<CreateVirtualGatewayOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a virtual gateway.&lt;/p&gt; &lt;p&gt;A virtual gateway allows resources outside your mesh to communicate to resources that are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which represents an Envoy running with an application, a virtual gateway represents Envoy deployed by itself.&lt;/p&gt; &lt;p&gt;For more information about virtual gateways, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html\&quot;&gt;Virtual gateways&lt;/a&gt;. &lt;/p&gt;
     * @param meshName The name of the service mesh to create the virtual gateway in. (required)
     * @param createVirtualGatewayRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVirtualGatewayAsync(String meshName, CreateVirtualGatewayRequest createVirtualGatewayRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<CreateVirtualGatewayOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVirtualGatewayValidateBeforeCall(meshName, createVirtualGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<CreateVirtualGatewayOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVirtualNode
     * @param meshName The name of the service mesh to create the virtual node in. (required)
     * @param createVirtualNodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVirtualNodeCall(String meshName, CreateVirtualNodeRequest createVirtualNodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVirtualNodeRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualNodes"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVirtualNodeValidateBeforeCall(String meshName, CreateVirtualNodeRequest createVirtualNodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling createVirtualNode(Async)");
        }

        // verify the required parameter 'createVirtualNodeRequest' is set
        if (createVirtualNodeRequest == null) {
            throw new ApiException("Missing the required parameter 'createVirtualNodeRequest' when calling createVirtualNode(Async)");
        }

        return createVirtualNodeCall(meshName, createVirtualNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a virtual node within a service mesh.&lt;/p&gt; &lt;p&gt; A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS service or a Kubernetes deployment. When you create a virtual node, you can specify the service discovery information for your task group, and whether the proxy running in a task group will communicate with other proxies using Transport Layer Security (TLS).&lt;/p&gt; &lt;p&gt;You define a &lt;code&gt;listener&lt;/code&gt; for any inbound traffic that your virtual node expects. Any virtual service that your virtual node expects to communicate to is specified as a &lt;code&gt;backend&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The response metadata for your new virtual node contains the &lt;code&gt;arn&lt;/code&gt; that is associated with the virtual node. Set this value to the full ARN; for example, &lt;code&gt;arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp&lt;/code&gt;) as the &lt;code&gt;APPMESH_RESOURCE_ARN&lt;/code&gt; environment variable for your task group&#39;s Envoy proxy container in your task definition or pod spec. This is then mapped to the &lt;code&gt;node.id&lt;/code&gt; and &lt;code&gt;node.cluster&lt;/code&gt; Envoy parameters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;By default, App Mesh uses the name of the resource you specified in &lt;code&gt;APPMESH_RESOURCE_ARN&lt;/code&gt; when Envoy is referring to itself in metrics and traces. You can override this behavior by setting the &lt;code&gt;APPMESH_RESOURCE_CLUSTER&lt;/code&gt; environment variable with your own name.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information about virtual nodes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html\&quot;&gt;Virtual nodes&lt;/a&gt;. You must be using &lt;code&gt;1.15.0&lt;/code&gt; or later of the Envoy image when setting these variables. For more information aboutApp Mesh Envoy variables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html\&quot;&gt;Envoy image&lt;/a&gt; in the App Mesh User Guide.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the virtual node in. (required)
     * @param createVirtualNodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return CreateVirtualNodeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateVirtualNodeOutput createVirtualNode(String meshName, CreateVirtualNodeRequest createVirtualNodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<CreateVirtualNodeOutput> localVarResp = createVirtualNodeWithHttpInfo(meshName, createVirtualNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a virtual node within a service mesh.&lt;/p&gt; &lt;p&gt; A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS service or a Kubernetes deployment. When you create a virtual node, you can specify the service discovery information for your task group, and whether the proxy running in a task group will communicate with other proxies using Transport Layer Security (TLS).&lt;/p&gt; &lt;p&gt;You define a &lt;code&gt;listener&lt;/code&gt; for any inbound traffic that your virtual node expects. Any virtual service that your virtual node expects to communicate to is specified as a &lt;code&gt;backend&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The response metadata for your new virtual node contains the &lt;code&gt;arn&lt;/code&gt; that is associated with the virtual node. Set this value to the full ARN; for example, &lt;code&gt;arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp&lt;/code&gt;) as the &lt;code&gt;APPMESH_RESOURCE_ARN&lt;/code&gt; environment variable for your task group&#39;s Envoy proxy container in your task definition or pod spec. This is then mapped to the &lt;code&gt;node.id&lt;/code&gt; and &lt;code&gt;node.cluster&lt;/code&gt; Envoy parameters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;By default, App Mesh uses the name of the resource you specified in &lt;code&gt;APPMESH_RESOURCE_ARN&lt;/code&gt; when Envoy is referring to itself in metrics and traces. You can override this behavior by setting the &lt;code&gt;APPMESH_RESOURCE_CLUSTER&lt;/code&gt; environment variable with your own name.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information about virtual nodes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html\&quot;&gt;Virtual nodes&lt;/a&gt;. You must be using &lt;code&gt;1.15.0&lt;/code&gt; or later of the Envoy image when setting these variables. For more information aboutApp Mesh Envoy variables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html\&quot;&gt;Envoy image&lt;/a&gt; in the App Mesh User Guide.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the virtual node in. (required)
     * @param createVirtualNodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;CreateVirtualNodeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateVirtualNodeOutput> createVirtualNodeWithHttpInfo(String meshName, CreateVirtualNodeRequest createVirtualNodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = createVirtualNodeValidateBeforeCall(meshName, createVirtualNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<CreateVirtualNodeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a virtual node within a service mesh.&lt;/p&gt; &lt;p&gt; A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS service or a Kubernetes deployment. When you create a virtual node, you can specify the service discovery information for your task group, and whether the proxy running in a task group will communicate with other proxies using Transport Layer Security (TLS).&lt;/p&gt; &lt;p&gt;You define a &lt;code&gt;listener&lt;/code&gt; for any inbound traffic that your virtual node expects. Any virtual service that your virtual node expects to communicate to is specified as a &lt;code&gt;backend&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The response metadata for your new virtual node contains the &lt;code&gt;arn&lt;/code&gt; that is associated with the virtual node. Set this value to the full ARN; for example, &lt;code&gt;arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp&lt;/code&gt;) as the &lt;code&gt;APPMESH_RESOURCE_ARN&lt;/code&gt; environment variable for your task group&#39;s Envoy proxy container in your task definition or pod spec. This is then mapped to the &lt;code&gt;node.id&lt;/code&gt; and &lt;code&gt;node.cluster&lt;/code&gt; Envoy parameters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;By default, App Mesh uses the name of the resource you specified in &lt;code&gt;APPMESH_RESOURCE_ARN&lt;/code&gt; when Envoy is referring to itself in metrics and traces. You can override this behavior by setting the &lt;code&gt;APPMESH_RESOURCE_CLUSTER&lt;/code&gt; environment variable with your own name.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information about virtual nodes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html\&quot;&gt;Virtual nodes&lt;/a&gt;. You must be using &lt;code&gt;1.15.0&lt;/code&gt; or later of the Envoy image when setting these variables. For more information aboutApp Mesh Envoy variables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html\&quot;&gt;Envoy image&lt;/a&gt; in the App Mesh User Guide.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the virtual node in. (required)
     * @param createVirtualNodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVirtualNodeAsync(String meshName, CreateVirtualNodeRequest createVirtualNodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<CreateVirtualNodeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVirtualNodeValidateBeforeCall(meshName, createVirtualNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<CreateVirtualNodeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVirtualRouter
     * @param meshName The name of the service mesh to create the virtual router in. (required)
     * @param createVirtualRouterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVirtualRouterCall(String meshName, CreateVirtualRouterRequest createVirtualRouterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVirtualRouterRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualRouters"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVirtualRouterValidateBeforeCall(String meshName, CreateVirtualRouterRequest createVirtualRouterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling createVirtualRouter(Async)");
        }

        // verify the required parameter 'createVirtualRouterRequest' is set
        if (createVirtualRouterRequest == null) {
            throw new ApiException("Missing the required parameter 'createVirtualRouterRequest' when calling createVirtualRouter(Async)");
        }

        return createVirtualRouterCall(meshName, createVirtualRouterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a virtual router within a service mesh.&lt;/p&gt; &lt;p&gt;Specify a &lt;code&gt;listener&lt;/code&gt; for any inbound traffic that your virtual router receives. Create a virtual router for each protocol and port that you need to route. Virtual routers handle traffic for one or more virtual services within your mesh. After you create your virtual router, create and associate routes for your virtual router that direct incoming requests to different virtual nodes.&lt;/p&gt; &lt;p&gt;For more information about virtual routers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html\&quot;&gt;Virtual routers&lt;/a&gt;.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the virtual router in. (required)
     * @param createVirtualRouterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return CreateVirtualRouterOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateVirtualRouterOutput createVirtualRouter(String meshName, CreateVirtualRouterRequest createVirtualRouterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<CreateVirtualRouterOutput> localVarResp = createVirtualRouterWithHttpInfo(meshName, createVirtualRouterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a virtual router within a service mesh.&lt;/p&gt; &lt;p&gt;Specify a &lt;code&gt;listener&lt;/code&gt; for any inbound traffic that your virtual router receives. Create a virtual router for each protocol and port that you need to route. Virtual routers handle traffic for one or more virtual services within your mesh. After you create your virtual router, create and associate routes for your virtual router that direct incoming requests to different virtual nodes.&lt;/p&gt; &lt;p&gt;For more information about virtual routers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html\&quot;&gt;Virtual routers&lt;/a&gt;.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the virtual router in. (required)
     * @param createVirtualRouterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;CreateVirtualRouterOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateVirtualRouterOutput> createVirtualRouterWithHttpInfo(String meshName, CreateVirtualRouterRequest createVirtualRouterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = createVirtualRouterValidateBeforeCall(meshName, createVirtualRouterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<CreateVirtualRouterOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a virtual router within a service mesh.&lt;/p&gt; &lt;p&gt;Specify a &lt;code&gt;listener&lt;/code&gt; for any inbound traffic that your virtual router receives. Create a virtual router for each protocol and port that you need to route. Virtual routers handle traffic for one or more virtual services within your mesh. After you create your virtual router, create and associate routes for your virtual router that direct incoming requests to different virtual nodes.&lt;/p&gt; &lt;p&gt;For more information about virtual routers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html\&quot;&gt;Virtual routers&lt;/a&gt;.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the virtual router in. (required)
     * @param createVirtualRouterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVirtualRouterAsync(String meshName, CreateVirtualRouterRequest createVirtualRouterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<CreateVirtualRouterOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVirtualRouterValidateBeforeCall(meshName, createVirtualRouterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<CreateVirtualRouterOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVirtualService
     * @param meshName The name of the service mesh to create the virtual service in. (required)
     * @param createVirtualServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVirtualServiceCall(String meshName, CreateVirtualServiceRequest createVirtualServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVirtualServiceRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualServices"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVirtualServiceValidateBeforeCall(String meshName, CreateVirtualServiceRequest createVirtualServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling createVirtualService(Async)");
        }

        // verify the required parameter 'createVirtualServiceRequest' is set
        if (createVirtualServiceRequest == null) {
            throw new ApiException("Missing the required parameter 'createVirtualServiceRequest' when calling createVirtualService(Async)");
        }

        return createVirtualServiceCall(meshName, createVirtualServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a virtual service within a service mesh.&lt;/p&gt; &lt;p&gt;A virtual service is an abstraction of a real service that is provided by a virtual node directly or indirectly by means of a virtual router. Dependent services call your virtual service by its &lt;code&gt;virtualServiceName&lt;/code&gt;, and those requests are routed to the virtual node or virtual router that is specified as the provider for the virtual service.&lt;/p&gt; &lt;p&gt;For more information about virtual services, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html\&quot;&gt;Virtual services&lt;/a&gt;.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the virtual service in. (required)
     * @param createVirtualServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return CreateVirtualServiceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateVirtualServiceOutput createVirtualService(String meshName, CreateVirtualServiceRequest createVirtualServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<CreateVirtualServiceOutput> localVarResp = createVirtualServiceWithHttpInfo(meshName, createVirtualServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a virtual service within a service mesh.&lt;/p&gt; &lt;p&gt;A virtual service is an abstraction of a real service that is provided by a virtual node directly or indirectly by means of a virtual router. Dependent services call your virtual service by its &lt;code&gt;virtualServiceName&lt;/code&gt;, and those requests are routed to the virtual node or virtual router that is specified as the provider for the virtual service.&lt;/p&gt; &lt;p&gt;For more information about virtual services, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html\&quot;&gt;Virtual services&lt;/a&gt;.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the virtual service in. (required)
     * @param createVirtualServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;CreateVirtualServiceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateVirtualServiceOutput> createVirtualServiceWithHttpInfo(String meshName, CreateVirtualServiceRequest createVirtualServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = createVirtualServiceValidateBeforeCall(meshName, createVirtualServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<CreateVirtualServiceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a virtual service within a service mesh.&lt;/p&gt; &lt;p&gt;A virtual service is an abstraction of a real service that is provided by a virtual node directly or indirectly by means of a virtual router. Dependent services call your virtual service by its &lt;code&gt;virtualServiceName&lt;/code&gt;, and those requests are routed to the virtual node or virtual router that is specified as the provider for the virtual service.&lt;/p&gt; &lt;p&gt;For more information about virtual services, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html\&quot;&gt;Virtual services&lt;/a&gt;.&lt;/p&gt;
     * @param meshName The name of the service mesh to create the virtual service in. (required)
     * @param createVirtualServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVirtualServiceAsync(String meshName, CreateVirtualServiceRequest createVirtualServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<CreateVirtualServiceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVirtualServiceValidateBeforeCall(meshName, createVirtualServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<CreateVirtualServiceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGatewayRoute
     * @param gatewayRouteName The name of the gateway route to delete. (required)
     * @param meshName The name of the service mesh to delete the gateway route from. (required)
     * @param virtualGatewayName The name of the virtual gateway to delete the route from. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGatewayRouteCall(String gatewayRouteName, String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}"
            .replace("{" + "gatewayRouteName" + "}", localVarApiClient.escapeString(gatewayRouteName.toString()))
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualGatewayName" + "}", localVarApiClient.escapeString(virtualGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGatewayRouteValidateBeforeCall(String gatewayRouteName, String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayRouteName' is set
        if (gatewayRouteName == null) {
            throw new ApiException("Missing the required parameter 'gatewayRouteName' when calling deleteGatewayRoute(Async)");
        }

        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling deleteGatewayRoute(Async)");
        }

        // verify the required parameter 'virtualGatewayName' is set
        if (virtualGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualGatewayName' when calling deleteGatewayRoute(Async)");
        }

        return deleteGatewayRouteCall(gatewayRouteName, meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Deletes an existing gateway route.
     * @param gatewayRouteName The name of the gateway route to delete. (required)
     * @param meshName The name of the service mesh to delete the gateway route from. (required)
     * @param virtualGatewayName The name of the virtual gateway to delete the route from. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DeleteGatewayRouteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGatewayRouteOutput deleteGatewayRoute(String gatewayRouteName, String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DeleteGatewayRouteOutput> localVarResp = deleteGatewayRouteWithHttpInfo(gatewayRouteName, meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an existing gateway route.
     * @param gatewayRouteName The name of the gateway route to delete. (required)
     * @param meshName The name of the service mesh to delete the gateway route from. (required)
     * @param virtualGatewayName The name of the virtual gateway to delete the route from. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DeleteGatewayRouteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteGatewayRouteOutput> deleteGatewayRouteWithHttpInfo(String gatewayRouteName, String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = deleteGatewayRouteValidateBeforeCall(gatewayRouteName, meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DeleteGatewayRouteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an existing gateway route.
     * @param gatewayRouteName The name of the gateway route to delete. (required)
     * @param meshName The name of the service mesh to delete the gateway route from. (required)
     * @param virtualGatewayName The name of the virtual gateway to delete the route from. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGatewayRouteAsync(String gatewayRouteName, String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DeleteGatewayRouteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGatewayRouteValidateBeforeCall(gatewayRouteName, meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DeleteGatewayRouteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMesh
     * @param meshName The name of the service mesh to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMeshCall(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMeshValidateBeforeCall(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling deleteMesh(Async)");
        }

        return deleteMeshCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an existing service mesh.&lt;/p&gt; &lt;p&gt;You must delete all resources (virtual services, routes, virtual routers, and virtual nodes) in the service mesh before you can delete the mesh itself.&lt;/p&gt;
     * @param meshName The name of the service mesh to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteMeshOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMeshOutput deleteMesh(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteMeshOutput> localVarResp = deleteMeshWithHttpInfo(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an existing service mesh.&lt;/p&gt; &lt;p&gt;You must delete all resources (virtual services, routes, virtual routers, and virtual nodes) in the service mesh before you can delete the mesh itself.&lt;/p&gt;
     * @param meshName The name of the service mesh to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteMeshOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteMeshOutput> deleteMeshWithHttpInfo(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteMeshValidateBeforeCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteMeshOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an existing service mesh.&lt;/p&gt; &lt;p&gt;You must delete all resources (virtual services, routes, virtual routers, and virtual nodes) in the service mesh before you can delete the mesh itself.&lt;/p&gt;
     * @param meshName The name of the service mesh to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMeshAsync(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteMeshOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMeshValidateBeforeCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteMeshOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRoute
     * @param meshName The name of the service mesh to delete the route in. (required)
     * @param routeName The name of the route to delete. (required)
     * @param virtualRouterName The name of the virtual router to delete the route in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRouteCall(String meshName, String routeName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "routeName" + "}", localVarApiClient.escapeString(routeName.toString()))
            .replace("{" + "virtualRouterName" + "}", localVarApiClient.escapeString(virtualRouterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRouteValidateBeforeCall(String meshName, String routeName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling deleteRoute(Async)");
        }

        // verify the required parameter 'routeName' is set
        if (routeName == null) {
            throw new ApiException("Missing the required parameter 'routeName' when calling deleteRoute(Async)");
        }

        // verify the required parameter 'virtualRouterName' is set
        if (virtualRouterName == null) {
            throw new ApiException("Missing the required parameter 'virtualRouterName' when calling deleteRoute(Async)");
        }

        return deleteRouteCall(meshName, routeName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Deletes an existing route.
     * @param meshName The name of the service mesh to delete the route in. (required)
     * @param routeName The name of the route to delete. (required)
     * @param virtualRouterName The name of the virtual router to delete the route in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DeleteRouteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRouteOutput deleteRoute(String meshName, String routeName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DeleteRouteOutput> localVarResp = deleteRouteWithHttpInfo(meshName, routeName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an existing route.
     * @param meshName The name of the service mesh to delete the route in. (required)
     * @param routeName The name of the route to delete. (required)
     * @param virtualRouterName The name of the virtual router to delete the route in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DeleteRouteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRouteOutput> deleteRouteWithHttpInfo(String meshName, String routeName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = deleteRouteValidateBeforeCall(meshName, routeName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DeleteRouteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an existing route.
     * @param meshName The name of the service mesh to delete the route in. (required)
     * @param routeName The name of the route to delete. (required)
     * @param virtualRouterName The name of the virtual router to delete the route in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRouteAsync(String meshName, String routeName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DeleteRouteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRouteValidateBeforeCall(meshName, routeName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DeleteRouteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVirtualGateway
     * @param meshName The name of the service mesh to delete the virtual gateway from. (required)
     * @param virtualGatewayName The name of the virtual gateway to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVirtualGatewayCall(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualGatewayName" + "}", localVarApiClient.escapeString(virtualGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVirtualGatewayValidateBeforeCall(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling deleteVirtualGateway(Async)");
        }

        // verify the required parameter 'virtualGatewayName' is set
        if (virtualGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualGatewayName' when calling deleteVirtualGateway(Async)");
        }

        return deleteVirtualGatewayCall(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway routes are associated to it.
     * @param meshName The name of the service mesh to delete the virtual gateway from. (required)
     * @param virtualGatewayName The name of the virtual gateway to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DeleteVirtualGatewayOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVirtualGatewayOutput deleteVirtualGateway(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DeleteVirtualGatewayOutput> localVarResp = deleteVirtualGatewayWithHttpInfo(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway routes are associated to it.
     * @param meshName The name of the service mesh to delete the virtual gateway from. (required)
     * @param virtualGatewayName The name of the virtual gateway to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DeleteVirtualGatewayOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteVirtualGatewayOutput> deleteVirtualGatewayWithHttpInfo(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = deleteVirtualGatewayValidateBeforeCall(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DeleteVirtualGatewayOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway routes are associated to it.
     * @param meshName The name of the service mesh to delete the virtual gateway from. (required)
     * @param virtualGatewayName The name of the virtual gateway to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVirtualGatewayAsync(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DeleteVirtualGatewayOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVirtualGatewayValidateBeforeCall(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DeleteVirtualGatewayOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVirtualNode
     * @param meshName The name of the service mesh to delete the virtual node in. (required)
     * @param virtualNodeName The name of the virtual node to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVirtualNodeCall(String meshName, String virtualNodeName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualNodeName" + "}", localVarApiClient.escapeString(virtualNodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVirtualNodeValidateBeforeCall(String meshName, String virtualNodeName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling deleteVirtualNode(Async)");
        }

        // verify the required parameter 'virtualNodeName' is set
        if (virtualNodeName == null) {
            throw new ApiException("Missing the required parameter 'virtualNodeName' when calling deleteVirtualNode(Async)");
        }

        return deleteVirtualNodeCall(meshName, virtualNodeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an existing virtual node.&lt;/p&gt; &lt;p&gt;You must delete any virtual services that list a virtual node as a service provider before you can delete the virtual node itself.&lt;/p&gt;
     * @param meshName The name of the service mesh to delete the virtual node in. (required)
     * @param virtualNodeName The name of the virtual node to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DeleteVirtualNodeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVirtualNodeOutput deleteVirtualNode(String meshName, String virtualNodeName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DeleteVirtualNodeOutput> localVarResp = deleteVirtualNodeWithHttpInfo(meshName, virtualNodeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an existing virtual node.&lt;/p&gt; &lt;p&gt;You must delete any virtual services that list a virtual node as a service provider before you can delete the virtual node itself.&lt;/p&gt;
     * @param meshName The name of the service mesh to delete the virtual node in. (required)
     * @param virtualNodeName The name of the virtual node to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DeleteVirtualNodeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteVirtualNodeOutput> deleteVirtualNodeWithHttpInfo(String meshName, String virtualNodeName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = deleteVirtualNodeValidateBeforeCall(meshName, virtualNodeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DeleteVirtualNodeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an existing virtual node.&lt;/p&gt; &lt;p&gt;You must delete any virtual services that list a virtual node as a service provider before you can delete the virtual node itself.&lt;/p&gt;
     * @param meshName The name of the service mesh to delete the virtual node in. (required)
     * @param virtualNodeName The name of the virtual node to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVirtualNodeAsync(String meshName, String virtualNodeName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DeleteVirtualNodeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVirtualNodeValidateBeforeCall(meshName, virtualNodeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DeleteVirtualNodeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVirtualRouter
     * @param meshName The name of the service mesh to delete the virtual router in. (required)
     * @param virtualRouterName The name of the virtual router to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVirtualRouterCall(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualRouterName" + "}", localVarApiClient.escapeString(virtualRouterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVirtualRouterValidateBeforeCall(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling deleteVirtualRouter(Async)");
        }

        // verify the required parameter 'virtualRouterName' is set
        if (virtualRouterName == null) {
            throw new ApiException("Missing the required parameter 'virtualRouterName' when calling deleteVirtualRouter(Async)");
        }

        return deleteVirtualRouterCall(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an existing virtual router.&lt;/p&gt; &lt;p&gt;You must delete any routes associated with the virtual router before you can delete the router itself.&lt;/p&gt;
     * @param meshName The name of the service mesh to delete the virtual router in. (required)
     * @param virtualRouterName The name of the virtual router to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DeleteVirtualRouterOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVirtualRouterOutput deleteVirtualRouter(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DeleteVirtualRouterOutput> localVarResp = deleteVirtualRouterWithHttpInfo(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an existing virtual router.&lt;/p&gt; &lt;p&gt;You must delete any routes associated with the virtual router before you can delete the router itself.&lt;/p&gt;
     * @param meshName The name of the service mesh to delete the virtual router in. (required)
     * @param virtualRouterName The name of the virtual router to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DeleteVirtualRouterOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteVirtualRouterOutput> deleteVirtualRouterWithHttpInfo(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = deleteVirtualRouterValidateBeforeCall(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DeleteVirtualRouterOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an existing virtual router.&lt;/p&gt; &lt;p&gt;You must delete any routes associated with the virtual router before you can delete the router itself.&lt;/p&gt;
     * @param meshName The name of the service mesh to delete the virtual router in. (required)
     * @param virtualRouterName The name of the virtual router to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVirtualRouterAsync(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DeleteVirtualRouterOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVirtualRouterValidateBeforeCall(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DeleteVirtualRouterOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVirtualService
     * @param meshName The name of the service mesh to delete the virtual service in. (required)
     * @param virtualServiceName The name of the virtual service to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVirtualServiceCall(String meshName, String virtualServiceName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualServiceName" + "}", localVarApiClient.escapeString(virtualServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVirtualServiceValidateBeforeCall(String meshName, String virtualServiceName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling deleteVirtualService(Async)");
        }

        // verify the required parameter 'virtualServiceName' is set
        if (virtualServiceName == null) {
            throw new ApiException("Missing the required parameter 'virtualServiceName' when calling deleteVirtualService(Async)");
        }

        return deleteVirtualServiceCall(meshName, virtualServiceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Deletes an existing virtual service.
     * @param meshName The name of the service mesh to delete the virtual service in. (required)
     * @param virtualServiceName The name of the virtual service to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DeleteVirtualServiceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVirtualServiceOutput deleteVirtualService(String meshName, String virtualServiceName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DeleteVirtualServiceOutput> localVarResp = deleteVirtualServiceWithHttpInfo(meshName, virtualServiceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an existing virtual service.
     * @param meshName The name of the service mesh to delete the virtual service in. (required)
     * @param virtualServiceName The name of the virtual service to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DeleteVirtualServiceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteVirtualServiceOutput> deleteVirtualServiceWithHttpInfo(String meshName, String virtualServiceName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = deleteVirtualServiceValidateBeforeCall(meshName, virtualServiceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DeleteVirtualServiceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an existing virtual service.
     * @param meshName The name of the service mesh to delete the virtual service in. (required)
     * @param virtualServiceName The name of the virtual service to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceInUseException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVirtualServiceAsync(String meshName, String virtualServiceName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DeleteVirtualServiceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVirtualServiceValidateBeforeCall(meshName, virtualServiceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DeleteVirtualServiceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeGatewayRoute
     * @param gatewayRouteName The name of the gateway route to describe. (required)
     * @param meshName The name of the service mesh that the gateway route resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway that the gateway route is associated with. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeGatewayRouteCall(String gatewayRouteName, String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}"
            .replace("{" + "gatewayRouteName" + "}", localVarApiClient.escapeString(gatewayRouteName.toString()))
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualGatewayName" + "}", localVarApiClient.escapeString(virtualGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeGatewayRouteValidateBeforeCall(String gatewayRouteName, String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayRouteName' is set
        if (gatewayRouteName == null) {
            throw new ApiException("Missing the required parameter 'gatewayRouteName' when calling describeGatewayRoute(Async)");
        }

        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling describeGatewayRoute(Async)");
        }

        // verify the required parameter 'virtualGatewayName' is set
        if (virtualGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualGatewayName' when calling describeGatewayRoute(Async)");
        }

        return describeGatewayRouteCall(gatewayRouteName, meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Describes an existing gateway route.
     * @param gatewayRouteName The name of the gateway route to describe. (required)
     * @param meshName The name of the service mesh that the gateway route resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway that the gateway route is associated with. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DescribeGatewayRouteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeGatewayRouteOutput describeGatewayRoute(String gatewayRouteName, String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DescribeGatewayRouteOutput> localVarResp = describeGatewayRouteWithHttpInfo(gatewayRouteName, meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes an existing gateway route.
     * @param gatewayRouteName The name of the gateway route to describe. (required)
     * @param meshName The name of the service mesh that the gateway route resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway that the gateway route is associated with. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DescribeGatewayRouteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeGatewayRouteOutput> describeGatewayRouteWithHttpInfo(String gatewayRouteName, String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = describeGatewayRouteValidateBeforeCall(gatewayRouteName, meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DescribeGatewayRouteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes an existing gateway route.
     * @param gatewayRouteName The name of the gateway route to describe. (required)
     * @param meshName The name of the service mesh that the gateway route resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway that the gateway route is associated with. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeGatewayRouteAsync(String gatewayRouteName, String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DescribeGatewayRouteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeGatewayRouteValidateBeforeCall(gatewayRouteName, meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DescribeGatewayRouteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeMesh
     * @param meshName The name of the service mesh to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeMeshCall(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeMeshValidateBeforeCall(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling describeMesh(Async)");
        }

        return describeMeshCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Describes an existing service mesh.
     * @param meshName The name of the service mesh to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DescribeMeshOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeMeshOutput describeMesh(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DescribeMeshOutput> localVarResp = describeMeshWithHttpInfo(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes an existing service mesh.
     * @param meshName The name of the service mesh to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DescribeMeshOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeMeshOutput> describeMeshWithHttpInfo(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = describeMeshValidateBeforeCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DescribeMeshOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes an existing service mesh.
     * @param meshName The name of the service mesh to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeMeshAsync(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DescribeMeshOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeMeshValidateBeforeCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DescribeMeshOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeRoute
     * @param meshName The name of the service mesh that the route resides in. (required)
     * @param routeName The name of the route to describe. (required)
     * @param virtualRouterName The name of the virtual router that the route is associated with. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRouteCall(String meshName, String routeName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "routeName" + "}", localVarApiClient.escapeString(routeName.toString()))
            .replace("{" + "virtualRouterName" + "}", localVarApiClient.escapeString(virtualRouterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeRouteValidateBeforeCall(String meshName, String routeName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling describeRoute(Async)");
        }

        // verify the required parameter 'routeName' is set
        if (routeName == null) {
            throw new ApiException("Missing the required parameter 'routeName' when calling describeRoute(Async)");
        }

        // verify the required parameter 'virtualRouterName' is set
        if (virtualRouterName == null) {
            throw new ApiException("Missing the required parameter 'virtualRouterName' when calling describeRoute(Async)");
        }

        return describeRouteCall(meshName, routeName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Describes an existing route.
     * @param meshName The name of the service mesh that the route resides in. (required)
     * @param routeName The name of the route to describe. (required)
     * @param virtualRouterName The name of the virtual router that the route is associated with. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DescribeRouteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeRouteOutput describeRoute(String meshName, String routeName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DescribeRouteOutput> localVarResp = describeRouteWithHttpInfo(meshName, routeName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes an existing route.
     * @param meshName The name of the service mesh that the route resides in. (required)
     * @param routeName The name of the route to describe. (required)
     * @param virtualRouterName The name of the virtual router that the route is associated with. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DescribeRouteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeRouteOutput> describeRouteWithHttpInfo(String meshName, String routeName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = describeRouteValidateBeforeCall(meshName, routeName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DescribeRouteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes an existing route.
     * @param meshName The name of the service mesh that the route resides in. (required)
     * @param routeName The name of the route to describe. (required)
     * @param virtualRouterName The name of the virtual router that the route is associated with. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRouteAsync(String meshName, String routeName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DescribeRouteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeRouteValidateBeforeCall(meshName, routeName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DescribeRouteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeVirtualGateway
     * @param meshName The name of the service mesh that the gateway route resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeVirtualGatewayCall(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualGatewayName" + "}", localVarApiClient.escapeString(virtualGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeVirtualGatewayValidateBeforeCall(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling describeVirtualGateway(Async)");
        }

        // verify the required parameter 'virtualGatewayName' is set
        if (virtualGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualGatewayName' when calling describeVirtualGateway(Async)");
        }

        return describeVirtualGatewayCall(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Describes an existing virtual gateway.
     * @param meshName The name of the service mesh that the gateway route resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DescribeVirtualGatewayOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeVirtualGatewayOutput describeVirtualGateway(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DescribeVirtualGatewayOutput> localVarResp = describeVirtualGatewayWithHttpInfo(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes an existing virtual gateway.
     * @param meshName The name of the service mesh that the gateway route resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DescribeVirtualGatewayOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeVirtualGatewayOutput> describeVirtualGatewayWithHttpInfo(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = describeVirtualGatewayValidateBeforeCall(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DescribeVirtualGatewayOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes an existing virtual gateway.
     * @param meshName The name of the service mesh that the gateway route resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeVirtualGatewayAsync(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DescribeVirtualGatewayOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeVirtualGatewayValidateBeforeCall(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DescribeVirtualGatewayOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeVirtualNode
     * @param meshName The name of the service mesh that the virtual node resides in. (required)
     * @param virtualNodeName The name of the virtual node to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeVirtualNodeCall(String meshName, String virtualNodeName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualNodeName" + "}", localVarApiClient.escapeString(virtualNodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeVirtualNodeValidateBeforeCall(String meshName, String virtualNodeName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling describeVirtualNode(Async)");
        }

        // verify the required parameter 'virtualNodeName' is set
        if (virtualNodeName == null) {
            throw new ApiException("Missing the required parameter 'virtualNodeName' when calling describeVirtualNode(Async)");
        }

        return describeVirtualNodeCall(meshName, virtualNodeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Describes an existing virtual node.
     * @param meshName The name of the service mesh that the virtual node resides in. (required)
     * @param virtualNodeName The name of the virtual node to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DescribeVirtualNodeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeVirtualNodeOutput describeVirtualNode(String meshName, String virtualNodeName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DescribeVirtualNodeOutput> localVarResp = describeVirtualNodeWithHttpInfo(meshName, virtualNodeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes an existing virtual node.
     * @param meshName The name of the service mesh that the virtual node resides in. (required)
     * @param virtualNodeName The name of the virtual node to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DescribeVirtualNodeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeVirtualNodeOutput> describeVirtualNodeWithHttpInfo(String meshName, String virtualNodeName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = describeVirtualNodeValidateBeforeCall(meshName, virtualNodeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DescribeVirtualNodeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes an existing virtual node.
     * @param meshName The name of the service mesh that the virtual node resides in. (required)
     * @param virtualNodeName The name of the virtual node to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeVirtualNodeAsync(String meshName, String virtualNodeName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DescribeVirtualNodeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeVirtualNodeValidateBeforeCall(meshName, virtualNodeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DescribeVirtualNodeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeVirtualRouter
     * @param meshName The name of the service mesh that the virtual router resides in. (required)
     * @param virtualRouterName The name of the virtual router to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeVirtualRouterCall(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualRouterName" + "}", localVarApiClient.escapeString(virtualRouterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeVirtualRouterValidateBeforeCall(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling describeVirtualRouter(Async)");
        }

        // verify the required parameter 'virtualRouterName' is set
        if (virtualRouterName == null) {
            throw new ApiException("Missing the required parameter 'virtualRouterName' when calling describeVirtualRouter(Async)");
        }

        return describeVirtualRouterCall(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Describes an existing virtual router.
     * @param meshName The name of the service mesh that the virtual router resides in. (required)
     * @param virtualRouterName The name of the virtual router to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DescribeVirtualRouterOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeVirtualRouterOutput describeVirtualRouter(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DescribeVirtualRouterOutput> localVarResp = describeVirtualRouterWithHttpInfo(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes an existing virtual router.
     * @param meshName The name of the service mesh that the virtual router resides in. (required)
     * @param virtualRouterName The name of the virtual router to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DescribeVirtualRouterOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeVirtualRouterOutput> describeVirtualRouterWithHttpInfo(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = describeVirtualRouterValidateBeforeCall(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DescribeVirtualRouterOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes an existing virtual router.
     * @param meshName The name of the service mesh that the virtual router resides in. (required)
     * @param virtualRouterName The name of the virtual router to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeVirtualRouterAsync(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DescribeVirtualRouterOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeVirtualRouterValidateBeforeCall(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DescribeVirtualRouterOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeVirtualService
     * @param meshName The name of the service mesh that the virtual service resides in. (required)
     * @param virtualServiceName The name of the virtual service to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeVirtualServiceCall(String meshName, String virtualServiceName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualServiceName" + "}", localVarApiClient.escapeString(virtualServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeVirtualServiceValidateBeforeCall(String meshName, String virtualServiceName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling describeVirtualService(Async)");
        }

        // verify the required parameter 'virtualServiceName' is set
        if (virtualServiceName == null) {
            throw new ApiException("Missing the required parameter 'virtualServiceName' when calling describeVirtualService(Async)");
        }

        return describeVirtualServiceCall(meshName, virtualServiceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Describes an existing virtual service.
     * @param meshName The name of the service mesh that the virtual service resides in. (required)
     * @param virtualServiceName The name of the virtual service to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return DescribeVirtualServiceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeVirtualServiceOutput describeVirtualService(String meshName, String virtualServiceName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<DescribeVirtualServiceOutput> localVarResp = describeVirtualServiceWithHttpInfo(meshName, virtualServiceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes an existing virtual service.
     * @param meshName The name of the service mesh that the virtual service resides in. (required)
     * @param virtualServiceName The name of the virtual service to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;DescribeVirtualServiceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeVirtualServiceOutput> describeVirtualServiceWithHttpInfo(String meshName, String virtualServiceName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = describeVirtualServiceValidateBeforeCall(meshName, virtualServiceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<DescribeVirtualServiceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes an existing virtual service.
     * @param meshName The name of the service mesh that the virtual service resides in. (required)
     * @param virtualServiceName The name of the virtual service to describe. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeVirtualServiceAsync(String meshName, String virtualServiceName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<DescribeVirtualServiceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeVirtualServiceValidateBeforeCall(meshName, virtualServiceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<DescribeVirtualServiceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listGatewayRoutes
     * @param meshName The name of the service mesh to list gateway routes in. (required)
     * @param virtualGatewayName The name of the virtual gateway to list gateway routes in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListGatewayRoutes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListGatewayRoutes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListGatewayRoutes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListGatewayRoutes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListGatewayRoutes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGatewayRoutesCall(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualGatewayName" + "}", localVarApiClient.escapeString(virtualGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGatewayRoutesValidateBeforeCall(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling listGatewayRoutes(Async)");
        }

        // verify the required parameter 'virtualGatewayName' is set
        if (virtualGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualGatewayName' when calling listGatewayRoutes(Async)");
        }

        return listGatewayRoutesCall(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of existing gateway routes that are associated to a virtual gateway.
     * @param meshName The name of the service mesh to list gateway routes in. (required)
     * @param virtualGatewayName The name of the virtual gateway to list gateway routes in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListGatewayRoutes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListGatewayRoutes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListGatewayRoutes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListGatewayRoutes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListGatewayRoutes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ListGatewayRoutesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListGatewayRoutesOutput listGatewayRoutes(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken) throws ApiException {
        ApiResponse<ListGatewayRoutesOutput> localVarResp = listGatewayRoutesWithHttpInfo(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of existing gateway routes that are associated to a virtual gateway.
     * @param meshName The name of the service mesh to list gateway routes in. (required)
     * @param virtualGatewayName The name of the virtual gateway to list gateway routes in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListGatewayRoutes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListGatewayRoutes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListGatewayRoutes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListGatewayRoutes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListGatewayRoutes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ApiResponse&lt;ListGatewayRoutesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListGatewayRoutesOutput> listGatewayRoutesWithHttpInfo(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listGatewayRoutesValidateBeforeCall(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, null);
        Type localVarReturnType = new TypeToken<ListGatewayRoutesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of existing gateway routes that are associated to a virtual gateway.
     * @param meshName The name of the service mesh to list gateway routes in. (required)
     * @param virtualGatewayName The name of the virtual gateway to list gateway routes in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListGatewayRoutes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListGatewayRoutes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListGatewayRoutes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListGatewayRoutes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListGatewayRoutes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listGatewayRoutesAsync(String meshName, String virtualGatewayName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback<ListGatewayRoutesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGatewayRoutesValidateBeforeCall(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListGatewayRoutesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMeshes
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListMeshes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListMeshes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListMeshes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListMeshes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param nextToken &lt;p&gt;The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListMeshes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMeshesCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMeshesValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String nextToken, final ApiCallback _callback) throws ApiException {
        return listMeshesCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of existing service meshes.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListMeshes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListMeshes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListMeshes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListMeshes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param nextToken &lt;p&gt;The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListMeshes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.&lt;/p&gt; &lt;/note&gt; (optional)
     * @return ListMeshesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListMeshesOutput listMeshes(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String nextToken) throws ApiException {
        ApiResponse<ListMeshesOutput> localVarResp = listMeshesWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of existing service meshes.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListMeshes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListMeshes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListMeshes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListMeshes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param nextToken &lt;p&gt;The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListMeshes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.&lt;/p&gt; &lt;/note&gt; (optional)
     * @return ApiResponse&lt;ListMeshesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMeshesOutput> listMeshesWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listMeshesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, null);
        Type localVarReturnType = new TypeToken<ListMeshesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of existing service meshes.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListMeshes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListMeshes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListMeshes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListMeshes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param nextToken &lt;p&gt;The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListMeshes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMeshesAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String nextToken, final ApiCallback<ListMeshesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMeshesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListMeshesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRoutes
     * @param meshName The name of the service mesh to list routes in. (required)
     * @param virtualRouterName The name of the virtual router to list routes in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListRoutes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListRoutes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListRoutes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListRoutes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListRoutes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoutesCall(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualRouterName" + "}", localVarApiClient.escapeString(virtualRouterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRoutesValidateBeforeCall(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling listRoutes(Async)");
        }

        // verify the required parameter 'virtualRouterName' is set
        if (virtualRouterName == null) {
            throw new ApiException("Missing the required parameter 'virtualRouterName' when calling listRoutes(Async)");
        }

        return listRoutesCall(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of existing routes in a service mesh.
     * @param meshName The name of the service mesh to list routes in. (required)
     * @param virtualRouterName The name of the virtual router to list routes in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListRoutes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListRoutes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListRoutes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListRoutes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListRoutes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ListRoutesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListRoutesOutput listRoutes(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken) throws ApiException {
        ApiResponse<ListRoutesOutput> localVarResp = listRoutesWithHttpInfo(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of existing routes in a service mesh.
     * @param meshName The name of the service mesh to list routes in. (required)
     * @param virtualRouterName The name of the virtual router to list routes in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListRoutes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListRoutes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListRoutes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListRoutes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListRoutes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ApiResponse&lt;ListRoutesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRoutesOutput> listRoutesWithHttpInfo(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listRoutesValidateBeforeCall(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, null);
        Type localVarReturnType = new TypeToken<ListRoutesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of existing routes in a service mesh.
     * @param meshName The name of the service mesh to list routes in. (required)
     * @param virtualRouterName The name of the virtual router to list routes in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListRoutes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListRoutes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListRoutes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListRoutes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListRoutes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoutesAsync(String meshName, String virtualRouterName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback<ListRoutesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRoutesValidateBeforeCall(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListRoutesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param resourceArn The Amazon Resource Name (ARN) that identifies the resource to list the tags for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of tag results returned by &lt;code&gt;ListTagsForResource&lt;/code&gt; in paginated output. When this parameter is used, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListTagsForResource&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListTagsForResource&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String resourceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/tags#resourceArn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (resourceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceArn", resourceArn));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String resourceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, _callback);

    }

    /**
     * 
     * List the tags for an App Mesh resource.
     * @param resourceArn The Amazon Resource Name (ARN) that identifies the resource to list the tags for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of tag results returned by &lt;code&gt;ListTagsForResource&lt;/code&gt; in paginated output. When this parameter is used, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListTagsForResource&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListTagsForResource&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ListTagsForResourceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceOutput listTagsForResource(String resourceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String nextToken) throws ApiException {
        ApiResponse<ListTagsForResourceOutput> localVarResp = listTagsForResourceWithHttpInfo(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * List the tags for an App Mesh resource.
     * @param resourceArn The Amazon Resource Name (ARN) that identifies the resource to list the tags for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of tag results returned by &lt;code&gt;ListTagsForResource&lt;/code&gt; in paginated output. When this parameter is used, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListTagsForResource&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListTagsForResource&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ApiResponse&lt;ListTagsForResourceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceOutput> listTagsForResourceWithHttpInfo(String resourceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the tags for an App Mesh resource.
     * @param resourceArn The Amazon Resource Name (ARN) that identifies the resource to list the tags for. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of tag results returned by &lt;code&gt;ListTagsForResource&lt;/code&gt; in paginated output. When this parameter is used, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListTagsForResource&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListTagsForResource&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String resourceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String nextToken, final ApiCallback<ListTagsForResourceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVirtualGateways
     * @param meshName The name of the service mesh to list virtual gateways in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualGateways&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualGateways&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualGateways&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualGateways&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualGateways&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVirtualGatewaysCall(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualGateways"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVirtualGatewaysValidateBeforeCall(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling listVirtualGateways(Async)");
        }

        return listVirtualGatewaysCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of existing virtual gateways in a service mesh.
     * @param meshName The name of the service mesh to list virtual gateways in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualGateways&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualGateways&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualGateways&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualGateways&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualGateways&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ListVirtualGatewaysOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListVirtualGatewaysOutput listVirtualGateways(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken) throws ApiException {
        ApiResponse<ListVirtualGatewaysOutput> localVarResp = listVirtualGatewaysWithHttpInfo(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of existing virtual gateways in a service mesh.
     * @param meshName The name of the service mesh to list virtual gateways in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualGateways&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualGateways&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualGateways&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualGateways&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualGateways&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ApiResponse&lt;ListVirtualGatewaysOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVirtualGatewaysOutput> listVirtualGatewaysWithHttpInfo(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listVirtualGatewaysValidateBeforeCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, null);
        Type localVarReturnType = new TypeToken<ListVirtualGatewaysOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of existing virtual gateways in a service mesh.
     * @param meshName The name of the service mesh to list virtual gateways in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualGateways&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualGateways&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualGateways&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualGateways&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualGateways&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVirtualGatewaysAsync(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback<ListVirtualGatewaysOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVirtualGatewaysValidateBeforeCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListVirtualGatewaysOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVirtualNodes
     * @param meshName The name of the service mesh to list virtual nodes in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualNodes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualNodes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualNodes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualNodes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualNodes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVirtualNodesCall(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualNodes"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVirtualNodesValidateBeforeCall(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling listVirtualNodes(Async)");
        }

        return listVirtualNodesCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of existing virtual nodes.
     * @param meshName The name of the service mesh to list virtual nodes in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualNodes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualNodes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualNodes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualNodes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualNodes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ListVirtualNodesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListVirtualNodesOutput listVirtualNodes(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken) throws ApiException {
        ApiResponse<ListVirtualNodesOutput> localVarResp = listVirtualNodesWithHttpInfo(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of existing virtual nodes.
     * @param meshName The name of the service mesh to list virtual nodes in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualNodes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualNodes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualNodes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualNodes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualNodes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ApiResponse&lt;ListVirtualNodesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVirtualNodesOutput> listVirtualNodesWithHttpInfo(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listVirtualNodesValidateBeforeCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, null);
        Type localVarReturnType = new TypeToken<ListVirtualNodesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of existing virtual nodes.
     * @param meshName The name of the service mesh to list virtual nodes in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualNodes&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualNodes&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualNodes&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualNodes&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualNodes&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVirtualNodesAsync(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback<ListVirtualNodesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVirtualNodesValidateBeforeCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListVirtualNodesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVirtualRouters
     * @param meshName The name of the service mesh to list virtual routers in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualRouters&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualRouters&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualRouters&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualRouters&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualRouters&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVirtualRoutersCall(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualRouters"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVirtualRoutersValidateBeforeCall(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling listVirtualRouters(Async)");
        }

        return listVirtualRoutersCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of existing virtual routers in a service mesh.
     * @param meshName The name of the service mesh to list virtual routers in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualRouters&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualRouters&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualRouters&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualRouters&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualRouters&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ListVirtualRoutersOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListVirtualRoutersOutput listVirtualRouters(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken) throws ApiException {
        ApiResponse<ListVirtualRoutersOutput> localVarResp = listVirtualRoutersWithHttpInfo(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of existing virtual routers in a service mesh.
     * @param meshName The name of the service mesh to list virtual routers in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualRouters&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualRouters&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualRouters&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualRouters&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualRouters&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ApiResponse&lt;ListVirtualRoutersOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVirtualRoutersOutput> listVirtualRoutersWithHttpInfo(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listVirtualRoutersValidateBeforeCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, null);
        Type localVarReturnType = new TypeToken<ListVirtualRoutersOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of existing virtual routers in a service mesh.
     * @param meshName The name of the service mesh to list virtual routers in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualRouters&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualRouters&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualRouters&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualRouters&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualRouters&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVirtualRoutersAsync(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback<ListVirtualRoutersOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVirtualRoutersValidateBeforeCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListVirtualRoutersOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVirtualServices
     * @param meshName The name of the service mesh to list virtual services in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualServices&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualServices&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualServices&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualServices&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualServices&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVirtualServicesCall(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualServices"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVirtualServicesValidateBeforeCall(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling listVirtualServices(Async)");
        }

        return listVirtualServicesCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of existing virtual services in a service mesh.
     * @param meshName The name of the service mesh to list virtual services in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualServices&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualServices&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualServices&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualServices&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualServices&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ListVirtualServicesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ListVirtualServicesOutput listVirtualServices(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken) throws ApiException {
        ApiResponse<ListVirtualServicesOutput> localVarResp = listVirtualServicesWithHttpInfo(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of existing virtual services in a service mesh.
     * @param meshName The name of the service mesh to list virtual services in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualServices&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualServices&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualServices&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualServices&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualServices&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @return ApiResponse&lt;ListVirtualServicesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListVirtualServicesOutput> listVirtualServicesWithHttpInfo(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listVirtualServicesValidateBeforeCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, null);
        Type localVarReturnType = new TypeToken<ListVirtualServicesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of existing virtual services in a service mesh.
     * @param meshName The name of the service mesh to list virtual services in. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param limit The maximum number of results returned by &lt;code&gt;ListVirtualServices&lt;/code&gt; in paginated output. When you use this parameter, &lt;code&gt;ListVirtualServices&lt;/code&gt; returns only &lt;code&gt;limit&lt;/code&gt; results in a single page along with a &lt;code&gt;nextToken&lt;/code&gt; response element. You can see the remaining results of the initial request by sending another &lt;code&gt;ListVirtualServices&lt;/code&gt; request with the returned &lt;code&gt;nextToken&lt;/code&gt; value. This value can be between 1 and 100. If you don&#39;t use this parameter, &lt;code&gt;ListVirtualServices&lt;/code&gt; returns up to 100 results and a &lt;code&gt;nextToken&lt;/code&gt; value if applicable. (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param nextToken The &lt;code&gt;nextToken&lt;/code&gt; value returned from a previous paginated &lt;code&gt;ListVirtualServices&lt;/code&gt; request where &lt;code&gt;limit&lt;/code&gt; was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the &lt;code&gt;nextToken&lt;/code&gt; value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVirtualServicesAsync(String meshName, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer limit, String meshOwner, String nextToken, final ApiCallback<ListVirtualServicesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVirtualServicesValidateBeforeCall(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListVirtualServicesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param resourceArn The Amazon Resource Name (ARN) of the resource to add tags to. (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String resourceArn, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/v20190125/tag#resourceArn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceArn", resourceArn));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String resourceArn, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Associates the specified tags to a resource with the specified &lt;code&gt;resourceArn&lt;/code&gt;. If existing tags on a resource aren&#39;t specified in the request parameters, they aren&#39;t changed. When a resource is deleted, the tags associated with that resource are also deleted.
     * @param resourceArn The Amazon Resource Name (ARN) of the resource to add tags to. (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object tagResource(String resourceArn, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = tagResourceWithHttpInfo(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Associates the specified tags to a resource with the specified &lt;code&gt;resourceArn&lt;/code&gt;. If existing tags on a resource aren&#39;t specified in the request parameters, they aren&#39;t changed. When a resource is deleted, the tags associated with that resource are also deleted.
     * @param resourceArn The Amazon Resource Name (ARN) of the resource to add tags to. (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tagResourceWithHttpInfo(String resourceArn, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Associates the specified tags to a resource with the specified &lt;code&gt;resourceArn&lt;/code&gt;. If existing tags on a resource aren&#39;t specified in the request parameters, they aren&#39;t changed. When a resource is deleted, the tags associated with that resource are also deleted.
     * @param resourceArn The Amazon Resource Name (ARN) of the resource to add tags to. (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String resourceArn, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param resourceArn The Amazon Resource Name (ARN) of the resource to delete tags from. (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String resourceArn, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/v20190125/untag#resourceArn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resourceArn", resourceArn));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String resourceArn, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceArn' is set
        if (resourceArn == null) {
            throw new ApiException("Missing the required parameter 'resourceArn' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceRequest' is set
        if (untagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'untagResourceRequest' when calling untagResource(Async)");
        }

        return untagResourceCall(resourceArn, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes specified tags from a resource.
     * @param resourceArn The Amazon Resource Name (ARN) of the resource to delete tags from. (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public Object untagResource(String resourceArn, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = untagResourceWithHttpInfo(resourceArn, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes specified tags from a resource.
     * @param resourceArn The Amazon Resource Name (ARN) of the resource to delete tags from. (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> untagResourceWithHttpInfo(String resourceArn, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(resourceArn, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes specified tags from a resource.
     * @param resourceArn The Amazon Resource Name (ARN) of the resource to delete tags from. (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String resourceArn, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(resourceArn, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGatewayRoute
     * @param gatewayRouteName The name of the gateway route to update. (required)
     * @param meshName The name of the service mesh that the gateway route resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway that the gateway route is associated with. (required)
     * @param updateGatewayRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGatewayRouteCall(String gatewayRouteName, String meshName, String virtualGatewayName, UpdateGatewayRouteRequest updateGatewayRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGatewayRouteRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}"
            .replace("{" + "gatewayRouteName" + "}", localVarApiClient.escapeString(gatewayRouteName.toString()))
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualGatewayName" + "}", localVarApiClient.escapeString(virtualGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGatewayRouteValidateBeforeCall(String gatewayRouteName, String meshName, String virtualGatewayName, UpdateGatewayRouteRequest updateGatewayRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'gatewayRouteName' is set
        if (gatewayRouteName == null) {
            throw new ApiException("Missing the required parameter 'gatewayRouteName' when calling updateGatewayRoute(Async)");
        }

        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling updateGatewayRoute(Async)");
        }

        // verify the required parameter 'virtualGatewayName' is set
        if (virtualGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualGatewayName' when calling updateGatewayRoute(Async)");
        }

        // verify the required parameter 'updateGatewayRouteRequest' is set
        if (updateGatewayRouteRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGatewayRouteRequest' when calling updateGatewayRoute(Async)");
        }

        return updateGatewayRouteCall(gatewayRouteName, meshName, virtualGatewayName, updateGatewayRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Updates an existing gateway route that is associated to a specified virtual gateway in a service mesh.
     * @param gatewayRouteName The name of the gateway route to update. (required)
     * @param meshName The name of the service mesh that the gateway route resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway that the gateway route is associated with. (required)
     * @param updateGatewayRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return UpdateGatewayRouteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGatewayRouteOutput updateGatewayRoute(String gatewayRouteName, String meshName, String virtualGatewayName, UpdateGatewayRouteRequest updateGatewayRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<UpdateGatewayRouteOutput> localVarResp = updateGatewayRouteWithHttpInfo(gatewayRouteName, meshName, virtualGatewayName, updateGatewayRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing gateway route that is associated to a specified virtual gateway in a service mesh.
     * @param gatewayRouteName The name of the gateway route to update. (required)
     * @param meshName The name of the service mesh that the gateway route resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway that the gateway route is associated with. (required)
     * @param updateGatewayRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;UpdateGatewayRouteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGatewayRouteOutput> updateGatewayRouteWithHttpInfo(String gatewayRouteName, String meshName, String virtualGatewayName, UpdateGatewayRouteRequest updateGatewayRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = updateGatewayRouteValidateBeforeCall(gatewayRouteName, meshName, virtualGatewayName, updateGatewayRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<UpdateGatewayRouteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing gateway route that is associated to a specified virtual gateway in a service mesh.
     * @param gatewayRouteName The name of the gateway route to update. (required)
     * @param meshName The name of the service mesh that the gateway route resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway that the gateway route is associated with. (required)
     * @param updateGatewayRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGatewayRouteAsync(String gatewayRouteName, String meshName, String virtualGatewayName, UpdateGatewayRouteRequest updateGatewayRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<UpdateGatewayRouteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGatewayRouteValidateBeforeCall(gatewayRouteName, meshName, virtualGatewayName, updateGatewayRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<UpdateGatewayRouteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMesh
     * @param meshName The name of the service mesh to update. (required)
     * @param updateMeshRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMeshCall(String meshName, UpdateMeshRequest updateMeshRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMeshRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMeshValidateBeforeCall(String meshName, UpdateMeshRequest updateMeshRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling updateMesh(Async)");
        }

        // verify the required parameter 'updateMeshRequest' is set
        if (updateMeshRequest == null) {
            throw new ApiException("Missing the required parameter 'updateMeshRequest' when calling updateMesh(Async)");
        }

        return updateMeshCall(meshName, updateMeshRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates an existing service mesh.
     * @param meshName The name of the service mesh to update. (required)
     * @param updateMeshRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateMeshOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMeshOutput updateMesh(String meshName, UpdateMeshRequest updateMeshRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateMeshOutput> localVarResp = updateMeshWithHttpInfo(meshName, updateMeshRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing service mesh.
     * @param meshName The name of the service mesh to update. (required)
     * @param updateMeshRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateMeshOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateMeshOutput> updateMeshWithHttpInfo(String meshName, UpdateMeshRequest updateMeshRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateMeshValidateBeforeCall(meshName, updateMeshRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateMeshOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing service mesh.
     * @param meshName The name of the service mesh to update. (required)
     * @param updateMeshRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMeshAsync(String meshName, UpdateMeshRequest updateMeshRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateMeshOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMeshValidateBeforeCall(meshName, updateMeshRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateMeshOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRoute
     * @param meshName The name of the service mesh that the route resides in. (required)
     * @param routeName The name of the route to update. (required)
     * @param virtualRouterName The name of the virtual router that the route is associated with. (required)
     * @param updateRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRouteCall(String meshName, String routeName, String virtualRouterName, UpdateRouteRequest updateRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRouteRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "routeName" + "}", localVarApiClient.escapeString(routeName.toString()))
            .replace("{" + "virtualRouterName" + "}", localVarApiClient.escapeString(virtualRouterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRouteValidateBeforeCall(String meshName, String routeName, String virtualRouterName, UpdateRouteRequest updateRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling updateRoute(Async)");
        }

        // verify the required parameter 'routeName' is set
        if (routeName == null) {
            throw new ApiException("Missing the required parameter 'routeName' when calling updateRoute(Async)");
        }

        // verify the required parameter 'virtualRouterName' is set
        if (virtualRouterName == null) {
            throw new ApiException("Missing the required parameter 'virtualRouterName' when calling updateRoute(Async)");
        }

        // verify the required parameter 'updateRouteRequest' is set
        if (updateRouteRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRouteRequest' when calling updateRoute(Async)");
        }

        return updateRouteCall(meshName, routeName, virtualRouterName, updateRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Updates an existing route for a specified service mesh and virtual router.
     * @param meshName The name of the service mesh that the route resides in. (required)
     * @param routeName The name of the route to update. (required)
     * @param virtualRouterName The name of the virtual router that the route is associated with. (required)
     * @param updateRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return UpdateRouteOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRouteOutput updateRoute(String meshName, String routeName, String virtualRouterName, UpdateRouteRequest updateRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<UpdateRouteOutput> localVarResp = updateRouteWithHttpInfo(meshName, routeName, virtualRouterName, updateRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing route for a specified service mesh and virtual router.
     * @param meshName The name of the service mesh that the route resides in. (required)
     * @param routeName The name of the route to update. (required)
     * @param virtualRouterName The name of the virtual router that the route is associated with. (required)
     * @param updateRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;UpdateRouteOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRouteOutput> updateRouteWithHttpInfo(String meshName, String routeName, String virtualRouterName, UpdateRouteRequest updateRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = updateRouteValidateBeforeCall(meshName, routeName, virtualRouterName, updateRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<UpdateRouteOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing route for a specified service mesh and virtual router.
     * @param meshName The name of the service mesh that the route resides in. (required)
     * @param routeName The name of the route to update. (required)
     * @param virtualRouterName The name of the virtual router that the route is associated with. (required)
     * @param updateRouteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRouteAsync(String meshName, String routeName, String virtualRouterName, UpdateRouteRequest updateRouteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<UpdateRouteOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRouteValidateBeforeCall(meshName, routeName, virtualRouterName, updateRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<UpdateRouteOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVirtualGateway
     * @param meshName The name of the service mesh that the virtual gateway resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway to update. (required)
     * @param updateVirtualGatewayRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVirtualGatewayCall(String meshName, String virtualGatewayName, UpdateVirtualGatewayRequest updateVirtualGatewayRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateVirtualGatewayRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualGatewayName" + "}", localVarApiClient.escapeString(virtualGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVirtualGatewayValidateBeforeCall(String meshName, String virtualGatewayName, UpdateVirtualGatewayRequest updateVirtualGatewayRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling updateVirtualGateway(Async)");
        }

        // verify the required parameter 'virtualGatewayName' is set
        if (virtualGatewayName == null) {
            throw new ApiException("Missing the required parameter 'virtualGatewayName' when calling updateVirtualGateway(Async)");
        }

        // verify the required parameter 'updateVirtualGatewayRequest' is set
        if (updateVirtualGatewayRequest == null) {
            throw new ApiException("Missing the required parameter 'updateVirtualGatewayRequest' when calling updateVirtualGateway(Async)");
        }

        return updateVirtualGatewayCall(meshName, virtualGatewayName, updateVirtualGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Updates an existing virtual gateway in a specified service mesh.
     * @param meshName The name of the service mesh that the virtual gateway resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway to update. (required)
     * @param updateVirtualGatewayRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return UpdateVirtualGatewayOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateVirtualGatewayOutput updateVirtualGateway(String meshName, String virtualGatewayName, UpdateVirtualGatewayRequest updateVirtualGatewayRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<UpdateVirtualGatewayOutput> localVarResp = updateVirtualGatewayWithHttpInfo(meshName, virtualGatewayName, updateVirtualGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing virtual gateway in a specified service mesh.
     * @param meshName The name of the service mesh that the virtual gateway resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway to update. (required)
     * @param updateVirtualGatewayRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;UpdateVirtualGatewayOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateVirtualGatewayOutput> updateVirtualGatewayWithHttpInfo(String meshName, String virtualGatewayName, UpdateVirtualGatewayRequest updateVirtualGatewayRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = updateVirtualGatewayValidateBeforeCall(meshName, virtualGatewayName, updateVirtualGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<UpdateVirtualGatewayOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing virtual gateway in a specified service mesh.
     * @param meshName The name of the service mesh that the virtual gateway resides in. (required)
     * @param virtualGatewayName The name of the virtual gateway to update. (required)
     * @param updateVirtualGatewayRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVirtualGatewayAsync(String meshName, String virtualGatewayName, UpdateVirtualGatewayRequest updateVirtualGatewayRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<UpdateVirtualGatewayOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVirtualGatewayValidateBeforeCall(meshName, virtualGatewayName, updateVirtualGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<UpdateVirtualGatewayOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVirtualNode
     * @param meshName The name of the service mesh that the virtual node resides in. (required)
     * @param virtualNodeName The name of the virtual node to update. (required)
     * @param updateVirtualNodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVirtualNodeCall(String meshName, String virtualNodeName, UpdateVirtualNodeRequest updateVirtualNodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateVirtualNodeRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualNodeName" + "}", localVarApiClient.escapeString(virtualNodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVirtualNodeValidateBeforeCall(String meshName, String virtualNodeName, UpdateVirtualNodeRequest updateVirtualNodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling updateVirtualNode(Async)");
        }

        // verify the required parameter 'virtualNodeName' is set
        if (virtualNodeName == null) {
            throw new ApiException("Missing the required parameter 'virtualNodeName' when calling updateVirtualNode(Async)");
        }

        // verify the required parameter 'updateVirtualNodeRequest' is set
        if (updateVirtualNodeRequest == null) {
            throw new ApiException("Missing the required parameter 'updateVirtualNodeRequest' when calling updateVirtualNode(Async)");
        }

        return updateVirtualNodeCall(meshName, virtualNodeName, updateVirtualNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Updates an existing virtual node in a specified service mesh.
     * @param meshName The name of the service mesh that the virtual node resides in. (required)
     * @param virtualNodeName The name of the virtual node to update. (required)
     * @param updateVirtualNodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return UpdateVirtualNodeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateVirtualNodeOutput updateVirtualNode(String meshName, String virtualNodeName, UpdateVirtualNodeRequest updateVirtualNodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<UpdateVirtualNodeOutput> localVarResp = updateVirtualNodeWithHttpInfo(meshName, virtualNodeName, updateVirtualNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing virtual node in a specified service mesh.
     * @param meshName The name of the service mesh that the virtual node resides in. (required)
     * @param virtualNodeName The name of the virtual node to update. (required)
     * @param updateVirtualNodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;UpdateVirtualNodeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateVirtualNodeOutput> updateVirtualNodeWithHttpInfo(String meshName, String virtualNodeName, UpdateVirtualNodeRequest updateVirtualNodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = updateVirtualNodeValidateBeforeCall(meshName, virtualNodeName, updateVirtualNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<UpdateVirtualNodeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing virtual node in a specified service mesh.
     * @param meshName The name of the service mesh that the virtual node resides in. (required)
     * @param virtualNodeName The name of the virtual node to update. (required)
     * @param updateVirtualNodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVirtualNodeAsync(String meshName, String virtualNodeName, UpdateVirtualNodeRequest updateVirtualNodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<UpdateVirtualNodeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVirtualNodeValidateBeforeCall(meshName, virtualNodeName, updateVirtualNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<UpdateVirtualNodeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVirtualRouter
     * @param meshName The name of the service mesh that the virtual router resides in. (required)
     * @param virtualRouterName The name of the virtual router to update. (required)
     * @param updateVirtualRouterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVirtualRouterCall(String meshName, String virtualRouterName, UpdateVirtualRouterRequest updateVirtualRouterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateVirtualRouterRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualRouterName" + "}", localVarApiClient.escapeString(virtualRouterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVirtualRouterValidateBeforeCall(String meshName, String virtualRouterName, UpdateVirtualRouterRequest updateVirtualRouterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling updateVirtualRouter(Async)");
        }

        // verify the required parameter 'virtualRouterName' is set
        if (virtualRouterName == null) {
            throw new ApiException("Missing the required parameter 'virtualRouterName' when calling updateVirtualRouter(Async)");
        }

        // verify the required parameter 'updateVirtualRouterRequest' is set
        if (updateVirtualRouterRequest == null) {
            throw new ApiException("Missing the required parameter 'updateVirtualRouterRequest' when calling updateVirtualRouter(Async)");
        }

        return updateVirtualRouterCall(meshName, virtualRouterName, updateVirtualRouterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Updates an existing virtual router in a specified service mesh.
     * @param meshName The name of the service mesh that the virtual router resides in. (required)
     * @param virtualRouterName The name of the virtual router to update. (required)
     * @param updateVirtualRouterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return UpdateVirtualRouterOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateVirtualRouterOutput updateVirtualRouter(String meshName, String virtualRouterName, UpdateVirtualRouterRequest updateVirtualRouterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<UpdateVirtualRouterOutput> localVarResp = updateVirtualRouterWithHttpInfo(meshName, virtualRouterName, updateVirtualRouterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing virtual router in a specified service mesh.
     * @param meshName The name of the service mesh that the virtual router resides in. (required)
     * @param virtualRouterName The name of the virtual router to update. (required)
     * @param updateVirtualRouterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;UpdateVirtualRouterOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateVirtualRouterOutput> updateVirtualRouterWithHttpInfo(String meshName, String virtualRouterName, UpdateVirtualRouterRequest updateVirtualRouterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = updateVirtualRouterValidateBeforeCall(meshName, virtualRouterName, updateVirtualRouterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<UpdateVirtualRouterOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing virtual router in a specified service mesh.
     * @param meshName The name of the service mesh that the virtual router resides in. (required)
     * @param virtualRouterName The name of the virtual router to update. (required)
     * @param updateVirtualRouterRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVirtualRouterAsync(String meshName, String virtualRouterName, UpdateVirtualRouterRequest updateVirtualRouterRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<UpdateVirtualRouterOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVirtualRouterValidateBeforeCall(meshName, virtualRouterName, updateVirtualRouterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<UpdateVirtualRouterOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVirtualService
     * @param meshName The name of the service mesh that the virtual service resides in. (required)
     * @param virtualServiceName The name of the virtual service to update. (required)
     * @param updateVirtualServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVirtualServiceCall(String meshName, String virtualServiceName, UpdateVirtualServiceRequest updateVirtualServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateVirtualServiceRequest;

        // create path and map variables
        String localVarPath = "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}"
            .replace("{" + "meshName" + "}", localVarApiClient.escapeString(meshName.toString()))
            .replace("{" + "virtualServiceName" + "}", localVarApiClient.escapeString(virtualServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (meshOwner != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meshOwner", meshOwner));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVirtualServiceValidateBeforeCall(String meshName, String virtualServiceName, UpdateVirtualServiceRequest updateVirtualServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meshName' is set
        if (meshName == null) {
            throw new ApiException("Missing the required parameter 'meshName' when calling updateVirtualService(Async)");
        }

        // verify the required parameter 'virtualServiceName' is set
        if (virtualServiceName == null) {
            throw new ApiException("Missing the required parameter 'virtualServiceName' when calling updateVirtualService(Async)");
        }

        // verify the required parameter 'updateVirtualServiceRequest' is set
        if (updateVirtualServiceRequest == null) {
            throw new ApiException("Missing the required parameter 'updateVirtualServiceRequest' when calling updateVirtualService(Async)");
        }

        return updateVirtualServiceCall(meshName, virtualServiceName, updateVirtualServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);

    }

    /**
     * 
     * Updates an existing virtual service in a specified service mesh.
     * @param meshName The name of the service mesh that the virtual service resides in. (required)
     * @param virtualServiceName The name of the virtual service to update. (required)
     * @param updateVirtualServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return UpdateVirtualServiceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateVirtualServiceOutput updateVirtualService(String meshName, String virtualServiceName, UpdateVirtualServiceRequest updateVirtualServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        ApiResponse<UpdateVirtualServiceOutput> localVarResp = updateVirtualServiceWithHttpInfo(meshName, virtualServiceName, updateVirtualServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing virtual service in a specified service mesh.
     * @param meshName The name of the service mesh that the virtual service resides in. (required)
     * @param virtualServiceName The name of the virtual service to update. (required)
     * @param updateVirtualServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;UpdateVirtualServiceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateVirtualServiceOutput> updateVirtualServiceWithHttpInfo(String meshName, String virtualServiceName, UpdateVirtualServiceRequest updateVirtualServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner) throws ApiException {
        okhttp3.Call localVarCall = updateVirtualServiceValidateBeforeCall(meshName, virtualServiceName, updateVirtualServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, null);
        Type localVarReturnType = new TypeToken<UpdateVirtualServiceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing virtual service in a specified service mesh.
     * @param meshName The name of the service mesh that the virtual service resides in. (required)
     * @param virtualServiceName The name of the virtual service to update. (required)
     * @param updateVirtualServiceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param meshOwner The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it&#39;s the ID of the account that shared the mesh with your account. For more information about mesh sharing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\&quot;&gt;Working with shared meshes&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyRequestsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InternalServerErrorException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVirtualServiceAsync(String meshName, String virtualServiceName, UpdateVirtualServiceRequest updateVirtualServiceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String meshOwner, final ApiCallback<UpdateVirtualServiceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVirtualServiceValidateBeforeCall(meshName, virtualServiceName, updateVirtualServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner, _callback);
        Type localVarReturnType = new TypeToken<UpdateVirtualServiceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
