/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VirtualGatewayPortProtocol;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualGatewayListenerHealthCheck
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.616443-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualGatewayListenerHealthCheck {
  public static final String SERIALIZED_NAME_HEALTHY_THRESHOLD = "healthyThreshold";
  @SerializedName(SERIALIZED_NAME_HEALTHY_THRESHOLD)
  private Integer healthyThreshold;

  public static final String SERIALIZED_NAME_INTERVAL_MILLIS = "intervalMillis";
  @SerializedName(SERIALIZED_NAME_INTERVAL_MILLIS)
  private Integer intervalMillis;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private VirtualGatewayPortProtocol protocol;

  public static final String SERIALIZED_NAME_TIMEOUT_MILLIS = "timeoutMillis";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_MILLIS)
  private Integer timeoutMillis;

  public static final String SERIALIZED_NAME_UNHEALTHY_THRESHOLD = "unhealthyThreshold";
  @SerializedName(SERIALIZED_NAME_UNHEALTHY_THRESHOLD)
  private Integer unhealthyThreshold;

  public VirtualGatewayListenerHealthCheck() {
  }

  public VirtualGatewayListenerHealthCheck healthyThreshold(Integer healthyThreshold) {
    this.healthyThreshold = healthyThreshold;
    return this;
  }

  /**
   * Get healthyThreshold
   * @return healthyThreshold
   */
  @javax.annotation.Nonnull
  public Integer getHealthyThreshold() {
    return healthyThreshold;
  }

  public void setHealthyThreshold(Integer healthyThreshold) {
    this.healthyThreshold = healthyThreshold;
  }


  public VirtualGatewayListenerHealthCheck intervalMillis(Integer intervalMillis) {
    this.intervalMillis = intervalMillis;
    return this;
  }

  /**
   * Get intervalMillis
   * @return intervalMillis
   */
  @javax.annotation.Nonnull
  public Integer getIntervalMillis() {
    return intervalMillis;
  }

  public void setIntervalMillis(Integer intervalMillis) {
    this.intervalMillis = intervalMillis;
  }


  public VirtualGatewayListenerHealthCheck path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public VirtualGatewayListenerHealthCheck port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public VirtualGatewayListenerHealthCheck protocol(VirtualGatewayPortProtocol protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nonnull
  public VirtualGatewayPortProtocol getProtocol() {
    return protocol;
  }

  public void setProtocol(VirtualGatewayPortProtocol protocol) {
    this.protocol = protocol;
  }


  public VirtualGatewayListenerHealthCheck timeoutMillis(Integer timeoutMillis) {
    this.timeoutMillis = timeoutMillis;
    return this;
  }

  /**
   * Get timeoutMillis
   * @return timeoutMillis
   */
  @javax.annotation.Nonnull
  public Integer getTimeoutMillis() {
    return timeoutMillis;
  }

  public void setTimeoutMillis(Integer timeoutMillis) {
    this.timeoutMillis = timeoutMillis;
  }


  public VirtualGatewayListenerHealthCheck unhealthyThreshold(Integer unhealthyThreshold) {
    this.unhealthyThreshold = unhealthyThreshold;
    return this;
  }

  /**
   * Get unhealthyThreshold
   * @return unhealthyThreshold
   */
  @javax.annotation.Nonnull
  public Integer getUnhealthyThreshold() {
    return unhealthyThreshold;
  }

  public void setUnhealthyThreshold(Integer unhealthyThreshold) {
    this.unhealthyThreshold = unhealthyThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualGatewayListenerHealthCheck virtualGatewayListenerHealthCheck = (VirtualGatewayListenerHealthCheck) o;
    return Objects.equals(this.healthyThreshold, virtualGatewayListenerHealthCheck.healthyThreshold) &&
        Objects.equals(this.intervalMillis, virtualGatewayListenerHealthCheck.intervalMillis) &&
        Objects.equals(this.path, virtualGatewayListenerHealthCheck.path) &&
        Objects.equals(this.port, virtualGatewayListenerHealthCheck.port) &&
        Objects.equals(this.protocol, virtualGatewayListenerHealthCheck.protocol) &&
        Objects.equals(this.timeoutMillis, virtualGatewayListenerHealthCheck.timeoutMillis) &&
        Objects.equals(this.unhealthyThreshold, virtualGatewayListenerHealthCheck.unhealthyThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthyThreshold, intervalMillis, path, port, protocol, timeoutMillis, unhealthyThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualGatewayListenerHealthCheck {\n");
    sb.append("    healthyThreshold: ").append(toIndentedString(healthyThreshold)).append("\n");
    sb.append("    intervalMillis: ").append(toIndentedString(intervalMillis)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    timeoutMillis: ").append(toIndentedString(timeoutMillis)).append("\n");
    sb.append("    unhealthyThreshold: ").append(toIndentedString(unhealthyThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("healthyThreshold");
    openapiFields.add("intervalMillis");
    openapiFields.add("path");
    openapiFields.add("port");
    openapiFields.add("protocol");
    openapiFields.add("timeoutMillis");
    openapiFields.add("unhealthyThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("healthyThreshold");
    openapiRequiredFields.add("intervalMillis");
    openapiRequiredFields.add("protocol");
    openapiRequiredFields.add("timeoutMillis");
    openapiRequiredFields.add("unhealthyThreshold");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualGatewayListenerHealthCheck
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualGatewayListenerHealthCheck.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualGatewayListenerHealthCheck is not found in the empty JSON string", VirtualGatewayListenerHealthCheck.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualGatewayListenerHealthCheck.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualGatewayListenerHealthCheck` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VirtualGatewayListenerHealthCheck.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `healthyThreshold`
      Integer.validateJsonElement(jsonObj.get("healthyThreshold"));
      // validate the required field `intervalMillis`
      Integer.validateJsonElement(jsonObj.get("intervalMillis"));
      // validate the optional field `path`
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("path"));
      }
      // validate the optional field `port`
      if (jsonObj.get("port") != null && !jsonObj.get("port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("port"));
      }
      // validate the required field `protocol`
      VirtualGatewayPortProtocol.validateJsonElement(jsonObj.get("protocol"));
      // validate the required field `timeoutMillis`
      Integer.validateJsonElement(jsonObj.get("timeoutMillis"));
      // validate the required field `unhealthyThreshold`
      Integer.validateJsonElement(jsonObj.get("unhealthyThreshold"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualGatewayListenerHealthCheck.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualGatewayListenerHealthCheck' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualGatewayListenerHealthCheck> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualGatewayListenerHealthCheck.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualGatewayListenerHealthCheck>() {
           @Override
           public void write(JsonWriter out, VirtualGatewayListenerHealthCheck value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualGatewayListenerHealthCheck read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualGatewayListenerHealthCheck given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualGatewayListenerHealthCheck
   * @throws IOException if the JSON string is invalid with respect to VirtualGatewayListenerHealthCheck
   */
  public static VirtualGatewayListenerHealthCheck fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualGatewayListenerHealthCheck.class);
  }

  /**
   * Convert an instance of VirtualGatewayListenerHealthCheck to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

