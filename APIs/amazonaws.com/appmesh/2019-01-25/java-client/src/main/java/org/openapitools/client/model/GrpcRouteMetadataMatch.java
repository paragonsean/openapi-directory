/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GrpcRouteMetadataMatchMethodRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GrpcRouteMetadataMatch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:00.616443-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GrpcRouteMetadataMatch {
  public static final String SERIALIZED_NAME_EXACT = "exact";
  @SerializedName(SERIALIZED_NAME_EXACT)
  private String exact;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private GrpcRouteMetadataMatchMethodRange range;

  public static final String SERIALIZED_NAME_REGEX = "regex";
  @SerializedName(SERIALIZED_NAME_REGEX)
  private String regex;

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private String suffix;

  public GrpcRouteMetadataMatch() {
  }

  public GrpcRouteMetadataMatch exact(String exact) {
    this.exact = exact;
    return this;
  }

  /**
   * Get exact
   * @return exact
   */
  @javax.annotation.Nullable
  public String getExact() {
    return exact;
  }

  public void setExact(String exact) {
    this.exact = exact;
  }


  public GrpcRouteMetadataMatch prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Get prefix
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public GrpcRouteMetadataMatch range(GrpcRouteMetadataMatchMethodRange range) {
    this.range = range;
    return this;
  }

  /**
   * Get range
   * @return range
   */
  @javax.annotation.Nullable
  public GrpcRouteMetadataMatchMethodRange getRange() {
    return range;
  }

  public void setRange(GrpcRouteMetadataMatchMethodRange range) {
    this.range = range;
  }


  public GrpcRouteMetadataMatch regex(String regex) {
    this.regex = regex;
    return this;
  }

  /**
   * Get regex
   * @return regex
   */
  @javax.annotation.Nullable
  public String getRegex() {
    return regex;
  }

  public void setRegex(String regex) {
    this.regex = regex;
  }


  public GrpcRouteMetadataMatch suffix(String suffix) {
    this.suffix = suffix;
    return this;
  }

  /**
   * Get suffix
   * @return suffix
   */
  @javax.annotation.Nullable
  public String getSuffix() {
    return suffix;
  }

  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrpcRouteMetadataMatch grpcRouteMetadataMatch = (GrpcRouteMetadataMatch) o;
    return Objects.equals(this.exact, grpcRouteMetadataMatch.exact) &&
        Objects.equals(this.prefix, grpcRouteMetadataMatch.prefix) &&
        Objects.equals(this.range, grpcRouteMetadataMatch.range) &&
        Objects.equals(this.regex, grpcRouteMetadataMatch.regex) &&
        Objects.equals(this.suffix, grpcRouteMetadataMatch.suffix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exact, prefix, range, regex, suffix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrpcRouteMetadataMatch {\n");
    sb.append("    exact: ").append(toIndentedString(exact)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    regex: ").append(toIndentedString(regex)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exact");
    openapiFields.add("prefix");
    openapiFields.add("range");
    openapiFields.add("regex");
    openapiFields.add("suffix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GrpcRouteMetadataMatch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GrpcRouteMetadataMatch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GrpcRouteMetadataMatch is not found in the empty JSON string", GrpcRouteMetadataMatch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GrpcRouteMetadataMatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GrpcRouteMetadataMatch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `exact`
      if (jsonObj.get("exact") != null && !jsonObj.get("exact").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("exact"));
      }
      // validate the optional field `prefix`
      if (jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("prefix"));
      }
      // validate the optional field `range`
      if (jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) {
        GrpcRouteMetadataMatchMethodRange.validateJsonElement(jsonObj.get("range"));
      }
      // validate the optional field `regex`
      if (jsonObj.get("regex") != null && !jsonObj.get("regex").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("regex"));
      }
      // validate the optional field `suffix`
      if (jsonObj.get("suffix") != null && !jsonObj.get("suffix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("suffix"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GrpcRouteMetadataMatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GrpcRouteMetadataMatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GrpcRouteMetadataMatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GrpcRouteMetadataMatch.class));

       return (TypeAdapter<T>) new TypeAdapter<GrpcRouteMetadataMatch>() {
           @Override
           public void write(JsonWriter out, GrpcRouteMetadataMatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GrpcRouteMetadataMatch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GrpcRouteMetadataMatch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GrpcRouteMetadataMatch
   * @throws IOException if the JSON string is invalid with respect to GrpcRouteMetadataMatch
   */
  public static GrpcRouteMetadataMatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GrpcRouteMetadataMatch.class);
  }

  /**
   * Convert an instance of GrpcRouteMetadataMatch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

