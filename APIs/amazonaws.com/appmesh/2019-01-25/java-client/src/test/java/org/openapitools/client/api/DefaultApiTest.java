/*
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateGatewayRouteOutput;
import org.openapitools.client.model.CreateGatewayRouteRequest;
import org.openapitools.client.model.CreateMeshOutput;
import org.openapitools.client.model.CreateMeshRequest;
import org.openapitools.client.model.CreateRouteOutput;
import org.openapitools.client.model.CreateRouteRequest;
import org.openapitools.client.model.CreateVirtualGatewayOutput;
import org.openapitools.client.model.CreateVirtualGatewayRequest;
import org.openapitools.client.model.CreateVirtualNodeOutput;
import org.openapitools.client.model.CreateVirtualNodeRequest;
import org.openapitools.client.model.CreateVirtualRouterOutput;
import org.openapitools.client.model.CreateVirtualRouterRequest;
import org.openapitools.client.model.CreateVirtualServiceOutput;
import org.openapitools.client.model.CreateVirtualServiceRequest;
import org.openapitools.client.model.DeleteGatewayRouteOutput;
import org.openapitools.client.model.DeleteMeshOutput;
import org.openapitools.client.model.DeleteRouteOutput;
import org.openapitools.client.model.DeleteVirtualGatewayOutput;
import org.openapitools.client.model.DeleteVirtualNodeOutput;
import org.openapitools.client.model.DeleteVirtualRouterOutput;
import org.openapitools.client.model.DeleteVirtualServiceOutput;
import org.openapitools.client.model.DescribeGatewayRouteOutput;
import org.openapitools.client.model.DescribeMeshOutput;
import org.openapitools.client.model.DescribeRouteOutput;
import org.openapitools.client.model.DescribeVirtualGatewayOutput;
import org.openapitools.client.model.DescribeVirtualNodeOutput;
import org.openapitools.client.model.DescribeVirtualRouterOutput;
import org.openapitools.client.model.DescribeVirtualServiceOutput;
import org.openapitools.client.model.ListGatewayRoutesOutput;
import org.openapitools.client.model.ListMeshesOutput;
import org.openapitools.client.model.ListRoutesOutput;
import org.openapitools.client.model.ListTagsForResourceOutput;
import org.openapitools.client.model.ListVirtualGatewaysOutput;
import org.openapitools.client.model.ListVirtualNodesOutput;
import org.openapitools.client.model.ListVirtualRoutersOutput;
import org.openapitools.client.model.ListVirtualServicesOutput;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateGatewayRouteOutput;
import org.openapitools.client.model.UpdateGatewayRouteRequest;
import org.openapitools.client.model.UpdateMeshOutput;
import org.openapitools.client.model.UpdateMeshRequest;
import org.openapitools.client.model.UpdateRouteOutput;
import org.openapitools.client.model.UpdateRouteRequest;
import org.openapitools.client.model.UpdateVirtualGatewayOutput;
import org.openapitools.client.model.UpdateVirtualGatewayRequest;
import org.openapitools.client.model.UpdateVirtualNodeOutput;
import org.openapitools.client.model.UpdateVirtualNodeRequest;
import org.openapitools.client.model.UpdateVirtualRouterOutput;
import org.openapitools.client.model.UpdateVirtualRouterRequest;
import org.openapitools.client.model.UpdateVirtualServiceOutput;
import org.openapitools.client.model.UpdateVirtualServiceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Creates a gateway route.&lt;/p&gt; &lt;p&gt;A gateway route is attached to a virtual gateway and routes traffic to an existing virtual service. If a route matches a request, it can distribute traffic to a target virtual service.&lt;/p&gt; &lt;p&gt;For more information about gateway routes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html\&quot;&gt;Gateway routes&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGatewayRouteTest() throws ApiException {
        String meshName = null;
        String virtualGatewayName = null;
        CreateGatewayRouteRequest createGatewayRouteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        CreateGatewayRouteOutput response = api.createGatewayRoute(meshName, virtualGatewayName, createGatewayRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a service mesh.&lt;/p&gt; &lt;p&gt; A service mesh is a logical boundary for network traffic between services that are represented by resources within the mesh. After you create your service mesh, you can create virtual services, virtual nodes, virtual routers, and routes to distribute traffic between the applications in your mesh.&lt;/p&gt; &lt;p&gt;For more information about service meshes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html\&quot;&gt;Service meshes&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMeshTest() throws ApiException {
        CreateMeshRequest createMeshRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMeshOutput response = api.createMesh(createMeshRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a route that is associated with a virtual router.&lt;/p&gt; &lt;p&gt; You can route several different protocols and define a retry policy for a route. Traffic can be routed to one or more virtual nodes.&lt;/p&gt; &lt;p&gt;For more information about routes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html\&quot;&gt;Routes&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRouteTest() throws ApiException {
        String meshName = null;
        String virtualRouterName = null;
        CreateRouteRequest createRouteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        CreateRouteOutput response = api.createRoute(meshName, virtualRouterName, createRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a virtual gateway.&lt;/p&gt; &lt;p&gt;A virtual gateway allows resources outside your mesh to communicate to resources that are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which represents an Envoy running with an application, a virtual gateway represents Envoy deployed by itself.&lt;/p&gt; &lt;p&gt;For more information about virtual gateways, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html\&quot;&gt;Virtual gateways&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVirtualGatewayTest() throws ApiException {
        String meshName = null;
        CreateVirtualGatewayRequest createVirtualGatewayRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        CreateVirtualGatewayOutput response = api.createVirtualGateway(meshName, createVirtualGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a virtual node within a service mesh.&lt;/p&gt; &lt;p&gt; A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS service or a Kubernetes deployment. When you create a virtual node, you can specify the service discovery information for your task group, and whether the proxy running in a task group will communicate with other proxies using Transport Layer Security (TLS).&lt;/p&gt; &lt;p&gt;You define a &lt;code&gt;listener&lt;/code&gt; for any inbound traffic that your virtual node expects. Any virtual service that your virtual node expects to communicate to is specified as a &lt;code&gt;backend&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The response metadata for your new virtual node contains the &lt;code&gt;arn&lt;/code&gt; that is associated with the virtual node. Set this value to the full ARN; for example, &lt;code&gt;arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp&lt;/code&gt;) as the &lt;code&gt;APPMESH_RESOURCE_ARN&lt;/code&gt; environment variable for your task group&#39;s Envoy proxy container in your task definition or pod spec. This is then mapped to the &lt;code&gt;node.id&lt;/code&gt; and &lt;code&gt;node.cluster&lt;/code&gt; Envoy parameters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;By default, App Mesh uses the name of the resource you specified in &lt;code&gt;APPMESH_RESOURCE_ARN&lt;/code&gt; when Envoy is referring to itself in metrics and traces. You can override this behavior by setting the &lt;code&gt;APPMESH_RESOURCE_CLUSTER&lt;/code&gt; environment variable with your own name.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information about virtual nodes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html\&quot;&gt;Virtual nodes&lt;/a&gt;. You must be using &lt;code&gt;1.15.0&lt;/code&gt; or later of the Envoy image when setting these variables. For more information aboutApp Mesh Envoy variables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html\&quot;&gt;Envoy image&lt;/a&gt; in the App Mesh User Guide.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVirtualNodeTest() throws ApiException {
        String meshName = null;
        CreateVirtualNodeRequest createVirtualNodeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        CreateVirtualNodeOutput response = api.createVirtualNode(meshName, createVirtualNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a virtual router within a service mesh.&lt;/p&gt; &lt;p&gt;Specify a &lt;code&gt;listener&lt;/code&gt; for any inbound traffic that your virtual router receives. Create a virtual router for each protocol and port that you need to route. Virtual routers handle traffic for one or more virtual services within your mesh. After you create your virtual router, create and associate routes for your virtual router that direct incoming requests to different virtual nodes.&lt;/p&gt; &lt;p&gt;For more information about virtual routers, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html\&quot;&gt;Virtual routers&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVirtualRouterTest() throws ApiException {
        String meshName = null;
        CreateVirtualRouterRequest createVirtualRouterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        CreateVirtualRouterOutput response = api.createVirtualRouter(meshName, createVirtualRouterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a virtual service within a service mesh.&lt;/p&gt; &lt;p&gt;A virtual service is an abstraction of a real service that is provided by a virtual node directly or indirectly by means of a virtual router. Dependent services call your virtual service by its &lt;code&gt;virtualServiceName&lt;/code&gt;, and those requests are routed to the virtual node or virtual router that is specified as the provider for the virtual service.&lt;/p&gt; &lt;p&gt;For more information about virtual services, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html\&quot;&gt;Virtual services&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVirtualServiceTest() throws ApiException {
        String meshName = null;
        CreateVirtualServiceRequest createVirtualServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        CreateVirtualServiceOutput response = api.createVirtualService(meshName, createVirtualServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Deletes an existing gateway route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGatewayRouteTest() throws ApiException {
        String gatewayRouteName = null;
        String meshName = null;
        String virtualGatewayName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DeleteGatewayRouteOutput response = api.deleteGatewayRoute(gatewayRouteName, meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an existing service mesh.&lt;/p&gt; &lt;p&gt;You must delete all resources (virtual services, routes, virtual routers, and virtual nodes) in the service mesh before you can delete the mesh itself.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMeshTest() throws ApiException {
        String meshName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteMeshOutput response = api.deleteMesh(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an existing route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRouteTest() throws ApiException {
        String meshName = null;
        String routeName = null;
        String virtualRouterName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DeleteRouteOutput response = api.deleteRoute(meshName, routeName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway routes are associated to it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVirtualGatewayTest() throws ApiException {
        String meshName = null;
        String virtualGatewayName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DeleteVirtualGatewayOutput response = api.deleteVirtualGateway(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an existing virtual node.&lt;/p&gt; &lt;p&gt;You must delete any virtual services that list a virtual node as a service provider before you can delete the virtual node itself.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVirtualNodeTest() throws ApiException {
        String meshName = null;
        String virtualNodeName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DeleteVirtualNodeOutput response = api.deleteVirtualNode(meshName, virtualNodeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an existing virtual router.&lt;/p&gt; &lt;p&gt;You must delete any routes associated with the virtual router before you can delete the router itself.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVirtualRouterTest() throws ApiException {
        String meshName = null;
        String virtualRouterName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DeleteVirtualRouterOutput response = api.deleteVirtualRouter(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Deletes an existing virtual service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVirtualServiceTest() throws ApiException {
        String meshName = null;
        String virtualServiceName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DeleteVirtualServiceOutput response = api.deleteVirtualService(meshName, virtualServiceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Describes an existing gateway route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeGatewayRouteTest() throws ApiException {
        String gatewayRouteName = null;
        String meshName = null;
        String virtualGatewayName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DescribeGatewayRouteOutput response = api.describeGatewayRoute(gatewayRouteName, meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Describes an existing service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeMeshTest() throws ApiException {
        String meshName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DescribeMeshOutput response = api.describeMesh(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Describes an existing route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRouteTest() throws ApiException {
        String meshName = null;
        String routeName = null;
        String virtualRouterName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DescribeRouteOutput response = api.describeRoute(meshName, routeName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Describes an existing virtual gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVirtualGatewayTest() throws ApiException {
        String meshName = null;
        String virtualGatewayName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DescribeVirtualGatewayOutput response = api.describeVirtualGateway(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Describes an existing virtual node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVirtualNodeTest() throws ApiException {
        String meshName = null;
        String virtualNodeName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DescribeVirtualNodeOutput response = api.describeVirtualNode(meshName, virtualNodeName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Describes an existing virtual router.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVirtualRouterTest() throws ApiException {
        String meshName = null;
        String virtualRouterName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DescribeVirtualRouterOutput response = api.describeVirtualRouter(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Describes an existing virtual service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVirtualServiceTest() throws ApiException {
        String meshName = null;
        String virtualServiceName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        DescribeVirtualServiceOutput response = api.describeVirtualService(meshName, virtualServiceName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Returns a list of existing gateway routes that are associated to a virtual gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGatewayRoutesTest() throws ApiException {
        String meshName = null;
        String virtualGatewayName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String meshOwner = null;
        String nextToken = null;
        ListGatewayRoutesOutput response = api.listGatewayRoutes(meshName, virtualGatewayName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of existing service meshes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMeshesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String nextToken = null;
        ListMeshesOutput response = api.listMeshes(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of existing routes in a service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRoutesTest() throws ApiException {
        String meshName = null;
        String virtualRouterName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String meshOwner = null;
        String nextToken = null;
        ListRoutesOutput response = api.listRoutes(meshName, virtualRouterName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken);
        // TODO: test validations
    }

    /**
     * List the tags for an App Mesh resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String nextToken = null;
        ListTagsForResourceOutput response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of existing virtual gateways in a service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVirtualGatewaysTest() throws ApiException {
        String meshName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String meshOwner = null;
        String nextToken = null;
        ListVirtualGatewaysOutput response = api.listVirtualGateways(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of existing virtual nodes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVirtualNodesTest() throws ApiException {
        String meshName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String meshOwner = null;
        String nextToken = null;
        ListVirtualNodesOutput response = api.listVirtualNodes(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of existing virtual routers in a service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVirtualRoutersTest() throws ApiException {
        String meshName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String meshOwner = null;
        String nextToken = null;
        ListVirtualRoutersOutput response = api.listVirtualRouters(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of existing virtual services in a service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVirtualServicesTest() throws ApiException {
        String meshName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String meshOwner = null;
        String nextToken = null;
        ListVirtualServicesOutput response = api.listVirtualServices(meshName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, meshOwner, nextToken);
        // TODO: test validations
    }

    /**
     * Associates the specified tags to a resource with the specified &lt;code&gt;resourceArn&lt;/code&gt;. If existing tags on a resource aren&#39;t specified in the request parameters, they aren&#39;t changed. When a resource is deleted, the tags associated with that resource are also deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes specified tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing gateway route that is associated to a specified virtual gateway in a service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGatewayRouteTest() throws ApiException {
        String gatewayRouteName = null;
        String meshName = null;
        String virtualGatewayName = null;
        UpdateGatewayRouteRequest updateGatewayRouteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        UpdateGatewayRouteOutput response = api.updateGatewayRoute(gatewayRouteName, meshName, virtualGatewayName, updateGatewayRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Updates an existing service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMeshTest() throws ApiException {
        String meshName = null;
        UpdateMeshRequest updateMeshRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMeshOutput response = api.updateMesh(meshName, updateMeshRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing route for a specified service mesh and virtual router.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRouteTest() throws ApiException {
        String meshName = null;
        String routeName = null;
        String virtualRouterName = null;
        UpdateRouteRequest updateRouteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        UpdateRouteOutput response = api.updateRoute(meshName, routeName, virtualRouterName, updateRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Updates an existing virtual gateway in a specified service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVirtualGatewayTest() throws ApiException {
        String meshName = null;
        String virtualGatewayName = null;
        UpdateVirtualGatewayRequest updateVirtualGatewayRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        UpdateVirtualGatewayOutput response = api.updateVirtualGateway(meshName, virtualGatewayName, updateVirtualGatewayRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Updates an existing virtual node in a specified service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVirtualNodeTest() throws ApiException {
        String meshName = null;
        String virtualNodeName = null;
        UpdateVirtualNodeRequest updateVirtualNodeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        UpdateVirtualNodeOutput response = api.updateVirtualNode(meshName, virtualNodeName, updateVirtualNodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Updates an existing virtual router in a specified service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVirtualRouterTest() throws ApiException {
        String meshName = null;
        String virtualRouterName = null;
        UpdateVirtualRouterRequest updateVirtualRouterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        UpdateVirtualRouterOutput response = api.updateVirtualRouter(meshName, virtualRouterName, updateVirtualRouterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

    /**
     * Updates an existing virtual service in a specified service mesh.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVirtualServiceTest() throws ApiException {
        String meshName = null;
        String virtualServiceName = null;
        UpdateVirtualServiceRequest updateVirtualServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String meshOwner = null;
        UpdateVirtualServiceOutput response = api.updateVirtualService(meshName, virtualServiceName, updateVirtualServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, meshOwner);
        // TODO: test validations
    }

}
