openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<p>App Mesh is a service mesh based on the Envoy proxy that makes\
    \ it easy to monitor and control microservices. App Mesh standardizes how your\
    \ microservices communicate, giving you end-to-end visibility and helping to ensure\
    \ high availability for your applications.</p> <p>App Mesh gives you consistent\
    \ visibility and network traffic controls for every microservice in an application.\
    \ You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS,\
    \ Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports\
    \ microservice applications that use service discovery naming for their components.\
    \ For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\"\
    >Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.\
    \ Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For\
    \ more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\"\
    >DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: AWS App Mesh
  version: 2019-01-25
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: appmesh
  x-aws-signingName: appmesh
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appmesh-2019-01-25.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/appmesh/
servers:
- description: The AWS App Mesh multi-region endpoint
  url: "http://appmesh.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AWS App Mesh multi-region endpoint
  url: "https://appmesh.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)
  url: "http://appmesh.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The AWS App Mesh endpoint for China (Beijing) and China (Ningxia)
  url: "https://appmesh.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes:
    get:
      description: Returns a list of existing gateway routes that are associated to
        a virtual gateway.
      operationId: ListGatewayRoutes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The maximum number of results returned by <code>ListGatewayRoutes</code>\
          \ in paginated output. When you use this parameter, <code>ListGatewayRoutes</code>\
          \ returns only <code>limit</code> results in a single page along with a\
          \ <code>nextToken</code> response element. You can see the remaining results\
          \ of the initial request by sending another <code>ListGatewayRoutes</code>\
          \ request with the returned <code>nextToken</code> value. This value can\
          \ be between 1 and 100. If you don't use this parameter, <code>ListGatewayRoutes</code>\
          \ returns up to 100 results and a <code>nextToken</code> value if applicable."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The name of the service mesh to list gateway routes in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The <code>nextToken</code> value returned from a previous paginated
          <code>ListGatewayRoutes</code> request where <code>limit</code> was used
          and the results exceeded the value of that parameter. Pagination continues
          from the end of the previous results that returned the <code>nextToken</code>
          value.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The name of the virtual gateway to list gateway routes in.
        explode: false
        in: path
        name: virtualGatewayName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGatewayRoutesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: "<p>Creates a gateway route.</p> <p>A gateway route is attached\
        \ to a virtual gateway and routes traffic to an existing virtual service.\
        \ If a route matches a request, it can distribute traffic to a target virtual\
        \ service.</p> <p>For more information about gateway routes, see <a href=\"\
        https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html\"\
        >Gateway routes</a>.</p>"
      operationId: CreateGatewayRoute
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to create the gateway route in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then the account that you specify must\
          \ share the mesh with your account before you can create the resource in\
          \ the service mesh. For more information about mesh sharing, see <a href=\"\
          https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working\
          \ with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: "The name of the virtual gateway to associate the gateway route\
          \ with. If the virtual gateway is in a shared mesh, then you must be the\
          \ owner of the virtual gateway resource."
        explode: false
        in: path
        name: virtualGatewayName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGatewayRoute_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGatewayRouteOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes:
    get:
      description: Returns a list of existing service meshes.
      operationId: ListMeshes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The maximum number of results returned by <code>ListMeshes</code>\
          \ in paginated output. When you use this parameter, <code>ListMeshes</code>\
          \ returns only <code>limit</code> results in a single page along with a\
          \ <code>nextToken</code> response element. You can see the remaining results\
          \ of the initial request by sending another <code>ListMeshes</code> request\
          \ with the returned <code>nextToken</code> value. This value can be between\
          \ 1 and 100. If you don't use this parameter, <code>ListMeshes</code> returns\
          \ up to 100 results and a <code>nextToken</code> value if applicable."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: <p>The <code>nextToken</code> value returned from a previous
          paginated <code>ListMeshes</code> request where <code>limit</code> was used
          and the results exceeded the value of that parameter. Pagination continues
          from the end of the previous results that returned the <code>nextToken</code>
          value.</p> <note> <p>This token should be treated as an opaque identifier
          that is used only to retrieve the next items in a list and not for other
          programmatic purposes.</p> </note>
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMeshesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: "<p>Creates a service mesh.</p> <p> A service mesh is a logical\
        \ boundary for network traffic between services that are represented by resources\
        \ within the mesh. After you create your service mesh, you can create virtual\
        \ services, virtual nodes, virtual routers, and routes to distribute traffic\
        \ between the applications in your mesh.</p> <p>For more information about\
        \ service meshes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html\"\
        >Service meshes</a>.</p>"
      operationId: CreateMesh
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMesh_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMeshOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes:
    get:
      description: Returns a list of existing routes in a service mesh.
      operationId: ListRoutes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The maximum number of results returned by <code>ListRoutes</code>\
          \ in paginated output. When you use this parameter, <code>ListRoutes</code>\
          \ returns only <code>limit</code> results in a single page along with a\
          \ <code>nextToken</code> response element. You can see the remaining results\
          \ of the initial request by sending another <code>ListRoutes</code> request\
          \ with the returned <code>nextToken</code> value. This value can be between\
          \ 1 and 100. If you don't use this parameter, <code>ListRoutes</code> returns\
          \ up to 100 results and a <code>nextToken</code> value if applicable."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The name of the service mesh to list routes in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The <code>nextToken</code> value returned from a previous paginated
          <code>ListRoutes</code> request where <code>limit</code> was used and the
          results exceeded the value of that parameter. Pagination continues from
          the end of the previous results that returned the <code>nextToken</code>
          value.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The name of the virtual router to list routes in.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoutesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: "<p>Creates a route that is associated with a virtual router.</p>\
        \ <p> You can route several different protocols and define a retry policy\
        \ for a route. Traffic can be routed to one or more virtual nodes.</p> <p>For\
        \ more information about routes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html\"\
        >Routes</a>.</p>"
      operationId: CreateRoute
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to create the route in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then the account that you specify must\
          \ share the mesh with your account before you can create the resource in\
          \ the service mesh. For more information about mesh sharing, see <a href=\"\
          https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working\
          \ with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: "The name of the virtual router in which to create the route.\
          \ If the virtual router is in a shared mesh, then you must be the owner\
          \ of the virtual router resource."
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoute_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes/{meshName}/virtualGateways:
    get:
      description: Returns a list of existing virtual gateways in a service mesh.
      operationId: ListVirtualGateways
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The maximum number of results returned by <code>ListVirtualGateways</code>\
          \ in paginated output. When you use this parameter, <code>ListVirtualGateways</code>\
          \ returns only <code>limit</code> results in a single page along with a\
          \ <code>nextToken</code> response element. You can see the remaining results\
          \ of the initial request by sending another <code>ListVirtualGateways</code>\
          \ request with the returned <code>nextToken</code> value. This value can\
          \ be between 1 and 100. If you don't use this parameter, <code>ListVirtualGateways</code>\
          \ returns up to 100 results and a <code>nextToken</code> value if applicable."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The name of the service mesh to list virtual gateways in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The <code>nextToken</code> value returned from a previous paginated
          <code>ListVirtualGateways</code> request where <code>limit</code> was used
          and the results exceeded the value of that parameter. Pagination continues
          from the end of the previous results that returned the <code>nextToken</code>
          value.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualGatewaysOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: "<p>Creates a virtual gateway.</p> <p>A virtual gateway allows\
        \ resources outside your mesh to communicate to resources that are inside\
        \ your mesh. The virtual gateway represents an Envoy proxy running in an Amazon\
        \ ECS task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike\
        \ a virtual node, which represents an Envoy running with an application, a\
        \ virtual gateway represents Envoy deployed by itself.</p> <p>For more information\
        \ about virtual gateways, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html\"\
        >Virtual gateways</a>. </p>"
      operationId: CreateVirtualGateway
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to create the virtual gateway in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then the account that you specify must\
          \ share the mesh with your account before you can create the resource in\
          \ the service mesh. For more information about mesh sharing, see <a href=\"\
          https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working\
          \ with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualGateway_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualGatewayOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes/{meshName}/virtualNodes:
    get:
      description: Returns a list of existing virtual nodes.
      operationId: ListVirtualNodes
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The maximum number of results returned by <code>ListVirtualNodes</code>\
          \ in paginated output. When you use this parameter, <code>ListVirtualNodes</code>\
          \ returns only <code>limit</code> results in a single page along with a\
          \ <code>nextToken</code> response element. You can see the remaining results\
          \ of the initial request by sending another <code>ListVirtualNodes</code>\
          \ request with the returned <code>nextToken</code> value. This value can\
          \ be between 1 and 100. If you don't use this parameter, <code>ListVirtualNodes</code>\
          \ returns up to 100 results and a <code>nextToken</code> value if applicable."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The name of the service mesh to list virtual nodes in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The <code>nextToken</code> value returned from a previous paginated
          <code>ListVirtualNodes</code> request where <code>limit</code> was used
          and the results exceeded the value of that parameter. Pagination continues
          from the end of the previous results that returned the <code>nextToken</code>
          value.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualNodesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: "<p>Creates a virtual node within a service mesh.</p> <p> A virtual\
        \ node acts as a logical pointer to a particular task group, such as an Amazon\
        \ ECS service or a Kubernetes deployment. When you create a virtual node,\
        \ you can specify the service discovery information for your task group, and\
        \ whether the proxy running in a task group will communicate with other proxies\
        \ using Transport Layer Security (TLS).</p> <p>You define a <code>listener</code>\
        \ for any inbound traffic that your virtual node expects. Any virtual service\
        \ that your virtual node expects to communicate to is specified as a <code>backend</code>.</p>\
        \ <p>The response metadata for your new virtual node contains the <code>arn</code>\
        \ that is associated with the virtual node. Set this value to the full ARN;\
        \ for example, <code>arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp</code>)\
        \ as the <code>APPMESH_RESOURCE_ARN</code> environment variable for your task\
        \ group's Envoy proxy container in your task definition or pod spec. This\
        \ is then mapped to the <code>node.id</code> and <code>node.cluster</code>\
        \ Envoy parameters.</p> <note> <p>By default, App Mesh uses the name of the\
        \ resource you specified in <code>APPMESH_RESOURCE_ARN</code> when Envoy is\
        \ referring to itself in metrics and traces. You can override this behavior\
        \ by setting the <code>APPMESH_RESOURCE_CLUSTER</code> environment variable\
        \ with your own name.</p> </note> <p>For more information about virtual nodes,\
        \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html\"\
        >Virtual nodes</a>. You must be using <code>1.15.0</code> or later of the\
        \ Envoy image when setting these variables. For more information aboutApp\
        \ Mesh Envoy variables, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html\"\
        >Envoy image</a> in the App Mesh User Guide.</p>"
      operationId: CreateVirtualNode
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to create the virtual node in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then the account that you specify must\
          \ share the mesh with your account before you can create the resource in\
          \ the service mesh. For more information about mesh sharing, see <a href=\"\
          https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working\
          \ with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualNode_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualNodeOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes/{meshName}/virtualRouters:
    get:
      description: Returns a list of existing virtual routers in a service mesh.
      operationId: ListVirtualRouters
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The maximum number of results returned by <code>ListVirtualRouters</code>\
          \ in paginated output. When you use this parameter, <code>ListVirtualRouters</code>\
          \ returns only <code>limit</code> results in a single page along with a\
          \ <code>nextToken</code> response element. You can see the remaining results\
          \ of the initial request by sending another <code>ListVirtualRouters</code>\
          \ request with the returned <code>nextToken</code> value. This value can\
          \ be between 1 and 100. If you don't use this parameter, <code>ListVirtualRouters</code>\
          \ returns up to 100 results and a <code>nextToken</code> value if applicable."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The name of the service mesh to list virtual routers in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The <code>nextToken</code> value returned from a previous paginated
          <code>ListVirtualRouters</code> request where <code>limit</code> was used
          and the results exceeded the value of that parameter. Pagination continues
          from the end of the previous results that returned the <code>nextToken</code>
          value.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualRoutersOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: "<p>Creates a virtual router within a service mesh.</p> <p>Specify\
        \ a <code>listener</code> for any inbound traffic that your virtual router\
        \ receives. Create a virtual router for each protocol and port that you need\
        \ to route. Virtual routers handle traffic for one or more virtual services\
        \ within your mesh. After you create your virtual router, create and associate\
        \ routes for your virtual router that direct incoming requests to different\
        \ virtual nodes.</p> <p>For more information about virtual routers, see <a\
        \ href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html\"\
        >Virtual routers</a>.</p>"
      operationId: CreateVirtualRouter
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to create the virtual router in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then the account that you specify must\
          \ share the mesh with your account before you can create the resource in\
          \ the service mesh. For more information about mesh sharing, see <a href=\"\
          https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working\
          \ with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualRouter_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualRouterOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes/{meshName}/virtualServices:
    get:
      description: Returns a list of existing virtual services in a service mesh.
      operationId: ListVirtualServices
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The maximum number of results returned by <code>ListVirtualServices</code>\
          \ in paginated output. When you use this parameter, <code>ListVirtualServices</code>\
          \ returns only <code>limit</code> results in a single page along with a\
          \ <code>nextToken</code> response element. You can see the remaining results\
          \ of the initial request by sending another <code>ListVirtualServices</code>\
          \ request with the returned <code>nextToken</code> value. This value can\
          \ be between 1 and 100. If you don't use this parameter, <code>ListVirtualServices</code>\
          \ returns up to 100 results and a <code>nextToken</code> value if applicable."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The name of the service mesh to list virtual services in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The <code>nextToken</code> value returned from a previous paginated
          <code>ListVirtualServices</code> request where <code>limit</code> was used
          and the results exceeded the value of that parameter. Pagination continues
          from the end of the previous results that returned the <code>nextToken</code>
          value.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualServicesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: "<p>Creates a virtual service within a service mesh.</p> <p>A virtual\
        \ service is an abstraction of a real service that is provided by a virtual\
        \ node directly or indirectly by means of a virtual router. Dependent services\
        \ call your virtual service by its <code>virtualServiceName</code>, and those\
        \ requests are routed to the virtual node or virtual router that is specified\
        \ as the provider for the virtual service.</p> <p>For more information about\
        \ virtual services, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html\"\
        >Virtual services</a>.</p>"
      operationId: CreateVirtualService
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to create the virtual service in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then the account that you specify must\
          \ share the mesh with your account before you can create the resource in\
          \ the service mesh. For more information about mesh sharing, see <a href=\"\
          https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working\
          \ with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualService_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVirtualServiceOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}:
    delete:
      description: Deletes an existing gateway route.
      operationId: DeleteGatewayRoute
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the gateway route to delete.
        explode: false
        in: path
        name: gatewayRouteName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the service mesh to delete the gateway route from.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual gateway to delete the route from.
        explode: false
        in: path
        name: virtualGatewayName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteGatewayRouteOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    get:
      description: Describes an existing gateway route.
      operationId: DescribeGatewayRoute
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the gateway route to describe.
        explode: false
        in: path
        name: gatewayRouteName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the service mesh that the gateway route resides in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual gateway that the gateway route is associated
          with.
        explode: false
        in: path
        name: virtualGatewayName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeGatewayRouteOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: Updates an existing gateway route that is associated to a specified
        virtual gateway in a service mesh.
      operationId: UpdateGatewayRoute
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the gateway route to update.
        explode: false
        in: path
        name: gatewayRouteName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the service mesh that the gateway route resides in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual gateway that the gateway route is associated
          with.
        explode: false
        in: path
        name: virtualGatewayName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGatewayRoute_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateGatewayRouteOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes/{meshName}:
    delete:
      description: "<p>Deletes an existing service mesh.</p> <p>You must delete all\
        \ resources (virtual services, routes, virtual routers, and virtual nodes)\
        \ in the service mesh before you can delete the mesh itself.</p>"
      operationId: DeleteMesh
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to delete.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMeshOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    get:
      description: Describes an existing service mesh.
      operationId: DescribeMesh
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to describe.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeMeshOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: Updates an existing service mesh.
      operationId: UpdateMesh
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to update.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMesh_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMeshOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}:
    delete:
      description: Deletes an existing route.
      operationId: DeleteRoute
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to delete the route in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the route to delete.
        explode: false
        in: path
        name: routeName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual router to delete the route in.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRouteOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    get:
      description: Describes an existing route.
      operationId: DescribeRoute
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh that the route resides in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the route to describe.
        explode: false
        in: path
        name: routeName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual router that the route is associated with.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeRouteOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: Updates an existing route for a specified service mesh and virtual
        router.
      operationId: UpdateRoute
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh that the route resides in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the route to update.
        explode: false
        in: path
        name: routeName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: The name of the virtual router that the route is associated with.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoute_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}:
    delete:
      description: Deletes an existing virtual gateway. You cannot delete a virtual
        gateway if any gateway routes are associated to it.
      operationId: DeleteVirtualGateway
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to delete the virtual gateway from.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual gateway to delete.
        explode: false
        in: path
        name: virtualGatewayName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualGatewayOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    get:
      description: Describes an existing virtual gateway.
      operationId: DescribeVirtualGateway
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh that the gateway route resides in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual gateway to describe.
        explode: false
        in: path
        name: virtualGatewayName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualGatewayOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: Updates an existing virtual gateway in a specified service mesh.
      operationId: UpdateVirtualGateway
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh that the virtual gateway resides
          in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual gateway to update.
        explode: false
        in: path
        name: virtualGatewayName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVirtualGateway_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualGatewayOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}:
    delete:
      description: <p>Deletes an existing virtual node.</p> <p>You must delete any
        virtual services that list a virtual node as a service provider before you
        can delete the virtual node itself.</p>
      operationId: DeleteVirtualNode
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to delete the virtual node in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual node to delete.
        explode: false
        in: path
        name: virtualNodeName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualNodeOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    get:
      description: Describes an existing virtual node.
      operationId: DescribeVirtualNode
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh that the virtual node resides in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual node to describe.
        explode: false
        in: path
        name: virtualNodeName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualNodeOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: Updates an existing virtual node in a specified service mesh.
      operationId: UpdateVirtualNode
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh that the virtual node resides in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual node to update.
        explode: false
        in: path
        name: virtualNodeName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVirtualNode_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualNodeOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}:
    delete:
      description: <p>Deletes an existing virtual router.</p> <p>You must delete any
        routes associated with the virtual router before you can delete the router
        itself.</p>
      operationId: DeleteVirtualRouter
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to delete the virtual router in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual router to delete.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualRouterOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    get:
      description: Describes an existing virtual router.
      operationId: DescribeVirtualRouter
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh that the virtual router resides
          in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual router to describe.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualRouterOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: Updates an existing virtual router in a specified service mesh.
      operationId: UpdateVirtualRouter
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh that the virtual router resides
          in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual router to update.
        explode: false
        in: path
        name: virtualRouterName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVirtualRouter_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualRouterOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}:
    delete:
      description: Deletes an existing virtual service.
      operationId: DeleteVirtualService
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh to delete the virtual service in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual service to delete.
        explode: false
        in: path
        name: virtualServiceName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVirtualServiceOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
          description: ResourceInUseException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    get:
      description: Describes an existing virtual service.
      operationId: DescribeVirtualService
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh that the virtual service resides
          in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual service to describe.
        explode: false
        in: path
        name: virtualServiceName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVirtualServiceOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
    put:
      description: Updates an existing virtual service in a specified service mesh.
      operationId: UpdateVirtualService
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the service mesh that the virtual service resides
          in.
        explode: false
        in: path
        name: meshName
        required: true
        schema:
          maxLength: 255
          minLength: 1
          type: string
        style: simple
      - description: "The Amazon Web Services IAM account ID of the service mesh owner.\
          \ If the account ID is not your own, then it's the ID of the account that\
          \ shared the mesh with your account. For more information about mesh sharing,\
          \ see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
          >Working with shared meshes</a>."
        explode: true
        in: query
        name: meshOwner
        required: false
        schema:
          maxLength: 12
          minLength: 12
          type: string
        style: form
      - description: The name of the virtual service to update.
        explode: false
        in: path
        name: virtualServiceName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVirtualService_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualServiceOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/tags#resourceArn:
    get:
      description: List the tags for an App Mesh resource.
      operationId: ListTagsForResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "The maximum number of tag results returned by <code>ListTagsForResource</code>\
          \ in paginated output. When this parameter is used, <code>ListTagsForResource</code>\
          \ returns only <code>limit</code> results in a single page along with a\
          \ <code>nextToken</code> response element. You can see the remaining results\
          \ of the initial request by sending another <code>ListTagsForResource</code>\
          \ request with the returned <code>nextToken</code> value. This value can\
          \ be between 1 and 100. If you don't use this parameter, <code>ListTagsForResource</code>\
          \ returns up to 100 results and a <code>nextToken</code> value if applicable."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 50
          minimum: 1
          type: integer
        style: form
      - description: The <code>nextToken</code> value returned from a previous paginated
          <code>ListTagsForResource</code> request where <code>limit</code> was used
          and the results exceeded the value of that parameter. Pagination continues
          from the end of the previous results that returned the <code>nextToken</code>
          value.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The Amazon Resource Name (ARN) that identifies the resource to
          list the tags for.
        explode: true
        in: query
        name: resourceArn
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-accepts:
      - application/json
  /v20190125/tag#resourceArn:
    put:
      description: "Associates the specified tags to a resource with the specified\
        \ <code>resourceArn</code>. If existing tags on a resource aren't specified\
        \ in the request parameters, they aren't changed. When a resource is deleted,\
        \ the tags associated with that resource are also deleted."
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the resource to add tags to.
        explode: true
        in: query
        name: resourceArn
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v20190125/untag#resourceArn:
    put:
      description: Deletes specified tags from a resource.
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Resource Name (ARN) of the resource to delete tags
          from.
        explode: true
        in: query
        name: resourceArn
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResource_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
          description: TooManyRequestsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenException'
          description: ForbiddenException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorException'
          description: InternalServerErrorException
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    CreateGatewayRouteOutput:
      example:
        gatewayRoute:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          gatewayRouteName: ""
          virtualGatewayName: ""
          meshName: ""
          spec:
            grpcRoute:
              match:
                hostname:
                  exact: ""
                  suffix: ""
                metadata: ""
                port: ""
                serviceName: ""
              action:
                rewrite:
                  hostname:
                    defaultTargetHostname: ""
                target:
                  port: ""
                  virtualService:
                    virtualServiceName: ""
            http2Route:
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                hostname:
                  exact: ""
                  suffix: ""
                method: ""
                queryParameters: ""
                port: ""
                prefix: ""
              action:
                rewrite:
                  path:
                    exact: ""
                  hostname:
                    defaultTargetHostname: ""
                  prefix:
                    defaultPrefix: ""
                    value: ""
                target:
                  port: ""
                  virtualService:
                    virtualServiceName: ""
            priority: ""
            httpRoute:
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                hostname:
                  exact: ""
                  suffix: ""
                method: ""
                queryParameters: ""
                port: ""
                prefix: ""
              action:
                rewrite:
                  path:
                    exact: ""
                  hostname:
                    defaultTargetHostname: ""
                  prefix:
                    defaultPrefix: ""
                    value: ""
                target:
                  port: ""
                  virtualService:
                    virtualServiceName: ""
          status:
            status: ""
      properties:
        gatewayRoute:
          $ref: '#/components/schemas/CreateGatewayRouteOutput_gatewayRoute'
      required:
      - gatewayRoute
      type: object
    GrpcGatewayRoute:
      description: An object that represents a gRPC gateway route.
      properties:
        action:
          $ref: '#/components/schemas/GrpcGatewayRoute_action'
        match:
          $ref: '#/components/schemas/GrpcGatewayRoute_match'
      required:
      - action
      - match
      type: object
    HttpGatewayRoute:
      description: An object that represents an HTTP gateway route.
      properties:
        action:
          $ref: '#/components/schemas/HttpGatewayRoute_action'
        match:
          $ref: '#/components/schemas/HttpGatewayRoute_match'
      required:
      - action
      - match
      type: object
    GatewayRoutePriority:
      maximum: 1000
      minimum: 0
      type: integer
    TagRef:
      description: "Optional metadata that you apply to a resource to assist with\
        \ categorization and organization. Each tag consists of a key and an optional\
        \ value, both of which you define. Tag keys can have a maximum character length\
        \ of 128 characters, and tag values can have a maximum length of 256 characters."
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          - description: One part of a key-value pair that make up a tag. A <code>key</code>
              is a general label that acts like a category for more specific tag values.
        value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          - description: The optional part of a key-value pair that make up a tag.
              A <code>value</code> acts as a descriptor within a tag category (key).
      required:
      - key
      - value
      type: object
    NotFoundException: {}
    BadRequestException: {}
    ConflictException: {}
    TooManyRequestsException: {}
    ForbiddenException: {}
    ServiceUnavailableException: {}
    InternalServerErrorException: {}
    LimitExceededException: {}
    CreateMeshOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        mesh:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          spec:
            egressFilter:
              type: ""
            serviceDiscovery:
              ipPreference: ""
          status:
            status: ""
      properties:
        mesh:
          $ref: '#/components/schemas/CreateMeshOutput_mesh'
      required:
      - mesh
      type: object
    EgressFilter:
      description: An object that represents the egress filter rules for a service
        mesh.
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/EgressFilterType'
          - description: "The egress filter type. By default, the type is <code>DROP_ALL</code>,\
              \ which allows egress only from virtual nodes to other defined resources\
              \ in the service mesh (and any traffic to <code>*.amazonaws.com</code>\
              \ for Amazon Web Services API calls). You can set the egress filter\
              \ type to <code>ALLOW_ALL</code> to allow egress to any endpoint inside\
              \ or outside of the service mesh."
      required:
      - type
      type: object
    MeshServiceDiscovery:
      description: An object that represents the service discovery information for
        a service mesh.
      example:
        ipPreference: ""
      properties:
        ipPreference:
          allOf:
          - $ref: '#/components/schemas/IpPreference'
          - description: The IP version to use to control traffic within the mesh.
      type: object
    CreateRouteOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        route:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            grpcRoute:
              retryPolicy:
                grpcRetryEvents: ""
                httpRetryEvents: ""
                maxRetries: ""
                tcpRetryEvents: ""
                perRetryTimeout:
                  unit: ""
                  value: ""
              match:
                metadata: ""
                port: ""
                methodName: ""
                serviceName: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
                perRequest:
                  unit: ""
                  value: ""
            http2Route:
              retryPolicy:
                httpRetryEvents: ""
                maxRetries: ""
                tcpRetryEvents: ""
                perRetryTimeout:
                  unit: ""
                  value: ""
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                method: ""
                queryParameters: ""
                scheme: ""
                port: ""
                prefix: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
                perRequest:
                  unit: ""
                  value: ""
            priority: ""
            httpRoute:
              retryPolicy:
                httpRetryEvents: ""
                maxRetries: ""
                tcpRetryEvents: ""
                perRetryTimeout:
                  unit: ""
                  value: ""
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                method: ""
                queryParameters: ""
                scheme: ""
                port: ""
                prefix: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
                perRequest:
                  unit: ""
                  value: ""
            tcpRoute:
              match:
                port: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
          routeName: ""
          status:
            status: ""
      properties:
        route:
          $ref: '#/components/schemas/CreateRouteOutput_route'
      required:
      - route
      type: object
    GrpcRoute:
      description: An object that represents a gRPC route type.
      properties:
        action:
          $ref: '#/components/schemas/GrpcRoute_action'
        match:
          $ref: '#/components/schemas/GrpcRoute_match'
        retryPolicy:
          $ref: '#/components/schemas/GrpcRoute_retryPolicy'
        timeout:
          $ref: '#/components/schemas/GrpcRoute_timeout'
      required:
      - action
      - match
      type: object
    HttpRoute:
      description: An object that represents an HTTP or HTTP/2 route type.
      properties:
        action:
          $ref: '#/components/schemas/HttpRoute_action'
        match:
          $ref: '#/components/schemas/HttpRoute_match'
        retryPolicy:
          $ref: '#/components/schemas/HttpRoute_retryPolicy'
        timeout:
          $ref: '#/components/schemas/HttpRoute_timeout'
      required:
      - action
      - match
      type: object
    RoutePriority:
      maximum: 1000
      minimum: 0
      type: integer
    TcpRoute:
      description: An object that represents a TCP route type.
      properties:
        action:
          $ref: '#/components/schemas/TcpRoute_action'
        match:
          $ref: '#/components/schemas/TcpRoute_match'
        timeout:
          $ref: '#/components/schemas/TcpRoute_timeout'
      required:
      - action
      type: object
    CreateVirtualGatewayOutput:
      example:
        virtualGateway:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          virtualGatewayName: ""
          meshName: ""
          spec:
            listeners: ""
            logging:
              accessLog:
                file:
                  path: ""
                  format:
                    json: ""
                    text: ""
            backendDefaults:
              clientPolicy:
                tls:
                  certificate:
                    file:
                      privateKey: ""
                      certificateChain: ""
                    sds:
                      secretName: ""
                  enforce: ""
                  ports: ""
                  validation:
                    trust:
                      file:
                        certificateChain: ""
                      sds:
                        secretName: ""
                      acm:
                        certificateAuthorityArns: ""
                    subjectAlternativeNames:
                      match:
                        exact: ""
          status:
            status: ""
      properties:
        virtualGateway:
          $ref: '#/components/schemas/CreateVirtualGatewayOutput_virtualGateway'
      required:
      - virtualGateway
      type: object
    VirtualGatewayBackendDefaults:
      description: An object that represents the default properties for a backend.
      properties:
        clientPolicy:
          $ref: '#/components/schemas/VirtualGatewayBackendDefaults_clientPolicy'
      type: object
    VirtualGatewayListeners:
      items:
        $ref: '#/components/schemas/VirtualGatewayListener'
      type: array
    VirtualGatewayLogging:
      description: An object that represents logging information.
      example:
        accessLog:
          file:
            path: ""
            format:
              json: ""
              text: ""
      properties:
        accessLog:
          $ref: '#/components/schemas/VirtualGatewayLogging_accessLog'
      type: object
    CreateVirtualNodeOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualNode:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          virtualNodeName: ""
          spec:
            listeners: ""
            logging:
              accessLog:
                file:
                  path: ""
                  format:
                    json: ""
                    text: ""
            serviceDiscovery:
              awsCloudMap:
                attributes: ""
                ipPreference: ""
                serviceName: ""
                namespaceName: ""
              dns:
                hostname: ""
                responseType: ""
                ipPreference: ""
            backends: ""
            backendDefaults:
              clientPolicy:
                tls:
                  certificate:
                    file:
                      privateKey: ""
                      certificateChain: ""
                    sds:
                      secretName: ""
                  enforce: ""
                  ports: ""
                  validation:
                    trust:
                      file:
                        certificateChain: ""
                      sds:
                        secretName: ""
                      acm:
                        certificateAuthorityArns: ""
                    subjectAlternativeNames:
                      match:
                        exact: ""
          status:
            status: ""
      properties:
        virtualNode:
          $ref: '#/components/schemas/CreateVirtualNodeOutput_virtualNode'
      required:
      - virtualNode
      type: object
    BackendDefaults:
      description: An object that represents the default properties for a backend.
      properties:
        clientPolicy:
          $ref: '#/components/schemas/BackendDefaults_clientPolicy'
      type: object
    Backends:
      items:
        $ref: '#/components/schemas/Backend'
      type: array
    Listeners:
      items:
        $ref: '#/components/schemas/Listener'
      type: array
    Logging:
      description: An object that represents the logging information for a virtual
        node.
      properties:
        accessLog:
          $ref: '#/components/schemas/Logging_accessLog'
      type: object
    ServiceDiscovery:
      description: An object that represents the service discovery information for
        a virtual node.
      properties:
        awsCloudMap:
          $ref: '#/components/schemas/ServiceDiscovery_awsCloudMap'
        dns:
          $ref: '#/components/schemas/ServiceDiscovery_dns'
      type: object
    CreateVirtualRouterOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualRouter:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            listeners: ""
          status:
            status: ""
      properties:
        virtualRouter:
          $ref: '#/components/schemas/CreateVirtualRouterOutput_virtualRouter'
      required:
      - virtualRouter
      type: object
    VirtualRouterListeners:
      items:
        $ref: '#/components/schemas/VirtualRouterListener'
      type: array
    CreateVirtualServiceOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualService:
          virtualServiceName: ""
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          spec:
            provider:
              virtualNode:
                virtualNodeName: ""
              virtualRouter:
                virtualRouterName: ""
          status:
            status: ""
      properties:
        virtualService:
          $ref: '#/components/schemas/CreateVirtualServiceOutput_virtualService'
      required:
      - virtualService
      type: object
    VirtualServiceProvider:
      description: An object that represents the provider for a virtual service.
      properties:
        virtualNode:
          $ref: '#/components/schemas/VirtualServiceProvider_virtualNode'
        virtualRouter:
          $ref: '#/components/schemas/VirtualServiceProvider_virtualRouter'
      type: object
    DeleteGatewayRouteOutput:
      example:
        gatewayRoute:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          gatewayRouteName: ""
          virtualGatewayName: ""
          meshName: ""
          spec:
            grpcRoute:
              match:
                hostname:
                  exact: ""
                  suffix: ""
                metadata: ""
                port: ""
                serviceName: ""
              action:
                rewrite:
                  hostname:
                    defaultTargetHostname: ""
                target:
                  port: ""
                  virtualService:
                    virtualServiceName: ""
            http2Route:
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                hostname:
                  exact: ""
                  suffix: ""
                method: ""
                queryParameters: ""
                port: ""
                prefix: ""
              action:
                rewrite:
                  path:
                    exact: ""
                  hostname:
                    defaultTargetHostname: ""
                  prefix:
                    defaultPrefix: ""
                    value: ""
                target:
                  port: ""
                  virtualService:
                    virtualServiceName: ""
            priority: ""
            httpRoute:
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                hostname:
                  exact: ""
                  suffix: ""
                method: ""
                queryParameters: ""
                port: ""
                prefix: ""
              action:
                rewrite:
                  path:
                    exact: ""
                  hostname:
                    defaultTargetHostname: ""
                  prefix:
                    defaultPrefix: ""
                    value: ""
                target:
                  port: ""
                  virtualService:
                    virtualServiceName: ""
          status:
            status: ""
      properties:
        gatewayRoute:
          $ref: '#/components/schemas/DeleteGatewayRouteOutput_gatewayRoute'
      required:
      - gatewayRoute
      type: object
    ResourceInUseException: {}
    DeleteMeshOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        mesh:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          spec:
            egressFilter:
              type: ""
            serviceDiscovery:
              ipPreference: ""
          status:
            status: ""
      properties:
        mesh:
          $ref: '#/components/schemas/DeleteMeshOutput_mesh'
      required:
      - mesh
      type: object
    DeleteRouteOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        route:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            grpcRoute:
              retryPolicy:
                grpcRetryEvents: ""
                httpRetryEvents: ""
                maxRetries: ""
                tcpRetryEvents: ""
                perRetryTimeout:
                  unit: ""
                  value: ""
              match:
                metadata: ""
                port: ""
                methodName: ""
                serviceName: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
                perRequest:
                  unit: ""
                  value: ""
            http2Route:
              retryPolicy:
                httpRetryEvents: ""
                maxRetries: ""
                tcpRetryEvents: ""
                perRetryTimeout:
                  unit: ""
                  value: ""
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                method: ""
                queryParameters: ""
                scheme: ""
                port: ""
                prefix: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
                perRequest:
                  unit: ""
                  value: ""
            priority: ""
            httpRoute:
              retryPolicy:
                httpRetryEvents: ""
                maxRetries: ""
                tcpRetryEvents: ""
                perRetryTimeout:
                  unit: ""
                  value: ""
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                method: ""
                queryParameters: ""
                scheme: ""
                port: ""
                prefix: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
                perRequest:
                  unit: ""
                  value: ""
            tcpRoute:
              match:
                port: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
          routeName: ""
          status:
            status: ""
      properties:
        route:
          $ref: '#/components/schemas/DeleteRouteOutput_route'
      required:
      - route
      type: object
    DeleteVirtualGatewayOutput:
      example:
        virtualGateway:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          virtualGatewayName: ""
          meshName: ""
          spec:
            listeners: ""
            logging:
              accessLog:
                file:
                  path: ""
                  format:
                    json: ""
                    text: ""
            backendDefaults:
              clientPolicy:
                tls:
                  certificate:
                    file:
                      privateKey: ""
                      certificateChain: ""
                    sds:
                      secretName: ""
                  enforce: ""
                  ports: ""
                  validation:
                    trust:
                      file:
                        certificateChain: ""
                      sds:
                        secretName: ""
                      acm:
                        certificateAuthorityArns: ""
                    subjectAlternativeNames:
                      match:
                        exact: ""
          status:
            status: ""
      properties:
        virtualGateway:
          $ref: '#/components/schemas/DeleteVirtualGatewayOutput_virtualGateway'
      required:
      - virtualGateway
      type: object
    DeleteVirtualNodeOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualNode:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          virtualNodeName: ""
          spec:
            listeners: ""
            logging:
              accessLog:
                file:
                  path: ""
                  format:
                    json: ""
                    text: ""
            serviceDiscovery:
              awsCloudMap:
                attributes: ""
                ipPreference: ""
                serviceName: ""
                namespaceName: ""
              dns:
                hostname: ""
                responseType: ""
                ipPreference: ""
            backends: ""
            backendDefaults:
              clientPolicy:
                tls:
                  certificate:
                    file:
                      privateKey: ""
                      certificateChain: ""
                    sds:
                      secretName: ""
                  enforce: ""
                  ports: ""
                  validation:
                    trust:
                      file:
                        certificateChain: ""
                      sds:
                        secretName: ""
                      acm:
                        certificateAuthorityArns: ""
                    subjectAlternativeNames:
                      match:
                        exact: ""
          status:
            status: ""
      properties:
        virtualNode:
          $ref: '#/components/schemas/DeleteVirtualNodeOutput_virtualNode'
      required:
      - virtualNode
      type: object
    DeleteVirtualRouterOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualRouter:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            listeners: ""
          status:
            status: ""
      properties:
        virtualRouter:
          $ref: '#/components/schemas/DeleteVirtualRouterOutput_virtualRouter'
      required:
      - virtualRouter
      type: object
    DeleteVirtualServiceOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualService:
          virtualServiceName: ""
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          spec:
            provider:
              virtualNode:
                virtualNodeName: ""
              virtualRouter:
                virtualRouterName: ""
          status:
            status: ""
      properties:
        virtualService:
          $ref: '#/components/schemas/DeleteVirtualServiceOutput_virtualService'
      required:
      - virtualService
      type: object
    DescribeGatewayRouteOutput:
      example:
        gatewayRoute:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          gatewayRouteName: ""
          virtualGatewayName: ""
          meshName: ""
          spec:
            grpcRoute:
              match:
                hostname:
                  exact: ""
                  suffix: ""
                metadata: ""
                port: ""
                serviceName: ""
              action:
                rewrite:
                  hostname:
                    defaultTargetHostname: ""
                target:
                  port: ""
                  virtualService:
                    virtualServiceName: ""
            http2Route:
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                hostname:
                  exact: ""
                  suffix: ""
                method: ""
                queryParameters: ""
                port: ""
                prefix: ""
              action:
                rewrite:
                  path:
                    exact: ""
                  hostname:
                    defaultTargetHostname: ""
                  prefix:
                    defaultPrefix: ""
                    value: ""
                target:
                  port: ""
                  virtualService:
                    virtualServiceName: ""
            priority: ""
            httpRoute:
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                hostname:
                  exact: ""
                  suffix: ""
                method: ""
                queryParameters: ""
                port: ""
                prefix: ""
              action:
                rewrite:
                  path:
                    exact: ""
                  hostname:
                    defaultTargetHostname: ""
                  prefix:
                    defaultPrefix: ""
                    value: ""
                target:
                  port: ""
                  virtualService:
                    virtualServiceName: ""
          status:
            status: ""
      properties:
        gatewayRoute:
          $ref: '#/components/schemas/DescribeGatewayRouteOutput_gatewayRoute'
      required:
      - gatewayRoute
      type: object
    DescribeMeshOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        mesh:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          spec:
            egressFilter:
              type: ""
            serviceDiscovery:
              ipPreference: ""
          status:
            status: ""
      properties:
        mesh:
          $ref: '#/components/schemas/DescribeMeshOutput_mesh'
      required:
      - mesh
      type: object
    DescribeRouteOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        route:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            grpcRoute:
              retryPolicy:
                grpcRetryEvents: ""
                httpRetryEvents: ""
                maxRetries: ""
                tcpRetryEvents: ""
                perRetryTimeout:
                  unit: ""
                  value: ""
              match:
                metadata: ""
                port: ""
                methodName: ""
                serviceName: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
                perRequest:
                  unit: ""
                  value: ""
            http2Route:
              retryPolicy:
                httpRetryEvents: ""
                maxRetries: ""
                tcpRetryEvents: ""
                perRetryTimeout:
                  unit: ""
                  value: ""
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                method: ""
                queryParameters: ""
                scheme: ""
                port: ""
                prefix: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
                perRequest:
                  unit: ""
                  value: ""
            priority: ""
            httpRoute:
              retryPolicy:
                httpRetryEvents: ""
                maxRetries: ""
                tcpRetryEvents: ""
                perRetryTimeout:
                  unit: ""
                  value: ""
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                method: ""
                queryParameters: ""
                scheme: ""
                port: ""
                prefix: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
                perRequest:
                  unit: ""
                  value: ""
            tcpRoute:
              match:
                port: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
          routeName: ""
          status:
            status: ""
      properties:
        route:
          $ref: '#/components/schemas/DescribeRouteOutput_route'
      required:
      - route
      type: object
    DescribeVirtualGatewayOutput:
      example:
        virtualGateway:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          virtualGatewayName: ""
          meshName: ""
          spec:
            listeners: ""
            logging:
              accessLog:
                file:
                  path: ""
                  format:
                    json: ""
                    text: ""
            backendDefaults:
              clientPolicy:
                tls:
                  certificate:
                    file:
                      privateKey: ""
                      certificateChain: ""
                    sds:
                      secretName: ""
                  enforce: ""
                  ports: ""
                  validation:
                    trust:
                      file:
                        certificateChain: ""
                      sds:
                        secretName: ""
                      acm:
                        certificateAuthorityArns: ""
                    subjectAlternativeNames:
                      match:
                        exact: ""
          status:
            status: ""
      properties:
        virtualGateway:
          $ref: '#/components/schemas/DescribeVirtualGatewayOutput_virtualGateway'
      required:
      - virtualGateway
      type: object
    DescribeVirtualNodeOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualNode:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          virtualNodeName: ""
          spec:
            listeners: ""
            logging:
              accessLog:
                file:
                  path: ""
                  format:
                    json: ""
                    text: ""
            serviceDiscovery:
              awsCloudMap:
                attributes: ""
                ipPreference: ""
                serviceName: ""
                namespaceName: ""
              dns:
                hostname: ""
                responseType: ""
                ipPreference: ""
            backends: ""
            backendDefaults:
              clientPolicy:
                tls:
                  certificate:
                    file:
                      privateKey: ""
                      certificateChain: ""
                    sds:
                      secretName: ""
                  enforce: ""
                  ports: ""
                  validation:
                    trust:
                      file:
                        certificateChain: ""
                      sds:
                        secretName: ""
                      acm:
                        certificateAuthorityArns: ""
                    subjectAlternativeNames:
                      match:
                        exact: ""
          status:
            status: ""
      properties:
        virtualNode:
          $ref: '#/components/schemas/DescribeVirtualNodeOutput_virtualNode'
      required:
      - virtualNode
      type: object
    DescribeVirtualRouterOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualRouter:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            listeners: ""
          status:
            status: ""
      properties:
        virtualRouter:
          $ref: '#/components/schemas/DescribeVirtualRouterOutput_virtualRouter'
      required:
      - virtualRouter
      type: object
    DescribeVirtualServiceOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualService:
          virtualServiceName: ""
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          spec:
            provider:
              virtualNode:
                virtualNodeName: ""
              virtualRouter:
                virtualRouterName: ""
          status:
            status: ""
      properties:
        virtualService:
          $ref: '#/components/schemas/DescribeVirtualServiceOutput_virtualService'
      required:
      - virtualService
      type: object
    ListGatewayRoutesOutput:
      example:
        nextToken: ""
        gatewayRoutes: ""
      properties:
        gatewayRoutes:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteList'
          - description: The list of existing gateway routes for the specified service
              mesh and virtual gateway.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>ListGatewayRoutes</code> request. When the results of a <code>ListGatewayRoutes</code>\
              \ request exceed <code>limit</code>, you can use this value to retrieve\
              \ the next page of results. This value is <code>null</code> when there\
              \ are no more results to return."
      required:
      - gatewayRoutes
      type: object
    ListMeshesOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        nextToken: ""
        meshes: ""
      properties:
        meshes:
          allOf:
          - $ref: '#/components/schemas/MeshList'
          - description: The list of existing service meshes.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>ListMeshes</code> request. When the results of a <code>ListMeshes</code>\
              \ request exceed <code>limit</code>, you can use this value to retrieve\
              \ the next page of results. This value is <code>null</code> when there\
              \ are no more results to return."
      required:
      - meshes
      type: object
    ListRoutesOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        routes: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>ListRoutes</code> request. When the results of a <code>ListRoutes</code>\
              \ request exceed <code>limit</code>, you can use this value to retrieve\
              \ the next page of results. This value is <code>null</code> when there\
              \ are no more results to return."
        routes:
          allOf:
          - $ref: '#/components/schemas/RouteList'
          - description: The list of existing routes for the specified service mesh
              and virtual router.
      required:
      - routes
      type: object
    ListTagsForResourceOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        nextToken: ""
        tags: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>ListTagsForResource</code> request. When the results of a <code>ListTagsForResource</code>\
              \ request exceed <code>limit</code>, you can use this value to retrieve\
              \ the next page of results. This value is <code>null</code> when there\
              \ are no more results to return."
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: The tags for the resource.
      required:
      - tags
      type: object
    ListVirtualGatewaysOutput:
      example:
        nextToken: ""
        virtualGateways: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>ListVirtualGateways</code> request. When the results of a <code>ListVirtualGateways</code>\
              \ request exceed <code>limit</code>, you can use this value to retrieve\
              \ the next page of results. This value is <code>null</code> when there\
              \ are no more results to return."
        virtualGateways:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayList'
          - description: The list of existing virtual gateways for the specified service
              mesh.
      required:
      - virtualGateways
      type: object
    ListVirtualNodesOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualNodes: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>ListVirtualNodes</code> request. When the results of a <code>ListVirtualNodes</code>\
              \ request exceed <code>limit</code>, you can use this value to retrieve\
              \ the next page of results. This value is <code>null</code> when there\
              \ are no more results to return."
        virtualNodes:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeList'
          - description: The list of existing virtual nodes for the specified service
              mesh.
      required:
      - virtualNodes
      type: object
    ListVirtualRoutersOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        nextToken: ""
        virtualRouters: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>ListVirtualRouters</code> request. When the results of a <code>ListVirtualRouters</code>\
              \ request exceed <code>limit</code>, you can use this value to retrieve\
              \ the next page of results. This value is <code>null</code> when there\
              \ are no more results to return."
        virtualRouters:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterList'
          - description: The list of existing virtual routers for the specified service
              mesh.
      required:
      - virtualRouters
      type: object
    ListVirtualServicesOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualServices: ""
        nextToken: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>ListVirtualServices</code> request. When the results of a <code>ListVirtualServices</code>\
              \ request exceed <code>limit</code>, you can use this value to retrieve\
              \ the next page of results. This value is <code>null</code> when there\
              \ are no more results to return."
        virtualServices:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceList'
          - description: The list of existing virtual services for the specified service
              mesh.
      required:
      - virtualServices
      type: object
    TagResourceOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      type: object
    TooManyTagsException: {}
    UntagResourceOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      type: object
    TagKey:
      maxLength: 128
      minLength: 1
      type: string
    UpdateGatewayRouteOutput:
      example:
        gatewayRoute:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          gatewayRouteName: ""
          virtualGatewayName: ""
          meshName: ""
          spec:
            grpcRoute:
              match:
                hostname:
                  exact: ""
                  suffix: ""
                metadata: ""
                port: ""
                serviceName: ""
              action:
                rewrite:
                  hostname:
                    defaultTargetHostname: ""
                target:
                  port: ""
                  virtualService:
                    virtualServiceName: ""
            http2Route:
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                hostname:
                  exact: ""
                  suffix: ""
                method: ""
                queryParameters: ""
                port: ""
                prefix: ""
              action:
                rewrite:
                  path:
                    exact: ""
                  hostname:
                    defaultTargetHostname: ""
                  prefix:
                    defaultPrefix: ""
                    value: ""
                target:
                  port: ""
                  virtualService:
                    virtualServiceName: ""
            priority: ""
            httpRoute:
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                hostname:
                  exact: ""
                  suffix: ""
                method: ""
                queryParameters: ""
                port: ""
                prefix: ""
              action:
                rewrite:
                  path:
                    exact: ""
                  hostname:
                    defaultTargetHostname: ""
                  prefix:
                    defaultPrefix: ""
                    value: ""
                target:
                  port: ""
                  virtualService:
                    virtualServiceName: ""
          status:
            status: ""
      properties:
        gatewayRoute:
          $ref: '#/components/schemas/UpdateGatewayRouteOutput_gatewayRoute'
      required:
      - gatewayRoute
      type: object
    UpdateMeshOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        mesh:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          spec:
            egressFilter:
              type: ""
            serviceDiscovery:
              ipPreference: ""
          status:
            status: ""
      properties:
        mesh:
          $ref: '#/components/schemas/MeshData'
      required:
      - mesh
      type: object
    UpdateRouteOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        route:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            grpcRoute:
              retryPolicy:
                grpcRetryEvents: ""
                httpRetryEvents: ""
                maxRetries: ""
                tcpRetryEvents: ""
                perRetryTimeout:
                  unit: ""
                  value: ""
              match:
                metadata: ""
                port: ""
                methodName: ""
                serviceName: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
                perRequest:
                  unit: ""
                  value: ""
            http2Route:
              retryPolicy:
                httpRetryEvents: ""
                maxRetries: ""
                tcpRetryEvents: ""
                perRetryTimeout:
                  unit: ""
                  value: ""
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                method: ""
                queryParameters: ""
                scheme: ""
                port: ""
                prefix: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
                perRequest:
                  unit: ""
                  value: ""
            priority: ""
            httpRoute:
              retryPolicy:
                httpRetryEvents: ""
                maxRetries: ""
                tcpRetryEvents: ""
                perRetryTimeout:
                  unit: ""
                  value: ""
              match:
                headers: ""
                path:
                  regex: ""
                  exact: ""
                method: ""
                queryParameters: ""
                scheme: ""
                port: ""
                prefix: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
                perRequest:
                  unit: ""
                  value: ""
            tcpRoute:
              match:
                port: ""
              action:
                weightedTargets: ""
              timeout:
                idle:
                  unit: ""
                  value: ""
          routeName: ""
          status:
            status: ""
      properties:
        route:
          $ref: '#/components/schemas/UpdateRouteOutput_route'
      required:
      - route
      type: object
    UpdateVirtualGatewayOutput:
      example:
        virtualGateway:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          virtualGatewayName: ""
          meshName: ""
          spec:
            listeners: ""
            logging:
              accessLog:
                file:
                  path: ""
                  format:
                    json: ""
                    text: ""
            backendDefaults:
              clientPolicy:
                tls:
                  certificate:
                    file:
                      privateKey: ""
                      certificateChain: ""
                    sds:
                      secretName: ""
                  enforce: ""
                  ports: ""
                  validation:
                    trust:
                      file:
                        certificateChain: ""
                      sds:
                        secretName: ""
                      acm:
                        certificateAuthorityArns: ""
                    subjectAlternativeNames:
                      match:
                        exact: ""
          status:
            status: ""
      properties:
        virtualGateway:
          $ref: '#/components/schemas/UpdateVirtualGatewayOutput_virtualGateway'
      required:
      - virtualGateway
      type: object
    UpdateVirtualNodeOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualNode:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          virtualNodeName: ""
          spec:
            listeners: ""
            logging:
              accessLog:
                file:
                  path: ""
                  format:
                    json: ""
                    text: ""
            serviceDiscovery:
              awsCloudMap:
                attributes: ""
                ipPreference: ""
                serviceName: ""
                namespaceName: ""
              dns:
                hostname: ""
                responseType: ""
                ipPreference: ""
            backends: ""
            backendDefaults:
              clientPolicy:
                tls:
                  certificate:
                    file:
                      privateKey: ""
                      certificateChain: ""
                    sds:
                      secretName: ""
                  enforce: ""
                  ports: ""
                  validation:
                    trust:
                      file:
                        certificateChain: ""
                      sds:
                        secretName: ""
                      acm:
                        certificateAuthorityArns: ""
                    subjectAlternativeNames:
                      match:
                        exact: ""
          status:
            status: ""
      properties:
        virtualNode:
          $ref: '#/components/schemas/UpdateVirtualNodeOutput_virtualNode'
      required:
      - virtualNode
      type: object
    UpdateVirtualRouterOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualRouter:
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          virtualRouterName: ""
          spec:
            listeners: ""
          status:
            status: ""
      properties:
        virtualRouter:
          $ref: '#/components/schemas/UpdateVirtualRouterOutput_virtualRouter'
      required:
      - virtualRouter
      type: object
    UpdateVirtualServiceOutput:
      description: <zonbook></zonbook><xhtml></xhtml>
      example:
        virtualService:
          virtualServiceName: ""
          metadata:
            createdAt: ""
            uid: ""
            lastUpdatedAt: ""
            resourceOwner: ""
            meshOwner: ""
            arn: ""
            version: ""
          meshName: ""
          spec:
            provider:
              virtualNode:
                virtualNodeName: ""
              virtualRouter:
                virtualRouterName: ""
          status:
            status: ""
      properties:
        virtualService:
          $ref: '#/components/schemas/UpdateVirtualServiceOutput_virtualService'
      required:
      - virtualService
      type: object
    FileAccessLog:
      description: An object that represents an access log file.
      properties:
        format:
          $ref: '#/components/schemas/FileAccessLog_format'
        path:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          - description: "<p>The file path to write access logs to. You can use <code>/dev/stdout</code>\
              \ to send access logs to standard out and configure your Envoy container\
              \ to use a log driver, such as <code>awslogs</code>, to export the access\
              \ logs to a log storage service such as Amazon CloudWatch Logs. You\
              \ can also specify a path in the Envoy container's file system to write\
              \ the files to disk.</p> <pre><code> &lt;note&gt; &lt;p&gt;The Envoy\
              \ process must have write permissions to the path that you specify here.\
              \ Otherwise, Envoy fails to bootstrap properly.&lt;/p&gt; &lt;/note&gt;\
              \ </code></pre>"
      required:
      - path
      type: object
    AccessLog:
      description: An object that represents the access logging information for a
        virtual node.
      properties:
        file:
          $ref: '#/components/schemas/AccessLog_file'
      type: object
    AccountId:
      maxLength: 12
      minLength: 12
      type: string
    Arn:
      type: string
    AwsCloudMapInstanceAttributeKey:
      maxLength: 255
      minLength: 1
      pattern: "^[a-zA-Z0-9!-~]+$"
      type: string
    AwsCloudMapInstanceAttributeValue:
      maxLength: 1024
      minLength: 1
      pattern: "^([a-zA-Z0-9!-~][  a-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$"
      type: string
    AwsCloudMapInstanceAttribute:
      description: <p>An object that represents the Cloud Map attribute information
        for your virtual node.</p> <note> <p>Cloud Map is not available in the eu-south-1
        Region.</p> </note>
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/AwsCloudMapInstanceAttributeKey'
          - description: The name of an Cloud Map service instance attribute key.
              Any Cloud Map service instance that contains the specified key and value
              is returned.
        value:
          allOf:
          - $ref: '#/components/schemas/AwsCloudMapInstanceAttributeValue'
          - description: The value of an Cloud Map service instance attribute key.
              Any Cloud Map service instance that contains the specified key and value
              is returned.
      required:
      - key
      - value
      type: object
    AwsCloudMapInstanceAttributes:
      items:
        $ref: '#/components/schemas/AwsCloudMapInstanceAttribute'
      type: array
    AwsCloudMapName:
      maxLength: 1024
      minLength: 1
      type: string
    IpPreference:
      enum:
      - IPv6_PREFERRED
      - IPv4_PREFERRED
      - IPv4_ONLY
      - IPv6_ONLY
      type: string
    AwsCloudMapServiceDiscovery:
      description: <p>An object that represents the Cloud Map service discovery information
        for your virtual node.</p> <note> <p>Cloud Map is not available in the eu-south-1
        Region.</p> </note>
      properties:
        attributes:
          allOf:
          - $ref: '#/components/schemas/AwsCloudMapInstanceAttributes'
          - description: A string map that contains attributes with values that you
              can use to filter instances by any custom attribute that you specified
              when you registered the instance. Only instances that match all of the
              specified key/value pairs will be returned.
        ipPreference:
          allOf:
          - $ref: '#/components/schemas/IpPreference'
          - description: The preferred IP version that this virtual node uses. Setting
              the IP preference on the virtual node only overrides the IP preference
              set for the mesh on this specific node.
        namespaceName:
          allOf:
          - $ref: '#/components/schemas/AwsCloudMapName'
          - description: The name of the Cloud Map namespace to use.
        serviceName:
          allOf:
          - $ref: '#/components/schemas/AwsCloudMapName'
          - description: The name of the Cloud Map service to use.
      required:
      - namespaceName
      - serviceName
      type: object
    VirtualServiceBackend:
      description: An object that represents a virtual service backend for a virtual
        node.
      properties:
        clientPolicy:
          $ref: '#/components/schemas/VirtualServiceBackend_clientPolicy'
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          - description: The name of the virtual service that is acting as a virtual
              node backend.
      required:
      - virtualServiceName
      type: object
    Backend:
      description: An object that represents the backends that a virtual node is expected
        to send outbound traffic to.
      properties:
        virtualService:
          $ref: '#/components/schemas/Backend_virtualService'
      type: object
    ClientPolicy:
      description: An object that represents a client policy.
      properties:
        tls:
          $ref: '#/components/schemas/ClientPolicy_tls'
      type: object
    Boolean:
      type: boolean
    CertificateAuthorityArns:
      items:
        $ref: '#/components/schemas/Arn'
      maxItems: 3
      minItems: 1
      type: array
    ClientPolicyTls:
      description: A reference to an object that represents a Transport Layer Security
        (TLS) client policy.
      properties:
        certificate:
          $ref: '#/components/schemas/ClientPolicyTls_certificate'
        enforce:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Whether the policy is enforced. The default is <code>True</code>,\
              \ if a value isn't specified."
        ports:
          allOf:
          - $ref: '#/components/schemas/PortSet'
          - description: One or more ports that the policy is enforced for.
        validation:
          $ref: '#/components/schemas/ClientPolicyTls_validation'
      required:
      - validation
      type: object
    ClientTlsCertificate:
      description: An object that represents the client's certificate.
      properties:
        file:
          $ref: '#/components/schemas/ClientTlsCertificate_file'
        sds:
          $ref: '#/components/schemas/ClientTlsCertificate_sds'
      type: object
    PortSet:
      items:
        $ref: '#/components/schemas/PortNumber'
      type: array
    TlsValidationContext:
      description: An object that represents how the proxy will validate its peer
        during Transport Layer Security (TLS) negotiation.
      properties:
        subjectAlternativeNames:
          $ref: '#/components/schemas/TlsValidationContext_subjectAlternativeNames'
        trust:
          $ref: '#/components/schemas/TlsValidationContext_trust'
      required:
      - trust
      type: object
    ListenerTlsFileCertificate:
      description: "An object that represents a local file certificate. The certificate\
        \ must meet specific requirements and you must have proxy authorization enabled.\
        \ For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\"\
        >Transport Layer Security (TLS)</a>."
      properties:
        certificateChain:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          - description: The certificate chain for the certificate.
        privateKey:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          - description: The private key for a certificate stored on the file system
              of the virtual node that the proxy is running on.
      required:
      - certificateChain
      - privateKey
      type: object
    ListenerTlsSdsCertificate:
      description: An object that represents the listener's Secret Discovery Service
        certificate. The proxy must be configured with a local SDS provider via a
        Unix Domain Socket. See App Mesh <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS
        documentation</a> for more info.
      properties:
        secretName:
          allOf:
          - $ref: '#/components/schemas/SdsSecretName'
          - description: A reference to an object that represents the name of the
              secret requested from the Secret Discovery Service provider representing
              Transport Layer Security (TLS) materials like a certificate or certificate
              chain.
      required:
      - secretName
      type: object
    String:
      type: string
    ResourceName:
      maxLength: 255
      minLength: 1
      type: string
    GatewayRouteSpec:
      description: An object that represents a gateway route specification. Specify
        one gateway route type.
      properties:
        grpcRoute:
          $ref: '#/components/schemas/CreateGatewayRoute_request_spec_grpcRoute'
        http2Route:
          $ref: '#/components/schemas/CreateGatewayRoute_request_spec_http2Route'
        httpRoute:
          $ref: '#/components/schemas/CreateGatewayRoute_request_spec_httpRoute'
        priority:
          allOf:
          - $ref: '#/components/schemas/GatewayRoutePriority'
          - description: The ordering of the gateway routes spec.
      type: object
    TagList:
      items:
        $ref: '#/components/schemas/TagRef'
      maxItems: 50
      minItems: 0
      type: array
    CreateGatewayRouteInput:
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        gatewayRouteName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name to use for the gateway route.
        spec:
          $ref: '#/components/schemas/CreateGatewayRouteInput_spec'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "Optional metadata that you can apply to the gateway route\
              \ to assist with categorization and organization. Each tag consists\
              \ of a key and an optional value, both of which you define. Tag keys\
              \ can have a maximum character length of 128 characters, and tag values\
              \ can have a maximum length of 256 characters."
      required:
      - gatewayRouteName
      - spec
      title: CreateGatewayRouteInput
      type: object
    GatewayRouteData:
      description: An object that represents a gateway route returned by a describe
        operation.
      properties:
        gatewayRouteName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the gateway route.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: 'The name of the service mesh that the resource resides in. '
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
        spec:
          $ref: '#/components/schemas/GatewayRouteData_spec'
        status:
          $ref: '#/components/schemas/GatewayRouteData_status'
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The virtual gateway that the gateway route is associated
              with.
      required:
      - gatewayRouteName
      - meshName
      - metadata
      - spec
      - status
      - virtualGatewayName
      type: object
    MeshSpec:
      description: An object that represents the specification of a service mesh.
      properties:
        egressFilter:
          $ref: '#/components/schemas/CreateMesh_request_spec_egressFilter'
        serviceDiscovery:
          $ref: '#/components/schemas/MeshServiceDiscovery'
      type: object
    CreateMeshInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name to use for the service mesh.
        spec:
          $ref: '#/components/schemas/CreateMeshInput_spec'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "Optional metadata that you can apply to the service mesh\
              \ to assist with categorization and organization. Each tag consists\
              \ of a key and an optional value, both of which you define. Tag keys\
              \ can have a maximum character length of 128 characters, and tag values\
              \ can have a maximum length of 256 characters."
      required:
      - meshName
      title: CreateMeshInput
      type: object
    MeshData:
      description: An object that represents a service mesh returned by a describe
        operation.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        spec:
          egressFilter:
            type: ""
          serviceDiscovery:
            ipPreference: ""
        status:
          status: ""
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh.
        metadata:
          $ref: '#/components/schemas/MeshData_metadata'
        spec:
          $ref: '#/components/schemas/MeshData_spec'
        status:
          $ref: '#/components/schemas/MeshData_status'
      required:
      - meshName
      - metadata
      - spec
      - status
      type: object
    RouteSpec:
      description: An object that represents a route specification. Specify one route
        type.
      properties:
        grpcRoute:
          $ref: '#/components/schemas/CreateRoute_request_spec_grpcRoute'
        http2Route:
          $ref: '#/components/schemas/CreateRoute_request_spec_http2Route'
        httpRoute:
          $ref: '#/components/schemas/CreateRoute_request_spec_httpRoute'
        priority:
          allOf:
          - $ref: '#/components/schemas/RoutePriority'
          - description: "The priority for the route. Routes are matched based on\
              \ the specified value, where 0 is the highest priority."
        tcpRoute:
          $ref: '#/components/schemas/CreateRoute_request_spec_tcpRoute'
      type: object
    CreateRouteInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        routeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name to use for the route.
        spec:
          $ref: '#/components/schemas/CreateRouteInput_spec'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "Optional metadata that you can apply to the route to assist\
              \ with categorization and organization. Each tag consists of a key and\
              \ an optional value, both of which you define. Tag keys can have a maximum\
              \ character length of 128 characters, and tag values can have a maximum\
              \ length of 256 characters."
      required:
      - routeName
      - spec
      title: CreateRouteInput
      type: object
    RouteData:
      description: An object that represents a route returned by a describe operation.
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh that the route resides in.
        metadata:
          $ref: '#/components/schemas/RouteData_metadata'
        routeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the route.
        spec:
          $ref: '#/components/schemas/RouteData_spec'
        status:
          $ref: '#/components/schemas/RouteData_status'
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The virtual router that the route is associated with.
      required:
      - meshName
      - metadata
      - routeName
      - spec
      - status
      - virtualRouterName
      type: object
    VirtualGatewaySpec:
      description: An object that represents the specification of a service mesh resource.
      properties:
        backendDefaults:
          $ref: '#/components/schemas/CreateVirtualGateway_request_spec_backendDefaults'
        listeners:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayListeners'
          - description: The listeners that the mesh endpoint is expected to receive
              inbound traffic from. You can specify one listener.
        logging:
          $ref: '#/components/schemas/VirtualGatewayLogging'
      required:
      - listeners
      type: object
    CreateVirtualGatewayInput:
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        spec:
          $ref: '#/components/schemas/CreateVirtualGatewayInput_spec'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "Optional metadata that you can apply to the virtual gateway\
              \ to assist with categorization and organization. Each tag consists\
              \ of a key and an optional value, both of which you define. Tag keys\
              \ can have a maximum character length of 128 characters, and tag values\
              \ can have a maximum length of 256 characters."
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name to use for the virtual gateway.
      required:
      - spec
      - virtualGatewayName
      title: CreateVirtualGatewayInput
      type: object
    VirtualGatewayData:
      description: An object that represents a virtual gateway returned by a describe
        operation.
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh that the virtual gateway resides
              in.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
        spec:
          $ref: '#/components/schemas/VirtualGatewayData_spec'
        status:
          $ref: '#/components/schemas/VirtualGatewayData_status'
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the virtual gateway.
      required:
      - meshName
      - metadata
      - spec
      - status
      - virtualGatewayName
      type: object
    VirtualNodeSpec:
      description: An object that represents the specification of a virtual node.
      properties:
        backendDefaults:
          $ref: '#/components/schemas/CreateVirtualNode_request_spec_backendDefaults'
        backends:
          allOf:
          - $ref: '#/components/schemas/Backends'
          - description: The backends that the virtual node is expected to send outbound
              traffic to.
        listeners:
          allOf:
          - $ref: '#/components/schemas/Listeners'
          - description: The listener that the virtual node is expected to receive
              inbound traffic from. You can specify one listener.
        logging:
          $ref: '#/components/schemas/CreateVirtualNode_request_spec_logging'
        serviceDiscovery:
          $ref: '#/components/schemas/CreateVirtualNode_request_spec_serviceDiscovery'
      type: object
    CreateVirtualNodeInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        spec:
          $ref: '#/components/schemas/CreateVirtualNodeInput_spec'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "Optional metadata that you can apply to the virtual node\
              \ to assist with categorization and organization. Each tag consists\
              \ of a key and an optional value, both of which you define. Tag keys\
              \ can have a maximum character length of 128 characters, and tag values\
              \ can have a maximum length of 256 characters."
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name to use for the virtual node.
      required:
      - spec
      - virtualNodeName
      title: CreateVirtualNodeInput
      type: object
    VirtualNodeData:
      description: An object that represents a virtual node returned by a describe
        operation.
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh that the virtual node resides
              in.
        metadata:
          $ref: '#/components/schemas/VirtualNodeData_metadata'
        spec:
          $ref: '#/components/schemas/VirtualNodeData_spec'
        status:
          $ref: '#/components/schemas/VirtualNodeData_status'
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the virtual node.
      required:
      - meshName
      - metadata
      - spec
      - status
      - virtualNodeName
      type: object
    VirtualRouterSpec:
      description: An object that represents the specification of a virtual router.
      properties:
        listeners:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterListeners'
          - description: The listeners that the virtual router is expected to receive
              inbound traffic from. You can specify one listener.
      type: object
    CreateVirtualRouterInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        spec:
          $ref: '#/components/schemas/CreateVirtualRouterInput_spec'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "Optional metadata that you can apply to the virtual router\
              \ to assist with categorization and organization. Each tag consists\
              \ of a key and an optional value, both of which you define. Tag keys\
              \ can have a maximum character length of 128 characters, and tag values\
              \ can have a maximum length of 256 characters."
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name to use for the virtual router.
      required:
      - spec
      - virtualRouterName
      title: CreateVirtualRouterInput
      type: object
    VirtualRouterData:
      description: An object that represents a virtual router returned by a describe
        operation.
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh that the virtual router resides
              in.
        metadata:
          $ref: '#/components/schemas/VirtualRouterData_metadata'
        spec:
          $ref: '#/components/schemas/VirtualRouterData_spec'
        status:
          $ref: '#/components/schemas/VirtualRouterData_status'
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the virtual router.
      required:
      - meshName
      - metadata
      - spec
      - status
      - virtualRouterName
      type: object
    VirtualServiceSpec:
      description: An object that represents the specification of a virtual service.
      properties:
        provider:
          $ref: '#/components/schemas/CreateVirtualService_request_spec_provider'
      type: object
    ServiceName:
      type: string
    CreateVirtualServiceInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        spec:
          $ref: '#/components/schemas/CreateVirtualServiceInput_spec'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "Optional metadata that you can apply to the virtual service\
              \ to assist with categorization and organization. Each tag consists\
              \ of a key and an optional value, both of which you define. Tag keys\
              \ can have a maximum character length of 128 characters, and tag values\
              \ can have a maximum length of 256 characters."
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          - description: The name to use for the virtual service.
      required:
      - spec
      - virtualServiceName
      title: CreateVirtualServiceInput
      type: object
    VirtualServiceData:
      description: An object that represents a virtual service returned by a describe
        operation.
      properties:
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh that the virtual service resides
              in.
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
        spec:
          $ref: '#/components/schemas/VirtualServiceData_spec'
        status:
          $ref: '#/components/schemas/VirtualServiceData_status'
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          - description: The name of the virtual service.
      required:
      - meshName
      - metadata
      - spec
      - status
      - virtualServiceName
      type: object
    DefaultGatewayRouteRewrite:
      enum:
      - ENABLED
      - DISABLED
      type: string
    DeleteGatewayRouteInput:
      properties: {}
      title: DeleteGatewayRouteInput
      type: object
    DeleteMeshInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: DeleteMeshInput
      type: object
    DeleteRouteInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: DeleteRouteInput
      type: object
    DeleteVirtualGatewayInput:
      properties: {}
      title: DeleteVirtualGatewayInput
      type: object
    DeleteVirtualNodeInput:
      description: Deletes a virtual node input.
      properties: {}
      title: DeleteVirtualNodeInput
      type: object
    DeleteVirtualRouterInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: DeleteVirtualRouterInput
      type: object
    DeleteVirtualServiceInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: DeleteVirtualServiceInput
      type: object
    DescribeGatewayRouteInput:
      properties: {}
      title: DescribeGatewayRouteInput
      type: object
    DescribeMeshInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: DescribeMeshInput
      type: object
    DescribeRouteInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: DescribeRouteInput
      type: object
    DescribeVirtualGatewayInput:
      properties: {}
      title: DescribeVirtualGatewayInput
      type: object
    DescribeVirtualNodeInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: DescribeVirtualNodeInput
      type: object
    DescribeVirtualRouterInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: DescribeVirtualRouterInput
      type: object
    DescribeVirtualServiceInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: DescribeVirtualServiceInput
      type: object
    DnsResponseType:
      enum:
      - LOADBALANCER
      - ENDPOINTS
      type: string
    Hostname:
      type: string
    DnsServiceDiscovery:
      description: An object that represents the DNS service discovery information
        for your virtual node.
      properties:
        hostname:
          allOf:
          - $ref: '#/components/schemas/Hostname'
          - description: 'Specifies the DNS service discovery hostname for the virtual
              node. '
        ipPreference:
          allOf:
          - $ref: '#/components/schemas/IpPreference'
          - description: The preferred IP version that this virtual node uses. Setting
              the IP preference on the virtual node only overrides the IP preference
              set for the mesh on this specific node.
        responseType:
          allOf:
          - $ref: '#/components/schemas/DnsResponseType'
          - description: Specifies the DNS response type for the virtual node.
      required:
      - hostname
      type: object
    DurationUnit:
      enum:
      - s
      - ms
      type: string
    DurationValue:
      minimum: 0
      type: integer
    Duration:
      description: An object that represents a duration of time.
      properties:
        unit:
          allOf:
          - $ref: '#/components/schemas/DurationUnit'
          - description: A unit of time.
        value:
          allOf:
          - $ref: '#/components/schemas/DurationValue'
          - description: A number of time units.
      type: object
    EgressFilterType:
      enum:
      - ALLOW_ALL
      - DROP_ALL
      type: string
    ExactHostName:
      maxLength: 253
      minLength: 1
      type: string
    LoggingFormat:
      description: An object that represents the format for the logs.
      properties:
        json:
          allOf:
          - $ref: '#/components/schemas/JsonFormat'
          - description: <p/>
        text:
          allOf:
          - $ref: '#/components/schemas/TextFormat'
          - description: <p/>
      type: object
    FilePath:
      maxLength: 255
      minLength: 1
      type: string
    ResourceMetadata:
      description: An object that represents metadata for a resource.
      example:
        createdAt: ""
        uid: ""
        lastUpdatedAt: ""
        resourceOwner: ""
        meshOwner: ""
        arn: ""
        version: ""
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The full Amazon Resource Name (ARN) for the resource.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was last updated.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the service mesh\
              \ owner. If the account ID is not your own, then it's the ID of the\
              \ account that shared the mesh with your account. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the resource owner.\
              \ If the account ID is not your own, then it's the ID of the mesh owner\
              \ or of another account that the mesh is shared with. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        uid:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The unique identifier for the resource.
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: "The version of the resource. Resources are created at version\
              \ 1, and this version is incremented each time that they're updated."
      required:
      - arn
      - createdAt
      - lastUpdatedAt
      - meshOwner
      - resourceOwner
      - uid
      - version
      type: object
    GatewayRouteStatus:
      description: An object that represents the current status of a gateway route.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/GatewayRouteStatusCode'
          - description: The current status for the gateway route.
      required:
      - status
      type: object
    SuffixHostname:
      maxLength: 253
      minLength: 1
      type: string
    GatewayRouteHostnameMatch:
      description: An object representing the gateway route host name to match.
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/ExactHostName'
          - description: The exact host name to match on.
        suffix:
          allOf:
          - $ref: '#/components/schemas/SuffixHostname'
          - description: The specified ending characters of the host name to match
              on.
      type: object
    GatewayRouteHostnameRewrite:
      description: An object representing the gateway route host name to rewrite.
      properties:
        defaultTargetHostname:
          allOf:
          - $ref: '#/components/schemas/DefaultGatewayRouteRewrite'
          - description: The default target host name to write to.
      type: object
    GatewayRouteRef:
      description: An object that represents a gateway route returned by a list operation.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The full Amazon Resource Name (ARN) for the gateway route.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was created.
        gatewayRouteName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the gateway route.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was last updated.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: 'The name of the service mesh that the resource resides in. '
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the service mesh\
              \ owner. If the account ID is not your own, then it's the ID of the\
              \ account that shared the mesh with your account. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the resource owner.\
              \ If the account ID is not your own, then it's the ID of the mesh owner\
              \ or of another account that the mesh is shared with. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: "The version of the resource. Resources are created at version\
              \ 1, and this version is incremented each time that they're updated."
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The virtual gateway that the gateway route is associated
              with.
      required:
      - arn
      - createdAt
      - gatewayRouteName
      - lastUpdatedAt
      - meshName
      - meshOwner
      - resourceOwner
      - version
      - virtualGatewayName
      type: object
    GatewayRouteList:
      items:
        $ref: '#/components/schemas/GatewayRouteRef'
      type: array
    Timestamp:
      format: date-time
      type: string
    Long:
      type: integer
    GatewayRouteStatusCode:
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
      type: string
    ListenerPort:
      maximum: 65535
      minimum: 1
      type: integer
    GatewayRouteVirtualService:
      description: An object that represents the virtual service that traffic is routed
        to.
      properties:
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the virtual service that traffic is routed to.
      required:
      - virtualServiceName
      type: object
    GatewayRouteTarget:
      description: An object that represents a gateway route target.
      properties:
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          - description: The port number of the gateway route target.
        virtualService:
          $ref: '#/components/schemas/GatewayRouteTarget_virtualService'
      required:
      - virtualService
      type: object
    GrpcGatewayRouteAction:
      description: An object that represents the action to take if a match is determined.
      properties:
        rewrite:
          $ref: '#/components/schemas/GrpcGatewayRouteAction_rewrite'
        target:
          $ref: '#/components/schemas/GrpcGatewayRouteAction_target'
      required:
      - target
      type: object
    GrpcGatewayRouteMatch:
      description: An object that represents the criteria for determining a request
        match.
      properties:
        hostname:
          $ref: '#/components/schemas/GrpcGatewayRouteMatch_hostname'
        metadata:
          allOf:
          - $ref: '#/components/schemas/GrpcGatewayRouteMetadataList'
          - description: The gateway route metadata to be matched on.
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          - description: The port number to match from the request.
        serviceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          - description: The fully qualified domain name for the service to match
              from the request.
      type: object
    GrpcGatewayRouteRewrite:
      description: An object that represents the gateway route to rewrite.
      properties:
        hostname:
          $ref: '#/components/schemas/GrpcGatewayRouteRewrite_hostname'
      type: object
    GrpcGatewayRouteMetadataList:
      items:
        $ref: '#/components/schemas/GrpcGatewayRouteMetadata'
      maxItems: 10
      minItems: 1
      type: array
    GrpcMetadataMatchMethod:
      description: An object representing the method header to be matched.
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/HeaderMatch'
          - description: The exact method header to be matched on.
        prefix:
          allOf:
          - $ref: '#/components/schemas/HeaderMatch'
          - description: The specified beginning characters of the method header to
              be matched on.
        range:
          $ref: '#/components/schemas/MatchRange'
        regex:
          allOf:
          - $ref: '#/components/schemas/HeaderMatch'
          - description: The regex used to match the method header.
        suffix:
          allOf:
          - $ref: '#/components/schemas/HeaderMatch'
          - description: The specified ending characters of the method header to match
              on.
      type: object
    HeaderName:
      maxLength: 50
      minLength: 1
      type: string
    GrpcGatewayRouteMetadata:
      description: An object representing the metadata of the gateway route.
      properties:
        invert:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Specify <code>True</code> to match anything except the match
              criteria. The default value is <code>False</code>.
        match:
          $ref: '#/components/schemas/GrpcGatewayRouteMetadata_match'
        name:
          allOf:
          - $ref: '#/components/schemas/HeaderName'
          - description: A name for the gateway route metadata.
      required:
      - name
      type: object
    HeaderMatch:
      maxLength: 255
      minLength: 1
      type: string
    MatchRange:
      description: "An object that represents the range of values to match on. The\
        \ first character of the range is included in the range, though the last character\
        \ is not. For example, if the range specified were 1-100, only values 1-99\
        \ would be matched."
      properties:
        end:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: The end of the range.
        start:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: The start of the range.
      required:
      - end
      - start
      type: object
    GrpcRetryPolicyEvents:
      items:
        $ref: '#/components/schemas/GrpcRetryPolicyEvent'
      maxItems: 5
      minItems: 1
      type: array
    HttpRetryPolicyEvents:
      items:
        $ref: '#/components/schemas/HttpRetryPolicyEvent'
      maxItems: 25
      minItems: 1
      type: array
    MaxRetries:
      minimum: 0
      type: integer
    TcpRetryPolicyEvents:
      items:
        $ref: '#/components/schemas/TcpRetryPolicyEvent'
      maxItems: 1
      minItems: 1
      type: array
    GrpcRetryPolicy:
      description: "An object that represents a retry policy. Specify at least one\
        \ value for at least one of the types of <code>RetryEvents</code>, a value\
        \ for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>.\
        \ Both <code>server-error</code> and <code>gateway-error</code> under <code>httpRetryEvents</code>\
        \ include the Envoy <code>reset</code> policy. For more information on the\
        \ <code>reset</code> policy, see the <a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on\"\
        >Envoy documentation</a>."
      properties:
        grpcRetryEvents:
          allOf:
          - $ref: '#/components/schemas/GrpcRetryPolicyEvents'
          - description: Specify at least one of the valid values.
        httpRetryEvents:
          allOf:
          - $ref: '#/components/schemas/HttpRetryPolicyEvents'
          - description: "<p>Specify at least one of the following values.</p> <ul>\
              \ <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503,\
              \ 504, 505, 506, 507, 508, 510, and 511</p> </li> <li> <p> <b>gateway-error</b>\
              \ – HTTP status codes 502, 503, and 504</p> </li> <li> <p> <b>client-error</b>\
              \ – HTTP status code 409</p> </li> <li> <p> <b>stream-error</b> – Retry\
              \ on refused stream</p> </li> </ul>"
        maxRetries:
          allOf:
          - $ref: '#/components/schemas/MaxRetries'
          - description: The maximum number of retry attempts.
        perRetryTimeout:
          $ref: '#/components/schemas/GrpcRetryPolicy_perRetryTimeout'
        tcpRetryEvents:
          allOf:
          - $ref: '#/components/schemas/TcpRetryPolicyEvents'
          - description: Specify a valid value. The event occurs before any processing
              of a request has started and is encountered when the upstream is temporarily
              or permanently unavailable.
      required:
      - maxRetries
      - perRetryTimeout
      type: object
    GrpcRetryPolicyEvent:
      enum:
      - cancelled
      - deadline-exceeded
      - internal
      - resource-exhausted
      - unavailable
      type: string
    GrpcRouteAction:
      description: An object that represents the action to take if a match is determined.
      properties:
        weightedTargets:
          allOf:
          - $ref: '#/components/schemas/WeightedTargets'
          - description: An object that represents the targets that traffic is routed
              to when a request matches the route.
      required:
      - weightedTargets
      type: object
    GrpcRouteMatch:
      description: An object that represents the criteria for determining a request
        match.
      properties:
        metadata:
          allOf:
          - $ref: '#/components/schemas/GrpcRouteMetadataList'
          - description: An object that represents the data to match from the request.
        methodName:
          allOf:
          - $ref: '#/components/schemas/MethodName'
          - description: "The method name to match from the request. If you specify\
              \ a name, you must also specify a <code>serviceName</code>."
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          - description: The port number to match on.
        serviceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          - description: The fully qualified domain name for the service to match
              from the request.
      type: object
    GrpcTimeout:
      description: 'An object that represents types of timeouts. '
      properties:
        idle:
          $ref: '#/components/schemas/GrpcTimeout_idle'
        perRequest:
          $ref: '#/components/schemas/GrpcTimeout_perRequest'
      type: object
    WeightedTargets:
      items:
        $ref: '#/components/schemas/WeightedTarget'
      maxItems: 10
      minItems: 1
      type: array
    GrpcRouteMetadataList:
      items:
        $ref: '#/components/schemas/GrpcRouteMetadata'
      maxItems: 10
      minItems: 1
      type: array
    MethodName:
      maxLength: 50
      minLength: 1
      type: string
    GrpcRouteMetadataMatchMethod:
      description: An object that represents the match method. Specify one of the
        match values.
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/HeaderMatch'
          - description: The value sent by the client must match the specified value
              exactly.
        prefix:
          allOf:
          - $ref: '#/components/schemas/HeaderMatch'
          - description: The value sent by the client must begin with the specified
              characters.
        range:
          $ref: '#/components/schemas/GrpcRouteMetadataMatchMethod_range'
        regex:
          allOf:
          - $ref: '#/components/schemas/HeaderMatch'
          - description: The value sent by the client must include the specified characters.
        suffix:
          allOf:
          - $ref: '#/components/schemas/HeaderMatch'
          - description: The value sent by the client must end with the specified
              characters.
      type: object
    GrpcRouteMetadata:
      description: An object that represents the match metadata for the route.
      properties:
        invert:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Specify <code>True</code> to match anything except the match
              criteria. The default value is <code>False</code>.
        match:
          $ref: '#/components/schemas/GrpcRouteMetadata_match'
        name:
          allOf:
          - $ref: '#/components/schemas/HeaderName'
          - description: The name of the route.
      required:
      - name
      type: object
    HeaderMatchMethod:
      description: An object that represents the method and value to match with the
        header value sent in a request. Specify one match method.
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/HeaderMatch'
          - description: The value sent by the client must match the specified value
              exactly.
        prefix:
          allOf:
          - $ref: '#/components/schemas/HeaderMatch'
          - description: The value sent by the client must begin with the specified
              characters.
        range:
          $ref: '#/components/schemas/GrpcRouteMetadataMatchMethod_range'
        regex:
          allOf:
          - $ref: '#/components/schemas/HeaderMatch'
          - description: The value sent by the client must include the specified characters.
        suffix:
          allOf:
          - $ref: '#/components/schemas/HeaderMatch'
          - description: The value sent by the client must end with the specified
              characters.
      type: object
    HealthCheckIntervalMillis:
      maximum: 300000
      minimum: 5000
      type: integer
    HealthCheckThreshold:
      maximum: 10
      minimum: 2
      type: integer
    PortNumber:
      maximum: 65535
      minimum: 1
      type: integer
    PortProtocol:
      enum:
      - http
      - tcp
      - http2
      - grpc
      type: string
    HealthCheckTimeoutMillis:
      maximum: 60000
      minimum: 2000
      type: integer
    HealthCheckPolicy:
      description: An object that represents the health check policy for a virtual
        node's listener.
      properties:
        healthyThreshold:
          allOf:
          - $ref: '#/components/schemas/HealthCheckThreshold'
          - description: The number of consecutive successful health checks that must
              occur before declaring listener healthy.
        intervalMillis:
          allOf:
          - $ref: '#/components/schemas/HealthCheckIntervalMillis'
          - description: The time period in milliseconds between each health check
              execution.
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The destination path for the health check request. This\
              \ value is only used if the specified protocol is HTTP or HTTP/2. For\
              \ any other protocol, this value is ignored."
        port:
          allOf:
          - $ref: '#/components/schemas/PortNumber'
          - description: The destination port for the health check request. This port
              must match the port defined in the <a>PortMapping</a> for the listener.
        protocol:
          allOf:
          - $ref: '#/components/schemas/PortProtocol'
          - description: "The protocol for the health check request. If you specify\
              \ <code>grpc</code>, then your service must conform to the <a href=\"\
              https://github.com/grpc/grpc/blob/master/doc/health-checking.md\">GRPC\
              \ Health Checking Protocol</a>."
        timeoutMillis:
          allOf:
          - $ref: '#/components/schemas/HealthCheckTimeoutMillis'
          - description: "The amount of time to wait when receiving a response from\
              \ the health check, in milliseconds."
        unhealthyThreshold:
          allOf:
          - $ref: '#/components/schemas/HealthCheckThreshold'
          - description: 'The number of consecutive failed health checks that must
              occur before declaring a virtual node unhealthy. '
      required:
      - healthyThreshold
      - intervalMillis
      - protocol
      - timeoutMillis
      - unhealthyThreshold
      type: object
    HttpGatewayRouteAction:
      description: An object that represents the action to take if a match is determined.
      properties:
        rewrite:
          $ref: '#/components/schemas/HttpGatewayRouteAction_rewrite'
        target:
          $ref: '#/components/schemas/GrpcGatewayRouteAction_target'
      required:
      - target
      type: object
    HttpGatewayRouteMatch:
      description: An object that represents the criteria for determining a request
        match.
      properties:
        headers:
          allOf:
          - $ref: '#/components/schemas/HttpGatewayRouteHeaders'
          - description: The client request headers to match on.
        hostname:
          $ref: '#/components/schemas/HttpGatewayRouteMatch_hostname'
        method:
          allOf:
          - $ref: '#/components/schemas/HttpMethod'
          - description: The method to match on.
        path:
          $ref: '#/components/schemas/HttpGatewayRouteMatch_path'
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          - description: The port number to match on.
        prefix:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies the path to match requests with. This parameter\
              \ must always start with <code>/</code>, which by itself matches all\
              \ requests to the virtual service name. You can also match for path-based\
              \ routing of requests. For example, if your virtual service name is\
              \ <code>my-service.local</code> and you want the route to match requests\
              \ to <code>my-service.local/metrics</code>, your prefix should be <code>/metrics</code>."
        queryParameters:
          allOf:
          - $ref: '#/components/schemas/HttpQueryParameters'
          - description: The query parameter to match on.
      type: object
    HttpGatewayRouteRewrite:
      description: An object representing the gateway route to rewrite.
      properties:
        hostname:
          $ref: '#/components/schemas/HttpGatewayRouteRewrite_hostname'
        path:
          $ref: '#/components/schemas/HttpGatewayRouteRewrite_path'
        prefix:
          $ref: '#/components/schemas/HttpGatewayRouteRewrite_prefix'
      type: object
    HttpGatewayRouteHeader:
      description: An object that represents the HTTP header in the gateway route.
      properties:
        invert:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Specify <code>True</code> to match anything except the match
              criteria. The default value is <code>False</code>.
        match:
          $ref: '#/components/schemas/HttpGatewayRouteHeader_match'
        name:
          allOf:
          - $ref: '#/components/schemas/HeaderName'
          - description: A name for the HTTP header in the gateway route that will
              be matched on.
      required:
      - name
      type: object
    HttpGatewayRouteHeaders:
      items:
        $ref: '#/components/schemas/HttpGatewayRouteHeader'
      maxItems: 10
      minItems: 1
      type: array
    HttpMethod:
      enum:
      - GET
      - HEAD
      - POST
      - PUT
      - DELETE
      - CONNECT
      - OPTIONS
      - TRACE
      - PATCH
      type: string
    HttpPathMatch:
      description: An object representing the path to match in the request.
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/HttpPathExact'
          - description: The exact path to match on.
        regex:
          allOf:
          - $ref: '#/components/schemas/HttpPathRegex'
          - description: The regex used to match the path.
      type: object
    HttpQueryParameters:
      items:
        $ref: '#/components/schemas/HttpQueryParameter'
      maxItems: 10
      minItems: 1
      type: array
    HttpPathExact:
      maxLength: 255
      minLength: 1
      type: string
    HttpGatewayRoutePathRewrite:
      description: An object that represents the path to rewrite.
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/HttpPathExact'
          - description: The exact path to rewrite.
      type: object
    HttpGatewayRoutePrefix:
      maxLength: 255
      minLength: 1
      type: string
    HttpGatewayRoutePrefixRewrite:
      description: An object representing the beginning characters of the route to
        rewrite.
      properties:
        defaultPrefix:
          allOf:
          - $ref: '#/components/schemas/DefaultGatewayRouteRewrite'
          - description: The default prefix used to replace the incoming route prefix
              when rewritten.
        value:
          allOf:
          - $ref: '#/components/schemas/HttpGatewayRoutePrefix'
          - description: The value used to replace the incoming route prefix when
              rewritten.
      type: object
    HttpPathRegex:
      maxLength: 255
      minLength: 1
      type: string
    QueryParameterMatch:
      description: An object representing the query parameter to match.
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The exact query parameter to match on.
      type: object
    QueryParameterName:
      type: string
    HttpQueryParameter:
      description: An object that represents the query parameter in the request.
      properties:
        match:
          $ref: '#/components/schemas/HttpQueryParameter_match'
        name:
          allOf:
          - $ref: '#/components/schemas/QueryParameterName'
          - description: A name for the query parameter that will be matched on.
      required:
      - name
      type: object
    HttpRetryPolicy:
      description: "An object that represents a retry policy. Specify at least one\
        \ value for at least one of the types of <code>RetryEvents</code>, a value\
        \ for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>.\
        \ Both <code>server-error</code> and <code>gateway-error</code> under <code>httpRetryEvents</code>\
        \ include the Envoy <code>reset</code> policy. For more information on the\
        \ <code>reset</code> policy, see the <a href=\"https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on\"\
        >Envoy documentation</a>."
      properties:
        httpRetryEvents:
          allOf:
          - $ref: '#/components/schemas/HttpRetryPolicyEvents'
          - description: "<p>Specify at least one of the following values.</p> <ul>\
              \ <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503,\
              \ 504, 505, 506, 507, 508, 510, and 511</p> </li> <li> <p> <b>gateway-error</b>\
              \ – HTTP status codes 502, 503, and 504</p> </li> <li> <p> <b>client-error</b>\
              \ – HTTP status code 409</p> </li> <li> <p> <b>stream-error</b> – Retry\
              \ on refused stream</p> </li> </ul>"
        maxRetries:
          allOf:
          - $ref: '#/components/schemas/MaxRetries'
          - description: The maximum number of retry attempts.
        perRetryTimeout:
          $ref: '#/components/schemas/GrpcRetryPolicy_perRetryTimeout'
        tcpRetryEvents:
          allOf:
          - $ref: '#/components/schemas/TcpRetryPolicyEvents'
          - description: Specify a valid value. The event occurs before any processing
              of a request has started and is encountered when the upstream is temporarily
              or permanently unavailable.
      required:
      - maxRetries
      - perRetryTimeout
      type: object
    HttpRetryPolicyEvent:
      maxLength: 25
      minLength: 1
      type: string
    HttpRouteAction:
      description: An object that represents the action to take if a match is determined.
      properties:
        weightedTargets:
          allOf:
          - $ref: '#/components/schemas/WeightedTargets'
          - description: An object that represents the targets that traffic is routed
              to when a request matches the route.
      required:
      - weightedTargets
      type: object
    HttpRouteMatch:
      description: An object that represents the requirements for a route to match
        HTTP requests for a virtual router.
      properties:
        headers:
          allOf:
          - $ref: '#/components/schemas/HttpRouteHeaders'
          - description: The client request headers to match on.
        method:
          allOf:
          - $ref: '#/components/schemas/HttpMethod'
          - description: The client request method to match on. Specify only one.
        path:
          $ref: '#/components/schemas/HttpRouteMatch_path'
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          - description: The port number to match on.
        prefix:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Specifies the path to match requests with. This parameter\
              \ must always start with <code>/</code>, which by itself matches all\
              \ requests to the virtual service name. You can also match for path-based\
              \ routing of requests. For example, if your virtual service name is\
              \ <code>my-service.local</code> and you want the route to match requests\
              \ to <code>my-service.local/metrics</code>, your prefix should be <code>/metrics</code>."
        queryParameters:
          allOf:
          - $ref: '#/components/schemas/HttpQueryParameters'
          - description: The client request query parameters to match on.
        scheme:
          allOf:
          - $ref: '#/components/schemas/HttpScheme'
          - description: The client request scheme to match on. Specify only one.
              Applicable only for HTTP2 routes.
      type: object
    HttpTimeout:
      description: 'An object that represents types of timeouts. '
      properties:
        idle:
          $ref: '#/components/schemas/GrpcTimeout_idle'
        perRequest:
          $ref: '#/components/schemas/GrpcTimeout_perRequest'
      type: object
    HttpRouteHeader:
      description: An object that represents the HTTP header in the request.
      properties:
        invert:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: Specify <code>True</code> to match anything except the match
              criteria. The default value is <code>False</code>.
        match:
          $ref: '#/components/schemas/HttpRouteHeader_match'
        name:
          allOf:
          - $ref: '#/components/schemas/HeaderName'
          - description: A name for the HTTP header in the client request that will
              be matched on.
      required:
      - name
      type: object
    HttpRouteHeaders:
      items:
        $ref: '#/components/schemas/HttpRouteHeader'
      maxItems: 10
      minItems: 1
      type: array
    HttpScheme:
      enum:
      - http
      - https
      type: string
    JsonFormatRef:
      description: An object that represents the key value pairs for the JSON.
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/JsonKey'
          - description: The specified key for the JSON.
        value:
          allOf:
          - $ref: '#/components/schemas/JsonValue'
          - description: The specified value for the JSON.
      required:
      - key
      - value
      type: object
    JsonFormat:
      items:
        $ref: '#/components/schemas/JsonFormatRef'
      type: array
    JsonKey:
      maxLength: 100
      minLength: 1
      type: string
    JsonValue:
      maxLength: 100
      minLength: 1
      type: string
    ListGatewayRoutesLimit:
      maximum: 100
      minimum: 1
      type: integer
    ListGatewayRoutesInput:
      properties: {}
      title: ListGatewayRoutesInput
      type: object
    ListMeshesLimit:
      maximum: 100
      minimum: 1
      type: integer
    ListMeshesInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: ListMeshesInput
      type: object
    MeshList:
      items:
        $ref: '#/components/schemas/MeshRef'
      type: array
    ListRoutesLimit:
      maximum: 100
      minimum: 1
      type: integer
    ListRoutesInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: ListRoutesInput
      type: object
    RouteList:
      items:
        $ref: '#/components/schemas/RouteRef'
      type: array
    TagsLimit:
      maximum: 50
      minimum: 1
      type: integer
    ListTagsForResourceInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: ListTagsForResourceInput
      type: object
    ListVirtualGatewaysLimit:
      maximum: 100
      minimum: 1
      type: integer
    ListVirtualGatewaysInput:
      properties: {}
      title: ListVirtualGatewaysInput
      type: object
    VirtualGatewayList:
      items:
        $ref: '#/components/schemas/VirtualGatewayRef'
      type: array
    ListVirtualNodesLimit:
      maximum: 100
      minimum: 1
      type: integer
    ListVirtualNodesInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: ListVirtualNodesInput
      type: object
    VirtualNodeList:
      items:
        $ref: '#/components/schemas/VirtualNodeRef'
      type: array
    ListVirtualRoutersLimit:
      maximum: 100
      minimum: 1
      type: integer
    ListVirtualRoutersInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: ListVirtualRoutersInput
      type: object
    VirtualRouterList:
      items:
        $ref: '#/components/schemas/VirtualRouterRef'
      type: array
    ListVirtualServicesLimit:
      maximum: 100
      minimum: 1
      type: integer
    ListVirtualServicesInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties: {}
      title: ListVirtualServicesInput
      type: object
    VirtualServiceList:
      items:
        $ref: '#/components/schemas/VirtualServiceRef'
      type: array
    VirtualNodeConnectionPool:
      description: <p>An object that represents the type of virtual node connection
        pool.</p> <p>Only one protocol is used at a time and should be the same protocol
        as the one chosen under port mapping.</p> <p>If not present the default value
        for <code>maxPendingRequests</code> is <code>2147483647</code>.</p> <p/>
      properties:
        grpc:
          $ref: '#/components/schemas/VirtualNodeConnectionPool_grpc'
        http:
          $ref: '#/components/schemas/VirtualNodeConnectionPool_http'
        http2:
          $ref: '#/components/schemas/VirtualNodeConnectionPool_http2'
        tcp:
          $ref: '#/components/schemas/VirtualNodeConnectionPool_tcp'
      type: object
    OutlierDetection:
      description: An object that represents the outlier detection for a virtual node's
        listener.
      properties:
        baseEjectionDuration:
          $ref: '#/components/schemas/OutlierDetection_baseEjectionDuration'
        interval:
          $ref: '#/components/schemas/OutlierDetection_interval'
        maxEjectionPercent:
          allOf:
          - $ref: '#/components/schemas/OutlierDetectionMaxEjectionPercent'
          - description: Maximum percentage of hosts in load balancing pool for upstream
              service that can be ejected. Will eject at least one host regardless
              of the value.
        maxServerErrors:
          allOf:
          - $ref: '#/components/schemas/OutlierDetectionMaxServerErrors'
          - description: 'Number of consecutive <code>5xx</code> errors required for
              ejection. '
      required:
      - baseEjectionDuration
      - interval
      - maxEjectionPercent
      - maxServerErrors
      type: object
    PortMapping:
      description: An object that represents a port mapping.
      properties:
        port:
          allOf:
          - $ref: '#/components/schemas/PortNumber'
          - description: The port used for the port mapping.
        protocol:
          allOf:
          - $ref: '#/components/schemas/PortProtocol'
          - description: The protocol used for the port mapping. Specify one protocol.
      required:
      - port
      - protocol
      type: object
    ListenerTimeout:
      description: An object that represents timeouts for different protocols.
      properties:
        grpc:
          $ref: '#/components/schemas/GrpcRoute_timeout'
        http:
          $ref: '#/components/schemas/HttpRoute_timeout'
        http2:
          $ref: '#/components/schemas/HttpRoute_timeout'
        tcp:
          $ref: '#/components/schemas/TcpRoute_timeout'
      type: object
    ListenerTls:
      description: An object that represents the Transport Layer Security (TLS) properties
        for a listener.
      properties:
        certificate:
          $ref: '#/components/schemas/ListenerTls_certificate'
        mode:
          allOf:
          - $ref: '#/components/schemas/ListenerTlsMode'
          - description: <p>Specify one of the following modes.</p> <ul> <li> <p>
              <b/>STRICT – Listener only accepts connections with TLS enabled. </p>
              </li> <li> <p> <b/>PERMISSIVE – Listener accepts connections with or
              without TLS enabled.</p> </li> <li> <p> <b/>DISABLED – Listener only
              accepts connections without TLS. </p> </li> </ul>
        validation:
          $ref: '#/components/schemas/ListenerTls_validation'
      required:
      - certificate
      - mode
      type: object
    Listener:
      description: An object that represents a listener for a virtual node.
      properties:
        connectionPool:
          $ref: '#/components/schemas/Listener_connectionPool'
        healthCheck:
          $ref: '#/components/schemas/Listener_healthCheck'
        outlierDetection:
          $ref: '#/components/schemas/Listener_outlierDetection'
        portMapping:
          $ref: '#/components/schemas/Listener_portMapping'
        timeout:
          $ref: '#/components/schemas/Listener_timeout'
        tls:
          $ref: '#/components/schemas/Listener_tls'
      required:
      - portMapping
      type: object
    TcpTimeout:
      description: 'An object that represents types of timeouts. '
      properties:
        idle:
          $ref: '#/components/schemas/GrpcTimeout_idle'
      type: object
    ListenerTlsCertificate:
      description: An object that represents a listener's Transport Layer Security
        (TLS) certificate.
      properties:
        acm:
          $ref: '#/components/schemas/ListenerTlsCertificate_acm'
        file:
          $ref: '#/components/schemas/ListenerTlsCertificate_file'
        sds:
          $ref: '#/components/schemas/ListenerTlsCertificate_sds'
      type: object
    ListenerTlsMode:
      enum:
      - STRICT
      - PERMISSIVE
      - DISABLED
      type: string
    ListenerTlsValidationContext:
      description: An object that represents a listener's Transport Layer Security
        (TLS) validation context.
      properties:
        subjectAlternativeNames:
          $ref: '#/components/schemas/ListenerTlsValidationContext_subjectAlternativeNames'
        trust:
          $ref: '#/components/schemas/ListenerTlsValidationContext_trust'
      required:
      - trust
      type: object
    ListenerTlsAcmCertificate:
      description: An object that represents an Certificate Manager certificate.
      properties:
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The Amazon Resource Name (ARN) for the certificate. The\
              \ certificate must meet specific requirements and you must have proxy\
              \ authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\"\
              >Transport Layer Security (TLS)</a>."
      required:
      - certificateArn
      type: object
    SdsSecretName:
      type: string
    SubjectAlternativeNames:
      description: An object that represents the subject alternative names secured
        by the certificate.
      properties:
        match:
          $ref: '#/components/schemas/SubjectAlternativeNames_match'
      required:
      - match
      type: object
    ListenerTlsValidationContextTrust:
      description: An object that represents a listener's Transport Layer Security
        (TLS) validation context trust.
      properties:
        file:
          $ref: '#/components/schemas/ListenerTlsValidationContextTrust_file'
        sds:
          $ref: '#/components/schemas/ListenerTlsValidationContextTrust_sds'
      type: object
    TlsValidationContextFileTrust:
      description: An object that represents a Transport Layer Security (TLS) validation
        context trust for a local file.
      properties:
        certificateChain:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          - description: The certificate trust chain for a certificate stored on the
              file system of the virtual node that the proxy is running on.
      required:
      - certificateChain
      type: object
    TlsValidationContextSdsTrust:
      description: An object that represents a Transport Layer Security (TLS) Secret
        Discovery Service validation context trust. The proxy must be configured with
        a local SDS provider via a Unix Domain Socket. See App Mesh <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS
        documentation</a> for more info.
      properties:
        secretName:
          allOf:
          - $ref: '#/components/schemas/SdsSecretName'
          - description: A reference to an object that represents the name of the
              secret for a Transport Layer Security (TLS) Secret Discovery Service
              validation context trust.
      required:
      - secretName
      type: object
    TextFormat:
      maxLength: 1000
      minLength: 1
      type: string
    MaxConnections:
      minimum: 1
      type: integer
    MaxPendingRequests:
      minimum: 1
      type: integer
    MaxRequests:
      minimum: 1
      type: integer
    MeshStatus:
      description: An object that represents the status of a service mesh.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/MeshStatusCode'
          - description: The current mesh status.
      type: object
    MeshRef:
      description: An object that represents a service mesh returned by a list operation.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The full Amazon Resource Name (ARN) of the service mesh.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was last updated.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the service mesh\
              \ owner. If the account ID is not your own, then it's the ID of the\
              \ account that shared the mesh with your account. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the resource owner.\
              \ If the account ID is not your own, then it's the ID of the mesh owner\
              \ or of another account that the mesh is shared with. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: "The version of the resource. Resources are created at version\
              \ 1, and this version is incremented each time that they're updated."
      required:
      - arn
      - createdAt
      - lastUpdatedAt
      - meshName
      - meshOwner
      - resourceOwner
      - version
      type: object
    MeshStatusCode:
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
      type: string
    OutlierDetectionMaxEjectionPercent:
      maximum: 100
      minimum: 0
      type: integer
    OutlierDetectionMaxServerErrors:
      minimum: 1
      type: integer
    PercentInt:
      maximum: 100
      minimum: 0
      type: integer
    RouteStatus:
      description: An object that represents the current status of a route.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/RouteStatusCode'
          - description: The current status for the route.
      required:
      - status
      type: object
    RouteRef:
      description: An object that represents a route returned by a list operation.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The full Amazon Resource Name (ARN) for the route.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was last updated.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh that the route resides in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the service mesh\
              \ owner. If the account ID is not your own, then it's the ID of the\
              \ account that shared the mesh with your account. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the resource owner.\
              \ If the account ID is not your own, then it's the ID of the mesh owner\
              \ or of another account that the mesh is shared with. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        routeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the route.
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: "The version of the resource. Resources are created at version\
              \ 1, and this version is incremented each time that they're updated."
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The virtual router that the route is associated with.
      required:
      - arn
      - createdAt
      - lastUpdatedAt
      - meshName
      - meshOwner
      - resourceOwner
      - routeName
      - version
      - virtualRouterName
      type: object
    RouteStatusCode:
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
      type: string
    SubjectAlternativeName:
      maxLength: 254
      minLength: 1
      type: string
    SubjectAlternativeNameList:
      items:
        $ref: '#/components/schemas/SubjectAlternativeName'
      type: array
    SubjectAlternativeNameMatchers:
      description: An object that represents the methods by which a subject alternative
        name on a peer Transport Layer Security (TLS) certificate can be matched.
      properties:
        exact:
          allOf:
          - $ref: '#/components/schemas/SubjectAlternativeNameList'
          - description: The values sent must match the specified values exactly.
      required:
      - exact
      type: object
    TagKeyList:
      items:
        $ref: '#/components/schemas/TagKey'
      maxItems: 50
      minItems: 0
      type: array
    TagValue:
      maxLength: 256
      minLength: 0
      type: string
    TagResourceInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "The tags to add to the resource. A tag is an array of key-value\
              \ pairs. Tag keys can have a maximum character length of 128 characters,\
              \ and tag values can have a maximum length of 256 characters."
      required:
      - tags
      title: TagResourceInput
      type: object
    TcpRetryPolicyEvent:
      enum:
      - connection-error
      type: string
    TcpRouteAction:
      description: An object that represents the action to take if a match is determined.
      properties:
        weightedTargets:
          allOf:
          - $ref: '#/components/schemas/WeightedTargets'
          - description: An object that represents the targets that traffic is routed
              to when a request matches the route.
      required:
      - weightedTargets
      type: object
    TcpRouteMatch:
      description: An object representing the TCP route to match.
      properties:
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          - description: The port number to match on.
      type: object
    TlsValidationContextTrust:
      description: An object that represents a Transport Layer Security (TLS) validation
        context trust.
      properties:
        acm:
          $ref: '#/components/schemas/TlsValidationContextTrust_acm'
        file:
          $ref: '#/components/schemas/ListenerTlsValidationContextTrust_file'
        sds:
          $ref: '#/components/schemas/TlsValidationContextTrust_sds'
      type: object
    TlsValidationContextAcmTrust:
      description: An object that represents a Transport Layer Security (TLS) validation
        context trust for an Certificate Manager certificate.
      properties:
        certificateAuthorityArns:
          allOf:
          - $ref: '#/components/schemas/CertificateAuthorityArns'
          - description: One or more ACM Amazon Resource Name (ARN)s.
      required:
      - certificateAuthorityArns
      type: object
    UntagResourceInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties:
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          - description: The keys of the tags to be removed.
      required:
      - tagKeys
      title: UntagResourceInput
      type: object
    UpdateGatewayRouteInput:
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        spec:
          $ref: '#/components/schemas/UpdateGatewayRouteInput_spec'
      required:
      - spec
      title: UpdateGatewayRouteInput
      type: object
    UpdateMeshInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        spec:
          $ref: '#/components/schemas/CreateMeshInput_spec'
      title: UpdateMeshInput
      type: object
    UpdateRouteInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        spec:
          $ref: '#/components/schemas/UpdateRouteInput_spec'
      required:
      - spec
      title: UpdateRouteInput
      type: object
    UpdateVirtualGatewayInput:
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        spec:
          $ref: '#/components/schemas/UpdateVirtualGatewayInput_spec'
      required:
      - spec
      title: UpdateVirtualGatewayInput
      type: object
    UpdateVirtualNodeInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        spec:
          $ref: '#/components/schemas/UpdateVirtualNodeInput_spec'
      required:
      - spec
      title: UpdateVirtualNodeInput
      type: object
    UpdateVirtualRouterInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        spec:
          $ref: '#/components/schemas/UpdateVirtualRouterInput_spec'
      required:
      - spec
      title: UpdateVirtualRouterInput
      type: object
    UpdateVirtualServiceInput:
      description: <zonbook></zonbook><xhtml></xhtml>
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "Unique, case-sensitive identifier that you provide to ensure\
              \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
              \ and underscores are allowed."
        spec:
          $ref: '#/components/schemas/UpdateVirtualServiceInput_spec'
      required:
      - spec
      title: UpdateVirtualServiceInput
      type: object
    VirtualGatewayFileAccessLog:
      description: An object that represents an access log file.
      properties:
        format:
          $ref: '#/components/schemas/VirtualGatewayFileAccessLog_format'
        path:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          - description: "The file path to write access logs to. You can use <code>/dev/stdout</code>\
              \ to send access logs to standard out and configure your Envoy container\
              \ to use a log driver, such as <code>awslogs</code>, to export the access\
              \ logs to a log storage service such as Amazon CloudWatch Logs. You\
              \ can also specify a path in the Envoy container's file system to write\
              \ the files to disk."
      required:
      - path
      type: object
    VirtualGatewayAccessLog:
      description: The access log configuration for a virtual gateway.
      properties:
        file:
          $ref: '#/components/schemas/VirtualGatewayAccessLog_file'
      type: object
    VirtualGatewayClientPolicy:
      description: An object that represents a client policy.
      properties:
        tls:
          $ref: '#/components/schemas/VirtualGatewayClientPolicy_tls'
      type: object
    VirtualGatewayCertificateAuthorityArns:
      items:
        $ref: '#/components/schemas/Arn'
      maxItems: 3
      minItems: 1
      type: array
    VirtualGatewayClientPolicyTls:
      description: An object that represents a Transport Layer Security (TLS) client
        policy.
      properties:
        certificate:
          $ref: '#/components/schemas/VirtualGatewayClientPolicyTls_certificate'
        enforce:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          - description: "Whether the policy is enforced. The default is <code>True</code>,\
              \ if a value isn't specified."
        ports:
          allOf:
          - $ref: '#/components/schemas/PortSet'
          - description: One or more ports that the policy is enforced for.
        validation:
          $ref: '#/components/schemas/VirtualGatewayClientPolicyTls_validation'
      required:
      - validation
      type: object
    VirtualGatewayClientTlsCertificate:
      description: An object that represents the virtual gateway's client's Transport
        Layer Security (TLS) certificate.
      properties:
        file:
          $ref: '#/components/schemas/VirtualGatewayClientTlsCertificate_file'
        sds:
          $ref: '#/components/schemas/VirtualGatewayClientTlsCertificate_sds'
      type: object
    VirtualGatewayTlsValidationContext:
      description: An object that represents a Transport Layer Security (TLS) validation
        context.
      properties:
        subjectAlternativeNames:
          $ref: '#/components/schemas/VirtualGatewayTlsValidationContext_subjectAlternativeNames'
        trust:
          $ref: '#/components/schemas/VirtualGatewayTlsValidationContext_trust'
      required:
      - trust
      type: object
    VirtualGatewayListenerTlsFileCertificate:
      description: "An object that represents a local file certificate. The certificate\
        \ must meet specific requirements and you must have proxy authorization enabled.\
        \ For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\"\
        >Transport Layer Security (TLS)</a>."
      properties:
        certificateChain:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          - description: The certificate chain for the certificate.
        privateKey:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          - description: The private key for a certificate stored on the file system
              of the mesh endpoint that the proxy is running on.
      required:
      - certificateChain
      - privateKey
      type: object
    VirtualGatewayListenerTlsSdsCertificate:
      description: 'An object that represents the virtual gateway''s listener''s Secret
        Discovery Service certificate.The proxy must be configured with a local SDS
        provider via a Unix Domain Socket. See App Mesh<a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS
        documentation</a> for more info. '
      properties:
        secretName:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewaySdsSecretName'
          - description: A reference to an object that represents the name of the
              secret secret requested from the Secret Discovery Service provider representing
              Transport Layer Security (TLS) materials like a certificate or certificate
              chain.
      required:
      - secretName
      type: object
    VirtualGatewayGrpcConnectionPool:
      description: An object that represents a type of connection pool.
      properties:
        maxRequests:
          allOf:
          - $ref: '#/components/schemas/MaxRequests'
          - description: Maximum number of inflight requests Envoy can concurrently
              support across hosts in upstream cluster.
      required:
      - maxRequests
      type: object
    VirtualGatewayHttpConnectionPool:
      description: An object that represents a type of connection pool.
      properties:
        maxConnections:
          allOf:
          - $ref: '#/components/schemas/MaxConnections'
          - description: Maximum number of outbound TCP connections Envoy can establish
              concurrently with all hosts in upstream cluster.
        maxPendingRequests:
          allOf:
          - $ref: '#/components/schemas/MaxPendingRequests'
          - description: Number of overflowing requests after <code>max_connections</code>
              Envoy will queue to upstream cluster.
      required:
      - maxConnections
      type: object
    VirtualGatewayHttp2ConnectionPool:
      description: An object that represents a type of connection pool.
      properties:
        maxRequests:
          allOf:
          - $ref: '#/components/schemas/MaxRequests'
          - description: Maximum number of inflight requests Envoy can concurrently
              support across hosts in upstream cluster.
      required:
      - maxRequests
      type: object
    VirtualGatewayConnectionPool:
      description: <p>An object that represents the type of virtual gateway connection
        pool.</p> <p>Only one protocol is used at a time and should be the same protocol
        as the one chosen under port mapping.</p> <p>If not present the default value
        for <code>maxPendingRequests</code> is <code>2147483647</code>.</p>
      properties:
        grpc:
          $ref: '#/components/schemas/VirtualGatewayConnectionPool_grpc'
        http:
          $ref: '#/components/schemas/VirtualGatewayConnectionPool_http'
        http2:
          $ref: '#/components/schemas/VirtualGatewayConnectionPool_http2'
      type: object
    VirtualGatewayStatus:
      description: An object that represents the status of the mesh resource.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayStatusCode'
          - description: The current status.
      required:
      - status
      type: object
    VirtualGatewayHealthCheckIntervalMillis:
      maximum: 300000
      minimum: 5000
      type: integer
    VirtualGatewayHealthCheckThreshold:
      maximum: 10
      minimum: 2
      type: integer
    VirtualGatewayPortProtocol:
      enum:
      - http
      - http2
      - grpc
      type: string
    VirtualGatewayHealthCheckTimeoutMillis:
      maximum: 60000
      minimum: 2000
      type: integer
    VirtualGatewayHealthCheckPolicy:
      description: An object that represents the health check policy for a virtual
        gateway's listener.
      properties:
        healthyThreshold:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayHealthCheckThreshold'
          - description: The number of consecutive successful health checks that must
              occur before declaring the listener healthy.
        intervalMillis:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayHealthCheckIntervalMillis'
          - description: The time period in milliseconds between each health check
              execution.
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The destination path for the health check request. This\
              \ value is only used if the specified protocol is HTTP or HTTP/2. For\
              \ any other protocol, this value is ignored."
        port:
          allOf:
          - $ref: '#/components/schemas/PortNumber'
          - description: The destination port for the health check request. This port
              must match the port defined in the <a>PortMapping</a> for the listener.
        protocol:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayPortProtocol'
          - description: "The protocol for the health check request. If you specify\
              \ <code>grpc</code>, then your service must conform to the <a href=\"\
              https://github.com/grpc/grpc/blob/master/doc/health-checking.md\">GRPC\
              \ Health Checking Protocol</a>."
        timeoutMillis:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayHealthCheckTimeoutMillis'
          - description: "The amount of time to wait when receiving a response from\
              \ the health check, in milliseconds."
        unhealthyThreshold:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayHealthCheckThreshold'
          - description: The number of consecutive failed health checks that must
              occur before declaring a virtual gateway unhealthy.
      required:
      - healthyThreshold
      - intervalMillis
      - protocol
      - timeoutMillis
      - unhealthyThreshold
      type: object
    VirtualGatewayRef:
      description: An object that represents a virtual gateway returned by a list
        operation.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The full Amazon Resource Name (ARN) for the resource.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was last updated.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh that the resource resides in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the service mesh\
              \ owner. If the account ID is not your own, then it's the ID of the\
              \ account that shared the mesh with your account. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the resource owner.\
              \ If the account ID is not your own, then it's the ID of the mesh owner\
              \ or of another account that the mesh is shared with. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: "The version of the resource. Resources are created at version\
              \ 1, and this version is incremented each time that they're updated."
        virtualGatewayName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the resource.
      required:
      - arn
      - createdAt
      - lastUpdatedAt
      - meshName
      - meshOwner
      - resourceOwner
      - version
      - virtualGatewayName
      type: object
    VirtualGatewayPortMapping:
      description: An object that represents a port mapping.
      properties:
        port:
          allOf:
          - $ref: '#/components/schemas/PortNumber'
          - description: The port used for the port mapping. Specify one protocol.
        protocol:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayPortProtocol'
          - description: The protocol used for the port mapping.
      required:
      - port
      - protocol
      type: object
    VirtualGatewayListenerTls:
      description: An object that represents the Transport Layer Security (TLS) properties
        for a listener.
      properties:
        certificate:
          $ref: '#/components/schemas/VirtualGatewayListenerTls_certificate'
        mode:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayListenerTlsMode'
          - description: <p>Specify one of the following modes.</p> <ul> <li> <p>
              <b/>STRICT – Listener only accepts connections with TLS enabled. </p>
              </li> <li> <p> <b/>PERMISSIVE – Listener accepts connections with or
              without TLS enabled.</p> </li> <li> <p> <b/>DISABLED – Listener only
              accepts connections without TLS. </p> </li> </ul>
        validation:
          $ref: '#/components/schemas/VirtualGatewayListenerTls_validation'
      required:
      - certificate
      - mode
      type: object
    VirtualGatewayListener:
      description: An object that represents a listener for a virtual gateway.
      properties:
        connectionPool:
          $ref: '#/components/schemas/VirtualGatewayListener_connectionPool'
        healthCheck:
          $ref: '#/components/schemas/VirtualGatewayListener_healthCheck'
        portMapping:
          $ref: '#/components/schemas/VirtualGatewayListener_portMapping'
        tls:
          $ref: '#/components/schemas/VirtualGatewayListener_tls'
      required:
      - portMapping
      type: object
    VirtualGatewayListenerTlsCertificate:
      description: An object that represents a listener's Transport Layer Security
        (TLS) certificate.
      properties:
        acm:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsCertificate_acm'
        file:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsCertificate_file'
        sds:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsCertificate_sds'
      type: object
    VirtualGatewayListenerTlsMode:
      enum:
      - STRICT
      - PERMISSIVE
      - DISABLED
      type: string
    VirtualGatewayListenerTlsValidationContext:
      description: An object that represents a virtual gateway's listener's Transport
        Layer Security (TLS) validation context.
      properties:
        subjectAlternativeNames:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsValidationContext_subjectAlternativeNames'
        trust:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsValidationContext_trust'
      required:
      - trust
      type: object
    VirtualGatewayListenerTlsAcmCertificate:
      description: An object that represents an Certificate Manager certificate.
      properties:
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The Amazon Resource Name (ARN) for the certificate. The\
              \ certificate must meet specific requirements and you must have proxy\
              \ authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\"\
              >Transport Layer Security (TLS)</a>."
      required:
      - certificateArn
      type: object
    VirtualGatewaySdsSecretName:
      type: string
    VirtualGatewayListenerTlsValidationContextTrust:
      description: An object that represents a virtual gateway's listener's Transport
        Layer Security (TLS) validation context trust.
      properties:
        file:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsValidationContextTrust_file'
        sds:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsValidationContextTrust_sds'
      type: object
    VirtualGatewayTlsValidationContextFileTrust:
      description: An object that represents a Transport Layer Security (TLS) validation
        context trust for a local file.
      properties:
        certificateChain:
          allOf:
          - $ref: '#/components/schemas/FilePath'
          - description: The certificate trust chain for a certificate stored on the
              file system of the virtual node that the proxy is running on.
      required:
      - certificateChain
      type: object
    VirtualGatewayTlsValidationContextSdsTrust:
      description: An object that represents a virtual gateway's listener's Transport
        Layer Security (TLS) Secret Discovery Service validation context trust. The
        proxy must be configured with a local SDS provider via a Unix Domain Socket.
        See App Mesh <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">TLS
        documentation</a> for more info.
      properties:
        secretName:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewaySdsSecretName'
          - description: A reference to an object that represents the name of the
              secret for a virtual gateway's Transport Layer Security (TLS) Secret
              Discovery Service validation context trust.
      required:
      - secretName
      type: object
    VirtualGatewayStatusCode:
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
      type: string
    VirtualGatewayTlsValidationContextTrust:
      description: An object that represents a Transport Layer Security (TLS) validation
        context trust.
      properties:
        acm:
          $ref: '#/components/schemas/VirtualGatewayTlsValidationContextTrust_acm'
        file:
          $ref: '#/components/schemas/VirtualGatewayListenerTlsValidationContextTrust_file'
        sds:
          $ref: '#/components/schemas/VirtualGatewayTlsValidationContextTrust_sds'
      type: object
    VirtualGatewayTlsValidationContextAcmTrust:
      description: An object that represents a Transport Layer Security (TLS) validation
        context trust for an Certificate Manager certificate.
      properties:
        certificateAuthorityArns:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayCertificateAuthorityArns'
          - description: One or more ACM Amazon Resource Name (ARN)s.
      required:
      - certificateAuthorityArns
      type: object
    VirtualNodeGrpcConnectionPool:
      description: An object that represents a type of connection pool.
      properties:
        maxRequests:
          allOf:
          - $ref: '#/components/schemas/MaxRequests'
          - description: Maximum number of inflight requests Envoy can concurrently
              support across hosts in upstream cluster.
      required:
      - maxRequests
      type: object
    VirtualNodeHttpConnectionPool:
      description: An object that represents a type of connection pool.
      properties:
        maxConnections:
          allOf:
          - $ref: '#/components/schemas/MaxConnections'
          - description: Maximum number of outbound TCP connections Envoy can establish
              concurrently with all hosts in upstream cluster.
        maxPendingRequests:
          allOf:
          - $ref: '#/components/schemas/MaxPendingRequests'
          - description: Number of overflowing requests after <code>max_connections</code>
              Envoy will queue to upstream cluster.
      required:
      - maxConnections
      type: object
    VirtualNodeHttp2ConnectionPool:
      description: An object that represents a type of connection pool.
      properties:
        maxRequests:
          allOf:
          - $ref: '#/components/schemas/MaxRequests'
          - description: Maximum number of inflight requests Envoy can concurrently
              support across hosts in upstream cluster.
      required:
      - maxRequests
      type: object
    VirtualNodeTcpConnectionPool:
      description: An object that represents a type of connection pool.
      properties:
        maxConnections:
          allOf:
          - $ref: '#/components/schemas/MaxConnections'
          - description: Maximum number of outbound TCP connections Envoy can establish
              concurrently with all hosts in upstream cluster.
      required:
      - maxConnections
      type: object
    VirtualNodeStatus:
      description: An object that represents the current status of the virtual node.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualNodeStatusCode'
          - description: The current status of the virtual node.
      required:
      - status
      type: object
    VirtualNodeRef:
      description: An object that represents a virtual node returned by a list operation.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The full Amazon Resource Name (ARN) for the virtual node.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was last updated.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh that the virtual node resides
              in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the service mesh\
              \ owner. If the account ID is not your own, then it's the ID of the\
              \ account that shared the mesh with your account. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the resource owner.\
              \ If the account ID is not your own, then it's the ID of the mesh owner\
              \ or of another account that the mesh is shared with. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: "The version of the resource. Resources are created at version\
              \ 1, and this version is incremented each time that they're updated."
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the virtual node.
      required:
      - arn
      - createdAt
      - lastUpdatedAt
      - meshName
      - meshOwner
      - resourceOwner
      - version
      - virtualNodeName
      type: object
    VirtualNodeServiceProvider:
      description: An object that represents a virtual node service provider.
      properties:
        virtualNodeName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the virtual node that is acting as a service
              provider.
      required:
      - virtualNodeName
      type: object
    VirtualNodeStatusCode:
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
      type: string
    VirtualRouterStatus:
      description: 'An object that represents the status of a virtual router. '
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterStatusCode'
          - description: The current status of the virtual router.
      required:
      - status
      type: object
    VirtualRouterRef:
      description: An object that represents a virtual router returned by a list operation.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The full Amazon Resource Name (ARN) for the virtual router.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was last updated.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh that the virtual router resides
              in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the service mesh\
              \ owner. If the account ID is not your own, then it's the ID of the\
              \ account that shared the mesh with your account. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the resource owner.\
              \ If the account ID is not your own, then it's the ID of the mesh owner\
              \ or of another account that the mesh is shared with. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: "The version of the resource. Resources are created at version\
              \ 1, and this version is incremented each time that they're updated."
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the virtual router.
      required:
      - arn
      - createdAt
      - lastUpdatedAt
      - meshName
      - meshOwner
      - resourceOwner
      - version
      - virtualRouterName
      type: object
    VirtualRouterListener:
      description: An object that represents a virtual router listener.
      properties:
        portMapping:
          $ref: '#/components/schemas/PortMapping'
      required:
      - portMapping
      type: object
    VirtualRouterServiceProvider:
      description: An object that represents a virtual node service provider.
      properties:
        virtualRouterName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the virtual router that is acting as a service
              provider.
      required:
      - virtualRouterName
      type: object
    VirtualRouterStatusCode:
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
      type: string
    VirtualServiceStatus:
      description: An object that represents the status of a virtual service.
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/VirtualServiceStatusCode'
          - description: The current status of the virtual service.
      required:
      - status
      type: object
    VirtualServiceRef:
      description: An object that represents a virtual service returned by a list
        operation.
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The full Amazon Resource Name (ARN) for the virtual service.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was created.
        lastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The Unix epoch timestamp in seconds for when the resource
              was last updated.
        meshName:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The name of the service mesh that the virtual service resides
              in.
        meshOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the service mesh\
              \ owner. If the account ID is not your own, then it's the ID of the\
              \ account that shared the mesh with your account. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          - description: "The Amazon Web Services IAM account ID of the resource owner.\
              \ If the account ID is not your own, then it's the ID of the mesh owner\
              \ or of another account that the mesh is shared with. For more information\
              \ about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\"\
              >Working with shared meshes</a>."
        version:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: "The version of the resource. Resources are created at version\
              \ 1, and this version is incremented each time that they're updated."
        virtualServiceName:
          allOf:
          - $ref: '#/components/schemas/ServiceName'
          - description: The name of the virtual service.
      required:
      - arn
      - createdAt
      - lastUpdatedAt
      - meshName
      - meshOwner
      - resourceOwner
      - version
      - virtualServiceName
      type: object
    VirtualServiceStatusCode:
      enum:
      - ACTIVE
      - INACTIVE
      - DELETED
      type: string
    WeightedTarget:
      description: "An object that represents a target and its relative weight. Traffic\
        \ is distributed across targets according to their relative weight. For example,\
        \ a weighted target with a relative weight of 50 receives five times as much\
        \ traffic as one with a relative weight of 10. The total weight for all targets\
        \ combined must be less than or equal to 100."
      properties:
        port:
          allOf:
          - $ref: '#/components/schemas/ListenerPort'
          - description: The targeted port of the weighted object.
        virtualNode:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          - description: The virtual node to associate with the weighted target.
        weight:
          allOf:
          - $ref: '#/components/schemas/PercentInt'
          - description: The relative weight of the weighted target.
      required:
      - virtualNode
      - weight
      type: object
    CreateGatewayRoute_request_spec_grpcRoute:
      allOf:
      - $ref: '#/components/schemas/GrpcGatewayRoute'
      - description: An object that represents the specification of a gRPC gateway
          route.
      example:
        match:
          hostname:
            exact: ""
            suffix: ""
          metadata: ""
          port: ""
          serviceName: ""
        action:
          rewrite:
            hostname:
              defaultTargetHostname: ""
          target:
            port: ""
            virtualService:
              virtualServiceName: ""
    CreateGatewayRoute_request_spec_http2Route:
      allOf:
      - $ref: '#/components/schemas/HttpGatewayRoute'
      - description: An object that represents the specification of an HTTP/2 gateway
          route.
      example:
        match:
          headers: ""
          path:
            regex: ""
            exact: ""
          hostname:
            exact: ""
            suffix: ""
          method: ""
          queryParameters: ""
          port: ""
          prefix: ""
        action:
          rewrite:
            path:
              exact: ""
            hostname:
              defaultTargetHostname: ""
            prefix:
              defaultPrefix: ""
              value: ""
          target:
            port: ""
            virtualService:
              virtualServiceName: ""
    CreateGatewayRoute_request_spec_httpRoute:
      allOf:
      - $ref: '#/components/schemas/HttpGatewayRoute'
      - description: An object that represents the specification of an HTTP gateway
          route.
      example:
        match:
          headers: ""
          path:
            regex: ""
            exact: ""
          hostname:
            exact: ""
            suffix: ""
          method: ""
          queryParameters: ""
          port: ""
          prefix: ""
        action:
          rewrite:
            path:
              exact: ""
            hostname:
              defaultTargetHostname: ""
            prefix:
              defaultPrefix: ""
              value: ""
          target:
            port: ""
            virtualService:
              virtualServiceName: ""
    CreateGatewayRoute_request_spec:
      description: An object that represents a gateway route specification. Specify
        one gateway route type.
      properties:
        grpcRoute:
          $ref: '#/components/schemas/CreateGatewayRoute_request_spec_grpcRoute'
        http2Route:
          $ref: '#/components/schemas/CreateGatewayRoute_request_spec_http2Route'
        httpRoute:
          $ref: '#/components/schemas/CreateGatewayRoute_request_spec_httpRoute'
        priority:
          allOf:
          - $ref: '#/components/schemas/GatewayRoutePriority'
          - description: The ordering of the gateway routes spec.
      type: object
    CreateGatewayRoute_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        gatewayRouteName:
          description: The name to use for the gateway route.
          maxLength: 255
          minLength: 1
          type: string
        spec:
          $ref: '#/components/schemas/CreateGatewayRoute_request_spec'
        tags:
          description: "Optional metadata that you can apply to the gateway route\
            \ to assist with categorization and organization. Each tag consists of\
            \ a key and an optional value, both of which you define. Tag keys can\
            \ have a maximum character length of 128 characters, and tag values can\
            \ have a maximum length of 256 characters."
          items:
            $ref: '#/components/schemas/TagRef'
          maxItems: 50
          minItems: 0
          type: array
      required:
      - gatewayRouteName
      - spec
      type: object
    CreateMesh_request_spec_egressFilter:
      allOf:
      - $ref: '#/components/schemas/EgressFilter'
      - description: The egress filter rules for the service mesh.
      example:
        type: ""
    CreateMesh_request_spec:
      description: An object that represents the specification of a service mesh.
      properties:
        egressFilter:
          $ref: '#/components/schemas/CreateMesh_request_spec_egressFilter'
        serviceDiscovery:
          $ref: '#/components/schemas/MeshServiceDiscovery'
      type: object
    CreateMesh_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        meshName:
          description: The name to use for the service mesh.
          maxLength: 255
          minLength: 1
          type: string
        spec:
          $ref: '#/components/schemas/CreateMesh_request_spec'
        tags:
          description: "Optional metadata that you can apply to the service mesh to\
            \ assist with categorization and organization. Each tag consists of a\
            \ key and an optional value, both of which you define. Tag keys can have\
            \ a maximum character length of 128 characters, and tag values can have\
            \ a maximum length of 256 characters."
          items:
            $ref: '#/components/schemas/TagRef'
          maxItems: 50
          minItems: 0
          type: array
      required:
      - meshName
      type: object
    CreateRoute_request_spec_grpcRoute:
      allOf:
      - $ref: '#/components/schemas/GrpcRoute'
      - description: An object that represents the specification of a gRPC route.
      example:
        retryPolicy:
          grpcRetryEvents: ""
          httpRetryEvents: ""
          maxRetries: ""
          tcpRetryEvents: ""
          perRetryTimeout:
            unit: ""
            value: ""
        match:
          metadata: ""
          port: ""
          methodName: ""
          serviceName: ""
        action:
          weightedTargets: ""
        timeout:
          idle:
            unit: ""
            value: ""
          perRequest:
            unit: ""
            value: ""
    CreateRoute_request_spec_http2Route:
      allOf:
      - $ref: '#/components/schemas/HttpRoute'
      - description: An object that represents the specification of an HTTP/2 route.
      example:
        retryPolicy:
          httpRetryEvents: ""
          maxRetries: ""
          tcpRetryEvents: ""
          perRetryTimeout:
            unit: ""
            value: ""
        match:
          headers: ""
          path:
            regex: ""
            exact: ""
          method: ""
          queryParameters: ""
          scheme: ""
          port: ""
          prefix: ""
        action:
          weightedTargets: ""
        timeout:
          idle:
            unit: ""
            value: ""
          perRequest:
            unit: ""
            value: ""
    CreateRoute_request_spec_httpRoute:
      allOf:
      - $ref: '#/components/schemas/HttpRoute'
      - description: An object that represents the specification of an HTTP route.
      example:
        retryPolicy:
          httpRetryEvents: ""
          maxRetries: ""
          tcpRetryEvents: ""
          perRetryTimeout:
            unit: ""
            value: ""
        match:
          headers: ""
          path:
            regex: ""
            exact: ""
          method: ""
          queryParameters: ""
          scheme: ""
          port: ""
          prefix: ""
        action:
          weightedTargets: ""
        timeout:
          idle:
            unit: ""
            value: ""
          perRequest:
            unit: ""
            value: ""
    CreateRoute_request_spec_tcpRoute:
      allOf:
      - $ref: '#/components/schemas/TcpRoute'
      - description: An object that represents the specification of a TCP route.
      example:
        match:
          port: ""
        action:
          weightedTargets: ""
        timeout:
          idle:
            unit: ""
            value: ""
    CreateRoute_request_spec:
      description: An object that represents a route specification. Specify one route
        type.
      properties:
        grpcRoute:
          $ref: '#/components/schemas/CreateRoute_request_spec_grpcRoute'
        http2Route:
          $ref: '#/components/schemas/CreateRoute_request_spec_http2Route'
        httpRoute:
          $ref: '#/components/schemas/CreateRoute_request_spec_httpRoute'
        priority:
          allOf:
          - $ref: '#/components/schemas/RoutePriority'
          - description: "The priority for the route. Routes are matched based on\
              \ the specified value, where 0 is the highest priority."
        tcpRoute:
          $ref: '#/components/schemas/CreateRoute_request_spec_tcpRoute'
      type: object
    CreateRoute_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        routeName:
          description: The name to use for the route.
          maxLength: 255
          minLength: 1
          type: string
        spec:
          $ref: '#/components/schemas/CreateRoute_request_spec'
        tags:
          description: "Optional metadata that you can apply to the route to assist\
            \ with categorization and organization. Each tag consists of a key and\
            \ an optional value, both of which you define. Tag keys can have a maximum\
            \ character length of 128 characters, and tag values can have a maximum\
            \ length of 256 characters."
          items:
            $ref: '#/components/schemas/TagRef'
          maxItems: 50
          minItems: 0
          type: array
      required:
      - routeName
      - spec
      type: object
    CreateVirtualGateway_request_spec_backendDefaults:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayBackendDefaults'
      - description: A reference to an object that represents the defaults for backends.
      example:
        clientPolicy:
          tls:
            certificate:
              file:
                privateKey: ""
                certificateChain: ""
              sds:
                secretName: ""
            enforce: ""
            ports: ""
            validation:
              trust:
                file:
                  certificateChain: ""
                sds:
                  secretName: ""
                acm:
                  certificateAuthorityArns: ""
              subjectAlternativeNames:
                match:
                  exact: ""
    CreateVirtualGateway_request_spec:
      description: An object that represents the specification of a service mesh resource.
      properties:
        backendDefaults:
          $ref: '#/components/schemas/CreateVirtualGateway_request_spec_backendDefaults'
        listeners:
          allOf:
          - $ref: '#/components/schemas/VirtualGatewayListeners'
          - description: The listeners that the mesh endpoint is expected to receive
              inbound traffic from. You can specify one listener.
        logging:
          $ref: '#/components/schemas/VirtualGatewayLogging'
      type: object
    CreateVirtualGateway_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        spec:
          $ref: '#/components/schemas/CreateVirtualGateway_request_spec'
        tags:
          description: "Optional metadata that you can apply to the virtual gateway\
            \ to assist with categorization and organization. Each tag consists of\
            \ a key and an optional value, both of which you define. Tag keys can\
            \ have a maximum character length of 128 characters, and tag values can\
            \ have a maximum length of 256 characters."
          items:
            $ref: '#/components/schemas/TagRef'
          maxItems: 50
          minItems: 0
          type: array
        virtualGatewayName:
          description: The name to use for the virtual gateway.
          maxLength: 255
          minLength: 1
          type: string
      required:
      - spec
      - virtualGatewayName
      type: object
    CreateVirtualNode_request_spec_backendDefaults:
      allOf:
      - $ref: '#/components/schemas/BackendDefaults'
      - description: A reference to an object that represents the defaults for backends.
      example:
        clientPolicy:
          tls:
            certificate:
              file:
                privateKey: ""
                certificateChain: ""
              sds:
                secretName: ""
            enforce: ""
            ports: ""
            validation:
              trust:
                file:
                  certificateChain: ""
                sds:
                  secretName: ""
                acm:
                  certificateAuthorityArns: ""
              subjectAlternativeNames:
                match:
                  exact: ""
    CreateVirtualNode_request_spec_logging:
      allOf:
      - $ref: '#/components/schemas/Logging'
      - description: The inbound and outbound access logging information for the virtual
          node.
      example:
        accessLog:
          file:
            path: ""
            format:
              json: ""
              text: ""
    CreateVirtualNode_request_spec_serviceDiscovery:
      allOf:
      - $ref: '#/components/schemas/ServiceDiscovery'
      - description: "The service discovery information for the virtual node. If your\
          \ virtual node does not expect ingress traffic, you can omit this parameter.\
          \ If you specify a <code>listener</code>, then you must specify service\
          \ discovery information."
      example:
        awsCloudMap:
          attributes: ""
          ipPreference: ""
          serviceName: ""
          namespaceName: ""
        dns:
          hostname: ""
          responseType: ""
          ipPreference: ""
    CreateVirtualNode_request_spec:
      description: An object that represents the specification of a virtual node.
      properties:
        backendDefaults:
          $ref: '#/components/schemas/CreateVirtualNode_request_spec_backendDefaults'
        backends:
          allOf:
          - $ref: '#/components/schemas/Backends'
          - description: The backends that the virtual node is expected to send outbound
              traffic to.
        listeners:
          allOf:
          - $ref: '#/components/schemas/Listeners'
          - description: The listener that the virtual node is expected to receive
              inbound traffic from. You can specify one listener.
        logging:
          $ref: '#/components/schemas/CreateVirtualNode_request_spec_logging'
        serviceDiscovery:
          $ref: '#/components/schemas/CreateVirtualNode_request_spec_serviceDiscovery'
      type: object
    CreateVirtualNode_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        spec:
          $ref: '#/components/schemas/CreateVirtualNode_request_spec'
        tags:
          description: "Optional metadata that you can apply to the virtual node to\
            \ assist with categorization and organization. Each tag consists of a\
            \ key and an optional value, both of which you define. Tag keys can have\
            \ a maximum character length of 128 characters, and tag values can have\
            \ a maximum length of 256 characters."
          items:
            $ref: '#/components/schemas/TagRef'
          maxItems: 50
          minItems: 0
          type: array
        virtualNodeName:
          description: The name to use for the virtual node.
          maxLength: 255
          minLength: 1
          type: string
      required:
      - spec
      - virtualNodeName
      type: object
    CreateVirtualRouter_request_spec:
      description: An object that represents the specification of a virtual router.
      properties:
        listeners:
          allOf:
          - $ref: '#/components/schemas/VirtualRouterListeners'
          - description: The listeners that the virtual router is expected to receive
              inbound traffic from. You can specify one listener.
      type: object
    CreateVirtualRouter_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        spec:
          $ref: '#/components/schemas/CreateVirtualRouter_request_spec'
        tags:
          description: "Optional metadata that you can apply to the virtual router\
            \ to assist with categorization and organization. Each tag consists of\
            \ a key and an optional value, both of which you define. Tag keys can\
            \ have a maximum character length of 128 characters, and tag values can\
            \ have a maximum length of 256 characters."
          items:
            $ref: '#/components/schemas/TagRef'
          maxItems: 50
          minItems: 0
          type: array
        virtualRouterName:
          description: The name to use for the virtual router.
          maxLength: 255
          minLength: 1
          type: string
      required:
      - spec
      - virtualRouterName
      type: object
    CreateVirtualService_request_spec_provider:
      allOf:
      - $ref: '#/components/schemas/VirtualServiceProvider'
      - description: The App Mesh object that is acting as the provider for a virtual
          service. You can specify a single virtual node or virtual router.
      example:
        virtualNode:
          virtualNodeName: ""
        virtualRouter:
          virtualRouterName: ""
    CreateVirtualService_request_spec:
      description: An object that represents the specification of a virtual service.
      properties:
        provider:
          $ref: '#/components/schemas/CreateVirtualService_request_spec_provider'
      type: object
    CreateVirtualService_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        spec:
          $ref: '#/components/schemas/CreateVirtualService_request_spec'
        tags:
          description: "Optional metadata that you can apply to the virtual service\
            \ to assist with categorization and organization. Each tag consists of\
            \ a key and an optional value, both of which you define. Tag keys can\
            \ have a maximum character length of 128 characters, and tag values can\
            \ have a maximum length of 256 characters."
          items:
            $ref: '#/components/schemas/TagRef'
          maxItems: 50
          minItems: 0
          type: array
        virtualServiceName:
          description: The name to use for the virtual service.
          type: string
      required:
      - spec
      - virtualServiceName
      type: object
    UpdateGatewayRoute_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        spec:
          $ref: '#/components/schemas/CreateGatewayRoute_request_spec'
      required:
      - spec
      type: object
    UpdateMesh_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        spec:
          $ref: '#/components/schemas/CreateMesh_request_spec'
      type: object
    UpdateRoute_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        spec:
          $ref: '#/components/schemas/CreateRoute_request_spec'
      required:
      - spec
      type: object
    UpdateVirtualGateway_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        spec:
          $ref: '#/components/schemas/CreateVirtualGateway_request_spec'
      required:
      - spec
      type: object
    UpdateVirtualNode_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        spec:
          $ref: '#/components/schemas/CreateVirtualNode_request_spec'
      required:
      - spec
      type: object
    UpdateVirtualRouter_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        spec:
          $ref: '#/components/schemas/CreateVirtualRouter_request_spec'
      required:
      - spec
      type: object
    UpdateVirtualService_request:
      properties:
        clientToken:
          description: "Unique, case-sensitive identifier that you provide to ensure\
            \ the idempotency of the request. Up to 36 letters, numbers, hyphens,\
            \ and underscores are allowed."
          type: string
        spec:
          $ref: '#/components/schemas/CreateVirtualService_request_spec'
      required:
      - spec
      type: object
    TagResource_request:
      properties:
        tags:
          description: "The tags to add to the resource. A tag is an array of key-value\
            \ pairs. Tag keys can have a maximum character length of 128 characters,\
            \ and tag values can have a maximum length of 256 characters."
          items:
            $ref: '#/components/schemas/TagRef'
          maxItems: 50
          minItems: 0
          type: array
      required:
      - tags
      type: object
    UntagResource_request:
      properties:
        tagKeys:
          description: The keys of the tags to be removed.
          items:
            $ref: '#/components/schemas/TagKey'
          maxItems: 50
          minItems: 0
          type: array
      required:
      - tagKeys
      type: object
    CreateGatewayRouteOutput_gatewayRoute:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteData'
      - description: The full description of your gateway route following the create
          call.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        gatewayRouteName: ""
        virtualGatewayName: ""
        meshName: ""
        spec:
          grpcRoute:
            match:
              hostname:
                exact: ""
                suffix: ""
              metadata: ""
              port: ""
              serviceName: ""
            action:
              rewrite:
                hostname:
                  defaultTargetHostname: ""
              target:
                port: ""
                virtualService:
                  virtualServiceName: ""
          http2Route:
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              hostname:
                exact: ""
                suffix: ""
              method: ""
              queryParameters: ""
              port: ""
              prefix: ""
            action:
              rewrite:
                path:
                  exact: ""
                hostname:
                  defaultTargetHostname: ""
                prefix:
                  defaultPrefix: ""
                  value: ""
              target:
                port: ""
                virtualService:
                  virtualServiceName: ""
          priority: ""
          httpRoute:
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              hostname:
                exact: ""
                suffix: ""
              method: ""
              queryParameters: ""
              port: ""
              prefix: ""
            action:
              rewrite:
                path:
                  exact: ""
                hostname:
                  defaultTargetHostname: ""
                prefix:
                  defaultPrefix: ""
                  value: ""
              target:
                port: ""
                virtualService:
                  virtualServiceName: ""
        status:
          status: ""
    GrpcGatewayRoute_action:
      allOf:
      - $ref: '#/components/schemas/GrpcGatewayRouteAction'
      - description: An object that represents the action to take if a match is determined.
      example:
        rewrite:
          hostname:
            defaultTargetHostname: ""
        target:
          port: ""
          virtualService:
            virtualServiceName: ""
    GrpcGatewayRoute_match:
      allOf:
      - $ref: '#/components/schemas/GrpcGatewayRouteMatch'
      - description: An object that represents the criteria for determining a request
          match.
      example:
        hostname:
          exact: ""
          suffix: ""
        metadata: ""
        port: ""
        serviceName: ""
    HttpGatewayRoute_action:
      allOf:
      - $ref: '#/components/schemas/HttpGatewayRouteAction'
      - description: An object that represents the action to take if a match is determined.
      example:
        rewrite:
          path:
            exact: ""
          hostname:
            defaultTargetHostname: ""
          prefix:
            defaultPrefix: ""
            value: ""
        target:
          port: ""
          virtualService:
            virtualServiceName: ""
    HttpGatewayRoute_match:
      allOf:
      - $ref: '#/components/schemas/HttpGatewayRouteMatch'
      - description: An object that represents the criteria for determining a request
          match.
      example:
        headers: ""
        path:
          regex: ""
          exact: ""
        hostname:
          exact: ""
          suffix: ""
        method: ""
        queryParameters: ""
        port: ""
        prefix: ""
    CreateMeshOutput_mesh:
      allOf:
      - $ref: '#/components/schemas/MeshData'
      - description: The full description of your service mesh following the create
          call.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        spec:
          egressFilter:
            type: ""
          serviceDiscovery:
            ipPreference: ""
        status:
          status: ""
    CreateRouteOutput_route:
      allOf:
      - $ref: '#/components/schemas/RouteData'
      - description: The full description of your mesh following the create call.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          grpcRoute:
            retryPolicy:
              grpcRetryEvents: ""
              httpRetryEvents: ""
              maxRetries: ""
              tcpRetryEvents: ""
              perRetryTimeout:
                unit: ""
                value: ""
            match:
              metadata: ""
              port: ""
              methodName: ""
              serviceName: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
              perRequest:
                unit: ""
                value: ""
          http2Route:
            retryPolicy:
              httpRetryEvents: ""
              maxRetries: ""
              tcpRetryEvents: ""
              perRetryTimeout:
                unit: ""
                value: ""
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              method: ""
              queryParameters: ""
              scheme: ""
              port: ""
              prefix: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
              perRequest:
                unit: ""
                value: ""
          priority: ""
          httpRoute:
            retryPolicy:
              httpRetryEvents: ""
              maxRetries: ""
              tcpRetryEvents: ""
              perRetryTimeout:
                unit: ""
                value: ""
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              method: ""
              queryParameters: ""
              scheme: ""
              port: ""
              prefix: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
              perRequest:
                unit: ""
                value: ""
          tcpRoute:
            match:
              port: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
        routeName: ""
        status:
          status: ""
    GrpcRoute_action:
      allOf:
      - $ref: '#/components/schemas/GrpcRouteAction'
      - description: An object that represents the action to take if a match is determined.
      example:
        weightedTargets: ""
    GrpcRoute_match:
      allOf:
      - $ref: '#/components/schemas/GrpcRouteMatch'
      - description: An object that represents the criteria for determining a request
          match.
      example:
        metadata: ""
        port: ""
        methodName: ""
        serviceName: ""
    GrpcRoute_retryPolicy:
      allOf:
      - $ref: '#/components/schemas/GrpcRetryPolicy'
      - description: An object that represents a retry policy.
      example:
        grpcRetryEvents: ""
        httpRetryEvents: ""
        maxRetries: ""
        tcpRetryEvents: ""
        perRetryTimeout:
          unit: ""
          value: ""
    GrpcRoute_timeout:
      allOf:
      - $ref: '#/components/schemas/GrpcTimeout'
      - description: 'An object that represents types of timeouts. '
      example:
        idle:
          unit: ""
          value: ""
        perRequest:
          unit: ""
          value: ""
    HttpRoute_action:
      allOf:
      - $ref: '#/components/schemas/HttpRouteAction'
      - description: An object that represents the action to take if a match is determined.
      example:
        weightedTargets: ""
    HttpRoute_match:
      allOf:
      - $ref: '#/components/schemas/HttpRouteMatch'
      - description: An object that represents the criteria for determining a request
          match.
      example:
        headers: ""
        path:
          regex: ""
          exact: ""
        method: ""
        queryParameters: ""
        scheme: ""
        port: ""
        prefix: ""
    HttpRoute_retryPolicy:
      allOf:
      - $ref: '#/components/schemas/HttpRetryPolicy'
      - description: An object that represents a retry policy.
      example:
        httpRetryEvents: ""
        maxRetries: ""
        tcpRetryEvents: ""
        perRetryTimeout:
          unit: ""
          value: ""
    HttpRoute_timeout:
      allOf:
      - $ref: '#/components/schemas/HttpTimeout'
      - description: 'An object that represents types of timeouts. '
      example:
        idle:
          unit: ""
          value: ""
        perRequest:
          unit: ""
          value: ""
    TcpRoute_action:
      allOf:
      - $ref: '#/components/schemas/TcpRouteAction'
      - description: The action to take if a match is determined.
      example:
        weightedTargets: ""
    TcpRoute_match:
      allOf:
      - $ref: '#/components/schemas/TcpRouteMatch'
      - description: An object that represents the criteria for determining a request
          match.
      example:
        port: ""
    TcpRoute_timeout:
      allOf:
      - $ref: '#/components/schemas/TcpTimeout'
      - description: 'An object that represents types of timeouts. '
      example:
        idle:
          unit: ""
          value: ""
    CreateVirtualGatewayOutput_virtualGateway:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayData'
      - description: The full description of your virtual gateway following the create
          call.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        virtualGatewayName: ""
        meshName: ""
        spec:
          listeners: ""
          logging:
            accessLog:
              file:
                path: ""
                format:
                  json: ""
                  text: ""
          backendDefaults:
            clientPolicy:
              tls:
                certificate:
                  file:
                    privateKey: ""
                    certificateChain: ""
                  sds:
                    secretName: ""
                enforce: ""
                ports: ""
                validation:
                  trust:
                    file:
                      certificateChain: ""
                    sds:
                      secretName: ""
                    acm:
                      certificateAuthorityArns: ""
                  subjectAlternativeNames:
                    match:
                      exact: ""
        status:
          status: ""
    VirtualGatewayBackendDefaults_clientPolicy:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayClientPolicy'
      - description: A reference to an object that represents a client policy.
      example:
        tls:
          certificate:
            file:
              privateKey: ""
              certificateChain: ""
            sds:
              secretName: ""
          enforce: ""
          ports: ""
          validation:
            trust:
              file:
                certificateChain: ""
              sds:
                secretName: ""
              acm:
                certificateAuthorityArns: ""
            subjectAlternativeNames:
              match:
                exact: ""
    VirtualGatewayLogging_accessLog:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayAccessLog'
      - description: The access log configuration.
      example:
        file:
          path: ""
          format:
            json: ""
            text: ""
    CreateVirtualNodeOutput_virtualNode:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeData'
      - description: The full description of your virtual node following the create
          call.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        virtualNodeName: ""
        spec:
          listeners: ""
          logging:
            accessLog:
              file:
                path: ""
                format:
                  json: ""
                  text: ""
          serviceDiscovery:
            awsCloudMap:
              attributes: ""
              ipPreference: ""
              serviceName: ""
              namespaceName: ""
            dns:
              hostname: ""
              responseType: ""
              ipPreference: ""
          backends: ""
          backendDefaults:
            clientPolicy:
              tls:
                certificate:
                  file:
                    privateKey: ""
                    certificateChain: ""
                  sds:
                    secretName: ""
                enforce: ""
                ports: ""
                validation:
                  trust:
                    file:
                      certificateChain: ""
                    sds:
                      secretName: ""
                    acm:
                      certificateAuthorityArns: ""
                  subjectAlternativeNames:
                    match:
                      exact: ""
        status:
          status: ""
    BackendDefaults_clientPolicy:
      allOf:
      - $ref: '#/components/schemas/ClientPolicy'
      - description: A reference to an object that represents a client policy.
      example:
        tls:
          certificate:
            file:
              privateKey: ""
              certificateChain: ""
            sds:
              secretName: ""
          enforce: ""
          ports: ""
          validation:
            trust:
              file:
                certificateChain: ""
              sds:
                secretName: ""
              acm:
                certificateAuthorityArns: ""
            subjectAlternativeNames:
              match:
                exact: ""
    Logging_accessLog:
      allOf:
      - $ref: '#/components/schemas/AccessLog'
      - description: The access log configuration for a virtual node.
      example:
        file:
          path: ""
          format:
            json: ""
            text: ""
    ServiceDiscovery_awsCloudMap:
      allOf:
      - $ref: '#/components/schemas/AwsCloudMapServiceDiscovery'
      - description: Specifies any Cloud Map information for the virtual node.
      example:
        attributes: ""
        ipPreference: ""
        serviceName: ""
        namespaceName: ""
    ServiceDiscovery_dns:
      allOf:
      - $ref: '#/components/schemas/DnsServiceDiscovery'
      - description: Specifies the DNS information for the virtual node.
      example:
        hostname: ""
        responseType: ""
        ipPreference: ""
    CreateVirtualRouterOutput_virtualRouter:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterData'
      - description: The full description of your virtual router following the create
          call.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          listeners: ""
        status:
          status: ""
    CreateVirtualServiceOutput_virtualService:
      allOf:
      - $ref: '#/components/schemas/VirtualServiceData'
      - description: The full description of your virtual service following the create
          call.
      example:
        virtualServiceName: ""
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        spec:
          provider:
            virtualNode:
              virtualNodeName: ""
            virtualRouter:
              virtualRouterName: ""
        status:
          status: ""
    VirtualServiceProvider_virtualNode:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeServiceProvider'
      - description: The virtual node associated with a virtual service.
      example:
        virtualNodeName: ""
    VirtualServiceProvider_virtualRouter:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterServiceProvider'
      - description: The virtual router associated with a virtual service.
      example:
        virtualRouterName: ""
    DeleteGatewayRouteOutput_gatewayRoute:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteData'
      - description: The gateway route that was deleted.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        gatewayRouteName: ""
        virtualGatewayName: ""
        meshName: ""
        spec:
          grpcRoute:
            match:
              hostname:
                exact: ""
                suffix: ""
              metadata: ""
              port: ""
              serviceName: ""
            action:
              rewrite:
                hostname:
                  defaultTargetHostname: ""
              target:
                port: ""
                virtualService:
                  virtualServiceName: ""
          http2Route:
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              hostname:
                exact: ""
                suffix: ""
              method: ""
              queryParameters: ""
              port: ""
              prefix: ""
            action:
              rewrite:
                path:
                  exact: ""
                hostname:
                  defaultTargetHostname: ""
                prefix:
                  defaultPrefix: ""
                  value: ""
              target:
                port: ""
                virtualService:
                  virtualServiceName: ""
          priority: ""
          httpRoute:
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              hostname:
                exact: ""
                suffix: ""
              method: ""
              queryParameters: ""
              port: ""
              prefix: ""
            action:
              rewrite:
                path:
                  exact: ""
                hostname:
                  defaultTargetHostname: ""
                prefix:
                  defaultPrefix: ""
                  value: ""
              target:
                port: ""
                virtualService:
                  virtualServiceName: ""
        status:
          status: ""
    DeleteMeshOutput_mesh:
      allOf:
      - $ref: '#/components/schemas/MeshData'
      - description: The service mesh that was deleted.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        spec:
          egressFilter:
            type: ""
          serviceDiscovery:
            ipPreference: ""
        status:
          status: ""
    DeleteRouteOutput_route:
      allOf:
      - $ref: '#/components/schemas/RouteData'
      - description: The route that was deleted.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          grpcRoute:
            retryPolicy:
              grpcRetryEvents: ""
              httpRetryEvents: ""
              maxRetries: ""
              tcpRetryEvents: ""
              perRetryTimeout:
                unit: ""
                value: ""
            match:
              metadata: ""
              port: ""
              methodName: ""
              serviceName: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
              perRequest:
                unit: ""
                value: ""
          http2Route:
            retryPolicy:
              httpRetryEvents: ""
              maxRetries: ""
              tcpRetryEvents: ""
              perRetryTimeout:
                unit: ""
                value: ""
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              method: ""
              queryParameters: ""
              scheme: ""
              port: ""
              prefix: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
              perRequest:
                unit: ""
                value: ""
          priority: ""
          httpRoute:
            retryPolicy:
              httpRetryEvents: ""
              maxRetries: ""
              tcpRetryEvents: ""
              perRetryTimeout:
                unit: ""
                value: ""
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              method: ""
              queryParameters: ""
              scheme: ""
              port: ""
              prefix: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
              perRequest:
                unit: ""
                value: ""
          tcpRoute:
            match:
              port: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
        routeName: ""
        status:
          status: ""
    DeleteVirtualGatewayOutput_virtualGateway:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayData'
      - description: The virtual gateway that was deleted.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        virtualGatewayName: ""
        meshName: ""
        spec:
          listeners: ""
          logging:
            accessLog:
              file:
                path: ""
                format:
                  json: ""
                  text: ""
          backendDefaults:
            clientPolicy:
              tls:
                certificate:
                  file:
                    privateKey: ""
                    certificateChain: ""
                  sds:
                    secretName: ""
                enforce: ""
                ports: ""
                validation:
                  trust:
                    file:
                      certificateChain: ""
                    sds:
                      secretName: ""
                    acm:
                      certificateAuthorityArns: ""
                  subjectAlternativeNames:
                    match:
                      exact: ""
        status:
          status: ""
    DeleteVirtualNodeOutput_virtualNode:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeData'
      - description: The virtual node that was deleted.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        virtualNodeName: ""
        spec:
          listeners: ""
          logging:
            accessLog:
              file:
                path: ""
                format:
                  json: ""
                  text: ""
          serviceDiscovery:
            awsCloudMap:
              attributes: ""
              ipPreference: ""
              serviceName: ""
              namespaceName: ""
            dns:
              hostname: ""
              responseType: ""
              ipPreference: ""
          backends: ""
          backendDefaults:
            clientPolicy:
              tls:
                certificate:
                  file:
                    privateKey: ""
                    certificateChain: ""
                  sds:
                    secretName: ""
                enforce: ""
                ports: ""
                validation:
                  trust:
                    file:
                      certificateChain: ""
                    sds:
                      secretName: ""
                    acm:
                      certificateAuthorityArns: ""
                  subjectAlternativeNames:
                    match:
                      exact: ""
        status:
          status: ""
    DeleteVirtualRouterOutput_virtualRouter:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterData'
      - description: The virtual router that was deleted.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          listeners: ""
        status:
          status: ""
    DeleteVirtualServiceOutput_virtualService:
      allOf:
      - $ref: '#/components/schemas/VirtualServiceData'
      - description: The virtual service that was deleted.
      example:
        virtualServiceName: ""
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        spec:
          provider:
            virtualNode:
              virtualNodeName: ""
            virtualRouter:
              virtualRouterName: ""
        status:
          status: ""
    DescribeGatewayRouteOutput_gatewayRoute:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteData'
      - description: The full description of your gateway route.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        gatewayRouteName: ""
        virtualGatewayName: ""
        meshName: ""
        spec:
          grpcRoute:
            match:
              hostname:
                exact: ""
                suffix: ""
              metadata: ""
              port: ""
              serviceName: ""
            action:
              rewrite:
                hostname:
                  defaultTargetHostname: ""
              target:
                port: ""
                virtualService:
                  virtualServiceName: ""
          http2Route:
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              hostname:
                exact: ""
                suffix: ""
              method: ""
              queryParameters: ""
              port: ""
              prefix: ""
            action:
              rewrite:
                path:
                  exact: ""
                hostname:
                  defaultTargetHostname: ""
                prefix:
                  defaultPrefix: ""
                  value: ""
              target:
                port: ""
                virtualService:
                  virtualServiceName: ""
          priority: ""
          httpRoute:
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              hostname:
                exact: ""
                suffix: ""
              method: ""
              queryParameters: ""
              port: ""
              prefix: ""
            action:
              rewrite:
                path:
                  exact: ""
                hostname:
                  defaultTargetHostname: ""
                prefix:
                  defaultPrefix: ""
                  value: ""
              target:
                port: ""
                virtualService:
                  virtualServiceName: ""
        status:
          status: ""
    DescribeMeshOutput_mesh:
      allOf:
      - $ref: '#/components/schemas/MeshData'
      - description: The full description of your service mesh.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        spec:
          egressFilter:
            type: ""
          serviceDiscovery:
            ipPreference: ""
        status:
          status: ""
    DescribeRouteOutput_route:
      allOf:
      - $ref: '#/components/schemas/RouteData'
      - description: The full description of your route.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          grpcRoute:
            retryPolicy:
              grpcRetryEvents: ""
              httpRetryEvents: ""
              maxRetries: ""
              tcpRetryEvents: ""
              perRetryTimeout:
                unit: ""
                value: ""
            match:
              metadata: ""
              port: ""
              methodName: ""
              serviceName: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
              perRequest:
                unit: ""
                value: ""
          http2Route:
            retryPolicy:
              httpRetryEvents: ""
              maxRetries: ""
              tcpRetryEvents: ""
              perRetryTimeout:
                unit: ""
                value: ""
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              method: ""
              queryParameters: ""
              scheme: ""
              port: ""
              prefix: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
              perRequest:
                unit: ""
                value: ""
          priority: ""
          httpRoute:
            retryPolicy:
              httpRetryEvents: ""
              maxRetries: ""
              tcpRetryEvents: ""
              perRetryTimeout:
                unit: ""
                value: ""
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              method: ""
              queryParameters: ""
              scheme: ""
              port: ""
              prefix: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
              perRequest:
                unit: ""
                value: ""
          tcpRoute:
            match:
              port: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
        routeName: ""
        status:
          status: ""
    DescribeVirtualGatewayOutput_virtualGateway:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayData'
      - description: The full description of your virtual gateway.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        virtualGatewayName: ""
        meshName: ""
        spec:
          listeners: ""
          logging:
            accessLog:
              file:
                path: ""
                format:
                  json: ""
                  text: ""
          backendDefaults:
            clientPolicy:
              tls:
                certificate:
                  file:
                    privateKey: ""
                    certificateChain: ""
                  sds:
                    secretName: ""
                enforce: ""
                ports: ""
                validation:
                  trust:
                    file:
                      certificateChain: ""
                    sds:
                      secretName: ""
                    acm:
                      certificateAuthorityArns: ""
                  subjectAlternativeNames:
                    match:
                      exact: ""
        status:
          status: ""
    DescribeVirtualNodeOutput_virtualNode:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeData'
      - description: The full description of your virtual node.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        virtualNodeName: ""
        spec:
          listeners: ""
          logging:
            accessLog:
              file:
                path: ""
                format:
                  json: ""
                  text: ""
          serviceDiscovery:
            awsCloudMap:
              attributes: ""
              ipPreference: ""
              serviceName: ""
              namespaceName: ""
            dns:
              hostname: ""
              responseType: ""
              ipPreference: ""
          backends: ""
          backendDefaults:
            clientPolicy:
              tls:
                certificate:
                  file:
                    privateKey: ""
                    certificateChain: ""
                  sds:
                    secretName: ""
                enforce: ""
                ports: ""
                validation:
                  trust:
                    file:
                      certificateChain: ""
                    sds:
                      secretName: ""
                    acm:
                      certificateAuthorityArns: ""
                  subjectAlternativeNames:
                    match:
                      exact: ""
        status:
          status: ""
    DescribeVirtualRouterOutput_virtualRouter:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterData'
      - description: The full description of your virtual router.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          listeners: ""
        status:
          status: ""
    DescribeVirtualServiceOutput_virtualService:
      allOf:
      - $ref: '#/components/schemas/VirtualServiceData'
      - description: The full description of your virtual service.
      example:
        virtualServiceName: ""
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        spec:
          provider:
            virtualNode:
              virtualNodeName: ""
            virtualRouter:
              virtualRouterName: ""
        status:
          status: ""
    UpdateGatewayRouteOutput_gatewayRoute:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteData'
      - description: A full description of the gateway route that was updated.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        gatewayRouteName: ""
        virtualGatewayName: ""
        meshName: ""
        spec:
          grpcRoute:
            match:
              hostname:
                exact: ""
                suffix: ""
              metadata: ""
              port: ""
              serviceName: ""
            action:
              rewrite:
                hostname:
                  defaultTargetHostname: ""
              target:
                port: ""
                virtualService:
                  virtualServiceName: ""
          http2Route:
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              hostname:
                exact: ""
                suffix: ""
              method: ""
              queryParameters: ""
              port: ""
              prefix: ""
            action:
              rewrite:
                path:
                  exact: ""
                hostname:
                  defaultTargetHostname: ""
                prefix:
                  defaultPrefix: ""
                  value: ""
              target:
                port: ""
                virtualService:
                  virtualServiceName: ""
          priority: ""
          httpRoute:
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              hostname:
                exact: ""
                suffix: ""
              method: ""
              queryParameters: ""
              port: ""
              prefix: ""
            action:
              rewrite:
                path:
                  exact: ""
                hostname:
                  defaultTargetHostname: ""
                prefix:
                  defaultPrefix: ""
                  value: ""
              target:
                port: ""
                virtualService:
                  virtualServiceName: ""
        status:
          status: ""
    UpdateRouteOutput_route:
      allOf:
      - $ref: '#/components/schemas/RouteData'
      - description: A full description of the route that was updated.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          grpcRoute:
            retryPolicy:
              grpcRetryEvents: ""
              httpRetryEvents: ""
              maxRetries: ""
              tcpRetryEvents: ""
              perRetryTimeout:
                unit: ""
                value: ""
            match:
              metadata: ""
              port: ""
              methodName: ""
              serviceName: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
              perRequest:
                unit: ""
                value: ""
          http2Route:
            retryPolicy:
              httpRetryEvents: ""
              maxRetries: ""
              tcpRetryEvents: ""
              perRetryTimeout:
                unit: ""
                value: ""
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              method: ""
              queryParameters: ""
              scheme: ""
              port: ""
              prefix: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
              perRequest:
                unit: ""
                value: ""
          priority: ""
          httpRoute:
            retryPolicy:
              httpRetryEvents: ""
              maxRetries: ""
              tcpRetryEvents: ""
              perRetryTimeout:
                unit: ""
                value: ""
            match:
              headers: ""
              path:
                regex: ""
                exact: ""
              method: ""
              queryParameters: ""
              scheme: ""
              port: ""
              prefix: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
              perRequest:
                unit: ""
                value: ""
          tcpRoute:
            match:
              port: ""
            action:
              weightedTargets: ""
            timeout:
              idle:
                unit: ""
                value: ""
        routeName: ""
        status:
          status: ""
    UpdateVirtualGatewayOutput_virtualGateway:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayData'
      - description: A full description of the virtual gateway that was updated.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        virtualGatewayName: ""
        meshName: ""
        spec:
          listeners: ""
          logging:
            accessLog:
              file:
                path: ""
                format:
                  json: ""
                  text: ""
          backendDefaults:
            clientPolicy:
              tls:
                certificate:
                  file:
                    privateKey: ""
                    certificateChain: ""
                  sds:
                    secretName: ""
                enforce: ""
                ports: ""
                validation:
                  trust:
                    file:
                      certificateChain: ""
                    sds:
                      secretName: ""
                    acm:
                      certificateAuthorityArns: ""
                  subjectAlternativeNames:
                    match:
                      exact: ""
        status:
          status: ""
    UpdateVirtualNodeOutput_virtualNode:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeData'
      - description: A full description of the virtual node that was updated.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        virtualNodeName: ""
        spec:
          listeners: ""
          logging:
            accessLog:
              file:
                path: ""
                format:
                  json: ""
                  text: ""
          serviceDiscovery:
            awsCloudMap:
              attributes: ""
              ipPreference: ""
              serviceName: ""
              namespaceName: ""
            dns:
              hostname: ""
              responseType: ""
              ipPreference: ""
          backends: ""
          backendDefaults:
            clientPolicy:
              tls:
                certificate:
                  file:
                    privateKey: ""
                    certificateChain: ""
                  sds:
                    secretName: ""
                enforce: ""
                ports: ""
                validation:
                  trust:
                    file:
                      certificateChain: ""
                    sds:
                      secretName: ""
                    acm:
                      certificateAuthorityArns: ""
                  subjectAlternativeNames:
                    match:
                      exact: ""
        status:
          status: ""
    UpdateVirtualRouterOutput_virtualRouter:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterData'
      - description: A full description of the virtual router that was updated.
      example:
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        virtualRouterName: ""
        spec:
          listeners: ""
        status:
          status: ""
    UpdateVirtualServiceOutput_virtualService:
      allOf:
      - $ref: '#/components/schemas/VirtualServiceData'
      - description: A full description of the virtual service that was updated.
      example:
        virtualServiceName: ""
        metadata:
          createdAt: ""
          uid: ""
          lastUpdatedAt: ""
          resourceOwner: ""
          meshOwner: ""
          arn: ""
          version: ""
        meshName: ""
        spec:
          provider:
            virtualNode:
              virtualNodeName: ""
            virtualRouter:
              virtualRouterName: ""
        status:
          status: ""
    FileAccessLog_format:
      allOf:
      - $ref: '#/components/schemas/LoggingFormat'
      - description: The specified format for the logs. The format is either <code>json_format</code>
          or <code>text_format</code>.
      example:
        json: ""
        text: ""
    AccessLog_file:
      allOf:
      - $ref: '#/components/schemas/FileAccessLog'
      - description: The file object to send virtual node access logs to.
      example:
        path: ""
        format:
          json: ""
          text: ""
    VirtualServiceBackend_clientPolicy:
      allOf:
      - $ref: '#/components/schemas/ClientPolicy'
      - description: A reference to an object that represents the client policy for
          a backend.
    Backend_virtualService:
      allOf:
      - $ref: '#/components/schemas/VirtualServiceBackend'
      - description: 'Specifies a virtual service to use as a backend. '
    ClientPolicy_tls:
      allOf:
      - $ref: '#/components/schemas/ClientPolicyTls'
      - description: A reference to an object that represents a Transport Layer Security
          (TLS) client policy.
      example:
        certificate:
          file:
            privateKey: ""
            certificateChain: ""
          sds:
            secretName: ""
        enforce: ""
        ports: ""
        validation:
          trust:
            file:
              certificateChain: ""
            sds:
              secretName: ""
            acm:
              certificateAuthorityArns: ""
          subjectAlternativeNames:
            match:
              exact: ""
    ClientPolicyTls_certificate:
      allOf:
      - $ref: '#/components/schemas/ClientTlsCertificate'
      - description: A reference to an object that represents a client's TLS certificate.
      example:
        file:
          privateKey: ""
          certificateChain: ""
        sds:
          secretName: ""
    ClientPolicyTls_validation:
      allOf:
      - $ref: '#/components/schemas/TlsValidationContext'
      - description: A reference to an object that represents a TLS validation context.
      example:
        trust:
          file:
            certificateChain: ""
          sds:
            secretName: ""
          acm:
            certificateAuthorityArns: ""
        subjectAlternativeNames:
          match:
            exact: ""
    ClientTlsCertificate_file:
      allOf:
      - $ref: '#/components/schemas/ListenerTlsFileCertificate'
      - description: "An object that represents a local file certificate. The certificate\
          \ must meet specific requirements and you must have proxy authorization\
          \ enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\"\
          >Transport Layer Security (TLS)</a>."
      example:
        privateKey: ""
        certificateChain: ""
    ClientTlsCertificate_sds:
      allOf:
      - $ref: '#/components/schemas/ListenerTlsSdsCertificate'
      - description: A reference to an object that represents a client's TLS Secret
          Discovery Service certificate.
      example:
        secretName: ""
    TlsValidationContext_subjectAlternativeNames:
      allOf:
      - $ref: '#/components/schemas/SubjectAlternativeNames'
      - description: "A reference to an object that represents the SANs for a Transport\
          \ Layer Security (TLS) validation context. If you don't specify SANs on\
          \ the <i>terminating</i> mesh endpoint, the Envoy proxy for that node doesn't\
          \ verify the SAN on a peer client certificate. If you don't specify SANs\
          \ on the <i>originating</i> mesh endpoint, the SAN on the certificate provided\
          \ by the terminating endpoint must match the mesh endpoint service discovery\
          \ configuration. Since SPIRE vended certificates have a SPIFFE ID as a name,\
          \ you must set the SAN since the name doesn't match the service discovery\
          \ name."
      example:
        match:
          exact: ""
    TlsValidationContext_trust:
      allOf:
      - $ref: '#/components/schemas/TlsValidationContextTrust'
      - description: A reference to where to retrieve the trust chain when validating
          a peer’s Transport Layer Security (TLS) certificate.
      example:
        file:
          certificateChain: ""
        sds:
          secretName: ""
        acm:
          certificateAuthorityArns: ""
    CreateGatewayRouteInput_spec:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteSpec'
      - description: The gateway route specification to apply.
    GatewayRouteData_spec:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteSpec'
      - description: The specifications of the gateway route.
      example:
        grpcRoute:
          match:
            hostname:
              exact: ""
              suffix: ""
            metadata: ""
            port: ""
            serviceName: ""
          action:
            rewrite:
              hostname:
                defaultTargetHostname: ""
            target:
              port: ""
              virtualService:
                virtualServiceName: ""
        http2Route:
          match:
            headers: ""
            path:
              regex: ""
              exact: ""
            hostname:
              exact: ""
              suffix: ""
            method: ""
            queryParameters: ""
            port: ""
            prefix: ""
          action:
            rewrite:
              path:
                exact: ""
              hostname:
                defaultTargetHostname: ""
              prefix:
                defaultPrefix: ""
                value: ""
            target:
              port: ""
              virtualService:
                virtualServiceName: ""
        priority: ""
        httpRoute:
          match:
            headers: ""
            path:
              regex: ""
              exact: ""
            hostname:
              exact: ""
              suffix: ""
            method: ""
            queryParameters: ""
            port: ""
            prefix: ""
          action:
            rewrite:
              path:
                exact: ""
              hostname:
                defaultTargetHostname: ""
              prefix:
                defaultPrefix: ""
                value: ""
            target:
              port: ""
              virtualService:
                virtualServiceName: ""
    GatewayRouteData_status:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteStatus'
      - description: The status of the gateway route.
      example:
        status: ""
    CreateMeshInput_spec:
      allOf:
      - $ref: '#/components/schemas/MeshSpec'
      - description: The service mesh specification to apply.
    MeshData_metadata:
      allOf:
      - $ref: '#/components/schemas/ResourceMetadata'
      - description: The associated metadata for the service mesh.
      example:
        createdAt: ""
        uid: ""
        lastUpdatedAt: ""
        resourceOwner: ""
        meshOwner: ""
        arn: ""
        version: ""
    MeshData_spec:
      allOf:
      - $ref: '#/components/schemas/MeshSpec'
      - description: The associated specification for the service mesh.
      example:
        egressFilter:
          type: ""
        serviceDiscovery:
          ipPreference: ""
    MeshData_status:
      allOf:
      - $ref: '#/components/schemas/MeshStatus'
      - description: The status of the service mesh.
      example:
        status: ""
    CreateRouteInput_spec:
      allOf:
      - $ref: '#/components/schemas/RouteSpec'
      - description: The route specification to apply.
    RouteData_metadata:
      allOf:
      - $ref: '#/components/schemas/ResourceMetadata'
      - description: The associated metadata for the route.
      example:
        createdAt: ""
        uid: ""
        lastUpdatedAt: ""
        resourceOwner: ""
        meshOwner: ""
        arn: ""
        version: ""
    RouteData_spec:
      allOf:
      - $ref: '#/components/schemas/RouteSpec'
      - description: The specifications of the route.
      example:
        grpcRoute:
          retryPolicy:
            grpcRetryEvents: ""
            httpRetryEvents: ""
            maxRetries: ""
            tcpRetryEvents: ""
            perRetryTimeout:
              unit: ""
              value: ""
          match:
            metadata: ""
            port: ""
            methodName: ""
            serviceName: ""
          action:
            weightedTargets: ""
          timeout:
            idle:
              unit: ""
              value: ""
            perRequest:
              unit: ""
              value: ""
        http2Route:
          retryPolicy:
            httpRetryEvents: ""
            maxRetries: ""
            tcpRetryEvents: ""
            perRetryTimeout:
              unit: ""
              value: ""
          match:
            headers: ""
            path:
              regex: ""
              exact: ""
            method: ""
            queryParameters: ""
            scheme: ""
            port: ""
            prefix: ""
          action:
            weightedTargets: ""
          timeout:
            idle:
              unit: ""
              value: ""
            perRequest:
              unit: ""
              value: ""
        priority: ""
        httpRoute:
          retryPolicy:
            httpRetryEvents: ""
            maxRetries: ""
            tcpRetryEvents: ""
            perRetryTimeout:
              unit: ""
              value: ""
          match:
            headers: ""
            path:
              regex: ""
              exact: ""
            method: ""
            queryParameters: ""
            scheme: ""
            port: ""
            prefix: ""
          action:
            weightedTargets: ""
          timeout:
            idle:
              unit: ""
              value: ""
            perRequest:
              unit: ""
              value: ""
        tcpRoute:
          match:
            port: ""
          action:
            weightedTargets: ""
          timeout:
            idle:
              unit: ""
              value: ""
    RouteData_status:
      allOf:
      - $ref: '#/components/schemas/RouteStatus'
      - description: The status of the route.
      example:
        status: ""
    CreateVirtualGatewayInput_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewaySpec'
      - description: The virtual gateway specification to apply.
    VirtualGatewayData_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewaySpec'
      - description: The specifications of the virtual gateway.
      example:
        listeners: ""
        logging:
          accessLog:
            file:
              path: ""
              format:
                json: ""
                text: ""
        backendDefaults:
          clientPolicy:
            tls:
              certificate:
                file:
                  privateKey: ""
                  certificateChain: ""
                sds:
                  secretName: ""
              enforce: ""
              ports: ""
              validation:
                trust:
                  file:
                    certificateChain: ""
                  sds:
                    secretName: ""
                  acm:
                    certificateAuthorityArns: ""
                subjectAlternativeNames:
                  match:
                    exact: ""
    VirtualGatewayData_status:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayStatus'
      - description: The current status of the virtual gateway.
      example:
        status: ""
    CreateVirtualNodeInput_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeSpec'
      - description: The virtual node specification to apply.
    VirtualNodeData_metadata:
      allOf:
      - $ref: '#/components/schemas/ResourceMetadata'
      - description: The associated metadata for the virtual node.
      example:
        createdAt: ""
        uid: ""
        lastUpdatedAt: ""
        resourceOwner: ""
        meshOwner: ""
        arn: ""
        version: ""
    VirtualNodeData_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeSpec'
      - description: The specifications of the virtual node.
      example:
        listeners: ""
        logging:
          accessLog:
            file:
              path: ""
              format:
                json: ""
                text: ""
        serviceDiscovery:
          awsCloudMap:
            attributes: ""
            ipPreference: ""
            serviceName: ""
            namespaceName: ""
          dns:
            hostname: ""
            responseType: ""
            ipPreference: ""
        backends: ""
        backendDefaults:
          clientPolicy:
            tls:
              certificate:
                file:
                  privateKey: ""
                  certificateChain: ""
                sds:
                  secretName: ""
              enforce: ""
              ports: ""
              validation:
                trust:
                  file:
                    certificateChain: ""
                  sds:
                    secretName: ""
                  acm:
                    certificateAuthorityArns: ""
                subjectAlternativeNames:
                  match:
                    exact: ""
    VirtualNodeData_status:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeStatus'
      - description: The current status for the virtual node.
      example:
        status: ""
    CreateVirtualRouterInput_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterSpec'
      - description: The virtual router specification to apply.
    VirtualRouterData_metadata:
      allOf:
      - $ref: '#/components/schemas/ResourceMetadata'
      - description: The associated metadata for the virtual router.
      example:
        createdAt: ""
        uid: ""
        lastUpdatedAt: ""
        resourceOwner: ""
        meshOwner: ""
        arn: ""
        version: ""
    VirtualRouterData_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterSpec'
      - description: The specifications of the virtual router.
      example:
        listeners: ""
    VirtualRouterData_status:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterStatus'
      - description: The current status of the virtual router.
      example:
        status: ""
    CreateVirtualServiceInput_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualServiceSpec'
      - description: The virtual service specification to apply.
    VirtualServiceData_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualServiceSpec'
      - description: The specifications of the virtual service.
      example:
        provider:
          virtualNode:
            virtualNodeName: ""
          virtualRouter:
            virtualRouterName: ""
    VirtualServiceData_status:
      allOf:
      - $ref: '#/components/schemas/VirtualServiceStatus'
      - description: The current status of the virtual service.
      example:
        status: ""
    GatewayRouteTarget_virtualService:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteVirtualService'
      - description: An object that represents a virtual service gateway route target.
      example:
        virtualServiceName: ""
    GrpcGatewayRouteAction_rewrite:
      allOf:
      - $ref: '#/components/schemas/GrpcGatewayRouteRewrite'
      - description: The gateway route action to rewrite.
      example:
        hostname:
          defaultTargetHostname: ""
    GrpcGatewayRouteAction_target:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteTarget'
      - description: An object that represents the target that traffic is routed to
          when a request matches the gateway route.
      example:
        port: ""
        virtualService:
          virtualServiceName: ""
    GrpcGatewayRouteMatch_hostname:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteHostnameMatch'
      - description: The gateway route host name to be matched on.
      example:
        exact: ""
        suffix: ""
    GrpcGatewayRouteRewrite_hostname:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteHostnameRewrite'
      - description: The host name of the gateway route to rewrite.
      example:
        defaultTargetHostname: ""
    GrpcGatewayRouteMetadata_match:
      allOf:
      - $ref: '#/components/schemas/GrpcMetadataMatchMethod'
      - description: The criteria for determining a metadata match.
    GrpcRetryPolicy_perRetryTimeout:
      allOf:
      - $ref: '#/components/schemas/Duration'
      - description: The timeout for each retry attempt.
      example:
        unit: ""
        value: ""
    GrpcTimeout_idle:
      allOf:
      - $ref: '#/components/schemas/Duration'
      - description: An object that represents an idle timeout. An idle timeout bounds
          the amount of time that a connection may be idle. The default value is none.
      example:
        unit: ""
        value: ""
    GrpcTimeout_perRequest:
      allOf:
      - $ref: '#/components/schemas/Duration'
      - description: "An object that represents a per request timeout. The default\
          \ value is 15 seconds. If you set a higher timeout, then make sure that\
          \ the higher value is set for each App Mesh resource in a conversation.\
          \ For example, if a virtual node backend uses a virtual router provider\
          \ to route to another virtual node, then the timeout should be greater than\
          \ 15 seconds for the source and destination virtual node and the route."
      example:
        unit: ""
        value: ""
    GrpcRouteMetadataMatchMethod_range:
      allOf:
      - $ref: '#/components/schemas/MatchRange'
      - description: An object that represents the range of values to match on.
    GrpcRouteMetadata_match:
      allOf:
      - $ref: '#/components/schemas/GrpcRouteMetadataMatchMethod'
      - description: An object that represents the data to match from the request.
    HttpGatewayRouteAction_rewrite:
      allOf:
      - $ref: '#/components/schemas/HttpGatewayRouteRewrite'
      - description: The gateway route action to rewrite.
      example:
        path:
          exact: ""
        hostname:
          defaultTargetHostname: ""
        prefix:
          defaultPrefix: ""
          value: ""
    HttpGatewayRouteMatch_hostname:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteHostnameMatch'
      - description: The host name to match on.
      example:
        exact: ""
        suffix: ""
    HttpGatewayRouteMatch_path:
      allOf:
      - $ref: '#/components/schemas/HttpPathMatch'
      - description: The path to match on.
      example:
        regex: ""
        exact: ""
    HttpGatewayRouteRewrite_hostname:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteHostnameRewrite'
      - description: The host name to rewrite.
      example:
        defaultTargetHostname: ""
    HttpGatewayRouteRewrite_path:
      allOf:
      - $ref: '#/components/schemas/HttpGatewayRoutePathRewrite'
      - description: The path to rewrite.
      example:
        exact: ""
    HttpGatewayRouteRewrite_prefix:
      allOf:
      - $ref: '#/components/schemas/HttpGatewayRoutePrefixRewrite'
      - description: The specified beginning characters to rewrite.
      example:
        defaultPrefix: ""
        value: ""
    HttpGatewayRouteHeader_match:
      allOf:
      - $ref: '#/components/schemas/HeaderMatchMethod'
      - description: An object that represents the method and value to match with
          the header value sent in a request. Specify one match method.
    HttpQueryParameter_match:
      allOf:
      - $ref: '#/components/schemas/QueryParameterMatch'
      - description: The query parameter to match on.
    HttpRouteMatch_path:
      allOf:
      - $ref: '#/components/schemas/HttpPathMatch'
      - description: The client request path to match on.
      example:
        regex: ""
        exact: ""
    HttpRouteHeader_match:
      allOf:
      - $ref: '#/components/schemas/HeaderMatchMethod'
      - description: The <code>HeaderMatchMethod</code> object.
    VirtualNodeConnectionPool_grpc:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeGrpcConnectionPool'
      - description: An object that represents a type of connection pool.
    VirtualNodeConnectionPool_http:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeHttpConnectionPool'
      - description: An object that represents a type of connection pool.
    VirtualNodeConnectionPool_http2:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeHttp2ConnectionPool'
      - description: An object that represents a type of connection pool.
    VirtualNodeConnectionPool_tcp:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeTcpConnectionPool'
      - description: An object that represents a type of connection pool.
    OutlierDetection_baseEjectionDuration:
      allOf:
      - $ref: '#/components/schemas/Duration'
      - description: The base amount of time for which a host is ejected.
    OutlierDetection_interval:
      allOf:
      - $ref: '#/components/schemas/Duration'
      - description: The time interval between ejection sweep analysis.
    ListenerTls_certificate:
      allOf:
      - $ref: '#/components/schemas/ListenerTlsCertificate'
      - description: A reference to an object that represents a listener's Transport
          Layer Security (TLS) certificate.
    ListenerTls_validation:
      allOf:
      - $ref: '#/components/schemas/ListenerTlsValidationContext'
      - description: A reference to an object that represents a listener's Transport
          Layer Security (TLS) validation context.
    Listener_connectionPool:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeConnectionPool'
      - description: The connection pool information for the listener.
    Listener_healthCheck:
      allOf:
      - $ref: '#/components/schemas/HealthCheckPolicy'
      - description: The health check information for the listener.
    Listener_outlierDetection:
      allOf:
      - $ref: '#/components/schemas/OutlierDetection'
      - description: The outlier detection information for the listener.
    Listener_portMapping:
      allOf:
      - $ref: '#/components/schemas/PortMapping'
      - description: The port mapping information for the listener.
    Listener_timeout:
      allOf:
      - $ref: '#/components/schemas/ListenerTimeout'
      - description: An object that represents timeouts for different protocols.
    Listener_tls:
      allOf:
      - $ref: '#/components/schemas/ListenerTls'
      - description: A reference to an object that represents the Transport Layer
          Security (TLS) properties for a listener.
    ListenerTlsCertificate_acm:
      allOf:
      - $ref: '#/components/schemas/ListenerTlsAcmCertificate'
      - description: A reference to an object that represents an Certificate Manager
          certificate.
    ListenerTlsCertificate_file:
      allOf:
      - $ref: '#/components/schemas/ListenerTlsFileCertificate'
      - description: A reference to an object that represents a local file certificate.
    ListenerTlsCertificate_sds:
      allOf:
      - $ref: '#/components/schemas/ListenerTlsSdsCertificate'
      - description: A reference to an object that represents a listener's Secret
          Discovery Service certificate.
    ListenerTlsValidationContext_subjectAlternativeNames:
      allOf:
      - $ref: '#/components/schemas/SubjectAlternativeNames'
      - description: A reference to an object that represents the SANs for a listener's
          Transport Layer Security (TLS) validation context.
    ListenerTlsValidationContext_trust:
      allOf:
      - $ref: '#/components/schemas/ListenerTlsValidationContextTrust'
      - description: A reference to where to retrieve the trust chain when validating
          a peer’s Transport Layer Security (TLS) certificate.
    SubjectAlternativeNames_match:
      allOf:
      - $ref: '#/components/schemas/SubjectAlternativeNameMatchers'
      - description: An object that represents the criteria for determining a SANs
          match.
      example:
        exact: ""
    ListenerTlsValidationContextTrust_file:
      allOf:
      - $ref: '#/components/schemas/TlsValidationContextFileTrust'
      - description: An object that represents a Transport Layer Security (TLS) validation
          context trust for a local file.
      example:
        certificateChain: ""
    ListenerTlsValidationContextTrust_sds:
      allOf:
      - $ref: '#/components/schemas/TlsValidationContextSdsTrust'
      - description: A reference to an object that represents a listener's Transport
          Layer Security (TLS) Secret Discovery Service validation context trust.
    TlsValidationContextTrust_acm:
      allOf:
      - $ref: '#/components/schemas/TlsValidationContextAcmTrust'
      - description: A reference to an object that represents a Transport Layer Security
          (TLS) validation context trust for an Certificate Manager certificate.
      example:
        certificateAuthorityArns: ""
    TlsValidationContextTrust_sds:
      allOf:
      - $ref: '#/components/schemas/TlsValidationContextSdsTrust'
      - description: A reference to an object that represents a Transport Layer Security
          (TLS) Secret Discovery Service validation context trust.
      example:
        secretName: ""
    UpdateGatewayRouteInput_spec:
      allOf:
      - $ref: '#/components/schemas/GatewayRouteSpec'
      - description: The new gateway route specification to apply. This overwrites
          the existing data.
    UpdateRouteInput_spec:
      allOf:
      - $ref: '#/components/schemas/RouteSpec'
      - description: The new route specification to apply. This overwrites the existing
          data.
    UpdateVirtualGatewayInput_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewaySpec'
      - description: The new virtual gateway specification to apply. This overwrites
          the existing data.
    UpdateVirtualNodeInput_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualNodeSpec'
      - description: The new virtual node specification to apply. This overwrites
          the existing data.
    UpdateVirtualRouterInput_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualRouterSpec'
      - description: The new virtual router specification to apply. This overwrites
          the existing data.
    UpdateVirtualServiceInput_spec:
      allOf:
      - $ref: '#/components/schemas/VirtualServiceSpec'
      - description: The new virtual service specification to apply. This overwrites
          the existing data.
    VirtualGatewayFileAccessLog_format:
      allOf:
      - $ref: '#/components/schemas/LoggingFormat'
      - description: The specified format for the virtual gateway access logs. It
          can be either <code>json_format</code> or <code>text_format</code>.
      example:
        json: ""
        text: ""
    VirtualGatewayAccessLog_file:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayFileAccessLog'
      - description: The file object to send virtual gateway access logs to.
      example:
        path: ""
        format:
          json: ""
          text: ""
    VirtualGatewayClientPolicy_tls:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayClientPolicyTls'
      - description: A reference to an object that represents a Transport Layer Security
          (TLS) client policy.
      example:
        certificate:
          file:
            privateKey: ""
            certificateChain: ""
          sds:
            secretName: ""
        enforce: ""
        ports: ""
        validation:
          trust:
            file:
              certificateChain: ""
            sds:
              secretName: ""
            acm:
              certificateAuthorityArns: ""
          subjectAlternativeNames:
            match:
              exact: ""
    VirtualGatewayClientPolicyTls_certificate:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayClientTlsCertificate'
      - description: A reference to an object that represents a virtual gateway's
          client's Transport Layer Security (TLS) certificate.
      example:
        file:
          privateKey: ""
          certificateChain: ""
        sds:
          secretName: ""
    VirtualGatewayClientPolicyTls_validation:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayTlsValidationContext'
      - description: A reference to an object that represents a Transport Layer Security
          (TLS) validation context.
      example:
        trust:
          file:
            certificateChain: ""
          sds:
            secretName: ""
          acm:
            certificateAuthorityArns: ""
        subjectAlternativeNames:
          match:
            exact: ""
    VirtualGatewayClientTlsCertificate_file:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayListenerTlsFileCertificate'
      - description: "An object that represents a local file certificate. The certificate\
          \ must meet specific requirements and you must have proxy authorization\
          \ enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\"\
          > Transport Layer Security (TLS) </a>."
      example:
        privateKey: ""
        certificateChain: ""
    VirtualGatewayClientTlsCertificate_sds:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayListenerTlsSdsCertificate'
      - description: A reference to an object that represents a virtual gateway's
          client's Secret Discovery Service certificate.
      example:
        secretName: ""
    VirtualGatewayTlsValidationContext_subjectAlternativeNames:
      allOf:
      - $ref: '#/components/schemas/SubjectAlternativeNames'
      - description: A reference to an object that represents the SANs for a virtual
          gateway's listener's Transport Layer Security (TLS) validation context.
      example:
        match:
          exact: ""
    VirtualGatewayTlsValidationContext_trust:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayTlsValidationContextTrust'
      - description: A reference to where to retrieve the trust chain when validating
          a peer’s Transport Layer Security (TLS) certificate.
      example:
        file:
          certificateChain: ""
        sds:
          secretName: ""
        acm:
          certificateAuthorityArns: ""
    VirtualGatewayConnectionPool_grpc:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayGrpcConnectionPool'
      - description: 'An object that represents a type of connection pool. '
    VirtualGatewayConnectionPool_http:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayHttpConnectionPool'
      - description: An object that represents a type of connection pool.
    VirtualGatewayConnectionPool_http2:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayHttp2ConnectionPool'
      - description: An object that represents a type of connection pool.
    VirtualGatewayListenerTls_certificate:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayListenerTlsCertificate'
      - description: An object that represents a Transport Layer Security (TLS) certificate.
    VirtualGatewayListenerTls_validation:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayListenerTlsValidationContext'
      - description: A reference to an object that represents a virtual gateway's
          listener's Transport Layer Security (TLS) validation context.
    VirtualGatewayListener_connectionPool:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayConnectionPool'
      - description: The connection pool information for the virtual gateway listener.
    VirtualGatewayListener_healthCheck:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayHealthCheckPolicy'
      - description: The health check information for the listener.
    VirtualGatewayListener_portMapping:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayPortMapping'
      - description: The port mapping information for the listener.
    VirtualGatewayListener_tls:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayListenerTls'
      - description: A reference to an object that represents the Transport Layer
          Security (TLS) properties for the listener.
    VirtualGatewayListenerTlsCertificate_acm:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayListenerTlsAcmCertificate'
      - description: A reference to an object that represents an Certificate Manager
          certificate.
    VirtualGatewayListenerTlsCertificate_file:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayListenerTlsFileCertificate'
      - description: A reference to an object that represents a local file certificate.
    VirtualGatewayListenerTlsCertificate_sds:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayListenerTlsSdsCertificate'
      - description: A reference to an object that represents a virtual gateway's
          listener's Secret Discovery Service certificate.
    VirtualGatewayListenerTlsValidationContext_subjectAlternativeNames:
      allOf:
      - $ref: '#/components/schemas/SubjectAlternativeNames'
      - description: A reference to an object that represents the SANs for a virtual
          gateway listener's Transport Layer Security (TLS) validation context.
    VirtualGatewayListenerTlsValidationContext_trust:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayListenerTlsValidationContextTrust'
      - description: A reference to where to retrieve the trust chain when validating
          a peer’s Transport Layer Security (TLS) certificate.
    VirtualGatewayListenerTlsValidationContextTrust_file:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayTlsValidationContextFileTrust'
      - description: An object that represents a Transport Layer Security (TLS) validation
          context trust for a local file.
      example:
        certificateChain: ""
    VirtualGatewayListenerTlsValidationContextTrust_sds:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayTlsValidationContextSdsTrust'
      - description: A reference to an object that represents a virtual gateway's
          listener's Transport Layer Security (TLS) Secret Discovery Service validation
          context trust.
    VirtualGatewayTlsValidationContextTrust_acm:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayTlsValidationContextAcmTrust'
      - description: A reference to an object that represents a Transport Layer Security
          (TLS) validation context trust for an Certificate Manager certificate.
      example:
        certificateAuthorityArns: ""
    VirtualGatewayTlsValidationContextTrust_sds:
      allOf:
      - $ref: '#/components/schemas/VirtualGatewayTlsValidationContextSdsTrust'
      - description: A reference to an object that represents a virtual gateway's
          Transport Layer Security (TLS) Secret Discovery Service validation context
          trust.
      example:
        secretName: ""
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4

