/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsAppMesh);
  }
}(this, function(expect, AwsAppMesh) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsAppMesh.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createGatewayRoute', function() {
      it('should call createGatewayRoute successfully', function(done) {
        //uncomment below and update the code to test createGatewayRoute
        //instance.createGatewayRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMesh', function() {
      it('should call createMesh successfully', function(done) {
        //uncomment below and update the code to test createMesh
        //instance.createMesh(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRoute', function() {
      it('should call createRoute successfully', function(done) {
        //uncomment below and update the code to test createRoute
        //instance.createRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVirtualGateway', function() {
      it('should call createVirtualGateway successfully', function(done) {
        //uncomment below and update the code to test createVirtualGateway
        //instance.createVirtualGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVirtualNode', function() {
      it('should call createVirtualNode successfully', function(done) {
        //uncomment below and update the code to test createVirtualNode
        //instance.createVirtualNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVirtualRouter', function() {
      it('should call createVirtualRouter successfully', function(done) {
        //uncomment below and update the code to test createVirtualRouter
        //instance.createVirtualRouter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVirtualService', function() {
      it('should call createVirtualService successfully', function(done) {
        //uncomment below and update the code to test createVirtualService
        //instance.createVirtualService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteGatewayRoute', function() {
      it('should call deleteGatewayRoute successfully', function(done) {
        //uncomment below and update the code to test deleteGatewayRoute
        //instance.deleteGatewayRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMesh', function() {
      it('should call deleteMesh successfully', function(done) {
        //uncomment below and update the code to test deleteMesh
        //instance.deleteMesh(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRoute', function() {
      it('should call deleteRoute successfully', function(done) {
        //uncomment below and update the code to test deleteRoute
        //instance.deleteRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVirtualGateway', function() {
      it('should call deleteVirtualGateway successfully', function(done) {
        //uncomment below and update the code to test deleteVirtualGateway
        //instance.deleteVirtualGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVirtualNode', function() {
      it('should call deleteVirtualNode successfully', function(done) {
        //uncomment below and update the code to test deleteVirtualNode
        //instance.deleteVirtualNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVirtualRouter', function() {
      it('should call deleteVirtualRouter successfully', function(done) {
        //uncomment below and update the code to test deleteVirtualRouter
        //instance.deleteVirtualRouter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVirtualService', function() {
      it('should call deleteVirtualService successfully', function(done) {
        //uncomment below and update the code to test deleteVirtualService
        //instance.deleteVirtualService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGatewayRoute', function() {
      it('should call describeGatewayRoute successfully', function(done) {
        //uncomment below and update the code to test describeGatewayRoute
        //instance.describeGatewayRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMesh', function() {
      it('should call describeMesh successfully', function(done) {
        //uncomment below and update the code to test describeMesh
        //instance.describeMesh(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRoute', function() {
      it('should call describeRoute successfully', function(done) {
        //uncomment below and update the code to test describeRoute
        //instance.describeRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVirtualGateway', function() {
      it('should call describeVirtualGateway successfully', function(done) {
        //uncomment below and update the code to test describeVirtualGateway
        //instance.describeVirtualGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVirtualNode', function() {
      it('should call describeVirtualNode successfully', function(done) {
        //uncomment below and update the code to test describeVirtualNode
        //instance.describeVirtualNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVirtualRouter', function() {
      it('should call describeVirtualRouter successfully', function(done) {
        //uncomment below and update the code to test describeVirtualRouter
        //instance.describeVirtualRouter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVirtualService', function() {
      it('should call describeVirtualService successfully', function(done) {
        //uncomment below and update the code to test describeVirtualService
        //instance.describeVirtualService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGatewayRoutes', function() {
      it('should call listGatewayRoutes successfully', function(done) {
        //uncomment below and update the code to test listGatewayRoutes
        //instance.listGatewayRoutes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMeshes', function() {
      it('should call listMeshes successfully', function(done) {
        //uncomment below and update the code to test listMeshes
        //instance.listMeshes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRoutes', function() {
      it('should call listRoutes successfully', function(done) {
        //uncomment below and update the code to test listRoutes
        //instance.listRoutes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVirtualGateways', function() {
      it('should call listVirtualGateways successfully', function(done) {
        //uncomment below and update the code to test listVirtualGateways
        //instance.listVirtualGateways(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVirtualNodes', function() {
      it('should call listVirtualNodes successfully', function(done) {
        //uncomment below and update the code to test listVirtualNodes
        //instance.listVirtualNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVirtualRouters', function() {
      it('should call listVirtualRouters successfully', function(done) {
        //uncomment below and update the code to test listVirtualRouters
        //instance.listVirtualRouters(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVirtualServices', function() {
      it('should call listVirtualServices successfully', function(done) {
        //uncomment below and update the code to test listVirtualServices
        //instance.listVirtualServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGatewayRoute', function() {
      it('should call updateGatewayRoute successfully', function(done) {
        //uncomment below and update the code to test updateGatewayRoute
        //instance.updateGatewayRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMesh', function() {
      it('should call updateMesh successfully', function(done) {
        //uncomment below and update the code to test updateMesh
        //instance.updateMesh(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoute', function() {
      it('should call updateRoute successfully', function(done) {
        //uncomment below and update the code to test updateRoute
        //instance.updateRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVirtualGateway', function() {
      it('should call updateVirtualGateway successfully', function(done) {
        //uncomment below and update the code to test updateVirtualGateway
        //instance.updateVirtualGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVirtualNode', function() {
      it('should call updateVirtualNode successfully', function(done) {
        //uncomment below and update the code to test updateVirtualNode
        //instance.updateVirtualNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVirtualRouter', function() {
      it('should call updateVirtualRouter successfully', function(done) {
        //uncomment below and update the code to test updateVirtualRouter
        //instance.updateVirtualRouter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVirtualService', function() {
      it('should call updateVirtualService successfully', function(done) {
        //uncomment below and update the code to test updateVirtualService
        //instance.updateVirtualService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
