/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsAppMesh);
  }
}(this, function(expect, AwsAppMesh) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsAppMesh.CreateVirtualRouterOutputVirtualRouter();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateVirtualRouterOutputVirtualRouter', function() {
    it('should create an instance of CreateVirtualRouterOutputVirtualRouter', function() {
      // uncomment below and update the code to test CreateVirtualRouterOutputVirtualRouter
      //var instance = new AwsAppMesh.CreateVirtualRouterOutputVirtualRouter();
      //expect(instance).to.be.a(AwsAppMesh.CreateVirtualRouterOutputVirtualRouter);
    });

    it('should have the property meshName (base name: "meshName")', function() {
      // uncomment below and update the code to test the property meshName
      //var instance = new AwsAppMesh.CreateVirtualRouterOutputVirtualRouter();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new AwsAppMesh.CreateVirtualRouterOutputVirtualRouter();
      //expect(instance).to.be();
    });

    it('should have the property spec (base name: "spec")', function() {
      // uncomment below and update the code to test the property spec
      //var instance = new AwsAppMesh.CreateVirtualRouterOutputVirtualRouter();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AwsAppMesh.CreateVirtualRouterOutputVirtualRouter();
      //expect(instance).to.be();
    });

    it('should have the property virtualRouterName (base name: "virtualRouterName")', function() {
      // uncomment below and update the code to test the property virtualRouterName
      //var instance = new AwsAppMesh.CreateVirtualRouterOutputVirtualRouter();
      //expect(instance).to.be();
    });

  });

}));
