/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TcpRouteMatch from './TcpRouteMatch';

/**
 * The TcpRouteMatch model module.
 * @module model/TcpRouteMatch
 * @version 2019-01-25
 */
class TcpRouteMatch {
    /**
     * Constructs a new <code>TcpRouteMatch</code>.
     * @alias module:model/TcpRouteMatch
     * @implements module:model/TcpRouteMatch
     */
    constructor() { 
        TcpRouteMatch.initialize(this);
        TcpRouteMatch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TcpRouteMatch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TcpRouteMatch} obj Optional instance to populate.
     * @return {module:model/TcpRouteMatch} The populated <code>TcpRouteMatch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TcpRouteMatch();
            TcpRouteMatch.constructFromObject(data, obj);

            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TcpRouteMatch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TcpRouteMatch</code>.
     */
    static validateJSON(data) {
        // validate the optional field `port`
        if (data['port']) { // data not null
          Number.validateJSON(data['port']);
        }

        return true;
    }


}



/**
 * @member {Number} port
 */
TcpRouteMatch.prototype['port'] = undefined;


// Implement TcpRouteMatch interface:
/**
 * @member {Number} port
 */
TcpRouteMatch.prototype['port'] = undefined;




export default TcpRouteMatch;

