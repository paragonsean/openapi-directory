/**
 * AWS App Mesh
 * <p>App Mesh is a service mesh based on the Envoy proxy that makes it easy to monitor and control microservices. App Mesh standardizes how your microservices communicate, giving you end-to-end visibility and helping to ensure high availability for your applications.</p> <p>App Mesh gives you consistent visibility and network traffic controls for every microservice in an application. You can use App Mesh with Amazon Web Services Fargate, Amazon ECS, Amazon EKS, Kubernetes on Amazon Web Services, and Amazon EC2.</p> <note> <p>App Mesh supports microservice applications that use service discovery naming for their components. For more information about service discovery on Amazon ECS, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html\">Service Discovery</a> in the <i>Amazon Elastic Container Service Developer Guide</i>. Kubernetes <code>kube-dns</code> and <code>coredns</code> are supported. For more information, see <a href=\"https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/\">DNS for Services and Pods</a> in the Kubernetes documentation.</p> </note>
 *
 * The version of the OpenAPI document: 2019-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateGatewayRouteOutput from '../model/CreateGatewayRouteOutput';
import CreateGatewayRouteRequest from '../model/CreateGatewayRouteRequest';
import CreateMeshOutput from '../model/CreateMeshOutput';
import CreateMeshRequest from '../model/CreateMeshRequest';
import CreateRouteOutput from '../model/CreateRouteOutput';
import CreateRouteRequest from '../model/CreateRouteRequest';
import CreateVirtualGatewayOutput from '../model/CreateVirtualGatewayOutput';
import CreateVirtualGatewayRequest from '../model/CreateVirtualGatewayRequest';
import CreateVirtualNodeOutput from '../model/CreateVirtualNodeOutput';
import CreateVirtualNodeRequest from '../model/CreateVirtualNodeRequest';
import CreateVirtualRouterOutput from '../model/CreateVirtualRouterOutput';
import CreateVirtualRouterRequest from '../model/CreateVirtualRouterRequest';
import CreateVirtualServiceOutput from '../model/CreateVirtualServiceOutput';
import CreateVirtualServiceRequest from '../model/CreateVirtualServiceRequest';
import DeleteGatewayRouteOutput from '../model/DeleteGatewayRouteOutput';
import DeleteMeshOutput from '../model/DeleteMeshOutput';
import DeleteRouteOutput from '../model/DeleteRouteOutput';
import DeleteVirtualGatewayOutput from '../model/DeleteVirtualGatewayOutput';
import DeleteVirtualNodeOutput from '../model/DeleteVirtualNodeOutput';
import DeleteVirtualRouterOutput from '../model/DeleteVirtualRouterOutput';
import DeleteVirtualServiceOutput from '../model/DeleteVirtualServiceOutput';
import DescribeGatewayRouteOutput from '../model/DescribeGatewayRouteOutput';
import DescribeMeshOutput from '../model/DescribeMeshOutput';
import DescribeRouteOutput from '../model/DescribeRouteOutput';
import DescribeVirtualGatewayOutput from '../model/DescribeVirtualGatewayOutput';
import DescribeVirtualNodeOutput from '../model/DescribeVirtualNodeOutput';
import DescribeVirtualRouterOutput from '../model/DescribeVirtualRouterOutput';
import DescribeVirtualServiceOutput from '../model/DescribeVirtualServiceOutput';
import ListGatewayRoutesOutput from '../model/ListGatewayRoutesOutput';
import ListMeshesOutput from '../model/ListMeshesOutput';
import ListRoutesOutput from '../model/ListRoutesOutput';
import ListTagsForResourceOutput from '../model/ListTagsForResourceOutput';
import ListVirtualGatewaysOutput from '../model/ListVirtualGatewaysOutput';
import ListVirtualNodesOutput from '../model/ListVirtualNodesOutput';
import ListVirtualRoutersOutput from '../model/ListVirtualRoutersOutput';
import ListVirtualServicesOutput from '../model/ListVirtualServicesOutput';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateGatewayRouteOutput from '../model/UpdateGatewayRouteOutput';
import UpdateGatewayRouteRequest from '../model/UpdateGatewayRouteRequest';
import UpdateMeshOutput from '../model/UpdateMeshOutput';
import UpdateMeshRequest from '../model/UpdateMeshRequest';
import UpdateRouteOutput from '../model/UpdateRouteOutput';
import UpdateRouteRequest from '../model/UpdateRouteRequest';
import UpdateVirtualGatewayOutput from '../model/UpdateVirtualGatewayOutput';
import UpdateVirtualGatewayRequest from '../model/UpdateVirtualGatewayRequest';
import UpdateVirtualNodeOutput from '../model/UpdateVirtualNodeOutput';
import UpdateVirtualNodeRequest from '../model/UpdateVirtualNodeRequest';
import UpdateVirtualRouterOutput from '../model/UpdateVirtualRouterOutput';
import UpdateVirtualRouterRequest from '../model/UpdateVirtualRouterRequest';
import UpdateVirtualServiceOutput from '../model/UpdateVirtualServiceOutput';
import UpdateVirtualServiceRequest from '../model/UpdateVirtualServiceRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-01-25
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGatewayRoute operation.
     * @callback module:api/DefaultApi~createGatewayRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGatewayRouteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a gateway route.</p> <p>A gateway route is attached to a virtual gateway and routes traffic to an existing virtual service. If a route matches a request, it can distribute traffic to a target virtual service.</p> <p>For more information about gateway routes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html\">Gateway routes</a>.</p>
     * @param {String} meshName The name of the service mesh to create the gateway route in.
     * @param {String} virtualGatewayName The name of the virtual gateway to associate the gateway route with. If the virtual gateway is in a shared mesh, then you must be the owner of the virtual gateway resource.
     * @param {module:model/CreateGatewayRouteRequest} createGatewayRouteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~createGatewayRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGatewayRouteOutput}
     */
    createGatewayRoute(meshName, virtualGatewayName, createGatewayRouteRequest, opts, callback) {
      opts = opts || {};
      let postBody = createGatewayRouteRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling createGatewayRoute");
      }
      // verify the required parameter 'virtualGatewayName' is set
      if (virtualGatewayName === undefined || virtualGatewayName === null) {
        throw new Error("Missing the required parameter 'virtualGatewayName' when calling createGatewayRoute");
      }
      // verify the required parameter 'createGatewayRouteRequest' is set
      if (createGatewayRouteRequest === undefined || createGatewayRouteRequest === null) {
        throw new Error("Missing the required parameter 'createGatewayRouteRequest' when calling createGatewayRoute");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualGatewayName': virtualGatewayName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGatewayRouteOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMesh operation.
     * @callback module:api/DefaultApi~createMeshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMeshOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a service mesh.</p> <p> A service mesh is a logical boundary for network traffic between services that are represented by resources within the mesh. After you create your service mesh, you can create virtual services, virtual nodes, virtual routers, and routes to distribute traffic between the applications in your mesh.</p> <p>For more information about service meshes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html\">Service meshes</a>.</p>
     * @param {module:model/CreateMeshRequest} createMeshRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMeshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMeshOutput}
     */
    createMesh(createMeshRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMeshRequest;
      // verify the required parameter 'createMeshRequest' is set
      if (createMeshRequest === undefined || createMeshRequest === null) {
        throw new Error("Missing the required parameter 'createMeshRequest' when calling createMesh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMeshOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRoute operation.
     * @callback module:api/DefaultApi~createRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRouteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a route that is associated with a virtual router.</p> <p> You can route several different protocols and define a retry policy for a route. Traffic can be routed to one or more virtual nodes.</p> <p>For more information about routes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html\">Routes</a>.</p>
     * @param {String} meshName The name of the service mesh to create the route in.
     * @param {String} virtualRouterName The name of the virtual router in which to create the route. If the virtual router is in a shared mesh, then you must be the owner of the virtual router resource.
     * @param {module:model/CreateRouteRequest} createRouteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~createRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRouteOutput}
     */
    createRoute(meshName, virtualRouterName, createRouteRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRouteRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling createRoute");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling createRoute");
      }
      // verify the required parameter 'createRouteRequest' is set
      if (createRouteRequest === undefined || createRouteRequest === null) {
        throw new Error("Missing the required parameter 'createRouteRequest' when calling createRoute");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRouteOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVirtualGateway operation.
     * @callback module:api/DefaultApi~createVirtualGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVirtualGatewayOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a virtual gateway.</p> <p>A virtual gateway allows resources outside your mesh to communicate to resources that are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which represents an Envoy running with an application, a virtual gateway represents Envoy deployed by itself.</p> <p>For more information about virtual gateways, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html\">Virtual gateways</a>. </p>
     * @param {String} meshName The name of the service mesh to create the virtual gateway in.
     * @param {module:model/CreateVirtualGatewayRequest} createVirtualGatewayRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~createVirtualGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVirtualGatewayOutput}
     */
    createVirtualGateway(meshName, createVirtualGatewayRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVirtualGatewayRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling createVirtualGateway");
      }
      // verify the required parameter 'createVirtualGatewayRequest' is set
      if (createVirtualGatewayRequest === undefined || createVirtualGatewayRequest === null) {
        throw new Error("Missing the required parameter 'createVirtualGatewayRequest' when calling createVirtualGateway");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVirtualGatewayOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualGateways', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVirtualNode operation.
     * @callback module:api/DefaultApi~createVirtualNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVirtualNodeOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a virtual node within a service mesh.</p> <p> A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS service or a Kubernetes deployment. When you create a virtual node, you can specify the service discovery information for your task group, and whether the proxy running in a task group will communicate with other proxies using Transport Layer Security (TLS).</p> <p>You define a <code>listener</code> for any inbound traffic that your virtual node expects. Any virtual service that your virtual node expects to communicate to is specified as a <code>backend</code>.</p> <p>The response metadata for your new virtual node contains the <code>arn</code> that is associated with the virtual node. Set this value to the full ARN; for example, <code>arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp</code>) as the <code>APPMESH_RESOURCE_ARN</code> environment variable for your task group's Envoy proxy container in your task definition or pod spec. This is then mapped to the <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p> <note> <p>By default, App Mesh uses the name of the resource you specified in <code>APPMESH_RESOURCE_ARN</code> when Envoy is referring to itself in metrics and traces. You can override this behavior by setting the <code>APPMESH_RESOURCE_CLUSTER</code> environment variable with your own name.</p> </note> <p>For more information about virtual nodes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html\">Virtual nodes</a>. You must be using <code>1.15.0</code> or later of the Envoy image when setting these variables. For more information aboutApp Mesh Envoy variables, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html\">Envoy image</a> in the App Mesh User Guide.</p>
     * @param {String} meshName The name of the service mesh to create the virtual node in.
     * @param {module:model/CreateVirtualNodeRequest} createVirtualNodeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~createVirtualNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVirtualNodeOutput}
     */
    createVirtualNode(meshName, createVirtualNodeRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVirtualNodeRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling createVirtualNode");
      }
      // verify the required parameter 'createVirtualNodeRequest' is set
      if (createVirtualNodeRequest === undefined || createVirtualNodeRequest === null) {
        throw new Error("Missing the required parameter 'createVirtualNodeRequest' when calling createVirtualNode");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVirtualNodeOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualNodes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVirtualRouter operation.
     * @callback module:api/DefaultApi~createVirtualRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVirtualRouterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a virtual router within a service mesh.</p> <p>Specify a <code>listener</code> for any inbound traffic that your virtual router receives. Create a virtual router for each protocol and port that you need to route. Virtual routers handle traffic for one or more virtual services within your mesh. After you create your virtual router, create and associate routes for your virtual router that direct incoming requests to different virtual nodes.</p> <p>For more information about virtual routers, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html\">Virtual routers</a>.</p>
     * @param {String} meshName The name of the service mesh to create the virtual router in.
     * @param {module:model/CreateVirtualRouterRequest} createVirtualRouterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~createVirtualRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVirtualRouterOutput}
     */
    createVirtualRouter(meshName, createVirtualRouterRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVirtualRouterRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling createVirtualRouter");
      }
      // verify the required parameter 'createVirtualRouterRequest' is set
      if (createVirtualRouterRequest === undefined || createVirtualRouterRequest === null) {
        throw new Error("Missing the required parameter 'createVirtualRouterRequest' when calling createVirtualRouter");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVirtualRouterOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualRouters', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVirtualService operation.
     * @callback module:api/DefaultApi~createVirtualServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVirtualServiceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a virtual service within a service mesh.</p> <p>A virtual service is an abstraction of a real service that is provided by a virtual node directly or indirectly by means of a virtual router. Dependent services call your virtual service by its <code>virtualServiceName</code>, and those requests are routed to the virtual node or virtual router that is specified as the provider for the virtual service.</p> <p>For more information about virtual services, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html\">Virtual services</a>.</p>
     * @param {String} meshName The name of the service mesh to create the virtual service in.
     * @param {module:model/CreateVirtualServiceRequest} createVirtualServiceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~createVirtualServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVirtualServiceOutput}
     */
    createVirtualService(meshName, createVirtualServiceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVirtualServiceRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling createVirtualService");
      }
      // verify the required parameter 'createVirtualServiceRequest' is set
      if (createVirtualServiceRequest === undefined || createVirtualServiceRequest === null) {
        throw new Error("Missing the required parameter 'createVirtualServiceRequest' when calling createVirtualService");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVirtualServiceOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualServices', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGatewayRoute operation.
     * @callback module:api/DefaultApi~deleteGatewayRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteGatewayRouteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing gateway route.
     * @param {String} gatewayRouteName The name of the gateway route to delete.
     * @param {String} meshName The name of the service mesh to delete the gateway route from.
     * @param {String} virtualGatewayName The name of the virtual gateway to delete the route from.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~deleteGatewayRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteGatewayRouteOutput}
     */
    deleteGatewayRoute(gatewayRouteName, meshName, virtualGatewayName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gatewayRouteName' is set
      if (gatewayRouteName === undefined || gatewayRouteName === null) {
        throw new Error("Missing the required parameter 'gatewayRouteName' when calling deleteGatewayRoute");
      }
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling deleteGatewayRoute");
      }
      // verify the required parameter 'virtualGatewayName' is set
      if (virtualGatewayName === undefined || virtualGatewayName === null) {
        throw new Error("Missing the required parameter 'virtualGatewayName' when calling deleteGatewayRoute");
      }

      let pathParams = {
        'gatewayRouteName': gatewayRouteName,
        'meshName': meshName,
        'virtualGatewayName': virtualGatewayName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteGatewayRouteOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMesh operation.
     * @callback module:api/DefaultApi~deleteMeshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteMeshOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an existing service mesh.</p> <p>You must delete all resources (virtual services, routes, virtual routers, and virtual nodes) in the service mesh before you can delete the mesh itself.</p>
     * @param {String} meshName The name of the service mesh to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMeshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteMeshOutput}
     */
    deleteMesh(meshName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling deleteMesh");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteMeshOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoute operation.
     * @callback module:api/DefaultApi~deleteRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRouteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing route.
     * @param {String} meshName The name of the service mesh to delete the route in.
     * @param {String} routeName The name of the route to delete.
     * @param {String} virtualRouterName The name of the virtual router to delete the route in.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~deleteRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRouteOutput}
     */
    deleteRoute(meshName, routeName, virtualRouterName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling deleteRoute");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling deleteRoute");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling deleteRoute");
      }

      let pathParams = {
        'meshName': meshName,
        'routeName': routeName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteRouteOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVirtualGateway operation.
     * @callback module:api/DefaultApi~deleteVirtualGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVirtualGatewayOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway routes are associated to it.
     * @param {String} meshName The name of the service mesh to delete the virtual gateway from.
     * @param {String} virtualGatewayName The name of the virtual gateway to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~deleteVirtualGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVirtualGatewayOutput}
     */
    deleteVirtualGateway(meshName, virtualGatewayName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling deleteVirtualGateway");
      }
      // verify the required parameter 'virtualGatewayName' is set
      if (virtualGatewayName === undefined || virtualGatewayName === null) {
        throw new Error("Missing the required parameter 'virtualGatewayName' when calling deleteVirtualGateway");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualGatewayName': virtualGatewayName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVirtualGatewayOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVirtualNode operation.
     * @callback module:api/DefaultApi~deleteVirtualNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVirtualNodeOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an existing virtual node.</p> <p>You must delete any virtual services that list a virtual node as a service provider before you can delete the virtual node itself.</p>
     * @param {String} meshName The name of the service mesh to delete the virtual node in.
     * @param {String} virtualNodeName The name of the virtual node to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~deleteVirtualNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVirtualNodeOutput}
     */
    deleteVirtualNode(meshName, virtualNodeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling deleteVirtualNode");
      }
      // verify the required parameter 'virtualNodeName' is set
      if (virtualNodeName === undefined || virtualNodeName === null) {
        throw new Error("Missing the required parameter 'virtualNodeName' when calling deleteVirtualNode");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualNodeName': virtualNodeName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVirtualNodeOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVirtualRouter operation.
     * @callback module:api/DefaultApi~deleteVirtualRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVirtualRouterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an existing virtual router.</p> <p>You must delete any routes associated with the virtual router before you can delete the router itself.</p>
     * @param {String} meshName The name of the service mesh to delete the virtual router in.
     * @param {String} virtualRouterName The name of the virtual router to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~deleteVirtualRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVirtualRouterOutput}
     */
    deleteVirtualRouter(meshName, virtualRouterName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling deleteVirtualRouter");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling deleteVirtualRouter");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVirtualRouterOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVirtualService operation.
     * @callback module:api/DefaultApi~deleteVirtualServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVirtualServiceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing virtual service.
     * @param {String} meshName The name of the service mesh to delete the virtual service in.
     * @param {String} virtualServiceName The name of the virtual service to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~deleteVirtualServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVirtualServiceOutput}
     */
    deleteVirtualService(meshName, virtualServiceName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling deleteVirtualService");
      }
      // verify the required parameter 'virtualServiceName' is set
      if (virtualServiceName === undefined || virtualServiceName === null) {
        throw new Error("Missing the required parameter 'virtualServiceName' when calling deleteVirtualService");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualServiceName': virtualServiceName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVirtualServiceOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeGatewayRoute operation.
     * @callback module:api/DefaultApi~describeGatewayRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeGatewayRouteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing gateway route.
     * @param {String} gatewayRouteName The name of the gateway route to describe.
     * @param {String} meshName The name of the service mesh that the gateway route resides in.
     * @param {String} virtualGatewayName The name of the virtual gateway that the gateway route is associated with.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~describeGatewayRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeGatewayRouteOutput}
     */
    describeGatewayRoute(gatewayRouteName, meshName, virtualGatewayName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gatewayRouteName' is set
      if (gatewayRouteName === undefined || gatewayRouteName === null) {
        throw new Error("Missing the required parameter 'gatewayRouteName' when calling describeGatewayRoute");
      }
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling describeGatewayRoute");
      }
      // verify the required parameter 'virtualGatewayName' is set
      if (virtualGatewayName === undefined || virtualGatewayName === null) {
        throw new Error("Missing the required parameter 'virtualGatewayName' when calling describeGatewayRoute");
      }

      let pathParams = {
        'gatewayRouteName': gatewayRouteName,
        'meshName': meshName,
        'virtualGatewayName': virtualGatewayName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeGatewayRouteOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeMesh operation.
     * @callback module:api/DefaultApi~describeMeshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeMeshOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing service mesh.
     * @param {String} meshName The name of the service mesh to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~describeMeshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeMeshOutput}
     */
    describeMesh(meshName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling describeMesh");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeMeshOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRoute operation.
     * @callback module:api/DefaultApi~describeRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRouteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing route.
     * @param {String} meshName The name of the service mesh that the route resides in.
     * @param {String} routeName The name of the route to describe.
     * @param {String} virtualRouterName The name of the virtual router that the route is associated with.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~describeRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRouteOutput}
     */
    describeRoute(meshName, routeName, virtualRouterName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling describeRoute");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling describeRoute");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling describeRoute");
      }

      let pathParams = {
        'meshName': meshName,
        'routeName': routeName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeRouteOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVirtualGateway operation.
     * @callback module:api/DefaultApi~describeVirtualGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVirtualGatewayOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing virtual gateway.
     * @param {String} meshName The name of the service mesh that the gateway route resides in.
     * @param {String} virtualGatewayName The name of the virtual gateway to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~describeVirtualGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVirtualGatewayOutput}
     */
    describeVirtualGateway(meshName, virtualGatewayName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling describeVirtualGateway");
      }
      // verify the required parameter 'virtualGatewayName' is set
      if (virtualGatewayName === undefined || virtualGatewayName === null) {
        throw new Error("Missing the required parameter 'virtualGatewayName' when calling describeVirtualGateway");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualGatewayName': virtualGatewayName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeVirtualGatewayOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVirtualNode operation.
     * @callback module:api/DefaultApi~describeVirtualNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVirtualNodeOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing virtual node.
     * @param {String} meshName The name of the service mesh that the virtual node resides in.
     * @param {String} virtualNodeName The name of the virtual node to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~describeVirtualNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVirtualNodeOutput}
     */
    describeVirtualNode(meshName, virtualNodeName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling describeVirtualNode");
      }
      // verify the required parameter 'virtualNodeName' is set
      if (virtualNodeName === undefined || virtualNodeName === null) {
        throw new Error("Missing the required parameter 'virtualNodeName' when calling describeVirtualNode");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualNodeName': virtualNodeName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeVirtualNodeOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVirtualRouter operation.
     * @callback module:api/DefaultApi~describeVirtualRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVirtualRouterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing virtual router.
     * @param {String} meshName The name of the service mesh that the virtual router resides in.
     * @param {String} virtualRouterName The name of the virtual router to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~describeVirtualRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVirtualRouterOutput}
     */
    describeVirtualRouter(meshName, virtualRouterName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling describeVirtualRouter");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling describeVirtualRouter");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeVirtualRouterOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVirtualService operation.
     * @callback module:api/DefaultApi~describeVirtualServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVirtualServiceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an existing virtual service.
     * @param {String} meshName The name of the service mesh that the virtual service resides in.
     * @param {String} virtualServiceName The name of the virtual service to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~describeVirtualServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVirtualServiceOutput}
     */
    describeVirtualService(meshName, virtualServiceName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling describeVirtualService");
      }
      // verify the required parameter 'virtualServiceName' is set
      if (virtualServiceName === undefined || virtualServiceName === null) {
        throw new Error("Missing the required parameter 'virtualServiceName' when calling describeVirtualService");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualServiceName': virtualServiceName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeVirtualServiceOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGatewayRoutes operation.
     * @callback module:api/DefaultApi~listGatewayRoutesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListGatewayRoutesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing gateway routes that are associated to a virtual gateway.
     * @param {String} meshName The name of the service mesh to list gateway routes in.
     * @param {String} virtualGatewayName The name of the virtual gateway to list gateway routes in.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] The maximum number of results returned by <code>ListGatewayRoutes</code> in paginated output. When you use this parameter, <code>ListGatewayRoutes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListGatewayRoutes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListGatewayRoutes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {String} [nextToken] The <code>nextToken</code> value returned from a previous paginated <code>ListGatewayRoutes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
     * @param {module:api/DefaultApi~listGatewayRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListGatewayRoutesOutput}
     */
    listGatewayRoutes(meshName, virtualGatewayName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling listGatewayRoutes");
      }
      // verify the required parameter 'virtualGatewayName' is set
      if (virtualGatewayName === undefined || virtualGatewayName === null) {
        throw new Error("Missing the required parameter 'virtualGatewayName' when calling listGatewayRoutes");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualGatewayName': virtualGatewayName
      };
      let queryParams = {
        'limit': opts['limit'],
        'meshOwner': opts['meshOwner'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListGatewayRoutesOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMeshes operation.
     * @callback module:api/DefaultApi~listMeshesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMeshesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing service meshes.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] The maximum number of results returned by <code>ListMeshes</code> in paginated output. When you use this parameter, <code>ListMeshes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListMeshes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListMeshes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.
     * @param {String} [nextToken] <p>The <code>nextToken</code> value returned from a previous paginated <code>ListMeshes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.</p> <note> <p>This token should be treated as an opaque identifier that is used only to retrieve the next items in a list and not for other programmatic purposes.</p> </note>
     * @param {module:api/DefaultApi~listMeshesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMeshesOutput}
     */
    listMeshes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMeshesOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoutes operation.
     * @callback module:api/DefaultApi~listRoutesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRoutesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing routes in a service mesh.
     * @param {String} meshName The name of the service mesh to list routes in.
     * @param {String} virtualRouterName The name of the virtual router to list routes in.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] The maximum number of results returned by <code>ListRoutes</code> in paginated output. When you use this parameter, <code>ListRoutes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListRoutes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListRoutes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {String} [nextToken] The <code>nextToken</code> value returned from a previous paginated <code>ListRoutes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
     * @param {module:api/DefaultApi~listRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRoutesOutput}
     */
    listRoutes(meshName, virtualRouterName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling listRoutes");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling listRoutes");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
        'limit': opts['limit'],
        'meshOwner': opts['meshOwner'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRoutesOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the tags for an App Mesh resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) that identifies the resource to list the tags for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] The maximum number of tag results returned by <code>ListTagsForResource</code> in paginated output. When this parameter is used, <code>ListTagsForResource</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListTagsForResource</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListTagsForResource</code> returns up to 100 results and a <code>nextToken</code> value if applicable.
     * @param {String} [nextToken] The <code>nextToken</code> value returned from a previous paginated <code>ListTagsForResource</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceOutput}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'nextToken': opts['nextToken'],
        'resourceArn': resourceArn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceOutput;
      return this.apiClient.callApi(
        '/v20190125/tags#resourceArn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVirtualGateways operation.
     * @callback module:api/DefaultApi~listVirtualGatewaysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVirtualGatewaysOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing virtual gateways in a service mesh.
     * @param {String} meshName The name of the service mesh to list virtual gateways in.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] The maximum number of results returned by <code>ListVirtualGateways</code> in paginated output. When you use this parameter, <code>ListVirtualGateways</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualGateways</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualGateways</code> returns up to 100 results and a <code>nextToken</code> value if applicable.
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {String} [nextToken] The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualGateways</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
     * @param {module:api/DefaultApi~listVirtualGatewaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVirtualGatewaysOutput}
     */
    listVirtualGateways(meshName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling listVirtualGateways");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
        'limit': opts['limit'],
        'meshOwner': opts['meshOwner'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVirtualGatewaysOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualGateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVirtualNodes operation.
     * @callback module:api/DefaultApi~listVirtualNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVirtualNodesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing virtual nodes.
     * @param {String} meshName The name of the service mesh to list virtual nodes in.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] The maximum number of results returned by <code>ListVirtualNodes</code> in paginated output. When you use this parameter, <code>ListVirtualNodes</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualNodes</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualNodes</code> returns up to 100 results and a <code>nextToken</code> value if applicable.
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {String} [nextToken] The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualNodes</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
     * @param {module:api/DefaultApi~listVirtualNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVirtualNodesOutput}
     */
    listVirtualNodes(meshName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling listVirtualNodes");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
        'limit': opts['limit'],
        'meshOwner': opts['meshOwner'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVirtualNodesOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualNodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVirtualRouters operation.
     * @callback module:api/DefaultApi~listVirtualRoutersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVirtualRoutersOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing virtual routers in a service mesh.
     * @param {String} meshName The name of the service mesh to list virtual routers in.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] The maximum number of results returned by <code>ListVirtualRouters</code> in paginated output. When you use this parameter, <code>ListVirtualRouters</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualRouters</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualRouters</code> returns up to 100 results and a <code>nextToken</code> value if applicable.
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {String} [nextToken] The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualRouters</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
     * @param {module:api/DefaultApi~listVirtualRoutersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVirtualRoutersOutput}
     */
    listVirtualRouters(meshName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling listVirtualRouters");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
        'limit': opts['limit'],
        'meshOwner': opts['meshOwner'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVirtualRoutersOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualRouters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVirtualServices operation.
     * @callback module:api/DefaultApi~listVirtualServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVirtualServicesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of existing virtual services in a service mesh.
     * @param {String} meshName The name of the service mesh to list virtual services in.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] The maximum number of results returned by <code>ListVirtualServices</code> in paginated output. When you use this parameter, <code>ListVirtualServices</code> returns only <code>limit</code> results in a single page along with a <code>nextToken</code> response element. You can see the remaining results of the initial request by sending another <code>ListVirtualServices</code> request with the returned <code>nextToken</code> value. This value can be between 1 and 100. If you don't use this parameter, <code>ListVirtualServices</code> returns up to 100 results and a <code>nextToken</code> value if applicable.
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {String} [nextToken] The <code>nextToken</code> value returned from a previous paginated <code>ListVirtualServices</code> request where <code>limit</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>nextToken</code> value.
     * @param {module:api/DefaultApi~listVirtualServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVirtualServicesOutput}
     */
    listVirtualServices(meshName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling listVirtualServices");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
        'limit': opts['limit'],
        'meshOwner': opts['meshOwner'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVirtualServicesOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource aren't specified in the request parameters, they aren't changed. When a resource is deleted, the tags associated with that resource are also deleted.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource to add tags to.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'resourceArn': resourceArn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v20190125/tag#resourceArn', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes specified tags from a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource to delete tags from.
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'resourceArn': resourceArn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v20190125/untag#resourceArn', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGatewayRoute operation.
     * @callback module:api/DefaultApi~updateGatewayRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateGatewayRouteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing gateway route that is associated to a specified virtual gateway in a service mesh.
     * @param {String} gatewayRouteName The name of the gateway route to update.
     * @param {String} meshName The name of the service mesh that the gateway route resides in.
     * @param {String} virtualGatewayName The name of the virtual gateway that the gateway route is associated with.
     * @param {module:model/UpdateGatewayRouteRequest} updateGatewayRouteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~updateGatewayRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateGatewayRouteOutput}
     */
    updateGatewayRoute(gatewayRouteName, meshName, virtualGatewayName, updateGatewayRouteRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateGatewayRouteRequest;
      // verify the required parameter 'gatewayRouteName' is set
      if (gatewayRouteName === undefined || gatewayRouteName === null) {
        throw new Error("Missing the required parameter 'gatewayRouteName' when calling updateGatewayRoute");
      }
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling updateGatewayRoute");
      }
      // verify the required parameter 'virtualGatewayName' is set
      if (virtualGatewayName === undefined || virtualGatewayName === null) {
        throw new Error("Missing the required parameter 'virtualGatewayName' when calling updateGatewayRoute");
      }
      // verify the required parameter 'updateGatewayRouteRequest' is set
      if (updateGatewayRouteRequest === undefined || updateGatewayRouteRequest === null) {
        throw new Error("Missing the required parameter 'updateGatewayRouteRequest' when calling updateGatewayRoute");
      }

      let pathParams = {
        'gatewayRouteName': gatewayRouteName,
        'meshName': meshName,
        'virtualGatewayName': virtualGatewayName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGatewayRouteOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMesh operation.
     * @callback module:api/DefaultApi~updateMeshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMeshOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing service mesh.
     * @param {String} meshName The name of the service mesh to update.
     * @param {module:model/UpdateMeshRequest} updateMeshRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMeshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMeshOutput}
     */
    updateMesh(meshName, updateMeshRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMeshRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling updateMesh");
      }
      // verify the required parameter 'updateMeshRequest' is set
      if (updateMeshRequest === undefined || updateMeshRequest === null) {
        throw new Error("Missing the required parameter 'updateMeshRequest' when calling updateMesh");
      }

      let pathParams = {
        'meshName': meshName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMeshOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoute operation.
     * @callback module:api/DefaultApi~updateRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRouteOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing route for a specified service mesh and virtual router.
     * @param {String} meshName The name of the service mesh that the route resides in.
     * @param {String} routeName The name of the route to update.
     * @param {String} virtualRouterName The name of the virtual router that the route is associated with.
     * @param {module:model/UpdateRouteRequest} updateRouteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~updateRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRouteOutput}
     */
    updateRoute(meshName, routeName, virtualRouterName, updateRouteRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRouteRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling updateRoute");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling updateRoute");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling updateRoute");
      }
      // verify the required parameter 'updateRouteRequest' is set
      if (updateRouteRequest === undefined || updateRouteRequest === null) {
        throw new Error("Missing the required parameter 'updateRouteRequest' when calling updateRoute");
      }

      let pathParams = {
        'meshName': meshName,
        'routeName': routeName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRouteOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVirtualGateway operation.
     * @callback module:api/DefaultApi~updateVirtualGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVirtualGatewayOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing virtual gateway in a specified service mesh.
     * @param {String} meshName The name of the service mesh that the virtual gateway resides in.
     * @param {String} virtualGatewayName The name of the virtual gateway to update.
     * @param {module:model/UpdateVirtualGatewayRequest} updateVirtualGatewayRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~updateVirtualGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVirtualGatewayOutput}
     */
    updateVirtualGateway(meshName, virtualGatewayName, updateVirtualGatewayRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVirtualGatewayRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling updateVirtualGateway");
      }
      // verify the required parameter 'virtualGatewayName' is set
      if (virtualGatewayName === undefined || virtualGatewayName === null) {
        throw new Error("Missing the required parameter 'virtualGatewayName' when calling updateVirtualGateway");
      }
      // verify the required parameter 'updateVirtualGatewayRequest' is set
      if (updateVirtualGatewayRequest === undefined || updateVirtualGatewayRequest === null) {
        throw new Error("Missing the required parameter 'updateVirtualGatewayRequest' when calling updateVirtualGateway");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualGatewayName': virtualGatewayName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVirtualGatewayOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVirtualNode operation.
     * @callback module:api/DefaultApi~updateVirtualNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVirtualNodeOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing virtual node in a specified service mesh.
     * @param {String} meshName The name of the service mesh that the virtual node resides in.
     * @param {String} virtualNodeName The name of the virtual node to update.
     * @param {module:model/UpdateVirtualNodeRequest} updateVirtualNodeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~updateVirtualNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVirtualNodeOutput}
     */
    updateVirtualNode(meshName, virtualNodeName, updateVirtualNodeRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVirtualNodeRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling updateVirtualNode");
      }
      // verify the required parameter 'virtualNodeName' is set
      if (virtualNodeName === undefined || virtualNodeName === null) {
        throw new Error("Missing the required parameter 'virtualNodeName' when calling updateVirtualNode");
      }
      // verify the required parameter 'updateVirtualNodeRequest' is set
      if (updateVirtualNodeRequest === undefined || updateVirtualNodeRequest === null) {
        throw new Error("Missing the required parameter 'updateVirtualNodeRequest' when calling updateVirtualNode");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualNodeName': virtualNodeName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVirtualNodeOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVirtualRouter operation.
     * @callback module:api/DefaultApi~updateVirtualRouterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVirtualRouterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing virtual router in a specified service mesh.
     * @param {String} meshName The name of the service mesh that the virtual router resides in.
     * @param {String} virtualRouterName The name of the virtual router to update.
     * @param {module:model/UpdateVirtualRouterRequest} updateVirtualRouterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~updateVirtualRouterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVirtualRouterOutput}
     */
    updateVirtualRouter(meshName, virtualRouterName, updateVirtualRouterRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVirtualRouterRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling updateVirtualRouter");
      }
      // verify the required parameter 'virtualRouterName' is set
      if (virtualRouterName === undefined || virtualRouterName === null) {
        throw new Error("Missing the required parameter 'virtualRouterName' when calling updateVirtualRouter");
      }
      // verify the required parameter 'updateVirtualRouterRequest' is set
      if (updateVirtualRouterRequest === undefined || updateVirtualRouterRequest === null) {
        throw new Error("Missing the required parameter 'updateVirtualRouterRequest' when calling updateVirtualRouter");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualRouterName': virtualRouterName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVirtualRouterOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVirtualService operation.
     * @callback module:api/DefaultApi~updateVirtualServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVirtualServiceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing virtual service in a specified service mesh.
     * @param {String} meshName The name of the service mesh that the virtual service resides in.
     * @param {String} virtualServiceName The name of the virtual service to update.
     * @param {module:model/UpdateVirtualServiceRequest} updateVirtualServiceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [meshOwner] The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>.
     * @param {module:api/DefaultApi~updateVirtualServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVirtualServiceOutput}
     */
    updateVirtualService(meshName, virtualServiceName, updateVirtualServiceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVirtualServiceRequest;
      // verify the required parameter 'meshName' is set
      if (meshName === undefined || meshName === null) {
        throw new Error("Missing the required parameter 'meshName' when calling updateVirtualService");
      }
      // verify the required parameter 'virtualServiceName' is set
      if (virtualServiceName === undefined || virtualServiceName === null) {
        throw new Error("Missing the required parameter 'virtualServiceName' when calling updateVirtualService");
      }
      // verify the required parameter 'updateVirtualServiceRequest' is set
      if (updateVirtualServiceRequest === undefined || updateVirtualServiceRequest === null) {
        throw new Error("Missing the required parameter 'updateVirtualServiceRequest' when calling updateVirtualService");
      }

      let pathParams = {
        'meshName': meshName,
        'virtualServiceName': virtualServiceName
      };
      let queryParams = {
        'meshOwner': opts['meshOwner']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVirtualServiceOutput;
      return this.apiClient.callApi(
        '/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
