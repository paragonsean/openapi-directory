# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.listener_connection_pool import ListenerConnectionPool
from openapi_server.models.listener_health_check import ListenerHealthCheck
from openapi_server.models.listener_outlier_detection import ListenerOutlierDetection
from openapi_server.models.listener_port_mapping import ListenerPortMapping
from openapi_server.models.listener_timeout import ListenerTimeout
from openapi_server.models.listener_tls import ListenerTls
from openapi_server import util


class Listener(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_pool: ListenerConnectionPool=None, health_check: ListenerHealthCheck=None, outlier_detection: ListenerOutlierDetection=None, port_mapping: ListenerPortMapping=None, timeout: ListenerTimeout=None, tls: ListenerTls=None):
        """Listener - a model defined in OpenAPI

        :param connection_pool: The connection_pool of this Listener.
        :param health_check: The health_check of this Listener.
        :param outlier_detection: The outlier_detection of this Listener.
        :param port_mapping: The port_mapping of this Listener.
        :param timeout: The timeout of this Listener.
        :param tls: The tls of this Listener.
        """
        self.openapi_types = {
            'connection_pool': ListenerConnectionPool,
            'health_check': ListenerHealthCheck,
            'outlier_detection': ListenerOutlierDetection,
            'port_mapping': ListenerPortMapping,
            'timeout': ListenerTimeout,
            'tls': ListenerTls
        }

        self.attribute_map = {
            'connection_pool': 'connectionPool',
            'health_check': 'healthCheck',
            'outlier_detection': 'outlierDetection',
            'port_mapping': 'portMapping',
            'timeout': 'timeout',
            'tls': 'tls'
        }

        self._connection_pool = connection_pool
        self._health_check = health_check
        self._outlier_detection = outlier_detection
        self._port_mapping = port_mapping
        self._timeout = timeout
        self._tls = tls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Listener':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Listener of this Listener.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_pool(self):
        """Gets the connection_pool of this Listener.


        :return: The connection_pool of this Listener.
        :rtype: ListenerConnectionPool
        """
        return self._connection_pool

    @connection_pool.setter
    def connection_pool(self, connection_pool):
        """Sets the connection_pool of this Listener.


        :param connection_pool: The connection_pool of this Listener.
        :type connection_pool: ListenerConnectionPool
        """

        self._connection_pool = connection_pool

    @property
    def health_check(self):
        """Gets the health_check of this Listener.


        :return: The health_check of this Listener.
        :rtype: ListenerHealthCheck
        """
        return self._health_check

    @health_check.setter
    def health_check(self, health_check):
        """Sets the health_check of this Listener.


        :param health_check: The health_check of this Listener.
        :type health_check: ListenerHealthCheck
        """

        self._health_check = health_check

    @property
    def outlier_detection(self):
        """Gets the outlier_detection of this Listener.


        :return: The outlier_detection of this Listener.
        :rtype: ListenerOutlierDetection
        """
        return self._outlier_detection

    @outlier_detection.setter
    def outlier_detection(self, outlier_detection):
        """Sets the outlier_detection of this Listener.


        :param outlier_detection: The outlier_detection of this Listener.
        :type outlier_detection: ListenerOutlierDetection
        """

        self._outlier_detection = outlier_detection

    @property
    def port_mapping(self):
        """Gets the port_mapping of this Listener.


        :return: The port_mapping of this Listener.
        :rtype: ListenerPortMapping
        """
        return self._port_mapping

    @port_mapping.setter
    def port_mapping(self, port_mapping):
        """Sets the port_mapping of this Listener.


        :param port_mapping: The port_mapping of this Listener.
        :type port_mapping: ListenerPortMapping
        """
        if port_mapping is None:
            raise ValueError("Invalid value for `port_mapping`, must not be `None`")

        self._port_mapping = port_mapping

    @property
    def timeout(self):
        """Gets the timeout of this Listener.


        :return: The timeout of this Listener.
        :rtype: ListenerTimeout
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Listener.


        :param timeout: The timeout of this Listener.
        :type timeout: ListenerTimeout
        """

        self._timeout = timeout

    @property
    def tls(self):
        """Gets the tls of this Listener.


        :return: The tls of this Listener.
        :rtype: ListenerTls
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this Listener.


        :param tls: The tls of this Listener.
        :type tls: ListenerTls
        """

        self._tls = tls
