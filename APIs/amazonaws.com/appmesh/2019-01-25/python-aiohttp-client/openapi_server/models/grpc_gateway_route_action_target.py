# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gateway_route_target_virtual_service import GatewayRouteTargetVirtualService
from openapi_server import util


class GrpcGatewayRouteActionTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, port: int=None, virtual_service: GatewayRouteTargetVirtualService=None):
        """GrpcGatewayRouteActionTarget - a model defined in OpenAPI

        :param port: The port of this GrpcGatewayRouteActionTarget.
        :param virtual_service: The virtual_service of this GrpcGatewayRouteActionTarget.
        """
        self.openapi_types = {
            'port': int,
            'virtual_service': GatewayRouteTargetVirtualService
        }

        self.attribute_map = {
            'port': 'port',
            'virtual_service': 'virtualService'
        }

        self._port = port
        self._virtual_service = virtual_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrpcGatewayRouteActionTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrpcGatewayRouteAction_target of this GrpcGatewayRouteActionTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def port(self):
        """Gets the port of this GrpcGatewayRouteActionTarget.


        :return: The port of this GrpcGatewayRouteActionTarget.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this GrpcGatewayRouteActionTarget.


        :param port: The port of this GrpcGatewayRouteActionTarget.
        :type port: int
        """

        self._port = port

    @property
    def virtual_service(self):
        """Gets the virtual_service of this GrpcGatewayRouteActionTarget.


        :return: The virtual_service of this GrpcGatewayRouteActionTarget.
        :rtype: GatewayRouteTargetVirtualService
        """
        return self._virtual_service

    @virtual_service.setter
    def virtual_service(self, virtual_service):
        """Sets the virtual_service of this GrpcGatewayRouteActionTarget.


        :param virtual_service: The virtual_service of this GrpcGatewayRouteActionTarget.
        :type virtual_service: GatewayRouteTargetVirtualService
        """
        if virtual_service is None:
            raise ValueError("Invalid value for `virtual_service`, must not be `None`")

        self._virtual_service = virtual_service
