# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.outlier_detection_base_ejection_duration import OutlierDetectionBaseEjectionDuration
from openapi_server.models.outlier_detection_interval import OutlierDetectionInterval
from openapi_server import util


class OutlierDetection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_ejection_duration: OutlierDetectionBaseEjectionDuration=None, interval: OutlierDetectionInterval=None, max_ejection_percent: int=None, max_server_errors: int=None):
        """OutlierDetection - a model defined in OpenAPI

        :param base_ejection_duration: The base_ejection_duration of this OutlierDetection.
        :param interval: The interval of this OutlierDetection.
        :param max_ejection_percent: The max_ejection_percent of this OutlierDetection.
        :param max_server_errors: The max_server_errors of this OutlierDetection.
        """
        self.openapi_types = {
            'base_ejection_duration': OutlierDetectionBaseEjectionDuration,
            'interval': OutlierDetectionInterval,
            'max_ejection_percent': int,
            'max_server_errors': int
        }

        self.attribute_map = {
            'base_ejection_duration': 'baseEjectionDuration',
            'interval': 'interval',
            'max_ejection_percent': 'maxEjectionPercent',
            'max_server_errors': 'maxServerErrors'
        }

        self._base_ejection_duration = base_ejection_duration
        self._interval = interval
        self._max_ejection_percent = max_ejection_percent
        self._max_server_errors = max_server_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutlierDetection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutlierDetection of this OutlierDetection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_ejection_duration(self):
        """Gets the base_ejection_duration of this OutlierDetection.


        :return: The base_ejection_duration of this OutlierDetection.
        :rtype: OutlierDetectionBaseEjectionDuration
        """
        return self._base_ejection_duration

    @base_ejection_duration.setter
    def base_ejection_duration(self, base_ejection_duration):
        """Sets the base_ejection_duration of this OutlierDetection.


        :param base_ejection_duration: The base_ejection_duration of this OutlierDetection.
        :type base_ejection_duration: OutlierDetectionBaseEjectionDuration
        """
        if base_ejection_duration is None:
            raise ValueError("Invalid value for `base_ejection_duration`, must not be `None`")

        self._base_ejection_duration = base_ejection_duration

    @property
    def interval(self):
        """Gets the interval of this OutlierDetection.


        :return: The interval of this OutlierDetection.
        :rtype: OutlierDetectionInterval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this OutlierDetection.


        :param interval: The interval of this OutlierDetection.
        :type interval: OutlierDetectionInterval
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")

        self._interval = interval

    @property
    def max_ejection_percent(self):
        """Gets the max_ejection_percent of this OutlierDetection.


        :return: The max_ejection_percent of this OutlierDetection.
        :rtype: int
        """
        return self._max_ejection_percent

    @max_ejection_percent.setter
    def max_ejection_percent(self, max_ejection_percent):
        """Sets the max_ejection_percent of this OutlierDetection.


        :param max_ejection_percent: The max_ejection_percent of this OutlierDetection.
        :type max_ejection_percent: int
        """
        if max_ejection_percent is None:
            raise ValueError("Invalid value for `max_ejection_percent`, must not be `None`")

        self._max_ejection_percent = max_ejection_percent

    @property
    def max_server_errors(self):
        """Gets the max_server_errors of this OutlierDetection.


        :return: The max_server_errors of this OutlierDetection.
        :rtype: int
        """
        return self._max_server_errors

    @max_server_errors.setter
    def max_server_errors(self, max_server_errors):
        """Sets the max_server_errors of this OutlierDetection.


        :param max_server_errors: The max_server_errors of this OutlierDetection.
        :type max_server_errors: int
        """
        if max_server_errors is None:
            raise ValueError("Invalid value for `max_server_errors`, must not be `None`")

        self._max_server_errors = max_server_errors
