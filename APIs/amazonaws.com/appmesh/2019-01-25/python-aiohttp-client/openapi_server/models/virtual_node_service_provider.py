# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualNodeServiceProvider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, virtual_node_name: str=None):
        """VirtualNodeServiceProvider - a model defined in OpenAPI

        :param virtual_node_name: The virtual_node_name of this VirtualNodeServiceProvider.
        """
        self.openapi_types = {
            'virtual_node_name': str
        }

        self.attribute_map = {
            'virtual_node_name': 'virtualNodeName'
        }

        self._virtual_node_name = virtual_node_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualNodeServiceProvider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualNodeServiceProvider of this VirtualNodeServiceProvider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def virtual_node_name(self):
        """Gets the virtual_node_name of this VirtualNodeServiceProvider.


        :return: The virtual_node_name of this VirtualNodeServiceProvider.
        :rtype: str
        """
        return self._virtual_node_name

    @virtual_node_name.setter
    def virtual_node_name(self, virtual_node_name):
        """Sets the virtual_node_name of this VirtualNodeServiceProvider.


        :param virtual_node_name: The virtual_node_name of this VirtualNodeServiceProvider.
        :type virtual_node_name: str
        """
        if virtual_node_name is None:
            raise ValueError("Invalid value for `virtual_node_name`, must not be `None`")

        self._virtual_node_name = virtual_node_name
