# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GatewayRouteTargetVirtualService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, virtual_service_name: str=None):
        """GatewayRouteTargetVirtualService - a model defined in OpenAPI

        :param virtual_service_name: The virtual_service_name of this GatewayRouteTargetVirtualService.
        """
        self.openapi_types = {
            'virtual_service_name': str
        }

        self.attribute_map = {
            'virtual_service_name': 'virtualServiceName'
        }

        self._virtual_service_name = virtual_service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GatewayRouteTargetVirtualService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GatewayRouteTarget_virtualService of this GatewayRouteTargetVirtualService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def virtual_service_name(self):
        """Gets the virtual_service_name of this GatewayRouteTargetVirtualService.


        :return: The virtual_service_name of this GatewayRouteTargetVirtualService.
        :rtype: str
        """
        return self._virtual_service_name

    @virtual_service_name.setter
    def virtual_service_name(self, virtual_service_name):
        """Sets the virtual_service_name of this GatewayRouteTargetVirtualService.


        :param virtual_service_name: The virtual_service_name of this GatewayRouteTargetVirtualService.
        :type virtual_service_name: str
        """
        if virtual_service_name is None:
            raise ValueError("Invalid value for `virtual_service_name`, must not be `None`")

        self._virtual_service_name = virtual_service_name
