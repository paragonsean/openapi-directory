# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.virtual_gateway_listener_connection_pool import VirtualGatewayListenerConnectionPool
from openapi_server.models.virtual_gateway_listener_health_check import VirtualGatewayListenerHealthCheck
from openapi_server.models.virtual_gateway_listener_port_mapping import VirtualGatewayListenerPortMapping
from openapi_server.models.virtual_gateway_listener_tls import VirtualGatewayListenerTls
from openapi_server import util


class VirtualGatewayListener(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_pool: VirtualGatewayListenerConnectionPool=None, health_check: VirtualGatewayListenerHealthCheck=None, port_mapping: VirtualGatewayListenerPortMapping=None, tls: VirtualGatewayListenerTls=None):
        """VirtualGatewayListener - a model defined in OpenAPI

        :param connection_pool: The connection_pool of this VirtualGatewayListener.
        :param health_check: The health_check of this VirtualGatewayListener.
        :param port_mapping: The port_mapping of this VirtualGatewayListener.
        :param tls: The tls of this VirtualGatewayListener.
        """
        self.openapi_types = {
            'connection_pool': VirtualGatewayListenerConnectionPool,
            'health_check': VirtualGatewayListenerHealthCheck,
            'port_mapping': VirtualGatewayListenerPortMapping,
            'tls': VirtualGatewayListenerTls
        }

        self.attribute_map = {
            'connection_pool': 'connectionPool',
            'health_check': 'healthCheck',
            'port_mapping': 'portMapping',
            'tls': 'tls'
        }

        self._connection_pool = connection_pool
        self._health_check = health_check
        self._port_mapping = port_mapping
        self._tls = tls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualGatewayListener':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualGatewayListener of this VirtualGatewayListener.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_pool(self):
        """Gets the connection_pool of this VirtualGatewayListener.


        :return: The connection_pool of this VirtualGatewayListener.
        :rtype: VirtualGatewayListenerConnectionPool
        """
        return self._connection_pool

    @connection_pool.setter
    def connection_pool(self, connection_pool):
        """Sets the connection_pool of this VirtualGatewayListener.


        :param connection_pool: The connection_pool of this VirtualGatewayListener.
        :type connection_pool: VirtualGatewayListenerConnectionPool
        """

        self._connection_pool = connection_pool

    @property
    def health_check(self):
        """Gets the health_check of this VirtualGatewayListener.


        :return: The health_check of this VirtualGatewayListener.
        :rtype: VirtualGatewayListenerHealthCheck
        """
        return self._health_check

    @health_check.setter
    def health_check(self, health_check):
        """Sets the health_check of this VirtualGatewayListener.


        :param health_check: The health_check of this VirtualGatewayListener.
        :type health_check: VirtualGatewayListenerHealthCheck
        """

        self._health_check = health_check

    @property
    def port_mapping(self):
        """Gets the port_mapping of this VirtualGatewayListener.


        :return: The port_mapping of this VirtualGatewayListener.
        :rtype: VirtualGatewayListenerPortMapping
        """
        return self._port_mapping

    @port_mapping.setter
    def port_mapping(self, port_mapping):
        """Sets the port_mapping of this VirtualGatewayListener.


        :param port_mapping: The port_mapping of this VirtualGatewayListener.
        :type port_mapping: VirtualGatewayListenerPortMapping
        """
        if port_mapping is None:
            raise ValueError("Invalid value for `port_mapping`, must not be `None`")

        self._port_mapping = port_mapping

    @property
    def tls(self):
        """Gets the tls of this VirtualGatewayListener.


        :return: The tls of this VirtualGatewayListener.
        :rtype: VirtualGatewayListenerTls
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this VirtualGatewayListener.


        :param tls: The tls of this VirtualGatewayListener.
        :type tls: VirtualGatewayListenerTls
        """

        self._tls = tls
