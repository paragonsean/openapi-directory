# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_virtual_gateway_request_spec_backend_defaults import CreateVirtualGatewayRequestSpecBackendDefaults
from openapi_server.models.virtual_gateway_logging import VirtualGatewayLogging
from openapi_server import util


class UpdateVirtualGatewayInputSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_defaults: CreateVirtualGatewayRequestSpecBackendDefaults=None, listeners: List=None, logging: VirtualGatewayLogging=None):
        """UpdateVirtualGatewayInputSpec - a model defined in OpenAPI

        :param backend_defaults: The backend_defaults of this UpdateVirtualGatewayInputSpec.
        :param listeners: The listeners of this UpdateVirtualGatewayInputSpec.
        :param logging: The logging of this UpdateVirtualGatewayInputSpec.
        """
        self.openapi_types = {
            'backend_defaults': CreateVirtualGatewayRequestSpecBackendDefaults,
            'listeners': List,
            'logging': VirtualGatewayLogging
        }

        self.attribute_map = {
            'backend_defaults': 'backendDefaults',
            'listeners': 'listeners',
            'logging': 'logging'
        }

        self._backend_defaults = backend_defaults
        self._listeners = listeners
        self._logging = logging

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateVirtualGatewayInputSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateVirtualGatewayInput_spec of this UpdateVirtualGatewayInputSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_defaults(self):
        """Gets the backend_defaults of this UpdateVirtualGatewayInputSpec.


        :return: The backend_defaults of this UpdateVirtualGatewayInputSpec.
        :rtype: CreateVirtualGatewayRequestSpecBackendDefaults
        """
        return self._backend_defaults

    @backend_defaults.setter
    def backend_defaults(self, backend_defaults):
        """Sets the backend_defaults of this UpdateVirtualGatewayInputSpec.


        :param backend_defaults: The backend_defaults of this UpdateVirtualGatewayInputSpec.
        :type backend_defaults: CreateVirtualGatewayRequestSpecBackendDefaults
        """

        self._backend_defaults = backend_defaults

    @property
    def listeners(self):
        """Gets the listeners of this UpdateVirtualGatewayInputSpec.


        :return: The listeners of this UpdateVirtualGatewayInputSpec.
        :rtype: List
        """
        return self._listeners

    @listeners.setter
    def listeners(self, listeners):
        """Sets the listeners of this UpdateVirtualGatewayInputSpec.


        :param listeners: The listeners of this UpdateVirtualGatewayInputSpec.
        :type listeners: List
        """
        if listeners is None:
            raise ValueError("Invalid value for `listeners`, must not be `None`")

        self._listeners = listeners

    @property
    def logging(self):
        """Gets the logging of this UpdateVirtualGatewayInputSpec.


        :return: The logging of this UpdateVirtualGatewayInputSpec.
        :rtype: VirtualGatewayLogging
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this UpdateVirtualGatewayInputSpec.


        :param logging: The logging of this UpdateVirtualGatewayInputSpec.
        :type logging: VirtualGatewayLogging
        """

        self._logging = logging
