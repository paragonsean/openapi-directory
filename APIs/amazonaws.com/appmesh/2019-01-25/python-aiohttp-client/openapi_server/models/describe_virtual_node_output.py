# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_virtual_node_output_virtual_node import DescribeVirtualNodeOutputVirtualNode
from openapi_server import util


class DescribeVirtualNodeOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, virtual_node: DescribeVirtualNodeOutputVirtualNode=None):
        """DescribeVirtualNodeOutput - a model defined in OpenAPI

        :param virtual_node: The virtual_node of this DescribeVirtualNodeOutput.
        """
        self.openapi_types = {
            'virtual_node': DescribeVirtualNodeOutputVirtualNode
        }

        self.attribute_map = {
            'virtual_node': 'virtualNode'
        }

        self._virtual_node = virtual_node

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeVirtualNodeOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeVirtualNodeOutput of this DescribeVirtualNodeOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def virtual_node(self):
        """Gets the virtual_node of this DescribeVirtualNodeOutput.


        :return: The virtual_node of this DescribeVirtualNodeOutput.
        :rtype: DescribeVirtualNodeOutputVirtualNode
        """
        return self._virtual_node

    @virtual_node.setter
    def virtual_node(self, virtual_node):
        """Sets the virtual_node of this DescribeVirtualNodeOutput.


        :param virtual_node: The virtual_node of this DescribeVirtualNodeOutput.
        :type virtual_node: DescribeVirtualNodeOutputVirtualNode
        """
        if virtual_node is None:
            raise ValueError("Invalid value for `virtual_node`, must not be `None`")

        self._virtual_node = virtual_node
