# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_method import HttpMethod
from openapi_server.models.http_route_match_path import HttpRouteMatchPath
from openapi_server.models.http_scheme import HttpScheme
from openapi_server import util


class HttpRouteMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, headers: List=None, method: HttpMethod=None, path: HttpRouteMatchPath=None, port: int=None, prefix: str=None, query_parameters: List=None, scheme: HttpScheme=None):
        """HttpRouteMatch - a model defined in OpenAPI

        :param headers: The headers of this HttpRouteMatch.
        :param method: The method of this HttpRouteMatch.
        :param path: The path of this HttpRouteMatch.
        :param port: The port of this HttpRouteMatch.
        :param prefix: The prefix of this HttpRouteMatch.
        :param query_parameters: The query_parameters of this HttpRouteMatch.
        :param scheme: The scheme of this HttpRouteMatch.
        """
        self.openapi_types = {
            'headers': List,
            'method': HttpMethod,
            'path': HttpRouteMatchPath,
            'port': int,
            'prefix': str,
            'query_parameters': List,
            'scheme': HttpScheme
        }

        self.attribute_map = {
            'headers': 'headers',
            'method': 'method',
            'path': 'path',
            'port': 'port',
            'prefix': 'prefix',
            'query_parameters': 'queryParameters',
            'scheme': 'scheme'
        }

        self._headers = headers
        self._method = method
        self._path = path
        self._port = port
        self._prefix = prefix
        self._query_parameters = query_parameters
        self._scheme = scheme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRoute_match of this HttpRouteMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def headers(self):
        """Gets the headers of this HttpRouteMatch.


        :return: The headers of this HttpRouteMatch.
        :rtype: List
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this HttpRouteMatch.


        :param headers: The headers of this HttpRouteMatch.
        :type headers: List
        """

        self._headers = headers

    @property
    def method(self):
        """Gets the method of this HttpRouteMatch.


        :return: The method of this HttpRouteMatch.
        :rtype: HttpMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this HttpRouteMatch.


        :param method: The method of this HttpRouteMatch.
        :type method: HttpMethod
        """

        self._method = method

    @property
    def path(self):
        """Gets the path of this HttpRouteMatch.


        :return: The path of this HttpRouteMatch.
        :rtype: HttpRouteMatchPath
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this HttpRouteMatch.


        :param path: The path of this HttpRouteMatch.
        :type path: HttpRouteMatchPath
        """

        self._path = path

    @property
    def port(self):
        """Gets the port of this HttpRouteMatch.


        :return: The port of this HttpRouteMatch.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this HttpRouteMatch.


        :param port: The port of this HttpRouteMatch.
        :type port: int
        """

        self._port = port

    @property
    def prefix(self):
        """Gets the prefix of this HttpRouteMatch.


        :return: The prefix of this HttpRouteMatch.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this HttpRouteMatch.


        :param prefix: The prefix of this HttpRouteMatch.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def query_parameters(self):
        """Gets the query_parameters of this HttpRouteMatch.


        :return: The query_parameters of this HttpRouteMatch.
        :rtype: List
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this HttpRouteMatch.


        :param query_parameters: The query_parameters of this HttpRouteMatch.
        :type query_parameters: List
        """

        self._query_parameters = query_parameters

    @property
    def scheme(self):
        """Gets the scheme of this HttpRouteMatch.


        :return: The scheme of this HttpRouteMatch.
        :rtype: HttpScheme
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this HttpRouteMatch.


        :param scheme: The scheme of this HttpRouteMatch.
        :type scheme: HttpScheme
        """

        self._scheme = scheme
