# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualRouterRef(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, created_at: datetime=None, last_updated_at: datetime=None, mesh_name: str=None, mesh_owner: str=None, resource_owner: str=None, version: int=None, virtual_router_name: str=None):
        """VirtualRouterRef - a model defined in OpenAPI

        :param arn: The arn of this VirtualRouterRef.
        :param created_at: The created_at of this VirtualRouterRef.
        :param last_updated_at: The last_updated_at of this VirtualRouterRef.
        :param mesh_name: The mesh_name of this VirtualRouterRef.
        :param mesh_owner: The mesh_owner of this VirtualRouterRef.
        :param resource_owner: The resource_owner of this VirtualRouterRef.
        :param version: The version of this VirtualRouterRef.
        :param virtual_router_name: The virtual_router_name of this VirtualRouterRef.
        """
        self.openapi_types = {
            'arn': str,
            'created_at': datetime,
            'last_updated_at': datetime,
            'mesh_name': str,
            'mesh_owner': str,
            'resource_owner': str,
            'version': int,
            'virtual_router_name': str
        }

        self.attribute_map = {
            'arn': 'arn',
            'created_at': 'createdAt',
            'last_updated_at': 'lastUpdatedAt',
            'mesh_name': 'meshName',
            'mesh_owner': 'meshOwner',
            'resource_owner': 'resourceOwner',
            'version': 'version',
            'virtual_router_name': 'virtualRouterName'
        }

        self._arn = arn
        self._created_at = created_at
        self._last_updated_at = last_updated_at
        self._mesh_name = mesh_name
        self._mesh_owner = mesh_owner
        self._resource_owner = resource_owner
        self._version = version
        self._virtual_router_name = virtual_router_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualRouterRef':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualRouterRef of this VirtualRouterRef.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this VirtualRouterRef.


        :return: The arn of this VirtualRouterRef.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this VirtualRouterRef.


        :param arn: The arn of this VirtualRouterRef.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def created_at(self):
        """Gets the created_at of this VirtualRouterRef.


        :return: The created_at of this VirtualRouterRef.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VirtualRouterRef.


        :param created_at: The created_at of this VirtualRouterRef.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this VirtualRouterRef.


        :return: The last_updated_at of this VirtualRouterRef.
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this VirtualRouterRef.


        :param last_updated_at: The last_updated_at of this VirtualRouterRef.
        :type last_updated_at: datetime
        """
        if last_updated_at is None:
            raise ValueError("Invalid value for `last_updated_at`, must not be `None`")

        self._last_updated_at = last_updated_at

    @property
    def mesh_name(self):
        """Gets the mesh_name of this VirtualRouterRef.


        :return: The mesh_name of this VirtualRouterRef.
        :rtype: str
        """
        return self._mesh_name

    @mesh_name.setter
    def mesh_name(self, mesh_name):
        """Sets the mesh_name of this VirtualRouterRef.


        :param mesh_name: The mesh_name of this VirtualRouterRef.
        :type mesh_name: str
        """
        if mesh_name is None:
            raise ValueError("Invalid value for `mesh_name`, must not be `None`")

        self._mesh_name = mesh_name

    @property
    def mesh_owner(self):
        """Gets the mesh_owner of this VirtualRouterRef.


        :return: The mesh_owner of this VirtualRouterRef.
        :rtype: str
        """
        return self._mesh_owner

    @mesh_owner.setter
    def mesh_owner(self, mesh_owner):
        """Sets the mesh_owner of this VirtualRouterRef.


        :param mesh_owner: The mesh_owner of this VirtualRouterRef.
        :type mesh_owner: str
        """
        if mesh_owner is None:
            raise ValueError("Invalid value for `mesh_owner`, must not be `None`")

        self._mesh_owner = mesh_owner

    @property
    def resource_owner(self):
        """Gets the resource_owner of this VirtualRouterRef.


        :return: The resource_owner of this VirtualRouterRef.
        :rtype: str
        """
        return self._resource_owner

    @resource_owner.setter
    def resource_owner(self, resource_owner):
        """Sets the resource_owner of this VirtualRouterRef.


        :param resource_owner: The resource_owner of this VirtualRouterRef.
        :type resource_owner: str
        """
        if resource_owner is None:
            raise ValueError("Invalid value for `resource_owner`, must not be `None`")

        self._resource_owner = resource_owner

    @property
    def version(self):
        """Gets the version of this VirtualRouterRef.


        :return: The version of this VirtualRouterRef.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VirtualRouterRef.


        :param version: The version of this VirtualRouterRef.
        :type version: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def virtual_router_name(self):
        """Gets the virtual_router_name of this VirtualRouterRef.


        :return: The virtual_router_name of this VirtualRouterRef.
        :rtype: str
        """
        return self._virtual_router_name

    @virtual_router_name.setter
    def virtual_router_name(self, virtual_router_name):
        """Sets the virtual_router_name of this VirtualRouterRef.


        :param virtual_router_name: The virtual_router_name of this VirtualRouterRef.
        :type virtual_router_name: str
        """
        if virtual_router_name is None:
            raise ValueError("Invalid value for `virtual_router_name`, must not be `None`")

        self._virtual_router_name = virtual_router_name
