# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WeightedTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, port: int=None, virtual_node: str=None, weight: int=None):
        """WeightedTarget - a model defined in OpenAPI

        :param port: The port of this WeightedTarget.
        :param virtual_node: The virtual_node of this WeightedTarget.
        :param weight: The weight of this WeightedTarget.
        """
        self.openapi_types = {
            'port': int,
            'virtual_node': str,
            'weight': int
        }

        self.attribute_map = {
            'port': 'port',
            'virtual_node': 'virtualNode',
            'weight': 'weight'
        }

        self._port = port
        self._virtual_node = virtual_node
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WeightedTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WeightedTarget of this WeightedTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def port(self):
        """Gets the port of this WeightedTarget.


        :return: The port of this WeightedTarget.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this WeightedTarget.


        :param port: The port of this WeightedTarget.
        :type port: int
        """

        self._port = port

    @property
    def virtual_node(self):
        """Gets the virtual_node of this WeightedTarget.


        :return: The virtual_node of this WeightedTarget.
        :rtype: str
        """
        return self._virtual_node

    @virtual_node.setter
    def virtual_node(self, virtual_node):
        """Sets the virtual_node of this WeightedTarget.


        :param virtual_node: The virtual_node of this WeightedTarget.
        :type virtual_node: str
        """
        if virtual_node is None:
            raise ValueError("Invalid value for `virtual_node`, must not be `None`")

        self._virtual_node = virtual_node

    @property
    def weight(self):
        """Gets the weight of this WeightedTarget.


        :return: The weight of this WeightedTarget.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this WeightedTarget.


        :param weight: The weight of this WeightedTarget.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight
