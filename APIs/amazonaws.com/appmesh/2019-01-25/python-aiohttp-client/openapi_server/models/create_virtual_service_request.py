# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_virtual_service_request_spec import CreateVirtualServiceRequestSpec
from openapi_server.models.tag_ref import TagRef
from openapi_server import util


class CreateVirtualServiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, spec: CreateVirtualServiceRequestSpec=None, tags: List[TagRef]=None, virtual_service_name: str=None):
        """CreateVirtualServiceRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateVirtualServiceRequest.
        :param spec: The spec of this CreateVirtualServiceRequest.
        :param tags: The tags of this CreateVirtualServiceRequest.
        :param virtual_service_name: The virtual_service_name of this CreateVirtualServiceRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'spec': CreateVirtualServiceRequestSpec,
            'tags': List[TagRef],
            'virtual_service_name': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'spec': 'spec',
            'tags': 'tags',
            'virtual_service_name': 'virtualServiceName'
        }

        self._client_token = client_token
        self._spec = spec
        self._tags = tags
        self._virtual_service_name = virtual_service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVirtualServiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVirtualService_request of this CreateVirtualServiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateVirtualServiceRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

        :return: The client_token of this CreateVirtualServiceRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateVirtualServiceRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.

        :param client_token: The client_token of this CreateVirtualServiceRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def spec(self):
        """Gets the spec of this CreateVirtualServiceRequest.


        :return: The spec of this CreateVirtualServiceRequest.
        :rtype: CreateVirtualServiceRequestSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this CreateVirtualServiceRequest.


        :param spec: The spec of this CreateVirtualServiceRequest.
        :type spec: CreateVirtualServiceRequestSpec
        """
        if spec is None:
            raise ValueError("Invalid value for `spec`, must not be `None`")

        self._spec = spec

    @property
    def tags(self):
        """Gets the tags of this CreateVirtualServiceRequest.

        Optional metadata that you can apply to the virtual service to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        :return: The tags of this CreateVirtualServiceRequest.
        :rtype: List[TagRef]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateVirtualServiceRequest.

        Optional metadata that you can apply to the virtual service to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        :param tags: The tags of this CreateVirtualServiceRequest.
        :type tags: List[TagRef]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def virtual_service_name(self):
        """Gets the virtual_service_name of this CreateVirtualServiceRequest.

        The name to use for the virtual service.

        :return: The virtual_service_name of this CreateVirtualServiceRequest.
        :rtype: str
        """
        return self._virtual_service_name

    @virtual_service_name.setter
    def virtual_service_name(self, virtual_service_name):
        """Sets the virtual_service_name of this CreateVirtualServiceRequest.

        The name to use for the virtual service.

        :param virtual_service_name: The virtual_service_name of this CreateVirtualServiceRequest.
        :type virtual_service_name: str
        """
        if virtual_service_name is None:
            raise ValueError("Invalid value for `virtual_service_name`, must not be `None`")

        self._virtual_service_name = virtual_service_name
