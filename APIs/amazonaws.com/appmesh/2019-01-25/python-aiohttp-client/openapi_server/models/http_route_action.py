# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HttpRouteAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, weighted_targets: List=None):
        """HttpRouteAction - a model defined in OpenAPI

        :param weighted_targets: The weighted_targets of this HttpRouteAction.
        """
        self.openapi_types = {
            'weighted_targets': List
        }

        self.attribute_map = {
            'weighted_targets': 'weightedTargets'
        }

        self._weighted_targets = weighted_targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpRouteAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpRoute_action of this HttpRouteAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def weighted_targets(self):
        """Gets the weighted_targets of this HttpRouteAction.


        :return: The weighted_targets of this HttpRouteAction.
        :rtype: List
        """
        return self._weighted_targets

    @weighted_targets.setter
    def weighted_targets(self, weighted_targets):
        """Sets the weighted_targets of this HttpRouteAction.


        :param weighted_targets: The weighted_targets of this HttpRouteAction.
        :type weighted_targets: List
        """
        if weighted_targets is None:
            raise ValueError("Invalid value for `weighted_targets`, must not be `None`")

        self._weighted_targets = weighted_targets
