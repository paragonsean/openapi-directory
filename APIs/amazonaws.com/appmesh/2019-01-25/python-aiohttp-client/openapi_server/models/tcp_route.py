# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tcp_route_action import TcpRouteAction
from openapi_server.models.tcp_route_match import TcpRouteMatch
from openapi_server.models.tcp_route_timeout import TcpRouteTimeout
from openapi_server import util


class TcpRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: TcpRouteAction=None, match: TcpRouteMatch=None, timeout: TcpRouteTimeout=None):
        """TcpRoute - a model defined in OpenAPI

        :param action: The action of this TcpRoute.
        :param match: The match of this TcpRoute.
        :param timeout: The timeout of this TcpRoute.
        """
        self.openapi_types = {
            'action': TcpRouteAction,
            'match': TcpRouteMatch,
            'timeout': TcpRouteTimeout
        }

        self.attribute_map = {
            'action': 'action',
            'match': 'match',
            'timeout': 'timeout'
        }

        self._action = action
        self._match = match
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TcpRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TcpRoute of this TcpRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this TcpRoute.


        :return: The action of this TcpRoute.
        :rtype: TcpRouteAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this TcpRoute.


        :param action: The action of this TcpRoute.
        :type action: TcpRouteAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def match(self):
        """Gets the match of this TcpRoute.


        :return: The match of this TcpRoute.
        :rtype: TcpRouteMatch
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this TcpRoute.


        :param match: The match of this TcpRoute.
        :type match: TcpRouteMatch
        """

        self._match = match

    @property
    def timeout(self):
        """Gets the timeout of this TcpRoute.


        :return: The timeout of this TcpRoute.
        :rtype: TcpRouteTimeout
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this TcpRoute.


        :param timeout: The timeout of this TcpRoute.
        :type timeout: TcpRouteTimeout
        """

        self._timeout = timeout
