# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag_ref import TagRef
from openapi_server import util


class TagResourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tags: List[TagRef]=None):
        """TagResourceRequest - a model defined in OpenAPI

        :param tags: The tags of this TagResourceRequest.
        """
        self.openapi_types = {
            'tags': List[TagRef]
        }

        self.attribute_map = {
            'tags': 'tags'
        }

        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagResourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagResource_request of this TagResourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tags(self):
        """Gets the tags of this TagResourceRequest.

        The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        :return: The tags of this TagResourceRequest.
        :rtype: List[TagRef]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TagResourceRequest.

        The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.

        :param tags: The tags of this TagResourceRequest.
        :type tags: List[TagRef]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
