# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_virtual_node_request_spec_backend_defaults import CreateVirtualNodeRequestSpecBackendDefaults
from openapi_server.models.create_virtual_node_request_spec_logging import CreateVirtualNodeRequestSpecLogging
from openapi_server.models.create_virtual_node_request_spec_service_discovery import CreateVirtualNodeRequestSpecServiceDiscovery
from openapi_server import util


class CreateVirtualNodeInputSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_defaults: CreateVirtualNodeRequestSpecBackendDefaults=None, backends: List=None, listeners: List=None, logging: CreateVirtualNodeRequestSpecLogging=None, service_discovery: CreateVirtualNodeRequestSpecServiceDiscovery=None):
        """CreateVirtualNodeInputSpec - a model defined in OpenAPI

        :param backend_defaults: The backend_defaults of this CreateVirtualNodeInputSpec.
        :param backends: The backends of this CreateVirtualNodeInputSpec.
        :param listeners: The listeners of this CreateVirtualNodeInputSpec.
        :param logging: The logging of this CreateVirtualNodeInputSpec.
        :param service_discovery: The service_discovery of this CreateVirtualNodeInputSpec.
        """
        self.openapi_types = {
            'backend_defaults': CreateVirtualNodeRequestSpecBackendDefaults,
            'backends': List,
            'listeners': List,
            'logging': CreateVirtualNodeRequestSpecLogging,
            'service_discovery': CreateVirtualNodeRequestSpecServiceDiscovery
        }

        self.attribute_map = {
            'backend_defaults': 'backendDefaults',
            'backends': 'backends',
            'listeners': 'listeners',
            'logging': 'logging',
            'service_discovery': 'serviceDiscovery'
        }

        self._backend_defaults = backend_defaults
        self._backends = backends
        self._listeners = listeners
        self._logging = logging
        self._service_discovery = service_discovery

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVirtualNodeInputSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVirtualNodeInput_spec of this CreateVirtualNodeInputSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_defaults(self):
        """Gets the backend_defaults of this CreateVirtualNodeInputSpec.


        :return: The backend_defaults of this CreateVirtualNodeInputSpec.
        :rtype: CreateVirtualNodeRequestSpecBackendDefaults
        """
        return self._backend_defaults

    @backend_defaults.setter
    def backend_defaults(self, backend_defaults):
        """Sets the backend_defaults of this CreateVirtualNodeInputSpec.


        :param backend_defaults: The backend_defaults of this CreateVirtualNodeInputSpec.
        :type backend_defaults: CreateVirtualNodeRequestSpecBackendDefaults
        """

        self._backend_defaults = backend_defaults

    @property
    def backends(self):
        """Gets the backends of this CreateVirtualNodeInputSpec.


        :return: The backends of this CreateVirtualNodeInputSpec.
        :rtype: List
        """
        return self._backends

    @backends.setter
    def backends(self, backends):
        """Sets the backends of this CreateVirtualNodeInputSpec.


        :param backends: The backends of this CreateVirtualNodeInputSpec.
        :type backends: List
        """

        self._backends = backends

    @property
    def listeners(self):
        """Gets the listeners of this CreateVirtualNodeInputSpec.


        :return: The listeners of this CreateVirtualNodeInputSpec.
        :rtype: List
        """
        return self._listeners

    @listeners.setter
    def listeners(self, listeners):
        """Sets the listeners of this CreateVirtualNodeInputSpec.


        :param listeners: The listeners of this CreateVirtualNodeInputSpec.
        :type listeners: List
        """

        self._listeners = listeners

    @property
    def logging(self):
        """Gets the logging of this CreateVirtualNodeInputSpec.


        :return: The logging of this CreateVirtualNodeInputSpec.
        :rtype: CreateVirtualNodeRequestSpecLogging
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this CreateVirtualNodeInputSpec.


        :param logging: The logging of this CreateVirtualNodeInputSpec.
        :type logging: CreateVirtualNodeRequestSpecLogging
        """

        self._logging = logging

    @property
    def service_discovery(self):
        """Gets the service_discovery of this CreateVirtualNodeInputSpec.


        :return: The service_discovery of this CreateVirtualNodeInputSpec.
        :rtype: CreateVirtualNodeRequestSpecServiceDiscovery
        """
        return self._service_discovery

    @service_discovery.setter
    def service_discovery(self, service_discovery):
        """Sets the service_discovery of this CreateVirtualNodeInputSpec.


        :param service_discovery: The service_discovery of this CreateVirtualNodeInputSpec.
        :type service_discovery: CreateVirtualNodeRequestSpecServiceDiscovery
        """

        self._service_discovery = service_discovery
