# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.listener_tls_certificate import ListenerTlsCertificate
from openapi_server.models.listener_tls_mode import ListenerTlsMode
from openapi_server.models.listener_tls_validation import ListenerTlsValidation
from openapi_server import util


class ListenerTls(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: ListenerTlsCertificate=None, mode: ListenerTlsMode=None, validation: ListenerTlsValidation=None):
        """ListenerTls - a model defined in OpenAPI

        :param certificate: The certificate of this ListenerTls.
        :param mode: The mode of this ListenerTls.
        :param validation: The validation of this ListenerTls.
        """
        self.openapi_types = {
            'certificate': ListenerTlsCertificate,
            'mode': ListenerTlsMode,
            'validation': ListenerTlsValidation
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'mode': 'mode',
            'validation': 'validation'
        }

        self._certificate = certificate
        self._mode = mode
        self._validation = validation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListenerTls':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Listener_tls of this ListenerTls.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this ListenerTls.


        :return: The certificate of this ListenerTls.
        :rtype: ListenerTlsCertificate
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ListenerTls.


        :param certificate: The certificate of this ListenerTls.
        :type certificate: ListenerTlsCertificate
        """
        if certificate is None:
            raise ValueError("Invalid value for `certificate`, must not be `None`")

        self._certificate = certificate

    @property
    def mode(self):
        """Gets the mode of this ListenerTls.


        :return: The mode of this ListenerTls.
        :rtype: ListenerTlsMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ListenerTls.


        :param mode: The mode of this ListenerTls.
        :type mode: ListenerTlsMode
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")

        self._mode = mode

    @property
    def validation(self):
        """Gets the validation of this ListenerTls.


        :return: The validation of this ListenerTls.
        :rtype: ListenerTlsValidation
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """Sets the validation of this ListenerTls.


        :param validation: The validation of this ListenerTls.
        :type validation: ListenerTlsValidation
        """

        self._validation = validation
