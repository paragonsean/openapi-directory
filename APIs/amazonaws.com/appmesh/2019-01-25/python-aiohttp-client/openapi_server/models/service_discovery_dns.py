# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dns_response_type import DnsResponseType
from openapi_server.models.ip_preference import IpPreference
from openapi_server import util


class ServiceDiscoveryDns(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hostname: str=None, ip_preference: IpPreference=None, response_type: DnsResponseType=None):
        """ServiceDiscoveryDns - a model defined in OpenAPI

        :param hostname: The hostname of this ServiceDiscoveryDns.
        :param ip_preference: The ip_preference of this ServiceDiscoveryDns.
        :param response_type: The response_type of this ServiceDiscoveryDns.
        """
        self.openapi_types = {
            'hostname': str,
            'ip_preference': IpPreference,
            'response_type': DnsResponseType
        }

        self.attribute_map = {
            'hostname': 'hostname',
            'ip_preference': 'ipPreference',
            'response_type': 'responseType'
        }

        self._hostname = hostname
        self._ip_preference = ip_preference
        self._response_type = response_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceDiscoveryDns':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceDiscovery_dns of this ServiceDiscoveryDns.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hostname(self):
        """Gets the hostname of this ServiceDiscoveryDns.


        :return: The hostname of this ServiceDiscoveryDns.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ServiceDiscoveryDns.


        :param hostname: The hostname of this ServiceDiscoveryDns.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def ip_preference(self):
        """Gets the ip_preference of this ServiceDiscoveryDns.


        :return: The ip_preference of this ServiceDiscoveryDns.
        :rtype: IpPreference
        """
        return self._ip_preference

    @ip_preference.setter
    def ip_preference(self, ip_preference):
        """Sets the ip_preference of this ServiceDiscoveryDns.


        :param ip_preference: The ip_preference of this ServiceDiscoveryDns.
        :type ip_preference: IpPreference
        """

        self._ip_preference = ip_preference

    @property
    def response_type(self):
        """Gets the response_type of this ServiceDiscoveryDns.


        :return: The response_type of this ServiceDiscoveryDns.
        :rtype: DnsResponseType
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type):
        """Sets the response_type of this ServiceDiscoveryDns.


        :param response_type: The response_type of this ServiceDiscoveryDns.
        :type response_type: DnsResponseType
        """

        self._response_type = response_type
