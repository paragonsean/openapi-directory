# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.virtual_router_data_metadata import VirtualRouterDataMetadata
from openapi_server.models.virtual_router_data_spec import VirtualRouterDataSpec
from openapi_server.models.virtual_router_data_status import VirtualRouterDataStatus
from openapi_server import util


class UpdateVirtualRouterOutputVirtualRouter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mesh_name: str=None, metadata: VirtualRouterDataMetadata=None, spec: VirtualRouterDataSpec=None, status: VirtualRouterDataStatus=None, virtual_router_name: str=None):
        """UpdateVirtualRouterOutputVirtualRouter - a model defined in OpenAPI

        :param mesh_name: The mesh_name of this UpdateVirtualRouterOutputVirtualRouter.
        :param metadata: The metadata of this UpdateVirtualRouterOutputVirtualRouter.
        :param spec: The spec of this UpdateVirtualRouterOutputVirtualRouter.
        :param status: The status of this UpdateVirtualRouterOutputVirtualRouter.
        :param virtual_router_name: The virtual_router_name of this UpdateVirtualRouterOutputVirtualRouter.
        """
        self.openapi_types = {
            'mesh_name': str,
            'metadata': VirtualRouterDataMetadata,
            'spec': VirtualRouterDataSpec,
            'status': VirtualRouterDataStatus,
            'virtual_router_name': str
        }

        self.attribute_map = {
            'mesh_name': 'meshName',
            'metadata': 'metadata',
            'spec': 'spec',
            'status': 'status',
            'virtual_router_name': 'virtualRouterName'
        }

        self._mesh_name = mesh_name
        self._metadata = metadata
        self._spec = spec
        self._status = status
        self._virtual_router_name = virtual_router_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateVirtualRouterOutputVirtualRouter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateVirtualRouterOutput_virtualRouter of this UpdateVirtualRouterOutputVirtualRouter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mesh_name(self):
        """Gets the mesh_name of this UpdateVirtualRouterOutputVirtualRouter.


        :return: The mesh_name of this UpdateVirtualRouterOutputVirtualRouter.
        :rtype: str
        """
        return self._mesh_name

    @mesh_name.setter
    def mesh_name(self, mesh_name):
        """Sets the mesh_name of this UpdateVirtualRouterOutputVirtualRouter.


        :param mesh_name: The mesh_name of this UpdateVirtualRouterOutputVirtualRouter.
        :type mesh_name: str
        """
        if mesh_name is None:
            raise ValueError("Invalid value for `mesh_name`, must not be `None`")

        self._mesh_name = mesh_name

    @property
    def metadata(self):
        """Gets the metadata of this UpdateVirtualRouterOutputVirtualRouter.


        :return: The metadata of this UpdateVirtualRouterOutputVirtualRouter.
        :rtype: VirtualRouterDataMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpdateVirtualRouterOutputVirtualRouter.


        :param metadata: The metadata of this UpdateVirtualRouterOutputVirtualRouter.
        :type metadata: VirtualRouterDataMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def spec(self):
        """Gets the spec of this UpdateVirtualRouterOutputVirtualRouter.


        :return: The spec of this UpdateVirtualRouterOutputVirtualRouter.
        :rtype: VirtualRouterDataSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this UpdateVirtualRouterOutputVirtualRouter.


        :param spec: The spec of this UpdateVirtualRouterOutputVirtualRouter.
        :type spec: VirtualRouterDataSpec
        """
        if spec is None:
            raise ValueError("Invalid value for `spec`, must not be `None`")

        self._spec = spec

    @property
    def status(self):
        """Gets the status of this UpdateVirtualRouterOutputVirtualRouter.


        :return: The status of this UpdateVirtualRouterOutputVirtualRouter.
        :rtype: VirtualRouterDataStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateVirtualRouterOutputVirtualRouter.


        :param status: The status of this UpdateVirtualRouterOutputVirtualRouter.
        :type status: VirtualRouterDataStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def virtual_router_name(self):
        """Gets the virtual_router_name of this UpdateVirtualRouterOutputVirtualRouter.


        :return: The virtual_router_name of this UpdateVirtualRouterOutputVirtualRouter.
        :rtype: str
        """
        return self._virtual_router_name

    @virtual_router_name.setter
    def virtual_router_name(self, virtual_router_name):
        """Sets the virtual_router_name of this UpdateVirtualRouterOutputVirtualRouter.


        :param virtual_router_name: The virtual_router_name of this UpdateVirtualRouterOutputVirtualRouter.
        :type virtual_router_name: str
        """
        if virtual_router_name is None:
            raise ValueError("Invalid value for `virtual_router_name`, must not be `None`")

        self._virtual_router_name = virtual_router_name
