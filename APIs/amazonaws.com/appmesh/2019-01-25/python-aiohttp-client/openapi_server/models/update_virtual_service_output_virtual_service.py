# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_metadata import ResourceMetadata
from openapi_server.models.virtual_service_data_spec import VirtualServiceDataSpec
from openapi_server.models.virtual_service_data_status import VirtualServiceDataStatus
from openapi_server import util


class UpdateVirtualServiceOutputVirtualService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mesh_name: str=None, metadata: ResourceMetadata=None, spec: VirtualServiceDataSpec=None, status: VirtualServiceDataStatus=None, virtual_service_name: str=None):
        """UpdateVirtualServiceOutputVirtualService - a model defined in OpenAPI

        :param mesh_name: The mesh_name of this UpdateVirtualServiceOutputVirtualService.
        :param metadata: The metadata of this UpdateVirtualServiceOutputVirtualService.
        :param spec: The spec of this UpdateVirtualServiceOutputVirtualService.
        :param status: The status of this UpdateVirtualServiceOutputVirtualService.
        :param virtual_service_name: The virtual_service_name of this UpdateVirtualServiceOutputVirtualService.
        """
        self.openapi_types = {
            'mesh_name': str,
            'metadata': ResourceMetadata,
            'spec': VirtualServiceDataSpec,
            'status': VirtualServiceDataStatus,
            'virtual_service_name': str
        }

        self.attribute_map = {
            'mesh_name': 'meshName',
            'metadata': 'metadata',
            'spec': 'spec',
            'status': 'status',
            'virtual_service_name': 'virtualServiceName'
        }

        self._mesh_name = mesh_name
        self._metadata = metadata
        self._spec = spec
        self._status = status
        self._virtual_service_name = virtual_service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateVirtualServiceOutputVirtualService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateVirtualServiceOutput_virtualService of this UpdateVirtualServiceOutputVirtualService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mesh_name(self):
        """Gets the mesh_name of this UpdateVirtualServiceOutputVirtualService.


        :return: The mesh_name of this UpdateVirtualServiceOutputVirtualService.
        :rtype: str
        """
        return self._mesh_name

    @mesh_name.setter
    def mesh_name(self, mesh_name):
        """Sets the mesh_name of this UpdateVirtualServiceOutputVirtualService.


        :param mesh_name: The mesh_name of this UpdateVirtualServiceOutputVirtualService.
        :type mesh_name: str
        """
        if mesh_name is None:
            raise ValueError("Invalid value for `mesh_name`, must not be `None`")

        self._mesh_name = mesh_name

    @property
    def metadata(self):
        """Gets the metadata of this UpdateVirtualServiceOutputVirtualService.


        :return: The metadata of this UpdateVirtualServiceOutputVirtualService.
        :rtype: ResourceMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpdateVirtualServiceOutputVirtualService.


        :param metadata: The metadata of this UpdateVirtualServiceOutputVirtualService.
        :type metadata: ResourceMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def spec(self):
        """Gets the spec of this UpdateVirtualServiceOutputVirtualService.


        :return: The spec of this UpdateVirtualServiceOutputVirtualService.
        :rtype: VirtualServiceDataSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this UpdateVirtualServiceOutputVirtualService.


        :param spec: The spec of this UpdateVirtualServiceOutputVirtualService.
        :type spec: VirtualServiceDataSpec
        """
        if spec is None:
            raise ValueError("Invalid value for `spec`, must not be `None`")

        self._spec = spec

    @property
    def status(self):
        """Gets the status of this UpdateVirtualServiceOutputVirtualService.


        :return: The status of this UpdateVirtualServiceOutputVirtualService.
        :rtype: VirtualServiceDataStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateVirtualServiceOutputVirtualService.


        :param status: The status of this UpdateVirtualServiceOutputVirtualService.
        :type status: VirtualServiceDataStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def virtual_service_name(self):
        """Gets the virtual_service_name of this UpdateVirtualServiceOutputVirtualService.


        :return: The virtual_service_name of this UpdateVirtualServiceOutputVirtualService.
        :rtype: str
        """
        return self._virtual_service_name

    @virtual_service_name.setter
    def virtual_service_name(self, virtual_service_name):
        """Sets the virtual_service_name of this UpdateVirtualServiceOutputVirtualService.


        :param virtual_service_name: The virtual_service_name of this UpdateVirtualServiceOutputVirtualService.
        :type virtual_service_name: str
        """
        if virtual_service_name is None:
            raise ValueError("Invalid value for `virtual_service_name`, must not be `None`")

        self._virtual_service_name = virtual_service_name
