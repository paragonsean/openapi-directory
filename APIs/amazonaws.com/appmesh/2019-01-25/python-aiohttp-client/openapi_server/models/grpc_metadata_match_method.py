# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.match_range import MatchRange
from openapi_server import util


class GrpcMetadataMatchMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exact: str=None, prefix: str=None, range: MatchRange=None, regex: str=None, suffix: str=None):
        """GrpcMetadataMatchMethod - a model defined in OpenAPI

        :param exact: The exact of this GrpcMetadataMatchMethod.
        :param prefix: The prefix of this GrpcMetadataMatchMethod.
        :param range: The range of this GrpcMetadataMatchMethod.
        :param regex: The regex of this GrpcMetadataMatchMethod.
        :param suffix: The suffix of this GrpcMetadataMatchMethod.
        """
        self.openapi_types = {
            'exact': str,
            'prefix': str,
            'range': MatchRange,
            'regex': str,
            'suffix': str
        }

        self.attribute_map = {
            'exact': 'exact',
            'prefix': 'prefix',
            'range': 'range',
            'regex': 'regex',
            'suffix': 'suffix'
        }

        self._exact = exact
        self._prefix = prefix
        self._range = range
        self._regex = regex
        self._suffix = suffix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrpcMetadataMatchMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrpcMetadataMatchMethod of this GrpcMetadataMatchMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exact(self):
        """Gets the exact of this GrpcMetadataMatchMethod.


        :return: The exact of this GrpcMetadataMatchMethod.
        :rtype: str
        """
        return self._exact

    @exact.setter
    def exact(self, exact):
        """Sets the exact of this GrpcMetadataMatchMethod.


        :param exact: The exact of this GrpcMetadataMatchMethod.
        :type exact: str
        """

        self._exact = exact

    @property
    def prefix(self):
        """Gets the prefix of this GrpcMetadataMatchMethod.


        :return: The prefix of this GrpcMetadataMatchMethod.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this GrpcMetadataMatchMethod.


        :param prefix: The prefix of this GrpcMetadataMatchMethod.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def range(self):
        """Gets the range of this GrpcMetadataMatchMethod.


        :return: The range of this GrpcMetadataMatchMethod.
        :rtype: MatchRange
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this GrpcMetadataMatchMethod.


        :param range: The range of this GrpcMetadataMatchMethod.
        :type range: MatchRange
        """

        self._range = range

    @property
    def regex(self):
        """Gets the regex of this GrpcMetadataMatchMethod.


        :return: The regex of this GrpcMetadataMatchMethod.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this GrpcMetadataMatchMethod.


        :param regex: The regex of this GrpcMetadataMatchMethod.
        :type regex: str
        """

        self._regex = regex

    @property
    def suffix(self):
        """Gets the suffix of this GrpcMetadataMatchMethod.


        :return: The suffix of this GrpcMetadataMatchMethod.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this GrpcMetadataMatchMethod.


        :param suffix: The suffix of this GrpcMetadataMatchMethod.
        :type suffix: str
        """

        self._suffix = suffix
