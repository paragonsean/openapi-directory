# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.virtual_gateway_file_access_log_format import VirtualGatewayFileAccessLogFormat
from openapi_server import util


class VirtualGatewayFileAccessLog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: VirtualGatewayFileAccessLogFormat=None, path: str=None):
        """VirtualGatewayFileAccessLog - a model defined in OpenAPI

        :param format: The format of this VirtualGatewayFileAccessLog.
        :param path: The path of this VirtualGatewayFileAccessLog.
        """
        self.openapi_types = {
            'format': VirtualGatewayFileAccessLogFormat,
            'path': str
        }

        self.attribute_map = {
            'format': 'format',
            'path': 'path'
        }

        self._format = format
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualGatewayFileAccessLog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualGatewayFileAccessLog of this VirtualGatewayFileAccessLog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this VirtualGatewayFileAccessLog.


        :return: The format of this VirtualGatewayFileAccessLog.
        :rtype: VirtualGatewayFileAccessLogFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this VirtualGatewayFileAccessLog.


        :param format: The format of this VirtualGatewayFileAccessLog.
        :type format: VirtualGatewayFileAccessLogFormat
        """

        self._format = format

    @property
    def path(self):
        """Gets the path of this VirtualGatewayFileAccessLog.


        :return: The path of this VirtualGatewayFileAccessLog.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this VirtualGatewayFileAccessLog.


        :param path: The path of this VirtualGatewayFileAccessLog.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path
