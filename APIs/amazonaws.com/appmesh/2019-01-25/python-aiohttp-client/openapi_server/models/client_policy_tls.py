# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.client_policy_tls_certificate import ClientPolicyTlsCertificate
from openapi_server.models.client_policy_tls_validation import ClientPolicyTlsValidation
from openapi_server import util


class ClientPolicyTls(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: ClientPolicyTlsCertificate=None, enforce: bool=None, ports: List=None, validation: ClientPolicyTlsValidation=None):
        """ClientPolicyTls - a model defined in OpenAPI

        :param certificate: The certificate of this ClientPolicyTls.
        :param enforce: The enforce of this ClientPolicyTls.
        :param ports: The ports of this ClientPolicyTls.
        :param validation: The validation of this ClientPolicyTls.
        """
        self.openapi_types = {
            'certificate': ClientPolicyTlsCertificate,
            'enforce': bool,
            'ports': List,
            'validation': ClientPolicyTlsValidation
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'enforce': 'enforce',
            'ports': 'ports',
            'validation': 'validation'
        }

        self._certificate = certificate
        self._enforce = enforce
        self._ports = ports
        self._validation = validation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientPolicyTls':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientPolicy_tls of this ClientPolicyTls.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this ClientPolicyTls.


        :return: The certificate of this ClientPolicyTls.
        :rtype: ClientPolicyTlsCertificate
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this ClientPolicyTls.


        :param certificate: The certificate of this ClientPolicyTls.
        :type certificate: ClientPolicyTlsCertificate
        """

        self._certificate = certificate

    @property
    def enforce(self):
        """Gets the enforce of this ClientPolicyTls.


        :return: The enforce of this ClientPolicyTls.
        :rtype: bool
        """
        return self._enforce

    @enforce.setter
    def enforce(self, enforce):
        """Sets the enforce of this ClientPolicyTls.


        :param enforce: The enforce of this ClientPolicyTls.
        :type enforce: bool
        """

        self._enforce = enforce

    @property
    def ports(self):
        """Gets the ports of this ClientPolicyTls.


        :return: The ports of this ClientPolicyTls.
        :rtype: List
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ClientPolicyTls.


        :param ports: The ports of this ClientPolicyTls.
        :type ports: List
        """

        self._ports = ports

    @property
    def validation(self):
        """Gets the validation of this ClientPolicyTls.


        :return: The validation of this ClientPolicyTls.
        :rtype: ClientPolicyTlsValidation
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """Sets the validation of this ClientPolicyTls.


        :param validation: The validation of this ClientPolicyTls.
        :type validation: ClientPolicyTlsValidation
        """
        if validation is None:
            raise ValueError("Invalid value for `validation`, must not be `None`")

        self._validation = validation
