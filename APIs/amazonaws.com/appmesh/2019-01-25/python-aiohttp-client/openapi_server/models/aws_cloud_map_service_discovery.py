# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_preference import IpPreference
from openapi_server import util


class AwsCloudMapServiceDiscovery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List=None, ip_preference: IpPreference=None, namespace_name: str=None, service_name: str=None):
        """AwsCloudMapServiceDiscovery - a model defined in OpenAPI

        :param attributes: The attributes of this AwsCloudMapServiceDiscovery.
        :param ip_preference: The ip_preference of this AwsCloudMapServiceDiscovery.
        :param namespace_name: The namespace_name of this AwsCloudMapServiceDiscovery.
        :param service_name: The service_name of this AwsCloudMapServiceDiscovery.
        """
        self.openapi_types = {
            'attributes': List,
            'ip_preference': IpPreference,
            'namespace_name': str,
            'service_name': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'ip_preference': 'ipPreference',
            'namespace_name': 'namespaceName',
            'service_name': 'serviceName'
        }

        self._attributes = attributes
        self._ip_preference = ip_preference
        self._namespace_name = namespace_name
        self._service_name = service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AwsCloudMapServiceDiscovery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AwsCloudMapServiceDiscovery of this AwsCloudMapServiceDiscovery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this AwsCloudMapServiceDiscovery.


        :return: The attributes of this AwsCloudMapServiceDiscovery.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AwsCloudMapServiceDiscovery.


        :param attributes: The attributes of this AwsCloudMapServiceDiscovery.
        :type attributes: List
        """

        self._attributes = attributes

    @property
    def ip_preference(self):
        """Gets the ip_preference of this AwsCloudMapServiceDiscovery.


        :return: The ip_preference of this AwsCloudMapServiceDiscovery.
        :rtype: IpPreference
        """
        return self._ip_preference

    @ip_preference.setter
    def ip_preference(self, ip_preference):
        """Sets the ip_preference of this AwsCloudMapServiceDiscovery.


        :param ip_preference: The ip_preference of this AwsCloudMapServiceDiscovery.
        :type ip_preference: IpPreference
        """

        self._ip_preference = ip_preference

    @property
    def namespace_name(self):
        """Gets the namespace_name of this AwsCloudMapServiceDiscovery.


        :return: The namespace_name of this AwsCloudMapServiceDiscovery.
        :rtype: str
        """
        return self._namespace_name

    @namespace_name.setter
    def namespace_name(self, namespace_name):
        """Sets the namespace_name of this AwsCloudMapServiceDiscovery.


        :param namespace_name: The namespace_name of this AwsCloudMapServiceDiscovery.
        :type namespace_name: str
        """
        if namespace_name is None:
            raise ValueError("Invalid value for `namespace_name`, must not be `None`")

        self._namespace_name = namespace_name

    @property
    def service_name(self):
        """Gets the service_name of this AwsCloudMapServiceDiscovery.


        :return: The service_name of this AwsCloudMapServiceDiscovery.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this AwsCloudMapServiceDiscovery.


        :param service_name: The service_name of this AwsCloudMapServiceDiscovery.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name
