# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_mesh_input_spec import CreateMeshInputSpec
from openapi_server import util


class CreateMeshInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, mesh_name: str=None, spec: CreateMeshInputSpec=None, tags: List=None):
        """CreateMeshInput - a model defined in OpenAPI

        :param client_token: The client_token of this CreateMeshInput.
        :param mesh_name: The mesh_name of this CreateMeshInput.
        :param spec: The spec of this CreateMeshInput.
        :param tags: The tags of this CreateMeshInput.
        """
        self.openapi_types = {
            'client_token': str,
            'mesh_name': str,
            'spec': CreateMeshInputSpec,
            'tags': List
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'mesh_name': 'meshName',
            'spec': 'spec',
            'tags': 'tags'
        }

        self._client_token = client_token
        self._mesh_name = mesh_name
        self._spec = spec
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMeshInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMeshInput of this CreateMeshInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateMeshInput.


        :return: The client_token of this CreateMeshInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateMeshInput.


        :param client_token: The client_token of this CreateMeshInput.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def mesh_name(self):
        """Gets the mesh_name of this CreateMeshInput.


        :return: The mesh_name of this CreateMeshInput.
        :rtype: str
        """
        return self._mesh_name

    @mesh_name.setter
    def mesh_name(self, mesh_name):
        """Sets the mesh_name of this CreateMeshInput.


        :param mesh_name: The mesh_name of this CreateMeshInput.
        :type mesh_name: str
        """
        if mesh_name is None:
            raise ValueError("Invalid value for `mesh_name`, must not be `None`")

        self._mesh_name = mesh_name

    @property
    def spec(self):
        """Gets the spec of this CreateMeshInput.


        :return: The spec of this CreateMeshInput.
        :rtype: CreateMeshInputSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this CreateMeshInput.


        :param spec: The spec of this CreateMeshInput.
        :type spec: CreateMeshInputSpec
        """

        self._spec = spec

    @property
    def tags(self):
        """Gets the tags of this CreateMeshInput.


        :return: The tags of this CreateMeshInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMeshInput.


        :param tags: The tags of this CreateMeshInput.
        :type tags: List
        """

        self._tags = tags
