# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grpc_retry_policy_per_retry_timeout import GrpcRetryPolicyPerRetryTimeout
from openapi_server import util


class GrpcRouteRetryPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, grpc_retry_events: List=None, http_retry_events: List=None, max_retries: int=None, per_retry_timeout: GrpcRetryPolicyPerRetryTimeout=None, tcp_retry_events: List=None):
        """GrpcRouteRetryPolicy - a model defined in OpenAPI

        :param grpc_retry_events: The grpc_retry_events of this GrpcRouteRetryPolicy.
        :param http_retry_events: The http_retry_events of this GrpcRouteRetryPolicy.
        :param max_retries: The max_retries of this GrpcRouteRetryPolicy.
        :param per_retry_timeout: The per_retry_timeout of this GrpcRouteRetryPolicy.
        :param tcp_retry_events: The tcp_retry_events of this GrpcRouteRetryPolicy.
        """
        self.openapi_types = {
            'grpc_retry_events': List,
            'http_retry_events': List,
            'max_retries': int,
            'per_retry_timeout': GrpcRetryPolicyPerRetryTimeout,
            'tcp_retry_events': List
        }

        self.attribute_map = {
            'grpc_retry_events': 'grpcRetryEvents',
            'http_retry_events': 'httpRetryEvents',
            'max_retries': 'maxRetries',
            'per_retry_timeout': 'perRetryTimeout',
            'tcp_retry_events': 'tcpRetryEvents'
        }

        self._grpc_retry_events = grpc_retry_events
        self._http_retry_events = http_retry_events
        self._max_retries = max_retries
        self._per_retry_timeout = per_retry_timeout
        self._tcp_retry_events = tcp_retry_events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrpcRouteRetryPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrpcRoute_retryPolicy of this GrpcRouteRetryPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grpc_retry_events(self):
        """Gets the grpc_retry_events of this GrpcRouteRetryPolicy.


        :return: The grpc_retry_events of this GrpcRouteRetryPolicy.
        :rtype: List
        """
        return self._grpc_retry_events

    @grpc_retry_events.setter
    def grpc_retry_events(self, grpc_retry_events):
        """Sets the grpc_retry_events of this GrpcRouteRetryPolicy.


        :param grpc_retry_events: The grpc_retry_events of this GrpcRouteRetryPolicy.
        :type grpc_retry_events: List
        """

        self._grpc_retry_events = grpc_retry_events

    @property
    def http_retry_events(self):
        """Gets the http_retry_events of this GrpcRouteRetryPolicy.


        :return: The http_retry_events of this GrpcRouteRetryPolicy.
        :rtype: List
        """
        return self._http_retry_events

    @http_retry_events.setter
    def http_retry_events(self, http_retry_events):
        """Sets the http_retry_events of this GrpcRouteRetryPolicy.


        :param http_retry_events: The http_retry_events of this GrpcRouteRetryPolicy.
        :type http_retry_events: List
        """

        self._http_retry_events = http_retry_events

    @property
    def max_retries(self):
        """Gets the max_retries of this GrpcRouteRetryPolicy.


        :return: The max_retries of this GrpcRouteRetryPolicy.
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries):
        """Sets the max_retries of this GrpcRouteRetryPolicy.


        :param max_retries: The max_retries of this GrpcRouteRetryPolicy.
        :type max_retries: int
        """
        if max_retries is None:
            raise ValueError("Invalid value for `max_retries`, must not be `None`")

        self._max_retries = max_retries

    @property
    def per_retry_timeout(self):
        """Gets the per_retry_timeout of this GrpcRouteRetryPolicy.


        :return: The per_retry_timeout of this GrpcRouteRetryPolicy.
        :rtype: GrpcRetryPolicyPerRetryTimeout
        """
        return self._per_retry_timeout

    @per_retry_timeout.setter
    def per_retry_timeout(self, per_retry_timeout):
        """Sets the per_retry_timeout of this GrpcRouteRetryPolicy.


        :param per_retry_timeout: The per_retry_timeout of this GrpcRouteRetryPolicy.
        :type per_retry_timeout: GrpcRetryPolicyPerRetryTimeout
        """
        if per_retry_timeout is None:
            raise ValueError("Invalid value for `per_retry_timeout`, must not be `None`")

        self._per_retry_timeout = per_retry_timeout

    @property
    def tcp_retry_events(self):
        """Gets the tcp_retry_events of this GrpcRouteRetryPolicy.


        :return: The tcp_retry_events of this GrpcRouteRetryPolicy.
        :rtype: List
        """
        return self._tcp_retry_events

    @tcp_retry_events.setter
    def tcp_retry_events(self, tcp_retry_events):
        """Sets the tcp_retry_events of this GrpcRouteRetryPolicy.


        :param tcp_retry_events: The tcp_retry_events of this GrpcRouteRetryPolicy.
        :type tcp_retry_events: List
        """

        self._tcp_retry_events = tcp_retry_events
