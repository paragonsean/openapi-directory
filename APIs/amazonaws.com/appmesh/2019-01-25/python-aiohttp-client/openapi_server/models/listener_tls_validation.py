# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.listener_tls_validation_context_subject_alternative_names import ListenerTlsValidationContextSubjectAlternativeNames
from openapi_server.models.listener_tls_validation_context_trust import ListenerTlsValidationContextTrust
from openapi_server import util


class ListenerTlsValidation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subject_alternative_names: ListenerTlsValidationContextSubjectAlternativeNames=None, trust: ListenerTlsValidationContextTrust=None):
        """ListenerTlsValidation - a model defined in OpenAPI

        :param subject_alternative_names: The subject_alternative_names of this ListenerTlsValidation.
        :param trust: The trust of this ListenerTlsValidation.
        """
        self.openapi_types = {
            'subject_alternative_names': ListenerTlsValidationContextSubjectAlternativeNames,
            'trust': ListenerTlsValidationContextTrust
        }

        self.attribute_map = {
            'subject_alternative_names': 'subjectAlternativeNames',
            'trust': 'trust'
        }

        self._subject_alternative_names = subject_alternative_names
        self._trust = trust

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListenerTlsValidation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListenerTls_validation of this ListenerTlsValidation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject_alternative_names(self):
        """Gets the subject_alternative_names of this ListenerTlsValidation.


        :return: The subject_alternative_names of this ListenerTlsValidation.
        :rtype: ListenerTlsValidationContextSubjectAlternativeNames
        """
        return self._subject_alternative_names

    @subject_alternative_names.setter
    def subject_alternative_names(self, subject_alternative_names):
        """Sets the subject_alternative_names of this ListenerTlsValidation.


        :param subject_alternative_names: The subject_alternative_names of this ListenerTlsValidation.
        :type subject_alternative_names: ListenerTlsValidationContextSubjectAlternativeNames
        """

        self._subject_alternative_names = subject_alternative_names

    @property
    def trust(self):
        """Gets the trust of this ListenerTlsValidation.


        :return: The trust of this ListenerTlsValidation.
        :rtype: ListenerTlsValidationContextTrust
        """
        return self._trust

    @trust.setter
    def trust(self, trust):
        """Sets the trust of this ListenerTlsValidation.


        :param trust: The trust of this ListenerTlsValidation.
        :type trust: ListenerTlsValidationContextTrust
        """
        if trust is None:
            raise ValueError("Invalid value for `trust`, must not be `None`")

        self._trust = trust
