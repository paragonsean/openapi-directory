# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientTlsCertificateFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_chain: str=None, private_key: str=None):
        """ClientTlsCertificateFile - a model defined in OpenAPI

        :param certificate_chain: The certificate_chain of this ClientTlsCertificateFile.
        :param private_key: The private_key of this ClientTlsCertificateFile.
        """
        self.openapi_types = {
            'certificate_chain': str,
            'private_key': str
        }

        self.attribute_map = {
            'certificate_chain': 'certificateChain',
            'private_key': 'privateKey'
        }

        self._certificate_chain = certificate_chain
        self._private_key = private_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientTlsCertificateFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientTlsCertificate_file of this ClientTlsCertificateFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_chain(self):
        """Gets the certificate_chain of this ClientTlsCertificateFile.


        :return: The certificate_chain of this ClientTlsCertificateFile.
        :rtype: str
        """
        return self._certificate_chain

    @certificate_chain.setter
    def certificate_chain(self, certificate_chain):
        """Sets the certificate_chain of this ClientTlsCertificateFile.


        :param certificate_chain: The certificate_chain of this ClientTlsCertificateFile.
        :type certificate_chain: str
        """
        if certificate_chain is None:
            raise ValueError("Invalid value for `certificate_chain`, must not be `None`")

        self._certificate_chain = certificate_chain

    @property
    def private_key(self):
        """Gets the private_key of this ClientTlsCertificateFile.


        :return: The private_key of this ClientTlsCertificateFile.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this ClientTlsCertificateFile.


        :param private_key: The private_key of this ClientTlsCertificateFile.
        :type private_key: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")

        self._private_key = private_key
