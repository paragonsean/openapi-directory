# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.association_overview import AssociationOverview
from openapi_server import util


class Association(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, instance_id: str=None, association_id: str=None, association_version: str=None, document_version: str=None, targets: List=None, last_execution_date: datetime=None, overview: AssociationOverview=None, schedule_expression: str=None, association_name: str=None, schedule_offset: int=None, target_maps: List=None):
        """Association - a model defined in OpenAPI

        :param name: The name of this Association.
        :param instance_id: The instance_id of this Association.
        :param association_id: The association_id of this Association.
        :param association_version: The association_version of this Association.
        :param document_version: The document_version of this Association.
        :param targets: The targets of this Association.
        :param last_execution_date: The last_execution_date of this Association.
        :param overview: The overview of this Association.
        :param schedule_expression: The schedule_expression of this Association.
        :param association_name: The association_name of this Association.
        :param schedule_offset: The schedule_offset of this Association.
        :param target_maps: The target_maps of this Association.
        """
        self.openapi_types = {
            'name': str,
            'instance_id': str,
            'association_id': str,
            'association_version': str,
            'document_version': str,
            'targets': List,
            'last_execution_date': datetime,
            'overview': AssociationOverview,
            'schedule_expression': str,
            'association_name': str,
            'schedule_offset': int,
            'target_maps': List
        }

        self.attribute_map = {
            'name': 'Name',
            'instance_id': 'InstanceId',
            'association_id': 'AssociationId',
            'association_version': 'AssociationVersion',
            'document_version': 'DocumentVersion',
            'targets': 'Targets',
            'last_execution_date': 'LastExecutionDate',
            'overview': 'Overview',
            'schedule_expression': 'ScheduleExpression',
            'association_name': 'AssociationName',
            'schedule_offset': 'ScheduleOffset',
            'target_maps': 'TargetMaps'
        }

        self._name = name
        self._instance_id = instance_id
        self._association_id = association_id
        self._association_version = association_version
        self._document_version = document_version
        self._targets = targets
        self._last_execution_date = last_execution_date
        self._overview = overview
        self._schedule_expression = schedule_expression
        self._association_name = association_name
        self._schedule_offset = schedule_offset
        self._target_maps = target_maps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Association':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Association of this Association.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Association.


        :return: The name of this Association.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Association.


        :param name: The name of this Association.
        :type name: str
        """

        self._name = name

    @property
    def instance_id(self):
        """Gets the instance_id of this Association.


        :return: The instance_id of this Association.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Association.


        :param instance_id: The instance_id of this Association.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def association_id(self):
        """Gets the association_id of this Association.


        :return: The association_id of this Association.
        :rtype: str
        """
        return self._association_id

    @association_id.setter
    def association_id(self, association_id):
        """Sets the association_id of this Association.


        :param association_id: The association_id of this Association.
        :type association_id: str
        """

        self._association_id = association_id

    @property
    def association_version(self):
        """Gets the association_version of this Association.


        :return: The association_version of this Association.
        :rtype: str
        """
        return self._association_version

    @association_version.setter
    def association_version(self, association_version):
        """Sets the association_version of this Association.


        :param association_version: The association_version of this Association.
        :type association_version: str
        """

        self._association_version = association_version

    @property
    def document_version(self):
        """Gets the document_version of this Association.


        :return: The document_version of this Association.
        :rtype: str
        """
        return self._document_version

    @document_version.setter
    def document_version(self, document_version):
        """Sets the document_version of this Association.


        :param document_version: The document_version of this Association.
        :type document_version: str
        """

        self._document_version = document_version

    @property
    def targets(self):
        """Gets the targets of this Association.


        :return: The targets of this Association.
        :rtype: List
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this Association.


        :param targets: The targets of this Association.
        :type targets: List
        """

        self._targets = targets

    @property
    def last_execution_date(self):
        """Gets the last_execution_date of this Association.


        :return: The last_execution_date of this Association.
        :rtype: datetime
        """
        return self._last_execution_date

    @last_execution_date.setter
    def last_execution_date(self, last_execution_date):
        """Sets the last_execution_date of this Association.


        :param last_execution_date: The last_execution_date of this Association.
        :type last_execution_date: datetime
        """

        self._last_execution_date = last_execution_date

    @property
    def overview(self):
        """Gets the overview of this Association.


        :return: The overview of this Association.
        :rtype: AssociationOverview
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this Association.


        :param overview: The overview of this Association.
        :type overview: AssociationOverview
        """

        self._overview = overview

    @property
    def schedule_expression(self):
        """Gets the schedule_expression of this Association.


        :return: The schedule_expression of this Association.
        :rtype: str
        """
        return self._schedule_expression

    @schedule_expression.setter
    def schedule_expression(self, schedule_expression):
        """Sets the schedule_expression of this Association.


        :param schedule_expression: The schedule_expression of this Association.
        :type schedule_expression: str
        """

        self._schedule_expression = schedule_expression

    @property
    def association_name(self):
        """Gets the association_name of this Association.


        :return: The association_name of this Association.
        :rtype: str
        """
        return self._association_name

    @association_name.setter
    def association_name(self, association_name):
        """Sets the association_name of this Association.


        :param association_name: The association_name of this Association.
        :type association_name: str
        """

        self._association_name = association_name

    @property
    def schedule_offset(self):
        """Gets the schedule_offset of this Association.


        :return: The schedule_offset of this Association.
        :rtype: int
        """
        return self._schedule_offset

    @schedule_offset.setter
    def schedule_offset(self, schedule_offset):
        """Sets the schedule_offset of this Association.


        :param schedule_offset: The schedule_offset of this Association.
        :type schedule_offset: int
        """

        self._schedule_offset = schedule_offset

    @property
    def target_maps(self):
        """Gets the target_maps of this Association.


        :return: The target_maps of this Association.
        :rtype: List
        """
        return self._target_maps

    @target_maps.setter
    def target_maps(self, target_maps):
        """Sets the target_maps of this Association.


        :param target_maps: The target_maps of this Association.
        :type target_maps: List
        """

        self._target_maps = target_maps
