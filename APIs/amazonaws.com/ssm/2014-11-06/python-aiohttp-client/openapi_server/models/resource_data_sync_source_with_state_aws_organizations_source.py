# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceDataSyncSourceWithStateAwsOrganizationsSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, organization_source_type: str=None, organizational_units: List=None):
        """ResourceDataSyncSourceWithStateAwsOrganizationsSource - a model defined in OpenAPI

        :param organization_source_type: The organization_source_type of this ResourceDataSyncSourceWithStateAwsOrganizationsSource.
        :param organizational_units: The organizational_units of this ResourceDataSyncSourceWithStateAwsOrganizationsSource.
        """
        self.openapi_types = {
            'organization_source_type': str,
            'organizational_units': List
        }

        self.attribute_map = {
            'organization_source_type': 'OrganizationSourceType',
            'organizational_units': 'OrganizationalUnits'
        }

        self._organization_source_type = organization_source_type
        self._organizational_units = organizational_units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceDataSyncSourceWithStateAwsOrganizationsSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceDataSyncSourceWithState_AwsOrganizationsSource of this ResourceDataSyncSourceWithStateAwsOrganizationsSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organization_source_type(self):
        """Gets the organization_source_type of this ResourceDataSyncSourceWithStateAwsOrganizationsSource.


        :return: The organization_source_type of this ResourceDataSyncSourceWithStateAwsOrganizationsSource.
        :rtype: str
        """
        return self._organization_source_type

    @organization_source_type.setter
    def organization_source_type(self, organization_source_type):
        """Sets the organization_source_type of this ResourceDataSyncSourceWithStateAwsOrganizationsSource.


        :param organization_source_type: The organization_source_type of this ResourceDataSyncSourceWithStateAwsOrganizationsSource.
        :type organization_source_type: str
        """
        if organization_source_type is None:
            raise ValueError("Invalid value for `organization_source_type`, must not be `None`")

        self._organization_source_type = organization_source_type

    @property
    def organizational_units(self):
        """Gets the organizational_units of this ResourceDataSyncSourceWithStateAwsOrganizationsSource.


        :return: The organizational_units of this ResourceDataSyncSourceWithStateAwsOrganizationsSource.
        :rtype: List
        """
        return self._organizational_units

    @organizational_units.setter
    def organizational_units(self, organizational_units):
        """Sets the organizational_units of this ResourceDataSyncSourceWithStateAwsOrganizationsSource.


        :param organizational_units: The organizational_units of this ResourceDataSyncSourceWithStateAwsOrganizationsSource.
        :type organizational_units: List
        """

        self._organizational_units = organizational_units
