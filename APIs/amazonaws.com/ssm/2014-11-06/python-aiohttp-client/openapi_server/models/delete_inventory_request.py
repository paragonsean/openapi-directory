# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inventory_schema_delete_option import InventorySchemaDeleteOption
from openapi_server import util


class DeleteInventoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type_name: str=None, schema_delete_option: InventorySchemaDeleteOption=None, dry_run: bool=None, client_token: str=None):
        """DeleteInventoryRequest - a model defined in OpenAPI

        :param type_name: The type_name of this DeleteInventoryRequest.
        :param schema_delete_option: The schema_delete_option of this DeleteInventoryRequest.
        :param dry_run: The dry_run of this DeleteInventoryRequest.
        :param client_token: The client_token of this DeleteInventoryRequest.
        """
        self.openapi_types = {
            'type_name': str,
            'schema_delete_option': InventorySchemaDeleteOption,
            'dry_run': bool,
            'client_token': str
        }

        self.attribute_map = {
            'type_name': 'TypeName',
            'schema_delete_option': 'SchemaDeleteOption',
            'dry_run': 'DryRun',
            'client_token': 'ClientToken'
        }

        self._type_name = type_name
        self._schema_delete_option = schema_delete_option
        self._dry_run = dry_run
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteInventoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteInventoryRequest of this DeleteInventoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type_name(self):
        """Gets the type_name of this DeleteInventoryRequest.


        :return: The type_name of this DeleteInventoryRequest.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this DeleteInventoryRequest.


        :param type_name: The type_name of this DeleteInventoryRequest.
        :type type_name: str
        """
        if type_name is None:
            raise ValueError("Invalid value for `type_name`, must not be `None`")

        self._type_name = type_name

    @property
    def schema_delete_option(self):
        """Gets the schema_delete_option of this DeleteInventoryRequest.


        :return: The schema_delete_option of this DeleteInventoryRequest.
        :rtype: InventorySchemaDeleteOption
        """
        return self._schema_delete_option

    @schema_delete_option.setter
    def schema_delete_option(self, schema_delete_option):
        """Sets the schema_delete_option of this DeleteInventoryRequest.


        :param schema_delete_option: The schema_delete_option of this DeleteInventoryRequest.
        :type schema_delete_option: InventorySchemaDeleteOption
        """

        self._schema_delete_option = schema_delete_option

    @property
    def dry_run(self):
        """Gets the dry_run of this DeleteInventoryRequest.


        :return: The dry_run of this DeleteInventoryRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this DeleteInventoryRequest.


        :param dry_run: The dry_run of this DeleteInventoryRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def client_token(self):
        """Gets the client_token of this DeleteInventoryRequest.


        :return: The client_token of this DeleteInventoryRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this DeleteInventoryRequest.


        :param client_token: The client_token of this DeleteInventoryRequest.
        :type client_token: str
        """

        self._client_token = client_token
