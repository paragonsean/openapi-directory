# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePatchBaselineRequestApprovalRules(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, patch_rules: List=None):
        """CreatePatchBaselineRequestApprovalRules - a model defined in OpenAPI

        :param patch_rules: The patch_rules of this CreatePatchBaselineRequestApprovalRules.
        """
        self.openapi_types = {
            'patch_rules': List
        }

        self.attribute_map = {
            'patch_rules': 'PatchRules'
        }

        self._patch_rules = patch_rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePatchBaselineRequestApprovalRules':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePatchBaselineRequest_ApprovalRules of this CreatePatchBaselineRequestApprovalRules.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def patch_rules(self):
        """Gets the patch_rules of this CreatePatchBaselineRequestApprovalRules.


        :return: The patch_rules of this CreatePatchBaselineRequestApprovalRules.
        :rtype: List
        """
        return self._patch_rules

    @patch_rules.setter
    def patch_rules(self, patch_rules):
        """Sets the patch_rules of this CreatePatchBaselineRequestApprovalRules.


        :param patch_rules: The patch_rules of this CreatePatchBaselineRequestApprovalRules.
        :type patch_rules: List
        """
        if patch_rules is None:
            raise ValueError("Invalid value for `patch_rules`, must not be `None`")

        self._patch_rules = patch_rules
