# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compliance_upload_type import ComplianceUploadType
from openapi_server.models.put_compliance_items_request_execution_summary import PutComplianceItemsRequestExecutionSummary
from openapi_server import util


class PutComplianceItemsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_id: str=None, resource_type: str=None, compliance_type: str=None, execution_summary: PutComplianceItemsRequestExecutionSummary=None, items: List=None, item_content_hash: str=None, upload_type: ComplianceUploadType=None):
        """PutComplianceItemsRequest - a model defined in OpenAPI

        :param resource_id: The resource_id of this PutComplianceItemsRequest.
        :param resource_type: The resource_type of this PutComplianceItemsRequest.
        :param compliance_type: The compliance_type of this PutComplianceItemsRequest.
        :param execution_summary: The execution_summary of this PutComplianceItemsRequest.
        :param items: The items of this PutComplianceItemsRequest.
        :param item_content_hash: The item_content_hash of this PutComplianceItemsRequest.
        :param upload_type: The upload_type of this PutComplianceItemsRequest.
        """
        self.openapi_types = {
            'resource_id': str,
            'resource_type': str,
            'compliance_type': str,
            'execution_summary': PutComplianceItemsRequestExecutionSummary,
            'items': List,
            'item_content_hash': str,
            'upload_type': ComplianceUploadType
        }

        self.attribute_map = {
            'resource_id': 'ResourceId',
            'resource_type': 'ResourceType',
            'compliance_type': 'ComplianceType',
            'execution_summary': 'ExecutionSummary',
            'items': 'Items',
            'item_content_hash': 'ItemContentHash',
            'upload_type': 'UploadType'
        }

        self._resource_id = resource_id
        self._resource_type = resource_type
        self._compliance_type = compliance_type
        self._execution_summary = execution_summary
        self._items = items
        self._item_content_hash = item_content_hash
        self._upload_type = upload_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutComplianceItemsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutComplianceItemsRequest of this PutComplianceItemsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_id(self):
        """Gets the resource_id of this PutComplianceItemsRequest.


        :return: The resource_id of this PutComplianceItemsRequest.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this PutComplianceItemsRequest.


        :param resource_id: The resource_id of this PutComplianceItemsRequest.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this PutComplianceItemsRequest.


        :return: The resource_type of this PutComplianceItemsRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this PutComplianceItemsRequest.


        :param resource_type: The resource_type of this PutComplianceItemsRequest.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type

    @property
    def compliance_type(self):
        """Gets the compliance_type of this PutComplianceItemsRequest.


        :return: The compliance_type of this PutComplianceItemsRequest.
        :rtype: str
        """
        return self._compliance_type

    @compliance_type.setter
    def compliance_type(self, compliance_type):
        """Sets the compliance_type of this PutComplianceItemsRequest.


        :param compliance_type: The compliance_type of this PutComplianceItemsRequest.
        :type compliance_type: str
        """
        if compliance_type is None:
            raise ValueError("Invalid value for `compliance_type`, must not be `None`")

        self._compliance_type = compliance_type

    @property
    def execution_summary(self):
        """Gets the execution_summary of this PutComplianceItemsRequest.


        :return: The execution_summary of this PutComplianceItemsRequest.
        :rtype: PutComplianceItemsRequestExecutionSummary
        """
        return self._execution_summary

    @execution_summary.setter
    def execution_summary(self, execution_summary):
        """Sets the execution_summary of this PutComplianceItemsRequest.


        :param execution_summary: The execution_summary of this PutComplianceItemsRequest.
        :type execution_summary: PutComplianceItemsRequestExecutionSummary
        """
        if execution_summary is None:
            raise ValueError("Invalid value for `execution_summary`, must not be `None`")

        self._execution_summary = execution_summary

    @property
    def items(self):
        """Gets the items of this PutComplianceItemsRequest.


        :return: The items of this PutComplianceItemsRequest.
        :rtype: List
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PutComplianceItemsRequest.


        :param items: The items of this PutComplianceItemsRequest.
        :type items: List
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def item_content_hash(self):
        """Gets the item_content_hash of this PutComplianceItemsRequest.


        :return: The item_content_hash of this PutComplianceItemsRequest.
        :rtype: str
        """
        return self._item_content_hash

    @item_content_hash.setter
    def item_content_hash(self, item_content_hash):
        """Sets the item_content_hash of this PutComplianceItemsRequest.


        :param item_content_hash: The item_content_hash of this PutComplianceItemsRequest.
        :type item_content_hash: str
        """

        self._item_content_hash = item_content_hash

    @property
    def upload_type(self):
        """Gets the upload_type of this PutComplianceItemsRequest.


        :return: The upload_type of this PutComplianceItemsRequest.
        :rtype: ComplianceUploadType
        """
        return self._upload_type

    @upload_type.setter
    def upload_type(self, upload_type):
        """Sets the upload_type of this PutComplianceItemsRequest.


        :param upload_type: The upload_type of this PutComplianceItemsRequest.
        :type upload_type: ComplianceUploadType
        """

        self._upload_type = upload_type
