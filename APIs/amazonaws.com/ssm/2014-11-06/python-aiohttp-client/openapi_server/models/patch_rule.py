# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patch_compliance_level import PatchComplianceLevel
from openapi_server.models.patch_rule_patch_filter_group import PatchRulePatchFilterGroup
from openapi_server import util


class PatchRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, patch_filter_group: PatchRulePatchFilterGroup=None, compliance_level: PatchComplianceLevel=None, approve_after_days: int=None, approve_until_date: str=None, enable_non_security: bool=None):
        """PatchRule - a model defined in OpenAPI

        :param patch_filter_group: The patch_filter_group of this PatchRule.
        :param compliance_level: The compliance_level of this PatchRule.
        :param approve_after_days: The approve_after_days of this PatchRule.
        :param approve_until_date: The approve_until_date of this PatchRule.
        :param enable_non_security: The enable_non_security of this PatchRule.
        """
        self.openapi_types = {
            'patch_filter_group': PatchRulePatchFilterGroup,
            'compliance_level': PatchComplianceLevel,
            'approve_after_days': int,
            'approve_until_date': str,
            'enable_non_security': bool
        }

        self.attribute_map = {
            'patch_filter_group': 'PatchFilterGroup',
            'compliance_level': 'ComplianceLevel',
            'approve_after_days': 'ApproveAfterDays',
            'approve_until_date': 'ApproveUntilDate',
            'enable_non_security': 'EnableNonSecurity'
        }

        self._patch_filter_group = patch_filter_group
        self._compliance_level = compliance_level
        self._approve_after_days = approve_after_days
        self._approve_until_date = approve_until_date
        self._enable_non_security = enable_non_security

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchRule of this PatchRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def patch_filter_group(self):
        """Gets the patch_filter_group of this PatchRule.


        :return: The patch_filter_group of this PatchRule.
        :rtype: PatchRulePatchFilterGroup
        """
        return self._patch_filter_group

    @patch_filter_group.setter
    def patch_filter_group(self, patch_filter_group):
        """Sets the patch_filter_group of this PatchRule.


        :param patch_filter_group: The patch_filter_group of this PatchRule.
        :type patch_filter_group: PatchRulePatchFilterGroup
        """
        if patch_filter_group is None:
            raise ValueError("Invalid value for `patch_filter_group`, must not be `None`")

        self._patch_filter_group = patch_filter_group

    @property
    def compliance_level(self):
        """Gets the compliance_level of this PatchRule.


        :return: The compliance_level of this PatchRule.
        :rtype: PatchComplianceLevel
        """
        return self._compliance_level

    @compliance_level.setter
    def compliance_level(self, compliance_level):
        """Sets the compliance_level of this PatchRule.


        :param compliance_level: The compliance_level of this PatchRule.
        :type compliance_level: PatchComplianceLevel
        """

        self._compliance_level = compliance_level

    @property
    def approve_after_days(self):
        """Gets the approve_after_days of this PatchRule.


        :return: The approve_after_days of this PatchRule.
        :rtype: int
        """
        return self._approve_after_days

    @approve_after_days.setter
    def approve_after_days(self, approve_after_days):
        """Sets the approve_after_days of this PatchRule.


        :param approve_after_days: The approve_after_days of this PatchRule.
        :type approve_after_days: int
        """

        self._approve_after_days = approve_after_days

    @property
    def approve_until_date(self):
        """Gets the approve_until_date of this PatchRule.


        :return: The approve_until_date of this PatchRule.
        :rtype: str
        """
        return self._approve_until_date

    @approve_until_date.setter
    def approve_until_date(self, approve_until_date):
        """Sets the approve_until_date of this PatchRule.


        :param approve_until_date: The approve_until_date of this PatchRule.
        :type approve_until_date: str
        """

        self._approve_until_date = approve_until_date

    @property
    def enable_non_security(self):
        """Gets the enable_non_security of this PatchRule.


        :return: The enable_non_security of this PatchRule.
        :rtype: bool
        """
        return self._enable_non_security

    @enable_non_security.setter
    def enable_non_security(self, enable_non_security):
        """Sets the enable_non_security of this PatchRule.


        :param enable_non_security: The enable_non_security of this PatchRule.
        :type enable_non_security: bool
        """

        self._enable_non_security = enable_non_security
