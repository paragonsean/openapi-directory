# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeregisterTargetFromMaintenanceWindowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, window_id: str=None, window_target_id: str=None, safe: bool=None):
        """DeregisterTargetFromMaintenanceWindowRequest - a model defined in OpenAPI

        :param window_id: The window_id of this DeregisterTargetFromMaintenanceWindowRequest.
        :param window_target_id: The window_target_id of this DeregisterTargetFromMaintenanceWindowRequest.
        :param safe: The safe of this DeregisterTargetFromMaintenanceWindowRequest.
        """
        self.openapi_types = {
            'window_id': str,
            'window_target_id': str,
            'safe': bool
        }

        self.attribute_map = {
            'window_id': 'WindowId',
            'window_target_id': 'WindowTargetId',
            'safe': 'Safe'
        }

        self._window_id = window_id
        self._window_target_id = window_target_id
        self._safe = safe

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeregisterTargetFromMaintenanceWindowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeregisterTargetFromMaintenanceWindowRequest of this DeregisterTargetFromMaintenanceWindowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def window_id(self):
        """Gets the window_id of this DeregisterTargetFromMaintenanceWindowRequest.


        :return: The window_id of this DeregisterTargetFromMaintenanceWindowRequest.
        :rtype: str
        """
        return self._window_id

    @window_id.setter
    def window_id(self, window_id):
        """Sets the window_id of this DeregisterTargetFromMaintenanceWindowRequest.


        :param window_id: The window_id of this DeregisterTargetFromMaintenanceWindowRequest.
        :type window_id: str
        """
        if window_id is None:
            raise ValueError("Invalid value for `window_id`, must not be `None`")

        self._window_id = window_id

    @property
    def window_target_id(self):
        """Gets the window_target_id of this DeregisterTargetFromMaintenanceWindowRequest.


        :return: The window_target_id of this DeregisterTargetFromMaintenanceWindowRequest.
        :rtype: str
        """
        return self._window_target_id

    @window_target_id.setter
    def window_target_id(self, window_target_id):
        """Sets the window_target_id of this DeregisterTargetFromMaintenanceWindowRequest.


        :param window_target_id: The window_target_id of this DeregisterTargetFromMaintenanceWindowRequest.
        :type window_target_id: str
        """
        if window_target_id is None:
            raise ValueError("Invalid value for `window_target_id`, must not be `None`")

        self._window_target_id = window_target_id

    @property
    def safe(self):
        """Gets the safe of this DeregisterTargetFromMaintenanceWindowRequest.


        :return: The safe of this DeregisterTargetFromMaintenanceWindowRequest.
        :rtype: bool
        """
        return self._safe

    @safe.setter
    def safe(self, safe):
        """Sets the safe of this DeregisterTargetFromMaintenanceWindowRequest.


        :param safe: The safe of this DeregisterTargetFromMaintenanceWindowRequest.
        :type safe: bool
        """

        self._safe = safe
