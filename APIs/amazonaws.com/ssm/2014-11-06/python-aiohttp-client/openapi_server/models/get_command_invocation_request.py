# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetCommandInvocationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command_id: str=None, instance_id: str=None, plugin_name: str=None):
        """GetCommandInvocationRequest - a model defined in OpenAPI

        :param command_id: The command_id of this GetCommandInvocationRequest.
        :param instance_id: The instance_id of this GetCommandInvocationRequest.
        :param plugin_name: The plugin_name of this GetCommandInvocationRequest.
        """
        self.openapi_types = {
            'command_id': str,
            'instance_id': str,
            'plugin_name': str
        }

        self.attribute_map = {
            'command_id': 'CommandId',
            'instance_id': 'InstanceId',
            'plugin_name': 'PluginName'
        }

        self._command_id = command_id
        self._instance_id = instance_id
        self._plugin_name = plugin_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCommandInvocationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCommandInvocationRequest of this GetCommandInvocationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command_id(self):
        """Gets the command_id of this GetCommandInvocationRequest.


        :return: The command_id of this GetCommandInvocationRequest.
        :rtype: str
        """
        return self._command_id

    @command_id.setter
    def command_id(self, command_id):
        """Sets the command_id of this GetCommandInvocationRequest.


        :param command_id: The command_id of this GetCommandInvocationRequest.
        :type command_id: str
        """
        if command_id is None:
            raise ValueError("Invalid value for `command_id`, must not be `None`")

        self._command_id = command_id

    @property
    def instance_id(self):
        """Gets the instance_id of this GetCommandInvocationRequest.


        :return: The instance_id of this GetCommandInvocationRequest.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this GetCommandInvocationRequest.


        :param instance_id: The instance_id of this GetCommandInvocationRequest.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def plugin_name(self):
        """Gets the plugin_name of this GetCommandInvocationRequest.


        :return: The plugin_name of this GetCommandInvocationRequest.
        :rtype: str
        """
        return self._plugin_name

    @plugin_name.setter
    def plugin_name(self, plugin_name):
        """Sets the plugin_name of this GetCommandInvocationRequest.


        :param plugin_name: The plugin_name of this GetCommandInvocationRequest.
        :type plugin_name: str
        """

        self._plugin_name = plugin_name
