# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InventoryResultItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type_name: str=None, schema_version: str=None, capture_time: str=None, content_hash: str=None, content: List=None):
        """InventoryResultItem - a model defined in OpenAPI

        :param type_name: The type_name of this InventoryResultItem.
        :param schema_version: The schema_version of this InventoryResultItem.
        :param capture_time: The capture_time of this InventoryResultItem.
        :param content_hash: The content_hash of this InventoryResultItem.
        :param content: The content of this InventoryResultItem.
        """
        self.openapi_types = {
            'type_name': str,
            'schema_version': str,
            'capture_time': str,
            'content_hash': str,
            'content': List
        }

        self.attribute_map = {
            'type_name': 'TypeName',
            'schema_version': 'SchemaVersion',
            'capture_time': 'CaptureTime',
            'content_hash': 'ContentHash',
            'content': 'Content'
        }

        self._type_name = type_name
        self._schema_version = schema_version
        self._capture_time = capture_time
        self._content_hash = content_hash
        self._content = content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventoryResultItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventoryResultItem of this InventoryResultItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type_name(self):
        """Gets the type_name of this InventoryResultItem.


        :return: The type_name of this InventoryResultItem.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this InventoryResultItem.


        :param type_name: The type_name of this InventoryResultItem.
        :type type_name: str
        """
        if type_name is None:
            raise ValueError("Invalid value for `type_name`, must not be `None`")

        self._type_name = type_name

    @property
    def schema_version(self):
        """Gets the schema_version of this InventoryResultItem.


        :return: The schema_version of this InventoryResultItem.
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this InventoryResultItem.


        :param schema_version: The schema_version of this InventoryResultItem.
        :type schema_version: str
        """
        if schema_version is None:
            raise ValueError("Invalid value for `schema_version`, must not be `None`")

        self._schema_version = schema_version

    @property
    def capture_time(self):
        """Gets the capture_time of this InventoryResultItem.


        :return: The capture_time of this InventoryResultItem.
        :rtype: str
        """
        return self._capture_time

    @capture_time.setter
    def capture_time(self, capture_time):
        """Sets the capture_time of this InventoryResultItem.


        :param capture_time: The capture_time of this InventoryResultItem.
        :type capture_time: str
        """

        self._capture_time = capture_time

    @property
    def content_hash(self):
        """Gets the content_hash of this InventoryResultItem.


        :return: The content_hash of this InventoryResultItem.
        :rtype: str
        """
        return self._content_hash

    @content_hash.setter
    def content_hash(self, content_hash):
        """Sets the content_hash of this InventoryResultItem.


        :param content_hash: The content_hash of this InventoryResultItem.
        :type content_hash: str
        """

        self._content_hash = content_hash

    @property
    def content(self):
        """Gets the content of this InventoryResultItem.


        :return: The content of this InventoryResultItem.
        :rtype: List
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InventoryResultItem.


        :param content: The content of this InventoryResultItem.
        :type content: List
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content
