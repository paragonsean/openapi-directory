# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartSessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target: str=None, document_name: str=None, reason: str=None, parameters: Dict=None):
        """StartSessionRequest - a model defined in OpenAPI

        :param target: The target of this StartSessionRequest.
        :param document_name: The document_name of this StartSessionRequest.
        :param reason: The reason of this StartSessionRequest.
        :param parameters: The parameters of this StartSessionRequest.
        """
        self.openapi_types = {
            'target': str,
            'document_name': str,
            'reason': str,
            'parameters': Dict
        }

        self.attribute_map = {
            'target': 'Target',
            'document_name': 'DocumentName',
            'reason': 'Reason',
            'parameters': 'Parameters'
        }

        self._target = target
        self._document_name = document_name
        self._reason = reason
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartSessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartSessionRequest of this StartSessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target(self):
        """Gets the target of this StartSessionRequest.


        :return: The target of this StartSessionRequest.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this StartSessionRequest.


        :param target: The target of this StartSessionRequest.
        :type target: str
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target

    @property
    def document_name(self):
        """Gets the document_name of this StartSessionRequest.


        :return: The document_name of this StartSessionRequest.
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this StartSessionRequest.


        :param document_name: The document_name of this StartSessionRequest.
        :type document_name: str
        """

        self._document_name = document_name

    @property
    def reason(self):
        """Gets the reason of this StartSessionRequest.


        :return: The reason of this StartSessionRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this StartSessionRequest.


        :param reason: The reason of this StartSessionRequest.
        :type reason: str
        """

        self._reason = reason

    @property
    def parameters(self):
        """Gets the parameters of this StartSessionRequest.


        :return: The parameters of this StartSessionRequest.
        :rtype: Dict
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this StartSessionRequest.


        :param parameters: The parameters of this StartSessionRequest.
        :type parameters: Dict
        """

        self._parameters = parameters
