# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operating_system import OperatingSystem
from openapi_server.models.patch_property import PatchProperty
from openapi_server.models.patch_set import PatchSet
from openapi_server import util


class DescribePatchPropertiesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operating_system: OperatingSystem=None, _property: PatchProperty=None, patch_set: PatchSet=None, max_results: int=None, next_token: str=None):
        """DescribePatchPropertiesRequest - a model defined in OpenAPI

        :param operating_system: The operating_system of this DescribePatchPropertiesRequest.
        :param _property: The _property of this DescribePatchPropertiesRequest.
        :param patch_set: The patch_set of this DescribePatchPropertiesRequest.
        :param max_results: The max_results of this DescribePatchPropertiesRequest.
        :param next_token: The next_token of this DescribePatchPropertiesRequest.
        """
        self.openapi_types = {
            'operating_system': OperatingSystem,
            '_property': PatchProperty,
            'patch_set': PatchSet,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'operating_system': 'OperatingSystem',
            '_property': 'Property',
            'patch_set': 'PatchSet',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._operating_system = operating_system
        self.__property = _property
        self._patch_set = patch_set
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribePatchPropertiesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribePatchPropertiesRequest of this DescribePatchPropertiesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operating_system(self):
        """Gets the operating_system of this DescribePatchPropertiesRequest.


        :return: The operating_system of this DescribePatchPropertiesRequest.
        :rtype: OperatingSystem
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this DescribePatchPropertiesRequest.


        :param operating_system: The operating_system of this DescribePatchPropertiesRequest.
        :type operating_system: OperatingSystem
        """
        if operating_system is None:
            raise ValueError("Invalid value for `operating_system`, must not be `None`")

        self._operating_system = operating_system

    @property
    def _property(self):
        """Gets the _property of this DescribePatchPropertiesRequest.


        :return: The _property of this DescribePatchPropertiesRequest.
        :rtype: PatchProperty
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this DescribePatchPropertiesRequest.


        :param _property: The _property of this DescribePatchPropertiesRequest.
        :type _property: PatchProperty
        """
        if _property is None:
            raise ValueError("Invalid value for `_property`, must not be `None`")

        self.__property = _property

    @property
    def patch_set(self):
        """Gets the patch_set of this DescribePatchPropertiesRequest.


        :return: The patch_set of this DescribePatchPropertiesRequest.
        :rtype: PatchSet
        """
        return self._patch_set

    @patch_set.setter
    def patch_set(self, patch_set):
        """Sets the patch_set of this DescribePatchPropertiesRequest.


        :param patch_set: The patch_set of this DescribePatchPropertiesRequest.
        :type patch_set: PatchSet
        """

        self._patch_set = patch_set

    @property
    def max_results(self):
        """Gets the max_results of this DescribePatchPropertiesRequest.


        :return: The max_results of this DescribePatchPropertiesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribePatchPropertiesRequest.


        :param max_results: The max_results of this DescribePatchPropertiesRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this DescribePatchPropertiesRequest.


        :return: The next_token of this DescribePatchPropertiesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribePatchPropertiesRequest.


        :param next_token: The next_token of this DescribePatchPropertiesRequest.
        :type next_token: str
        """

        self._next_token = next_token
