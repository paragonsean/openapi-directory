# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Runbook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_name: str=None, document_version: str=None, parameters: Dict=None, target_parameter_name: str=None, targets: List=None, target_maps: List=None, max_concurrency: str=None, max_errors: str=None, target_locations: List=None):
        """Runbook - a model defined in OpenAPI

        :param document_name: The document_name of this Runbook.
        :param document_version: The document_version of this Runbook.
        :param parameters: The parameters of this Runbook.
        :param target_parameter_name: The target_parameter_name of this Runbook.
        :param targets: The targets of this Runbook.
        :param target_maps: The target_maps of this Runbook.
        :param max_concurrency: The max_concurrency of this Runbook.
        :param max_errors: The max_errors of this Runbook.
        :param target_locations: The target_locations of this Runbook.
        """
        self.openapi_types = {
            'document_name': str,
            'document_version': str,
            'parameters': Dict,
            'target_parameter_name': str,
            'targets': List,
            'target_maps': List,
            'max_concurrency': str,
            'max_errors': str,
            'target_locations': List
        }

        self.attribute_map = {
            'document_name': 'DocumentName',
            'document_version': 'DocumentVersion',
            'parameters': 'Parameters',
            'target_parameter_name': 'TargetParameterName',
            'targets': 'Targets',
            'target_maps': 'TargetMaps',
            'max_concurrency': 'MaxConcurrency',
            'max_errors': 'MaxErrors',
            'target_locations': 'TargetLocations'
        }

        self._document_name = document_name
        self._document_version = document_version
        self._parameters = parameters
        self._target_parameter_name = target_parameter_name
        self._targets = targets
        self._target_maps = target_maps
        self._max_concurrency = max_concurrency
        self._max_errors = max_errors
        self._target_locations = target_locations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Runbook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Runbook of this Runbook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_name(self):
        """Gets the document_name of this Runbook.


        :return: The document_name of this Runbook.
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this Runbook.


        :param document_name: The document_name of this Runbook.
        :type document_name: str
        """
        if document_name is None:
            raise ValueError("Invalid value for `document_name`, must not be `None`")

        self._document_name = document_name

    @property
    def document_version(self):
        """Gets the document_version of this Runbook.


        :return: The document_version of this Runbook.
        :rtype: str
        """
        return self._document_version

    @document_version.setter
    def document_version(self, document_version):
        """Sets the document_version of this Runbook.


        :param document_version: The document_version of this Runbook.
        :type document_version: str
        """

        self._document_version = document_version

    @property
    def parameters(self):
        """Gets the parameters of this Runbook.


        :return: The parameters of this Runbook.
        :rtype: Dict
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Runbook.


        :param parameters: The parameters of this Runbook.
        :type parameters: Dict
        """

        self._parameters = parameters

    @property
    def target_parameter_name(self):
        """Gets the target_parameter_name of this Runbook.


        :return: The target_parameter_name of this Runbook.
        :rtype: str
        """
        return self._target_parameter_name

    @target_parameter_name.setter
    def target_parameter_name(self, target_parameter_name):
        """Sets the target_parameter_name of this Runbook.


        :param target_parameter_name: The target_parameter_name of this Runbook.
        :type target_parameter_name: str
        """

        self._target_parameter_name = target_parameter_name

    @property
    def targets(self):
        """Gets the targets of this Runbook.


        :return: The targets of this Runbook.
        :rtype: List
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this Runbook.


        :param targets: The targets of this Runbook.
        :type targets: List
        """

        self._targets = targets

    @property
    def target_maps(self):
        """Gets the target_maps of this Runbook.


        :return: The target_maps of this Runbook.
        :rtype: List
        """
        return self._target_maps

    @target_maps.setter
    def target_maps(self, target_maps):
        """Sets the target_maps of this Runbook.


        :param target_maps: The target_maps of this Runbook.
        :type target_maps: List
        """

        self._target_maps = target_maps

    @property
    def max_concurrency(self):
        """Gets the max_concurrency of this Runbook.


        :return: The max_concurrency of this Runbook.
        :rtype: str
        """
        return self._max_concurrency

    @max_concurrency.setter
    def max_concurrency(self, max_concurrency):
        """Sets the max_concurrency of this Runbook.


        :param max_concurrency: The max_concurrency of this Runbook.
        :type max_concurrency: str
        """

        self._max_concurrency = max_concurrency

    @property
    def max_errors(self):
        """Gets the max_errors of this Runbook.


        :return: The max_errors of this Runbook.
        :rtype: str
        """
        return self._max_errors

    @max_errors.setter
    def max_errors(self, max_errors):
        """Sets the max_errors of this Runbook.


        :param max_errors: The max_errors of this Runbook.
        :type max_errors: str
        """

        self._max_errors = max_errors

    @property
    def target_locations(self):
        """Gets the target_locations of this Runbook.


        :return: The target_locations of this Runbook.
        :rtype: List
        """
        return self._target_locations

    @target_locations.setter
    def target_locations(self, target_locations):
        """Sets the target_locations of this Runbook.


        :param target_locations: The target_locations of this Runbook.
        :type target_locations: List
        """

        self._target_locations = target_locations
