# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InventoryDeletionSummaryItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version: str=None, count: int=None, remaining_count: int=None):
        """InventoryDeletionSummaryItem - a model defined in OpenAPI

        :param version: The version of this InventoryDeletionSummaryItem.
        :param count: The count of this InventoryDeletionSummaryItem.
        :param remaining_count: The remaining_count of this InventoryDeletionSummaryItem.
        """
        self.openapi_types = {
            'version': str,
            'count': int,
            'remaining_count': int
        }

        self.attribute_map = {
            'version': 'Version',
            'count': 'Count',
            'remaining_count': 'RemainingCount'
        }

        self._version = version
        self._count = count
        self._remaining_count = remaining_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InventoryDeletionSummaryItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InventoryDeletionSummaryItem of this InventoryDeletionSummaryItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self):
        """Gets the version of this InventoryDeletionSummaryItem.


        :return: The version of this InventoryDeletionSummaryItem.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InventoryDeletionSummaryItem.


        :param version: The version of this InventoryDeletionSummaryItem.
        :type version: str
        """

        self._version = version

    @property
    def count(self):
        """Gets the count of this InventoryDeletionSummaryItem.


        :return: The count of this InventoryDeletionSummaryItem.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this InventoryDeletionSummaryItem.


        :param count: The count of this InventoryDeletionSummaryItem.
        :type count: int
        """

        self._count = count

    @property
    def remaining_count(self):
        """Gets the remaining_count of this InventoryDeletionSummaryItem.


        :return: The remaining_count of this InventoryDeletionSummaryItem.
        :rtype: int
        """
        return self._remaining_count

    @remaining_count.setter
    def remaining_count(self, remaining_count):
        """Sets the remaining_count of this InventoryDeletionSummaryItem.


        :param remaining_count: The remaining_count of this InventoryDeletionSummaryItem.
        :type remaining_count: int
        """

        self._remaining_count = remaining_count
