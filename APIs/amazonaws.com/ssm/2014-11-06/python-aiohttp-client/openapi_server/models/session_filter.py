# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.session_filter_key import SessionFilterKey
from openapi_server import util


class SessionFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: SessionFilterKey=None, value: str=None):
        """SessionFilter - a model defined in OpenAPI

        :param key: The key of this SessionFilter.
        :param value: The value of this SessionFilter.
        """
        self.openapi_types = {
            'key': SessionFilterKey,
            'value': str
        }

        self.attribute_map = {
            'key': 'key',
            'value': 'value'
        }

        self._key = key
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionFilter of this SessionFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this SessionFilter.


        :return: The key of this SessionFilter.
        :rtype: SessionFilterKey
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SessionFilter.


        :param key: The key of this SessionFilter.
        :type key: SessionFilterKey
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def value(self):
        """Gets the value of this SessionFilter.


        :return: The value of this SessionFilter.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SessionFilter.


        :param value: The value of this SessionFilter.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
