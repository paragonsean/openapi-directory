# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OpsAggregator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregator_type: str=None, type_name: str=None, attribute_name: str=None, values: Dict=None, filters: List=None, aggregators: List=None):
        """OpsAggregator - a model defined in OpenAPI

        :param aggregator_type: The aggregator_type of this OpsAggregator.
        :param type_name: The type_name of this OpsAggregator.
        :param attribute_name: The attribute_name of this OpsAggregator.
        :param values: The values of this OpsAggregator.
        :param filters: The filters of this OpsAggregator.
        :param aggregators: The aggregators of this OpsAggregator.
        """
        self.openapi_types = {
            'aggregator_type': str,
            'type_name': str,
            'attribute_name': str,
            'values': Dict,
            'filters': List,
            'aggregators': List
        }

        self.attribute_map = {
            'aggregator_type': 'AggregatorType',
            'type_name': 'TypeName',
            'attribute_name': 'AttributeName',
            'values': 'Values',
            'filters': 'Filters',
            'aggregators': 'Aggregators'
        }

        self._aggregator_type = aggregator_type
        self._type_name = type_name
        self._attribute_name = attribute_name
        self._values = values
        self._filters = filters
        self._aggregators = aggregators

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpsAggregator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpsAggregator of this OpsAggregator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregator_type(self):
        """Gets the aggregator_type of this OpsAggregator.


        :return: The aggregator_type of this OpsAggregator.
        :rtype: str
        """
        return self._aggregator_type

    @aggregator_type.setter
    def aggregator_type(self, aggregator_type):
        """Sets the aggregator_type of this OpsAggregator.


        :param aggregator_type: The aggregator_type of this OpsAggregator.
        :type aggregator_type: str
        """

        self._aggregator_type = aggregator_type

    @property
    def type_name(self):
        """Gets the type_name of this OpsAggregator.


        :return: The type_name of this OpsAggregator.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this OpsAggregator.


        :param type_name: The type_name of this OpsAggregator.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def attribute_name(self):
        """Gets the attribute_name of this OpsAggregator.


        :return: The attribute_name of this OpsAggregator.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this OpsAggregator.


        :param attribute_name: The attribute_name of this OpsAggregator.
        :type attribute_name: str
        """

        self._attribute_name = attribute_name

    @property
    def values(self):
        """Gets the values of this OpsAggregator.


        :return: The values of this OpsAggregator.
        :rtype: Dict
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this OpsAggregator.


        :param values: The values of this OpsAggregator.
        :type values: Dict
        """

        self._values = values

    @property
    def filters(self):
        """Gets the filters of this OpsAggregator.


        :return: The filters of this OpsAggregator.
        :rtype: List
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this OpsAggregator.


        :param filters: The filters of this OpsAggregator.
        :type filters: List
        """

        self._filters = filters

    @property
    def aggregators(self):
        """Gets the aggregators of this OpsAggregator.


        :return: The aggregators of this OpsAggregator.
        :rtype: List
        """
        return self._aggregators

    @aggregators.setter
    def aggregators(self, aggregators):
        """Sets the aggregators of this OpsAggregator.


        :param aggregators: The aggregators of this OpsAggregator.
        :type aggregators: List
        """

        self._aggregators = aggregators
