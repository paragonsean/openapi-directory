# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociationOverview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, detailed_status: str=None, association_status_aggregated_count: Dict=None):
        """AssociationOverview - a model defined in OpenAPI

        :param status: The status of this AssociationOverview.
        :param detailed_status: The detailed_status of this AssociationOverview.
        :param association_status_aggregated_count: The association_status_aggregated_count of this AssociationOverview.
        """
        self.openapi_types = {
            'status': str,
            'detailed_status': str,
            'association_status_aggregated_count': Dict
        }

        self.attribute_map = {
            'status': 'Status',
            'detailed_status': 'DetailedStatus',
            'association_status_aggregated_count': 'AssociationStatusAggregatedCount'
        }

        self._status = status
        self._detailed_status = detailed_status
        self._association_status_aggregated_count = association_status_aggregated_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociationOverview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Association_Overview of this AssociationOverview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this AssociationOverview.


        :return: The status of this AssociationOverview.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssociationOverview.


        :param status: The status of this AssociationOverview.
        :type status: str
        """

        self._status = status

    @property
    def detailed_status(self):
        """Gets the detailed_status of this AssociationOverview.


        :return: The detailed_status of this AssociationOverview.
        :rtype: str
        """
        return self._detailed_status

    @detailed_status.setter
    def detailed_status(self, detailed_status):
        """Sets the detailed_status of this AssociationOverview.


        :param detailed_status: The detailed_status of this AssociationOverview.
        :type detailed_status: str
        """

        self._detailed_status = detailed_status

    @property
    def association_status_aggregated_count(self):
        """Gets the association_status_aggregated_count of this AssociationOverview.


        :return: The association_status_aggregated_count of this AssociationOverview.
        :rtype: Dict
        """
        return self._association_status_aggregated_count

    @association_status_aggregated_count.setter
    def association_status_aggregated_count(self, association_status_aggregated_count):
        """Sets the association_status_aggregated_count of this AssociationOverview.


        :param association_status_aggregated_count: The association_status_aggregated_count of this AssociationOverview.
        :type association_status_aggregated_count: Dict
        """

        self._association_status_aggregated_count = association_status_aggregated_count
