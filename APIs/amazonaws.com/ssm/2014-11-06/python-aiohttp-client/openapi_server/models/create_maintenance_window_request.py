# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateMaintenanceWindowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, start_date: str=None, end_date: str=None, schedule: str=None, schedule_timezone: str=None, schedule_offset: int=None, duration: int=None, cutoff: int=None, allow_unassociated_targets: bool=None, client_token: str=None, tags: List=None):
        """CreateMaintenanceWindowRequest - a model defined in OpenAPI

        :param name: The name of this CreateMaintenanceWindowRequest.
        :param description: The description of this CreateMaintenanceWindowRequest.
        :param start_date: The start_date of this CreateMaintenanceWindowRequest.
        :param end_date: The end_date of this CreateMaintenanceWindowRequest.
        :param schedule: The schedule of this CreateMaintenanceWindowRequest.
        :param schedule_timezone: The schedule_timezone of this CreateMaintenanceWindowRequest.
        :param schedule_offset: The schedule_offset of this CreateMaintenanceWindowRequest.
        :param duration: The duration of this CreateMaintenanceWindowRequest.
        :param cutoff: The cutoff of this CreateMaintenanceWindowRequest.
        :param allow_unassociated_targets: The allow_unassociated_targets of this CreateMaintenanceWindowRequest.
        :param client_token: The client_token of this CreateMaintenanceWindowRequest.
        :param tags: The tags of this CreateMaintenanceWindowRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'start_date': str,
            'end_date': str,
            'schedule': str,
            'schedule_timezone': str,
            'schedule_offset': int,
            'duration': int,
            'cutoff': int,
            'allow_unassociated_targets': bool,
            'client_token': str,
            'tags': List
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'start_date': 'StartDate',
            'end_date': 'EndDate',
            'schedule': 'Schedule',
            'schedule_timezone': 'ScheduleTimezone',
            'schedule_offset': 'ScheduleOffset',
            'duration': 'Duration',
            'cutoff': 'Cutoff',
            'allow_unassociated_targets': 'AllowUnassociatedTargets',
            'client_token': 'ClientToken',
            'tags': 'Tags'
        }

        self._name = name
        self._description = description
        self._start_date = start_date
        self._end_date = end_date
        self._schedule = schedule
        self._schedule_timezone = schedule_timezone
        self._schedule_offset = schedule_offset
        self._duration = duration
        self._cutoff = cutoff
        self._allow_unassociated_targets = allow_unassociated_targets
        self._client_token = client_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMaintenanceWindowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMaintenanceWindowRequest of this CreateMaintenanceWindowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateMaintenanceWindowRequest.


        :return: The name of this CreateMaintenanceWindowRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateMaintenanceWindowRequest.


        :param name: The name of this CreateMaintenanceWindowRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateMaintenanceWindowRequest.


        :return: The description of this CreateMaintenanceWindowRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateMaintenanceWindowRequest.


        :param description: The description of this CreateMaintenanceWindowRequest.
        :type description: str
        """

        self._description = description

    @property
    def start_date(self):
        """Gets the start_date of this CreateMaintenanceWindowRequest.


        :return: The start_date of this CreateMaintenanceWindowRequest.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CreateMaintenanceWindowRequest.


        :param start_date: The start_date of this CreateMaintenanceWindowRequest.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this CreateMaintenanceWindowRequest.


        :return: The end_date of this CreateMaintenanceWindowRequest.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CreateMaintenanceWindowRequest.


        :param end_date: The end_date of this CreateMaintenanceWindowRequest.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def schedule(self):
        """Gets the schedule of this CreateMaintenanceWindowRequest.


        :return: The schedule of this CreateMaintenanceWindowRequest.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this CreateMaintenanceWindowRequest.


        :param schedule: The schedule of this CreateMaintenanceWindowRequest.
        :type schedule: str
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule

    @property
    def schedule_timezone(self):
        """Gets the schedule_timezone of this CreateMaintenanceWindowRequest.


        :return: The schedule_timezone of this CreateMaintenanceWindowRequest.
        :rtype: str
        """
        return self._schedule_timezone

    @schedule_timezone.setter
    def schedule_timezone(self, schedule_timezone):
        """Sets the schedule_timezone of this CreateMaintenanceWindowRequest.


        :param schedule_timezone: The schedule_timezone of this CreateMaintenanceWindowRequest.
        :type schedule_timezone: str
        """

        self._schedule_timezone = schedule_timezone

    @property
    def schedule_offset(self):
        """Gets the schedule_offset of this CreateMaintenanceWindowRequest.


        :return: The schedule_offset of this CreateMaintenanceWindowRequest.
        :rtype: int
        """
        return self._schedule_offset

    @schedule_offset.setter
    def schedule_offset(self, schedule_offset):
        """Sets the schedule_offset of this CreateMaintenanceWindowRequest.


        :param schedule_offset: The schedule_offset of this CreateMaintenanceWindowRequest.
        :type schedule_offset: int
        """

        self._schedule_offset = schedule_offset

    @property
    def duration(self):
        """Gets the duration of this CreateMaintenanceWindowRequest.


        :return: The duration of this CreateMaintenanceWindowRequest.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CreateMaintenanceWindowRequest.


        :param duration: The duration of this CreateMaintenanceWindowRequest.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def cutoff(self):
        """Gets the cutoff of this CreateMaintenanceWindowRequest.


        :return: The cutoff of this CreateMaintenanceWindowRequest.
        :rtype: int
        """
        return self._cutoff

    @cutoff.setter
    def cutoff(self, cutoff):
        """Sets the cutoff of this CreateMaintenanceWindowRequest.


        :param cutoff: The cutoff of this CreateMaintenanceWindowRequest.
        :type cutoff: int
        """
        if cutoff is None:
            raise ValueError("Invalid value for `cutoff`, must not be `None`")

        self._cutoff = cutoff

    @property
    def allow_unassociated_targets(self):
        """Gets the allow_unassociated_targets of this CreateMaintenanceWindowRequest.


        :return: The allow_unassociated_targets of this CreateMaintenanceWindowRequest.
        :rtype: bool
        """
        return self._allow_unassociated_targets

    @allow_unassociated_targets.setter
    def allow_unassociated_targets(self, allow_unassociated_targets):
        """Sets the allow_unassociated_targets of this CreateMaintenanceWindowRequest.


        :param allow_unassociated_targets: The allow_unassociated_targets of this CreateMaintenanceWindowRequest.
        :type allow_unassociated_targets: bool
        """
        if allow_unassociated_targets is None:
            raise ValueError("Invalid value for `allow_unassociated_targets`, must not be `None`")

        self._allow_unassociated_targets = allow_unassociated_targets

    @property
    def client_token(self):
        """Gets the client_token of this CreateMaintenanceWindowRequest.


        :return: The client_token of this CreateMaintenanceWindowRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateMaintenanceWindowRequest.


        :param client_token: The client_token of this CreateMaintenanceWindowRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateMaintenanceWindowRequest.


        :return: The tags of this CreateMaintenanceWindowRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMaintenanceWindowRequest.


        :param tags: The tags of this CreateMaintenanceWindowRequest.
        :type tags: List
        """

        self._tags = tags
